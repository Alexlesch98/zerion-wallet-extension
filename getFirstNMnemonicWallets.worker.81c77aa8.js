!function(){function t(t,e,r,n){Object.defineProperty(t,e,{get:r,set:n,enumerable:!0,configurable:!0})}var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};function r(t){return t&&t.__esModule?t.default:t}var n={},i={},o=e.parcelRequire7f4b;null==o&&((o=function(t){if(t in n)return n[t].exports;if(t in i){var e=i[t];delete i[t];var r={id:t,exports:{}};return n[t]=r,e.call(r.exports,r,r.exports),r.exports}var o=new Error("Cannot find module '"+t+"'");throw o.code="MODULE_NOT_FOUND",o}).register=function(t,e){i[t]=e},e.parcelRequire7f4b=o),o.register("jc6J8",(function(t,e){!function(t,e){"use strict";function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function n(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function i(t,e,r){if(i.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var s;"object"==typeof t?t.exports=i:e.BN=i,i.BN=i,i.wordSize=26;try{s="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:o("e0EMb").Buffer}catch(t){}function a(t,e){var n=t.charCodeAt(e);return n>=48&&n<=57?n-48:n>=65&&n<=70?n-55:n>=97&&n<=102?n-87:void r(!1,"Invalid character in "+t)}function u(t,e,r){var n=a(t,r);return r-1>=e&&(n|=a(t,r-1)<<4),n}function l(t,e,n,i){for(var o=0,s=0,a=Math.min(t.length,n),u=e;u<a;u++){var l=t.charCodeAt(u)-48;o*=i,s=l>=49?l-49+10:l>=17?l-17+10:l,r(l>=0&&s<i,"Invalid character"),o+=s}return o}function c(t,e){t.words=e.words,t.length=e.length,t.negative=e.negative,t.red=e.red}if(i.isBN=function(t){return t instanceof i||null!==t&&"object"==typeof t&&t.constructor.wordSize===i.wordSize&&Array.isArray(t.words)},i.max=function(t,e){return t.cmp(e)>0?t:e},i.min=function(t,e){return t.cmp(e)<0?t:e},i.prototype._init=function(t,e,n){if("number"==typeof t)return this._initNumber(t,e,n);if("object"==typeof t)return this._initArray(t,e,n);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var i=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(i++,this.negative=1),i<t.length&&(16===e?this._parseHex(t,i,n):(this._parseBase(t,e,i),"le"===n&&this._initArray(this.toArray(),e,n)))},i.prototype._initNumber=function(t,e,n){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===n&&this._initArray(this.toArray(),e,n)},i.prototype._initArray=function(t,e,n){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,s,a=0;if("be"===n)for(i=t.length-1,o=0;i>=0;i-=3)s=t[i]|t[i-1]<<8|t[i-2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);else if("le"===n)for(i=0,o=0;i<t.length;i+=3)s=t[i]|t[i+1]<<8|t[i+2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);return this._strip()},i.prototype._parseHex=function(t,e,r){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var i,o=0,s=0;if("be"===r)for(n=t.length-1;n>=e;n-=2)i=u(t,e,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;else for(n=(t.length-e)%2==0?e+1:e;n<t.length;n+=2)i=u(t,e,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;this._strip()},i.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=e)n++;n--,i=i/e|0;for(var o=t.length-r,s=o%n,a=Math.min(o,o-s)+r,u=0,c=r;c<a;c+=n)u=l(t,c,c+n,e),this.imuln(i),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==s){var h=1;for(u=l(t,c,t.length,e),c=0;c<s;c++)h*=e;this.imuln(h),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}this._strip()},i.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},i.prototype._move=function(t){c(t,this)},i.prototype.clone=function(){var t=new i(null);return this.copy(t),t},i.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},i.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},i.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for)try{i.prototype[Symbol.for("nodejs.util.inspect.custom")]=h}catch(t){i.prototype.inspect=h}else i.prototype.inspect=h;function h(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var f=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],d=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],p=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];i.prototype.toString=function(t,e){var n;if(e=0|e||1,16===(t=t||10)||"hex"===t){n="";for(var i=0,o=0,s=0;s<this.length;s++){var a=this.words[s],u=(16777215&(a<<i|o)).toString(16);o=a>>>24-i&16777215,(i+=2)>=26&&(i-=26,s--),n=0!==o||s!==this.length-1?f[6-u.length]+u+n:u+n}for(0!==o&&(n=o.toString(16)+n);n.length%e!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}if(t===(0|t)&&t>=2&&t<=36){var l=d[t],c=p[t];n="";var h=this.clone();for(h.negative=0;!h.isZero();){var g=h.modrn(c).toString(t);n=(h=h.idivn(c)).isZero()?g+n:f[l-g.length]+g+n}for(this.isZero()&&(n="0"+n);n.length%e!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}r(!1,"Base should be between 2 and 36")},i.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},i.prototype.toJSON=function(){return this.toString(16,2)},s&&(i.prototype.toBuffer=function(t,e){return this.toArrayLike(s,t,e)}),i.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)};function g(t,e,r){r.negative=e.negative^t.negative;var n=t.length+e.length|0;r.length=n,n=n-1|0;var i=0|t.words[0],o=0|e.words[0],s=i*o,a=67108863&s,u=s/67108864|0;r.words[0]=a;for(var l=1;l<n;l++){for(var c=u>>>26,h=67108863&u,f=Math.min(l,e.length-1),d=Math.max(0,l-t.length+1);d<=f;d++){var p=l-d|0;c+=(s=(i=0|t.words[p])*(o=0|e.words[d])+h)/67108864|0,h=67108863&s}r.words[l]=0|h,u=0|c}return 0!==u?r.words[l]=0|u:r.length--,r._strip()}i.prototype.toArrayLike=function(t,e,n){this._strip();var i=this.byteLength(),o=n||Math.max(1,i);r(i<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0");var s=function(t,e){return t.allocUnsafe?t.allocUnsafe(e):new t(e)}(t,o);return this["_toArrayLike"+("le"===e?"LE":"BE")](s,i),s},i.prototype._toArrayLikeLE=function(t,e){for(var r=0,n=0,i=0,o=0;i<this.length;i++){var s=this.words[i]<<o|n;t[r++]=255&s,r<t.length&&(t[r++]=s>>8&255),r<t.length&&(t[r++]=s>>16&255),6===o?(r<t.length&&(t[r++]=s>>24&255),n=0,o=0):(n=s>>>24,o+=2)}if(r<t.length)for(t[r++]=n;r<t.length;)t[r++]=0},i.prototype._toArrayLikeBE=function(t,e){for(var r=t.length-1,n=0,i=0,o=0;i<this.length;i++){var s=this.words[i]<<o|n;t[r--]=255&s,r>=0&&(t[r--]=s>>8&255),r>=0&&(t[r--]=s>>16&255),6===o?(r>=0&&(t[r--]=s>>24&255),n=0,o=0):(n=s>>>24,o+=2)}if(r>=0)for(t[r--]=n;r>=0;)t[r--]=0},Math.clz32?i.prototype._countBits=function(t){return 32-Math.clz32(t)}:i.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},i.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&e)&&(r+=13,e>>>=13),0==(127&e)&&(r+=7,e>>>=7),0==(15&e)&&(r+=4,e>>>=4),0==(3&e)&&(r+=2,e>>>=2),0==(1&e)&&r++,r},i.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},i.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},i.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},i.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},i.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},i.prototype.isNeg=function(){return 0!==this.negative},i.prototype.neg=function(){return this.clone().ineg()},i.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},i.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this._strip()},i.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},i.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},i.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},i.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this._strip()},i.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},i.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},i.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},i.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var n=0;n<r.length;n++)this.words[n]=e.words[n]^r.words[n];if(this!==e)for(;n<e.length;n++)this.words[n]=e.words[n];return this.length=e.length,this._strip()},i.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},i.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},i.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},i.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),n=t%26;this._expand(e),n>0&&e--;for(var i=0;i<e;i++)this.words[i]=67108863&~this.words[i];return n>0&&(this.words[i]=~this.words[i]&67108863>>26-n),this._strip()},i.prototype.notn=function(t){return this.clone().inotn(t)},i.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var n=t/26|0,i=t%26;return this._expand(n+1),this.words[n]=e?this.words[n]|1<<i:this.words[n]&~(1<<i),this._strip()},i.prototype.iadd=function(t){var e,r,n;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,n=t):(r=t,n=this);for(var i=0,o=0;o<n.length;o++)e=(0|r.words[o])+(0|n.words[o])+i,this.words[o]=67108863&e,i=e>>>26;for(;0!==i&&o<r.length;o++)e=(0|r.words[o])+i,this.words[o]=67108863&e,i=e>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},i.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},i.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,n,i=this.cmp(t);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=t):(r=t,n=this);for(var o=0,s=0;s<n.length;s++)o=(e=(0|r.words[s])-(0|n.words[s])+o)>>26,this.words[s]=67108863&e;for(;0!==o&&s<r.length;s++)o=(e=(0|r.words[s])+o)>>26,this.words[s]=67108863&e;if(0===o&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this._strip()},i.prototype.sub=function(t){return this.clone().isub(t)};var m=function(t,e,r){var n,i,o,s=t.words,a=e.words,u=r.words,l=0,c=0|s[0],h=8191&c,f=c>>>13,d=0|s[1],p=8191&d,g=d>>>13,m=0|s[2],y=8191&m,v=m>>>13,w=0|s[3],b=8191&w,A=w>>>13,E=0|s[4],k=8191&E,S=E>>>13,x=0|s[5],_=8191&x,P=x>>>13,N=0|s[6],R=8191&N,C=N>>>13,M=0|s[7],I=8191&M,T=M>>>13,O=0|s[8],B=8191&O,L=O>>>13,F=0|s[9],D=8191&F,U=F>>>13,G=0|a[0],q=8191&G,j=G>>>13,z=0|a[1],H=8191&z,K=z>>>13,J=0|a[2],V=8191&J,W=J>>>13,Y=0|a[3],Q=8191&Y,Z=Y>>>13,X=0|a[4],$=8191&X,tt=X>>>13,et=0|a[5],rt=8191&et,nt=et>>>13,it=0|a[6],ot=8191&it,st=it>>>13,at=0|a[7],ut=8191&at,lt=at>>>13,ct=0|a[8],ht=8191&ct,ft=ct>>>13,dt=0|a[9],pt=8191&dt,gt=dt>>>13;r.negative=t.negative^e.negative,r.length=19;var mt=(l+(n=Math.imul(h,q))|0)+((8191&(i=(i=Math.imul(h,j))+Math.imul(f,q)|0))<<13)|0;l=((o=Math.imul(f,j))+(i>>>13)|0)+(mt>>>26)|0,mt&=67108863,n=Math.imul(p,q),i=(i=Math.imul(p,j))+Math.imul(g,q)|0,o=Math.imul(g,j);var yt=(l+(n=n+Math.imul(h,H)|0)|0)+((8191&(i=(i=i+Math.imul(h,K)|0)+Math.imul(f,H)|0))<<13)|0;l=((o=o+Math.imul(f,K)|0)+(i>>>13)|0)+(yt>>>26)|0,yt&=67108863,n=Math.imul(y,q),i=(i=Math.imul(y,j))+Math.imul(v,q)|0,o=Math.imul(v,j),n=n+Math.imul(p,H)|0,i=(i=i+Math.imul(p,K)|0)+Math.imul(g,H)|0,o=o+Math.imul(g,K)|0;var vt=(l+(n=n+Math.imul(h,V)|0)|0)+((8191&(i=(i=i+Math.imul(h,W)|0)+Math.imul(f,V)|0))<<13)|0;l=((o=o+Math.imul(f,W)|0)+(i>>>13)|0)+(vt>>>26)|0,vt&=67108863,n=Math.imul(b,q),i=(i=Math.imul(b,j))+Math.imul(A,q)|0,o=Math.imul(A,j),n=n+Math.imul(y,H)|0,i=(i=i+Math.imul(y,K)|0)+Math.imul(v,H)|0,o=o+Math.imul(v,K)|0,n=n+Math.imul(p,V)|0,i=(i=i+Math.imul(p,W)|0)+Math.imul(g,V)|0,o=o+Math.imul(g,W)|0;var wt=(l+(n=n+Math.imul(h,Q)|0)|0)+((8191&(i=(i=i+Math.imul(h,Z)|0)+Math.imul(f,Q)|0))<<13)|0;l=((o=o+Math.imul(f,Z)|0)+(i>>>13)|0)+(wt>>>26)|0,wt&=67108863,n=Math.imul(k,q),i=(i=Math.imul(k,j))+Math.imul(S,q)|0,o=Math.imul(S,j),n=n+Math.imul(b,H)|0,i=(i=i+Math.imul(b,K)|0)+Math.imul(A,H)|0,o=o+Math.imul(A,K)|0,n=n+Math.imul(y,V)|0,i=(i=i+Math.imul(y,W)|0)+Math.imul(v,V)|0,o=o+Math.imul(v,W)|0,n=n+Math.imul(p,Q)|0,i=(i=i+Math.imul(p,Z)|0)+Math.imul(g,Q)|0,o=o+Math.imul(g,Z)|0;var bt=(l+(n=n+Math.imul(h,$)|0)|0)+((8191&(i=(i=i+Math.imul(h,tt)|0)+Math.imul(f,$)|0))<<13)|0;l=((o=o+Math.imul(f,tt)|0)+(i>>>13)|0)+(bt>>>26)|0,bt&=67108863,n=Math.imul(_,q),i=(i=Math.imul(_,j))+Math.imul(P,q)|0,o=Math.imul(P,j),n=n+Math.imul(k,H)|0,i=(i=i+Math.imul(k,K)|0)+Math.imul(S,H)|0,o=o+Math.imul(S,K)|0,n=n+Math.imul(b,V)|0,i=(i=i+Math.imul(b,W)|0)+Math.imul(A,V)|0,o=o+Math.imul(A,W)|0,n=n+Math.imul(y,Q)|0,i=(i=i+Math.imul(y,Z)|0)+Math.imul(v,Q)|0,o=o+Math.imul(v,Z)|0,n=n+Math.imul(p,$)|0,i=(i=i+Math.imul(p,tt)|0)+Math.imul(g,$)|0,o=o+Math.imul(g,tt)|0;var At=(l+(n=n+Math.imul(h,rt)|0)|0)+((8191&(i=(i=i+Math.imul(h,nt)|0)+Math.imul(f,rt)|0))<<13)|0;l=((o=o+Math.imul(f,nt)|0)+(i>>>13)|0)+(At>>>26)|0,At&=67108863,n=Math.imul(R,q),i=(i=Math.imul(R,j))+Math.imul(C,q)|0,o=Math.imul(C,j),n=n+Math.imul(_,H)|0,i=(i=i+Math.imul(_,K)|0)+Math.imul(P,H)|0,o=o+Math.imul(P,K)|0,n=n+Math.imul(k,V)|0,i=(i=i+Math.imul(k,W)|0)+Math.imul(S,V)|0,o=o+Math.imul(S,W)|0,n=n+Math.imul(b,Q)|0,i=(i=i+Math.imul(b,Z)|0)+Math.imul(A,Q)|0,o=o+Math.imul(A,Z)|0,n=n+Math.imul(y,$)|0,i=(i=i+Math.imul(y,tt)|0)+Math.imul(v,$)|0,o=o+Math.imul(v,tt)|0,n=n+Math.imul(p,rt)|0,i=(i=i+Math.imul(p,nt)|0)+Math.imul(g,rt)|0,o=o+Math.imul(g,nt)|0;var Et=(l+(n=n+Math.imul(h,ot)|0)|0)+((8191&(i=(i=i+Math.imul(h,st)|0)+Math.imul(f,ot)|0))<<13)|0;l=((o=o+Math.imul(f,st)|0)+(i>>>13)|0)+(Et>>>26)|0,Et&=67108863,n=Math.imul(I,q),i=(i=Math.imul(I,j))+Math.imul(T,q)|0,o=Math.imul(T,j),n=n+Math.imul(R,H)|0,i=(i=i+Math.imul(R,K)|0)+Math.imul(C,H)|0,o=o+Math.imul(C,K)|0,n=n+Math.imul(_,V)|0,i=(i=i+Math.imul(_,W)|0)+Math.imul(P,V)|0,o=o+Math.imul(P,W)|0,n=n+Math.imul(k,Q)|0,i=(i=i+Math.imul(k,Z)|0)+Math.imul(S,Q)|0,o=o+Math.imul(S,Z)|0,n=n+Math.imul(b,$)|0,i=(i=i+Math.imul(b,tt)|0)+Math.imul(A,$)|0,o=o+Math.imul(A,tt)|0,n=n+Math.imul(y,rt)|0,i=(i=i+Math.imul(y,nt)|0)+Math.imul(v,rt)|0,o=o+Math.imul(v,nt)|0,n=n+Math.imul(p,ot)|0,i=(i=i+Math.imul(p,st)|0)+Math.imul(g,ot)|0,o=o+Math.imul(g,st)|0;var kt=(l+(n=n+Math.imul(h,ut)|0)|0)+((8191&(i=(i=i+Math.imul(h,lt)|0)+Math.imul(f,ut)|0))<<13)|0;l=((o=o+Math.imul(f,lt)|0)+(i>>>13)|0)+(kt>>>26)|0,kt&=67108863,n=Math.imul(B,q),i=(i=Math.imul(B,j))+Math.imul(L,q)|0,o=Math.imul(L,j),n=n+Math.imul(I,H)|0,i=(i=i+Math.imul(I,K)|0)+Math.imul(T,H)|0,o=o+Math.imul(T,K)|0,n=n+Math.imul(R,V)|0,i=(i=i+Math.imul(R,W)|0)+Math.imul(C,V)|0,o=o+Math.imul(C,W)|0,n=n+Math.imul(_,Q)|0,i=(i=i+Math.imul(_,Z)|0)+Math.imul(P,Q)|0,o=o+Math.imul(P,Z)|0,n=n+Math.imul(k,$)|0,i=(i=i+Math.imul(k,tt)|0)+Math.imul(S,$)|0,o=o+Math.imul(S,tt)|0,n=n+Math.imul(b,rt)|0,i=(i=i+Math.imul(b,nt)|0)+Math.imul(A,rt)|0,o=o+Math.imul(A,nt)|0,n=n+Math.imul(y,ot)|0,i=(i=i+Math.imul(y,st)|0)+Math.imul(v,ot)|0,o=o+Math.imul(v,st)|0,n=n+Math.imul(p,ut)|0,i=(i=i+Math.imul(p,lt)|0)+Math.imul(g,ut)|0,o=o+Math.imul(g,lt)|0;var St=(l+(n=n+Math.imul(h,ht)|0)|0)+((8191&(i=(i=i+Math.imul(h,ft)|0)+Math.imul(f,ht)|0))<<13)|0;l=((o=o+Math.imul(f,ft)|0)+(i>>>13)|0)+(St>>>26)|0,St&=67108863,n=Math.imul(D,q),i=(i=Math.imul(D,j))+Math.imul(U,q)|0,o=Math.imul(U,j),n=n+Math.imul(B,H)|0,i=(i=i+Math.imul(B,K)|0)+Math.imul(L,H)|0,o=o+Math.imul(L,K)|0,n=n+Math.imul(I,V)|0,i=(i=i+Math.imul(I,W)|0)+Math.imul(T,V)|0,o=o+Math.imul(T,W)|0,n=n+Math.imul(R,Q)|0,i=(i=i+Math.imul(R,Z)|0)+Math.imul(C,Q)|0,o=o+Math.imul(C,Z)|0,n=n+Math.imul(_,$)|0,i=(i=i+Math.imul(_,tt)|0)+Math.imul(P,$)|0,o=o+Math.imul(P,tt)|0,n=n+Math.imul(k,rt)|0,i=(i=i+Math.imul(k,nt)|0)+Math.imul(S,rt)|0,o=o+Math.imul(S,nt)|0,n=n+Math.imul(b,ot)|0,i=(i=i+Math.imul(b,st)|0)+Math.imul(A,ot)|0,o=o+Math.imul(A,st)|0,n=n+Math.imul(y,ut)|0,i=(i=i+Math.imul(y,lt)|0)+Math.imul(v,ut)|0,o=o+Math.imul(v,lt)|0,n=n+Math.imul(p,ht)|0,i=(i=i+Math.imul(p,ft)|0)+Math.imul(g,ht)|0,o=o+Math.imul(g,ft)|0;var xt=(l+(n=n+Math.imul(h,pt)|0)|0)+((8191&(i=(i=i+Math.imul(h,gt)|0)+Math.imul(f,pt)|0))<<13)|0;l=((o=o+Math.imul(f,gt)|0)+(i>>>13)|0)+(xt>>>26)|0,xt&=67108863,n=Math.imul(D,H),i=(i=Math.imul(D,K))+Math.imul(U,H)|0,o=Math.imul(U,K),n=n+Math.imul(B,V)|0,i=(i=i+Math.imul(B,W)|0)+Math.imul(L,V)|0,o=o+Math.imul(L,W)|0,n=n+Math.imul(I,Q)|0,i=(i=i+Math.imul(I,Z)|0)+Math.imul(T,Q)|0,o=o+Math.imul(T,Z)|0,n=n+Math.imul(R,$)|0,i=(i=i+Math.imul(R,tt)|0)+Math.imul(C,$)|0,o=o+Math.imul(C,tt)|0,n=n+Math.imul(_,rt)|0,i=(i=i+Math.imul(_,nt)|0)+Math.imul(P,rt)|0,o=o+Math.imul(P,nt)|0,n=n+Math.imul(k,ot)|0,i=(i=i+Math.imul(k,st)|0)+Math.imul(S,ot)|0,o=o+Math.imul(S,st)|0,n=n+Math.imul(b,ut)|0,i=(i=i+Math.imul(b,lt)|0)+Math.imul(A,ut)|0,o=o+Math.imul(A,lt)|0,n=n+Math.imul(y,ht)|0,i=(i=i+Math.imul(y,ft)|0)+Math.imul(v,ht)|0,o=o+Math.imul(v,ft)|0;var _t=(l+(n=n+Math.imul(p,pt)|0)|0)+((8191&(i=(i=i+Math.imul(p,gt)|0)+Math.imul(g,pt)|0))<<13)|0;l=((o=o+Math.imul(g,gt)|0)+(i>>>13)|0)+(_t>>>26)|0,_t&=67108863,n=Math.imul(D,V),i=(i=Math.imul(D,W))+Math.imul(U,V)|0,o=Math.imul(U,W),n=n+Math.imul(B,Q)|0,i=(i=i+Math.imul(B,Z)|0)+Math.imul(L,Q)|0,o=o+Math.imul(L,Z)|0,n=n+Math.imul(I,$)|0,i=(i=i+Math.imul(I,tt)|0)+Math.imul(T,$)|0,o=o+Math.imul(T,tt)|0,n=n+Math.imul(R,rt)|0,i=(i=i+Math.imul(R,nt)|0)+Math.imul(C,rt)|0,o=o+Math.imul(C,nt)|0,n=n+Math.imul(_,ot)|0,i=(i=i+Math.imul(_,st)|0)+Math.imul(P,ot)|0,o=o+Math.imul(P,st)|0,n=n+Math.imul(k,ut)|0,i=(i=i+Math.imul(k,lt)|0)+Math.imul(S,ut)|0,o=o+Math.imul(S,lt)|0,n=n+Math.imul(b,ht)|0,i=(i=i+Math.imul(b,ft)|0)+Math.imul(A,ht)|0,o=o+Math.imul(A,ft)|0;var Pt=(l+(n=n+Math.imul(y,pt)|0)|0)+((8191&(i=(i=i+Math.imul(y,gt)|0)+Math.imul(v,pt)|0))<<13)|0;l=((o=o+Math.imul(v,gt)|0)+(i>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,n=Math.imul(D,Q),i=(i=Math.imul(D,Z))+Math.imul(U,Q)|0,o=Math.imul(U,Z),n=n+Math.imul(B,$)|0,i=(i=i+Math.imul(B,tt)|0)+Math.imul(L,$)|0,o=o+Math.imul(L,tt)|0,n=n+Math.imul(I,rt)|0,i=(i=i+Math.imul(I,nt)|0)+Math.imul(T,rt)|0,o=o+Math.imul(T,nt)|0,n=n+Math.imul(R,ot)|0,i=(i=i+Math.imul(R,st)|0)+Math.imul(C,ot)|0,o=o+Math.imul(C,st)|0,n=n+Math.imul(_,ut)|0,i=(i=i+Math.imul(_,lt)|0)+Math.imul(P,ut)|0,o=o+Math.imul(P,lt)|0,n=n+Math.imul(k,ht)|0,i=(i=i+Math.imul(k,ft)|0)+Math.imul(S,ht)|0,o=o+Math.imul(S,ft)|0;var Nt=(l+(n=n+Math.imul(b,pt)|0)|0)+((8191&(i=(i=i+Math.imul(b,gt)|0)+Math.imul(A,pt)|0))<<13)|0;l=((o=o+Math.imul(A,gt)|0)+(i>>>13)|0)+(Nt>>>26)|0,Nt&=67108863,n=Math.imul(D,$),i=(i=Math.imul(D,tt))+Math.imul(U,$)|0,o=Math.imul(U,tt),n=n+Math.imul(B,rt)|0,i=(i=i+Math.imul(B,nt)|0)+Math.imul(L,rt)|0,o=o+Math.imul(L,nt)|0,n=n+Math.imul(I,ot)|0,i=(i=i+Math.imul(I,st)|0)+Math.imul(T,ot)|0,o=o+Math.imul(T,st)|0,n=n+Math.imul(R,ut)|0,i=(i=i+Math.imul(R,lt)|0)+Math.imul(C,ut)|0,o=o+Math.imul(C,lt)|0,n=n+Math.imul(_,ht)|0,i=(i=i+Math.imul(_,ft)|0)+Math.imul(P,ht)|0,o=o+Math.imul(P,ft)|0;var Rt=(l+(n=n+Math.imul(k,pt)|0)|0)+((8191&(i=(i=i+Math.imul(k,gt)|0)+Math.imul(S,pt)|0))<<13)|0;l=((o=o+Math.imul(S,gt)|0)+(i>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,n=Math.imul(D,rt),i=(i=Math.imul(D,nt))+Math.imul(U,rt)|0,o=Math.imul(U,nt),n=n+Math.imul(B,ot)|0,i=(i=i+Math.imul(B,st)|0)+Math.imul(L,ot)|0,o=o+Math.imul(L,st)|0,n=n+Math.imul(I,ut)|0,i=(i=i+Math.imul(I,lt)|0)+Math.imul(T,ut)|0,o=o+Math.imul(T,lt)|0,n=n+Math.imul(R,ht)|0,i=(i=i+Math.imul(R,ft)|0)+Math.imul(C,ht)|0,o=o+Math.imul(C,ft)|0;var Ct=(l+(n=n+Math.imul(_,pt)|0)|0)+((8191&(i=(i=i+Math.imul(_,gt)|0)+Math.imul(P,pt)|0))<<13)|0;l=((o=o+Math.imul(P,gt)|0)+(i>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,n=Math.imul(D,ot),i=(i=Math.imul(D,st))+Math.imul(U,ot)|0,o=Math.imul(U,st),n=n+Math.imul(B,ut)|0,i=(i=i+Math.imul(B,lt)|0)+Math.imul(L,ut)|0,o=o+Math.imul(L,lt)|0,n=n+Math.imul(I,ht)|0,i=(i=i+Math.imul(I,ft)|0)+Math.imul(T,ht)|0,o=o+Math.imul(T,ft)|0;var Mt=(l+(n=n+Math.imul(R,pt)|0)|0)+((8191&(i=(i=i+Math.imul(R,gt)|0)+Math.imul(C,pt)|0))<<13)|0;l=((o=o+Math.imul(C,gt)|0)+(i>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,n=Math.imul(D,ut),i=(i=Math.imul(D,lt))+Math.imul(U,ut)|0,o=Math.imul(U,lt),n=n+Math.imul(B,ht)|0,i=(i=i+Math.imul(B,ft)|0)+Math.imul(L,ht)|0,o=o+Math.imul(L,ft)|0;var It=(l+(n=n+Math.imul(I,pt)|0)|0)+((8191&(i=(i=i+Math.imul(I,gt)|0)+Math.imul(T,pt)|0))<<13)|0;l=((o=o+Math.imul(T,gt)|0)+(i>>>13)|0)+(It>>>26)|0,It&=67108863,n=Math.imul(D,ht),i=(i=Math.imul(D,ft))+Math.imul(U,ht)|0,o=Math.imul(U,ft);var Tt=(l+(n=n+Math.imul(B,pt)|0)|0)+((8191&(i=(i=i+Math.imul(B,gt)|0)+Math.imul(L,pt)|0))<<13)|0;l=((o=o+Math.imul(L,gt)|0)+(i>>>13)|0)+(Tt>>>26)|0,Tt&=67108863;var Ot=(l+(n=Math.imul(D,pt))|0)+((8191&(i=(i=Math.imul(D,gt))+Math.imul(U,pt)|0))<<13)|0;return l=((o=Math.imul(U,gt))+(i>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,u[0]=mt,u[1]=yt,u[2]=vt,u[3]=wt,u[4]=bt,u[5]=At,u[6]=Et,u[7]=kt,u[8]=St,u[9]=xt,u[10]=_t,u[11]=Pt,u[12]=Nt,u[13]=Rt,u[14]=Ct,u[15]=Mt,u[16]=It,u[17]=Tt,u[18]=Ot,0!==l&&(u[19]=l,r.length++),r};function y(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var n=0,i=0,o=0;o<r.length-1;o++){var s=i;i=0;for(var a=67108863&n,u=Math.min(o,e.length-1),l=Math.max(0,o-t.length+1);l<=u;l++){var c=o-l,h=(0|t.words[c])*(0|e.words[l]),f=67108863&h;a=67108863&(f=f+a|0),i+=(s=(s=s+(h/67108864|0)|0)+(f>>>26)|0)>>>26,s&=67108863}r.words[o]=a,n=s,s=i}return 0!==n?r.words[o]=n:r.length--,r._strip()}function v(t,e,r){return y(t,e,r)}function w(t,e){this.x=t,this.y=e}Math.imul||(m=g),i.prototype.mulTo=function(t,e){var r=this.length+t.length;return 10===this.length&&10===t.length?m(this,t,e):r<63?g(this,t,e):r<1024?y(this,t,e):v(this,t,e)},w.prototype.makeRBT=function(t){for(var e=new Array(t),r=i.prototype._countBits(t)-1,n=0;n<t;n++)e[n]=this.revBin(n,r,t);return e},w.prototype.revBin=function(t,e,r){if(0===t||t===r-1)return t;for(var n=0,i=0;i<e;i++)n|=(1&t)<<e-i-1,t>>=1;return n},w.prototype.permute=function(t,e,r,n,i,o){for(var s=0;s<o;s++)n[s]=e[t[s]],i[s]=r[t[s]]},w.prototype.transform=function(t,e,r,n,i,o){this.permute(o,t,e,r,n,i);for(var s=1;s<i;s<<=1)for(var a=s<<1,u=Math.cos(2*Math.PI/a),l=Math.sin(2*Math.PI/a),c=0;c<i;c+=a)for(var h=u,f=l,d=0;d<s;d++){var p=r[c+d],g=n[c+d],m=r[c+d+s],y=n[c+d+s],v=h*m-f*y;y=h*y+f*m,m=v,r[c+d]=p+m,n[c+d]=g+y,r[c+d+s]=p-m,n[c+d+s]=g-y,d!==a&&(v=u*h-l*f,f=u*f+l*h,h=v)}},w.prototype.guessLen13b=function(t,e){var r=1|Math.max(e,t),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},w.prototype.conjugate=function(t,e,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=t[n];t[n]=t[r-n-1],t[r-n-1]=i,i=e[n],e[n]=-e[r-n-1],e[r-n-1]=-i}},w.prototype.normalize13b=function(t,e){for(var r=0,n=0;n<e/2;n++){var i=8192*Math.round(t[2*n+1]/e)+Math.round(t[2*n]/e)+r;t[n]=67108863&i,r=i<67108864?0:i/67108864|0}return t},w.prototype.convert13b=function(t,e,n,i){for(var o=0,s=0;s<e;s++)o+=0|t[s],n[2*s]=8191&o,o>>>=13,n[2*s+1]=8191&o,o>>>=13;for(s=2*e;s<i;++s)n[s]=0;r(0===o),r(0==(-8192&o))},w.prototype.stub=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e},w.prototype.mulp=function(t,e,r){var n=2*this.guessLen13b(t.length,e.length),i=this.makeRBT(n),o=this.stub(n),s=new Array(n),a=new Array(n),u=new Array(n),l=new Array(n),c=new Array(n),h=new Array(n),f=r.words;f.length=n,this.convert13b(t.words,t.length,s,n),this.convert13b(e.words,e.length,l,n),this.transform(s,o,a,u,n,i),this.transform(l,o,c,h,n,i);for(var d=0;d<n;d++){var p=a[d]*c[d]-u[d]*h[d];u[d]=a[d]*h[d]+u[d]*c[d],a[d]=p}return this.conjugate(a,u,n),this.transform(a,u,f,o,n,i),this.conjugate(f,o,n),this.normalize13b(f,n),r.negative=t.negative^e.negative,r.length=t.length+e.length,r._strip()},i.prototype.mul=function(t){var e=new i(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},i.prototype.mulf=function(t){var e=new i(null);return e.words=new Array(this.length+t.length),v(this,t,e)},i.prototype.imul=function(t){return this.clone().mulTo(t,this)},i.prototype.imuln=function(t){var e=t<0;e&&(t=-t),r("number"==typeof t),r(t<67108864);for(var n=0,i=0;i<this.length;i++){var o=(0|this.words[i])*t,s=(67108863&o)+(67108863&n);n>>=26,n+=o/67108864|0,n+=s>>>26,this.words[i]=67108863&s}return 0!==n&&(this.words[i]=n,this.length++),e?this.ineg():this},i.prototype.muln=function(t){return this.clone().imuln(t)},i.prototype.sqr=function(){return this.mul(this)},i.prototype.isqr=function(){return this.imul(this.clone())},i.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var n=r/26|0,i=r%26;e[r]=t.words[n]>>>i&1}return e}(t);if(0===e.length)return new i(1);for(var r=this,n=0;n<e.length&&0===e[n];n++,r=r.sqr());if(++n<e.length)for(var o=r.sqr();n<e.length;n++,o=o.sqr())0!==e[n]&&(r=r.mul(o));return r},i.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,n=t%26,i=(t-n)/26,o=67108863>>>26-n<<26-n;if(0!==n){var s=0;for(e=0;e<this.length;e++){var a=this.words[e]&o,u=(0|this.words[e])-a<<n;this.words[e]=u|s,s=a>>>26-n}s&&(this.words[e]=s,this.length++)}if(0!==i){for(e=this.length-1;e>=0;e--)this.words[e+i]=this.words[e];for(e=0;e<i;e++)this.words[e]=0;this.length+=i}return this._strip()},i.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},i.prototype.iushrn=function(t,e,n){var i;r("number"==typeof t&&t>=0),i=e?(e-e%26)/26:0;var o=t%26,s=Math.min((t-o)/26,this.length),a=67108863^67108863>>>o<<o,u=n;if(i-=s,i=Math.max(0,i),u){for(var l=0;l<s;l++)u.words[l]=this.words[l];u.length=s}if(0===s);else if(this.length>s)for(this.length-=s,l=0;l<this.length;l++)this.words[l]=this.words[l+s];else this.words[0]=0,this.length=1;var c=0;for(l=this.length-1;l>=0&&(0!==c||l>=i);l--){var h=0|this.words[l];this.words[l]=c<<26-o|h>>>o,c=h&a}return u&&0!==c&&(u.words[u.length++]=c),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},i.prototype.ishrn=function(t,e,n){return r(0===this.negative),this.iushrn(t,e,n)},i.prototype.shln=function(t){return this.clone().ishln(t)},i.prototype.ushln=function(t){return this.clone().iushln(t)},i.prototype.shrn=function(t){return this.clone().ishrn(t)},i.prototype.ushrn=function(t){return this.clone().iushrn(t)},i.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,n=(t-e)/26,i=1<<e;return!(this.length<=n)&&!!(this.words[n]&i)},i.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,n=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=n)return this;if(0!==e&&n++,this.length=Math.min(n,this.length),0!==e){var i=67108863^67108863>>>e<<e;this.words[this.length-1]&=i}return this._strip()},i.prototype.maskn=function(t){return this.clone().imaskn(t)},i.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<=t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},i.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},i.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this._strip()},i.prototype.addn=function(t){return this.clone().iaddn(t)},i.prototype.subn=function(t){return this.clone().isubn(t)},i.prototype.iabs=function(){return this.negative=0,this},i.prototype.abs=function(){return this.clone().iabs()},i.prototype._ishlnsubmul=function(t,e,n){var i,o,s=t.length+n;this._expand(s);var a=0;for(i=0;i<t.length;i++){o=(0|this.words[i+n])+a;var u=(0|t.words[i])*e;a=((o-=67108863&u)>>26)-(u/67108864|0),this.words[i+n]=67108863&o}for(;i<this.length-n;i++)a=(o=(0|this.words[i+n])+a)>>26,this.words[i+n]=67108863&o;if(0===a)return this._strip();for(r(-1===a),a=0,i=0;i<this.length;i++)a=(o=-(0|this.words[i])+a)>>26,this.words[i]=67108863&o;return this.negative=1,this._strip()},i.prototype._wordDiv=function(t,e){var r=(this.length,t.length),n=this.clone(),o=t,s=0|o.words[o.length-1];0!==(r=26-this._countBits(s))&&(o=o.ushln(r),n.iushln(r),s=0|o.words[o.length-1]);var a,u=n.length-o.length;if("mod"!==e){(a=new i(null)).length=u+1,a.words=new Array(a.length);for(var l=0;l<a.length;l++)a.words[l]=0}var c=n.clone()._ishlnsubmul(o,1,u);0===c.negative&&(n=c,a&&(a.words[u]=1));for(var h=u-1;h>=0;h--){var f=67108864*(0|n.words[o.length+h])+(0|n.words[o.length+h-1]);for(f=Math.min(f/s|0,67108863),n._ishlnsubmul(o,f,h);0!==n.negative;)f--,n.negative=0,n._ishlnsubmul(o,1,h),n.isZero()||(n.negative^=1);a&&(a.words[h]=f)}return a&&a._strip(),n._strip(),"div"!==e&&0!==r&&n.iushrn(r),{div:a||null,mod:n}},i.prototype.divmod=function(t,e,n){return r(!t.isZero()),this.isZero()?{div:new i(0),mod:new i(0)}:0!==this.negative&&0===t.negative?(a=this.neg().divmod(t,e),"mod"!==e&&(o=a.div.neg()),"div"!==e&&(s=a.mod.neg(),n&&0!==s.negative&&s.iadd(t)),{div:o,mod:s}):0===this.negative&&0!==t.negative?(a=this.divmod(t.neg(),e),"mod"!==e&&(o=a.div.neg()),{div:o,mod:a.mod}):0!=(this.negative&t.negative)?(a=this.neg().divmod(t.neg(),e),"div"!==e&&(s=a.mod.neg(),n&&0!==s.negative&&s.isub(t)),{div:a.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new i(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new i(this.modrn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new i(this.modrn(t.words[0]))}:this._wordDiv(t,e);var o,s,a},i.prototype.div=function(t){return this.divmod(t,"div",!1).div},i.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},i.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},i.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,n=t.ushrn(1),i=t.andln(1),o=r.cmp(n);return o<0||1===i&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},i.prototype.modrn=function(t){var e=t<0;e&&(t=-t),r(t<=67108863);for(var n=67108864%t,i=0,o=this.length-1;o>=0;o--)i=(n*i+(0|this.words[o]))%t;return e?-i:i},i.prototype.modn=function(t){return this.modrn(t)},i.prototype.idivn=function(t){var e=t<0;e&&(t=-t),r(t<=67108863);for(var n=0,i=this.length-1;i>=0;i--){var o=(0|this.words[i])+67108864*n;this.words[i]=o/t|0,n=o%t}return this._strip(),e?this.ineg():this},i.prototype.divn=function(t){return this.clone().idivn(t)},i.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,n=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var o=new i(1),s=new i(0),a=new i(0),u=new i(1),l=0;e.isEven()&&n.isEven();)e.iushrn(1),n.iushrn(1),++l;for(var c=n.clone(),h=e.clone();!e.isZero();){for(var f=0,d=1;0==(e.words[0]&d)&&f<26;++f,d<<=1);if(f>0)for(e.iushrn(f);f-- >0;)(o.isOdd()||s.isOdd())&&(o.iadd(c),s.isub(h)),o.iushrn(1),s.iushrn(1);for(var p=0,g=1;0==(n.words[0]&g)&&p<26;++p,g<<=1);if(p>0)for(n.iushrn(p);p-- >0;)(a.isOdd()||u.isOdd())&&(a.iadd(c),u.isub(h)),a.iushrn(1),u.iushrn(1);e.cmp(n)>=0?(e.isub(n),o.isub(a),s.isub(u)):(n.isub(e),a.isub(o),u.isub(s))}return{a:a,b:u,gcd:n.iushln(l)}},i.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,n=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var o,s=new i(1),a=new i(0),u=n.clone();e.cmpn(1)>0&&n.cmpn(1)>0;){for(var l=0,c=1;0==(e.words[0]&c)&&l<26;++l,c<<=1);if(l>0)for(e.iushrn(l);l-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);for(var h=0,f=1;0==(n.words[0]&f)&&h<26;++h,f<<=1);if(h>0)for(n.iushrn(h);h-- >0;)a.isOdd()&&a.iadd(u),a.iushrn(1);e.cmp(n)>=0?(e.isub(n),s.isub(a)):(n.isub(e),a.isub(s))}return(o=0===e.cmpn(1)?s:a).cmpn(0)<0&&o.iadd(t),o},i.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var n=0;e.isEven()&&r.isEven();n++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=e.cmp(r);if(i<0){var o=e;e=r,r=o}else if(0===i||0===r.cmpn(1))break;e.isub(r)}return r.iushln(n)},i.prototype.invm=function(t){return this.egcd(t).a.umod(t)},i.prototype.isEven=function(){return 0==(1&this.words[0])},i.prototype.isOdd=function(){return 1==(1&this.words[0])},i.prototype.andln=function(t){return this.words[0]&t},i.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,n=(t-e)/26,i=1<<e;if(this.length<=n)return this._expand(n+1),this.words[n]|=i,this;for(var o=i,s=n;0!==o&&s<this.length;s++){var a=0|this.words[s];o=(a+=o)>>>26,a&=67108863,this.words[s]=a}return 0!==o&&(this.words[s]=o,this.length++),this},i.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},i.prototype.cmpn=function(t){var e,n=t<0;if(0!==this.negative&&!n)return-1;if(0===this.negative&&n)return 1;if(this._strip(),this.length>1)e=1;else{n&&(t=-t),r(t<=67108863,"Number is too big");var i=0|this.words[0];e=i===t?0:i<t?-1:1}return 0!==this.negative?0|-e:e},i.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},i.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|t.words[r];if(n!==i){n<i?e=-1:n>i&&(e=1);break}}return e},i.prototype.gtn=function(t){return 1===this.cmpn(t)},i.prototype.gt=function(t){return 1===this.cmp(t)},i.prototype.gten=function(t){return this.cmpn(t)>=0},i.prototype.gte=function(t){return this.cmp(t)>=0},i.prototype.ltn=function(t){return-1===this.cmpn(t)},i.prototype.lt=function(t){return-1===this.cmp(t)},i.prototype.lten=function(t){return this.cmpn(t)<=0},i.prototype.lte=function(t){return this.cmp(t)<=0},i.prototype.eqn=function(t){return 0===this.cmpn(t)},i.prototype.eq=function(t){return 0===this.cmp(t)},i.red=function(t){return new _(t)},i.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},i.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},i.prototype._forceRed=function(t){return this.red=t,this},i.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},i.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},i.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},i.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},i.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},i.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},i.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},i.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},i.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},i.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},i.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},i.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},i.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},i.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var b={k256:null,p224:null,p192:null,p25519:null};function A(t,e){this.name=t,this.p=new i(e,16),this.n=this.p.bitLength(),this.k=new i(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function E(){A.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function k(){A.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function S(){A.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function x(){A.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function _(t){if("string"==typeof t){var e=i._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function P(t){_.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new i(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}A.prototype._tmp=function(){var t=new i(null);return t.words=new Array(Math.ceil(this.n/13)),t},A.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var n=e<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},A.prototype.split=function(t,e){t.iushrn(this.n,0,e)},A.prototype.imulK=function(t){return t.imul(this.k)},n(E,A),E.prototype.split=function(t,e){for(var r=4194303,n=Math.min(t.length,9),i=0;i<n;i++)e.words[i]=t.words[i];if(e.length=n,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(e.words[e.length++]=o&r,i=10;i<t.length;i++){var s=0|t.words[i];t.words[i-10]=(s&r)<<4|o>>>22,o=s}o>>>=22,t.words[i-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},E.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var n=0|t.words[r];e+=977*n,t.words[r]=67108863&e,e=64*n+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},n(k,A),n(S,A),n(x,A),x.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var n=19*(0|t.words[r])+e,i=67108863&n;n>>>=26,t.words[r]=i,e=n}return 0!==e&&(t.words[t.length++]=e),t},i._prime=function(t){if(b[t])return b[t];var e;if("k256"===t)e=new E;else if("p224"===t)e=new k;else if("p192"===t)e=new S;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new x}return b[t]=e,e},_.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},_.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},_.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):(c(t,t.umod(this.m)._forceRed(this)),t)},_.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},_.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},_.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},_.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},_.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},_.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},_.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},_.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},_.prototype.isqr=function(t){return this.imul(t,t.clone())},_.prototype.sqr=function(t){return this.mul(t,t)},_.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var n=this.m.add(new i(1)).iushrn(2);return this.pow(t,n)}for(var o=this.m.subn(1),s=0;!o.isZero()&&0===o.andln(1);)s++,o.iushrn(1);r(!o.isZero());var a=new i(1).toRed(this),u=a.redNeg(),l=this.m.subn(1).iushrn(1),c=this.m.bitLength();for(c=new i(2*c*c).toRed(this);0!==this.pow(c,l).cmp(u);)c.redIAdd(u);for(var h=this.pow(c,o),f=this.pow(t,o.addn(1).iushrn(1)),d=this.pow(t,o),p=s;0!==d.cmp(a);){for(var g=d,m=0;0!==g.cmp(a);m++)g=g.redSqr();r(m<p);var y=this.pow(h,new i(1).iushln(p-m-1));f=f.redMul(y),h=y.redSqr(),d=d.redMul(h),p=m}return f},_.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},_.prototype.pow=function(t,e){if(e.isZero())return new i(1).toRed(this);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new i(1).toRed(this),r[1]=t;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],t);var o=r[0],s=0,a=0,u=e.bitLength()%26;for(0===u&&(u=26),n=e.length-1;n>=0;n--){for(var l=e.words[n],c=u-1;c>=0;c--){var h=l>>c&1;o!==r[0]&&(o=this.sqr(o)),0!==h||0!==s?(s<<=1,s|=h,(4===++a||0===n&&0===c)&&(o=this.mul(o,r[s]),a=0,s=0)):a=0}u=26}return o},_.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},_.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},i.mont=function(t){return new P(t)},n(P,_),P.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},P.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},P.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},P.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new i(0)._forceRed(this);var r=t.mul(e),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),o=r.isub(n).iushrn(this.shift),s=o;return o.cmp(this.m)>=0?s=o.isub(this.m):o.cmpn(0)<0&&(s=o.iadd(this.m)),s._forceRed(this)},P.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t,this)})),o.register("e0EMb",(function(t,e){})),o.register("7ZdUu",(function(e,r){t(e.exports,"encode",(function(){return h})),t(e.exports,"decode",(function(){return p}));var n=o("3Yhqu"),i=o("2rINa"),s=o("5LLyF");const a=new(0,i.Logger)(s.version);function u(t){const e=[];for(;t;)e.unshift(255&t),t>>=8;return e}function l(t,e,r){let n=0;for(let i=0;i<r;i++)n=256*n+t[e+i];return n}function c(t){if(Array.isArray(t)){let e=[];if(t.forEach((function(t){e=e.concat(c(t))})),e.length<=55)return e.unshift(192+e.length),e;const r=u(e.length);return r.unshift(247+r.length),r.concat(e)}(0,n.isBytesLike)(t)||a.throwArgumentError("RLP object must be BytesLike","object",t);const e=Array.prototype.slice.call((0,n.arrayify)(t));if(1===e.length&&e[0]<=127)return e;if(e.length<=55)return e.unshift(128+e.length),e;const r=u(e.length);return r.unshift(183+r.length),r.concat(e)}function h(t){return(0,n.hexlify)(c(t))}function f(t,e,r,n){const o=[];for(;r<e+1+n;){const s=d(t,r);o.push(s.result),(r+=s.consumed)>e+1+n&&a.throwError("child data too short",i.Logger.errors.BUFFER_OVERRUN,{})}return{consumed:1+n,result:o}}function d(t,e){if(0===t.length&&a.throwError("data too short",i.Logger.errors.BUFFER_OVERRUN,{}),t[e]>=248){const r=t[e]-247;e+1+r>t.length&&a.throwError("data short segment too short",i.Logger.errors.BUFFER_OVERRUN,{});const n=l(t,e+1,r);return e+1+r+n>t.length&&a.throwError("data long segment too short",i.Logger.errors.BUFFER_OVERRUN,{}),f(t,e,e+1+r,r+n)}if(t[e]>=192){const r=t[e]-192;return e+1+r>t.length&&a.throwError("data array too short",i.Logger.errors.BUFFER_OVERRUN,{}),f(t,e,e+1,r)}if(t[e]>=184){const r=t[e]-183;e+1+r>t.length&&a.throwError("data array too short",i.Logger.errors.BUFFER_OVERRUN,{});const o=l(t,e+1,r);e+1+r+o>t.length&&a.throwError("data array too short",i.Logger.errors.BUFFER_OVERRUN,{});return{consumed:1+r+o,result:(0,n.hexlify)(t.slice(e+1+r,e+1+r+o))}}if(t[e]>=128){const r=t[e]-128;e+1+r>t.length&&a.throwError("data too short",i.Logger.errors.BUFFER_OVERRUN,{});return{consumed:1+r,result:(0,n.hexlify)(t.slice(e+1,e+1+r))}}return{consumed:1,result:(0,n.hexlify)(t[e])}}function p(t){const e=(0,n.arrayify)(t),r=d(e,0);return r.consumed!==e.length&&a.throwArgumentError("invalid rlp data","data",t),r.result}})),o.register("3Yhqu",(function(e,r){t(e.exports,"isBytesLike",(function(){return l})),t(e.exports,"isHexString",(function(){return m})),t(e.exports,"isBytes",(function(){return h})),t(e.exports,"arrayify",(function(){return f})),t(e.exports,"concat",(function(){return d})),t(e.exports,"stripZeros",(function(){return p})),t(e.exports,"zeroPad",(function(){return g})),t(e.exports,"hexlify",(function(){return v})),t(e.exports,"hexDataLength",(function(){return w})),t(e.exports,"hexDataSlice",(function(){return b})),t(e.exports,"hexConcat",(function(){return A})),t(e.exports,"hexValue",(function(){return E})),t(e.exports,"hexStripZeros",(function(){return k})),t(e.exports,"hexZeroPad",(function(){return S})),t(e.exports,"splitSignature",(function(){return x})),t(e.exports,"joinSignature",(function(){return _}));var n=o("2rINa"),i=o("d2nMw");const s=new(0,n.Logger)(i.version);function a(t){return!!t.toHexString}function u(t){return t.slice||(t.slice=function(){const e=Array.prototype.slice.call(arguments);return u(new Uint8Array(Array.prototype.slice.apply(t,e)))}),t}function l(t){return m(t)&&!(t.length%2)||h(t)}function c(t){return"number"==typeof t&&t==t&&t%1==0}function h(t){if(null==t)return!1;if(t.constructor===Uint8Array)return!0;if("string"==typeof t)return!1;if(!c(t.length)||t.length<0)return!1;for(let e=0;e<t.length;e++){const r=t[e];if(!c(r)||r<0||r>=256)return!1}return!0}function f(t,e){if(e||(e={}),"number"==typeof t){s.checkSafeUint53(t,"invalid arrayify value");const e=[];for(;t;)e.unshift(255&t),t=parseInt(String(t/256));return 0===e.length&&e.push(0),u(new Uint8Array(e))}if(e.allowMissingPrefix&&"string"==typeof t&&"0x"!==t.substring(0,2)&&(t="0x"+t),a(t)&&(t=t.toHexString()),m(t)){let r=t.substring(2);r.length%2&&("left"===e.hexPad?r="0"+r:"right"===e.hexPad?r+="0":s.throwArgumentError("hex data is odd-length","value",t));const n=[];for(let t=0;t<r.length;t+=2)n.push(parseInt(r.substring(t,t+2),16));return u(new Uint8Array(n))}return h(t)?u(new Uint8Array(t)):s.throwArgumentError("invalid arrayify value","value",t)}function d(t){const e=t.map((t=>f(t))),r=e.reduce(((t,e)=>t+e.length),0),n=new Uint8Array(r);return e.reduce(((t,e)=>(n.set(e,t),t+e.length)),0),u(n)}function p(t){let e=f(t);if(0===e.length)return e;let r=0;for(;r<e.length&&0===e[r];)r++;return r&&(e=e.slice(r)),e}function g(t,e){(t=f(t)).length>e&&s.throwArgumentError("value out of range","value",arguments[0]);const r=new Uint8Array(e);return r.set(t,e-t.length),u(r)}function m(t,e){return!("string"!=typeof t||!t.match(/^0x[0-9A-Fa-f]*$/))&&(!e||t.length===2+2*e)}const y="0123456789abcdef";function v(t,e){if(e||(e={}),"number"==typeof t){s.checkSafeUint53(t,"invalid hexlify value");let e="";for(;t;)e=y[15&t]+e,t=Math.floor(t/16);return e.length?(e.length%2&&(e="0"+e),"0x"+e):"0x00"}if("bigint"==typeof t)return(t=t.toString(16)).length%2?"0x0"+t:"0x"+t;if(e.allowMissingPrefix&&"string"==typeof t&&"0x"!==t.substring(0,2)&&(t="0x"+t),a(t))return t.toHexString();if(m(t))return t.length%2&&("left"===e.hexPad?t="0x0"+t.substring(2):"right"===e.hexPad?t+="0":s.throwArgumentError("hex data is odd-length","value",t)),t.toLowerCase();if(h(t)){let e="0x";for(let r=0;r<t.length;r++){let n=t[r];e+=y[(240&n)>>4]+y[15&n]}return e}return s.throwArgumentError("invalid hexlify value","value",t)}function w(t){if("string"!=typeof t)t=v(t);else if(!m(t)||t.length%2)return null;return(t.length-2)/2}function b(t,e,r){return"string"!=typeof t?t=v(t):(!m(t)||t.length%2)&&s.throwArgumentError("invalid hexData","value",t),e=2+2*e,null!=r?"0x"+t.substring(e,2+2*r):"0x"+t.substring(e)}function A(t){let e="0x";return t.forEach((t=>{e+=v(t).substring(2)})),e}function E(t){const e=k(v(t,{hexPad:"left"}));return"0x"===e?"0x0":e}function k(t){"string"!=typeof t&&(t=v(t)),m(t)||s.throwArgumentError("invalid hex string","value",t),t=t.substring(2);let e=0;for(;e<t.length&&"0"===t[e];)e++;return"0x"+t.substring(e)}function S(t,e){for("string"!=typeof t?t=v(t):m(t)||s.throwArgumentError("invalid hex string","value",t),t.length>2*e+2&&s.throwArgumentError("value out of range","value",arguments[1]);t.length<2*e+2;)t="0x0"+t.substring(2);return t}function x(t){const e={r:"0x",s:"0x",_vs:"0x",recoveryParam:0,v:0,yParityAndS:"0x",compact:"0x"};if(l(t)){let r=f(t);64===r.length?(e.v=27+(r[32]>>7),r[32]&=127,e.r=v(r.slice(0,32)),e.s=v(r.slice(32,64))):65===r.length?(e.r=v(r.slice(0,32)),e.s=v(r.slice(32,64)),e.v=r[64]):s.throwArgumentError("invalid signature string","signature",t),e.v<27&&(0===e.v||1===e.v?e.v+=27:s.throwArgumentError("signature invalid v byte","signature",t)),e.recoveryParam=1-e.v%2,e.recoveryParam&&(r[32]|=128),e._vs=v(r.slice(32,64))}else{if(e.r=t.r,e.s=t.s,e.v=t.v,e.recoveryParam=t.recoveryParam,e._vs=t._vs,null!=e._vs){const r=g(f(e._vs),32);e._vs=v(r);const n=r[0]>=128?1:0;null==e.recoveryParam?e.recoveryParam=n:e.recoveryParam!==n&&s.throwArgumentError("signature recoveryParam mismatch _vs","signature",t),r[0]&=127;const i=v(r);null==e.s?e.s=i:e.s!==i&&s.throwArgumentError("signature v mismatch _vs","signature",t)}if(null==e.recoveryParam)null==e.v?s.throwArgumentError("signature missing v and recoveryParam","signature",t):0===e.v||1===e.v?e.recoveryParam=e.v:e.recoveryParam=1-e.v%2;else if(null==e.v)e.v=27+e.recoveryParam;else{const r=0===e.v||1===e.v?e.v:1-e.v%2;e.recoveryParam!==r&&s.throwArgumentError("signature recoveryParam mismatch v","signature",t)}null!=e.r&&m(e.r)?e.r=S(e.r,32):s.throwArgumentError("signature missing or invalid r","signature",t),null!=e.s&&m(e.s)?e.s=S(e.s,32):s.throwArgumentError("signature missing or invalid s","signature",t);const r=f(e.s);r[0]>=128&&s.throwArgumentError("signature s out of range","signature",t),e.recoveryParam&&(r[0]|=128);const n=v(r);e._vs&&(m(e._vs)||s.throwArgumentError("signature invalid _vs","signature",t),e._vs=S(e._vs,32)),null==e._vs?e._vs=n:e._vs!==n&&s.throwArgumentError("signature _vs mismatch v and s","signature",t)}return e.yParityAndS=e._vs,e.compact=e.r+e.yParityAndS.substring(2),e}function _(t){return v(d([(t=x(t)).r,t.s,t.recoveryParam?"0x1c":"0x1b"]))}})),o.register("2rINa",(function(e,r){t(e.exports,"ErrorCode",(function(){return d})),t(e.exports,"Logger",(function(){return m}));var n=o("1XHjl");let i=!1,s=!1;const a={debug:1,default:2,info:2,warning:3,error:4,off:5};let u=a.default,l=null;const c=function(){try{const t=[];if(["NFD","NFC","NFKD","NFKC"].forEach((e=>{try{if("test"!=="test".normalize(e))throw new Error("bad normalize")}catch(r){t.push(e)}})),t.length)throw new Error("missing "+t.join(", "));if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken implementation")}catch(t){return t.message}return null}();var h,f,d,p;(f=h||(h={})).DEBUG="DEBUG",f.INFO="INFO",f.WARNING="WARNING",f.ERROR="ERROR",f.OFF="OFF",(p=d||(d={})).UNKNOWN_ERROR="UNKNOWN_ERROR",p.NOT_IMPLEMENTED="NOT_IMPLEMENTED",p.UNSUPPORTED_OPERATION="UNSUPPORTED_OPERATION",p.NETWORK_ERROR="NETWORK_ERROR",p.SERVER_ERROR="SERVER_ERROR",p.TIMEOUT="TIMEOUT",p.BUFFER_OVERRUN="BUFFER_OVERRUN",p.NUMERIC_FAULT="NUMERIC_FAULT",p.MISSING_NEW="MISSING_NEW",p.INVALID_ARGUMENT="INVALID_ARGUMENT",p.MISSING_ARGUMENT="MISSING_ARGUMENT",p.UNEXPECTED_ARGUMENT="UNEXPECTED_ARGUMENT",p.CALL_EXCEPTION="CALL_EXCEPTION",p.INSUFFICIENT_FUNDS="INSUFFICIENT_FUNDS",p.NONCE_EXPIRED="NONCE_EXPIRED",p.REPLACEMENT_UNDERPRICED="REPLACEMENT_UNDERPRICED",p.UNPREDICTABLE_GAS_LIMIT="UNPREDICTABLE_GAS_LIMIT",p.TRANSACTION_REPLACED="TRANSACTION_REPLACED",p.ACTION_REJECTED="ACTION_REJECTED";const g="0123456789abcdef";class m{_log(t,e){const r=t.toLowerCase();null==a[r]&&this.throwArgumentError("invalid log level name","logLevel",t),u>a[r]||console.log.apply(console,e)}debug(...t){this._log(m.levels.DEBUG,t)}info(...t){this._log(m.levels.INFO,t)}warn(...t){this._log(m.levels.WARNING,t)}makeError(t,e,r){if(s)return this.makeError("censored error",e,{});e||(e=m.errors.UNKNOWN_ERROR),r||(r={});const n=[];Object.keys(r).forEach((t=>{const e=r[t];try{if(e instanceof Uint8Array){let r="";for(let t=0;t<e.length;t++)r+=g[e[t]>>4],r+=g[15&e[t]];n.push(t+"=Uint8Array(0x"+r+")")}else n.push(t+"="+JSON.stringify(e))}catch(e){n.push(t+"="+JSON.stringify(r[t].toString()))}})),n.push(`code=${e}`),n.push(`version=${this.version}`);const i=t;let o="";switch(e){case d.NUMERIC_FAULT:{o="NUMERIC_FAULT";const e=t;switch(e){case"overflow":case"underflow":case"division-by-zero":o+="-"+e;break;case"negative-power":case"negative-width":o+="-unsupported";break;case"unbound-bitwise-result":o+="-unbound-result"}break}case d.CALL_EXCEPTION:case d.INSUFFICIENT_FUNDS:case d.MISSING_NEW:case d.NONCE_EXPIRED:case d.REPLACEMENT_UNDERPRICED:case d.TRANSACTION_REPLACED:case d.UNPREDICTABLE_GAS_LIMIT:o=e}o&&(t+=" [ See: https://links.ethers.org/v5-errors-"+o+" ]"),n.length&&(t+=" ("+n.join(", ")+")");const a=new Error(t);return a.reason=i,a.code=e,Object.keys(r).forEach((function(t){a[t]=r[t]})),a}throwError(t,e,r){throw this.makeError(t,e,r)}throwArgumentError(t,e,r){return this.throwError(t,m.errors.INVALID_ARGUMENT,{argument:e,value:r})}assert(t,e,r,n){t||this.throwError(e,r,n)}assertArgument(t,e,r,n){t||this.throwArgumentError(e,r,n)}checkNormalize(t){null==t&&(t="platform missing String.prototype.normalize"),c&&this.throwError("platform missing String.prototype.normalize",m.errors.UNSUPPORTED_OPERATION,{operation:"String.prototype.normalize",form:c})}checkSafeUint53(t,e){"number"==typeof t&&(null==e&&(e="value not safe"),(t<0||t>=9007199254740991)&&this.throwError(e,m.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"out-of-safe-range",value:t}),t%1&&this.throwError(e,m.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"non-integer",value:t}))}checkArgumentCount(t,e,r){r=r?": "+r:"",t<e&&this.throwError("missing argument"+r,m.errors.MISSING_ARGUMENT,{count:t,expectedCount:e}),t>e&&this.throwError("too many arguments"+r,m.errors.UNEXPECTED_ARGUMENT,{count:t,expectedCount:e})}checkNew(t,e){t!==Object&&null!=t||this.throwError("missing new",m.errors.MISSING_NEW,{name:e.name})}checkAbstract(t,e){t===e?this.throwError("cannot instantiate abstract class "+JSON.stringify(e.name)+" directly; use a sub-class",m.errors.UNSUPPORTED_OPERATION,{name:t.name,operation:"new"}):t!==Object&&null!=t||this.throwError("missing new",m.errors.MISSING_NEW,{name:e.name})}static globalLogger(){return l||(l=new m(n.version)),l}static setCensorship(t,e){if(!t&&e&&this.globalLogger().throwError("cannot permanently disable censorship",m.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"}),i){if(!t)return;this.globalLogger().throwError("error censorship permanent",m.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"})}s=!!t,i=!!e}static setLogLevel(t){const e=a[t.toLowerCase()];null!=e?u=e:m.globalLogger().warn("invalid log level - "+t)}static from(t){return new m(t)}constructor(t){Object.defineProperty(this,"version",{enumerable:!0,value:t,writable:!1})}}m.errors=d,m.levels=h})),o.register("1XHjl",(function(e,r){t(e.exports,"version",(function(){return n}));const n="logger/5.7.0"})),o.register("d2nMw",(function(e,r){t(e.exports,"version",(function(){return n}));const n="bytes/5.7.0"})),o.register("5LLyF",(function(e,r){t(e.exports,"version",(function(){return n}));const n="rlp/5.7.0"})),o.register("G6hN9",(function(e,r){t(e.exports,"decode",(function(){return o("9fE0x").decode})),t(e.exports,"encode",(function(){return o("9fE0x").encode}));o("9fE0x")})),o.register("9fE0x",(function(e,r){t(e.exports,"decode",(function(){return i})),t(e.exports,"encode",(function(){return s}));var n=o("3Yhqu");function i(t){t=atob(t);const e=[];for(let r=0;r<t.length;r++)e.push(t.charCodeAt(r));return(0,n.arrayify)(e)}function s(t){t=(0,n.arrayify)(t);let e="";for(let r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return btoa(e)}})),o.register("b38NR",(function(e,r){var n,i,s,a,u,l,c,h,f,d,p,g,m,y,v,w,b,A,E,k,S,x,_,P,N,R;t(e.exports,"inherits",(function(){return n}),(function(t){return n=t})),t(e.exports,"toArray",(function(){return i}),(function(t){return i=t})),t(e.exports,"toHex",(function(){return s}),(function(t){return s=t})),t(e.exports,"htonl",(function(){return a}),(function(t){return a=t})),t(e.exports,"toHex32",(function(){return u}),(function(t){return u=t})),t(e.exports,"zero2",(function(){return l}),(function(t){return l=t})),t(e.exports,"zero8",(function(){return c}),(function(t){return c=t})),t(e.exports,"join32",(function(){return h}),(function(t){return h=t})),t(e.exports,"split32",(function(){return f}),(function(t){return f=t})),t(e.exports,"rotr32",(function(){return d}),(function(t){return d=t})),t(e.exports,"rotl32",(function(){return p}),(function(t){return p=t})),t(e.exports,"sum32",(function(){return g}),(function(t){return g=t})),t(e.exports,"sum32_3",(function(){return m}),(function(t){return m=t})),t(e.exports,"sum32_4",(function(){return y}),(function(t){return y=t})),t(e.exports,"sum32_5",(function(){return v}),(function(t){return v=t})),t(e.exports,"sum64",(function(){return w}),(function(t){return w=t})),t(e.exports,"sum64_hi",(function(){return b}),(function(t){return b=t})),t(e.exports,"sum64_lo",(function(){return A}),(function(t){return A=t})),t(e.exports,"sum64_4_hi",(function(){return E}),(function(t){return E=t})),t(e.exports,"sum64_4_lo",(function(){return k}),(function(t){return k=t})),t(e.exports,"sum64_5_hi",(function(){return S}),(function(t){return S=t})),t(e.exports,"sum64_5_lo",(function(){return x}),(function(t){return x=t})),t(e.exports,"rotr64_hi",(function(){return _}),(function(t){return _=t})),t(e.exports,"rotr64_lo",(function(){return P}),(function(t){return P=t})),t(e.exports,"shr64_hi",(function(){return N}),(function(t){return N=t})),t(e.exports,"shr64_lo",(function(){return R}),(function(t){return R=t}));var C=o("3jmTT"),M=o("3i1mo");function I(t,e){return 55296==(64512&t.charCodeAt(e))&&(!(e<0||e+1>=t.length)&&56320==(64512&t.charCodeAt(e+1)))}function T(t){return(t>>>24|t>>>8&65280|t<<8&16711680|(255&t)<<24)>>>0}function O(t){return 1===t.length?"0"+t:t}function B(t){return 7===t.length?"0"+t:6===t.length?"00"+t:5===t.length?"000"+t:4===t.length?"0000"+t:3===t.length?"00000"+t:2===t.length?"000000"+t:1===t.length?"0000000"+t:t}n=M,i=function(t,e){if(Array.isArray(t))return t.slice();if(!t)return[];var r=[];if("string"==typeof t)if(e){if("hex"===e)for((t=t.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(t="0"+t),i=0;i<t.length;i+=2)r.push(parseInt(t[i]+t[i+1],16))}else for(var n=0,i=0;i<t.length;i++){var o=t.charCodeAt(i);o<128?r[n++]=o:o<2048?(r[n++]=o>>6|192,r[n++]=63&o|128):I(t,i)?(o=65536+((1023&o)<<10)+(1023&t.charCodeAt(++i)),r[n++]=o>>18|240,r[n++]=o>>12&63|128,r[n++]=o>>6&63|128,r[n++]=63&o|128):(r[n++]=o>>12|224,r[n++]=o>>6&63|128,r[n++]=63&o|128)}else for(i=0;i<t.length;i++)r[i]=0|t[i];return r},s=function(t){for(var e="",r=0;r<t.length;r++)e+=O(t[r].toString(16));return e},a=T,u=function(t,e){for(var r="",n=0;n<t.length;n++){var i=t[n];"little"===e&&(i=T(i)),r+=B(i.toString(16))}return r},l=O,c=B,h=function(t,e,r,n){var i=r-e;C(i%4==0);for(var o=new Array(i/4),s=0,a=e;s<o.length;s++,a+=4){var u;u="big"===n?t[a]<<24|t[a+1]<<16|t[a+2]<<8|t[a+3]:t[a+3]<<24|t[a+2]<<16|t[a+1]<<8|t[a],o[s]=u>>>0}return o},f=function(t,e){for(var r=new Array(4*t.length),n=0,i=0;n<t.length;n++,i+=4){var o=t[n];"big"===e?(r[i]=o>>>24,r[i+1]=o>>>16&255,r[i+2]=o>>>8&255,r[i+3]=255&o):(r[i+3]=o>>>24,r[i+2]=o>>>16&255,r[i+1]=o>>>8&255,r[i]=255&o)}return r},d=function(t,e){return t>>>e|t<<32-e},p=function(t,e){return t<<e|t>>>32-e},g=function(t,e){return t+e>>>0},m=function(t,e,r){return t+e+r>>>0},y=function(t,e,r,n){return t+e+r+n>>>0},v=function(t,e,r,n,i){return t+e+r+n+i>>>0},w=function(t,e,r,n){var i=t[e],o=n+t[e+1]>>>0,s=(o<n?1:0)+r+i;t[e]=s>>>0,t[e+1]=o},b=function(t,e,r,n){return(e+n>>>0<e?1:0)+t+r>>>0},A=function(t,e,r,n){return e+n>>>0},E=function(t,e,r,n,i,o,s,a){var u=0,l=e;return u+=(l=l+n>>>0)<e?1:0,u+=(l=l+o>>>0)<o?1:0,t+r+i+s+(u+=(l=l+a>>>0)<a?1:0)>>>0},k=function(t,e,r,n,i,o,s,a){return e+n+o+a>>>0},S=function(t,e,r,n,i,o,s,a,u,l){var c=0,h=e;return c+=(h=h+n>>>0)<e?1:0,c+=(h=h+o>>>0)<o?1:0,c+=(h=h+a>>>0)<a?1:0,t+r+i+s+u+(c+=(h=h+l>>>0)<l?1:0)>>>0},x=function(t,e,r,n,i,o,s,a,u,l){return e+n+o+a+l>>>0},_=function(t,e,r){return(e<<32-r|t>>>r)>>>0},P=function(t,e,r){return(t<<32-r|e>>>r)>>>0},N=function(t,e,r){return t>>>r},R=function(t,e,r){return(t<<32-r|e>>>r)>>>0}})),o.register("3jmTT",(function(t,e){function r(t,e){if(!t)throw new Error(e||"Assertion failed")}t.exports=r,r.equal=function(t,e,r){if(t!=e)throw new Error(r||"Assertion failed: "+t+" != "+e)}})),o.register("3i1mo",(function(t,e){"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}})),o.register("dx0A1",(function(e,r){var n;t(e.exports,"BlockHash",(function(){return n}),(function(t){return n=t}));var i=o("b38NR"),s=o("3jmTT");function a(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}n=a,a.prototype.update=function(t,e){if(t=i.toArray(t,e),this.pending?this.pending=this.pending.concat(t):this.pending=t,this.pendingTotal+=t.length,this.pending.length>=this._delta8){var r=(t=this.pending).length%this._delta8;this.pending=t.slice(t.length-r,t.length),0===this.pending.length&&(this.pending=null),t=i.join32(t,0,t.length-r,this.endian);for(var n=0;n<t.length;n+=this._delta32)this._update(t,n,n+this._delta32)}return this},a.prototype.digest=function(t){return this.update(this._pad()),s(null===this.pending),this._digest(t)},a.prototype._pad=function(){var t=this.pendingTotal,e=this._delta8,r=e-(t+this.padLength)%e,n=new Array(r+this.padLength);n[0]=128;for(var i=1;i<r;i++)n[i]=0;if(t<<=3,"big"===this.endian){for(var o=8;o<this.padLength;o++)n[i++]=0;n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=t>>>24&255,n[i++]=t>>>16&255,n[i++]=t>>>8&255,n[i++]=255&t}else for(n[i++]=255&t,n[i++]=t>>>8&255,n[i++]=t>>>16&255,n[i++]=t>>>24&255,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,o=8;o<this.padLength;o++)n[i++]=0;return n}})),o.register("783N8",(function(e,r){var n,i,s,a,u;t(e.exports,"sha1",(function(){return n}),(function(t){return n=t})),t(e.exports,"sha224",(function(){return i}),(function(t){return i=t})),t(e.exports,"sha256",(function(){return s}),(function(t){return s=t})),t(e.exports,"sha384",(function(){return a}),(function(t){return a=t})),t(e.exports,"sha512",(function(){return u}),(function(t){return u=t})),n=o("9tgOt"),i=o("hz1Lv"),s=o("ZPpGW"),a=o("daWaa"),u=o("ivfL3")})),o.register("9tgOt",(function(t,e){"use strict";var r=o("b38NR"),n=o("dx0A1"),i=o("9kgQQ"),s=r.rotl32,a=r.sum32,u=r.sum32_5,l=i.ft_1,c=n.BlockHash,h=[1518500249,1859775393,2400959708,3395469782];function f(){if(!(this instanceof f))return new f;c.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}r.inherits(f,c),t.exports=f,f.blockSize=512,f.outSize=160,f.hmacStrength=80,f.padLength=64,f.prototype._update=function(t,e){for(var r=this.W,n=0;n<16;n++)r[n]=t[e+n];for(;n<r.length;n++)r[n]=s(r[n-3]^r[n-8]^r[n-14]^r[n-16],1);var i=this.h[0],o=this.h[1],c=this.h[2],f=this.h[3],d=this.h[4];for(n=0;n<r.length;n++){var p=~~(n/20),g=u(s(i,5),l(p,o,c,f),d,r[n],h[p]);d=f,f=c,c=s(o,30),o=i,i=g}this.h[0]=a(this.h[0],i),this.h[1]=a(this.h[1],o),this.h[2]=a(this.h[2],c),this.h[3]=a(this.h[3],f),this.h[4]=a(this.h[4],d)},f.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h,"big"):r.split32(this.h,"big")}})),o.register("9kgQQ",(function(e,r){var n,i,s,a,u,l,c;t(e.exports,"ft_1",(function(){return n}),(function(t){return n=t})),t(e.exports,"ch32",(function(){return i}),(function(t){return i=t})),t(e.exports,"maj32",(function(){return s}),(function(t){return s=t})),t(e.exports,"s0_256",(function(){return a}),(function(t){return a=t})),t(e.exports,"s1_256",(function(){return u}),(function(t){return u=t})),t(e.exports,"g0_256",(function(){return l}),(function(t){return l=t})),t(e.exports,"g1_256",(function(){return c}),(function(t){return c=t}));var h=o("b38NR").rotr32;function f(t,e,r){return t&e^~t&r}function d(t,e,r){return t&e^t&r^e&r}function p(t,e,r){return t^e^r}n=function(t,e,r,n){return 0===t?f(e,r,n):1===t||3===t?p(e,r,n):2===t?d(e,r,n):void 0},i=f,s=d,a=function(t){return h(t,2)^h(t,13)^h(t,22)},u=function(t){return h(t,6)^h(t,11)^h(t,25)},l=function(t){return h(t,7)^h(t,18)^t>>>3},c=function(t){return h(t,17)^h(t,19)^t>>>10}})),o.register("hz1Lv",(function(t,e){"use strict";var r=o("b38NR"),n=o("ZPpGW");function i(){if(!(this instanceof i))return new i;n.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}r.inherits(i,n),t.exports=i,i.blockSize=512,i.outSize=224,i.hmacStrength=192,i.padLength=64,i.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h.slice(0,7),"big"):r.split32(this.h.slice(0,7),"big")}})),o.register("ZPpGW",(function(t,e){"use strict";var r=o("b38NR"),n=o("dx0A1"),i=o("9kgQQ"),s=o("3jmTT"),a=r.sum32,u=r.sum32_4,l=r.sum32_5,c=i.ch32,h=i.maj32,f=i.s0_256,d=i.s1_256,p=i.g0_256,g=i.g1_256,m=n.BlockHash,y=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function v(){if(!(this instanceof v))return new v;m.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=y,this.W=new Array(64)}r.inherits(v,m),t.exports=v,v.blockSize=512,v.outSize=256,v.hmacStrength=192,v.padLength=64,v.prototype._update=function(t,e){for(var r=this.W,n=0;n<16;n++)r[n]=t[e+n];for(;n<r.length;n++)r[n]=u(g(r[n-2]),r[n-7],p(r[n-15]),r[n-16]);var i=this.h[0],o=this.h[1],m=this.h[2],y=this.h[3],v=this.h[4],w=this.h[5],b=this.h[6],A=this.h[7];for(s(this.k.length===r.length),n=0;n<r.length;n++){var E=l(A,d(v),c(v,w,b),this.k[n],r[n]),k=a(f(i),h(i,o,m));A=b,b=w,w=v,v=a(y,E),y=m,m=o,o=i,i=a(E,k)}this.h[0]=a(this.h[0],i),this.h[1]=a(this.h[1],o),this.h[2]=a(this.h[2],m),this.h[3]=a(this.h[3],y),this.h[4]=a(this.h[4],v),this.h[5]=a(this.h[5],w),this.h[6]=a(this.h[6],b),this.h[7]=a(this.h[7],A)},v.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h,"big"):r.split32(this.h,"big")}})),o.register("daWaa",(function(t,e){"use strict";var r=o("b38NR"),n=o("ivfL3");function i(){if(!(this instanceof i))return new i;n.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}r.inherits(i,n),t.exports=i,i.blockSize=1024,i.outSize=384,i.hmacStrength=192,i.padLength=128,i.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h.slice(0,12),"big"):r.split32(this.h.slice(0,12),"big")}})),o.register("ivfL3",(function(t,e){"use strict";var r=o("b38NR"),n=o("dx0A1"),i=o("3jmTT"),s=r.rotr64_hi,a=r.rotr64_lo,u=r.shr64_hi,l=r.shr64_lo,c=r.sum64,h=r.sum64_hi,f=r.sum64_lo,d=r.sum64_4_hi,p=r.sum64_4_lo,g=r.sum64_5_hi,m=r.sum64_5_lo,y=n.BlockHash,v=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function w(){if(!(this instanceof w))return new w;y.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=v,this.W=new Array(160)}function b(t,e,r,n,i){var o=t&r^~t&i;return o<0&&(o+=4294967296),o}function A(t,e,r,n,i,o){var s=e&n^~e&o;return s<0&&(s+=4294967296),s}function E(t,e,r,n,i){var o=t&r^t&i^r&i;return o<0&&(o+=4294967296),o}function k(t,e,r,n,i,o){var s=e&n^e&o^n&o;return s<0&&(s+=4294967296),s}function S(t,e){var r=s(t,e,28)^s(e,t,2)^s(e,t,7);return r<0&&(r+=4294967296),r}function x(t,e){var r=a(t,e,28)^a(e,t,2)^a(e,t,7);return r<0&&(r+=4294967296),r}function _(t,e){var r=s(t,e,14)^s(t,e,18)^s(e,t,9);return r<0&&(r+=4294967296),r}function P(t,e){var r=a(t,e,14)^a(t,e,18)^a(e,t,9);return r<0&&(r+=4294967296),r}function N(t,e){var r=s(t,e,1)^s(t,e,8)^u(t,e,7);return r<0&&(r+=4294967296),r}function R(t,e){var r=a(t,e,1)^a(t,e,8)^l(t,e,7);return r<0&&(r+=4294967296),r}function C(t,e){var r=s(t,e,19)^s(e,t,29)^u(t,e,6);return r<0&&(r+=4294967296),r}function M(t,e){var r=a(t,e,19)^a(e,t,29)^l(t,e,6);return r<0&&(r+=4294967296),r}r.inherits(w,y),t.exports=w,w.blockSize=1024,w.outSize=512,w.hmacStrength=192,w.padLength=128,w.prototype._prepareBlock=function(t,e){for(var r=this.W,n=0;n<32;n++)r[n]=t[e+n];for(;n<r.length;n+=2){var i=C(r[n-4],r[n-3]),o=M(r[n-4],r[n-3]),s=r[n-14],a=r[n-13],u=N(r[n-30],r[n-29]),l=R(r[n-30],r[n-29]),c=r[n-32],h=r[n-31];r[n]=d(i,o,s,a,u,l,c,h),r[n+1]=p(i,o,s,a,u,l,c,h)}},w.prototype._update=function(t,e){this._prepareBlock(t,e);var r=this.W,n=this.h[0],o=this.h[1],s=this.h[2],a=this.h[3],u=this.h[4],l=this.h[5],d=this.h[6],p=this.h[7],y=this.h[8],v=this.h[9],w=this.h[10],N=this.h[11],R=this.h[12],C=this.h[13],M=this.h[14],I=this.h[15];i(this.k.length===r.length);for(var T=0;T<r.length;T+=2){var O=M,B=I,L=_(y,v),F=P(y,v),D=b(y,v,w,N,R),U=A(y,v,w,N,R,C),G=this.k[T],q=this.k[T+1],j=r[T],z=r[T+1],H=g(O,B,L,F,D,U,G,q,j,z),K=m(O,B,L,F,D,U,G,q,j,z);O=S(n,o),B=x(n,o),L=E(n,o,s,a,u),F=k(n,o,s,a,u,l);var J=h(O,B,L,F),V=f(O,B,L,F);M=R,I=C,R=w,C=N,w=y,N=v,y=h(d,p,H,K),v=f(p,p,H,K),d=u,p=l,u=s,l=a,s=n,a=o,n=h(H,K,J,V),o=f(H,K,J,V)}c(this.h,0,n,o),c(this.h,2,s,a),c(this.h,4,u,l),c(this.h,6,d,p),c(this.h,8,y,v),c(this.h,10,w,N),c(this.h,12,R,C),c(this.h,14,M,I)},w.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h,"big"):r.split32(this.h,"big")}})),o.register("j1ZCa",(function(e,r){var n;t(e.exports,"ripemd160",(function(){return n}),(function(t){return n=t}));var i=o("b38NR"),s=o("dx0A1"),a=i.rotl32,u=i.sum32,l=i.sum32_3,c=i.sum32_4,h=s.BlockHash;function f(){if(!(this instanceof f))return new f;h.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function d(t,e,r,n){return t<=15?e^r^n:t<=31?e&r|~e&n:t<=47?(e|~r)^n:t<=63?e&n|r&~n:e^(r|~n)}function p(t){return t<=15?0:t<=31?1518500249:t<=47?1859775393:t<=63?2400959708:2840853838}function g(t){return t<=15?1352829926:t<=31?1548603684:t<=47?1836072691:t<=63?2053994217:0}i.inherits(f,h),n=f,f.blockSize=512,f.outSize=160,f.hmacStrength=192,f.padLength=64,f.prototype._update=function(t,e){for(var r=this.h[0],n=this.h[1],i=this.h[2],o=this.h[3],s=this.h[4],h=r,f=n,b=i,A=o,E=s,k=0;k<80;k++){var S=u(a(c(r,d(k,n,i,o),t[m[k]+e],p(k)),v[k]),s);r=s,s=o,o=a(i,10),i=n,n=S,S=u(a(c(h,d(79-k,f,b,A),t[y[k]+e],g(k)),w[k]),E),h=E,E=A,A=a(b,10),b=f,f=S}S=l(this.h[1],i,A),this.h[1]=l(this.h[2],o,E),this.h[2]=l(this.h[3],s,h),this.h[3]=l(this.h[4],r,f),this.h[4]=l(this.h[0],n,b),this.h[0]=S},f.prototype._digest=function(t){return"hex"===t?i.toHex32(this.h,"little"):i.split32(this.h,"little")};var m=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],y=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],v=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],w=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]})),o.register("L28J4",(function(t,e){"use strict";var r=o("b38NR"),n=o("3jmTT");function i(t,e,n){if(!(this instanceof i))return new i(t,e,n);this.Hash=t,this.blockSize=t.blockSize/8,this.outSize=t.outSize/8,this.inner=null,this.outer=null,this._init(r.toArray(e,n))}t.exports=i,i.prototype._init=function(t){t.length>this.blockSize&&(t=(new this.Hash).update(t).digest()),n(t.length<=this.blockSize);for(var e=t.length;e<this.blockSize;e++)t.push(0);for(e=0;e<t.length;e++)t[e]^=54;for(this.inner=(new this.Hash).update(t),e=0;e<t.length;e++)t[e]^=106;this.outer=(new this.Hash).update(t)},i.prototype.update=function(t,e){return this.inner.update(t,e),this},i.prototype.digest=function(t){return this.outer.update(this.inner.digest()),this.outer.digest(t)}}));var s={};t(s,"logger",(function(){return el})),t(s,"Signer",(function(){return ln.Signer})),t(s,"Wallet",(function(){return qi.Wallet})),t(s,"VoidSigner",(function(){return ln.VoidSigner})),t(s,"getDefaultProvider",(function(){return Fu})),t(s,"providers",(function(){return os})),t(s,"BaseContract",(function(){return a.BaseContract})),t(s,"Contract",(function(){return a.Contract})),t(s,"ContractFactory",(function(){return a.ContractFactory})),t(s,"BigNumber",(function(){return v})),t(s,"FixedNumber",(function(){return T})),t(s,"constants",(function(){return ce})),t(s,"errors",(function(){return o("2rINa").ErrorCode})),t(s,"utils",(function(){return Du})),t(s,"wordlists",(function(){return no})),t(s,"version",(function(){return tl})),t(s,"Wordlist",(function(){return $i}));var a={};t(a,"BaseContract",(function(){return Di}),(function(t){return Di=t})),t(a,"Contract",(function(){return Ui}),(function(t){return Ui=t})),t(a,"ContractFactory",(function(){return Gi}),(function(t){return Gi=t}));var u=o("jc6J8"),l=o("3Yhqu"),c=o("2rINa");const h="bignumber/5.7.0";var f=r(u).BN;const d=new(0,c.Logger)(h),p={},g=9007199254740991;function m(t){return null!=t&&(v.isBigNumber(t)||"number"==typeof t&&t%1==0||"string"==typeof t&&!!t.match(/^-?[0-9]+$/)||(0,l.isHexString)(t)||"bigint"==typeof t||(0,l.isBytes)(t))}let y=!1;class v{fromTwos(t){return b(A(this).fromTwos(t))}toTwos(t){return b(A(this).toTwos(t))}abs(){return"-"===this._hex[0]?v.from(this._hex.substring(1)):this}add(t){return b(A(this).add(A(t)))}sub(t){return b(A(this).sub(A(t)))}div(t){return v.from(t).isZero()&&E("division-by-zero","div"),b(A(this).div(A(t)))}mul(t){return b(A(this).mul(A(t)))}mod(t){const e=A(t);return e.isNeg()&&E("division-by-zero","mod"),b(A(this).umod(e))}pow(t){const e=A(t);return e.isNeg()&&E("negative-power","pow"),b(A(this).pow(e))}and(t){const e=A(t);return(this.isNegative()||e.isNeg())&&E("unbound-bitwise-result","and"),b(A(this).and(e))}or(t){const e=A(t);return(this.isNegative()||e.isNeg())&&E("unbound-bitwise-result","or"),b(A(this).or(e))}xor(t){const e=A(t);return(this.isNegative()||e.isNeg())&&E("unbound-bitwise-result","xor"),b(A(this).xor(e))}mask(t){return(this.isNegative()||t<0)&&E("negative-width","mask"),b(A(this).maskn(t))}shl(t){return(this.isNegative()||t<0)&&E("negative-width","shl"),b(A(this).shln(t))}shr(t){return(this.isNegative()||t<0)&&E("negative-width","shr"),b(A(this).shrn(t))}eq(t){return A(this).eq(A(t))}lt(t){return A(this).lt(A(t))}lte(t){return A(this).lte(A(t))}gt(t){return A(this).gt(A(t))}gte(t){return A(this).gte(A(t))}isNegative(){return"-"===this._hex[0]}isZero(){return A(this).isZero()}toNumber(){try{return A(this).toNumber()}catch(t){E("overflow","toNumber",this.toString())}return null}toBigInt(){try{return BigInt(this.toString())}catch(t){}return d.throwError("this platform does not support BigInt",c.Logger.errors.UNSUPPORTED_OPERATION,{value:this.toString()})}toString(){return arguments.length>0&&(10===arguments[0]?y||(y=!0,d.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")):16===arguments[0]?d.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",c.Logger.errors.UNEXPECTED_ARGUMENT,{}):d.throwError("BigNumber.toString does not accept parameters",c.Logger.errors.UNEXPECTED_ARGUMENT,{})),A(this).toString(10)}toHexString(){return this._hex}toJSON(t){return{type:"BigNumber",hex:this.toHexString()}}static from(t){if(t instanceof v)return t;if("string"==typeof t)return t.match(/^-?0x[0-9a-f]+$/i)?new v(p,w(t)):t.match(/^-?[0-9]+$/)?new v(p,w(new f(t))):d.throwArgumentError("invalid BigNumber string","value",t);if("number"==typeof t)return t%1&&E("underflow","BigNumber.from",t),(t>=g||t<=-9007199254740991)&&E("overflow","BigNumber.from",t),v.from(String(t));const e=t;if("bigint"==typeof e)return v.from(e.toString());if((0,l.isBytes)(e))return v.from((0,l.hexlify)(e));if(e)if(e.toHexString){const t=e.toHexString();if("string"==typeof t)return v.from(t)}else{let t=e._hex;if(null==t&&"BigNumber"===e.type&&(t=e.hex),"string"==typeof t&&((0,l.isHexString)(t)||"-"===t[0]&&(0,l.isHexString)(t.substring(1))))return v.from(t)}return d.throwArgumentError("invalid BigNumber value","value",t)}static isBigNumber(t){return!(!t||!t._isBigNumber)}constructor(t,e){t!==p&&d.throwError("cannot call constructor directly; use BigNumber.from",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new (BigNumber)"}),this._hex=e,this._isBigNumber=!0,Object.freeze(this)}}function w(t){if("string"!=typeof t)return w(t.toString(16));if("-"===t[0])return"-"===(t=t.substring(1))[0]&&d.throwArgumentError("invalid hex","value",t),"0x00"===(t=w(t))?t:"-"+t;if("0x"!==t.substring(0,2)&&(t="0x"+t),"0x"===t)return"0x00";for(t.length%2&&(t="0x0"+t.substring(2));t.length>4&&"0x00"===t.substring(0,4);)t="0x"+t.substring(4);return t}function b(t){return v.from(w(t))}function A(t){const e=v.from(t).toHexString();return"-"===e[0]?new f("-"+e.substring(3),16):new f(e.substring(2),16)}function E(t,e,r){const n={fault:t,operation:e};return null!=r&&(n.value=r),d.throwError(t,c.Logger.errors.NUMERIC_FAULT,n)}l=o("3Yhqu");const k=new(0,(c=o("2rINa")).Logger)(h),S={},x=v.from(0),_=v.from(-1);function P(t,e,r,n){const i={fault:e,operation:r};return void 0!==n&&(i.value=n),k.throwError(t,c.Logger.errors.NUMERIC_FAULT,i)}let N="0";for(;N.length<256;)N+=N;function R(t){if("number"!=typeof t)try{t=v.from(t).toNumber()}catch(t){}return"number"==typeof t&&t>=0&&t<=256&&!(t%1)?"1"+N.substring(0,t):k.throwArgumentError("invalid decimal size","decimals",t)}function C(t,e){null==e&&(e=0);const r=R(e),n=(t=v.from(t)).lt(x);n&&(t=t.mul(_));let i=t.mod(r).toString();for(;i.length<r.length-1;)i="0"+i;i=i.match(/^([0-9]*[1-9]|0)(0*)/)[1];const o=t.div(r).toString();return t=1===r.length?o:o+"."+i,n&&(t="-"+t),t}function M(t,e){null==e&&(e=0);const r=R(e);"string"==typeof t&&t.match(/^-?[0-9.]+$/)||k.throwArgumentError("invalid decimal value","value",t);const n="-"===t.substring(0,1);n&&(t=t.substring(1)),"."===t&&k.throwArgumentError("missing value","value",t);const i=t.split(".");i.length>2&&k.throwArgumentError("too many decimal points","value",t);let o=i[0],s=i[1];for(o||(o="0"),s||(s="0");"0"===s[s.length-1];)s=s.substring(0,s.length-1);for(s.length>r.length-1&&P("fractional component exceeds decimals","underflow","parseFixed"),""===s&&(s="0");s.length<r.length-1;)s+="0";const a=v.from(o),u=v.from(s);let l=a.mul(r).add(u);return n&&(l=l.mul(_)),l}class I{static from(t){if(t instanceof I)return t;"number"==typeof t&&(t=`fixed128x${t}`);let e=!0,r=128,n=18;if("string"==typeof t)if("fixed"===t);else if("ufixed"===t)e=!1;else{const i=t.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);i||k.throwArgumentError("invalid fixed format","format",t),e="u"!==i[1],r=parseInt(i[2]),n=parseInt(i[3])}else if(t){const i=(e,r,n)=>null==t[e]?n:(typeof t[e]!==r&&k.throwArgumentError("invalid fixed format ("+e+" not "+r+")","format."+e,t[e]),t[e]);e=i("signed","boolean",e),r=i("width","number",r),n=i("decimals","number",n)}return r%8&&k.throwArgumentError("invalid fixed format width (not byte aligned)","format.width",r),n>80&&k.throwArgumentError("invalid fixed format (decimals too large)","format.decimals",n),new I(S,e,r,n)}constructor(t,e,r,n){t!==S&&k.throwError("cannot use FixedFormat constructor; use FixedFormat.from",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new FixedFormat"}),this.signed=e,this.width=r,this.decimals=n,this.name=(e?"":"u")+"fixed"+String(r)+"x"+String(n),this._multiplier=R(n),Object.freeze(this)}}class T{_checkFormat(t){this.format.name!==t.format.name&&k.throwArgumentError("incompatible format; use fixedNumber.toFormat","other",t)}addUnsafe(t){this._checkFormat(t);const e=M(this._value,this.format.decimals),r=M(t._value,t.format.decimals);return T.fromValue(e.add(r),this.format.decimals,this.format)}subUnsafe(t){this._checkFormat(t);const e=M(this._value,this.format.decimals),r=M(t._value,t.format.decimals);return T.fromValue(e.sub(r),this.format.decimals,this.format)}mulUnsafe(t){this._checkFormat(t);const e=M(this._value,this.format.decimals),r=M(t._value,t.format.decimals);return T.fromValue(e.mul(r).div(this.format._multiplier),this.format.decimals,this.format)}divUnsafe(t){this._checkFormat(t);const e=M(this._value,this.format.decimals),r=M(t._value,t.format.decimals);return T.fromValue(e.mul(this.format._multiplier).div(r),this.format.decimals,this.format)}floor(){const t=this.toString().split(".");1===t.length&&t.push("0");let e=T.from(t[0],this.format);const r=!t[1].match(/^(0*)$/);return this.isNegative()&&r&&(e=e.subUnsafe(O.toFormat(e.format))),e}ceiling(){const t=this.toString().split(".");1===t.length&&t.push("0");let e=T.from(t[0],this.format);const r=!t[1].match(/^(0*)$/);return!this.isNegative()&&r&&(e=e.addUnsafe(O.toFormat(e.format))),e}round(t){null==t&&(t=0);const e=this.toString().split(".");if(1===e.length&&e.push("0"),(t<0||t>80||t%1)&&k.throwArgumentError("invalid decimal count","decimals",t),e[1].length<=t)return this;const r=T.from("1"+N.substring(0,t),this.format),n=B.toFormat(this.format);return this.mulUnsafe(r).addUnsafe(n).floor().divUnsafe(r)}isZero(){return"0.0"===this._value||"0"===this._value}isNegative(){return"-"===this._value[0]}toString(){return this._value}toHexString(t){if(null==t)return this._hex;t%8&&k.throwArgumentError("invalid byte width","width",t);const e=v.from(this._hex).fromTwos(this.format.width).toTwos(t).toHexString();return(0,l.hexZeroPad)(e,t/8)}toUnsafeFloat(){return parseFloat(this.toString())}toFormat(t){return T.fromString(this._value,t)}static fromValue(t,e,r){return null!=r||null==e||m(e)||(r=e,e=null),null==e&&(e=0),null==r&&(r="fixed"),T.fromString(C(t,e),I.from(r))}static fromString(t,e){null==e&&(e="fixed");const r=I.from(e),n=M(t,r.decimals);!r.signed&&n.lt(x)&&P("unsigned value cannot be negative","overflow","value",t);let i=null;r.signed?i=n.toTwos(r.width).toHexString():(i=n.toHexString(),i=(0,l.hexZeroPad)(i,r.width/8));const o=C(n,r.decimals);return new T(S,i,o,r)}static fromBytes(t,e){null==e&&(e="fixed");const r=I.from(e);if((0,l.arrayify)(t).length>r.width/8)throw new Error("overflow");let n=v.from(t);r.signed&&(n=n.fromTwos(r.width));const i=n.toTwos((r.signed?0:1)+r.width).toHexString(),o=C(n,r.decimals);return new T(S,i,o,r)}static from(t,e){if("string"==typeof t)return T.fromString(t,e);if((0,l.isBytes)(t))return T.fromBytes(t,e);try{return T.fromValue(t,0,e)}catch(t){if(t.code!==c.Logger.errors.INVALID_ARGUMENT)throw t}return k.throwArgumentError("invalid FixedNumber value","value",t)}static isFixedNumber(t){return!(!t||!t._isFixedNumber)}constructor(t,e,r,n){t!==S&&k.throwError("cannot use FixedNumber constructor; use FixedNumber.from",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new FixedFormat"}),this.format=n,this._hex=e,this._value=r,this._isFixedNumber=!0,Object.freeze(this)}}const O=T.from(1),B=T.from("0.5");var L={};t(L,"defineReadOnly",(function(){return U}),(function(t){return U=t})),t(L,"getStatic",(function(){return G}),(function(t){return G=t})),t(L,"resolveProperties",(function(){return q}),(function(t){return q=t})),t(L,"checkProperties",(function(){return j}),(function(t){return j=t})),t(L,"shallowCopy",(function(){return z}),(function(t){return z=t})),t(L,"deepCopy",(function(){return V}),(function(t){return V=t})),t(L,"Description",(function(){return W}),(function(t){return W=t}));c=o("2rINa");var F=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const D=new(0,c.Logger)("properties/5.7.0");function U(t,e,r){Object.defineProperty(t,e,{enumerable:!0,value:r,writable:!1})}function G(t,e){for(let r=0;r<32;r++){if(t[e])return t[e];if(!t.prototype||"object"!=typeof t.prototype)break;t=Object.getPrototypeOf(t.prototype).constructor}return null}function q(t){return F(this,void 0,void 0,(function*(){const e=Object.keys(t).map((e=>{const r=t[e];return Promise.resolve(r).then((t=>({key:e,value:t})))}));return(yield Promise.all(e)).reduce(((t,e)=>(t[e.key]=e.value,t)),{})}))}function j(t,e){t&&"object"==typeof t||D.throwArgumentError("invalid object","object",t),Object.keys(t).forEach((r=>{e[r]||D.throwArgumentError("invalid object key - "+r,"transaction:"+r,t)}))}function z(t){const e={};for(const r in t)e[r]=t[r];return e}const H={bigint:!0,boolean:!0,function:!0,number:!0,string:!0};function K(t){if(null==t||H[typeof t])return!0;if(Array.isArray(t)||"object"==typeof t){if(!Object.isFrozen(t))return!1;const e=Object.keys(t);for(let r=0;r<e.length;r++){let n=null;try{n=t[e[r]]}catch(t){continue}if(!K(n))return!1}return!0}return D.throwArgumentError("Cannot deepCopy "+typeof t,"object",t)}function J(t){if(K(t))return t;if(Array.isArray(t))return Object.freeze(t.map((t=>V(t))));if("object"==typeof t){const e={};for(const r in t){const n=t[r];void 0!==n&&U(e,r,V(n))}return e}return D.throwArgumentError("Cannot deepCopy "+typeof t,"object",t)}function V(t){return J(t)}class W{constructor(t){for(const e in t)this[e]=V(t[e])}}const Y="abi/5.7.0",Q=new(0,(c=o("2rINa")).Logger)(Y),Z={};let X={calldata:!0,memory:!0,storage:!0},$={calldata:!0,memory:!0};function tt(t,e){if("bytes"===t||"string"===t){if(X[e])return!0}else if("address"===t){if("payable"===e)return!0}else if((t.indexOf("[")>=0||"tuple"===t)&&$[e])return!0;return(X[e]||"payable"===e)&&Q.throwArgumentError("invalid modifier","name",e),!1}function et(t,e){for(let r in e)(0,L.defineReadOnly)(t,r,e[r])}const rt=Object.freeze({sighash:"sighash",minimal:"minimal",full:"full",json:"json"}),nt=new RegExp(/^(.*)\[([0-9]*)\]$/);class it{format(t){if(t||(t=rt.sighash),rt[t]||Q.throwArgumentError("invalid format type","format",t),t===rt.json){let e={type:"tuple"===this.baseType?"tuple":this.type,name:this.name||void 0};return"boolean"==typeof this.indexed&&(e.indexed=this.indexed),this.components&&(e.components=this.components.map((e=>JSON.parse(e.format(t))))),JSON.stringify(e)}let e="";return"array"===this.baseType?(e+=this.arrayChildren.format(t),e+="["+(this.arrayLength<0?"":String(this.arrayLength))+"]"):"tuple"===this.baseType?(t!==rt.sighash&&(e+=this.type),e+="("+this.components.map((e=>e.format(t))).join(t===rt.full?", ":",")+")"):e+=this.type,t!==rt.sighash&&(!0===this.indexed&&(e+=" indexed"),t===rt.full&&this.name&&(e+=" "+this.name)),e}static from(t,e){return"string"==typeof t?it.fromString(t,e):it.fromObject(t)}static fromObject(t){return it.isParamType(t)?t:new it(Z,{name:t.name||null,type:gt(t.type),indexed:null==t.indexed?null:!!t.indexed,components:t.components?t.components.map(it.fromObject):null})}static fromString(t,e){return r=function(t,e){let r=t;function n(e){Q.throwArgumentError(`unexpected character at position ${e}`,"param",t)}function i(t){let r={type:"",name:"",parent:t,state:{allowType:!0}};return e&&(r.indexed=!1),r}t=t.replace(/\s/g," ");let o={type:"",name:"",state:{allowType:!0}},s=o;for(let r=0;r<t.length;r++){let o=t[r];switch(o){case"(":s.state.allowType&&""===s.type?s.type="tuple":s.state.allowParams||n(r),s.state.allowType=!1,s.type=gt(s.type),s.components=[i(s)],s=s.components[0];break;case")":delete s.state,"indexed"===s.name&&(e||n(r),s.indexed=!0,s.name=""),tt(s.type,s.name)&&(s.name=""),s.type=gt(s.type);let t=s;s=s.parent,s||n(r),delete t.parent,s.state.allowParams=!1,s.state.allowName=!0,s.state.allowArray=!0;break;case",":delete s.state,"indexed"===s.name&&(e||n(r),s.indexed=!0,s.name=""),tt(s.type,s.name)&&(s.name=""),s.type=gt(s.type);let a=i(s.parent);s.parent.components.push(a),delete s.parent,s=a;break;case" ":s.state.allowType&&""!==s.type&&(s.type=gt(s.type),delete s.state.allowType,s.state.allowName=!0,s.state.allowParams=!0),s.state.allowName&&""!==s.name&&("indexed"===s.name?(e||n(r),s.indexed&&n(r),s.indexed=!0,s.name=""):tt(s.type,s.name)?s.name="":s.state.allowName=!1);break;case"[":s.state.allowArray||n(r),s.type+=o,s.state.allowArray=!1,s.state.allowName=!1,s.state.readArray=!0;break;case"]":s.state.readArray||n(r),s.type+=o,s.state.readArray=!1,s.state.allowArray=!0,s.state.allowName=!0;break;default:s.state.allowType?(s.type+=o,s.state.allowParams=!0,s.state.allowArray=!0):s.state.allowName?(s.name+=o,delete s.state.allowArray):s.state.readArray?s.type+=o:n(r)}}return s.parent&&Q.throwArgumentError("unexpected eof","param",t),delete o.state,"indexed"===s.name?(e||n(r.length-7),s.indexed&&n(r.length-7),s.indexed=!0,s.name=""):tt(s.type,s.name)&&(s.name=""),o.type=gt(o.type),o}(t,!!e),it.fromObject({name:r.name,type:r.type,indexed:r.indexed,components:r.components});var r}static isParamType(t){return!(null==t||!t._isParamType)}constructor(t,e){t!==Z&&Q.throwError("use fromString",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new ParamType()"}),et(this,e);let r=this.type.match(nt);et(this,r?{arrayLength:parseInt(r[2]||"-1"),arrayChildren:it.fromObject({type:r[1],components:this.components}),baseType:"array"}:{arrayLength:null,arrayChildren:null,baseType:null!=this.components?"tuple":this.type}),this._isParamType=!0,Object.freeze(this)}}function ot(t,e){return function(t){t=t.trim();let e=[],r="",n=0;for(let i=0;i<t.length;i++){let o=t[i];","===o&&0===n?(e.push(r),r=""):(r+=o,"("===o?n++:")"===o&&(n--,-1===n&&Q.throwArgumentError("unbalanced parenthesis","value",t)))}r&&e.push(r);return e}(t).map((t=>it.fromString(t,e)))}class st{static from(t){return st.isFragment(t)?t:"string"==typeof t?st.fromString(t):st.fromObject(t)}static fromObject(t){if(st.isFragment(t))return t;switch(t.type){case"function":return ft.fromObject(t);case"event":return at.fromObject(t);case"constructor":return ht.fromObject(t);case"error":return pt.fromObject(t);case"fallback":case"receive":return null}return Q.throwArgumentError("invalid fragment object","value",t)}static fromString(t){return"event"===(t=(t=(t=t.replace(/\s/g," ")).replace(/\(/g," (").replace(/\)/g,") ").replace(/\s+/g," ")).trim()).split(" ")[0]?at.fromString(t.substring(5).trim()):"function"===t.split(" ")[0]?ft.fromString(t.substring(8).trim()):"constructor"===t.split("(")[0].trim()?ht.fromString(t.trim()):"error"===t.split(" ")[0]?pt.fromString(t.substring(5).trim()):Q.throwArgumentError("unsupported fragment","value",t)}static isFragment(t){return!(!t||!t._isFragment)}constructor(t,e){t!==Z&&Q.throwError("use a static from method",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new Fragment()"}),et(this,e),this._isFragment=!0,Object.freeze(this)}}class at extends st{format(t){if(t||(t=rt.sighash),rt[t]||Q.throwArgumentError("invalid format type","format",t),t===rt.json)return JSON.stringify({type:"event",anonymous:this.anonymous,name:this.name,inputs:this.inputs.map((e=>JSON.parse(e.format(t))))});let e="";return t!==rt.sighash&&(e+="event "),e+=this.name+"("+this.inputs.map((e=>e.format(t))).join(t===rt.full?", ":",")+") ",t!==rt.sighash&&this.anonymous&&(e+="anonymous "),e.trim()}static from(t){return"string"==typeof t?at.fromString(t):at.fromObject(t)}static fromObject(t){if(at.isEventFragment(t))return t;"event"!==t.type&&Q.throwArgumentError("invalid event object","value",t);const e={name:yt(t.name),anonymous:t.anonymous,inputs:t.inputs?t.inputs.map(it.fromObject):[],type:"event"};return new at(Z,e)}static fromString(t){let e=t.match(vt);e||Q.throwArgumentError("invalid event string","value",t);let r=!1;return e[3].split(" ").forEach((t=>{switch(t.trim()){case"anonymous":r=!0;break;case"":break;default:Q.warn("unknown modifier: "+t)}})),at.fromObject({name:e[1].trim(),anonymous:r,inputs:ot(e[2],!0),type:"event"})}static isEventFragment(t){return t&&t._isFragment&&"event"===t.type}}function ut(t,e){e.gas=null;let r=t.split("@");return 1!==r.length?(r.length>2&&Q.throwArgumentError("invalid human-readable ABI signature","value",t),r[1].match(/^[0-9]+$/)||Q.throwArgumentError("invalid human-readable ABI signature gas","value",t),e.gas=v.from(r[1]),r[0]):t}function lt(t,e){e.constant=!1,e.payable=!1,e.stateMutability="nonpayable",t.split(" ").forEach((t=>{switch(t.trim()){case"constant":e.constant=!0;break;case"payable":e.payable=!0,e.stateMutability="payable";break;case"nonpayable":e.payable=!1,e.stateMutability="nonpayable";break;case"pure":e.constant=!0,e.stateMutability="pure";break;case"view":e.constant=!0,e.stateMutability="view";break;case"external":case"public":case"":break;default:console.log("unknown modifier: "+t)}}))}function ct(t){let e={constant:!1,payable:!0,stateMutability:"payable"};return null!=t.stateMutability?(e.stateMutability=t.stateMutability,e.constant="view"===e.stateMutability||"pure"===e.stateMutability,null!=t.constant&&!!t.constant!==e.constant&&Q.throwArgumentError("cannot have constant function with mutability "+e.stateMutability,"value",t),e.payable="payable"===e.stateMutability,null!=t.payable&&!!t.payable!==e.payable&&Q.throwArgumentError("cannot have payable function with mutability "+e.stateMutability,"value",t)):null!=t.payable?(e.payable=!!t.payable,null!=t.constant||e.payable||"constructor"===t.type||Q.throwArgumentError("unable to determine stateMutability","value",t),e.constant=!!t.constant,e.constant?e.stateMutability="view":e.stateMutability=e.payable?"payable":"nonpayable",e.payable&&e.constant&&Q.throwArgumentError("cannot have constant payable function","value",t)):null!=t.constant?(e.constant=!!t.constant,e.payable=!e.constant,e.stateMutability=e.constant?"view":"payable"):"constructor"!==t.type&&Q.throwArgumentError("unable to determine stateMutability","value",t),e}class ht extends st{format(t){if(t||(t=rt.sighash),rt[t]||Q.throwArgumentError("invalid format type","format",t),t===rt.json)return JSON.stringify({type:"constructor",stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:void 0,payable:this.payable,gas:this.gas?this.gas.toNumber():void 0,inputs:this.inputs.map((e=>JSON.parse(e.format(t))))});t===rt.sighash&&Q.throwError("cannot format a constructor for sighash",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"format(sighash)"});let e="constructor("+this.inputs.map((e=>e.format(t))).join(t===rt.full?", ":",")+") ";return this.stateMutability&&"nonpayable"!==this.stateMutability&&(e+=this.stateMutability+" "),e.trim()}static from(t){return"string"==typeof t?ht.fromString(t):ht.fromObject(t)}static fromObject(t){if(ht.isConstructorFragment(t))return t;"constructor"!==t.type&&Q.throwArgumentError("invalid constructor object","value",t);let e=ct(t);e.constant&&Q.throwArgumentError("constructor cannot be constant","value",t);const r={name:null,type:t.type,inputs:t.inputs?t.inputs.map(it.fromObject):[],payable:e.payable,stateMutability:e.stateMutability,gas:t.gas?v.from(t.gas):null};return new ht(Z,r)}static fromString(t){let e={type:"constructor"},r=(t=ut(t,e)).match(vt);return r&&"constructor"===r[1].trim()||Q.throwArgumentError("invalid constructor string","value",t),e.inputs=ot(r[2].trim(),!1),lt(r[3].trim(),e),ht.fromObject(e)}static isConstructorFragment(t){return t&&t._isFragment&&"constructor"===t.type}}class ft extends ht{format(t){if(t||(t=rt.sighash),rt[t]||Q.throwArgumentError("invalid format type","format",t),t===rt.json)return JSON.stringify({type:"function",name:this.name,constant:this.constant,stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:void 0,payable:this.payable,gas:this.gas?this.gas.toNumber():void 0,inputs:this.inputs.map((e=>JSON.parse(e.format(t)))),outputs:this.outputs.map((e=>JSON.parse(e.format(t))))});let e="";return t!==rt.sighash&&(e+="function "),e+=this.name+"("+this.inputs.map((e=>e.format(t))).join(t===rt.full?", ":",")+") ",t!==rt.sighash&&(this.stateMutability?"nonpayable"!==this.stateMutability&&(e+=this.stateMutability+" "):this.constant&&(e+="view "),this.outputs&&this.outputs.length&&(e+="returns ("+this.outputs.map((e=>e.format(t))).join(", ")+") "),null!=this.gas&&(e+="@"+this.gas.toString()+" ")),e.trim()}static from(t){return"string"==typeof t?ft.fromString(t):ft.fromObject(t)}static fromObject(t){if(ft.isFunctionFragment(t))return t;"function"!==t.type&&Q.throwArgumentError("invalid function object","value",t);let e=ct(t);const r={type:t.type,name:yt(t.name),constant:e.constant,inputs:t.inputs?t.inputs.map(it.fromObject):[],outputs:t.outputs?t.outputs.map(it.fromObject):[],payable:e.payable,stateMutability:e.stateMutability,gas:t.gas?v.from(t.gas):null};return new ft(Z,r)}static fromString(t){let e={type:"function"},r=(t=ut(t,e)).split(" returns ");r.length>2&&Q.throwArgumentError("invalid function string","value",t);let n=r[0].match(vt);if(n||Q.throwArgumentError("invalid function signature","value",t),e.name=n[1].trim(),e.name&&yt(e.name),e.inputs=ot(n[2],!1),lt(n[3].trim(),e),r.length>1){let n=r[1].match(vt);""==n[1].trim()&&""==n[3].trim()||Q.throwArgumentError("unexpected tokens","value",t),e.outputs=ot(n[2],!1)}else e.outputs=[];return ft.fromObject(e)}static isFunctionFragment(t){return t&&t._isFragment&&"function"===t.type}}function dt(t){const e=t.format();return"Error(string)"!==e&&"Panic(uint256)"!==e||Q.throwArgumentError(`cannot specify user defined ${e} error`,"fragment",t),t}class pt extends st{format(t){if(t||(t=rt.sighash),rt[t]||Q.throwArgumentError("invalid format type","format",t),t===rt.json)return JSON.stringify({type:"error",name:this.name,inputs:this.inputs.map((e=>JSON.parse(e.format(t))))});let e="";return t!==rt.sighash&&(e+="error "),e+=this.name+"("+this.inputs.map((e=>e.format(t))).join(t===rt.full?", ":",")+") ",e.trim()}static from(t){return"string"==typeof t?pt.fromString(t):pt.fromObject(t)}static fromObject(t){if(pt.isErrorFragment(t))return t;"error"!==t.type&&Q.throwArgumentError("invalid error object","value",t);const e={type:t.type,name:yt(t.name),inputs:t.inputs?t.inputs.map(it.fromObject):[]};return dt(new pt(Z,e))}static fromString(t){let e={type:"error"},r=t.match(vt);return r||Q.throwArgumentError("invalid error signature","value",t),e.name=r[1].trim(),e.name&&yt(e.name),e.inputs=ot(r[2],!1),dt(pt.fromObject(e))}static isErrorFragment(t){return t&&t._isFragment&&"error"===t.type}}function gt(t){return t.match(/^uint($|[^1-9])/)?t="uint256"+t.substring(4):t.match(/^int($|[^1-9])/)&&(t="int256"+t.substring(3)),t}const mt=new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");function yt(t){return t&&t.match(mt)||Q.throwArgumentError(`invalid identifier "${t}"`,"value",t),t}const vt=new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");l=o("3Yhqu"),c=o("2rINa"),l=o("3Yhqu");const wt=new(0,(c=o("2rINa")).Logger)(Y);function bt(t){const e=[],r=function(t,n){if(Array.isArray(n))for(let i in n){const o=t.slice();o.push(i);try{r(o,n[i])}catch(t){e.push({path:o,error:t})}}};return r([],t),e}class At{_throwError(t,e){wt.throwArgumentError(t,this.localName,e)}constructor(t,e,r,n){this.name=t,this.type=e,this.localName=r,this.dynamic=n}}class Et{get data(){return(0,l.hexConcat)(this._data)}get length(){return this._dataLength}_writeData(t){return this._data.push(t),this._dataLength+=t.length,t.length}appendWriter(t){return this._writeData((0,l.concat)(t._data))}writeBytes(t){let e=(0,l.arrayify)(t);const r=e.length%this.wordSize;return r&&(e=(0,l.concat)([e,this._padding.slice(r)])),this._writeData(e)}_getValue(t){let e=(0,l.arrayify)(v.from(t));return e.length>this.wordSize&&wt.throwError("value out-of-bounds",c.Logger.errors.BUFFER_OVERRUN,{length:this.wordSize,offset:e.length}),e.length%this.wordSize&&(e=(0,l.concat)([this._padding.slice(e.length%this.wordSize),e])),e}writeValue(t){return this._writeData(this._getValue(t))}writeUpdatableValue(){const t=this._data.length;return this._data.push(this._padding),this._dataLength+=this.wordSize,e=>{this._data[t]=this._getValue(e)}}constructor(t){(0,L.defineReadOnly)(this,"wordSize",t||32),this._data=[],this._dataLength=0,this._padding=new Uint8Array(t)}}class kt{get data(){return(0,l.hexlify)(this._data)}get consumed(){return this._offset}static coerce(t,e){let r=t.match("^u?int([0-9]+)$");return r&&parseInt(r[1])<=48&&(e=e.toNumber()),e}coerce(t,e){return this._coerceFunc?this._coerceFunc(t,e):kt.coerce(t,e)}_peekBytes(t,e,r){let n=Math.ceil(e/this.wordSize)*this.wordSize;return this._offset+n>this._data.length&&(this.allowLoose&&r&&this._offset+e<=this._data.length?n=e:wt.throwError("data out-of-bounds",c.Logger.errors.BUFFER_OVERRUN,{length:this._data.length,offset:this._offset+n})),this._data.slice(this._offset,this._offset+n)}subReader(t){return new kt(this._data.slice(this._offset+t),this.wordSize,this._coerceFunc,this.allowLoose)}readBytes(t,e){let r=this._peekBytes(0,t,!!e);return this._offset+=r.length,r.slice(0,t)}readValue(){return v.from(this.readBytes(this.wordSize))}constructor(t,e,r,n){(0,L.defineReadOnly)(this,"_data",(0,l.arrayify)(t)),(0,L.defineReadOnly)(this,"wordSize",e||32),(0,L.defineReadOnly)(this,"_coerceFunc",r),(0,L.defineReadOnly)(this,"allowLoose",n),this._offset=0}}l=o("3Yhqu");var St,xt,_t,Pt={},Nt=St={};function Rt(){throw new Error("setTimeout has not been defined")}function Ct(){throw new Error("clearTimeout has not been defined")}function Mt(t){if(xt===setTimeout)return setTimeout(t,0);if((xt===Rt||!xt)&&setTimeout)return xt=setTimeout,setTimeout(t,0);try{return xt(t,0)}catch(e){try{return xt.call(null,t,0)}catch(e){return xt.call(this,t,0)}}}!function(){try{xt="function"==typeof setTimeout?setTimeout:Rt}catch(t){xt=Rt}try{_t="function"==typeof clearTimeout?clearTimeout:Ct}catch(t){_t=Ct}}();var It,Tt=[],Ot=!1,Bt=-1;function Lt(){Ot&&It&&(Ot=!1,It.length?Tt=It.concat(Tt):Bt=-1,Tt.length&&Ft())}function Ft(){if(!Ot){var t=Mt(Lt);Ot=!0;for(var e=Tt.length;e;){for(It=Tt,Tt=[];++Bt<e;)It&&It[Bt].run();Bt=-1,e=Tt.length}It=null,Ot=!1,function(t){if(_t===clearTimeout)return clearTimeout(t);if((_t===Ct||!_t)&&clearTimeout)return _t=clearTimeout,clearTimeout(t);try{_t(t)}catch(e){try{return _t.call(null,t)}catch(e){return _t.call(this,t)}}}(t)}}function Dt(t,e){this.fun=t,this.array=e}function Ut(){}Nt.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];Tt.push(new Dt(t,e)),1!==Tt.length||Ot||Mt(Ft)},Dt.prototype.run=function(){this.fun.apply(null,this.array)},Nt.title="browser",Nt.browser=!0,Nt.env={},Nt.argv=[],Nt.version="",Nt.versions={},Nt.on=Ut,Nt.addListener=Ut,Nt.once=Ut,Nt.off=Ut,Nt.removeListener=Ut,Nt.removeAllListeners=Ut,Nt.emit=Ut,Nt.prependListener=Ut,Nt.prependOnceListener=Ut,Nt.listeners=function(t){return[]},Nt.binding=function(t){throw new Error("process.binding is not supported")},Nt.cwd=function(){return"/"},Nt.chdir=function(t){throw new Error("process.chdir is not supported")},Nt.umask=function(){return 0},
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */function(){"use strict";var t="input is invalid type",r="object"==typeof window,n=r?window:{};n.JS_SHA3_NO_WINDOW&&(r=!1);var i=!r&&"object"==typeof self;!n.JS_SHA3_NO_NODE_JS&&"object"==typeof St&&St.versions&&St.versions.node?n=e:i&&(n=self);var o=!n.JS_SHA3_NO_COMMON_JS&&Pt,s="function"==typeof define&&define.amd,a=!n.JS_SHA3_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,u="0123456789abcdef".split(""),l=[4,1024,262144,67108864],c=[0,8,16,24],h=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],f=[224,256,384,512],d=[128,256],p=["hex","buffer","arrayBuffer","array","digest"],g={128:168,256:136};!n.JS_SHA3_NO_NODE_JS&&Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),!a||!n.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(t){return"object"==typeof t&&t.buffer&&t.buffer.constructor===ArrayBuffer});for(var m=function(t,e,r){return function(n){return new M(t,e,t).update(n)[r]()}},y=function(t,e,r){return function(n,i){return new M(t,e,i).update(n)[r]()}},v=function(t,e,r){return function(e,n,i,o){return k["cshake"+t].update(e,n,i,o)[r]()}},w=function(t,e,r){return function(e,n,i,o){return k["kmac"+t].update(e,n,i,o)[r]()}},b=function(t,e,r,n){for(var i=0;i<p.length;++i){var o=p[i];t[o]=e(r,n,o)}return t},A=function(t,e){var r=m(t,e,"hex");return r.create=function(){return new M(t,e,t)},r.update=function(t){return r.create().update(t)},b(r,m,t,e)},E=[{name:"keccak",padding:[1,256,65536,16777216],bits:f,createMethod:A},{name:"sha3",padding:[6,1536,393216,100663296],bits:f,createMethod:A},{name:"shake",padding:[31,7936,2031616,520093696],bits:d,createMethod:function(t,e){var r=y(t,e,"hex");return r.create=function(r){return new M(t,e,r)},r.update=function(t,e){return r.create(e).update(t)},b(r,y,t,e)}},{name:"cshake",padding:l,bits:d,createMethod:function(t,e){var r=g[t],n=v(t,0,"hex");return n.create=function(n,i,o){return i||o?new M(t,e,n).bytepad([i,o],r):k["shake"+t].create(n)},n.update=function(t,e,r,i){return n.create(e,r,i).update(t)},b(n,v,t,e)}},{name:"kmac",padding:l,bits:d,createMethod:function(t,e){var r=g[t],n=w(t,0,"hex");return n.create=function(n,i,o){return new I(t,e,i).bytepad(["KMAC",o],r).bytepad([n],r)},n.update=function(t,e,r,i){return n.create(t,r,i).update(e)},b(n,w,t,e)}}],k={},S=[],x=0;x<E.length;++x)for(var _=E[x],P=_.bits,N=0;N<P.length;++N){var R=_.name+"_"+P[N];if(S.push(R),k[R]=_.createMethod(P[N],_.padding),"sha3"!==_.name){var C=_.name+P[N];S.push(C),k[C]=k[R]}}function M(t,e,r){this.blocks=[],this.s=[],this.padding=e,this.outputBits=r,this.reset=!0,this.finalized=!1,this.block=0,this.start=0,this.blockCount=1600-(t<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=r>>5,this.extraBytes=(31&r)>>3;for(var n=0;n<50;++n)this.s[n]=0}function I(t,e,r){M.call(this,t,e,r)}M.prototype.update=function(e){if(this.finalized)throw new Error("finalize already called");var r,n=typeof e;if("string"!==n){if("object"!==n)throw new Error(t);if(null===e)throw new Error(t);if(a&&e.constructor===ArrayBuffer)e=new Uint8Array(e);else if(!(Array.isArray(e)||a&&ArrayBuffer.isView(e)))throw new Error(t);r=!0}for(var i,o,s=this.blocks,u=this.byteCount,l=e.length,h=this.blockCount,f=0,d=this.s;f<l;){if(this.reset)for(this.reset=!1,s[0]=this.block,i=1;i<h+1;++i)s[i]=0;if(r)for(i=this.start;f<l&&i<u;++f)s[i>>2]|=e[f]<<c[3&i++];else for(i=this.start;f<l&&i<u;++f)(o=e.charCodeAt(f))<128?s[i>>2]|=o<<c[3&i++]:o<2048?(s[i>>2]|=(192|o>>6)<<c[3&i++],s[i>>2]|=(128|63&o)<<c[3&i++]):o<55296||o>=57344?(s[i>>2]|=(224|o>>12)<<c[3&i++],s[i>>2]|=(128|o>>6&63)<<c[3&i++],s[i>>2]|=(128|63&o)<<c[3&i++]):(o=65536+((1023&o)<<10|1023&e.charCodeAt(++f)),s[i>>2]|=(240|o>>18)<<c[3&i++],s[i>>2]|=(128|o>>12&63)<<c[3&i++],s[i>>2]|=(128|o>>6&63)<<c[3&i++],s[i>>2]|=(128|63&o)<<c[3&i++]);if(this.lastByteIndex=i,i>=u){for(this.start=i-u,this.block=s[h],i=0;i<h;++i)d[i]^=s[i];T(d),this.reset=!0}else this.start=i}return this},M.prototype.encode=function(t,e){var r=255&t,n=1,i=[r];for(r=255&(t>>=8);r>0;)i.unshift(r),r=255&(t>>=8),++n;return e?i.push(n):i.unshift(n),this.update(i),i.length},M.prototype.encodeString=function(e){var r,n=typeof e;if("string"!==n){if("object"!==n)throw new Error(t);if(null===e)throw new Error(t);if(a&&e.constructor===ArrayBuffer)e=new Uint8Array(e);else if(!(Array.isArray(e)||a&&ArrayBuffer.isView(e)))throw new Error(t);r=!0}var i=0,o=e.length;if(r)i=o;else for(var s=0;s<e.length;++s){var u=e.charCodeAt(s);u<128?i+=1:u<2048?i+=2:u<55296||u>=57344?i+=3:(u=65536+((1023&u)<<10|1023&e.charCodeAt(++s)),i+=4)}return i+=this.encode(8*i),this.update(e),i},M.prototype.bytepad=function(t,e){for(var r=this.encode(e),n=0;n<t.length;++n)r+=this.encodeString(t[n]);var i=e-r%e,o=[];return o.length=i,this.update(o),this},M.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var t=this.blocks,e=this.lastByteIndex,r=this.blockCount,n=this.s;if(t[e>>2]|=this.padding[3&e],this.lastByteIndex===this.byteCount)for(t[0]=t[r],e=1;e<r+1;++e)t[e]=0;for(t[r-1]|=2147483648,e=0;e<r;++e)n[e]^=t[e];T(n)}},M.prototype.toString=M.prototype.hex=function(){this.finalize();for(var t,e=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,o=0,s=0,a="";s<n;){for(o=0;o<e&&s<n;++o,++s)t=r[o],a+=u[t>>4&15]+u[15&t]+u[t>>12&15]+u[t>>8&15]+u[t>>20&15]+u[t>>16&15]+u[t>>28&15]+u[t>>24&15];s%e==0&&(T(r),o=0)}return i&&(t=r[o],a+=u[t>>4&15]+u[15&t],i>1&&(a+=u[t>>12&15]+u[t>>8&15]),i>2&&(a+=u[t>>20&15]+u[t>>16&15])),a},M.prototype.arrayBuffer=function(){this.finalize();var t,e=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,o=0,s=0,a=this.outputBits>>3;t=i?new ArrayBuffer(n+1<<2):new ArrayBuffer(a);for(var u=new Uint32Array(t);s<n;){for(o=0;o<e&&s<n;++o,++s)u[s]=r[o];s%e==0&&T(r)}return i&&(u[o]=r[o],t=t.slice(0,a)),t},M.prototype.buffer=M.prototype.arrayBuffer,M.prototype.digest=M.prototype.array=function(){this.finalize();for(var t,e,r=this.blockCount,n=this.s,i=this.outputBlocks,o=this.extraBytes,s=0,a=0,u=[];a<i;){for(s=0;s<r&&a<i;++s,++a)t=a<<2,e=n[s],u[t]=255&e,u[t+1]=e>>8&255,u[t+2]=e>>16&255,u[t+3]=e>>24&255;a%r==0&&T(n)}return o&&(t=a<<2,e=n[s],u[t]=255&e,o>1&&(u[t+1]=e>>8&255),o>2&&(u[t+2]=e>>16&255)),u},I.prototype=new M,I.prototype.finalize=function(){return this.encode(this.outputBits,!0),M.prototype.finalize.call(this)};var T=function(t){var e,r,n,i,o,s,a,u,l,c,f,d,p,g,m,y,v,w,b,A,E,k,S,x,_,P,N,R,C,M,I,T,O,B,L,F,D,U,G,q,j,z,H,K,J,V,W,Y,Q,Z,X,$,tt,et,rt,nt,it,ot,st,at,ut,lt,ct;for(n=0;n<48;n+=2)i=t[0]^t[10]^t[20]^t[30]^t[40],o=t[1]^t[11]^t[21]^t[31]^t[41],s=t[2]^t[12]^t[22]^t[32]^t[42],a=t[3]^t[13]^t[23]^t[33]^t[43],u=t[4]^t[14]^t[24]^t[34]^t[44],l=t[5]^t[15]^t[25]^t[35]^t[45],c=t[6]^t[16]^t[26]^t[36]^t[46],f=t[7]^t[17]^t[27]^t[37]^t[47],e=(d=t[8]^t[18]^t[28]^t[38]^t[48])^(s<<1|a>>>31),r=(p=t[9]^t[19]^t[29]^t[39]^t[49])^(a<<1|s>>>31),t[0]^=e,t[1]^=r,t[10]^=e,t[11]^=r,t[20]^=e,t[21]^=r,t[30]^=e,t[31]^=r,t[40]^=e,t[41]^=r,e=i^(u<<1|l>>>31),r=o^(l<<1|u>>>31),t[2]^=e,t[3]^=r,t[12]^=e,t[13]^=r,t[22]^=e,t[23]^=r,t[32]^=e,t[33]^=r,t[42]^=e,t[43]^=r,e=s^(c<<1|f>>>31),r=a^(f<<1|c>>>31),t[4]^=e,t[5]^=r,t[14]^=e,t[15]^=r,t[24]^=e,t[25]^=r,t[34]^=e,t[35]^=r,t[44]^=e,t[45]^=r,e=u^(d<<1|p>>>31),r=l^(p<<1|d>>>31),t[6]^=e,t[7]^=r,t[16]^=e,t[17]^=r,t[26]^=e,t[27]^=r,t[36]^=e,t[37]^=r,t[46]^=e,t[47]^=r,e=c^(i<<1|o>>>31),r=f^(o<<1|i>>>31),t[8]^=e,t[9]^=r,t[18]^=e,t[19]^=r,t[28]^=e,t[29]^=r,t[38]^=e,t[39]^=r,t[48]^=e,t[49]^=r,g=t[0],m=t[1],V=t[11]<<4|t[10]>>>28,W=t[10]<<4|t[11]>>>28,R=t[20]<<3|t[21]>>>29,C=t[21]<<3|t[20]>>>29,at=t[31]<<9|t[30]>>>23,ut=t[30]<<9|t[31]>>>23,z=t[40]<<18|t[41]>>>14,H=t[41]<<18|t[40]>>>14,B=t[2]<<1|t[3]>>>31,L=t[3]<<1|t[2]>>>31,y=t[13]<<12|t[12]>>>20,v=t[12]<<12|t[13]>>>20,Y=t[22]<<10|t[23]>>>22,Q=t[23]<<10|t[22]>>>22,M=t[33]<<13|t[32]>>>19,I=t[32]<<13|t[33]>>>19,lt=t[42]<<2|t[43]>>>30,ct=t[43]<<2|t[42]>>>30,et=t[5]<<30|t[4]>>>2,rt=t[4]<<30|t[5]>>>2,F=t[14]<<6|t[15]>>>26,D=t[15]<<6|t[14]>>>26,w=t[25]<<11|t[24]>>>21,b=t[24]<<11|t[25]>>>21,Z=t[34]<<15|t[35]>>>17,X=t[35]<<15|t[34]>>>17,T=t[45]<<29|t[44]>>>3,O=t[44]<<29|t[45]>>>3,x=t[6]<<28|t[7]>>>4,_=t[7]<<28|t[6]>>>4,nt=t[17]<<23|t[16]>>>9,it=t[16]<<23|t[17]>>>9,U=t[26]<<25|t[27]>>>7,G=t[27]<<25|t[26]>>>7,A=t[36]<<21|t[37]>>>11,E=t[37]<<21|t[36]>>>11,$=t[47]<<24|t[46]>>>8,tt=t[46]<<24|t[47]>>>8,K=t[8]<<27|t[9]>>>5,J=t[9]<<27|t[8]>>>5,P=t[18]<<20|t[19]>>>12,N=t[19]<<20|t[18]>>>12,ot=t[29]<<7|t[28]>>>25,st=t[28]<<7|t[29]>>>25,q=t[38]<<8|t[39]>>>24,j=t[39]<<8|t[38]>>>24,k=t[48]<<14|t[49]>>>18,S=t[49]<<14|t[48]>>>18,t[0]=g^~y&w,t[1]=m^~v&b,t[10]=x^~P&R,t[11]=_^~N&C,t[20]=B^~F&U,t[21]=L^~D&G,t[30]=K^~V&Y,t[31]=J^~W&Q,t[40]=et^~nt&ot,t[41]=rt^~it&st,t[2]=y^~w&A,t[3]=v^~b&E,t[12]=P^~R&M,t[13]=N^~C&I,t[22]=F^~U&q,t[23]=D^~G&j,t[32]=V^~Y&Z,t[33]=W^~Q&X,t[42]=nt^~ot&at,t[43]=it^~st&ut,t[4]=w^~A&k,t[5]=b^~E&S,t[14]=R^~M&T,t[15]=C^~I&O,t[24]=U^~q&z,t[25]=G^~j&H,t[34]=Y^~Z&$,t[35]=Q^~X&tt,t[44]=ot^~at&lt,t[45]=st^~ut&ct,t[6]=A^~k&g,t[7]=E^~S&m,t[16]=M^~T&x,t[17]=I^~O&_,t[26]=q^~z&B,t[27]=j^~H&L,t[36]=Z^~$&K,t[37]=X^~tt&J,t[46]=at^~lt&et,t[47]=ut^~ct&rt,t[8]=k^~g&y,t[9]=S^~m&v,t[18]=T^~x&P,t[19]=O^~_&N,t[28]=z^~B&F,t[29]=H^~L&D,t[38]=$^~K&V,t[39]=tt^~J&W,t[48]=lt^~et&nt,t[49]=ct^~rt&it,t[0]^=h[n],t[1]^=h[n+1]};if(o)Pt=k;else{for(x=0;x<S.length;++x)n[S[x]]=k[S[x]];s&&define((function(){return k}))}}();l=o("3Yhqu");function Gt(t){return"0x"+r(Pt).keccak_256((0,l.arrayify)(t))}var qt=o("7ZdUu");const jt=new(0,(c=o("2rINa")).Logger)("address/5.7.0");function zt(t){(0,l.isHexString)(t,20)||jt.throwArgumentError("invalid address","address",t);const e=(t=t.toLowerCase()).substring(2).split(""),r=new Uint8Array(40);for(let t=0;t<40;t++)r[t]=e[t].charCodeAt(0);const n=(0,l.arrayify)(Gt(r));for(let t=0;t<40;t+=2)n[t>>1]>>4>=8&&(e[t]=e[t].toUpperCase()),(15&n[t>>1])>=8&&(e[t+1]=e[t+1].toUpperCase());return"0x"+e.join("")}const Ht={};for(let t=0;t<10;t++)Ht[String(t)]=String(t);for(let t=0;t<26;t++)Ht[String.fromCharCode(65+t)]=String(10+t);const Kt=Math.floor((Jt=9007199254740991,Math.log10?Math.log10(Jt):Math.log(Jt)/Math.LN10));var Jt;function Vt(t){let e=(t=(t=t.toUpperCase()).substring(4)+t.substring(0,2)+"00").split("").map((t=>Ht[t])).join("");for(;e.length>=Kt;){let t=e.substring(0,Kt);e=parseInt(t,10)%97+e.substring(t.length)}let r=String(98-parseInt(e,10)%97);for(;r.length<2;)r="0"+r;return r}function Wt(t){let e=null;if("string"!=typeof t&&jt.throwArgumentError("invalid address","address",t),t.match(/^(0x)?[0-9a-fA-F]{40}$/))"0x"!==t.substring(0,2)&&(t="0x"+t),e=zt(t),t.match(/([A-F].*[a-f])|([a-f].*[A-F])/)&&e!==t&&jt.throwArgumentError("bad address checksum","address",t);else if(t.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){for(t.substring(2,4)!==Vt(t)&&jt.throwArgumentError("bad icap checksum","address",t),r=t.substring(4),e=new f(r,36).toString(16);e.length<40;)e="0"+e;e=zt("0x"+e)}else jt.throwArgumentError("invalid address","address",t);var r;return e}function Yt(t){try{return Wt(t),!0}catch(t){}return!1}function Qt(t){let e=(r=Wt(t).substring(2),new f(r,16).toString(36)).toUpperCase();for(var r;e.length<30;)e="0"+e;return"XE"+Vt("XE00"+e)+e}function Zt(t){let e=null;try{e=Wt(t.from)}catch(e){jt.throwArgumentError("missing from address","transaction",t)}const r=(0,l.stripZeros)((0,l.arrayify)(v.from(t.nonce).toHexString()));return Wt((0,l.hexDataSlice)(Gt((0,qt.encode)([e,r])),12))}function Xt(t,e,r){return 32!==(0,l.hexDataLength)(e)&&jt.throwArgumentError("salt must be 32 bytes","salt",e),32!==(0,l.hexDataLength)(r)&&jt.throwArgumentError("initCodeHash must be 32 bytes","initCodeHash",r),Wt((0,l.hexDataSlice)(Gt((0,l.concat)(["0xff",Wt(t),e,r])),12))}l=o("3Yhqu");class $t extends At{defaultValue(){return"0x0000000000000000000000000000000000000000"}encode(t,e){try{e=Wt(e)}catch(t){this._throwError(t.message,e)}return t.writeValue(e)}decode(t){return Wt((0,l.hexZeroPad)(t.readValue().toHexString(),20))}constructor(t){super("address","address",t,!1)}}c=o("2rINa");class te extends At{defaultValue(){return this.coder.defaultValue()}encode(t,e){return this.coder.encode(t,e)}decode(t){return this.coder.decode(t)}constructor(t){super(t.name,t.type,void 0,t.dynamic),this.coder=t}}const ee=new(0,c.Logger)(Y);function re(t,e,r){let n=null;if(Array.isArray(r))n=r;else if(r&&"object"==typeof r){let t={};n=e.map((e=>{const n=e.localName;return n||ee.throwError("cannot encode object for signature with missing names",c.Logger.errors.INVALID_ARGUMENT,{argument:"values",coder:e,value:r}),t[n]&&ee.throwError("cannot encode object for signature with duplicate names",c.Logger.errors.INVALID_ARGUMENT,{argument:"values",coder:e,value:r}),t[n]=!0,r[n]}))}else ee.throwArgumentError("invalid tuple value","tuple",r);e.length!==n.length&&ee.throwArgumentError("types/value length mismatch","tuple",r);let i=new Et(t.wordSize),o=new Et(t.wordSize),s=[];e.forEach(((t,e)=>{let r=n[e];if(t.dynamic){let e=o.length;t.encode(o,r);let n=i.writeUpdatableValue();s.push((t=>{n(t+e)}))}else t.encode(i,r)})),s.forEach((t=>{t(i.length)}));let a=t.appendWriter(i);return a+=t.appendWriter(o),a}function ne(t,e){let r=[],n=t.subReader(0);e.forEach((e=>{let i=null;if(e.dynamic){let r=t.readValue(),o=n.subReader(r.toNumber());try{i=e.decode(o)}catch(t){if(t.code===c.Logger.errors.BUFFER_OVERRUN)throw t;i=t,i.baseType=e.name,i.name=e.localName,i.type=e.type}}else try{i=e.decode(t)}catch(t){if(t.code===c.Logger.errors.BUFFER_OVERRUN)throw t;i=t,i.baseType=e.name,i.name=e.localName,i.type=e.type}null!=i&&r.push(i)}));const i=e.reduce(((t,e)=>{const r=e.localName;return r&&(t[r]||(t[r]=0),t[r]++),t}),{});e.forEach(((t,e)=>{let n=t.localName;if(!n||1!==i[n])return;if("length"===n&&(n="_length"),null!=r[n])return;const o=r[e];o instanceof Error?Object.defineProperty(r,n,{enumerable:!0,get:()=>{throw o}}):r[n]=o}));for(let t=0;t<r.length;t++){const e=r[t];e instanceof Error&&Object.defineProperty(r,t,{enumerable:!0,get:()=>{throw e}})}return Object.freeze(r)}class ie extends At{defaultValue(){const t=this.coder.defaultValue(),e=[];for(let r=0;r<this.length;r++)e.push(t);return e}encode(t,e){Array.isArray(e)||this._throwError("expected array value",e);let r=this.length;-1===r&&(r=e.length,t.writeValue(e.length)),ee.checkArgumentCount(e.length,r,"coder array"+(this.localName?" "+this.localName:""));let n=[];for(let t=0;t<e.length;t++)n.push(this.coder);return re(t,n,e)}decode(t){let e=this.length;-1===e&&(e=t.readValue().toNumber(),32*e>t._data.length&&ee.throwError("insufficient data length",c.Logger.errors.BUFFER_OVERRUN,{length:t._data.length,count:e}));let r=[];for(let t=0;t<e;t++)r.push(new te(this.coder));return t.coerce(this.name,ne(t,r))}constructor(t,e,r){super("array",t.type+"["+(e>=0?e:"")+"]",r,-1===e||t.dynamic),this.coder=t,this.length=e}}class oe extends At{defaultValue(){return!1}encode(t,e){return t.writeValue(e?1:0)}decode(t){return t.coerce(this.type,!t.readValue().isZero())}constructor(t){super("bool","bool",t,!1)}}l=o("3Yhqu");class se extends At{defaultValue(){return"0x"}encode(t,e){e=(0,l.arrayify)(e);let r=t.writeValue(e.length);return r+=t.writeBytes(e),r}decode(t){return t.readBytes(t.readValue().toNumber(),!0)}constructor(t,e){super(t,t,e,!0)}}class ae extends se{decode(t){return t.coerce(this.name,(0,l.hexlify)(super.decode(t)))}constructor(t){super("bytes",t)}}l=o("3Yhqu");class ue extends At{defaultValue(){return"0x0000000000000000000000000000000000000000000000000000000000000000".substring(0,2+2*this.size)}encode(t,e){let r=(0,l.arrayify)(e);return r.length!==this.size&&this._throwError("incorrect data length",e),t.writeBytes(r)}decode(t){return t.coerce(this.name,(0,l.hexlify)(t.readBytes(this.size)))}constructor(t,e){let r="bytes"+String(t);super(r,r,e,!1),this.size=t}}class le extends At{defaultValue(){return null}encode(t,e){return null!=e&&this._throwError("not null",e),t.writeBytes([])}decode(t){return t.readBytes(0),t.coerce(this.name,null)}constructor(t){super("null","",t,!1)}}var ce={};t(ce,"AddressZero",(function(){return he})),t(ce,"NegativeOne",(function(){return fe})),t(ce,"Zero",(function(){return de})),t(ce,"One",(function(){return pe})),t(ce,"Two",(function(){return ge})),t(ce,"WeiPerEther",(function(){return me})),t(ce,"MaxUint256",(function(){return ye})),t(ce,"MinInt256",(function(){return ve})),t(ce,"MaxInt256",(function(){return we})),t(ce,"HashZero",(function(){return be})),t(ce,"EtherSymbol",(function(){return Ae}));const he="0x0000000000000000000000000000000000000000",fe=v.from(-1),de=v.from(0),pe=v.from(1),ge=v.from(2),me=v.from("1000000000000000000"),ye=v.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),ve=v.from("-0x8000000000000000000000000000000000000000000000000000000000000000"),we=v.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),be="0x0000000000000000000000000000000000000000000000000000000000000000",Ae="Ξ";class Ee extends At{defaultValue(){return 0}encode(t,e){let r=v.from(e),n=ye.mask(8*t.wordSize);if(this.signed){let t=n.mask(8*this.size-1);(r.gt(t)||r.lt(t.add(pe).mul(fe)))&&this._throwError("value out-of-bounds",e)}else(r.lt(de)||r.gt(n.mask(8*this.size)))&&this._throwError("value out-of-bounds",e);return r=r.toTwos(8*this.size).mask(8*this.size),this.signed&&(r=r.fromTwos(8*this.size).toTwos(8*t.wordSize)),t.writeValue(r)}decode(t){let e=t.readValue().mask(8*this.size);return this.signed&&(e=e.fromTwos(8*this.size)),t.coerce(this.name,e)}constructor(t,e,r){const n=(e?"int":"uint")+8*t;super(n,n,r,!1),this.size=t,this.signed=e}}l=o("3Yhqu"),l=o("3Yhqu");const ke=new(0,(c=o("2rINa")).Logger)("strings/5.7.0");var Se,xe,_e,Pe;function Ne(t,e,r,n,i){if(t===_e.BAD_PREFIX||t===_e.UNEXPECTED_CONTINUE){let t=0;for(let n=e+1;n<r.length&&r[n]>>6==2;n++)t++;return t}return t===_e.OVERRUN?r.length-e-1:0}(xe=Se||(Se={})).current="",xe.NFC="NFC",xe.NFD="NFD",xe.NFKC="NFKC",xe.NFKD="NFKD",(Pe=_e||(_e={})).UNEXPECTED_CONTINUE="unexpected continuation byte",Pe.BAD_PREFIX="bad codepoint prefix",Pe.OVERRUN="string overrun",Pe.MISSING_CONTINUE="missing continuation byte",Pe.OUT_OF_RANGE="out of UTF-8 range",Pe.UTF16_SURROGATE="UTF-16 surrogate",Pe.OVERLONG="overlong representation";const Re=Object.freeze({error:function(t,e,r,n,i){return ke.throwArgumentError(`invalid codepoint at offset ${e}; ${t}`,"bytes",r)},ignore:Ne,replace:function(t,e,r,n,i){return t===_e.OVERLONG?(n.push(i),0):(n.push(65533),Ne(t,e,r))}});function Ce(t,e){null==e&&(e=Re.error),t=(0,l.arrayify)(t);const r=[];let n=0;for(;n<t.length;){const i=t[n++];if(i>>7==0){r.push(i);continue}let o=null,s=null;if(192==(224&i))o=1,s=127;else if(224==(240&i))o=2,s=2047;else{if(240!=(248&i)){n+=e(128==(192&i)?_e.UNEXPECTED_CONTINUE:_e.BAD_PREFIX,n-1,t,r);continue}o=3,s=65535}if(n-1+o>=t.length){n+=e(_e.OVERRUN,n-1,t,r);continue}let a=i&(1<<8-o-1)-1;for(let i=0;i<o;i++){let i=t[n];if(128!=(192&i)){n+=e(_e.MISSING_CONTINUE,n,t,r),a=null;break}a=a<<6|63&i,n++}null!==a&&(a>1114111?n+=e(_e.OUT_OF_RANGE,n-1-o,t,r,a):a>=55296&&a<=57343?n+=e(_e.UTF16_SURROGATE,n-1-o,t,r,a):a<=s?n+=e(_e.OVERLONG,n-1-o,t,r,a):r.push(a))}return r}function Me(t,e=Se.current){e!=Se.current&&(ke.checkNormalize(),t=t.normalize(e));let r=[];for(let e=0;e<t.length;e++){const n=t.charCodeAt(e);if(n<128)r.push(n);else if(n<2048)r.push(n>>6|192),r.push(63&n|128);else if(55296==(64512&n)){e++;const i=t.charCodeAt(e);if(e>=t.length||56320!=(64512&i))throw new Error("invalid utf-8 string");const o=65536+((1023&n)<<10)+(1023&i);r.push(o>>18|240),r.push(o>>12&63|128),r.push(o>>6&63|128),r.push(63&o|128)}else r.push(n>>12|224),r.push(n>>6&63|128),r.push(63&n|128)}return(0,l.arrayify)(r)}function Ie(t){const e="0000"+t.toString(16);return"\\u"+e.substring(e.length-4)}function Te(t,e){return'"'+Ce(t,e).map((t=>{if(t<256){switch(t){case 8:return"\\b";case 9:return"\\t";case 10:return"\\n";case 13:return"\\r";case 34:return'\\"';case 92:return"\\\\"}if(t>=32&&t<127)return String.fromCharCode(t)}return t<=65535?Ie(t):Ie(55296+((t-=65536)>>10&1023))+Ie(56320+(1023&t))})).join("")+'"'}function Oe(t){return t.map((t=>t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10&1023),56320+(1023&t))))).join("")}function Be(t,e){return Oe(Ce(t,e))}function Le(t,e=Se.current){return Ce(Me(t,e))}function Fe(t){const e=Me(t);if(e.length>31)throw new Error("bytes32 string must be less than 32 bytes");return(0,l.hexlify)((0,l.concat)([e,be]).slice(0,32))}function De(t){const e=(0,l.arrayify)(t);if(32!==e.length)throw new Error("invalid bytes32 - not 32 bytes long");if(0!==e[31])throw new Error("invalid bytes32 string - no null terminator");let r=31;for(;0===e[r-1];)r--;return Be(e.slice(0,r))}function Ue(t,e){e||(e=function(t){return[parseInt(t,16)]});let r=0,n={};return t.split(",").forEach((t=>{let i=t.split(":");r+=parseInt(i[0],16),n[r]=e(i[1])})),n}function Ge(t){let e=0;return t.split(",").map((t=>{let r=t.split("-");1===r.length?r[1]="0":""===r[1]&&(r[1]="1");let n=e+parseInt(r[0],16);return e=parseInt(r[1],16),{l:n,h:e}}))}function qe(t,e){let r=0;for(let n=0;n<e.length;n++){let i=e[n];if(r+=i.l,t>=r&&t<=r+i.h&&(t-r)%(i.d||1)==0){if(i.e&&-1!==i.e.indexOf(t-r))continue;return i}}return null}const je=Ge("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d"),ze="ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((t=>parseInt(t,16))),He=[{h:25,s:32,l:65},{h:30,s:32,e:[23],l:127},{h:54,s:1,e:[48],l:64,d:2},{h:14,s:1,l:57,d:2},{h:44,s:1,l:17,d:2},{h:10,s:1,e:[2,6,8],l:61,d:2},{h:16,s:1,l:68,d:2},{h:84,s:1,e:[18,24,66],l:19,d:2},{h:26,s:32,e:[17],l:435},{h:22,s:1,l:71,d:2},{h:15,s:80,l:40},{h:31,s:32,l:16},{h:32,s:1,l:80,d:2},{h:52,s:1,l:42,d:2},{h:12,s:1,l:55,d:2},{h:40,s:1,e:[38],l:15,d:2},{h:14,s:1,l:48,d:2},{h:37,s:48,l:49},{h:148,s:1,l:6351,d:2},{h:88,s:1,l:160,d:2},{h:15,s:16,l:704},{h:25,s:26,l:854},{h:25,s:32,l:55915},{h:37,s:40,l:1247},{h:25,s:-119711,l:53248},{h:25,s:-119763,l:52},{h:25,s:-119815,l:52},{h:25,s:-119867,e:[1,4,5,7,8,11,12,17],l:52},{h:25,s:-119919,l:52},{h:24,s:-119971,e:[2,7,8,17],l:52},{h:24,s:-120023,e:[2,7,13,15,16,17],l:52},{h:25,s:-120075,l:52},{h:25,s:-120127,l:52},{h:25,s:-120179,l:52},{h:25,s:-120231,l:52},{h:25,s:-120283,l:52},{h:25,s:-120335,l:52},{h:24,s:-119543,e:[17],l:56},{h:24,s:-119601,e:[17],l:58},{h:24,s:-119659,e:[17],l:58},{h:24,s:-119717,e:[17],l:58},{h:24,s:-119775,e:[17],l:58}],Ke=Ue("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3"),Je=Ue("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7"),Ve=Ue("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D",(function(t){if(t.length%4!=0)throw new Error("bad data");let e=[];for(let r=0;r<t.length;r+=4)e.push(parseInt(t.substring(r,r+4),16));return e})),We=Ge("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");function Ye(t){if(t.match(/^[a-z0-9-]*$/i)&&t.length<=59)return t.toLowerCase();let e=Le(t);var r;r=e.map((t=>{if(ze.indexOf(t)>=0)return[];if(t>=65024&&t<=65039)return[];let e=function(t){let e=qe(t,He);if(e)return[t+e.s];let r=Ke[t];if(r)return r;let n=Je[t];return n?[t+n[0]]:Ve[t]||null}(t);return e||[t]})),e=r.reduce(((t,e)=>(e.forEach((e=>{t.push(e)})),t)),[]),e=Le(Oe(e),Se.NFKC),e.forEach((t=>{if(qe(t,We))throw new Error("STRINGPREP_CONTAINS_PROHIBITED")})),e.forEach((t=>{if(qe(t,je))throw new Error("STRINGPREP_CONTAINS_UNASSIGNED")}));let n=Oe(e);if("-"===n.substring(0,1)||"--"===n.substring(2,4)||"-"===n.substring(n.length-1))throw new Error("invalid hyphen");return n}class Qe extends se{defaultValue(){return""}encode(t,e){return super.encode(t,Me(e))}decode(t){return Be(super.decode(t))}constructor(t){super("string",t)}}class Ze extends At{defaultValue(){const t=[];this.coders.forEach((e=>{t.push(e.defaultValue())}));const e=this.coders.reduce(((t,e)=>{const r=e.localName;return r&&(t[r]||(t[r]=0),t[r]++),t}),{});return this.coders.forEach(((r,n)=>{let i=r.localName;i&&1===e[i]&&("length"===i&&(i="_length"),null==t[i]&&(t[i]=t[n]))})),Object.freeze(t)}encode(t,e){return re(t,this.coders,e)}decode(t){return t.coerce(this.name,ne(t,this.coders))}constructor(t,e){let r=!1;const n=[];t.forEach((t=>{t.dynamic&&(r=!0),n.push(t.type)}));super("tuple","tuple("+n.join(",")+")",e,r),this.coders=t}}const Xe=new(0,c.Logger)(Y),$e=new RegExp(/^bytes([0-9]*)$/),tr=new RegExp(/^(u?int)([0-9]*)$/);class er{_getCoder(t){switch(t.baseType){case"address":return new $t(t.name);case"bool":return new oe(t.name);case"string":return new Qe(t.name);case"bytes":return new ae(t.name);case"array":return new ie(this._getCoder(t.arrayChildren),t.arrayLength,t.name);case"tuple":return new Ze((t.components||[]).map((t=>this._getCoder(t))),t.name);case"":return new le(t.name)}let e=t.type.match(tr);if(e){let r=parseInt(e[2]||"256");return(0===r||r>256||r%8!=0)&&Xe.throwArgumentError("invalid "+e[1]+" bit length","param",t),new Ee(r/8,"int"===e[1],t.name)}if(e=t.type.match($e),e){let r=parseInt(e[1]);return(0===r||r>32)&&Xe.throwArgumentError("invalid bytes length","param",t),new ue(r,t.name)}return Xe.throwArgumentError("invalid type","type",t.type)}_getWordSize(){return 32}_getReader(t,e){return new kt(t,this._getWordSize(),this.coerceFunc,e)}_getWriter(){return new Et(this._getWordSize())}getDefaultValue(t){const e=t.map((t=>this._getCoder(it.from(t))));return new Ze(e,"_").defaultValue()}encode(t,e){t.length!==e.length&&Xe.throwError("types/values length mismatch",c.Logger.errors.INVALID_ARGUMENT,{count:{types:t.length,values:e.length},value:{types:t,values:e}});const r=t.map((t=>this._getCoder(it.from(t)))),n=new Ze(r,"_"),i=this._getWriter();return n.encode(i,e),i.data}decode(t,e,r){const n=t.map((t=>this._getCoder(it.from(t))));return new Ze(n,"_").decode(this._getReader((0,l.arrayify)(e),r))}constructor(t){(0,L.defineReadOnly)(this,"coerceFunc",t||null)}}const rr=new er;l=o("3Yhqu");function nr(t){return Gt(Me(t))}l=o("3Yhqu"),c=o("2rINa");const ir="hash/5.7.0";function or(t,e){null==e&&(e=1);const r=[],n=r.forEach,i=function(t,e){n.call(t,(function(t){e>0&&Array.isArray(t)?i(t,e-1):r.push(t)}))};return i(t,e),r}function sr(t){return function(t){let e=0;return()=>t[e++]}(function(t){let e=0;function r(){return t[e++]<<8|t[e++]}let n=r(),i=1,o=[0,1];for(let t=1;t<n;t++)o.push(i+=r());let s=r(),a=e;e+=s;let u=0,l=0;function c(){return 0==u&&(l=l<<8|t[e++],u=8),l>>--u&1}const h=Math.pow(2,31),f=h>>>1,d=f>>1,p=h-1;let g=0;for(let t=0;t<31;t++)g=g<<1|c();let m=[],y=0,v=h;for(;;){let t=Math.floor(((g-y+1)*i-1)/v),e=0,r=n;for(;r-e>1;){let n=e+r>>>1;t<o[n]?r=n:e=n}if(0==e)break;m.push(e);let s=y+Math.floor(v*o[e]/i),a=y+Math.floor(v*o[e+1]/i)-1;for(;0==((s^a)&f);)g=g<<1&p|c(),s=s<<1&p,a=a<<1&p|1;for(;s&~a&d;)g=g&f|g<<1&p>>>1|c(),s=s<<1^f,a=(a^f)<<1|f|1;y=s,v=1+a-s}let w=n-4;return m.map((e=>{switch(e-w){case 3:return w+65792+(t[a++]<<16|t[a++]<<8|t[a++]);case 2:return w+256+(t[a++]<<8|t[a++]);case 1:return w+t[a++];default:return e-1}}))}(t))}function ar(t){return 1&t?~t>>1:t>>1}function ur(t,e){let r=Array(t);for(let n=0,i=-1;n<t;n++)r[n]=i+=1+e();return r}function lr(t,e){let r=Array(t);for(let n=0,i=0;n<t;n++)r[n]=i+=ar(e());return r}function cr(t,e){let r=ur(t(),t),n=t(),i=ur(n,t),o=function(t,e){let r=Array(t);for(let n=0;n<t;n++)r[n]=1+e();return r}(n,t);for(let t=0;t<n;t++)for(let e=0;e<o[t];e++)r.push(i[t]+e);return e?r.map((t=>e[t])):r}function hr(t,e,r){let n=Array(t).fill(void 0).map((()=>[]));for(let i=0;i<e;i++)lr(t,r).forEach(((t,e)=>n[e].push(t)));return n}function fr(t,e){let r=1+e(),n=e(),i=function(t){let e=[];for(;;){let r=t();if(0==r)break;e.push(r)}return e}(e);return or(hr(i.length,1+t,e).map(((t,e)=>{const o=t[0],s=t.slice(1);return Array(i[e]).fill(void 0).map(((t,e)=>{let i=e*n;return[o+e*r,s.map((t=>t+i))]}))})))}function dr(t,e){return hr(1+e(),1+t,e).map((t=>[t[0],t.slice(1)]))}o("G6hN9");const pr=sr((0,(gs=o("9fE0x")).decode)("")),gr=new Set(cr(pr)),mr=new Set(cr(pr)),yr=function(t){let e=[];for(;;){let r=t();if(0==r)break;e.push(fr(r,t))}for(;;){let r=t()-1;if(r<0)break;e.push(dr(r,t))}return function(t){const e={};for(let r=0;r<t.length;r++){const n=t[r];e[n[0]]=n[1]}return e}(or(e))}(pr),vr=function(t){let e=cr(t).sort(((t,e)=>t-e));return function r(){let n=[];for(;;){let i=cr(t,e);if(0==i.length)break;n.push({set:new Set(i),node:r()})}n.sort(((t,e)=>e.set.size-t.set.size));let i=t(),o=i%3;i=i/3|0;let s=!!(1&i);return i>>=1,{branches:n,valid:o,fe0f:s,save:1==i,check:2==i}}()}(pr);function wr(t){return Le(t)}function br(t){return t.filter((t=>65039!=t))}function Ar(t){for(let e of t.split(".")){let t=wr(e);try{for(let e=t.lastIndexOf(95)-1;e>=0;e--)if(95!==t[e])throw new Error("underscore only allowed at start");if(t.length>=4&&t.every((t=>t<128))&&45===t[2]&&45===t[3])throw new Error("invalid label extension")}catch(t){throw new Error(`Invalid label "${e}": ${t.message}`)}}return t}function Er(t){return Ar(function(t,e){let r=wr(t).reverse(),n=[];for(;r.length;){let t=kr(r);if(t){n.push(...e(t));continue}let i=r.pop();if(gr.has(i)){n.push(i);continue}if(mr.has(i))continue;let o=yr[i];if(!o)throw new Error(`Disallowed codepoint: 0x${i.toString(16).toUpperCase()}`);n.push(...o)}return Ar((i=String.fromCodePoint(...n),i.normalize("NFC")));var i}(t,br))}function kr(t,e){var r;let n,i,o=vr,s=[],a=t.length;for(e&&(e.length=0);a;){let u=t[--a];if(o=null===(r=o.branches.find((t=>t.set.has(u))))||void 0===r?void 0:r.node,!o)break;if(o.save)i=u;else if(o.check&&u===i)break;s.push(u),o.fe0f&&(s.push(65039),a>0&&65039==t[a-1]&&a--),o.valid&&(n=s.slice(),2==o.valid&&n.splice(1,1),e&&e.push(...t.slice(a).reverse()),t.length=a)}return n}const Sr=new(0,c.Logger)(ir),xr=new Uint8Array(32);function _r(t){if(0===t.length)throw new Error("invalid ENS name; empty component");return t}function Pr(t){const e=Me(Er(t)),r=[];if(0===t.length)return r;let n=0;for(let t=0;t<e.length;t++){46===e[t]&&(r.push(_r(e.slice(n,t))),n=t+1)}if(n>=e.length)throw new Error("invalid ENS name; empty component");return r.push(_r(e.slice(n))),r}function Nr(t){try{return 0!==Pr(t).length}catch(t){}return!1}function Rr(t){"string"!=typeof t&&Sr.throwArgumentError("invalid ENS name; not a string","name",t);let e=xr;const r=Pr(t);for(;r.length;)e=Gt((0,l.concat)([e,Gt(r.pop())]));return(0,l.hexlify)(e)}function Cr(t){return(0,l.hexlify)((0,l.concat)(Pr(t).map((t=>{if(t.length>63)throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");const e=new Uint8Array(t.length+1);return e.set(t,1),e[0]=e.length-1,e}))))+"00"}xr.fill(0);l=o("3Yhqu");function Mr(t){return"string"==typeof t&&(t=Me(t)),Gt((0,l.concat)([Me("Ethereum Signed Message:\n"),Me(String(t.length)),t]))}var Ir={};t(Ir,"TypedDataEncoder",(function(){return Wr}),(function(t){return Wr=t}));l=o("3Yhqu"),c=o("2rINa");var Tr=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const Or=new(0,c.Logger)(ir),Br=new Uint8Array(32);Br.fill(0);const Lr=v.from(-1),Fr=v.from(0),Dr=v.from(1),Ur=v.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");const Gr=(0,l.hexZeroPad)(Dr.toHexString(),32),qr=(0,l.hexZeroPad)(Fr.toHexString(),32),jr={name:"string",version:"string",chainId:"uint256",verifyingContract:"address",salt:"bytes32"},zr=["name","version","chainId","verifyingContract","salt"];function Hr(t){return function(e){return"string"!=typeof e&&Or.throwArgumentError(`invalid domain value for ${JSON.stringify(t)}`,`domain.${t}`,e),e}}const Kr={name:Hr("name"),version:Hr("version"),chainId:function(t){try{return v.from(t).toString()}catch(t){}return Or.throwArgumentError('invalid domain value for "chainId"',"domain.chainId",t)},verifyingContract:function(t){try{return Wt(t).toLowerCase()}catch(t){}return Or.throwArgumentError('invalid domain value "verifyingContract"',"domain.verifyingContract",t)},salt:function(t){try{const e=(0,l.arrayify)(t);if(32!==e.length)throw new Error("bad length");return(0,l.hexlify)(e)}catch(t){}return Or.throwArgumentError('invalid domain value "salt"',"domain.salt",t)}};function Jr(t){{const e=t.match(/^(u?)int(\d*)$/);if(e){const r=""===e[1],n=parseInt(e[2]||"256");(n%8!=0||n>256||e[2]&&e[2]!==String(n))&&Or.throwArgumentError("invalid numeric width","type",t);const i=Ur.mask(r?n-1:n),o=r?i.add(Dr).mul(Lr):Fr;return function(e){const r=v.from(e);return(r.lt(o)||r.gt(i))&&Or.throwArgumentError(`value out-of-bounds for ${t}`,"value",e),(0,l.hexZeroPad)(r.toTwos(256).toHexString(),32)}}}{const e=t.match(/^bytes(\d+)$/);if(e){const r=parseInt(e[1]);return(0===r||r>32||e[1]!==String(r))&&Or.throwArgumentError("invalid bytes width","type",t),function(e){return(0,l.arrayify)(e).length!==r&&Or.throwArgumentError(`invalid length for ${t}`,"value",e),function(t){const e=(0,l.arrayify)(t),r=e.length%32;return r?(0,l.hexConcat)([e,Br.slice(r)]):(0,l.hexlify)(e)}(e)}}}switch(t){case"address":return function(t){return(0,l.hexZeroPad)(Wt(t),32)};case"bool":return function(t){return t?Gr:qr};case"bytes":return function(t){return Gt(t)};case"string":return function(t){return nr(t)}}return null}function Vr(t,e){return`${t}(${e.map((({name:t,type:e})=>e+" "+t)).join(",")})`}class Wr{getEncoder(t){let e=this._encoderCache[t];return e||(e=this._encoderCache[t]=this._getEncoder(t)),e}_getEncoder(t){{const e=Jr(t);if(e)return e}const e=t.match(/^(.*)(\x5b(\d*)\x5d)$/);if(e){const t=e[1],r=this.getEncoder(t),n=parseInt(e[3]);return e=>{n>=0&&e.length!==n&&Or.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",e);let i=e.map(r);return this._types[t]&&(i=i.map(Gt)),Gt((0,l.hexConcat)(i))}}const r=this.types[t];if(r){const e=nr(this._types[t]);return t=>{const n=r.map((({name:e,type:r})=>{const n=this.getEncoder(r)(t[e]);return this._types[r]?Gt(n):n}));return n.unshift(e),(0,l.hexConcat)(n)}}return Or.throwArgumentError(`unknown type: ${t}`,"type",t)}encodeType(t){const e=this._types[t];return e||Or.throwArgumentError(`unknown type: ${JSON.stringify(t)}`,"name",t),e}encodeData(t,e){return this.getEncoder(t)(e)}hashStruct(t,e){return Gt(this.encodeData(t,e))}encode(t){return this.encodeData(this.primaryType,t)}hash(t){return this.hashStruct(this.primaryType,t)}_visit(t,e,r){if(Jr(t))return r(t,e);const n=t.match(/^(.*)(\x5b(\d*)\x5d)$/);if(n){const t=n[1],i=parseInt(n[3]);return i>=0&&e.length!==i&&Or.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",e),e.map((e=>this._visit(t,e,r)))}const i=this.types[t];return i?i.reduce(((t,{name:n,type:i})=>(t[n]=this._visit(i,e[n],r),t)),{}):Or.throwArgumentError(`unknown type: ${t}`,"type",t)}visit(t,e){return this._visit(this.primaryType,t,e)}static from(t){return new Wr(t)}static getPrimaryType(t){return Wr.from(t).primaryType}static hashStruct(t,e,r){return Wr.from(e).hashStruct(t,r)}static hashDomain(t){const e=[];for(const r in t){const n=jr[r];n||Or.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(r)}`,"domain",t),e.push({name:r,type:n})}return e.sort(((t,e)=>zr.indexOf(t.name)-zr.indexOf(e.name))),Wr.hashStruct("EIP712Domain",{EIP712Domain:e},t)}static encode(t,e,r){return(0,l.hexConcat)(["0x1901",Wr.hashDomain(t),Wr.from(e).hash(r)])}static hash(t,e,r){return Gt(Wr.encode(t,e,r))}static resolveNames(t,e,r,n){return Tr(this,void 0,void 0,(function*(){t=(0,L.shallowCopy)(t);const i={};t.verifyingContract&&!(0,l.isHexString)(t.verifyingContract,20)&&(i[t.verifyingContract]="0x");const o=Wr.from(e);o.visit(r,((t,e)=>("address"!==t||(0,l.isHexString)(e,20)||(i[e]="0x"),e)));for(const t in i)i[t]=yield n(t);return t.verifyingContract&&i[t.verifyingContract]&&(t.verifyingContract=i[t.verifyingContract]),r=o.visit(r,((t,e)=>"address"===t&&i[e]?i[e]:e)),{domain:t,value:r}}))}static getPayload(t,e,r){Wr.hashDomain(t);const n={},i=[];zr.forEach((e=>{const r=t[e];null!=r&&(n[e]=Kr[e](r),i.push({name:e,type:jr[e]}))}));const o=Wr.from(e),s=(0,L.shallowCopy)(e);return s.EIP712Domain?Or.throwArgumentError("types must not contain EIP712Domain type","types.EIP712Domain",e):s.EIP712Domain=i,o.encode(r),{types:s,domain:n,primaryType:o.primaryType,message:o.visit(r,((t,e)=>{if(t.match(/^bytes(\d*)/))return(0,l.hexlify)((0,l.arrayify)(e));if(t.match(/^u?int/))return v.from(e).toString();switch(t){case"address":return e.toLowerCase();case"bool":return!!e;case"string":return"string"!=typeof e&&Or.throwArgumentError("invalid string","value",e),e}return Or.throwArgumentError("unsupported type","type",t)}))}}constructor(t){(0,L.defineReadOnly)(this,"types",Object.freeze((0,L.deepCopy)(t))),(0,L.defineReadOnly)(this,"_encoderCache",{}),(0,L.defineReadOnly)(this,"_types",{});const e={},r={},n={};Object.keys(t).forEach((t=>{e[t]={},r[t]=[],n[t]={}}));for(const n in t){const i={};t[n].forEach((o=>{i[o.name]&&Or.throwArgumentError(`duplicate variable name ${JSON.stringify(o.name)} in ${JSON.stringify(n)}`,"types",t),i[o.name]=!0;const s=o.type.match(/^([^\x5b]*)(\x5b|$)/)[1];s===n&&Or.throwArgumentError(`circular type reference to ${JSON.stringify(s)}`,"types",t);Jr(s)||(r[s]||Or.throwArgumentError(`unknown type ${JSON.stringify(s)}`,"types",t),r[s].push(n),e[n][s]=!0)}))}const i=Object.keys(r).filter((t=>0===r[t].length));0===i.length?Or.throwArgumentError("missing primary type","types",t):i.length>1&&Or.throwArgumentError(`ambiguous primary types or unused types: ${i.map((t=>JSON.stringify(t))).join(", ")}`,"types",t),(0,L.defineReadOnly)(this,"primaryType",i[0]),function i(o,s){s[o]&&Or.throwArgumentError(`circular type reference to ${JSON.stringify(o)}`,"types",t),s[o]=!0,Object.keys(e[o]).forEach((t=>{r[t]&&(i(t,s),Object.keys(s).forEach((e=>{n[e][t]=!0})))})),delete s[o]}(this.primaryType,{});for(const e in n){const r=Object.keys(n[e]);r.sort(),this._types[e]=Vr(e,t[e])+r.map((e=>Vr(e,t[e]))).join("")}}}const Yr=new(0,(c=o("2rINa")).Logger)(Y);class Qr extends L.Description{}class Zr extends L.Description{}class Xr extends L.Description{}class $r extends L.Description{static isIndexed(t){return!(!t||!t._isIndexed)}}const tn={"0x08c379a0":{signature:"Error(string)",name:"Error",inputs:["string"],reason:!0},"0x4e487b71":{signature:"Panic(uint256)",name:"Panic",inputs:["uint256"]}};function en(t,e){const r=new Error(`deferred error during ABI decoding triggered accessing ${t}`);return r.error=e,r}class rn{format(t){t||(t=rt.full),t===rt.sighash&&Yr.throwArgumentError("interface does not support formatting sighash","format",t);const e=this.fragments.map((e=>e.format(t)));return t===rt.json?JSON.stringify(e.map((t=>JSON.parse(t)))):e}static getAbiCoder(){return rr}static getAddress(t){return Wt(t)}static getSighash(t){return(0,l.hexDataSlice)(nr(t.format()),0,4)}static getEventTopic(t){return nr(t.format())}getFunction(t){if((0,l.isHexString)(t)){for(const e in this.functions)if(t===this.getSighash(e))return this.functions[e];Yr.throwArgumentError("no matching function","sighash",t)}if(-1===t.indexOf("(")){const e=t.trim(),r=Object.keys(this.functions).filter((t=>t.split("(")[0]===e));return 0===r.length?Yr.throwArgumentError("no matching function","name",e):r.length>1&&Yr.throwArgumentError("multiple matching functions","name",e),this.functions[r[0]]}const e=this.functions[ft.fromString(t).format()];return e||Yr.throwArgumentError("no matching function","signature",t),e}getEvent(t){if((0,l.isHexString)(t)){const e=t.toLowerCase();for(const t in this.events)if(e===this.getEventTopic(t))return this.events[t];Yr.throwArgumentError("no matching event","topichash",e)}if(-1===t.indexOf("(")){const e=t.trim(),r=Object.keys(this.events).filter((t=>t.split("(")[0]===e));return 0===r.length?Yr.throwArgumentError("no matching event","name",e):r.length>1&&Yr.throwArgumentError("multiple matching events","name",e),this.events[r[0]]}const e=this.events[at.fromString(t).format()];return e||Yr.throwArgumentError("no matching event","signature",t),e}getError(t){if((0,l.isHexString)(t)){const e=(0,L.getStatic)(this.constructor,"getSighash");for(const r in this.errors){if(t===e(this.errors[r]))return this.errors[r]}Yr.throwArgumentError("no matching error","sighash",t)}if(-1===t.indexOf("(")){const e=t.trim(),r=Object.keys(this.errors).filter((t=>t.split("(")[0]===e));return 0===r.length?Yr.throwArgumentError("no matching error","name",e):r.length>1&&Yr.throwArgumentError("multiple matching errors","name",e),this.errors[r[0]]}const e=this.errors[ft.fromString(t).format()];return e||Yr.throwArgumentError("no matching error","signature",t),e}getSighash(t){if("string"==typeof t)try{t=this.getFunction(t)}catch(e){try{t=this.getError(t)}catch(t){throw e}}return(0,L.getStatic)(this.constructor,"getSighash")(t)}getEventTopic(t){return"string"==typeof t&&(t=this.getEvent(t)),(0,L.getStatic)(this.constructor,"getEventTopic")(t)}_decodeParams(t,e){return this._abiCoder.decode(t,e)}_encodeParams(t,e){return this._abiCoder.encode(t,e)}encodeDeploy(t){return this._encodeParams(this.deploy.inputs,t||[])}decodeErrorResult(t,e){"string"==typeof t&&(t=this.getError(t));const r=(0,l.arrayify)(e);return(0,l.hexlify)(r.slice(0,4))!==this.getSighash(t)&&Yr.throwArgumentError(`data signature does not match error ${t.name}.`,"data",(0,l.hexlify)(r)),this._decodeParams(t.inputs,r.slice(4))}encodeErrorResult(t,e){return"string"==typeof t&&(t=this.getError(t)),(0,l.hexlify)((0,l.concat)([this.getSighash(t),this._encodeParams(t.inputs,e||[])]))}decodeFunctionData(t,e){"string"==typeof t&&(t=this.getFunction(t));const r=(0,l.arrayify)(e);return(0,l.hexlify)(r.slice(0,4))!==this.getSighash(t)&&Yr.throwArgumentError(`data signature does not match function ${t.name}.`,"data",(0,l.hexlify)(r)),this._decodeParams(t.inputs,r.slice(4))}encodeFunctionData(t,e){return"string"==typeof t&&(t=this.getFunction(t)),(0,l.hexlify)((0,l.concat)([this.getSighash(t),this._encodeParams(t.inputs,e||[])]))}decodeFunctionResult(t,e){"string"==typeof t&&(t=this.getFunction(t));let r=(0,l.arrayify)(e),n=null,i="",o=null,s=null,a=null;switch(r.length%this._abiCoder._getWordSize()){case 0:try{return this._abiCoder.decode(t.outputs,r)}catch(t){}break;case 4:{const t=(0,l.hexlify)(r.slice(0,4)),e=tn[t];if(e)o=this._abiCoder.decode(e.inputs,r.slice(4)),s=e.name,a=e.signature,e.reason&&(n=o[0]),"Error"===s?i=`; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(o[0])}`:"Panic"===s&&(i=`; VM Exception while processing transaction: reverted with panic code ${o[0]}`);else try{const e=this.getError(t);o=this._abiCoder.decode(e.inputs,r.slice(4)),s=e.name,a=e.format()}catch(t){}break}}return Yr.throwError("call revert exception"+i,c.Logger.errors.CALL_EXCEPTION,{method:t.format(),data:(0,l.hexlify)(e),errorArgs:o,errorName:s,errorSignature:a,reason:n})}encodeFunctionResult(t,e){return"string"==typeof t&&(t=this.getFunction(t)),(0,l.hexlify)(this._abiCoder.encode(t.outputs,e||[]))}encodeFilterTopics(t,e){"string"==typeof t&&(t=this.getEvent(t)),e.length>t.inputs.length&&Yr.throwError("too many arguments for "+t.format(),c.Logger.errors.UNEXPECTED_ARGUMENT,{argument:"values",value:e});let r=[];t.anonymous||r.push(this.getEventTopic(t));const n=(t,e)=>"string"===t.type?nr(e):"bytes"===t.type?Gt((0,l.hexlify)(e)):("bool"===t.type&&"boolean"==typeof e&&(e=e?"0x01":"0x00"),t.type.match(/^u?int/)&&(e=v.from(e).toHexString()),"address"===t.type&&this._abiCoder.encode(["address"],[e]),(0,l.hexZeroPad)((0,l.hexlify)(e),32));for(e.forEach(((e,i)=>{let o=t.inputs[i];o.indexed?null==e?r.push(null):"array"===o.baseType||"tuple"===o.baseType?Yr.throwArgumentError("filtering with tuples or arrays not supported","contract."+o.name,e):Array.isArray(e)?r.push(e.map((t=>n(o,t)))):r.push(n(o,e)):null!=e&&Yr.throwArgumentError("cannot filter non-indexed parameters; must be null","contract."+o.name,e)}));r.length&&null===r[r.length-1];)r.pop();return r}encodeEventLog(t,e){"string"==typeof t&&(t=this.getEvent(t));const r=[],n=[],i=[];return t.anonymous||r.push(this.getEventTopic(t)),e.length!==t.inputs.length&&Yr.throwArgumentError("event arguments/values mismatch","values",e),t.inputs.forEach(((t,o)=>{const s=e[o];if(t.indexed)if("string"===t.type)r.push(nr(s));else if("bytes"===t.type)r.push(Gt(s));else{if("tuple"===t.baseType||"array"===t.baseType)throw new Error("not implemented");r.push(this._abiCoder.encode([t.type],[s]))}else n.push(t),i.push(s)})),{data:this._abiCoder.encode(n,i),topics:r}}decodeEventLog(t,e,r){if("string"==typeof t&&(t=this.getEvent(t)),null!=r&&!t.anonymous){let e=this.getEventTopic(t);(0,l.isHexString)(r[0],32)&&r[0].toLowerCase()===e||Yr.throwError("fragment/topic mismatch",c.Logger.errors.INVALID_ARGUMENT,{argument:"topics[0]",expected:e,value:r[0]}),r=r.slice(1)}let n=[],i=[],o=[];t.inputs.forEach(((t,e)=>{t.indexed?"string"===t.type||"bytes"===t.type||"tuple"===t.baseType||"array"===t.baseType?(n.push(it.fromObject({type:"bytes32",name:t.name})),o.push(!0)):(n.push(t),o.push(!1)):(i.push(t),o.push(!1))}));let s=null!=r?this._abiCoder.decode(n,(0,l.concat)(r)):null,a=this._abiCoder.decode(i,e,!0),u=[],h=0,f=0;t.inputs.forEach(((t,e)=>{if(t.indexed)if(null==s)u[e]=new $r({_isIndexed:!0,hash:null});else if(o[e])u[e]=new $r({_isIndexed:!0,hash:s[f++]});else try{u[e]=s[f++]}catch(t){u[e]=t}else try{u[e]=a[h++]}catch(t){u[e]=t}if(t.name&&null==u[t.name]){const r=u[e];r instanceof Error?Object.defineProperty(u,t.name,{enumerable:!0,get:()=>{throw en(`property ${JSON.stringify(t.name)}`,r)}}):u[t.name]=r}}));for(let t=0;t<u.length;t++){const e=u[t];e instanceof Error&&Object.defineProperty(u,t,{enumerable:!0,get:()=>{throw en(`index ${t}`,e)}})}return Object.freeze(u)}parseTransaction(t){let e=this.getFunction(t.data.substring(0,10).toLowerCase());return e?new Zr({args:this._abiCoder.decode(e.inputs,"0x"+t.data.substring(10)),functionFragment:e,name:e.name,signature:e.format(),sighash:this.getSighash(e),value:v.from(t.value||"0")}):null}parseLog(t){let e=this.getEvent(t.topics[0]);return!e||e.anonymous?null:new Qr({eventFragment:e,name:e.name,signature:e.format(),topic:this.getEventTopic(e),args:this.decodeEventLog(e,t.data,t.topics)})}parseError(t){const e=(0,l.hexlify)(t);let r=this.getError(e.substring(0,10).toLowerCase());return r?new Xr({args:this._abiCoder.decode(r.inputs,"0x"+e.substring(10)),errorFragment:r,name:r.name,signature:r.format(),sighash:this.getSighash(r)}):null}static isInterface(t){return!(!t||!t._isInterface)}constructor(t){let e=[];e="string"==typeof t?JSON.parse(t):t,(0,L.defineReadOnly)(this,"fragments",e.map((t=>st.from(t))).filter((t=>null!=t))),(0,L.defineReadOnly)(this,"_abiCoder",(0,L.getStatic)(new.target,"getAbiCoder")()),(0,L.defineReadOnly)(this,"functions",{}),(0,L.defineReadOnly)(this,"errors",{}),(0,L.defineReadOnly)(this,"events",{}),(0,L.defineReadOnly)(this,"structs",{}),this.fragments.forEach((t=>{let e=null;switch(t.type){case"constructor":return this.deploy?void Yr.warn("duplicate definition - constructor"):void(0,L.defineReadOnly)(this,"deploy",t);case"function":e=this.functions;break;case"event":e=this.events;break;case"error":e=this.errors;break;default:return}let r=t.format();e[r]?Yr.warn("duplicate definition - "+r):e[r]=t})),this.deploy||(0,L.defineReadOnly)(this,"deploy",ht.from({payable:!1,type:"constructor"})),(0,L.defineReadOnly)(this,"_isInterface",!0)}}var nn={};t(nn,"ForkEvent",(function(){return an}),(function(t){return an=t})),t(nn,"Provider",(function(){return un}),(function(t){return un=t}));l=o("3Yhqu"),c=o("2rINa");var on=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const sn=new(0,c.Logger)("abstract-provider/5.7.0");class an extends L.Description{static isForkEvent(t){return!(!t||!t._isForkEvent)}}class un{getFeeData(){return on(this,void 0,void 0,(function*(){const{block:t,gasPrice:e}=yield(0,L.resolveProperties)({block:this.getBlock("latest"),gasPrice:this.getGasPrice().catch((t=>null))});let r=null,n=null,i=null;return t&&t.baseFeePerGas&&(r=t.baseFeePerGas,i=v.from("1500000000"),n=t.baseFeePerGas.mul(2).add(i)),{lastBaseFeePerGas:r,maxFeePerGas:n,maxPriorityFeePerGas:i,gasPrice:e}}))}addListener(t,e){return this.on(t,e)}removeListener(t,e){return this.off(t,e)}static isProvider(t){return!(!t||!t._isProvider)}constructor(){sn.checkAbstract(new.target,un),(0,L.defineReadOnly)(this,"_isProvider",!0)}}var ln={};t(ln,"Signer",(function(){return pn}),(function(t){return pn=t})),t(ln,"VoidSigner",(function(){return gn}),(function(t){return gn=t}));c=o("2rINa");var cn=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const hn=new(0,c.Logger)("abstract-signer/5.7.0"),fn=["accessList","ccipReadEnabled","chainId","customData","data","from","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","type","value"],dn=[c.Logger.errors.INSUFFICIENT_FUNDS,c.Logger.errors.NONCE_EXPIRED,c.Logger.errors.REPLACEMENT_UNDERPRICED];class pn{getBalance(t){return cn(this,void 0,void 0,(function*(){return this._checkProvider("getBalance"),yield this.provider.getBalance(this.getAddress(),t)}))}getTransactionCount(t){return cn(this,void 0,void 0,(function*(){return this._checkProvider("getTransactionCount"),yield this.provider.getTransactionCount(this.getAddress(),t)}))}estimateGas(t){return cn(this,void 0,void 0,(function*(){this._checkProvider("estimateGas");const e=yield(0,L.resolveProperties)(this.checkTransaction(t));return yield this.provider.estimateGas(e)}))}call(t,e){return cn(this,void 0,void 0,(function*(){this._checkProvider("call");const r=yield(0,L.resolveProperties)(this.checkTransaction(t));return yield this.provider.call(r,e)}))}sendTransaction(t){return cn(this,void 0,void 0,(function*(){this._checkProvider("sendTransaction");const e=yield this.populateTransaction(t),r=yield this.signTransaction(e);return yield this.provider.sendTransaction(r)}))}getChainId(){return cn(this,void 0,void 0,(function*(){this._checkProvider("getChainId");return(yield this.provider.getNetwork()).chainId}))}getGasPrice(){return cn(this,void 0,void 0,(function*(){return this._checkProvider("getGasPrice"),yield this.provider.getGasPrice()}))}getFeeData(){return cn(this,void 0,void 0,(function*(){return this._checkProvider("getFeeData"),yield this.provider.getFeeData()}))}resolveName(t){return cn(this,void 0,void 0,(function*(){return this._checkProvider("resolveName"),yield this.provider.resolveName(t)}))}checkTransaction(t){for(const e in t)-1===fn.indexOf(e)&&hn.throwArgumentError("invalid transaction key: "+e,"transaction",t);const e=(0,L.shallowCopy)(t);return null==e.from?e.from=this.getAddress():e.from=Promise.all([Promise.resolve(e.from),this.getAddress()]).then((e=>(e[0].toLowerCase()!==e[1].toLowerCase()&&hn.throwArgumentError("from address mismatch","transaction",t),e[0]))),e}populateTransaction(t){return cn(this,void 0,void 0,(function*(){const e=yield(0,L.resolveProperties)(this.checkTransaction(t));null!=e.to&&(e.to=Promise.resolve(e.to).then((t=>cn(this,void 0,void 0,(function*(){if(null==t)return null;const e=yield this.resolveName(t);return null==e&&hn.throwArgumentError("provided ENS name resolves to null","tx.to",t),e})))),e.to.catch((t=>{})));const r=null!=e.maxFeePerGas||null!=e.maxPriorityFeePerGas;if(null==e.gasPrice||2!==e.type&&!r?0!==e.type&&1!==e.type||!r||hn.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas","transaction",t):hn.throwArgumentError("eip-1559 transaction do not support gasPrice","transaction",t),2!==e.type&&null!=e.type||null==e.maxFeePerGas||null==e.maxPriorityFeePerGas)if(0===e.type||1===e.type)null==e.gasPrice&&(e.gasPrice=this.getGasPrice());else{const t=yield this.getFeeData();if(null==e.type)if(null!=t.maxFeePerGas&&null!=t.maxPriorityFeePerGas)if(e.type=2,null!=e.gasPrice){const t=e.gasPrice;delete e.gasPrice,e.maxFeePerGas=t,e.maxPriorityFeePerGas=t}else null==e.maxFeePerGas&&(e.maxFeePerGas=t.maxFeePerGas),null==e.maxPriorityFeePerGas&&(e.maxPriorityFeePerGas=t.maxPriorityFeePerGas);else null!=t.gasPrice?(r&&hn.throwError("network does not support EIP-1559",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"populateTransaction"}),null==e.gasPrice&&(e.gasPrice=t.gasPrice),e.type=0):hn.throwError("failed to get consistent fee data",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"signer.getFeeData"});else 2===e.type&&(null==e.maxFeePerGas&&(e.maxFeePerGas=t.maxFeePerGas),null==e.maxPriorityFeePerGas&&(e.maxPriorityFeePerGas=t.maxPriorityFeePerGas))}else e.type=2;return null==e.nonce&&(e.nonce=this.getTransactionCount("pending")),null==e.gasLimit&&(e.gasLimit=this.estimateGas(e).catch((t=>{if(dn.indexOf(t.code)>=0)throw t;return hn.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",c.Logger.errors.UNPREDICTABLE_GAS_LIMIT,{error:t,tx:e})}))),null==e.chainId?e.chainId=this.getChainId():e.chainId=Promise.all([Promise.resolve(e.chainId),this.getChainId()]).then((e=>(0!==e[1]&&e[0]!==e[1]&&hn.throwArgumentError("chainId address mismatch","transaction",t),e[0]))),yield(0,L.resolveProperties)(e)}))}_checkProvider(t){this.provider||hn.throwError("missing provider",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:t||"_checkProvider"})}static isSigner(t){return!(!t||!t._isSigner)}constructor(){hn.checkAbstract(new.target,pn),(0,L.defineReadOnly)(this,"_isSigner",!0)}}class gn extends pn{getAddress(){return Promise.resolve(this.address)}_fail(t,e){return Promise.resolve().then((()=>{hn.throwError(t,c.Logger.errors.UNSUPPORTED_OPERATION,{operation:e})}))}signMessage(t){return this._fail("VoidSigner cannot sign messages","signMessage")}signTransaction(t){return this._fail("VoidSigner cannot sign transactions","signTransaction")}_signTypedData(t,e,r){return this._fail("VoidSigner cannot sign typed data","signTypedData")}connect(t){return new gn(this.address,t)}constructor(t,e){super(),(0,L.defineReadOnly)(this,"address",t),(0,L.defineReadOnly)(this,"provider",e||null)}}l=o("3Yhqu"),l=o("3Yhqu"),qt=o("7ZdUu"),u=o("jc6J8");var mn={},yn=mn;yn.utils=o("b38NR"),yn.common=o("dx0A1"),yn.sha=o("783N8"),yn.ripemd=o("j1ZCa"),yn.hmac=o("L28J4"),yn.sha1=yn.sha.sha1,yn.sha256=yn.sha.sha256,yn.sha224=yn.sha.sha224,yn.sha384=yn.sha.sha384,yn.sha512=yn.sha.sha512,yn.ripemd160=yn.ripemd.ripemd160;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e||"undefined"!=typeof self&&self;function vn(t,e,r){return t(r={path:e,exports:{},require:function(t,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==e&&r.path)}},r.exports),r.exports}var wn=bn;function bn(t,e){if(!t)throw new Error(e||"Assertion failed")}bn.equal=function(t,e,r){if(t!=e)throw new Error(r||"Assertion failed: "+t+" != "+e)};var An=vn((function(t,e){"use strict";var r=e;function n(t){return 1===t.length?"0"+t:t}function i(t){for(var e="",r=0;r<t.length;r++)e+=n(t[r].toString(16));return e}r.toArray=function(t,e){if(Array.isArray(t))return t.slice();if(!t)return[];var r=[];if("string"!=typeof t){for(var n=0;n<t.length;n++)r[n]=0|t[n];return r}if("hex"===e){(t=t.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(t="0"+t);for(n=0;n<t.length;n+=2)r.push(parseInt(t[n]+t[n+1],16))}else for(n=0;n<t.length;n++){var i=t.charCodeAt(n),o=i>>8,s=255&i;o?r.push(o,s):r.push(s)}return r},r.zero2=n,r.toHex=i,r.encode=function(t,e){return"hex"===e?i(t):t}})),En=vn((function(t,e){"use strict";var n=e;n.assert=wn,n.toArray=An.toArray,n.zero2=An.zero2,n.toHex=An.toHex,n.encode=An.encode,n.getNAF=function(t,e,r){var n=new Array(Math.max(t.bitLength(),r)+1);n.fill(0);for(var i=1<<e+1,o=t.clone(),s=0;s<n.length;s++){var a,u=o.andln(i-1);o.isOdd()?(a=u>(i>>1)-1?(i>>1)-u:u,o.isubn(a)):a=0,n[s]=a,o.iushrn(1)}return n},n.getJSF=function(t,e){var r=[[],[]];t=t.clone(),e=e.clone();for(var n,i=0,o=0;t.cmpn(-i)>0||e.cmpn(-o)>0;){var s,a,u=t.andln(3)+i&3,l=e.andln(3)+o&3;3===u&&(u=-1),3===l&&(l=-1),s=0==(1&u)?0:3!==(n=t.andln(7)+i&7)&&5!==n||2!==l?u:-u,r[0].push(s),a=0==(1&l)?0:3!==(n=e.andln(7)+o&7)&&5!==n||2!==u?l:-l,r[1].push(a),2*i===s+1&&(i=1-i),2*o===a+1&&(o=1-o),t.iushrn(1),e.iushrn(1)}return r},n.cachedProperty=function(t,e,r){var n="_"+e;t.prototype[e]=function(){return void 0!==this[n]?this[n]:this[n]=r.call(this)}},n.parseBytes=function(t){return"string"==typeof t?n.toArray(t,"hex"):t},n.intFromLE=function(t){return new(r(u))(t,"hex","le")}})),kn=En.getNAF,Sn=En.getJSF,xn=En.assert;function _n(t,e){this.type=t,this.p=new(r(u))(e.p,16),this.red=e.prime?r(u).red(e.prime):r(u).mont(this.p),this.zero=new(r(u))(0).toRed(this.red),this.one=new(r(u))(1).toRed(this.red),this.two=new(r(u))(2).toRed(this.red),this.n=e.n&&new(r(u))(e.n,16),this.g=e.g&&this.pointFromJSON(e.g,e.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4),this._bitLength=this.n?this.n.bitLength():0;var n=this.n&&this.p.div(this.n);!n||n.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}var Pn=_n;function Nn(t,e){this.curve=t,this.type=e,this.precomputed=null}_n.prototype.point=function(){throw new Error("Not implemented")},_n.prototype.validate=function(){throw new Error("Not implemented")},_n.prototype._fixedNafMul=function(t,e){xn(t.precomputed);var r=t._getDoubles(),n=kn(e,1,this._bitLength),i=(1<<r.step+1)-(r.step%2==0?2:1);i/=3;var o,s,a=[];for(o=0;o<n.length;o+=r.step){s=0;for(var u=o+r.step-1;u>=o;u--)s=(s<<1)+n[u];a.push(s)}for(var l=this.jpoint(null,null,null),c=this.jpoint(null,null,null),h=i;h>0;h--){for(o=0;o<a.length;o++)(s=a[o])===h?c=c.mixedAdd(r.points[o]):s===-h&&(c=c.mixedAdd(r.points[o].neg()));l=l.add(c)}return l.toP()},_n.prototype._wnafMul=function(t,e){var r=4,n=t._getNAFPoints(r);r=n.wnd;for(var i=n.points,o=kn(e,r,this._bitLength),s=this.jpoint(null,null,null),a=o.length-1;a>=0;a--){for(var u=0;a>=0&&0===o[a];a--)u++;if(a>=0&&u++,s=s.dblp(u),a<0)break;var l=o[a];xn(0!==l),s="affine"===t.type?l>0?s.mixedAdd(i[l-1>>1]):s.mixedAdd(i[-l-1>>1].neg()):l>0?s.add(i[l-1>>1]):s.add(i[-l-1>>1].neg())}return"affine"===t.type?s.toP():s},_n.prototype._wnafMulAdd=function(t,e,r,n,i){var o,s,a,u=this._wnafT1,l=this._wnafT2,c=this._wnafT3,h=0;for(o=0;o<n;o++){var f=(a=e[o])._getNAFPoints(t);u[o]=f.wnd,l[o]=f.points}for(o=n-1;o>=1;o-=2){var d=o-1,p=o;if(1===u[d]&&1===u[p]){var g=[e[d],null,null,e[p]];0===e[d].y.cmp(e[p].y)?(g[1]=e[d].add(e[p]),g[2]=e[d].toJ().mixedAdd(e[p].neg())):0===e[d].y.cmp(e[p].y.redNeg())?(g[1]=e[d].toJ().mixedAdd(e[p]),g[2]=e[d].add(e[p].neg())):(g[1]=e[d].toJ().mixedAdd(e[p]),g[2]=e[d].toJ().mixedAdd(e[p].neg()));var m=[-3,-1,-5,-7,0,7,5,1,3],y=Sn(r[d],r[p]);for(h=Math.max(y[0].length,h),c[d]=new Array(h),c[p]=new Array(h),s=0;s<h;s++){var v=0|y[0][s],w=0|y[1][s];c[d][s]=m[3*(v+1)+(w+1)],c[p][s]=0,l[d]=g}}else c[d]=kn(r[d],u[d],this._bitLength),c[p]=kn(r[p],u[p],this._bitLength),h=Math.max(c[d].length,h),h=Math.max(c[p].length,h)}var b=this.jpoint(null,null,null),A=this._wnafT4;for(o=h;o>=0;o--){for(var E=0;o>=0;){var k=!0;for(s=0;s<n;s++)A[s]=0|c[s][o],0!==A[s]&&(k=!1);if(!k)break;E++,o--}if(o>=0&&E++,b=b.dblp(E),o<0)break;for(s=0;s<n;s++){var S=A[s];0!==S&&(S>0?a=l[s][S-1>>1]:S<0&&(a=l[s][-S-1>>1].neg()),b="affine"===a.type?b.mixedAdd(a):b.add(a))}}for(o=0;o<n;o++)l[o]=null;return i?b:b.toP()},_n.BasePoint=Nn,Nn.prototype.eq=function(){throw new Error("Not implemented")},Nn.prototype.validate=function(){return this.curve.validate(this)},_n.prototype.decodePoint=function(t,e){t=En.toArray(t,e);var r=this.p.byteLength();if((4===t[0]||6===t[0]||7===t[0])&&t.length-1==2*r)return 6===t[0]?xn(t[t.length-1]%2==0):7===t[0]&&xn(t[t.length-1]%2==1),this.point(t.slice(1,1+r),t.slice(1+r,1+2*r));if((2===t[0]||3===t[0])&&t.length-1===r)return this.pointFromX(t.slice(1,1+r),3===t[0]);throw new Error("Unknown point format")},Nn.prototype.encodeCompressed=function(t){return this.encode(t,!0)},Nn.prototype._encode=function(t){var e=this.curve.p.byteLength(),r=this.getX().toArray("be",e);return t?[this.getY().isEven()?2:3].concat(r):[4].concat(r,this.getY().toArray("be",e))},Nn.prototype.encode=function(t,e){return En.encode(this._encode(e),t)},Nn.prototype.precompute=function(t){if(this.precomputed)return this;var e={doubles:null,naf:null,beta:null};return e.naf=this._getNAFPoints(8),e.doubles=this._getDoubles(4,t),e.beta=this._getBeta(),this.precomputed=e,this},Nn.prototype._hasDoubles=function(t){if(!this.precomputed)return!1;var e=this.precomputed.doubles;return!!e&&e.points.length>=Math.ceil((t.bitLength()+1)/e.step)},Nn.prototype._getDoubles=function(t,e){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var r=[this],n=this,i=0;i<e;i+=t){for(var o=0;o<t;o++)n=n.dbl();r.push(n)}return{step:t,points:r}},Nn.prototype._getNAFPoints=function(t){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var e=[this],r=(1<<t)-1,n=1===r?null:this.dbl(),i=1;i<r;i++)e[i]=e[i-1].add(n);return{wnd:t,points:e}},Nn.prototype._getBeta=function(){return null},Nn.prototype.dblp=function(t){for(var e=this,r=0;r<t;r++)e=e.dbl();return e};var Rn=vn((function(t){"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}})),Cn=En.assert;function Mn(t){Pn.call(this,"short",t),this.a=new(r(u))(t.a,16).toRed(this.red),this.b=new(r(u))(t.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(t),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}Rn(Mn,Pn);var In=Mn;function Tn(t,e,n,i){Pn.BasePoint.call(this,t,"affine"),null===e&&null===n?(this.x=null,this.y=null,this.inf=!0):(this.x=new(r(u))(e,16),this.y=new(r(u))(n,16),i&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function On(t,e,n,i){Pn.BasePoint.call(this,t,"jacobian"),null===e&&null===n&&null===i?(this.x=this.curve.one,this.y=this.curve.one,this.z=new(r(u))(0)):(this.x=new(r(u))(e,16),this.y=new(r(u))(n,16),this.z=new(r(u))(i,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}Mn.prototype._getEndomorphism=function(t){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var e,n;if(t.beta)e=new(r(u))(t.beta,16).toRed(this.red);else{var i=this._getEndoRoots(this.p);e=(e=i[0].cmp(i[1])<0?i[0]:i[1]).toRed(this.red)}if(t.lambda)n=new(r(u))(t.lambda,16);else{var o=this._getEndoRoots(this.n);0===this.g.mul(o[0]).x.cmp(this.g.x.redMul(e))?n=o[0]:(n=o[1],Cn(0===this.g.mul(n).x.cmp(this.g.x.redMul(e))))}return{beta:e,lambda:n,basis:t.basis?t.basis.map((function(t){return{a:new(r(u))(t.a,16),b:new(r(u))(t.b,16)}})):this._getEndoBasis(n)}}},Mn.prototype._getEndoRoots=function(t){var e=t===this.p?this.red:r(u).mont(t),n=new(r(u))(2).toRed(e).redInvm(),i=n.redNeg(),o=new(r(u))(3).toRed(e).redNeg().redSqrt().redMul(n);return[i.redAdd(o).fromRed(),i.redSub(o).fromRed()]},Mn.prototype._getEndoBasis=function(t){for(var e,n,i,o,s,a,l,c,h,f=this.n.ushrn(Math.floor(this.n.bitLength()/2)),d=t,p=this.n.clone(),g=new(r(u))(1),m=new(r(u))(0),y=new(r(u))(0),v=new(r(u))(1),w=0;0!==d.cmpn(0);){var b=p.div(d);c=p.sub(b.mul(d)),h=y.sub(b.mul(g));var A=v.sub(b.mul(m));if(!i&&c.cmp(f)<0)e=l.neg(),n=g,i=c.neg(),o=h;else if(i&&2==++w)break;l=c,p=d,d=c,y=g,g=h,v=m,m=A}s=c.neg(),a=h;var E=i.sqr().add(o.sqr());return s.sqr().add(a.sqr()).cmp(E)>=0&&(s=e,a=n),i.negative&&(i=i.neg(),o=o.neg()),s.negative&&(s=s.neg(),a=a.neg()),[{a:i,b:o},{a:s,b:a}]},Mn.prototype._endoSplit=function(t){var e=this.endo.basis,r=e[0],n=e[1],i=n.b.mul(t).divRound(this.n),o=r.b.neg().mul(t).divRound(this.n),s=i.mul(r.a),a=o.mul(n.a),u=i.mul(r.b),l=o.mul(n.b);return{k1:t.sub(s).sub(a),k2:u.add(l).neg()}},Mn.prototype.pointFromX=function(t,e){(t=new(r(u))(t,16)).red||(t=t.toRed(this.red));var n=t.redSqr().redMul(t).redIAdd(t.redMul(this.a)).redIAdd(this.b),i=n.redSqrt();if(0!==i.redSqr().redSub(n).cmp(this.zero))throw new Error("invalid point");var o=i.fromRed().isOdd();return(e&&!o||!e&&o)&&(i=i.redNeg()),this.point(t,i)},Mn.prototype.validate=function(t){if(t.inf)return!0;var e=t.x,r=t.y,n=this.a.redMul(e),i=e.redSqr().redMul(e).redIAdd(n).redIAdd(this.b);return 0===r.redSqr().redISub(i).cmpn(0)},Mn.prototype._endoWnafMulAdd=function(t,e,r){for(var n=this._endoWnafT1,i=this._endoWnafT2,o=0;o<t.length;o++){var s=this._endoSplit(e[o]),a=t[o],u=a._getBeta();s.k1.negative&&(s.k1.ineg(),a=a.neg(!0)),s.k2.negative&&(s.k2.ineg(),u=u.neg(!0)),n[2*o]=a,n[2*o+1]=u,i[2*o]=s.k1,i[2*o+1]=s.k2}for(var l=this._wnafMulAdd(1,n,i,2*o,r),c=0;c<2*o;c++)n[c]=null,i[c]=null;return l},Rn(Tn,Pn.BasePoint),Mn.prototype.point=function(t,e,r){return new Tn(this,t,e,r)},Mn.prototype.pointFromJSON=function(t,e){return Tn.fromJSON(this,t,e)},Tn.prototype._getBeta=function(){if(this.curve.endo){var t=this.precomputed;if(t&&t.beta)return t.beta;var e=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(t){var r=this.curve,n=function(t){return r.point(t.x.redMul(r.endo.beta),t.y)};t.beta=e,e.precomputed={beta:null,naf:t.naf&&{wnd:t.naf.wnd,points:t.naf.points.map(n)},doubles:t.doubles&&{step:t.doubles.step,points:t.doubles.points.map(n)}}}return e}},Tn.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},Tn.fromJSON=function(t,e,r){"string"==typeof e&&(e=JSON.parse(e));var n=t.point(e[0],e[1],r);if(!e[2])return n;function i(e){return t.point(e[0],e[1],r)}var o=e[2];return n.precomputed={beta:null,doubles:o.doubles&&{step:o.doubles.step,points:[n].concat(o.doubles.points.map(i))},naf:o.naf&&{wnd:o.naf.wnd,points:[n].concat(o.naf.points.map(i))}},n},Tn.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},Tn.prototype.isInfinity=function(){return this.inf},Tn.prototype.add=function(t){if(this.inf)return t;if(t.inf)return this;if(this.eq(t))return this.dbl();if(this.neg().eq(t))return this.curve.point(null,null);if(0===this.x.cmp(t.x))return this.curve.point(null,null);var e=this.y.redSub(t.y);0!==e.cmpn(0)&&(e=e.redMul(this.x.redSub(t.x).redInvm()));var r=e.redSqr().redISub(this.x).redISub(t.x),n=e.redMul(this.x.redSub(r)).redISub(this.y);return this.curve.point(r,n)},Tn.prototype.dbl=function(){if(this.inf)return this;var t=this.y.redAdd(this.y);if(0===t.cmpn(0))return this.curve.point(null,null);var e=this.curve.a,r=this.x.redSqr(),n=t.redInvm(),i=r.redAdd(r).redIAdd(r).redIAdd(e).redMul(n),o=i.redSqr().redISub(this.x.redAdd(this.x)),s=i.redMul(this.x.redSub(o)).redISub(this.y);return this.curve.point(o,s)},Tn.prototype.getX=function(){return this.x.fromRed()},Tn.prototype.getY=function(){return this.y.fromRed()},Tn.prototype.mul=function(t){return t=new(r(u))(t,16),this.isInfinity()?this:this._hasDoubles(t)?this.curve._fixedNafMul(this,t):this.curve.endo?this.curve._endoWnafMulAdd([this],[t]):this.curve._wnafMul(this,t)},Tn.prototype.mulAdd=function(t,e,r){var n=[this,e],i=[t,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i):this.curve._wnafMulAdd(1,n,i,2)},Tn.prototype.jmulAdd=function(t,e,r){var n=[this,e],i=[t,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i,!0):this.curve._wnafMulAdd(1,n,i,2,!0)},Tn.prototype.eq=function(t){return this===t||this.inf===t.inf&&(this.inf||0===this.x.cmp(t.x)&&0===this.y.cmp(t.y))},Tn.prototype.neg=function(t){if(this.inf)return this;var e=this.curve.point(this.x,this.y.redNeg());if(t&&this.precomputed){var r=this.precomputed,n=function(t){return t.neg()};e.precomputed={naf:r.naf&&{wnd:r.naf.wnd,points:r.naf.points.map(n)},doubles:r.doubles&&{step:r.doubles.step,points:r.doubles.points.map(n)}}}return e},Tn.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},Rn(On,Pn.BasePoint),Mn.prototype.jpoint=function(t,e,r){return new On(this,t,e,r)},On.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var t=this.z.redInvm(),e=t.redSqr(),r=this.x.redMul(e),n=this.y.redMul(e).redMul(t);return this.curve.point(r,n)},On.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},On.prototype.add=function(t){if(this.isInfinity())return t;if(t.isInfinity())return this;var e=t.z.redSqr(),r=this.z.redSqr(),n=this.x.redMul(e),i=t.x.redMul(r),o=this.y.redMul(e.redMul(t.z)),s=t.y.redMul(r.redMul(this.z)),a=n.redSub(i),u=o.redSub(s);if(0===a.cmpn(0))return 0!==u.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var l=a.redSqr(),c=l.redMul(a),h=n.redMul(l),f=u.redSqr().redIAdd(c).redISub(h).redISub(h),d=u.redMul(h.redISub(f)).redISub(o.redMul(c)),p=this.z.redMul(t.z).redMul(a);return this.curve.jpoint(f,d,p)},On.prototype.mixedAdd=function(t){if(this.isInfinity())return t.toJ();if(t.isInfinity())return this;var e=this.z.redSqr(),r=this.x,n=t.x.redMul(e),i=this.y,o=t.y.redMul(e).redMul(this.z),s=r.redSub(n),a=i.redSub(o);if(0===s.cmpn(0))return 0!==a.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var u=s.redSqr(),l=u.redMul(s),c=r.redMul(u),h=a.redSqr().redIAdd(l).redISub(c).redISub(c),f=a.redMul(c.redISub(h)).redISub(i.redMul(l)),d=this.z.redMul(s);return this.curve.jpoint(h,f,d)},On.prototype.dblp=function(t){if(0===t)return this;if(this.isInfinity())return this;if(!t)return this.dbl();var e;if(this.curve.zeroA||this.curve.threeA){var r=this;for(e=0;e<t;e++)r=r.dbl();return r}var n=this.curve.a,i=this.curve.tinv,o=this.x,s=this.y,a=this.z,u=a.redSqr().redSqr(),l=s.redAdd(s);for(e=0;e<t;e++){var c=o.redSqr(),h=l.redSqr(),f=h.redSqr(),d=c.redAdd(c).redIAdd(c).redIAdd(n.redMul(u)),p=o.redMul(h),g=d.redSqr().redISub(p.redAdd(p)),m=p.redISub(g),y=d.redMul(m);y=y.redIAdd(y).redISub(f);var v=l.redMul(a);e+1<t&&(u=u.redMul(f)),o=g,a=v,l=y}return this.curve.jpoint(o,l.redMul(i),a)},On.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},On.prototype._zeroDbl=function(){var t,e,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),s=this.x.redAdd(i).redSqr().redISub(n).redISub(o);s=s.redIAdd(s);var a=n.redAdd(n).redIAdd(n),u=a.redSqr().redISub(s).redISub(s),l=o.redIAdd(o);l=(l=l.redIAdd(l)).redIAdd(l),t=u,e=a.redMul(s.redISub(u)).redISub(l),r=this.y.redAdd(this.y)}else{var c=this.x.redSqr(),h=this.y.redSqr(),f=h.redSqr(),d=this.x.redAdd(h).redSqr().redISub(c).redISub(f);d=d.redIAdd(d);var p=c.redAdd(c).redIAdd(c),g=p.redSqr(),m=f.redIAdd(f);m=(m=m.redIAdd(m)).redIAdd(m),t=g.redISub(d).redISub(d),e=p.redMul(d.redISub(t)).redISub(m),r=(r=this.y.redMul(this.z)).redIAdd(r)}return this.curve.jpoint(t,e,r)},On.prototype._threeDbl=function(){var t,e,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),s=this.x.redAdd(i).redSqr().redISub(n).redISub(o);s=s.redIAdd(s);var a=n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),u=a.redSqr().redISub(s).redISub(s);t=u;var l=o.redIAdd(o);l=(l=l.redIAdd(l)).redIAdd(l),e=a.redMul(s.redISub(u)).redISub(l),r=this.y.redAdd(this.y)}else{var c=this.z.redSqr(),h=this.y.redSqr(),f=this.x.redMul(h),d=this.x.redSub(c).redMul(this.x.redAdd(c));d=d.redAdd(d).redIAdd(d);var p=f.redIAdd(f),g=(p=p.redIAdd(p)).redAdd(p);t=d.redSqr().redISub(g),r=this.y.redAdd(this.z).redSqr().redISub(h).redISub(c);var m=h.redSqr();m=(m=(m=m.redIAdd(m)).redIAdd(m)).redIAdd(m),e=d.redMul(p.redISub(t)).redISub(m)}return this.curve.jpoint(t,e,r)},On.prototype._dbl=function(){var t=this.curve.a,e=this.x,r=this.y,n=this.z,i=n.redSqr().redSqr(),o=e.redSqr(),s=r.redSqr(),a=o.redAdd(o).redIAdd(o).redIAdd(t.redMul(i)),u=e.redAdd(e),l=(u=u.redIAdd(u)).redMul(s),c=a.redSqr().redISub(l.redAdd(l)),h=l.redISub(c),f=s.redSqr();f=(f=(f=f.redIAdd(f)).redIAdd(f)).redIAdd(f);var d=a.redMul(h).redISub(f),p=r.redAdd(r).redMul(n);return this.curve.jpoint(c,d,p)},On.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var t=this.x.redSqr(),e=this.y.redSqr(),r=this.z.redSqr(),n=e.redSqr(),i=t.redAdd(t).redIAdd(t),o=i.redSqr(),s=this.x.redAdd(e).redSqr().redISub(t).redISub(n),a=(s=(s=(s=s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(o)).redSqr(),u=n.redIAdd(n);u=(u=(u=u.redIAdd(u)).redIAdd(u)).redIAdd(u);var l=i.redIAdd(s).redSqr().redISub(o).redISub(a).redISub(u),c=e.redMul(l);c=(c=c.redIAdd(c)).redIAdd(c);var h=this.x.redMul(a).redISub(c);h=(h=h.redIAdd(h)).redIAdd(h);var f=this.y.redMul(l.redMul(u.redISub(l)).redISub(s.redMul(a)));f=(f=(f=f.redIAdd(f)).redIAdd(f)).redIAdd(f);var d=this.z.redAdd(s).redSqr().redISub(r).redISub(a);return this.curve.jpoint(h,f,d)},On.prototype.mul=function(t,e){return t=new(r(u))(t,e),this.curve._wnafMul(this,t)},On.prototype.eq=function(t){if("affine"===t.type)return this.eq(t.toJ());if(this===t)return!0;var e=this.z.redSqr(),r=t.z.redSqr();if(0!==this.x.redMul(r).redISub(t.x.redMul(e)).cmpn(0))return!1;var n=e.redMul(this.z),i=r.redMul(t.z);return 0===this.y.redMul(i).redISub(t.y.redMul(n)).cmpn(0)},On.prototype.eqXToP=function(t){var e=this.z.redSqr(),r=t.toRed(this.curve.red).redMul(e);if(0===this.x.cmp(r))return!0;for(var n=t.clone(),i=this.curve.redN.redMul(e);;){if(n.iadd(this.curve.n),n.cmp(this.curve.p)>=0)return!1;if(r.redIAdd(i),0===this.x.cmp(r))return!0}},On.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},On.prototype.isInfinity=function(){return 0===this.z.cmpn(0)};var Bn=vn((function(t,e){"use strict";var r=e;r.base=Pn,r.short=In,r.mont=null,r.edwards=null})),Ln=vn((function(t,e){"use strict";var n,i=e,o=En.assert;function s(t){"short"===t.type?this.curve=new Bn.short(t):"edwards"===t.type?this.curve=new Bn.edwards(t):this.curve=new Bn.mont(t),this.g=this.curve.g,this.n=this.curve.n,this.hash=t.hash,o(this.g.validate(),"Invalid curve"),o(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function a(t,e){Object.defineProperty(i,t,{configurable:!0,enumerable:!0,get:function(){var r=new s(e);return Object.defineProperty(i,t,{configurable:!0,enumerable:!0,value:r}),r}})}i.PresetCurve=s,a("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:r(mn).sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),a("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:r(mn).sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),a("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:r(mn).sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),a("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:r(mn).sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),a("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:r(mn).sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),a("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:r(mn).sha256,gRed:!1,g:["9"]}),a("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:r(mn).sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{n=null.crash()}catch(t){n=void 0}a("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:r(mn).sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",n]})}));function Fn(t){if(!(this instanceof Fn))return new Fn(t);this.hash=t.hash,this.predResist=!!t.predResist,this.outLen=this.hash.outSize,this.minEntropy=t.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var e=An.toArray(t.entropy,t.entropyEnc||"hex"),r=An.toArray(t.nonce,t.nonceEnc||"hex"),n=An.toArray(t.pers,t.persEnc||"hex");wn(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(e,r,n)}var Dn=Fn;Fn.prototype._init=function(t,e,r){var n=t.concat(e).concat(r);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var i=0;i<this.V.length;i++)this.K[i]=0,this.V[i]=1;this._update(n),this._reseed=1,this.reseedInterval=281474976710656},Fn.prototype._hmac=function(){return new(r(mn).hmac)(this.hash,this.K)},Fn.prototype._update=function(t){var e=this._hmac().update(this.V).update([0]);t&&(e=e.update(t)),this.K=e.digest(),this.V=this._hmac().update(this.V).digest(),t&&(this.K=this._hmac().update(this.V).update([1]).update(t).digest(),this.V=this._hmac().update(this.V).digest())},Fn.prototype.reseed=function(t,e,r,n){"string"!=typeof e&&(n=r,r=e,e=null),t=An.toArray(t,e),r=An.toArray(r,n),wn(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(t.concat(r||[])),this._reseed=1},Fn.prototype.generate=function(t,e,r,n){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof e&&(n=r,r=e,e=null),r&&(r=An.toArray(r,n||"hex"),this._update(r));for(var i=[];i.length<t;)this.V=this._hmac().update(this.V).digest(),i=i.concat(this.V);var o=i.slice(0,t);return this._update(r),this._reseed++,An.encode(o,e)};var Un=En.assert;function Gn(t,e){this.ec=t,this.priv=null,this.pub=null,e.priv&&this._importPrivate(e.priv,e.privEnc),e.pub&&this._importPublic(e.pub,e.pubEnc)}var qn=Gn;Gn.fromPublic=function(t,e,r){return e instanceof Gn?e:new Gn(t,{pub:e,pubEnc:r})},Gn.fromPrivate=function(t,e,r){return e instanceof Gn?e:new Gn(t,{priv:e,privEnc:r})},Gn.prototype.validate=function(){var t=this.getPublic();return t.isInfinity()?{result:!1,reason:"Invalid public key"}:t.validate()?t.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},Gn.prototype.getPublic=function(t,e){return"string"==typeof t&&(e=t,t=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),e?this.pub.encode(e,t):this.pub},Gn.prototype.getPrivate=function(t){return"hex"===t?this.priv.toString(16,2):this.priv},Gn.prototype._importPrivate=function(t,e){this.priv=new(r(u))(t,e||16),this.priv=this.priv.umod(this.ec.curve.n)},Gn.prototype._importPublic=function(t,e){if(t.x||t.y)return"mont"===this.ec.curve.type?Un(t.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||Un(t.x&&t.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(t.x,t.y));this.pub=this.ec.curve.decodePoint(t,e)},Gn.prototype.derive=function(t){return t.validate()||Un(t.validate(),"public point not validated"),t.mul(this.priv).getX()},Gn.prototype.sign=function(t,e,r){return this.ec.sign(t,this,e,r)},Gn.prototype.verify=function(t,e){return this.ec.verify(t,e,this)},Gn.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"};var jn=En.assert;function zn(t,e){if(t instanceof zn)return t;this._importDER(t,e)||(jn(t.r&&t.s,"Signature without r or s"),this.r=new(r(u))(t.r,16),this.s=new(r(u))(t.s,16),void 0===t.recoveryParam?this.recoveryParam=null:this.recoveryParam=t.recoveryParam)}var Hn=zn;function Kn(){this.place=0}function Jn(t,e){var r=t[e.place++];if(!(128&r))return r;var n=15&r;if(0===n||n>4)return!1;for(var i=0,o=0,s=e.place;o<n;o++,s++)i<<=8,i|=t[s],i>>>=0;return!(i<=127)&&(e.place=s,i)}function Vn(t){for(var e=0,r=t.length-1;!t[e]&&!(128&t[e+1])&&e<r;)e++;return 0===e?t:t.slice(e)}function Wn(t,e){if(e<128)t.push(e);else{var r=1+(Math.log(e)/Math.LN2>>>3);for(t.push(128|r);--r;)t.push(e>>>(r<<3)&255);t.push(e)}}zn.prototype._importDER=function(t,e){t=En.toArray(t,e);var n=new Kn;if(48!==t[n.place++])return!1;var i=Jn(t,n);if(!1===i)return!1;if(i+n.place!==t.length)return!1;if(2!==t[n.place++])return!1;var o=Jn(t,n);if(!1===o)return!1;var s=t.slice(n.place,o+n.place);if(n.place+=o,2!==t[n.place++])return!1;var a=Jn(t,n);if(!1===a)return!1;if(t.length!==a+n.place)return!1;var l=t.slice(n.place,a+n.place);if(0===s[0]){if(!(128&s[1]))return!1;s=s.slice(1)}if(0===l[0]){if(!(128&l[1]))return!1;l=l.slice(1)}return this.r=new(r(u))(s),this.s=new(r(u))(l),this.recoveryParam=null,!0},zn.prototype.toDER=function(t){var e=this.r.toArray(),r=this.s.toArray();for(128&e[0]&&(e=[0].concat(e)),128&r[0]&&(r=[0].concat(r)),e=Vn(e),r=Vn(r);!(r[0]||128&r[1]);)r=r.slice(1);var n=[2];Wn(n,e.length),(n=n.concat(e)).push(2),Wn(n,r.length);var i=n.concat(r),o=[48];return Wn(o,i.length),o=o.concat(i),En.encode(o,t)};var Yn=function(){throw new Error("unsupported")},Qn=En.assert;function Zn(t){if(!(this instanceof Zn))return new Zn(t);"string"==typeof t&&(Qn(Object.prototype.hasOwnProperty.call(Ln,t),"Unknown curve "+t),t=Ln[t]),t instanceof Ln.PresetCurve&&(t={curve:t}),this.curve=t.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=t.curve.g,this.g.precompute(t.curve.n.bitLength()+1),this.hash=t.hash||t.curve.hash}var Xn=Zn;Zn.prototype.keyPair=function(t){return new qn(this,t)},Zn.prototype.keyFromPrivate=function(t,e){return qn.fromPrivate(this,t,e)},Zn.prototype.keyFromPublic=function(t,e){return qn.fromPublic(this,t,e)},Zn.prototype.genKeyPair=function(t){t||(t={});for(var e=new Dn({hash:this.hash,pers:t.pers,persEnc:t.persEnc||"utf8",entropy:t.entropy||Yn(this.hash.hmacStrength),entropyEnc:t.entropy&&t.entropyEnc||"utf8",nonce:this.n.toArray()}),n=this.n.byteLength(),i=this.n.sub(new(r(u))(2));;){var o=new(r(u))(e.generate(n));if(!(o.cmp(i)>0))return o.iaddn(1),this.keyFromPrivate(o)}},Zn.prototype._truncateToN=function(t,e){var r=8*t.byteLength()-this.n.bitLength();return r>0&&(t=t.ushrn(r)),!e&&t.cmp(this.n)>=0?t.sub(this.n):t},Zn.prototype.sign=function(t,e,n,i){"object"==typeof n&&(i=n,n=null),i||(i={}),e=this.keyFromPrivate(e,n),t=this._truncateToN(new(r(u))(t,16));for(var o=this.n.byteLength(),s=e.getPrivate().toArray("be",o),a=t.toArray("be",o),l=new Dn({hash:this.hash,entropy:s,nonce:a,pers:i.pers,persEnc:i.persEnc||"utf8"}),c=this.n.sub(new(r(u))(1)),h=0;;h++){var f=i.k?i.k(h):new(r(u))(l.generate(this.n.byteLength()));if(!((f=this._truncateToN(f,!0)).cmpn(1)<=0||f.cmp(c)>=0)){var d=this.g.mul(f);if(!d.isInfinity()){var p=d.getX(),g=p.umod(this.n);if(0!==g.cmpn(0)){var m=f.invm(this.n).mul(g.mul(e.getPrivate()).iadd(t));if(0!==(m=m.umod(this.n)).cmpn(0)){var y=(d.getY().isOdd()?1:0)|(0!==p.cmp(g)?2:0);return i.canonical&&m.cmp(this.nh)>0&&(m=this.n.sub(m),y^=1),new Hn({r:g,s:m,recoveryParam:y})}}}}}},Zn.prototype.verify=function(t,e,n,i){t=this._truncateToN(new(r(u))(t,16)),n=this.keyFromPublic(n,i);var o=(e=new Hn(e,"hex")).r,s=e.s;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;if(s.cmpn(1)<0||s.cmp(this.n)>=0)return!1;var a,l=s.invm(this.n),c=l.mul(t).umod(this.n),h=l.mul(o).umod(this.n);return this.curve._maxwellTrick?!(a=this.g.jmulAdd(c,n.getPublic(),h)).isInfinity()&&a.eqXToP(o):!(a=this.g.mulAdd(c,n.getPublic(),h)).isInfinity()&&0===a.getX().umod(this.n).cmp(o)},Zn.prototype.recoverPubKey=function(t,e,n,i){Qn((3&n)===n,"The recovery param is more than two bits"),e=new Hn(e,i);var o=this.n,s=new(r(u))(t),a=e.r,l=e.s,c=1&n,h=n>>1;if(a.cmp(this.curve.p.umod(this.curve.n))>=0&&h)throw new Error("Unable to find sencond key candinate");a=h?this.curve.pointFromX(a.add(this.curve.n),c):this.curve.pointFromX(a,c);var f=e.r.invm(o),d=o.sub(s).mul(f).umod(o),p=l.mul(f).umod(o);return this.g.mulAdd(d,a,p)},Zn.prototype.getKeyRecoveryParam=function(t,e,r,n){if(null!==(e=new Hn(e,n)).recoveryParam)return e.recoveryParam;for(var i=0;i<4;i++){var o;try{o=this.recoverPubKey(t,e,i)}catch(t){continue}if(o.eq(r))return i}throw new Error("Unable to find valid recovery factor")};var $n=vn((function(t,e){"use strict";var r=e;r.version="6.5.4",r.utils=En,r.rand=function(){throw new Error("unsupported")},r.curve=Bn,r.curves=Ln,r.ec=Xn,r.eddsa=null})).ec;l=o("3Yhqu");const ti=new(0,(c=o("2rINa")).Logger)("signing-key/5.7.0");let ei=null;function ri(){return ei||(ei=new $n("secp256k1")),ei}class ni{_addPoint(t){const e=ri().keyFromPublic((0,l.arrayify)(this.publicKey)),r=ri().keyFromPublic((0,l.arrayify)(t));return"0x"+e.pub.add(r.pub).encodeCompressed("hex")}signDigest(t){const e=ri().keyFromPrivate((0,l.arrayify)(this.privateKey)),r=(0,l.arrayify)(t);32!==r.length&&ti.throwArgumentError("bad digest length","digest",t);const n=e.sign(r,{canonical:!0});return(0,l.splitSignature)({recoveryParam:n.recoveryParam,r:(0,l.hexZeroPad)("0x"+n.r.toString(16),32),s:(0,l.hexZeroPad)("0x"+n.s.toString(16),32)})}computeSharedSecret(t){const e=ri().keyFromPrivate((0,l.arrayify)(this.privateKey)),r=ri().keyFromPublic((0,l.arrayify)(oi(t)));return(0,l.hexZeroPad)("0x"+e.derive(r.getPublic()).toString(16),32)}static isSigningKey(t){return!(!t||!t._isSigningKey)}constructor(t){(0,L.defineReadOnly)(this,"curve","secp256k1"),(0,L.defineReadOnly)(this,"privateKey",(0,l.hexlify)(t)),32!==(0,l.hexDataLength)(this.privateKey)&&ti.throwArgumentError("invalid private key","privateKey","[[ REDACTED ]]");const e=ri().keyFromPrivate((0,l.arrayify)(this.privateKey));(0,L.defineReadOnly)(this,"publicKey","0x"+e.getPublic(!1,"hex")),(0,L.defineReadOnly)(this,"compressedPublicKey","0x"+e.getPublic(!0,"hex")),(0,L.defineReadOnly)(this,"_isSigningKey",!0)}}function ii(t,e){const r=(0,l.splitSignature)(e),n={r:(0,l.arrayify)(r.r),s:(0,l.arrayify)(r.s)};return"0x"+ri().recoverPubKey((0,l.arrayify)(t),n,r.recoveryParam).encode("hex",!1)}function oi(t,e){const r=(0,l.arrayify)(t);if(32===r.length){const t=new ni(r);return e?"0x"+ri().keyFromPrivate(r).getPublic(!0,"hex"):t.publicKey}return 33===r.length?e?(0,l.hexlify)(r):"0x"+ri().keyFromPublic(r).getPublic(!1,"hex"):65===r.length?e?"0x"+ri().keyFromPublic(r).getPublic(!0,"hex"):(0,l.hexlify)(r):ti.throwArgumentError("invalid public or private key","key","[REDACTED]")}const si=new(0,(c=o("2rINa")).Logger)("transactions/5.7.0");var ai,ui;function li(t){return"0x"===t?null:Wt(t)}function ci(t){return"0x"===t?de:v.from(t)}(ui=ai||(ai={}))[ui.legacy=0]="legacy",ui[ui.eip2930=1]="eip2930",ui[ui.eip1559=2]="eip1559";const hi=[{name:"nonce",maxLength:32,numeric:!0},{name:"gasPrice",maxLength:32,numeric:!0},{name:"gasLimit",maxLength:32,numeric:!0},{name:"to",length:20},{name:"value",maxLength:32,numeric:!0},{name:"data"}],fi={chainId:!0,data:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,type:!0,value:!0};function di(t){const e=oi(t);return Wt((0,l.hexDataSlice)(Gt((0,l.hexDataSlice)(e,1)),12))}function pi(t,e){return di(ii((0,l.arrayify)(t),e))}function gi(t,e){const r=(0,l.stripZeros)(v.from(t).toHexString());return r.length>32&&si.throwArgumentError("invalid length for "+e,"transaction:"+e,t),r}function mi(t,e){return{address:Wt(t),storageKeys:(e||[]).map(((e,r)=>(32!==(0,l.hexDataLength)(e)&&si.throwArgumentError("invalid access list storageKey",`accessList[${t}:${r}]`,e),e.toLowerCase())))}}function yi(t){if(Array.isArray(t))return t.map(((t,e)=>Array.isArray(t)?(t.length>2&&si.throwArgumentError("access list expected to be [ address, storageKeys[] ]",`value[${e}]`,t),mi(t[0],t[1])):mi(t.address,t.storageKeys)));const e=Object.keys(t).map((e=>{const r=t[e].reduce(((t,e)=>(t[e]=!0,t)),{});return mi(e,Object.keys(r).sort())}));return e.sort(((t,e)=>t.address.localeCompare(e.address))),e}function vi(t){return yi(t).map((t=>[t.address,t.storageKeys]))}function wi(t,e){if(null!=t.gasPrice){const e=v.from(t.gasPrice),r=v.from(t.maxFeePerGas||0);e.eq(r)||si.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas","tx",{gasPrice:e,maxFeePerGas:r})}const r=[gi(t.chainId||0,"chainId"),gi(t.nonce||0,"nonce"),gi(t.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),gi(t.maxFeePerGas||0,"maxFeePerGas"),gi(t.gasLimit||0,"gasLimit"),null!=t.to?Wt(t.to):"0x",gi(t.value||0,"value"),t.data||"0x",vi(t.accessList||[])];if(e){const t=(0,l.splitSignature)(e);r.push(gi(t.recoveryParam,"recoveryParam")),r.push((0,l.stripZeros)(t.r)),r.push((0,l.stripZeros)(t.s))}return(0,l.hexConcat)(["0x02",qt.encode(r)])}function bi(t,e){const r=[gi(t.chainId||0,"chainId"),gi(t.nonce||0,"nonce"),gi(t.gasPrice||0,"gasPrice"),gi(t.gasLimit||0,"gasLimit"),null!=t.to?Wt(t.to):"0x",gi(t.value||0,"value"),t.data||"0x",vi(t.accessList||[])];if(e){const t=(0,l.splitSignature)(e);r.push(gi(t.recoveryParam,"recoveryParam")),r.push((0,l.stripZeros)(t.r)),r.push((0,l.stripZeros)(t.s))}return(0,l.hexConcat)(["0x01",qt.encode(r)])}function Ai(t,e){if(null==t.type||0===t.type)return null!=t.accessList&&si.throwArgumentError("untyped transactions do not support accessList; include type: 1","transaction",t),function(t,e){(0,L.checkProperties)(t,fi);const r=[];hi.forEach((function(e){let n=t[e.name]||[];const i={};e.numeric&&(i.hexPad="left"),n=(0,l.arrayify)((0,l.hexlify)(n,i)),e.length&&n.length!==e.length&&n.length>0&&si.throwArgumentError("invalid length for "+e.name,"transaction:"+e.name,n),e.maxLength&&(n=(0,l.stripZeros)(n),n.length>e.maxLength&&si.throwArgumentError("invalid length for "+e.name,"transaction:"+e.name,n)),r.push((0,l.hexlify)(n))}));let n=0;if(null!=t.chainId?(n=t.chainId,"number"!=typeof n&&si.throwArgumentError("invalid transaction.chainId","transaction",t)):e&&!(0,l.isBytesLike)(e)&&e.v>28&&(n=Math.floor((e.v-35)/2)),0!==n&&(r.push((0,l.hexlify)(n)),r.push("0x"),r.push("0x")),!e)return qt.encode(r);const i=(0,l.splitSignature)(e);let o=27+i.recoveryParam;return 0!==n?(r.pop(),r.pop(),r.pop(),o+=2*n+8,i.v>28&&i.v!==o&&si.throwArgumentError("transaction.chainId/signature.v mismatch","signature",e)):i.v!==o&&si.throwArgumentError("transaction.chainId/signature.v mismatch","signature",e),r.push((0,l.hexlify)(o)),r.push((0,l.stripZeros)((0,l.arrayify)(i.r))),r.push((0,l.stripZeros)((0,l.arrayify)(i.s))),qt.encode(r)}(t,e);switch(t.type){case 1:return bi(t,e);case 2:return wi(t,e)}return si.throwError(`unsupported transaction type: ${t.type}`,c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"serializeTransaction",transactionType:t.type})}function Ei(t,e,r){try{const r=ci(e[0]).toNumber();if(0!==r&&1!==r)throw new Error("bad recid");t.v=r}catch(t){si.throwArgumentError("invalid v for transaction type: 1","v",e[0])}t.r=(0,l.hexZeroPad)(e[1],32),t.s=(0,l.hexZeroPad)(e[2],32);try{const e=Gt(r(t));t.from=pi(e,{r:t.r,s:t.s,recoveryParam:t.v})}catch(t){}}function ki(t){const e=(0,l.arrayify)(t);if(e[0]>127)return function(t){const e=qt.decode(t);9!==e.length&&6!==e.length&&si.throwArgumentError("invalid raw transaction","rawTransaction",t);const r={nonce:ci(e[0]).toNumber(),gasPrice:ci(e[1]),gasLimit:ci(e[2]),to:li(e[3]),value:ci(e[4]),data:e[5],chainId:0};if(6===e.length)return r;try{r.v=v.from(e[6]).toNumber()}catch(t){return r}if(r.r=(0,l.hexZeroPad)(e[7],32),r.s=(0,l.hexZeroPad)(e[8],32),v.from(r.r).isZero()&&v.from(r.s).isZero())r.chainId=r.v,r.v=0;else{r.chainId=Math.floor((r.v-35)/2),r.chainId<0&&(r.chainId=0);let n=r.v-27;const i=e.slice(0,6);0!==r.chainId&&(i.push((0,l.hexlify)(r.chainId)),i.push("0x"),i.push("0x"),n-=2*r.chainId+8);const o=Gt(qt.encode(i));try{r.from=pi(o,{r:(0,l.hexlify)(r.r),s:(0,l.hexlify)(r.s),recoveryParam:n})}catch(t){}r.hash=Gt(t)}return r.type=null,r}(e);switch(e[0]){case 1:return function(t){const e=qt.decode(t.slice(1));8!==e.length&&11!==e.length&&si.throwArgumentError("invalid component count for transaction type: 1","payload",(0,l.hexlify)(t));const r={type:1,chainId:ci(e[0]).toNumber(),nonce:ci(e[1]).toNumber(),gasPrice:ci(e[2]),gasLimit:ci(e[3]),to:li(e[4]),value:ci(e[5]),data:e[6],accessList:yi(e[7])};return 8===e.length||(r.hash=Gt(t),Ei(r,e.slice(8),bi)),r}(e);case 2:return function(t){const e=qt.decode(t.slice(1));9!==e.length&&12!==e.length&&si.throwArgumentError("invalid component count for transaction type: 2","payload",(0,l.hexlify)(t));const r=ci(e[2]),n=ci(e[3]),i={type:2,chainId:ci(e[0]).toNumber(),nonce:ci(e[1]).toNumber(),maxPriorityFeePerGas:r,maxFeePerGas:n,gasPrice:null,gasLimit:ci(e[4]),to:li(e[5]),value:ci(e[6]),data:e[7],accessList:yi(e[8])};return 9===e.length||(i.hash=Gt(t),Ei(i,e.slice(9),wi)),i}(e)}return si.throwError(`unsupported transaction type: ${e[0]}`,c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"parseTransaction",transactionType:e[0]})}c=o("2rINa");var Si=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const xi=new(0,c.Logger)("contracts/5.7.0"),_i={chainId:!0,data:!0,from:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,value:!0,type:!0,accessList:!0,maxFeePerGas:!0,maxPriorityFeePerGas:!0,customData:!0,ccipReadEnabled:!0};function Pi(t,e){return Si(this,void 0,void 0,(function*(){const r=yield e;"string"!=typeof r&&xi.throwArgumentError("invalid address or ENS name","name",r);try{return Wt(r)}catch(t){}t||xi.throwError("a provider or signer is needed to resolve ENS names",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"resolveName"});const n=yield t.resolveName(r);return null==n&&xi.throwArgumentError("resolver or addr is not configured for ENS name","name",r),n}))}function Ni(t,e,r){return Si(this,void 0,void 0,(function*(){return Array.isArray(r)?yield Promise.all(r.map(((r,n)=>Ni(t,Array.isArray(e)?e[n]:e[r.name],r)))):"address"===r.type?yield Pi(t,e):"tuple"===r.type?yield Ni(t,e,r.components):"array"===r.baseType?Array.isArray(e)?yield Promise.all(e.map((e=>Ni(t,e,r.arrayChildren)))):Promise.reject(xi.makeError("invalid value for array",c.Logger.errors.INVALID_ARGUMENT,{argument:"value",value:e})):e}))}function Ri(t,e,r){return Si(this,void 0,void 0,(function*(){let n={};r.length===e.inputs.length+1&&"object"==typeof r[r.length-1]&&(n=(0,L.shallowCopy)(r.pop())),xi.checkArgumentCount(r.length,e.inputs.length,"passed to contract"),t.signer?n.from?n.from=(0,L.resolveProperties)({override:Pi(t.signer,n.from),signer:t.signer.getAddress()}).then((t=>Si(this,void 0,void 0,(function*(){return Wt(t.signer)!==t.override&&xi.throwError("Contract with a Signer cannot override from",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"overrides.from"}),t.override})))):n.from=t.signer.getAddress():n.from&&(n.from=Pi(t.provider,n.from));const i=yield(0,L.resolveProperties)({args:Ni(t.signer||t.provider,r,e.inputs),address:t.resolvedAddress,overrides:(0,L.resolveProperties)(n)||{}}),o=t.interface.encodeFunctionData(e,i.args),s={data:o,to:i.address},a=i.overrides;if(null!=a.nonce&&(s.nonce=v.from(a.nonce).toNumber()),null!=a.gasLimit&&(s.gasLimit=v.from(a.gasLimit)),null!=a.gasPrice&&(s.gasPrice=v.from(a.gasPrice)),null!=a.maxFeePerGas&&(s.maxFeePerGas=v.from(a.maxFeePerGas)),null!=a.maxPriorityFeePerGas&&(s.maxPriorityFeePerGas=v.from(a.maxPriorityFeePerGas)),null!=a.from&&(s.from=a.from),null!=a.type&&(s.type=a.type),null!=a.accessList&&(s.accessList=yi(a.accessList)),null==s.gasLimit&&null!=e.gas){let t=21e3;const r=(0,l.arrayify)(o);for(let e=0;e<r.length;e++)t+=4,r[e]&&(t+=64);s.gasLimit=v.from(e.gas).add(t)}if(a.value){const t=v.from(a.value);t.isZero()||e.payable||xi.throwError("non-payable method cannot override value",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"overrides.value",value:n.value}),s.value=t}a.customData&&(s.customData=(0,L.shallowCopy)(a.customData)),a.ccipReadEnabled&&(s.ccipReadEnabled=!!a.ccipReadEnabled),delete n.nonce,delete n.gasLimit,delete n.gasPrice,delete n.from,delete n.value,delete n.type,delete n.accessList,delete n.maxFeePerGas,delete n.maxPriorityFeePerGas,delete n.customData,delete n.ccipReadEnabled;const u=Object.keys(n).filter((t=>null!=n[t]));return u.length&&xi.throwError(`cannot override ${u.map((t=>JSON.stringify(t))).join(",")}`,c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"overrides",overrides:u}),s}))}function Ci(t,e){const r=e.wait.bind(e);e.wait=e=>r(e).then((e=>(e.events=e.logs.map((r=>{let n=(0,L.deepCopy)(r),i=null;try{i=t.interface.parseLog(r)}catch(t){}return i&&(n.args=i.args,n.decode=(e,r)=>t.interface.decodeEventLog(i.eventFragment,e,r),n.event=i.name,n.eventSignature=i.signature),n.removeListener=()=>t.provider,n.getBlock=()=>t.provider.getBlock(e.blockHash),n.getTransaction=()=>t.provider.getTransaction(e.transactionHash),n.getTransactionReceipt=()=>Promise.resolve(e),n})),e)))}function Mi(t,e,r){const n=t.signer||t.provider;return function(...i){return Si(this,void 0,void 0,(function*(){let o;if(i.length===e.inputs.length+1&&"object"==typeof i[i.length-1]){const t=(0,L.shallowCopy)(i.pop());null!=t.blockTag&&(o=yield t.blockTag),delete t.blockTag,i.push(t)}null!=t.deployTransaction&&(yield t._deployed(o));const s=yield Ri(t,e,i),a=yield n.call(s,o);try{let n=t.interface.decodeFunctionResult(e,a);return r&&1===e.outputs.length&&(n=n[0]),n}catch(e){throw e.code===c.Logger.errors.CALL_EXCEPTION&&(e.address=t.address,e.args=i,e.transaction=s),e}}))}}function Ii(t,e,r){return e.constant?Mi(t,e,r):function(t,e){return function(...r){return Si(this,void 0,void 0,(function*(){t.signer||xi.throwError("sending a transaction requires a signer",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"sendTransaction"}),null!=t.deployTransaction&&(yield t._deployed());const n=yield Ri(t,e,r),i=yield t.signer.sendTransaction(n);return Ci(t,i),i}))}}(t,e)}function Ti(t){return!t.address||null!=t.topics&&0!==t.topics.length?(t.address||"*")+"@"+(t.topics?t.topics.map((t=>Array.isArray(t)?t.join("|"):t)).join(":"):""):"*"}class Oi{addListener(t,e){this._listeners.push({listener:t,once:e})}removeListener(t){let e=!1;this._listeners=this._listeners.filter((r=>!(!e&&r.listener===t)||(e=!0,!1)))}removeAllListeners(){this._listeners=[]}listeners(){return this._listeners.map((t=>t.listener))}listenerCount(){return this._listeners.length}run(t){const e=this.listenerCount();return this._listeners=this._listeners.filter((e=>{const r=t.slice();return setTimeout((()=>{e.listener.apply(this,r)}),0),!e.once})),e}prepareEvent(t){}getEmit(t){return[t]}constructor(t,e){(0,L.defineReadOnly)(this,"tag",t),(0,L.defineReadOnly)(this,"filter",e),this._listeners=[]}}class Bi extends Oi{constructor(){super("error",null)}}class Li extends Oi{prepareEvent(t){super.prepareEvent(t),t.event=this.fragment.name,t.eventSignature=this.fragment.format(),t.decode=(t,e)=>this.interface.decodeEventLog(this.fragment,t,e);try{t.args=this.interface.decodeEventLog(this.fragment,t.data,t.topics)}catch(e){t.args=null,t.decodeError=e}}getEmit(t){const e=bt(t.args);if(e.length)throw e[0].error;const r=(t.args||[]).slice();return r.push(t),r}constructor(t,e,r,n){const i={address:t};let o=e.getEventTopic(r);n?(o!==n[0]&&xi.throwArgumentError("topic mismatch","topics",n),i.topics=n.slice()):i.topics=[o],super(Ti(i),i),(0,L.defineReadOnly)(this,"address",t),(0,L.defineReadOnly)(this,"interface",e),(0,L.defineReadOnly)(this,"fragment",r)}}class Fi extends Oi{prepareEvent(t){super.prepareEvent(t);try{const e=this.interface.parseLog(t);t.event=e.name,t.eventSignature=e.signature,t.decode=(t,r)=>this.interface.decodeEventLog(e.eventFragment,t,r),t.args=e.args}catch(t){}}constructor(t,e){super("*",{address:t}),(0,L.defineReadOnly)(this,"address",t),(0,L.defineReadOnly)(this,"interface",e)}}class Di{static getContractAddress(t){return Zt(t)}static getInterface(t){return rn.isInterface(t)?t:new rn(t)}deployed(){return this._deployed()}_deployed(t){return this._deployedPromise||(this.deployTransaction?this._deployedPromise=this.deployTransaction.wait().then((()=>this)):this._deployedPromise=this.provider.getCode(this.address,t).then((t=>("0x"===t&&xi.throwError("contract not deployed",c.Logger.errors.UNSUPPORTED_OPERATION,{contractAddress:this.address,operation:"getDeployed"}),this)))),this._deployedPromise}fallback(t){this.signer||xi.throwError("sending a transactions require a signer",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"sendTransaction(fallback)"});const e=(0,L.shallowCopy)(t||{});return["from","to"].forEach((function(t){null!=e[t]&&xi.throwError("cannot override "+t,c.Logger.errors.UNSUPPORTED_OPERATION,{operation:t})})),e.to=this.resolvedAddress,this.deployed().then((()=>this.signer.sendTransaction(e)))}connect(t){"string"==typeof t&&(t=new(0,ln.VoidSigner)(t,this.provider));const e=new this.constructor(this.address,this.interface,t);return this.deployTransaction&&(0,L.defineReadOnly)(e,"deployTransaction",this.deployTransaction),e}attach(t){return new this.constructor(t,this.interface,this.signer||this.provider)}static isIndexed(t){return $r.isIndexed(t)}_normalizeRunningEvent(t){return this._runningEvents[t.tag]?this._runningEvents[t.tag]:t}_getRunningEvent(t){if("string"==typeof t){if("error"===t)return this._normalizeRunningEvent(new Bi);if("event"===t)return this._normalizeRunningEvent(new Oi("event",null));if("*"===t)return this._normalizeRunningEvent(new Fi(this.address,this.interface));const e=this.interface.getEvent(t);return this._normalizeRunningEvent(new Li(this.address,this.interface,e))}if(t.topics&&t.topics.length>0){try{const e=t.topics[0];if("string"!=typeof e)throw new Error("invalid topic");const r=this.interface.getEvent(e);return this._normalizeRunningEvent(new Li(this.address,this.interface,r,t.topics))}catch(t){}const e={address:this.address,topics:t.topics};return this._normalizeRunningEvent(new Oi(Ti(e),e))}return this._normalizeRunningEvent(new Fi(this.address,this.interface))}_checkRunningEvents(t){if(0===t.listenerCount()){delete this._runningEvents[t.tag];const e=this._wrappedEmits[t.tag];e&&t.filter&&(this.provider.off(t.filter,e),delete this._wrappedEmits[t.tag])}}_wrapEvent(t,e,r){const n=(0,L.deepCopy)(e);return n.removeListener=()=>{r&&(t.removeListener(r),this._checkRunningEvents(t))},n.getBlock=()=>this.provider.getBlock(e.blockHash),n.getTransaction=()=>this.provider.getTransaction(e.transactionHash),n.getTransactionReceipt=()=>this.provider.getTransactionReceipt(e.transactionHash),t.prepareEvent(n),n}_addEventListener(t,e,r){if(this.provider||xi.throwError("events require a provider or a signer with a provider",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"once"}),t.addListener(e,r),this._runningEvents[t.tag]=t,!this._wrappedEmits[t.tag]){const r=r=>{let n=this._wrapEvent(t,r,e);if(null==n.decodeError)try{const e=t.getEmit(n);this.emit(t.filter,...e)}catch(t){n.decodeError=t.error}null!=t.filter&&this.emit("event",n),null!=n.decodeError&&this.emit("error",n.decodeError,n)};this._wrappedEmits[t.tag]=r,null!=t.filter&&this.provider.on(t.filter,r)}}queryFilter(t,e,r){const n=this._getRunningEvent(t),i=(0,L.shallowCopy)(n.filter);return"string"==typeof e&&(0,l.isHexString)(e,32)?(null!=r&&xi.throwArgumentError("cannot specify toBlock with blockhash","toBlock",r),i.blockHash=e):(i.fromBlock=null!=e?e:0,i.toBlock=null!=r?r:"latest"),this.provider.getLogs(i).then((t=>t.map((t=>this._wrapEvent(n,t,null)))))}on(t,e){return this._addEventListener(this._getRunningEvent(t),e,!1),this}once(t,e){return this._addEventListener(this._getRunningEvent(t),e,!0),this}emit(t,...e){if(!this.provider)return!1;const r=this._getRunningEvent(t),n=r.run(e)>0;return this._checkRunningEvents(r),n}listenerCount(t){return this.provider?null==t?Object.keys(this._runningEvents).reduce(((t,e)=>t+this._runningEvents[e].listenerCount()),0):this._getRunningEvent(t).listenerCount():0}listeners(t){if(!this.provider)return[];if(null==t){const t=[];for(let e in this._runningEvents)this._runningEvents[e].listeners().forEach((e=>{t.push(e)}));return t}return this._getRunningEvent(t).listeners()}removeAllListeners(t){if(!this.provider)return this;if(null==t){for(const t in this._runningEvents){const e=this._runningEvents[t];e.removeAllListeners(),this._checkRunningEvents(e)}return this}const e=this._getRunningEvent(t);return e.removeAllListeners(),this._checkRunningEvents(e),this}off(t,e){if(!this.provider)return this;const r=this._getRunningEvent(t);return r.removeListener(e),this._checkRunningEvents(r),this}removeListener(t,e){return this.off(t,e)}constructor(t,e,r){(0,L.defineReadOnly)(this,"interface",(0,L.getStatic)(new.target,"getInterface")(e)),null==r?((0,L.defineReadOnly)(this,"provider",null),(0,L.defineReadOnly)(this,"signer",null)):ln.Signer.isSigner(r)?((0,L.defineReadOnly)(this,"provider",r.provider||null),(0,L.defineReadOnly)(this,"signer",r)):nn.Provider.isProvider(r)?((0,L.defineReadOnly)(this,"provider",r),(0,L.defineReadOnly)(this,"signer",null)):xi.throwArgumentError("invalid signer or provider","signerOrProvider",r),(0,L.defineReadOnly)(this,"callStatic",{}),(0,L.defineReadOnly)(this,"estimateGas",{}),(0,L.defineReadOnly)(this,"functions",{}),(0,L.defineReadOnly)(this,"populateTransaction",{}),(0,L.defineReadOnly)(this,"filters",{});{const t={};Object.keys(this.interface.events).forEach((e=>{const r=this.interface.events[e];(0,L.defineReadOnly)(this.filters,e,((...t)=>({address:this.address,topics:this.interface.encodeFilterTopics(r,t)}))),t[r.name]||(t[r.name]=[]),t[r.name].push(e)})),Object.keys(t).forEach((e=>{const r=t[e];1===r.length?(0,L.defineReadOnly)(this.filters,e,this.filters[r[0]]):xi.warn(`Duplicate definition of ${e} (${r.join(", ")})`)}))}if((0,L.defineReadOnly)(this,"_runningEvents",{}),(0,L.defineReadOnly)(this,"_wrappedEmits",{}),null==t&&xi.throwArgumentError("invalid contract address or ENS name","addressOrName",t),(0,L.defineReadOnly)(this,"address",t),this.provider)(0,L.defineReadOnly)(this,"resolvedAddress",Pi(this.provider,t));else try{(0,L.defineReadOnly)(this,"resolvedAddress",Promise.resolve(Wt(t)))}catch(t){xi.throwError("provider is required to use ENS name as contract address",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new Contract"})}this.resolvedAddress.catch((t=>{}));const n={},i={};Object.keys(this.interface.functions).forEach((t=>{const e=this.interface.functions[t];if(i[t])xi.warn(`Duplicate ABI entry for ${JSON.stringify(t)}`);else{i[t]=!0;{const r=e.name;n[`%${r}`]||(n[`%${r}`]=[]),n[`%${r}`].push(t)}null==this[t]&&(0,L.defineReadOnly)(this,t,Ii(this,e,!0)),null==this.functions[t]&&(0,L.defineReadOnly)(this.functions,t,Ii(this,e,!1)),null==this.callStatic[t]&&(0,L.defineReadOnly)(this.callStatic,t,Mi(this,e,!0)),null==this.populateTransaction[t]&&(0,L.defineReadOnly)(this.populateTransaction,t,function(t,e){return function(...r){return Ri(t,e,r)}}(this,e)),null==this.estimateGas[t]&&(0,L.defineReadOnly)(this.estimateGas,t,function(t,e){const r=t.signer||t.provider;return function(...n){return Si(this,void 0,void 0,(function*(){r||xi.throwError("estimate require a provider or signer",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"estimateGas"});const i=yield Ri(t,e,n);return yield r.estimateGas(i)}))}}(this,e))}})),Object.keys(n).forEach((t=>{const e=n[t];if(e.length>1)return;t=t.substring(1);const r=e[0];try{null==this[t]&&(0,L.defineReadOnly)(this,t,this[r])}catch(t){}null==this.functions[t]&&(0,L.defineReadOnly)(this.functions,t,this.functions[r]),null==this.callStatic[t]&&(0,L.defineReadOnly)(this.callStatic,t,this.callStatic[r]),null==this.populateTransaction[t]&&(0,L.defineReadOnly)(this.populateTransaction,t,this.populateTransaction[r]),null==this.estimateGas[t]&&(0,L.defineReadOnly)(this.estimateGas,t,this.estimateGas[r])}))}}class Ui extends Di{}class Gi{getDeployTransaction(...t){let e={};if(t.length===this.interface.deploy.inputs.length+1&&"object"==typeof t[t.length-1]){e=(0,L.shallowCopy)(t.pop());for(const t in e)if(!_i[t])throw new Error("unknown transaction override "+t)}if(["data","from","to"].forEach((t=>{null!=e[t]&&xi.throwError("cannot override "+t,c.Logger.errors.UNSUPPORTED_OPERATION,{operation:t})})),e.value){v.from(e.value).isZero()||this.interface.deploy.payable||xi.throwError("non-payable constructor cannot override value",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"overrides.value",value:e.value})}return xi.checkArgumentCount(t.length,this.interface.deploy.inputs.length," in Contract constructor"),e.data=(0,l.hexlify)((0,l.concat)([this.bytecode,this.interface.encodeDeploy(t)])),e}deploy(...t){return Si(this,void 0,void 0,(function*(){let e={};t.length===this.interface.deploy.inputs.length+1&&(e=t.pop()),xi.checkArgumentCount(t.length,this.interface.deploy.inputs.length," in Contract constructor");const r=yield Ni(this.signer,t,this.interface.deploy.inputs);r.push(e);const n=this.getDeployTransaction(...r),i=yield this.signer.sendTransaction(n),o=(0,L.getStatic)(this.constructor,"getContractAddress")(i),s=(0,L.getStatic)(this.constructor,"getContract")(o,this.interface,this.signer);return Ci(s,i),(0,L.defineReadOnly)(s,"deployTransaction",i),s}))}attach(t){return this.constructor.getContract(t,this.interface,this.signer)}connect(t){return new this.constructor(this.interface,this.bytecode,t)}static fromSolidity(t,e){null==t&&xi.throwError("missing compiler output",c.Logger.errors.MISSING_ARGUMENT,{argument:"compilerOutput"}),"string"==typeof t&&(t=JSON.parse(t));const r=t.abi;let n=null;return t.bytecode?n=t.bytecode:t.evm&&t.evm.bytecode&&(n=t.evm.bytecode),new this(r,n,e)}static getInterface(t){return Ui.getInterface(t)}static getContractAddress(t){return Zt(t)}static getContract(t,e,r){return new Ui(t,e,r)}constructor(t,e,r){let n=null;n="string"==typeof e?e:(0,l.isBytes)(e)?(0,l.hexlify)(e):e&&"string"==typeof e.object?e.object:"!","0x"!==n.substring(0,2)&&(n="0x"+n),(!(0,l.isHexString)(n)||n.length%2)&&xi.throwArgumentError("invalid bytecode","bytecode",e),r&&!ln.Signer.isSigner(r)&&xi.throwArgumentError("invalid signer","signer",r),(0,L.defineReadOnly)(this,"bytecode",n),(0,L.defineReadOnly)(this,"interface",(0,L.getStatic)(new.target,"getInterface")(t)),(0,L.defineReadOnly)(this,"signer",r||null)}}var qi={};t(qi,"Wallet",(function(){return rs}),(function(t){return rs=t})),t(qi,"verifyMessage",(function(){return ns}),(function(t){return ns=t})),t(qi,"verifyTypedData",(function(){return is}),(function(t){return is=t}));l=o("3Yhqu"),l=o("3Yhqu");class ji{encode(t){let e=(0,l.arrayify)(t);if(0===e.length)return"";let r=[0];for(let t=0;t<e.length;++t){let n=e[t];for(let t=0;t<r.length;++t)n+=r[t]<<8,r[t]=n%this.base,n=n/this.base|0;for(;n>0;)r.push(n%this.base),n=n/this.base|0}let n="";for(let t=0;0===e[t]&&t<e.length-1;++t)n+=this._leader;for(let t=r.length-1;t>=0;--t)n+=this.alphabet[r[t]];return n}decode(t){if("string"!=typeof t)throw new TypeError("Expected String");let e=[];if(0===t.length)return new Uint8Array(e);e.push(0);for(let r=0;r<t.length;r++){let n=this._alphabetMap[t[r]];if(void 0===n)throw new Error("Non-base"+this.base+" character");let i=n;for(let t=0;t<e.length;++t)i+=e[t]*this.base,e[t]=255&i,i>>=8;for(;i>0;)e.push(255&i),i>>=8}for(let r=0;t[r]===this._leader&&r<t.length-1;++r)e.push(0);return(0,l.arrayify)(new Uint8Array(e.reverse()))}constructor(t){(0,L.defineReadOnly)(this,"alphabet",t),(0,L.defineReadOnly)(this,"base",t.length),(0,L.defineReadOnly)(this,"_alphabetMap",{}),(0,L.defineReadOnly)(this,"_leader",t.charAt(0));for(let e=0;e<t.length;e++)this._alphabetMap[t.charAt(e)]=e}}new ji("abcdefghijklmnopqrstuvwxyz234567");const zi=new ji("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");var Hi,Ki;l=o("3Yhqu"),l=o("3Yhqu"),l=o("3Yhqu");(Ki=Hi||(Hi={})).sha256="sha256",Ki.sha512="sha512";const Ji=new(0,(c=o("2rINa")).Logger)("sha2/5.7.0");function Vi(t){return"0x"+r(mn).ripemd160().update((0,l.arrayify)(t)).digest("hex")}function Wi(t){return"0x"+r(mn).sha256().update((0,l.arrayify)(t)).digest("hex")}function Yi(t){return"0x"+r(mn).sha512().update((0,l.arrayify)(t)).digest("hex")}function Qi(t,e,n){return Hi[t]||Ji.throwError("unsupported algorithm "+t,c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"hmac",algorithm:t}),"0x"+r(mn).hmac(r(mn)[t],(0,l.arrayify)(e)).update((0,l.arrayify)(n)).digest("hex")}function Zi(t,e,r,n,i){let o;t=(0,l.arrayify)(t),e=(0,l.arrayify)(e);let s=1;const a=new Uint8Array(n),u=new Uint8Array(e.length+4);let c,h;u.set(e);for(let f=1;f<=s;f++){u[e.length]=f>>24&255,u[e.length+1]=f>>16&255,u[e.length+2]=f>>8&255,u[e.length+3]=255&f;let d=(0,l.arrayify)(Qi(i,t,u));o||(o=d.length,h=new Uint8Array(o),s=Math.ceil(n/o),c=n-(s-1)*o),h.set(d);for(let e=1;e<r;e++){d=(0,l.arrayify)(Qi(i,t,d));for(let t=0;t<o;t++)h[t]^=d[t]}const p=(f-1)*o,g=f===s?c:o;a.set((0,l.arrayify)(h).slice(0,g),p)}return(0,l.hexlify)(a)}c=o("2rINa");const Xi=new(0,c.Logger)("wordlists/5.7.0");class $i{split(t){return t.toLowerCase().split(/ +/g)}join(t){return t.join(" ")}static check(t){const e=[];for(let r=0;r<2048;r++){const n=t.getWord(r);if(r!==t.getWordIndex(n))return"0x";e.push(n)}return nr(e.join("\n")+"\n")}static register(t,e){e||(e=t.locale)}constructor(t){Xi.checkAbstract(new.target,$i),(0,L.defineReadOnly)(this,"locale",t)}}let to=null;function eo(t){if(null==to&&(to="AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo".replace(/([A-Z])/g," $1").toLowerCase().substring(1).split(" "),"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60"!==$i.check(t)))throw to=null,new Error("BIP39 Wordlist for en (English) FAILED")}const ro=new class extends $i{getWord(t){return eo(this),to[t]}getWordIndex(t){return eo(this),to.indexOf(t)}constructor(){super("en")}};$i.register(ro);const no={en:ro};const io=new(0,(c=o("2rINa")).Logger)("hdnode/5.7.0"),oo=v.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),so=Me("Bitcoin seed"),ao=2147483648;function uo(t){return(1<<t)-1<<8-t}function lo(t){return(0,l.hexZeroPad)((0,l.hexlify)(t),32)}function co(t){return zi.encode((0,l.concat)([t,(0,l.hexDataSlice)(Wi(Wi(t)),0,4)]))}function ho(t){if(null==t)return no.en;if("string"==typeof t){const e=no[t];return null==e&&io.throwArgumentError("unknown locale","wordlist",t),e}return t}const fo={},po="m/44'/60'/0'/0/0";class go{get extendedKey(){if(this.depth>=256)throw new Error("Depth too large!");return co((0,l.concat)([null!=this.privateKey?"0x0488ADE4":"0x0488B21E",(0,l.hexlify)(this.depth),this.parentFingerprint,(0,l.hexZeroPad)((0,l.hexlify)(this.index),4),this.chainCode,null!=this.privateKey?(0,l.concat)(["0x00",this.privateKey]):this.publicKey]))}neuter(){return new go(fo,null,this.publicKey,this.parentFingerprint,this.chainCode,this.index,this.depth,this.path)}_derive(t){if(t>4294967295)throw new Error("invalid index - "+String(t));let e=this.path;e&&(e+="/"+(2147483647&t));const r=new Uint8Array(37);if(t&ao){if(!this.privateKey)throw new Error("cannot derive child of neutered node");r.set((0,l.arrayify)(this.privateKey),1),e&&(e+="'")}else r.set((0,l.arrayify)(this.publicKey));for(let e=24;e>=0;e-=8)r[33+(e>>3)]=t>>24-e&255;const n=(0,l.arrayify)(Qi(Hi.sha512,this.chainCode,r)),i=n.slice(0,32),o=n.slice(32);let s=null,a=null;if(this.privateKey)s=lo(v.from(i).add(this.privateKey).mod(oo));else{a=new ni((0,l.hexlify)(i))._addPoint(this.publicKey)}let u=e;const c=this.mnemonic;return c&&(u=Object.freeze({phrase:c.phrase,path:e,locale:c.locale||"en"})),new go(fo,s,a,this.fingerprint,lo(o),t,this.depth+1,u)}derivePath(t){const e=t.split("/");if(0===e.length||"m"===e[0]&&0!==this.depth)throw new Error("invalid path - "+t);"m"===e[0]&&e.shift();let r=this;for(let t=0;t<e.length;t++){const n=e[t];if(n.match(/^[0-9]+'$/)){const t=parseInt(n.substring(0,n.length-1));if(t>=ao)throw new Error("invalid path index - "+n);r=r._derive(ao+t)}else{if(!n.match(/^[0-9]+$/))throw new Error("invalid path component - "+n);{const t=parseInt(n);if(t>=ao)throw new Error("invalid path index - "+n);r=r._derive(t)}}}return r}static _fromSeed(t,e){const r=(0,l.arrayify)(t);if(r.length<16||r.length>64)throw new Error("invalid seed");const n=(0,l.arrayify)(Qi(Hi.sha512,so,r));return new go(fo,lo(n.slice(0,32)),null,"0x00000000",lo(n.slice(32)),0,0,e)}static fromMnemonic(t,e,r){return t=vo(yo(t,r=ho(r)),r),go._fromSeed(mo(t,e),{phrase:t,path:"m",locale:r.locale})}static fromSeed(t){return go._fromSeed(t,null)}static fromExtendedKey(t){const e=zi.decode(t);82===e.length&&co(e.slice(0,78))===t||io.throwArgumentError("invalid extended key","extendedKey","[REDACTED]");const r=e[4],n=(0,l.hexlify)(e.slice(5,9)),i=parseInt((0,l.hexlify)(e.slice(9,13)).substring(2),16),o=(0,l.hexlify)(e.slice(13,45)),s=e.slice(45,78);switch((0,l.hexlify)(e.slice(0,4))){case"0x0488b21e":case"0x043587cf":return new go(fo,null,(0,l.hexlify)(s),n,o,i,r,null);case"0x0488ade4":case"0x04358394 ":if(0!==s[0])break;return new go(fo,(0,l.hexlify)(s.slice(1)),null,n,o,i,r,null)}return io.throwArgumentError("invalid extended key","extendedKey","[REDACTED]")}constructor(t,e,r,n,i,o,s,a){if(t!==fo)throw new Error("HDNode constructor cannot be called directly");if(e){const t=new ni(e);(0,L.defineReadOnly)(this,"privateKey",t.privateKey),(0,L.defineReadOnly)(this,"publicKey",t.compressedPublicKey)}else(0,L.defineReadOnly)(this,"privateKey",null),(0,L.defineReadOnly)(this,"publicKey",(0,l.hexlify)(r));(0,L.defineReadOnly)(this,"parentFingerprint",n),(0,L.defineReadOnly)(this,"fingerprint",(0,l.hexDataSlice)(Vi(Wi(this.publicKey)),0,4)),(0,L.defineReadOnly)(this,"address",di(this.publicKey)),(0,L.defineReadOnly)(this,"chainCode",i),(0,L.defineReadOnly)(this,"index",o),(0,L.defineReadOnly)(this,"depth",s),null==a?((0,L.defineReadOnly)(this,"mnemonic",null),(0,L.defineReadOnly)(this,"path",null)):"string"==typeof a?((0,L.defineReadOnly)(this,"mnemonic",null),(0,L.defineReadOnly)(this,"path",a)):((0,L.defineReadOnly)(this,"mnemonic",a),(0,L.defineReadOnly)(this,"path",a.path))}}function mo(t,e){e||(e="");const r=Me("mnemonic"+e,Se.NFKD);return Zi(Me(t,Se.NFKD),r,2048,64,"sha512")}function yo(t,e){e=ho(e),io.checkNormalize();const r=e.split(t);if(r.length%3!=0)throw new Error("invalid mnemonic");const n=(0,l.arrayify)(new Uint8Array(Math.ceil(11*r.length/8)));let i=0;for(let t=0;t<r.length;t++){let o=e.getWordIndex(r[t].normalize("NFKD"));if(-1===o)throw new Error("invalid mnemonic");for(let t=0;t<11;t++)o&1<<10-t&&(n[i>>3]|=1<<7-i%8),i++}const o=32*r.length/3,s=uo(r.length/3);if(((0,l.arrayify)(Wi(n.slice(0,o/8)))[0]&s)!==(n[n.length-1]&s))throw new Error("invalid checksum");return(0,l.hexlify)(n.slice(0,o/8))}function vo(t,e){if(e=ho(e),(t=(0,l.arrayify)(t)).length%4!=0||t.length<16||t.length>32)throw new Error("invalid entropy");const r=[0];let n=11;for(let e=0;e<t.length;e++)n>8?(r[r.length-1]<<=8,r[r.length-1]|=t[e],n-=8):(r[r.length-1]<<=n,r[r.length-1]|=t[e]>>8-n,r.push(t[e]&(1<<8-n)-1),n+=3);const i=t.length/4,o=(0,l.arrayify)(Wi(t))[0]&uo(i);return r[r.length-1]<<=i,r[r.length-1]|=o>>8-i,e.join(r.map((t=>e.getWord(t))))}function wo(t,e){try{return yo(t,e),!0}catch(t){}return!1}function bo(t){return("number"!=typeof t||t<0||t>=ao||t%1)&&io.throwArgumentError("invalid account index","index",t),`m/44'/60'/${t}'/0/0`}l=o("3Yhqu");const Ao=new(0,(c=o("2rINa")).Logger)("random/5.7.0");const Eo=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==e)return e;throw new Error("unable to locate global object")}();let ko=Eo.crypto||Eo.msCrypto;function So(t){(t<=0||t>1024||t%1||t!=t)&&Ao.throwArgumentError("invalid length","length",t);const e=new Uint8Array(t);return ko.getRandomValues(e),(0,l.arrayify)(e)}function xo(t){for(let e=(t=t.slice()).length-1;e>0;e--){const r=Math.floor(Math.random()*(e+1)),n=t[e];t[e]=t[r],t[r]=n}return t}ko&&ko.getRandomValues||(Ao.warn("WARNING: Missing strong random number source"),ko={getRandomValues:function(t){return Ao.throwError("no secure random source avaialble",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"crypto.getRandomValues"})}});var _o={};!function(t){function e(t){return parseInt(t)===t}function r(t){if(!e(t.length))return!1;for(var r=0;r<t.length;r++)if(!e(t[r])||t[r]<0||t[r]>255)return!1;return!0}function n(t,n){if(t.buffer&&ArrayBuffer.isView(t)&&"Uint8Array"===t.name)return n&&(t=t.slice?t.slice():Array.prototype.slice.call(t)),t;if(Array.isArray(t)){if(!r(t))throw new Error("Array contains invalid value: "+t);return new Uint8Array(t)}if(e(t.length)&&r(t))return new Uint8Array(t);throw new Error("unsupported array-like object")}function i(t){return new Uint8Array(t)}function o(t,e,r,n,i){null==n&&null==i||(t=t.slice?t.slice(n,i):Array.prototype.slice.call(t,n,i)),e.set(t,r)}var s,a={toBytes:function(t){var e=[],r=0;for(t=encodeURI(t);r<t.length;){var i=t.charCodeAt(r++);37===i?(e.push(parseInt(t.substr(r,2),16)),r+=2):e.push(i)}return n(e)},fromBytes:function(t){for(var e=[],r=0;r<t.length;){var n=t[r];n<128?(e.push(String.fromCharCode(n)),r++):n>191&&n<224?(e.push(String.fromCharCode((31&n)<<6|63&t[r+1])),r+=2):(e.push(String.fromCharCode((15&n)<<12|(63&t[r+1])<<6|63&t[r+2])),r+=3)}return e.join("")}},u=(s="0123456789abcdef",{toBytes:function(t){for(var e=[],r=0;r<t.length;r+=2)e.push(parseInt(t.substr(r,2),16));return e},fromBytes:function(t){for(var e=[],r=0;r<t.length;r++){var n=t[r];e.push(s[(240&n)>>4]+s[15&n])}return e.join("")}}),l={16:10,24:12,32:14},c=[1,2,4,8,16,32,64,128,27,54,108,216,171,77,154,47,94,188,99,198,151,53,106,212,179,125,250,239,197,145],h=[99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22],f=[82,9,106,213,48,54,165,56,191,64,163,158,129,243,215,251,124,227,57,130,155,47,255,135,52,142,67,68,196,222,233,203,84,123,148,50,166,194,35,61,238,76,149,11,66,250,195,78,8,46,161,102,40,217,36,178,118,91,162,73,109,139,209,37,114,248,246,100,134,104,152,22,212,164,92,204,93,101,182,146,108,112,72,80,253,237,185,218,94,21,70,87,167,141,157,132,144,216,171,0,140,188,211,10,247,228,88,5,184,179,69,6,208,44,30,143,202,63,15,2,193,175,189,3,1,19,138,107,58,145,17,65,79,103,220,234,151,242,207,206,240,180,230,115,150,172,116,34,231,173,53,133,226,249,55,232,28,117,223,110,71,241,26,113,29,41,197,137,111,183,98,14,170,24,190,27,252,86,62,75,198,210,121,32,154,219,192,254,120,205,90,244,31,221,168,51,136,7,199,49,177,18,16,89,39,128,236,95,96,81,127,169,25,181,74,13,45,229,122,159,147,201,156,239,160,224,59,77,174,42,245,176,200,235,187,60,131,83,153,97,23,43,4,126,186,119,214,38,225,105,20,99,85,33,12,125],d=[3328402341,4168907908,4000806809,4135287693,4294111757,3597364157,3731845041,2445657428,1613770832,33620227,3462883241,1445669757,3892248089,3050821474,1303096294,3967186586,2412431941,528646813,2311702848,4202528135,4026202645,2992200171,2387036105,4226871307,1101901292,3017069671,1604494077,1169141738,597466303,1403299063,3832705686,2613100635,1974974402,3791519004,1033081774,1277568618,1815492186,2118074177,4126668546,2211236943,1748251740,1369810420,3521504564,4193382664,3799085459,2883115123,1647391059,706024767,134480908,2512897874,1176707941,2646852446,806885416,932615841,168101135,798661301,235341577,605164086,461406363,3756188221,3454790438,1311188841,2142417613,3933566367,302582043,495158174,1479289972,874125870,907746093,3698224818,3025820398,1537253627,2756858614,1983593293,3084310113,2108928974,1378429307,3722699582,1580150641,327451799,2790478837,3117535592,0,3253595436,1075847264,3825007647,2041688520,3059440621,3563743934,2378943302,1740553945,1916352843,2487896798,2555137236,2958579944,2244988746,3151024235,3320835882,1336584933,3992714006,2252555205,2588757463,1714631509,293963156,2319795663,3925473552,67240454,4269768577,2689618160,2017213508,631218106,1269344483,2723238387,1571005438,2151694528,93294474,1066570413,563977660,1882732616,4059428100,1673313503,2008463041,2950355573,1109467491,537923632,3858759450,4260623118,3218264685,2177748300,403442708,638784309,3287084079,3193921505,899127202,2286175436,773265209,2479146071,1437050866,4236148354,2050833735,3362022572,3126681063,840505643,3866325909,3227541664,427917720,2655997905,2749160575,1143087718,1412049534,999329963,193497219,2353415882,3354324521,1807268051,672404540,2816401017,3160301282,369822493,2916866934,3688947771,1681011286,1949973070,336202270,2454276571,201721354,1210328172,3093060836,2680341085,3184776046,1135389935,3294782118,965841320,831886756,3554993207,4068047243,3588745010,2345191491,1849112409,3664604599,26054028,2983581028,2622377682,1235855840,3630984372,2891339514,4092916743,3488279077,3395642799,4101667470,1202630377,268961816,1874508501,4034427016,1243948399,1546530418,941366308,1470539505,1941222599,2546386513,3421038627,2715671932,3899946140,1042226977,2521517021,1639824860,227249030,260737669,3765465232,2084453954,1907733956,3429263018,2420656344,100860677,4160157185,470683154,3261161891,1781871967,2924959737,1773779408,394692241,2579611992,974986535,664706745,3655459128,3958962195,731420851,571543859,3530123707,2849626480,126783113,865375399,765172662,1008606754,361203602,3387549984,2278477385,2857719295,1344809080,2782912378,59542671,1503764984,160008576,437062935,1707065306,3622233649,2218934982,3496503480,2185314755,697932208,1512910199,504303377,2075177163,2824099068,1841019862,739644986],p=[2781242211,2230877308,2582542199,2381740923,234877682,3184946027,2984144751,1418839493,1348481072,50462977,2848876391,2102799147,434634494,1656084439,3863849899,2599188086,1167051466,2636087938,1082771913,2281340285,368048890,3954334041,3381544775,201060592,3963727277,1739838676,4250903202,3930435503,3206782108,4149453988,2531553906,1536934080,3262494647,484572669,2923271059,1783375398,1517041206,1098792767,49674231,1334037708,1550332980,4098991525,886171109,150598129,2481090929,1940642008,1398944049,1059722517,201851908,1385547719,1699095331,1587397571,674240536,2704774806,252314885,3039795866,151914247,908333586,2602270848,1038082786,651029483,1766729511,3447698098,2682942837,454166793,2652734339,1951935532,775166490,758520603,3000790638,4004797018,4217086112,4137964114,1299594043,1639438038,3464344499,2068982057,1054729187,1901997871,2534638724,4121318227,1757008337,0,750906861,1614815264,535035132,3363418545,3988151131,3201591914,1183697867,3647454910,1265776953,3734260298,3566750796,3903871064,1250283471,1807470800,717615087,3847203498,384695291,3313910595,3617213773,1432761139,2484176261,3481945413,283769337,100925954,2180939647,4037038160,1148730428,3123027871,3813386408,4087501137,4267549603,3229630528,2315620239,2906624658,3156319645,1215313976,82966005,3747855548,3245848246,1974459098,1665278241,807407632,451280895,251524083,1841287890,1283575245,337120268,891687699,801369324,3787349855,2721421207,3431482436,959321879,1469301956,4065699751,2197585534,1199193405,2898814052,3887750493,724703513,2514908019,2696962144,2551808385,3516813135,2141445340,1715741218,2119445034,2872807568,2198571144,3398190662,700968686,3547052216,1009259540,2041044702,3803995742,487983883,1991105499,1004265696,1449407026,1316239930,504629770,3683797321,168560134,1816667172,3837287516,1570751170,1857934291,4014189740,2797888098,2822345105,2754712981,936633572,2347923833,852879335,1133234376,1500395319,3084545389,2348912013,1689376213,3533459022,3762923945,3034082412,4205598294,133428468,634383082,2949277029,2398386810,3913789102,403703816,3580869306,2297460856,1867130149,1918643758,607656988,4049053350,3346248884,1368901318,600565992,2090982877,2632479860,557719327,3717614411,3697393085,2249034635,2232388234,2430627952,1115438654,3295786421,2865522278,3633334344,84280067,33027830,303828494,2747425121,1600795957,4188952407,3496589753,2434238086,1486471617,658119965,3106381470,953803233,334231800,3005978776,857870609,3151128937,1890179545,2298973838,2805175444,3056442267,574365214,2450884487,550103529,1233637070,4289353045,2018519080,2057691103,2399374476,4166623649,2148108681,387583245,3664101311,836232934,3330556482,3100665960,3280093505,2955516313,2002398509,287182607,3413881008,4238890068,3597515707,975967766],g=[1671808611,2089089148,2006576759,2072901243,4061003762,1807603307,1873927791,3310653893,810573872,16974337,1739181671,729634347,4263110654,3613570519,2883997099,1989864566,3393556426,2191335298,3376449993,2106063485,4195741690,1508618841,1204391495,4027317232,2917941677,3563566036,2734514082,2951366063,2629772188,2767672228,1922491506,3227229120,3082974647,4246528509,2477669779,644500518,911895606,1061256767,4144166391,3427763148,878471220,2784252325,3845444069,4043897329,1905517169,3631459288,827548209,356461077,67897348,3344078279,593839651,3277757891,405286936,2527147926,84871685,2595565466,118033927,305538066,2157648768,3795705826,3945188843,661212711,2999812018,1973414517,152769033,2208177539,745822252,439235610,455947803,1857215598,1525593178,2700827552,1391895634,994932283,3596728278,3016654259,695947817,3812548067,795958831,2224493444,1408607827,3513301457,0,3979133421,543178784,4229948412,2982705585,1542305371,1790891114,3410398667,3201918910,961245753,1256100938,1289001036,1491644504,3477767631,3496721360,4012557807,2867154858,4212583931,1137018435,1305975373,861234739,2241073541,1171229253,4178635257,33948674,2139225727,1357946960,1011120188,2679776671,2833468328,1374921297,2751356323,1086357568,2408187279,2460827538,2646352285,944271416,4110742005,3168756668,3066132406,3665145818,560153121,271589392,4279952895,4077846003,3530407890,3444343245,202643468,322250259,3962553324,1608629855,2543990167,1154254916,389623319,3294073796,2817676711,2122513534,1028094525,1689045092,1575467613,422261273,1939203699,1621147744,2174228865,1339137615,3699352540,577127458,712922154,2427141008,2290289544,1187679302,3995715566,3100863416,339486740,3732514782,1591917662,186455563,3681988059,3762019296,844522546,978220090,169743370,1239126601,101321734,611076132,1558493276,3260915650,3547250131,2901361580,1655096418,2443721105,2510565781,3828863972,2039214713,3878868455,3359869896,928607799,1840765549,2374762893,3580146133,1322425422,2850048425,1823791212,1459268694,4094161908,3928346602,1706019429,2056189050,2934523822,135794696,3134549946,2022240376,628050469,779246638,472135708,2800834470,3032970164,3327236038,3894660072,3715932637,1956440180,522272287,1272813131,3185336765,2340818315,2323976074,1888542832,1044544574,3049550261,1722469478,1222152264,50660867,4127324150,236067854,1638122081,895445557,1475980887,3117443513,2257655686,3243809217,489110045,2662934430,3778599393,4162055160,2561878936,288563729,1773916777,3648039385,2391345038,2493985684,2612407707,505560094,2274497927,3911240169,3460925390,1442818645,678973480,3749357023,2358182796,2717407649,2306869641,219617805,3218761151,3862026214,1120306242,1756942440,1103331905,2578459033,762796589,252780047,2966125488,1425844308,3151392187,372911126],m=[1667474886,2088535288,2004326894,2071694838,4075949567,1802223062,1869591006,3318043793,808472672,16843522,1734846926,724270422,4278065639,3621216949,2880169549,1987484396,3402253711,2189597983,3385409673,2105378810,4210693615,1499065266,1195886990,4042263547,2913856577,3570689971,2728590687,2947541573,2627518243,2762274643,1920112356,3233831835,3082273397,4261223649,2475929149,640051788,909531756,1061110142,4160160501,3435941763,875846760,2779116625,3857003729,4059105529,1903268834,3638064043,825316194,353713962,67374088,3351728789,589522246,3284360861,404236336,2526454071,84217610,2593830191,117901582,303183396,2155911963,3806477791,3958056653,656894286,2998062463,1970642922,151591698,2206440989,741110872,437923380,454765878,1852748508,1515908788,2694904667,1381168804,993742198,3604373943,3014905469,690584402,3823320797,791638366,2223281939,1398011302,3520161977,0,3991743681,538992704,4244381667,2981218425,1532751286,1785380564,3419096717,3200178535,960056178,1246420628,1280103576,1482221744,3486468741,3503319995,4025428677,2863326543,4227536621,1128514950,1296947098,859002214,2240123921,1162203018,4193849577,33687044,2139062782,1347481760,1010582648,2678045221,2829640523,1364325282,2745433693,1077985408,2408548869,2459086143,2644360225,943212656,4126475505,3166494563,3065430391,3671750063,555836226,269496352,4294908645,4092792573,3537006015,3452783745,202118168,320025894,3974901699,1600119230,2543297077,1145359496,387397934,3301201811,2812801621,2122220284,1027426170,1684319432,1566435258,421079858,1936954854,1616945344,2172753945,1330631070,3705438115,572679748,707427924,2425400123,2290647819,1179044492,4008585671,3099120491,336870440,3739122087,1583276732,185277718,3688593069,3772791771,842159716,976899700,168435220,1229577106,101059084,606366792,1549591736,3267517855,3553849021,2897014595,1650632388,2442242105,2509612081,3840161747,2038008818,3890688725,3368567691,926374254,1835907034,2374863873,3587531953,1313788572,2846482505,1819063512,1448540844,4109633523,3941213647,1701162954,2054852340,2930698567,134748176,3132806511,2021165296,623210314,774795868,471606328,2795958615,3031746419,3334885783,3907527627,3722280097,1953799400,522133822,1263263126,3183336545,2341176845,2324333839,1886425312,1044267644,3048588401,1718004428,1212733584,50529542,4143317495,235803164,1633788866,892690282,1465383342,3115962473,2256965911,3250673817,488449850,2661202215,3789633753,4177007595,2560144171,286339874,1768537042,3654906025,2391705863,2492770099,2610673197,505291324,2273808917,3924369609,3469625735,1431699370,673740880,3755965093,2358021891,2711746649,2307489801,218961690,3217021541,3873845719,1111672452,1751693520,1094828930,2576986153,757954394,252645662,2964376443,1414855848,3149649517,370555436],y=[1374988112,2118214995,437757123,975658646,1001089995,530400753,2902087851,1273168787,540080725,2910219766,2295101073,4110568485,1340463100,3307916247,641025152,3043140495,3736164937,632953703,1172967064,1576976609,3274667266,2169303058,2370213795,1809054150,59727847,361929877,3211623147,2505202138,3569255213,1484005843,1239443753,2395588676,1975683434,4102977912,2572697195,666464733,3202437046,4035489047,3374361702,2110667444,1675577880,3843699074,2538681184,1649639237,2976151520,3144396420,4269907996,4178062228,1883793496,2403728665,2497604743,1383856311,2876494627,1917518562,3810496343,1716890410,3001755655,800440835,2261089178,3543599269,807962610,599762354,33778362,3977675356,2328828971,2809771154,4077384432,1315562145,1708848333,101039829,3509871135,3299278474,875451293,2733856160,92987698,2767645557,193195065,1080094634,1584504582,3178106961,1042385657,2531067453,3711829422,1306967366,2438237621,1908694277,67556463,1615861247,429456164,3602770327,2302690252,1742315127,2968011453,126454664,3877198648,2043211483,2709260871,2084704233,4169408201,0,159417987,841739592,504459436,1817866830,4245618683,260388950,1034867998,908933415,168810852,1750902305,2606453969,607530554,202008497,2472011535,3035535058,463180190,2160117071,1641816226,1517767529,470948374,3801332234,3231722213,1008918595,303765277,235474187,4069246893,766945465,337553864,1475418501,2943682380,4003061179,2743034109,4144047775,1551037884,1147550661,1543208500,2336434550,3408119516,3069049960,3102011747,3610369226,1113818384,328671808,2227573024,2236228733,3535486456,2935566865,3341394285,496906059,3702665459,226906860,2009195472,733156972,2842737049,294930682,1206477858,2835123396,2700099354,1451044056,573804783,2269728455,3644379585,2362090238,2564033334,2801107407,2776292904,3669462566,1068351396,742039012,1350078989,1784663195,1417561698,4136440770,2430122216,775550814,2193862645,2673705150,1775276924,1876241833,3475313331,3366754619,270040487,3902563182,3678124923,3441850377,1851332852,3969562369,2203032232,3868552805,2868897406,566021896,4011190502,3135740889,1248802510,3936291284,699432150,832877231,708780849,3332740144,899835584,1951317047,4236429990,3767586992,866637845,4043610186,1106041591,2144161806,395441711,1984812685,1139781709,3433712980,3835036895,2664543715,1282050075,3240894392,1181045119,2640243204,25965917,4203181171,4211818798,3009879386,2463879762,3910161971,1842759443,2597806476,933301370,1509430414,3943906441,3467192302,3076639029,3776767469,2051518780,2631065433,1441952575,404016761,1942435775,1408749034,1610459739,3745345300,2017778566,3400528769,3110650942,941896748,3265478751,371049330,3168937228,675039627,4279080257,967311729,135050206,3635733660,1683407248,2076935265,3576870512,1215061108,3501741890],v=[1347548327,1400783205,3273267108,2520393566,3409685355,4045380933,2880240216,2471224067,1428173050,4138563181,2441661558,636813900,4233094615,3620022987,2149987652,2411029155,1239331162,1730525723,2554718734,3781033664,46346101,310463728,2743944855,3328955385,3875770207,2501218972,3955191162,3667219033,768917123,3545789473,692707433,1150208456,1786102409,2029293177,1805211710,3710368113,3065962831,401639597,1724457132,3028143674,409198410,2196052529,1620529459,1164071807,3769721975,2226875310,486441376,2499348523,1483753576,428819965,2274680428,3075636216,598438867,3799141122,1474502543,711349675,129166120,53458370,2592523643,2782082824,4063242375,2988687269,3120694122,1559041666,730517276,2460449204,4042459122,2706270690,3446004468,3573941694,533804130,2328143614,2637442643,2695033685,839224033,1973745387,957055980,2856345839,106852767,1371368976,4181598602,1033297158,2933734917,1179510461,3046200461,91341917,1862534868,4284502037,605657339,2547432937,3431546947,2003294622,3182487618,2282195339,954669403,3682191598,1201765386,3917234703,3388507166,0,2198438022,1211247597,2887651696,1315723890,4227665663,1443857720,507358933,657861945,1678381017,560487590,3516619604,975451694,2970356327,261314535,3535072918,2652609425,1333838021,2724322336,1767536459,370938394,182621114,3854606378,1128014560,487725847,185469197,2918353863,3106780840,3356761769,2237133081,1286567175,3152976349,4255350624,2683765030,3160175349,3309594171,878443390,1988838185,3704300486,1756818940,1673061617,3403100636,272786309,1075025698,545572369,2105887268,4174560061,296679730,1841768865,1260232239,4091327024,3960309330,3497509347,1814803222,2578018489,4195456072,575138148,3299409036,446754879,3629546796,4011996048,3347532110,3252238545,4270639778,915985419,3483825537,681933534,651868046,2755636671,3828103837,223377554,2607439820,1649704518,3270937875,3901806776,1580087799,4118987695,3198115200,2087309459,2842678573,3016697106,1003007129,2802849917,1860738147,2077965243,164439672,4100872472,32283319,2827177882,1709610350,2125135846,136428751,3874428392,3652904859,3460984630,3572145929,3593056380,2939266226,824852259,818324884,3224740454,930369212,2801566410,2967507152,355706840,1257309336,4148292826,243256656,790073846,2373340630,1296297904,1422699085,3756299780,3818836405,457992840,3099667487,2135319889,77422314,1560382517,1945798516,788204353,1521706781,1385356242,870912086,325965383,2358957921,2050466060,2388260884,2313884476,4006521127,901210569,3990953189,1014646705,1503449823,1062597235,2031621326,3212035895,3931371469,1533017514,350174575,2256028891,2177544179,1052338372,741876788,1606591296,1914052035,213705253,2334669897,1107234197,1899603969,3725069491,2631447780,2422494913,1635502980,1893020342,1950903388,1120974935],w=[2807058932,1699970625,2764249623,1586903591,1808481195,1173430173,1487645946,59984867,4199882800,1844882806,1989249228,1277555970,3623636965,3419915562,1149249077,2744104290,1514790577,459744698,244860394,3235995134,1963115311,4027744588,2544078150,4190530515,1608975247,2627016082,2062270317,1507497298,2200818878,567498868,1764313568,3359936201,2305455554,2037970062,1047239e3,1910319033,1337376481,2904027272,2892417312,984907214,1243112415,830661914,861968209,2135253587,2011214180,2927934315,2686254721,731183368,1750626376,4246310725,1820824798,4172763771,3542330227,48394827,2404901663,2871682645,671593195,3254988725,2073724613,145085239,2280796200,2779915199,1790575107,2187128086,472615631,3029510009,4075877127,3802222185,4107101658,3201631749,1646252340,4270507174,1402811438,1436590835,3778151818,3950355702,3963161475,4020912224,2667994737,273792366,2331590177,104699613,95345982,3175501286,2377486676,1560637892,3564045318,369057872,4213447064,3919042237,1137477952,2658625497,1119727848,2340947849,1530455833,4007360968,172466556,266959938,516552836,0,2256734592,3980931627,1890328081,1917742170,4294704398,945164165,3575528878,958871085,3647212047,2787207260,1423022939,775562294,1739656202,3876557655,2530391278,2443058075,3310321856,547512796,1265195639,437656594,3121275539,719700128,3762502690,387781147,218828297,3350065803,2830708150,2848461854,428169201,122466165,3720081049,1627235199,648017665,4122762354,1002783846,2117360635,695634755,3336358691,4234721005,4049844452,3704280881,2232435299,574624663,287343814,612205898,1039717051,840019705,2708326185,793451934,821288114,1391201670,3822090177,376187827,3113855344,1224348052,1679968233,2361698556,1058709744,752375421,2431590963,1321699145,3519142200,2734591178,188127444,2177869557,3727205754,2384911031,3215212461,2648976442,2450346104,3432737375,1180849278,331544205,3102249176,4150144569,2952102595,2159976285,2474404304,766078933,313773861,2570832044,2108100632,1668212892,3145456443,2013908262,418672217,3070356634,2594734927,1852171925,3867060991,3473416636,3907448597,2614737639,919489135,164948639,2094410160,2997825956,590424639,2486224549,1723872674,3157750862,3399941250,3501252752,3625268135,2555048196,3673637356,1343127501,4130281361,3599595085,2957853679,1297403050,81781910,3051593425,2283490410,532201772,1367295589,3926170974,895287692,1953757831,1093597963,492483431,3528626907,1446242576,1192455638,1636604631,209336225,344873464,1015671571,669961897,3375740769,3857572124,2973530695,3747192018,1933530610,3464042516,935293895,3454686199,2858115069,1863638845,3683022916,4085369519,3292445032,875313188,1080017571,3279033885,621591778,1233856572,2504130317,24197544,3017672716,3835484340,3247465558,2220981195,3060847922,1551124588,1463996600],b=[4104605777,1097159550,396673818,660510266,2875968315,2638606623,4200115116,3808662347,821712160,1986918061,3430322568,38544885,3856137295,718002117,893681702,1654886325,2975484382,3122358053,3926825029,4274053469,796197571,1290801793,1184342925,3556361835,2405426947,2459735317,1836772287,1381620373,3196267988,1948373848,3764988233,3385345166,3263785589,2390325492,1480485785,3111247143,3780097726,2293045232,548169417,3459953789,3746175075,439452389,1362321559,1400849762,1685577905,1806599355,2174754046,137073913,1214797936,1174215055,3731654548,2079897426,1943217067,1258480242,529487843,1437280870,3945269170,3049390895,3313212038,923313619,679998e3,3215307299,57326082,377642221,3474729866,2041877159,133361907,1776460110,3673476453,96392454,878845905,2801699524,777231668,4082475170,2330014213,4142626212,2213296395,1626319424,1906247262,1846563261,562755902,3708173718,1040559837,3871163981,1418573201,3294430577,114585348,1343618912,2566595609,3186202582,1078185097,3651041127,3896688048,2307622919,425408743,3371096953,2081048481,1108339068,2216610296,0,2156299017,736970802,292596766,1517440620,251657213,2235061775,2933202493,758720310,265905162,1554391400,1532285339,908999204,174567692,1474760595,4002861748,2610011675,3234156416,3693126241,2001430874,303699484,2478443234,2687165888,585122620,454499602,151849742,2345119218,3064510765,514443284,4044981591,1963412655,2581445614,2137062819,19308535,1928707164,1715193156,4219352155,1126790795,600235211,3992742070,3841024952,836553431,1669664834,2535604243,3323011204,1243905413,3141400786,4180808110,698445255,2653899549,2989552604,2253581325,3252932727,3004591147,1891211689,2487810577,3915653703,4237083816,4030667424,2100090966,865136418,1229899655,953270745,3399679628,3557504664,4118925222,2061379749,3079546586,2915017791,983426092,2022837584,1607244650,2118541908,2366882550,3635996816,972512814,3283088770,1568718495,3499326569,3576539503,621982671,2895723464,410887952,2623762152,1002142683,645401037,1494807662,2595684844,1335535747,2507040230,4293295786,3167684641,367585007,3885750714,1865862730,2668221674,2960971305,2763173681,1059270954,2777952454,2724642869,1320957812,2194319100,2429595872,2815956275,77089521,3973773121,3444575871,2448830231,1305906550,4021308739,2857194700,2516901860,3518358430,1787304780,740276417,1699839814,1592394909,2352307457,2272556026,188821243,1729977011,3687994002,274084841,3594982253,3613494426,2701949495,4162096729,322734571,2837966542,1640576439,484830689,1202797690,3537852828,4067639125,349075736,3342319475,4157467219,4255800159,1030690015,1155237496,2951971274,1757691577,607398968,2738905026,499347990,3794078908,1011452712,227885567,2818666809,213114376,3034881240,1455525988,3414450555,850817237,1817998408,3092726480],A=[0,235474187,470948374,303765277,941896748,908933415,607530554,708780849,1883793496,2118214995,1817866830,1649639237,1215061108,1181045119,1417561698,1517767529,3767586992,4003061179,4236429990,4069246893,3635733660,3602770327,3299278474,3400528769,2430122216,2664543715,2362090238,2193862645,2835123396,2801107407,3035535058,3135740889,3678124923,3576870512,3341394285,3374361702,3810496343,3977675356,4279080257,4043610186,2876494627,2776292904,3076639029,3110650942,2472011535,2640243204,2403728665,2169303058,1001089995,899835584,666464733,699432150,59727847,226906860,530400753,294930682,1273168787,1172967064,1475418501,1509430414,1942435775,2110667444,1876241833,1641816226,2910219766,2743034109,2976151520,3211623147,2505202138,2606453969,2302690252,2269728455,3711829422,3543599269,3240894392,3475313331,3843699074,3943906441,4178062228,4144047775,1306967366,1139781709,1374988112,1610459739,1975683434,2076935265,1775276924,1742315127,1034867998,866637845,566021896,800440835,92987698,193195065,429456164,395441711,1984812685,2017778566,1784663195,1683407248,1315562145,1080094634,1383856311,1551037884,101039829,135050206,437757123,337553864,1042385657,807962610,573804783,742039012,2531067453,2564033334,2328828971,2227573024,2935566865,2700099354,3001755655,3168937228,3868552805,3902563182,4203181171,4102977912,3736164937,3501741890,3265478751,3433712980,1106041591,1340463100,1576976609,1408749034,2043211483,2009195472,1708848333,1809054150,832877231,1068351396,766945465,599762354,159417987,126454664,361929877,463180190,2709260871,2943682380,3178106961,3009879386,2572697195,2538681184,2236228733,2336434550,3509871135,3745345300,3441850377,3274667266,3910161971,3877198648,4110568485,4211818798,2597806476,2497604743,2261089178,2295101073,2733856160,2902087851,3202437046,2968011453,3936291284,3835036895,4136440770,4169408201,3535486456,3702665459,3467192302,3231722213,2051518780,1951317047,1716890410,1750902305,1113818384,1282050075,1584504582,1350078989,168810852,67556463,371049330,404016761,841739592,1008918595,775550814,540080725,3969562369,3801332234,4035489047,4269907996,3569255213,3669462566,3366754619,3332740144,2631065433,2463879762,2160117071,2395588676,2767645557,2868897406,3102011747,3069049960,202008497,33778362,270040487,504459436,875451293,975658646,675039627,641025152,2084704233,1917518562,1615861247,1851332852,1147550661,1248802510,1484005843,1451044056,933301370,967311729,733156972,632953703,260388950,25965917,328671808,496906059,1206477858,1239443753,1543208500,1441952575,2144161806,1908694277,1675577880,1842759443,3610369226,3644379585,3408119516,3307916247,4011190502,3776767469,4077384432,4245618683,2809771154,2842737049,3144396420,3043140495,2673705150,2438237621,2203032232,2370213795],E=[0,185469197,370938394,487725847,741876788,657861945,975451694,824852259,1483753576,1400783205,1315723890,1164071807,1950903388,2135319889,1649704518,1767536459,2967507152,3152976349,2801566410,2918353863,2631447780,2547432937,2328143614,2177544179,3901806776,3818836405,4270639778,4118987695,3299409036,3483825537,3535072918,3652904859,2077965243,1893020342,1841768865,1724457132,1474502543,1559041666,1107234197,1257309336,598438867,681933534,901210569,1052338372,261314535,77422314,428819965,310463728,3409685355,3224740454,3710368113,3593056380,3875770207,3960309330,4045380933,4195456072,2471224067,2554718734,2237133081,2388260884,3212035895,3028143674,2842678573,2724322336,4138563181,4255350624,3769721975,3955191162,3667219033,3516619604,3431546947,3347532110,2933734917,2782082824,3099667487,3016697106,2196052529,2313884476,2499348523,2683765030,1179510461,1296297904,1347548327,1533017514,1786102409,1635502980,2087309459,2003294622,507358933,355706840,136428751,53458370,839224033,957055980,605657339,790073846,2373340630,2256028891,2607439820,2422494913,2706270690,2856345839,3075636216,3160175349,3573941694,3725069491,3273267108,3356761769,4181598602,4063242375,4011996048,3828103837,1033297158,915985419,730517276,545572369,296679730,446754879,129166120,213705253,1709610350,1860738147,1945798516,2029293177,1239331162,1120974935,1606591296,1422699085,4148292826,4233094615,3781033664,3931371469,3682191598,3497509347,3446004468,3328955385,2939266226,2755636671,3106780840,2988687269,2198438022,2282195339,2501218972,2652609425,1201765386,1286567175,1371368976,1521706781,1805211710,1620529459,2105887268,1988838185,533804130,350174575,164439672,46346101,870912086,954669403,636813900,788204353,2358957921,2274680428,2592523643,2441661558,2695033685,2880240216,3065962831,3182487618,3572145929,3756299780,3270937875,3388507166,4174560061,4091327024,4006521127,3854606378,1014646705,930369212,711349675,560487590,272786309,457992840,106852767,223377554,1678381017,1862534868,1914052035,2031621326,1211247597,1128014560,1580087799,1428173050,32283319,182621114,401639597,486441376,768917123,651868046,1003007129,818324884,1503449823,1385356242,1333838021,1150208456,1973745387,2125135846,1673061617,1756818940,2970356327,3120694122,2802849917,2887651696,2637442643,2520393566,2334669897,2149987652,3917234703,3799141122,4284502037,4100872472,3309594171,3460984630,3545789473,3629546796,2050466060,1899603969,1814803222,1730525723,1443857720,1560382517,1075025698,1260232239,575138148,692707433,878443390,1062597235,243256656,91341917,409198410,325965383,3403100636,3252238545,3704300486,3620022987,3874428392,3990953189,4042459122,4227665663,2460449204,2578018489,2226875310,2411029155,3198115200,3046200461,2827177882,2743944855],k=[0,218828297,437656594,387781147,875313188,958871085,775562294,590424639,1750626376,1699970625,1917742170,2135253587,1551124588,1367295589,1180849278,1265195639,3501252752,3720081049,3399941250,3350065803,3835484340,3919042237,4270507174,4085369519,3102249176,3051593425,2734591178,2952102595,2361698556,2177869557,2530391278,2614737639,3145456443,3060847922,2708326185,2892417312,2404901663,2187128086,2504130317,2555048196,3542330227,3727205754,3375740769,3292445032,3876557655,3926170974,4246310725,4027744588,1808481195,1723872674,1910319033,2094410160,1608975247,1391201670,1173430173,1224348052,59984867,244860394,428169201,344873464,935293895,984907214,766078933,547512796,1844882806,1627235199,2011214180,2062270317,1507497298,1423022939,1137477952,1321699145,95345982,145085239,532201772,313773861,830661914,1015671571,731183368,648017665,3175501286,2957853679,2807058932,2858115069,2305455554,2220981195,2474404304,2658625497,3575528878,3625268135,3473416636,3254988725,3778151818,3963161475,4213447064,4130281361,3599595085,3683022916,3432737375,3247465558,3802222185,4020912224,4172763771,4122762354,3201631749,3017672716,2764249623,2848461854,2331590177,2280796200,2431590963,2648976442,104699613,188127444,472615631,287343814,840019705,1058709744,671593195,621591778,1852171925,1668212892,1953757831,2037970062,1514790577,1463996600,1080017571,1297403050,3673637356,3623636965,3235995134,3454686199,4007360968,3822090177,4107101658,4190530515,2997825956,3215212461,2830708150,2779915199,2256734592,2340947849,2627016082,2443058075,172466556,122466165,273792366,492483431,1047239e3,861968209,612205898,695634755,1646252340,1863638845,2013908262,1963115311,1446242576,1530455833,1277555970,1093597963,1636604631,1820824798,2073724613,1989249228,1436590835,1487645946,1337376481,1119727848,164948639,81781910,331544205,516552836,1039717051,821288114,669961897,719700128,2973530695,3157750862,2871682645,2787207260,2232435299,2283490410,2667994737,2450346104,3647212047,3564045318,3279033885,3464042516,3980931627,3762502690,4150144569,4199882800,3070356634,3121275539,2904027272,2686254721,2200818878,2384911031,2570832044,2486224549,3747192018,3528626907,3310321856,3359936201,3950355702,3867060991,4049844452,4234721005,1739656202,1790575107,2108100632,1890328081,1402811438,1586903591,1233856572,1149249077,266959938,48394827,369057872,418672217,1002783846,919489135,567498868,752375421,209336225,24197544,376187827,459744698,945164165,895287692,574624663,793451934,1679968233,1764313568,2117360635,1933530610,1343127501,1560637892,1243112415,1192455638,3704280881,3519142200,3336358691,3419915562,3907448597,3857572124,4075877127,4294704398,3029510009,3113855344,2927934315,2744104290,2159976285,2377486676,2594734927,2544078150],S=[0,151849742,303699484,454499602,607398968,758720310,908999204,1059270954,1214797936,1097159550,1517440620,1400849762,1817998408,1699839814,2118541908,2001430874,2429595872,2581445614,2194319100,2345119218,3034881240,3186202582,2801699524,2951971274,3635996816,3518358430,3399679628,3283088770,4237083816,4118925222,4002861748,3885750714,1002142683,850817237,698445255,548169417,529487843,377642221,227885567,77089521,1943217067,2061379749,1640576439,1757691577,1474760595,1592394909,1174215055,1290801793,2875968315,2724642869,3111247143,2960971305,2405426947,2253581325,2638606623,2487810577,3808662347,3926825029,4044981591,4162096729,3342319475,3459953789,3576539503,3693126241,1986918061,2137062819,1685577905,1836772287,1381620373,1532285339,1078185097,1229899655,1040559837,923313619,740276417,621982671,439452389,322734571,137073913,19308535,3871163981,4021308739,4104605777,4255800159,3263785589,3414450555,3499326569,3651041127,2933202493,2815956275,3167684641,3049390895,2330014213,2213296395,2566595609,2448830231,1305906550,1155237496,1607244650,1455525988,1776460110,1626319424,2079897426,1928707164,96392454,213114376,396673818,514443284,562755902,679998e3,865136418,983426092,3708173718,3557504664,3474729866,3323011204,4180808110,4030667424,3945269170,3794078908,2507040230,2623762152,2272556026,2390325492,2975484382,3092726480,2738905026,2857194700,3973773121,3856137295,4274053469,4157467219,3371096953,3252932727,3673476453,3556361835,2763173681,2915017791,3064510765,3215307299,2156299017,2307622919,2459735317,2610011675,2081048481,1963412655,1846563261,1729977011,1480485785,1362321559,1243905413,1126790795,878845905,1030690015,645401037,796197571,274084841,425408743,38544885,188821243,3613494426,3731654548,3313212038,3430322568,4082475170,4200115116,3780097726,3896688048,2668221674,2516901860,2366882550,2216610296,3141400786,2989552604,2837966542,2687165888,1202797690,1320957812,1437280870,1554391400,1669664834,1787304780,1906247262,2022837584,265905162,114585348,499347990,349075736,736970802,585122620,972512814,821712160,2595684844,2478443234,2293045232,2174754046,3196267988,3079546586,2895723464,2777952454,3537852828,3687994002,3234156416,3385345166,4142626212,4293295786,3841024952,3992742070,174567692,57326082,410887952,292596766,777231668,660510266,1011452712,893681702,1108339068,1258480242,1343618912,1494807662,1715193156,1865862730,1948373848,2100090966,2701949495,2818666809,3004591147,3122358053,2235061775,2352307457,2535604243,2653899549,3915653703,3764988233,4219352155,4067639125,3444575871,3294430577,3746175075,3594982253,836553431,953270745,600235211,718002117,367585007,484830689,133361907,251657213,2041877159,1891211689,1806599355,1654886325,1568718495,1418573201,1335535747,1184342925];function x(t){for(var e=[],r=0;r<t.length;r+=4)e.push(t[r]<<24|t[r+1]<<16|t[r+2]<<8|t[r+3]);return e}var _=function(t){if(!(this instanceof _))throw Error("AES must be instanitated with `new`");Object.defineProperty(this,"key",{value:n(t,!0)}),this._prepare()};_.prototype._prepare=function(){var t=l[this.key.length];if(null==t)throw new Error("invalid key size (must be 16, 24 or 32 bytes)");this._Ke=[],this._Kd=[];for(var e=0;e<=t;e++)this._Ke.push([0,0,0,0]),this._Kd.push([0,0,0,0]);var r,n=4*(t+1),i=this.key.length/4,o=x(this.key);for(e=0;e<i;e++)r=e>>2,this._Ke[r][e%4]=o[e],this._Kd[t-r][e%4]=o[e];for(var s,a=0,u=i;u<n;){if(s=o[i-1],o[0]^=h[s>>16&255]<<24^h[s>>8&255]<<16^h[255&s]<<8^h[s>>24&255]^c[a]<<24,a+=1,8!=i)for(e=1;e<i;e++)o[e]^=o[e-1];else{for(e=1;e<i/2;e++)o[e]^=o[e-1];s=o[i/2-1],o[i/2]^=h[255&s]^h[s>>8&255]<<8^h[s>>16&255]<<16^h[s>>24&255]<<24;for(e=i/2+1;e<i;e++)o[e]^=o[e-1]}for(e=0;e<i&&u<n;)f=u>>2,d=u%4,this._Ke[f][d]=o[e],this._Kd[t-f][d]=o[e++],u++}for(var f=1;f<t;f++)for(var d=0;d<4;d++)s=this._Kd[f][d],this._Kd[f][d]=A[s>>24&255]^E[s>>16&255]^k[s>>8&255]^S[255&s]},_.prototype.encrypt=function(t){if(16!=t.length)throw new Error("invalid plaintext size (must be 16 bytes)");for(var e=this._Ke.length-1,r=[0,0,0,0],n=x(t),o=0;o<4;o++)n[o]^=this._Ke[0][o];for(var s=1;s<e;s++){for(o=0;o<4;o++)r[o]=d[n[o]>>24&255]^p[n[(o+1)%4]>>16&255]^g[n[(o+2)%4]>>8&255]^m[255&n[(o+3)%4]]^this._Ke[s][o];n=r.slice()}var a,u=i(16);for(o=0;o<4;o++)a=this._Ke[e][o],u[4*o]=255&(h[n[o]>>24&255]^a>>24),u[4*o+1]=255&(h[n[(o+1)%4]>>16&255]^a>>16),u[4*o+2]=255&(h[n[(o+2)%4]>>8&255]^a>>8),u[4*o+3]=255&(h[255&n[(o+3)%4]]^a);return u},_.prototype.decrypt=function(t){if(16!=t.length)throw new Error("invalid ciphertext size (must be 16 bytes)");for(var e=this._Kd.length-1,r=[0,0,0,0],n=x(t),o=0;o<4;o++)n[o]^=this._Kd[0][o];for(var s=1;s<e;s++){for(o=0;o<4;o++)r[o]=y[n[o]>>24&255]^v[n[(o+3)%4]>>16&255]^w[n[(o+2)%4]>>8&255]^b[255&n[(o+1)%4]]^this._Kd[s][o];n=r.slice()}var a,u=i(16);for(o=0;o<4;o++)a=this._Kd[e][o],u[4*o]=255&(f[n[o]>>24&255]^a>>24),u[4*o+1]=255&(f[n[(o+3)%4]>>16&255]^a>>16),u[4*o+2]=255&(f[n[(o+2)%4]>>8&255]^a>>8),u[4*o+3]=255&(f[255&n[(o+1)%4]]^a);return u};var P=function(t){if(!(this instanceof P))throw Error("AES must be instanitated with `new`");this.description="Electronic Code Block",this.name="ecb",this._aes=new _(t)};P.prototype.encrypt=function(t){if((t=n(t)).length%16!=0)throw new Error("invalid plaintext size (must be multiple of 16 bytes)");for(var e=i(t.length),r=i(16),s=0;s<t.length;s+=16)o(t,r,0,s,s+16),o(r=this._aes.encrypt(r),e,s);return e},P.prototype.decrypt=function(t){if((t=n(t)).length%16!=0)throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");for(var e=i(t.length),r=i(16),s=0;s<t.length;s+=16)o(t,r,0,s,s+16),o(r=this._aes.decrypt(r),e,s);return e};var N=function(t,e){if(!(this instanceof N))throw Error("AES must be instanitated with `new`");if(this.description="Cipher Block Chaining",this.name="cbc",e){if(16!=e.length)throw new Error("invalid initialation vector size (must be 16 bytes)")}else e=i(16);this._lastCipherblock=n(e,!0),this._aes=new _(t)};N.prototype.encrypt=function(t){if((t=n(t)).length%16!=0)throw new Error("invalid plaintext size (must be multiple of 16 bytes)");for(var e=i(t.length),r=i(16),s=0;s<t.length;s+=16){o(t,r,0,s,s+16);for(var a=0;a<16;a++)r[a]^=this._lastCipherblock[a];this._lastCipherblock=this._aes.encrypt(r),o(this._lastCipherblock,e,s)}return e},N.prototype.decrypt=function(t){if((t=n(t)).length%16!=0)throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");for(var e=i(t.length),r=i(16),s=0;s<t.length;s+=16){o(t,r,0,s,s+16),r=this._aes.decrypt(r);for(var a=0;a<16;a++)e[s+a]=r[a]^this._lastCipherblock[a];o(t,this._lastCipherblock,0,s,s+16)}return e};var R=function(t,e,r){if(!(this instanceof R))throw Error("AES must be instanitated with `new`");if(this.description="Cipher Feedback",this.name="cfb",e){if(16!=e.length)throw new Error("invalid initialation vector size (must be 16 size)")}else e=i(16);r||(r=1),this.segmentSize=r,this._shiftRegister=n(e,!0),this._aes=new _(t)};R.prototype.encrypt=function(t){if(t.length%this.segmentSize!=0)throw new Error("invalid plaintext size (must be segmentSize bytes)");for(var e,r=n(t,!0),i=0;i<r.length;i+=this.segmentSize){e=this._aes.encrypt(this._shiftRegister);for(var s=0;s<this.segmentSize;s++)r[i+s]^=e[s];o(this._shiftRegister,this._shiftRegister,0,this.segmentSize),o(r,this._shiftRegister,16-this.segmentSize,i,i+this.segmentSize)}return r},R.prototype.decrypt=function(t){if(t.length%this.segmentSize!=0)throw new Error("invalid ciphertext size (must be segmentSize bytes)");for(var e,r=n(t,!0),i=0;i<r.length;i+=this.segmentSize){e=this._aes.encrypt(this._shiftRegister);for(var s=0;s<this.segmentSize;s++)r[i+s]^=e[s];o(this._shiftRegister,this._shiftRegister,0,this.segmentSize),o(t,this._shiftRegister,16-this.segmentSize,i,i+this.segmentSize)}return r};var C=function(t,e){if(!(this instanceof C))throw Error("AES must be instanitated with `new`");if(this.description="Output Feedback",this.name="ofb",e){if(16!=e.length)throw new Error("invalid initialation vector size (must be 16 bytes)")}else e=i(16);this._lastPrecipher=n(e,!0),this._lastPrecipherIndex=16,this._aes=new _(t)};C.prototype.encrypt=function(t){for(var e=n(t,!0),r=0;r<e.length;r++)16===this._lastPrecipherIndex&&(this._lastPrecipher=this._aes.encrypt(this._lastPrecipher),this._lastPrecipherIndex=0),e[r]^=this._lastPrecipher[this._lastPrecipherIndex++];return e},C.prototype.decrypt=C.prototype.encrypt;var M=function(t){if(!(this instanceof M))throw Error("Counter must be instanitated with `new`");0===t||t||(t=1),"number"==typeof t?(this._counter=i(16),this.setValue(t)):this.setBytes(t)};M.prototype.setValue=function(t){if("number"!=typeof t||parseInt(t)!=t)throw new Error("invalid counter value (must be an integer)");for(var e=15;e>=0;--e)this._counter[e]=t%256,t>>=8},M.prototype.setBytes=function(t){if(16!=(t=n(t,!0)).length)throw new Error("invalid counter bytes size (must be 16 bytes)");this._counter=t},M.prototype.increment=function(){for(var t=15;t>=0;t--){if(255!==this._counter[t]){this._counter[t]++;break}this._counter[t]=0}};var I=function(t,e){if(!(this instanceof I))throw Error("AES must be instanitated with `new`");this.description="Counter",this.name="ctr",e instanceof M||(e=new M(e)),this._counter=e,this._remainingCounter=null,this._remainingCounterIndex=16,this._aes=new _(t)};I.prototype.encrypt=function(t){for(var e=n(t,!0),r=0;r<e.length;r++)16===this._remainingCounterIndex&&(this._remainingCounter=this._aes.encrypt(this._counter._counter),this._remainingCounterIndex=0,this._counter.increment()),e[r]^=this._remainingCounter[this._remainingCounterIndex++];return e},I.prototype.decrypt=I.prototype.encrypt,_o={AES:_,Counter:M,ModeOfOperation:{ecb:P,cbc:N,cfb:R,ofb:C,ctr:I},utils:{hex:u,utf8:a},padding:{pkcs7:{pad:function(t){var e=16-(t=n(t,!0)).length%16,r=i(t.length+e);o(t,r);for(var s=t.length;s<r.length;s++)r[s]=e;return r},strip:function(t){if((t=n(t,!0)).length<16)throw new Error("PKCS#7 invalid length");var e=t[t.length-1];if(e>16)throw new Error("PKCS#7 padding byte out of range");for(var r=t.length-e,s=0;s<e;s++)if(t[r+s]!==e)throw new Error("PKCS#7 invalid padding byte");var a=i(r);return o(t,a,0,0,r),a}}},_arrayTest:{coerceArray:n,createArray:i,copyArray:o}}}();l=o("3Yhqu"),c=o("2rINa");const Po="json-wallets/5.7.0";l=o("3Yhqu");function No(t){return"string"==typeof t&&"0x"!==t.substring(0,2)&&(t="0x"+t),(0,l.arrayify)(t)}function Ro(t,e){for(t=String(t);t.length<e;)t="0"+t;return t}function Co(t){return"string"==typeof t?Me(t,Se.NFKC):(0,l.arrayify)(t)}function Mo(t,e){let r=t;const n=e.toLowerCase().split("/");for(let t=0;t<n.length;t++){let e=null;for(const i in r)if(i.toLowerCase()===n[t]){e=r[i];break}if(null===e)return null;r=e}return r}function Io(t){const e=(0,l.arrayify)(t);e[6]=15&e[6]|64,e[8]=63&e[8]|128;const r=(0,l.hexlify)(e);return[r.substring(2,10),r.substring(10,14),r.substring(14,18),r.substring(18,22),r.substring(22,34)].join("-")}const To=new(0,c.Logger)(Po);class Oo extends L.Description{isCrowdsaleAccount(t){return!(!t||!t._isCrowdsaleAccount)}}function Bo(t,e){const n=JSON.parse(t);e=Co(e);const i=Wt(Mo(n,"ethaddr")),o=No(Mo(n,"encseed"));o&&o.length%16==0||To.throwArgumentError("invalid encseed","json",t);const s=(0,l.arrayify)(Zi(e,e,2e3,32,"sha256")).slice(0,16),a=o.slice(0,16),u=o.slice(16),c=new(r(_o).ModeOfOperation.cbc)(s,a),h=r(_o).padding.pkcs7.strip((0,l.arrayify)(c.decrypt(u)));let f="";for(let t=0;t<h.length;t++)f+=String.fromCharCode(h[t]);const d=Gt(Me(f));return new Oo({_isCrowdsaleAccount:!0,address:i,privateKey:d})}function Lo(t){let e=null;try{e=JSON.parse(t)}catch(t){return!1}return e.encseed&&e.ethaddr}function Fo(t){let e=null;try{e=JSON.parse(t)}catch(t){return!1}return!(!e.version||parseInt(e.version)!==e.version||3!==parseInt(e.version))}function Do(t){if(Lo(t))try{return Wt(JSON.parse(t).ethaddr)}catch(t){return null}if(Fo(t))try{return Wt(JSON.parse(t).address)}catch(t){return null}return null}var Uo={};t(Uo,"decryptSync",(function(){return Yo}),(function(t){return Yo=t})),t(Uo,"decrypt",(function(){return Qo}),(function(t){return Qo=t})),t(Uo,"encrypt",(function(){return Zo}),(function(t){return Zo=t}));var Go={};!function(t){const e=2147483647;function r(t){const e=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]);let r=1779033703,n=3144134277,i=1013904242,o=2773480762,s=1359893119,a=2600822924,u=528734635,l=1541459225;const c=new Uint32Array(64);function h(t){let h=0,f=t.length;for(;f>=64;){let d,p,g,m,y,v=r,w=n,b=i,A=o,E=s,k=a,S=u,x=l;for(p=0;p<16;p++)g=h+4*p,c[p]=(255&t[g])<<24|(255&t[g+1])<<16|(255&t[g+2])<<8|255&t[g+3];for(p=16;p<64;p++)d=c[p-2],m=(d>>>17|d<<15)^(d>>>19|d<<13)^d>>>10,d=c[p-15],y=(d>>>7|d<<25)^(d>>>18|d<<14)^d>>>3,c[p]=(m+c[p-7]|0)+(y+c[p-16]|0)|0;for(p=0;p<64;p++)m=(((E>>>6|E<<26)^(E>>>11|E<<21)^(E>>>25|E<<7))+(E&k^~E&S)|0)+(x+(e[p]+c[p]|0)|0)|0,y=((v>>>2|v<<30)^(v>>>13|v<<19)^(v>>>22|v<<10))+(v&w^v&b^w&b)|0,x=S,S=k,k=E,E=A+m|0,A=b,b=w,w=v,v=m+y|0;r=r+v|0,n=n+w|0,i=i+b|0,o=o+A|0,s=s+E|0,a=a+k|0,u=u+S|0,l=l+x|0,h+=64,f-=64}}h(t);let f,d=t.length%64,p=t.length/536870912|0,g=t.length<<3,m=d<56?56:120,y=t.slice(t.length-d,t.length);for(y.push(128),f=d+1;f<m;f++)y.push(0);return y.push(p>>>24&255),y.push(p>>>16&255),y.push(p>>>8&255),y.push(p>>>0&255),y.push(g>>>24&255),y.push(g>>>16&255),y.push(g>>>8&255),y.push(g>>>0&255),h(y),[r>>>24&255,r>>>16&255,r>>>8&255,r>>>0&255,n>>>24&255,n>>>16&255,n>>>8&255,n>>>0&255,i>>>24&255,i>>>16&255,i>>>8&255,i>>>0&255,o>>>24&255,o>>>16&255,o>>>8&255,o>>>0&255,s>>>24&255,s>>>16&255,s>>>8&255,s>>>0&255,a>>>24&255,a>>>16&255,a>>>8&255,a>>>0&255,u>>>24&255,u>>>16&255,u>>>8&255,u>>>0&255,l>>>24&255,l>>>16&255,l>>>8&255,l>>>0&255]}function n(t,e,n){t=t.length<=64?t:r(t);const i=64+e.length+4,o=new Array(i),s=new Array(64);let a,u=[];for(a=0;a<64;a++)o[a]=54;for(a=0;a<t.length;a++)o[a]^=t[a];for(a=0;a<e.length;a++)o[64+a]=e[a];for(a=i-4;a<i;a++)o[a]=0;for(a=0;a<64;a++)s[a]=92;for(a=0;a<t.length;a++)s[a]^=t[a];function l(){for(let t=i-1;t>=i-4;t--){if(o[t]++,o[t]<=255)return;o[t]=0}}for(;n>=32;)l(),u=u.concat(r(s.concat(r(o)))),n-=32;return n>0&&(l(),u=u.concat(r(s.concat(r(o))).slice(0,n))),u}function i(t,e,r,n,i){let o;for(u(t,16*(2*r-1),i,0,16),o=0;o<2*r;o++)a(t,16*o,i,16),s(i,n),u(i,0,t,e+16*o,16);for(o=0;o<r;o++)u(t,e+32*o,t,16*o,16);for(o=0;o<r;o++)u(t,e+16*(2*o+1),t,16*(o+r),16)}function o(t,e){return t<<e|t>>>32-e}function s(t,e){u(t,0,e,0,16);for(let t=8;t>0;t-=2)e[4]^=o(e[0]+e[12],7),e[8]^=o(e[4]+e[0],9),e[12]^=o(e[8]+e[4],13),e[0]^=o(e[12]+e[8],18),e[9]^=o(e[5]+e[1],7),e[13]^=o(e[9]+e[5],9),e[1]^=o(e[13]+e[9],13),e[5]^=o(e[1]+e[13],18),e[14]^=o(e[10]+e[6],7),e[2]^=o(e[14]+e[10],9),e[6]^=o(e[2]+e[14],13),e[10]^=o(e[6]+e[2],18),e[3]^=o(e[15]+e[11],7),e[7]^=o(e[3]+e[15],9),e[11]^=o(e[7]+e[3],13),e[15]^=o(e[11]+e[7],18),e[1]^=o(e[0]+e[3],7),e[2]^=o(e[1]+e[0],9),e[3]^=o(e[2]+e[1],13),e[0]^=o(e[3]+e[2],18),e[6]^=o(e[5]+e[4],7),e[7]^=o(e[6]+e[5],9),e[4]^=o(e[7]+e[6],13),e[5]^=o(e[4]+e[7],18),e[11]^=o(e[10]+e[9],7),e[8]^=o(e[11]+e[10],9),e[9]^=o(e[8]+e[11],13),e[10]^=o(e[9]+e[8],18),e[12]^=o(e[15]+e[14],7),e[13]^=o(e[12]+e[15],9),e[14]^=o(e[13]+e[12],13),e[15]^=o(e[14]+e[13],18);for(let r=0;r<16;++r)t[r]+=e[r]}function a(t,e,r,n){for(let i=0;i<n;i++)r[i]^=t[e+i]}function u(t,e,r,n,i){for(;i--;)r[n++]=t[e++]}function l(t){if(!t||"number"!=typeof t.length)return!1;for(let e=0;e<t.length;e++){const r=t[e];if("number"!=typeof r||r%1||r<0||r>=256)return!1}return!0}function c(t,e){if("number"!=typeof t||t%1)throw new Error("invalid "+e);return t}function h(t,r,o,s,h,f,d){if(o=c(o,"N"),s=c(s,"r"),h=c(h,"p"),f=c(f,"dkLen"),0===o||0!=(o&o-1))throw new Error("N must be power of 2");if(o>e/128/s)throw new Error("N too large");if(s>e/128/h)throw new Error("r too large");if(!l(t))throw new Error("password must be an array or buffer");if(t=Array.prototype.slice.call(t),!l(r))throw new Error("salt must be an array or buffer");r=Array.prototype.slice.call(r);let p=n(t,r,128*h*s);const g=new Uint32Array(32*h*s);for(let t=0;t<g.length;t++){const e=4*t;g[t]=(255&p[e+3])<<24|(255&p[e+2])<<16|(255&p[e+1])<<8|(255&p[e+0])<<0}const m=new Uint32Array(64*s),y=new Uint32Array(32*s*o),v=32*s,w=new Uint32Array(16),b=new Uint32Array(16),A=h*o*2;let E,k,S=0,x=null,_=!1,P=0,N=0;const R=d?parseInt(1e3/s):4294967295,C="undefined"!=typeof setImmediate?setImmediate:setTimeout,M=function(){if(_)return d(new Error("cancelled"),S/A);let e;switch(P){case 0:k=32*N*s,u(g,k,m,0,v),P=1,E=0;case 1:e=o-E,e>R&&(e=R);for(let t=0;t<e;t++)u(m,0,y,(E+t)*v,v),i(m,v,s,w,b);if(E+=e,S+=e,d){const t=parseInt(1e3*S/A);if(t!==x){if(_=d(null,S/A),_)break;x=t}}if(E<o)break;E=0,P=2;case 2:e=o-E,e>R&&(e=R);for(let t=0;t<e;t++){const t=m[16*(2*s-1)]&o-1;a(y,t*v,m,v),i(m,v,s,w,b)}if(E+=e,S+=e,d){const t=parseInt(1e3*S/A);if(t!==x){if(_=d(null,S/A),_)break;x=t}}if(E<o)break;if(u(m,0,g,k,v),N++,N<h){P=0;break}p=[];for(let t=0;t<g.length;t++)p.push(g[t]>>0&255),p.push(g[t]>>8&255),p.push(g[t]>>16&255),p.push(g[t]>>24&255);const r=n(t,p,f);return d&&d(null,1,r),r}d&&C(M)};if(!d)for(;;){const t=M();if(null!=t)return t}M()}const f={scrypt:function(t,e,r,n,i,o,s){return new Promise((function(a,u){let l=0;s&&s(0),h(t,e,r,n,i,o,(function(t,e,r){if(t)u(t);else if(r)s&&1!==l&&s(1),a(new Uint8Array(r));else if(s&&e!==l)return l=e,s(e)}))}))},syncScrypt:function(t,e,r,n,i,o){return new Uint8Array(h(t,e,r,n,i,o))}};void 0!==Go?Go=f:"function"==typeof define&&define.amd?define(f):t&&(t.scrypt&&(t._scrypt=t.scrypt),t.scrypt=f)}(Go);l=o("3Yhqu"),c=o("2rINa");var qo=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const jo=new(0,c.Logger)(Po);function zo(t){return null!=t&&t.mnemonic&&t.mnemonic.phrase}class Ho extends L.Description{isKeystoreAccount(t){return!(!t||!t._isKeystoreAccount)}}function Ko(t,e){const n=No(Mo(t,"crypto/ciphertext"));if((0,l.hexlify)(Gt((0,l.concat)([e.slice(16,32),n]))).substring(2)!==Mo(t,"crypto/mac").toLowerCase())throw new Error("invalid password");const i=function(t,e,n){if("aes-128-ctr"===Mo(t,"crypto/cipher")){const i=No(Mo(t,"crypto/cipherparams/iv")),o=new(r(_o).Counter)(i),s=new(r(_o).ModeOfOperation.ctr)(e,o);return(0,l.arrayify)(s.decrypt(n))}return null}(t,e.slice(0,16),n);i||jo.throwError("unsupported cipher",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"decrypt"});const o=e.slice(32,64),s=di(i);if(t.address){let e=t.address.toLowerCase();if("0x"!==e.substring(0,2)&&(e="0x"+e),Wt(e)!==s)throw new Error("address mismatch")}const a={_isKeystoreAccount:!0,address:s,privateKey:(0,l.hexlify)(i)};if("0.1"===Mo(t,"x-ethers/version")){const e=No(Mo(t,"x-ethers/mnemonicCiphertext")),n=No(Mo(t,"x-ethers/mnemonicCounter")),i=new(r(_o).Counter)(n),s=new(r(_o).ModeOfOperation.ctr)(o,i),u=Mo(t,"x-ethers/path")||po,h=Mo(t,"x-ethers/locale")||"en",f=(0,l.arrayify)(s.decrypt(e));try{const t=vo(f,h),e=go.fromMnemonic(t,null,h).derivePath(u);if(e.privateKey!=a.privateKey)throw new Error("mnemonic mismatch");a.mnemonic=e.mnemonic}catch(t){if(t.code!==c.Logger.errors.INVALID_ARGUMENT||"wordlist"!==t.argument)throw t}}return new Ho(a)}function Jo(t,e,r,n,i){return(0,l.arrayify)(Zi(t,e,r,n,i))}function Vo(t,e,r,n,i){return Promise.resolve(Jo(t,e,r,n,i))}function Wo(t,e,r,n,i){const o=Co(e),s=Mo(t,"crypto/kdf");if(s&&"string"==typeof s){const e=function(t,e){return jo.throwArgumentError("invalid key-derivation function parameters",t,e)};if("scrypt"===s.toLowerCase()){const r=No(Mo(t,"crypto/kdfparams/salt")),a=parseInt(Mo(t,"crypto/kdfparams/n")),u=parseInt(Mo(t,"crypto/kdfparams/r")),l=parseInt(Mo(t,"crypto/kdfparams/p"));a&&u&&l||e("kdf",s),0!=(a&a-1)&&e("N",a);const c=parseInt(Mo(t,"crypto/kdfparams/dklen"));return 32!==c&&e("dklen",c),n(o,r,a,u,l,64,i)}if("pbkdf2"===s.toLowerCase()){const n=No(Mo(t,"crypto/kdfparams/salt"));let i=null;const s=Mo(t,"crypto/kdfparams/prf");"hmac-sha256"===s?i="sha256":"hmac-sha512"===s?i="sha512":e("prf",s);const a=parseInt(Mo(t,"crypto/kdfparams/c")),u=parseInt(Mo(t,"crypto/kdfparams/dklen"));return 32!==u&&e("dklen",u),r(o,n,a,u,i)}}return jo.throwArgumentError("unsupported key-derivation function","kdf",s)}function Yo(t,e){const n=JSON.parse(t);return Ko(n,Wo(n,e,Jo,r(Go).syncScrypt))}function Qo(t,e,n){return qo(this,void 0,void 0,(function*(){const i=JSON.parse(t);return Ko(i,yield Wo(i,e,Vo,r(Go).scrypt,n))}))}function Zo(t,e,n,i){try{if(Wt(t.address)!==di(t.privateKey))throw new Error("address/privateKey mismatch");if(zo(t)){const e=t.mnemonic;if(go.fromMnemonic(e.phrase,null,e.locale).derivePath(e.path||po).privateKey!=t.privateKey)throw new Error("mnemonic mismatch")}}catch(t){return Promise.reject(t)}"function"!=typeof n||i||(i=n,n={}),n||(n={});const o=(0,l.arrayify)(t.privateKey),s=Co(e);let a=null,u=null,c=null;if(zo(t)){const e=t.mnemonic;a=(0,l.arrayify)(yo(e.phrase,e.locale||"en")),u=e.path||po,c=e.locale||"en"}let h=n.client;h||(h="ethers.js");let f=null;f=n.salt?(0,l.arrayify)(n.salt):So(32);let d=null;if(n.iv){if(d=(0,l.arrayify)(n.iv),16!==d.length)throw new Error("invalid iv")}else d=So(16);let p=null;if(n.uuid){if(p=(0,l.arrayify)(n.uuid),16!==p.length)throw new Error("invalid uuid")}else p=So(16);let g=131072,m=8,y=1;return n.scrypt&&(n.scrypt.N&&(g=n.scrypt.N),n.scrypt.r&&(m=n.scrypt.r),n.scrypt.p&&(y=n.scrypt.p)),r(Go).scrypt(s,f,g,m,y,64,i).then((e=>{const n=(e=(0,l.arrayify)(e)).slice(0,16),i=e.slice(16,32),s=e.slice(32,64),v=new(r(_o).Counter)(d),w=new(r(_o).ModeOfOperation.ctr)(n,v),b=(0,l.arrayify)(w.encrypt(o)),A=Gt((0,l.concat)([i,b])),E={address:t.address.substring(2).toLowerCase(),id:Io(p),version:3,crypto:{cipher:"aes-128-ctr",cipherparams:{iv:(0,l.hexlify)(d).substring(2)},ciphertext:(0,l.hexlify)(b).substring(2),kdf:"scrypt",kdfparams:{salt:(0,l.hexlify)(f).substring(2),n:g,dklen:32,p:y,r:m},mac:A.substring(2)}};if(a){const t=So(16),e=new(r(_o).Counter)(t),n=new(r(_o).ModeOfOperation.ctr)(s,e),i=(0,l.arrayify)(n.encrypt(a)),o=new Date,f=o.getUTCFullYear()+"-"+Ro(o.getUTCMonth()+1,2)+"-"+Ro(o.getUTCDate(),2)+"T"+Ro(o.getUTCHours(),2)+"-"+Ro(o.getUTCMinutes(),2)+"-"+Ro(o.getUTCSeconds(),2)+".0Z";E["x-ethers"]={client:h,gethFilename:"UTC--"+f+"--"+E.address,mnemonicCounter:(0,l.hexlify)(t).substring(2),mnemonicCiphertext:(0,l.hexlify)(i).substring(2),path:u,locale:c,version:"0.1"}}return JSON.stringify(E)}))}function Xo(t,e,r){if(Lo(t)){r&&r(0);const n=Bo(t,e);return r&&r(1),Promise.resolve(n)}return Fo(t)?(0,Uo.decrypt)(t,e,r):Promise.reject(new Error("invalid JSON wallet"))}function $o(t,e){if(Lo(t))return Bo(t,e);if(Fo(t))return(0,Uo.decryptSync)(t,e);throw new Error("invalid JSON wallet")}c=o("2rINa");var ts=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const es=new(0,c.Logger)("wallet/5.7.0");class rs extends ln.Signer{get mnemonic(){return this._mnemonic()}get privateKey(){return this._signingKey().privateKey}get publicKey(){return this._signingKey().publicKey}getAddress(){return Promise.resolve(this.address)}connect(t){return new rs(this,t)}signTransaction(t){return(0,L.resolveProperties)(t).then((e=>{null!=e.from&&(Wt(e.from)!==this.address&&es.throwArgumentError("transaction from address mismatch","transaction.from",t.from),delete e.from);const r=this._signingKey().signDigest(Gt(Ai(e)));return Ai(e,r)}))}signMessage(t){return ts(this,void 0,void 0,(function*(){return(0,l.joinSignature)(this._signingKey().signDigest(Mr(t)))}))}_signTypedData(t,e,r){return ts(this,void 0,void 0,(function*(){const n=yield Ir.TypedDataEncoder.resolveNames(t,e,r,(t=>(null==this.provider&&es.throwError("cannot resolve ENS names without a provider",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"resolveName",value:t}),this.provider.resolveName(t))));return(0,l.joinSignature)(this._signingKey().signDigest(Ir.TypedDataEncoder.hash(n.domain,e,n.value)))}))}encrypt(t,e,r){if("function"!=typeof e||r||(r=e,e={}),r&&"function"!=typeof r)throw new Error("invalid callback");return e||(e={}),(0,Uo.encrypt)(this,t,e,r)}static createRandom(t){let e=So(16);t||(t={}),t.extraEntropy&&(e=(0,l.arrayify)((0,l.hexDataSlice)(Gt((0,l.concat)([e,t.extraEntropy])),0,16)));const r=vo(e,t.locale);return rs.fromMnemonic(r,t.path,t.locale)}static fromEncryptedJson(t,e,r){return Xo(t,e,r).then((t=>new rs(t)))}static fromEncryptedJsonSync(t,e){return new rs($o(t,e))}static fromMnemonic(t,e,r){return e||(e=po),new rs(go.fromMnemonic(t,null,r).derivePath(e))}constructor(t,e){if(super(),null!=(r=t)&&(0,l.isHexString)(r.privateKey,32)&&null!=r.address){const e=new ni(t.privateKey);if((0,L.defineReadOnly)(this,"_signingKey",(()=>e)),(0,L.defineReadOnly)(this,"address",di(this.publicKey)),this.address!==Wt(t.address)&&es.throwArgumentError("privateKey/address mismatch","privateKey","[REDACTED]"),function(t){const e=t.mnemonic;return e&&e.phrase}(t)){const e=t.mnemonic;(0,L.defineReadOnly)(this,"_mnemonic",(()=>({phrase:e.phrase,path:e.path||po,locale:e.locale||"en"})));const r=this.mnemonic;di(go.fromMnemonic(r.phrase,null,r.locale).derivePath(r.path).privateKey)!==this.address&&es.throwArgumentError("mnemonic/address mismatch","privateKey","[REDACTED]")}else(0,L.defineReadOnly)(this,"_mnemonic",(()=>null))}else{if(ni.isSigningKey(t))"secp256k1"!==t.curve&&es.throwArgumentError("unsupported curve; must be secp256k1","privateKey","[REDACTED]"),(0,L.defineReadOnly)(this,"_signingKey",(()=>t));else{"string"==typeof t&&t.match(/^[0-9a-f]*$/i)&&64===t.length&&(t="0x"+t);const e=new ni(t);(0,L.defineReadOnly)(this,"_signingKey",(()=>e))}(0,L.defineReadOnly)(this,"_mnemonic",(()=>null)),(0,L.defineReadOnly)(this,"address",di(this.publicKey))}var r;e&&!nn.Provider.isProvider(e)&&es.throwArgumentError("invalid provider","provider",e),(0,L.defineReadOnly)(this,"provider",e||null)}}function ns(t,e){return pi(Mr(t),e)}function is(t,e,r,n){return pi(Ir.TypedDataEncoder.hash(t,e,r),n)}var os={};t(os,"getDefaultProvider",(function(){return Fu})),t(os,"Provider",(function(){return nn.Provider})),t(os,"BaseProvider",(function(){return ps.BaseProvider})),t(os,"Resolver",(function(){return ps.Resolver})),t(os,"UrlJsonRpcProvider",(function(){return Ta.UrlJsonRpcProvider})),t(os,"FallbackProvider",(function(){return ou.FallbackProvider})),t(os,"AlchemyProvider",(function(){return qa})),t(os,"AlchemyWebSocketProvider",(function(){return Ga})),t(os,"AnkrProvider",(function(){return Ka})),t(os,"CloudflareProvider",(function(){return Ja.CloudflareProvider})),t(os,"EtherscanProvider",(function(){return Qa.EtherscanProvider})),t(os,"InfuraProvider",(function(){return xu})),t(os,"InfuraWebSocketProvider",(function(){return Su})),t(os,"JsonRpcProvider",(function(){return pa.JsonRpcProvider})),t(os,"JsonRpcBatchProvider",(function(){return _u})),t(os,"NodesmithProvider",(function(){return Nu})),t(os,"PocketProvider",(function(){return Mu})),t(os,"StaticJsonRpcProvider",(function(){return Ta.StaticJsonRpcProvider})),t(os,"Web3Provider",(function(){return Bu})),t(os,"WebSocketProvider",(function(){return da.WebSocketProvider})),t(os,"IpcProvider",(function(){return Au})),t(os,"JsonRpcSigner",(function(){return pa.JsonRpcSigner})),t(os,"getNetwork",(function(){return ds})),t(os,"isCommunityResource",(function(){return Gs})),t(os,"isCommunityResourcable",(function(){return Us})),t(os,"showThrottleMessage",(function(){return js})),t(os,"Formatter",(function(){return Ds}));const ss=new(0,(c=o("2rINa")).Logger)("networks/5.7.0");function as(t){const e=function(e,r){null==r&&(r={});const n=[];if(e.InfuraProvider&&"-"!==r.infura)try{n.push(new e.InfuraProvider(t,r.infura))}catch(t){}if(e.EtherscanProvider&&"-"!==r.etherscan)try{n.push(new e.EtherscanProvider(t,r.etherscan))}catch(t){}if(e.AlchemyProvider&&"-"!==r.alchemy)try{n.push(new e.AlchemyProvider(t,r.alchemy))}catch(t){}if(e.PocketProvider&&"-"!==r.pocket){const i=["goerli","ropsten","rinkeby"];try{const o=new e.PocketProvider(t,r.pocket);o.network&&-1===i.indexOf(o.network.name)&&n.push(o)}catch(t){}}if(e.CloudflareProvider&&"-"!==r.cloudflare)try{n.push(new e.CloudflareProvider(t))}catch(t){}if(e.AnkrProvider&&"-"!==r.ankr)try{const i=["ropsten"],o=new e.AnkrProvider(t,r.ankr);o.network&&-1===i.indexOf(o.network.name)&&n.push(o)}catch(t){}if(0===n.length)return null;if(e.FallbackProvider){let i=1;return null!=r.quorum?i=r.quorum:"homestead"===t&&(i=2),new e.FallbackProvider(n,i)}return n[0]};return e.renetwork=function(t){return as(t)},e}function us(t,e){const r=function(r,n){return r.JsonRpcProvider?new r.JsonRpcProvider(t,e):null};return r.renetwork=function(e){return us(t,e)},r}const ls={chainId:1,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"homestead",_defaultProvider:as("homestead")},cs={chainId:3,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"ropsten",_defaultProvider:as("ropsten")},hs={chainId:63,name:"classicMordor",_defaultProvider:us("https://www.ethercluster.com/mordor","classicMordor")},fs={unspecified:{chainId:0,name:"unspecified"},homestead:ls,mainnet:ls,morden:{chainId:2,name:"morden"},ropsten:cs,testnet:cs,rinkeby:{chainId:4,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"rinkeby",_defaultProvider:as("rinkeby")},kovan:{chainId:42,name:"kovan",_defaultProvider:as("kovan")},goerli:{chainId:5,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"goerli",_defaultProvider:as("goerli")},kintsugi:{chainId:1337702,name:"kintsugi"},classic:{chainId:61,name:"classic",_defaultProvider:us("https://www.ethercluster.com/etc","classic")},classicMorden:{chainId:62,name:"classicMorden"},classicMordor:hs,classicTestnet:hs,classicKotti:{chainId:6,name:"classicKotti",_defaultProvider:us("https://www.ethercluster.com/kotti","classicKotti")},xdai:{chainId:100,name:"xdai"},matic:{chainId:137,name:"matic",_defaultProvider:as("matic")},maticmum:{chainId:80001,name:"maticmum"},optimism:{chainId:10,name:"optimism",_defaultProvider:as("optimism")},"optimism-kovan":{chainId:69,name:"optimism-kovan"},"optimism-goerli":{chainId:420,name:"optimism-goerli"},arbitrum:{chainId:42161,name:"arbitrum"},"arbitrum-rinkeby":{chainId:421611,name:"arbitrum-rinkeby"},"arbitrum-goerli":{chainId:421613,name:"arbitrum-goerli"},bnb:{chainId:56,name:"bnb"},bnbt:{chainId:97,name:"bnbt"}};function ds(t){if(null==t)return null;if("number"==typeof t){for(const e in fs){const r=fs[e];if(r.chainId===t)return{name:r.name,chainId:r.chainId,ensAddress:r.ensAddress||null,_defaultProvider:r._defaultProvider||null}}return{chainId:t,name:"unknown"}}if("string"==typeof t){const e=fs[t];return null==e?null:{name:e.name,chainId:e.chainId,ensAddress:e.ensAddress,_defaultProvider:e._defaultProvider||null}}const e=fs[t.name];if(!e)return"number"!=typeof t.chainId&&ss.throwArgumentError("invalid network chainId","network",t),t;0!==t.chainId&&t.chainId!==e.chainId&&ss.throwArgumentError("network chainId mismatch","network",t);let r=t._defaultProvider||null;var n;return null==r&&e._defaultProvider&&(r=(n=e._defaultProvider)&&"function"==typeof n.renetwork?e._defaultProvider.renetwork(t):e._defaultProvider),{name:t.name,chainId:e.chainId,ensAddress:t.ensAddress||e.ensAddress||null,_defaultProvider:r}}var ps={};t(ps,"Resolver",(function(){return la}),(function(t){return la=t})),t(ps,"BaseProvider",(function(){return fa}),(function(t){return fa=t})),o("G6hN9");var gs=o("9fE0x"),ms=(l=o("3Yhqu"),{});t(ms,"_fetchData",(function(){return Ss}),(function(t){return Ss=t})),t(ms,"fetchJson",(function(){return xs}),(function(t){return xs=t})),t(ms,"poll",(function(){return _s}),(function(t){return _s=t})),o("G6hN9");gs=o("9fE0x"),l=o("3Yhqu"),c=o("2rINa");var ys={};t(ys,"getUrl",(function(){return ws}),(function(t){return ws=t}));l=o("3Yhqu");var vs=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};function ws(t,e){return vs(this,void 0,void 0,(function*(){null==e&&(e={});const r={method:e.method||"GET",headers:e.headers||{},body:e.body||void 0};if(!0!==e.skipFetchSetup&&(r.mode="cors",r.cache="no-cache",r.credentials="same-origin",r.redirect="follow",r.referrer="client"),null!=e.fetchOptions){const t=e.fetchOptions;t.mode&&(r.mode=t.mode),t.cache&&(r.cache=t.cache),t.credentials&&(r.credentials=t.credentials),t.redirect&&(r.redirect=t.redirect),t.referrer&&(r.referrer=t.referrer)}const n=yield fetch(t,r),i=yield n.arrayBuffer(),o={};return n.headers.forEach?n.headers.forEach(((t,e)=>{o[e.toLowerCase()]=t})):n.headers.keys().forEach((t=>{o[t.toLowerCase()]=n.headers.get(t)})),{headers:o,statusCode:n.status,statusMessage:n.statusText,body:(0,l.arrayify)(new Uint8Array(i))}}))}var bs=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const As=new(0,c.Logger)("web/5.7.0");function Es(t){return new Promise((e=>{setTimeout(e,t)}))}function ks(t,e){if(null==t)return null;if("string"==typeof t)return t;if((0,l.isBytesLike)(t)){if(e&&("text"===e.split("/")[0]||"application/json"===e.split(";")[0].trim()))try{return Be(t)}catch(t){}return(0,l.hexlify)(t)}return t}function Ss(t,e,r){const n="object"==typeof t&&null!=t.throttleLimit?t.throttleLimit:12;As.assertArgument(n>0&&n%1==0,"invalid connection throttle limit","connection.throttleLimit",n);const i="object"==typeof t?t.throttleCallback:null,o="object"==typeof t&&"number"==typeof t.throttleSlotInterval?t.throttleSlotInterval:100;As.assertArgument(o>0&&o%1==0,"invalid connection throttle slot interval","connection.throttleSlotInterval",o);const s="object"==typeof t&&!!t.errorPassThrough,a={};let u=null;const l={method:"GET"};let h=!1,f=12e4;if("string"==typeof t)u=t;else if("object"==typeof t){if(null!=t&&null!=t.url||As.throwArgumentError("missing URL","connection.url",t),u=t.url,"number"==typeof t.timeout&&t.timeout>0&&(f=t.timeout),t.headers)for(const e in t.headers)a[e.toLowerCase()]={key:e,value:String(t.headers[e])},["if-none-match","if-modified-since"].indexOf(e.toLowerCase())>=0&&(h=!0);if(l.allowGzip=!!t.allowGzip,null!=t.user&&null!=t.password){"https:"!==u.substring(0,6)&&!0!==t.allowInsecureAuthentication&&As.throwError("basic authentication requires a secure https url",c.Logger.errors.INVALID_ARGUMENT,{argument:"url",url:u,user:t.user,password:"[REDACTED]"});const e=t.user+":"+t.password;a.authorization={key:"Authorization",value:"Basic "+(0,gs.encode)(Me(e))}}null!=t.skipFetchSetup&&(l.skipFetchSetup=!!t.skipFetchSetup),null!=t.fetchOptions&&(l.fetchOptions=(0,L.shallowCopy)(t.fetchOptions))}const d=new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$","i"),p=u?u.match(d):null;if(p)try{const t={statusCode:200,statusMessage:"OK",headers:{"content-type":p[1]},body:(0,gs.decode)(p[2])};let e=t.body;return r&&(e=r(t.body,t)),Promise.resolve(e)}catch(t){As.throwError("processing response error",c.Logger.errors.SERVER_ERROR,{body:ks(p[1],p[2]),error:t,requestBody:null,requestMethod:"GET",url:u})}e&&(l.method="POST",l.body=e,null==a["content-type"]&&(a["content-type"]={key:"Content-Type",value:"application/octet-stream"}),null==a["content-length"]&&(a["content-length"]={key:"Content-Length",value:String(e.length)}));const g={};Object.keys(a).forEach((t=>{const e=a[t];g[e.key]=e.value})),l.headers=g;const m=function(){let t=null;return{promise:new Promise((function(e,r){f&&(t=setTimeout((()=>{null!=t&&(t=null,r(As.makeError("timeout",c.Logger.errors.TIMEOUT,{requestBody:ks(l.body,g["content-type"]),requestMethod:l.method,timeout:f,url:u})))}),f))})),cancel:function(){null!=t&&(clearTimeout(t),t=null)}}}(),y=function(){return bs(this,void 0,void 0,(function*(){for(let t=0;t<n;t++){let e=null;try{if(e=yield(0,ys.getUrl)(u,l),t<n)if(301===e.statusCode||302===e.statusCode){const t=e.headers.location||"";if("GET"===l.method&&t.match(/^https:/)){u=e.headers.location;continue}}else if(429===e.statusCode){let r=!0;if(i&&(r=yield i(t,u)),r){let r=0;const n=e.headers["retry-after"];r="string"==typeof n&&n.match(/^[1-9][0-9]*$/)?1e3*parseInt(n):o*parseInt(String(Math.random()*Math.pow(2,t))),yield Es(r);continue}}}catch(t){e=t.response,null==e&&(m.cancel(),As.throwError("missing response",c.Logger.errors.SERVER_ERROR,{requestBody:ks(l.body,g["content-type"]),requestMethod:l.method,serverError:t,url:u}))}let a=e.body;if(h&&304===e.statusCode?a=null:!s&&(e.statusCode<200||e.statusCode>=300)&&(m.cancel(),As.throwError("bad response",c.Logger.errors.SERVER_ERROR,{status:e.statusCode,headers:e.headers,body:ks(a,e.headers?e.headers["content-type"]:null),requestBody:ks(l.body,g["content-type"]),requestMethod:l.method,url:u})),r)try{const t=yield r(a,e);return m.cancel(),t}catch(r){if(r.throttleRetry&&t<n){let e=!0;if(i&&(e=yield i(t,u)),e){const e=o*parseInt(String(Math.random()*Math.pow(2,t)));yield Es(e);continue}}m.cancel(),As.throwError("processing response error",c.Logger.errors.SERVER_ERROR,{body:ks(a,e.headers?e.headers["content-type"]:null),error:r,requestBody:ks(l.body,g["content-type"]),requestMethod:l.method,url:u})}return m.cancel(),a}return As.throwError("failed response",c.Logger.errors.SERVER_ERROR,{requestBody:ks(l.body,g["content-type"]),requestMethod:l.method,url:u})}))}();return Promise.race([m.promise,y])}function xs(t,e,r){let n=null;if(null!=e){n=Me(e);const r="string"==typeof t?{url:t}:(0,L.shallowCopy)(t);if(r.headers){0!==Object.keys(r.headers).filter((t=>"content-type"===t.toLowerCase())).length||(r.headers=(0,L.shallowCopy)(r.headers),r.headers["content-type"]="application/json")}else r.headers={"content-type":"application/json"};t=r}return Ss(t,n,((t,e)=>{let n=null;if(null!=t)try{n=JSON.parse(Be(t))}catch(e){As.throwError("invalid JSON",c.Logger.errors.SERVER_ERROR,{body:t,error:e})}return r&&(n=r(n,e)),n}))}function _s(t,e){return e||(e={}),null==(e=(0,L.shallowCopy)(e)).floor&&(e.floor=0),null==e.ceiling&&(e.ceiling=1e4),null==e.interval&&(e.interval=250),new Promise((function(r,n){let i=null,o=!1;const s=()=>!o&&(o=!0,i&&clearTimeout(i),!0);e.timeout&&(i=setTimeout((()=>{s()&&n(new Error("timeout"))}),e.timeout));const a=e.retryLimit;let u=0;!function i(){return t().then((function(t){if(void 0!==t)s()&&r(t);else if(e.oncePoll)e.oncePoll.once("poll",i);else if(e.onceBlock)e.onceBlock.once("block",i);else if(!o){if(u++,u>a)return void(s()&&n(new Error("retry limit reached")));let t=e.interval*parseInt(String(Math.random()*Math.pow(2,u)));t<e.floor&&(t=e.floor),t>e.ceiling&&(t=e.ceiling),setTimeout(i,t)}return null}),(function(t){s()&&n(t)}))}()}))}for(var Ps,Ns="qpzry9x8gf2tvdw0s3jn54khce6mua7l",Rs={},Cs=0;Cs<Ns.length;Cs++){var Ms=Ns.charAt(Cs);if(void 0!==Rs[Ms])throw new TypeError(Ms+" is ambiguous");Rs[Ms]=Cs}function Is(t){var e=t>>25;return(33554431&t)<<5^996825010&-(e>>0&1)^642813549&-(e>>1&1)^513874426&-(e>>2&1)^1027748829&-(e>>3&1)^705979059&-(e>>4&1)}function Ts(t){for(var e=1,r=0;r<t.length;++r){var n=t.charCodeAt(r);if(n<33||n>126)return"Invalid prefix ("+t+")";e=Is(e)^n>>5}for(e=Is(e),r=0;r<t.length;++r){var i=t.charCodeAt(r);e=Is(e)^31&i}return e}function Os(t,e){if(e=e||90,t.length<8)return t+" too short";if(t.length>e)return"Exceeds length limit";var r=t.toLowerCase(),n=t.toUpperCase();if(t!==r&&t!==n)return"Mixed-case string "+t;var i=(t=r).lastIndexOf("1");if(-1===i)return"No separator character for "+t;if(0===i)return"Missing prefix for "+t;var o=t.slice(0,i),s=t.slice(i+1);if(s.length<6)return"Data too short";var a=Ts(o);if("string"==typeof a)return a;for(var u=[],l=0;l<s.length;++l){var c=s.charAt(l),h=Rs[c];if(void 0===h)return"Unknown character "+c;a=Is(a)^h,l+6>=s.length||u.push(h)}return 1!==a?"Invalid checksum for "+t:{prefix:o,words:u}}function Bs(t,e,r,n){for(var i=0,o=0,s=(1<<r)-1,a=[],u=0;u<t.length;++u)for(i=i<<e|t[u],o+=e;o>=r;)o-=r,a.push(i>>o&s);if(n)o>0&&a.push(i<<r-o&s);else{if(o>=e)return"Excess padding";if(i<<r-o&s)return"Non-zero padding"}return a}Ps={decodeUnsafe:function(){var t=Os.apply(null,arguments);if("object"==typeof t)return t},decode:function(t){var e=Os.apply(null,arguments);if("object"==typeof e)return e;throw new Error(e)},encode:function(t,e,r){if(r=r||90,t.length+7+e.length>r)throw new TypeError("Exceeds length limit");var n=Ts(t=t.toLowerCase());if("string"==typeof n)throw new Error(n);for(var i=t+"1",o=0;o<e.length;++o){var s=e[o];if(s>>5!=0)throw new Error("Non 5-bit word");n=Is(n)^s,i+=Ns.charAt(s)}for(o=0;o<6;++o)n=Is(n);for(n^=1,o=0;o<6;++o){i+=Ns.charAt(n>>5*(5-o)&31)}return i},toWordsUnsafe:function(t){var e=Bs(t,8,5,!0);if(Array.isArray(e))return e},toWords:function(t){var e=Bs(t,8,5,!0);if(Array.isArray(e))return e;throw new Error(e)},fromWordsUnsafe:function(t){var e=Bs(t,5,8,!1);if(Array.isArray(e))return e},fromWords:function(t){var e=Bs(t,5,8,!1);if(Array.isArray(e))return e;throw new Error(e)}};c=o("2rINa");const Ls="providers/5.7.0";l=o("3Yhqu");const Fs=new(0,(c=o("2rINa")).Logger)(Ls);class Ds{getDefaultFormats(){const t={},e=this.address.bind(this),r=this.bigNumber.bind(this),n=this.blockTag.bind(this),i=this.data.bind(this),o=this.hash.bind(this),s=this.hex.bind(this),a=this.number.bind(this),u=this.type.bind(this);return t.transaction={hash:o,type:u,accessList:Ds.allowNull(this.accessList.bind(this),null),blockHash:Ds.allowNull(o,null),blockNumber:Ds.allowNull(a,null),transactionIndex:Ds.allowNull(a,null),confirmations:Ds.allowNull(a,null),from:e,gasPrice:Ds.allowNull(r),maxPriorityFeePerGas:Ds.allowNull(r),maxFeePerGas:Ds.allowNull(r),gasLimit:r,to:Ds.allowNull(e,null),value:r,nonce:a,data:i,r:Ds.allowNull(this.uint256),s:Ds.allowNull(this.uint256),v:Ds.allowNull(a),creates:Ds.allowNull(e,null),raw:Ds.allowNull(i)},t.transactionRequest={from:Ds.allowNull(e),nonce:Ds.allowNull(a),gasLimit:Ds.allowNull(r),gasPrice:Ds.allowNull(r),maxPriorityFeePerGas:Ds.allowNull(r),maxFeePerGas:Ds.allowNull(r),to:Ds.allowNull(e),value:Ds.allowNull(r),data:Ds.allowNull((t=>this.data(t,!0))),type:Ds.allowNull(a),accessList:Ds.allowNull(this.accessList.bind(this),null)},t.receiptLog={transactionIndex:a,blockNumber:a,transactionHash:o,address:e,topics:Ds.arrayOf(o),data:i,logIndex:a,blockHash:o},t.receipt={to:Ds.allowNull(this.address,null),from:Ds.allowNull(this.address,null),contractAddress:Ds.allowNull(e,null),transactionIndex:a,root:Ds.allowNull(s),gasUsed:r,logsBloom:Ds.allowNull(i),blockHash:o,transactionHash:o,logs:Ds.arrayOf(this.receiptLog.bind(this)),blockNumber:a,confirmations:Ds.allowNull(a,null),cumulativeGasUsed:r,effectiveGasPrice:Ds.allowNull(r),status:Ds.allowNull(a),type:u},t.block={hash:Ds.allowNull(o),parentHash:o,number:a,timestamp:a,nonce:Ds.allowNull(s),difficulty:this.difficulty.bind(this),gasLimit:r,gasUsed:r,miner:Ds.allowNull(e),extraData:i,transactions:Ds.allowNull(Ds.arrayOf(o)),baseFeePerGas:Ds.allowNull(r)},t.blockWithTransactions=(0,L.shallowCopy)(t.block),t.blockWithTransactions.transactions=Ds.allowNull(Ds.arrayOf(this.transactionResponse.bind(this))),t.filter={fromBlock:Ds.allowNull(n,void 0),toBlock:Ds.allowNull(n,void 0),blockHash:Ds.allowNull(o,void 0),address:Ds.allowNull(e,void 0),topics:Ds.allowNull(this.topics.bind(this),void 0)},t.filterLog={blockNumber:Ds.allowNull(a),blockHash:Ds.allowNull(o),transactionIndex:a,removed:Ds.allowNull(this.boolean.bind(this)),address:e,data:Ds.allowFalsish(i,"0x"),topics:Ds.arrayOf(o),transactionHash:o,logIndex:a},t}accessList(t){return yi(t||[])}number(t){return"0x"===t?0:v.from(t).toNumber()}type(t){return"0x"===t||null==t?0:v.from(t).toNumber()}bigNumber(t){return v.from(t)}boolean(t){if("boolean"==typeof t)return t;if("string"==typeof t){if("true"===(t=t.toLowerCase()))return!0;if("false"===t)return!1}throw new Error("invalid boolean - "+t)}hex(t,e){return"string"==typeof t&&(e||"0x"===t.substring(0,2)||(t="0x"+t),(0,l.isHexString)(t))?t.toLowerCase():Fs.throwArgumentError("invalid hash","value",t)}data(t,e){const r=this.hex(t,e);if(r.length%2!=0)throw new Error("invalid data; odd-length - "+t);return r}address(t){return Wt(t)}callAddress(t){if(!(0,l.isHexString)(t,32))return null;const e=Wt((0,l.hexDataSlice)(t,12));return e===he?null:e}contractAddress(t){return Zt(t)}blockTag(t){if(null==t)return"latest";if("earliest"===t)return"0x0";switch(t){case"earliest":return"0x0";case"latest":case"pending":case"safe":case"finalized":return t}if("number"==typeof t||(0,l.isHexString)(t))return(0,l.hexValue)(t);throw new Error("invalid blockTag")}hash(t,e){const r=this.hex(t,e);return 32!==(0,l.hexDataLength)(r)?Fs.throwArgumentError("invalid hash","value",t):r}difficulty(t){if(null==t)return null;const e=v.from(t);try{return e.toNumber()}catch(t){}return null}uint256(t){if(!(0,l.isHexString)(t))throw new Error("invalid uint256");return(0,l.hexZeroPad)(t,32)}_block(t,e){null!=t.author&&null==t.miner&&(t.miner=t.author);const r=null!=t._difficulty?t._difficulty:t.difficulty,n=Ds.check(e,t);return n._difficulty=null==r?null:v.from(r),n}block(t){return this._block(t,this.formats.block)}blockWithTransactions(t){return this._block(t,this.formats.blockWithTransactions)}transactionRequest(t){return Ds.check(this.formats.transactionRequest,t)}transactionResponse(t){null!=t.gas&&null==t.gasLimit&&(t.gasLimit=t.gas),t.to&&v.from(t.to).isZero()&&(t.to="0x0000000000000000000000000000000000000000"),null!=t.input&&null==t.data&&(t.data=t.input),null==t.to&&null==t.creates&&(t.creates=this.contractAddress(t)),1!==t.type&&2!==t.type||null!=t.accessList||(t.accessList=[]);const e=Ds.check(this.formats.transaction,t);if(null!=t.chainId){let r=t.chainId;(0,l.isHexString)(r)&&(r=v.from(r).toNumber()),e.chainId=r}else{let r=t.networkId;null==r&&null==e.v&&(r=t.chainId),(0,l.isHexString)(r)&&(r=v.from(r).toNumber()),"number"!=typeof r&&null!=e.v&&(r=(e.v-35)/2,r<0&&(r=0),r=parseInt(r)),"number"!=typeof r&&(r=0),e.chainId=r}return e.blockHash&&"x"===e.blockHash.replace(/0/g,"")&&(e.blockHash=null),e}transaction(t){return ki(t)}receiptLog(t){return Ds.check(this.formats.receiptLog,t)}receipt(t){const e=Ds.check(this.formats.receipt,t);if(null!=e.root)if(e.root.length<=4){const t=v.from(e.root).toNumber();0===t||1===t?(null!=e.status&&e.status!==t&&Fs.throwArgumentError("alt-root-status/status mismatch","value",{root:e.root,status:e.status}),e.status=t,delete e.root):Fs.throwArgumentError("invalid alt-root-status","value.root",e.root)}else 66!==e.root.length&&Fs.throwArgumentError("invalid root hash","value.root",e.root);return null!=e.status&&(e.byzantium=!0),e}topics(t){return Array.isArray(t)?t.map((t=>this.topics(t))):null!=t?this.hash(t,!0):null}filter(t){return Ds.check(this.formats.filter,t)}filterLog(t){return Ds.check(this.formats.filterLog,t)}static check(t,e){const r={};for(const n in t)try{const i=t[n](e[n]);void 0!==i&&(r[n]=i)}catch(t){throw t.checkKey=n,t.checkValue=e[n],t}return r}static allowNull(t,e){return function(r){return null==r?e:t(r)}}static allowFalsish(t,e){return function(r){return r?t(r):e}}static arrayOf(t){return function(e){if(!Array.isArray(e))throw new Error("not an array");const r=[];return e.forEach((function(e){r.push(t(e))})),r}}constructor(){this.formats=this.getDefaultFormats()}}function Us(t){return t&&"function"==typeof t.isCommunityResource}function Gs(t){return Us(t)&&t.isCommunityResource()}let qs=!1;function js(){qs||(qs=!0,console.log("========= NOTICE ========="),console.log("Request-Rate Exceeded  (this message will not be repeated)"),console.log(""),console.log("The default API keys for each service are provided as a highly-throttled,"),console.log("community resource for low-traffic projects and early prototyping."),console.log(""),console.log("While your application will continue to function, we highly recommended"),console.log("signing up for your own API keys to improve performance, increase your"),console.log("request rate/limit and enable other perks, such as metrics and advanced APIs."),console.log(""),console.log("For more details: https://docs.ethers.io/api-keys/"),console.log("=========================="))}var zs=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const Hs=new(0,c.Logger)(Ls);function Ks(t){return null==t?"null":(32!==(0,l.hexDataLength)(t)&&Hs.throwArgumentError("invalid topic","topic",t),t.toLowerCase())}function Js(t){for(t=t.slice();t.length>0&&null==t[t.length-1];)t.pop();return t.map((t=>{if(Array.isArray(t)){const e={};t.forEach((t=>{e[Ks(t)]=!0}));const r=Object.keys(e);return r.sort(),r.join("|")}return Ks(t)})).join("&")}function Vs(t){if("string"==typeof t){if(t=t.toLowerCase(),32===(0,l.hexDataLength)(t))return"tx:"+t;if(-1===t.indexOf(":"))return t}else{if(Array.isArray(t))return"filter:*:"+Js(t);if(nn.ForkEvent.isForkEvent(t))throw Hs.warn("not implemented"),new Error("not implemented");if(t&&"object"==typeof t)return"filter:"+(t.address||"*")+":"+Js(t.topics||[])}throw new Error("invalid event - "+t)}function Ws(){return(new Date).getTime()}function Ys(t){return new Promise((e=>{setTimeout(e,t)}))}const Qs=["block","network","pending","poll"];class Zs{get event(){switch(this.type){case"tx":return this.hash;case"filter":return this.filter}return this.tag}get type(){return this.tag.split(":")[0]}get hash(){const t=this.tag.split(":");return"tx"!==t[0]?null:t[1]}get filter(){const t=this.tag.split(":");if("filter"!==t[0])return null;const e=t[1],r=""===(n=t[2])?[]:n.split(/&/g).map((t=>{if(""===t)return[];const e=t.split("|").map((t=>"null"===t?null:t));return 1===e.length?e[0]:e}));var n;const i={};return r.length>0&&(i.topics=r),e&&"*"!==e&&(i.address=e),i}pollable(){return this.tag.indexOf(":")>=0||Qs.indexOf(this.tag)>=0}constructor(t,e,r){(0,L.defineReadOnly)(this,"tag",t),(0,L.defineReadOnly)(this,"listener",e),(0,L.defineReadOnly)(this,"once",r),this._lastBlockNumber=-2,this._inflight=!1}}const Xs={0:{symbol:"btc",p2pkh:0,p2sh:5,prefix:"bc"},2:{symbol:"ltc",p2pkh:48,p2sh:50,prefix:"ltc"},3:{symbol:"doge",p2pkh:30,p2sh:22},60:{symbol:"eth",ilk:"eth"},61:{symbol:"etc",ilk:"eth"},700:{symbol:"xdai",ilk:"eth"}};function $s(t){return(0,l.hexZeroPad)(v.from(t).toHexString(),32)}function ta(t){return zi.encode((0,l.concat)([t,(0,l.hexDataSlice)(Wi(Wi(t)),0,4)]))}const ea=new RegExp("^(ipfs)://(.*)$","i"),ra=[new RegExp("^(https)://(.*)$","i"),new RegExp("^(data):(.*)$","i"),ea,new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$","i")];function na(t,e){try{return Be(ia(t,e))}catch(t){}return null}function ia(t,e){if("0x"===t)return null;const r=v.from((0,l.hexDataSlice)(t,e,e+32)).toNumber(),n=v.from((0,l.hexDataSlice)(t,r,r+32)).toNumber();return(0,l.hexDataSlice)(t,r+32,r+32+n)}function oa(t){return t.match(/^ipfs:\/\/ipfs\//i)?t=t.substring(12):t.match(/^ipfs:\/\//i)?t=t.substring(7):Hs.throwArgumentError("unsupported IPFS format","link",t),`https://gateway.ipfs.io/ipfs/${t}`}function sa(t){const e=(0,l.arrayify)(t);if(e.length>32)throw new Error("internal; should not happen");const r=new Uint8Array(32);return r.set(e,32-e.length),r}function aa(t){if(t.length%32==0)return t;const e=new Uint8Array(32*Math.ceil(t.length/32));return e.set(t),e}function ua(t){const e=[];let r=0;for(let n=0;n<t.length;n++)e.push(null),r+=32;for(let n=0;n<t.length;n++){const i=(0,l.arrayify)(t[n]);e[n]=sa(r),e.push(sa(i.length)),e.push(aa(i)),r+=32+32*Math.ceil(i.length/32)}return(0,l.hexConcat)(e)}class la{supportsWildcard(){return this._supportsEip2544||(this._supportsEip2544=this.provider.call({to:this.address,data:"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"}).then((t=>v.from(t).eq(1))).catch((t=>{if(t.code===c.Logger.errors.CALL_EXCEPTION)return!1;throw this._supportsEip2544=null,t}))),this._supportsEip2544}_fetch(t,e){return zs(this,void 0,void 0,(function*(){const r={to:this.address,ccipReadEnabled:!0,data:(0,l.hexConcat)([t,Rr(this.name),e||"0x"])};let n=!1;(yield this.supportsWildcard())&&(n=!0,r.data=(0,l.hexConcat)(["0x9061b923",ua([Cr(this.name),r.data])]));try{let t=yield this.provider.call(r);return(0,l.arrayify)(t).length%32==4&&Hs.throwError("resolver threw error",c.Logger.errors.CALL_EXCEPTION,{transaction:r,data:t}),n&&(t=ia(t,0)),t}catch(t){if(t.code===c.Logger.errors.CALL_EXCEPTION)return null;throw t}}))}_fetchBytes(t,e){return zs(this,void 0,void 0,(function*(){const r=yield this._fetch(t,e);return null!=r?ia(r,0):null}))}_getAddress(t,e){const n=Xs[String(t)];if(null==n&&Hs.throwError(`unsupported coin type: ${t}`,c.Logger.errors.UNSUPPORTED_OPERATION,{operation:`getAddress(${t})`}),"eth"===n.ilk)return this.provider.formatter.address(e);const i=(0,l.arrayify)(e);if(null!=n.p2pkh){const t=e.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);if(t){const e=parseInt(t[1],16);if(t[2].length===2*e&&e>=1&&e<=75)return ta((0,l.concat)([[n.p2pkh],"0x"+t[2]]))}}if(null!=n.p2sh){const t=e.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);if(t){const e=parseInt(t[1],16);if(t[2].length===2*e&&e>=1&&e<=75)return ta((0,l.concat)([[n.p2sh],"0x"+t[2]]))}}if(null!=n.prefix){const t=i[1];let e=i[0];if(0===e?20!==t&&32!==t&&(e=-1):e=-1,e>=0&&i.length===2+t&&t>=1&&t<=75){const t=r(Ps).toWords(i.slice(2));return t.unshift(e),r(Ps).encode(n.prefix,t)}}return null}getAddress(t){return zs(this,void 0,void 0,(function*(){if(null==t&&(t=60),60===t)try{const t=yield this._fetch("0x3b3b57de");return"0x"===t||t===be?null:this.provider.formatter.callAddress(t)}catch(t){if(t.code===c.Logger.errors.CALL_EXCEPTION)return null;throw t}const e=yield this._fetchBytes("0xf1cb7e06",$s(t));if(null==e||"0x"===e)return null;const r=this._getAddress(t,e);return null==r&&Hs.throwError("invalid or unsupported coin data",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:`getAddress(${t})`,coinType:t,data:e}),r}))}getAvatar(){return zs(this,void 0,void 0,(function*(){const t=[{type:"name",content:this.name}];try{const e=yield this.getText("avatar");if(null==e)return null;for(let r=0;r<ra.length;r++){const n=e.match(ra[r]);if(null==n)continue;const i=n[1].toLowerCase();switch(i){case"https":return t.push({type:"url",content:e}),{linkage:t,url:e};case"data":return t.push({type:"data",content:e}),{linkage:t,url:e};case"ipfs":return t.push({type:"ipfs",content:e}),{linkage:t,url:oa(e)};case"erc721":case"erc1155":{const r="erc721"===i?"0xc87b56dd":"0x0e89341c";t.push({type:i,content:e});const o=this._resolvedAddress||(yield this.getAddress()),s=(n[2]||"").split("/");if(2!==s.length)return null;const a=yield this.provider.formatter.address(s[0]),u=(0,l.hexZeroPad)(v.from(s[1]).toHexString(),32);if("erc721"===i){const e=this.provider.formatter.callAddress(yield this.provider.call({to:a,data:(0,l.hexConcat)(["0x6352211e",u])}));if(o!==e)return null;t.push({type:"owner",content:e})}else if("erc1155"===i){const e=v.from(yield this.provider.call({to:a,data:(0,l.hexConcat)(["0x00fdd58e",(0,l.hexZeroPad)(o,32),u])}));if(e.isZero())return null;t.push({type:"balance",content:e.toString()})}const c={to:this.provider.formatter.address(s[0]),data:(0,l.hexConcat)([r,u])};let h=na(yield this.provider.call(c),0);if(null==h)return null;t.push({type:"metadata-url-base",content:h}),"erc1155"===i&&(h=h.replace("{id}",u.substring(2)),t.push({type:"metadata-url-expanded",content:h})),h.match(/^ipfs:/i)&&(h=oa(h)),t.push({type:"metadata-url",content:h});const f=yield(0,ms.fetchJson)(h);if(!f)return null;t.push({type:"metadata",content:JSON.stringify(f)});let d=f.image;if("string"!=typeof d)return null;if(d.match(/^(https:\/\/|data:)/i));else{if(null==d.match(ea))return null;t.push({type:"url-ipfs",content:d}),d=oa(d)}return t.push({type:"url",content:d}),{linkage:t,url:d}}}}}catch(t){}return null}))}getContentHash(){return zs(this,void 0,void 0,(function*(){const t=yield this._fetchBytes("0xbc1c58d1");if(null==t||"0x"===t)return null;const e=t.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(e){const t=parseInt(e[3],16);if(e[4].length===2*t)return"ipfs://"+zi.encode("0x"+e[1])}const r=t.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(r){const t=parseInt(r[3],16);if(r[4].length===2*t)return"ipns://"+zi.encode("0x"+r[1])}const n=t.match(/^0xe40101fa011b20([0-9a-f]*)$/);if(n&&64===n[1].length)return"bzz://"+n[1];const i=t.match(/^0x90b2c605([0-9a-f]*)$/);if(i&&68===i[1].length){const t={"=":"","+":"-","/":"_"};return"sia://"+(0,gs.encode)("0x"+i[1]).replace(/[=+\/]/g,(e=>t[e]))}return Hs.throwError("invalid or unsupported content hash data",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"getContentHash()",data:t})}))}getText(t){return zs(this,void 0,void 0,(function*(){let e=Me(t);e=(0,l.concat)([$s(64),$s(e.length),e]),e.length%32!=0&&(e=(0,l.concat)([e,(0,l.hexZeroPad)("0x",32-t.length%32)]));const r=yield this._fetchBytes("0x59d1d43c",(0,l.hexlify)(e));return null==r||"0x"===r?null:Be(r)}))}constructor(t,e,r,n){(0,L.defineReadOnly)(this,"provider",t),(0,L.defineReadOnly)(this,"name",r),(0,L.defineReadOnly)(this,"address",t.formatter.address(e)),(0,L.defineReadOnly)(this,"_resolvedAddress",n)}}let ca=null,ha=1;class fa extends nn.Provider{_ready(){return zs(this,void 0,void 0,(function*(){if(null==this._network){let t=null;if(this._networkPromise)try{t=yield this._networkPromise}catch(t){}null==t&&(t=yield this.detectNetwork()),t||Hs.throwError("no network detected",c.Logger.errors.UNKNOWN_ERROR,{}),null==this._network&&(this.anyNetwork?this._network=t:(0,L.defineReadOnly)(this,"_network",t),this.emit("network",t,null))}return this._network}))}get ready(){return(0,ms.poll)((()=>this._ready().then((t=>t),(t=>{if(t.code!==c.Logger.errors.NETWORK_ERROR||"noNetwork"!==t.event)throw t}))))}static getFormatter(){return null==ca&&(ca=new Ds),ca}static getNetwork(t){return ds(null==t?"homestead":t)}ccipReadFetch(t,e,r){return zs(this,void 0,void 0,(function*(){if(this.disableCcipRead||0===r.length)return null;const n=t.to.toLowerCase(),i=e.toLowerCase(),o=[];for(let t=0;t<r.length;t++){const e=r[t],s=e.replace("{sender}",n).replace("{data}",i),a=e.indexOf("{data}")>=0?null:JSON.stringify({data:i,sender:n}),u=yield(0,ms.fetchJson)({url:s,errorPassThrough:!0},a,((t,e)=>(t.status=e.statusCode,t)));if(u.data)return u.data;const l=u.message||"unknown error";if(u.status>=400&&u.status<500)return Hs.throwError(`response not found during CCIP fetch: ${l}`,c.Logger.errors.SERVER_ERROR,{url:e,errorMessage:l});o.push(l)}return Hs.throwError(`error encountered during CCIP fetch: ${o.map((t=>JSON.stringify(t))).join(", ")}`,c.Logger.errors.SERVER_ERROR,{urls:r,errorMessages:o})}))}_getInternalBlockNumber(t){return zs(this,void 0,void 0,(function*(){if(yield this._ready(),t>0)for(;this._internalBlockNumber;){const e=this._internalBlockNumber;try{const r=yield e;if(Ws()-r.respTime<=t)return r.blockNumber;break}catch(t){if(this._internalBlockNumber===e)break}}const e=Ws(),r=(0,L.resolveProperties)({blockNumber:this.perform("getBlockNumber",{}),networkError:this.getNetwork().then((t=>null),(t=>t))}).then((({blockNumber:t,networkError:n})=>{if(n)throw this._internalBlockNumber===r&&(this._internalBlockNumber=null),n;const i=Ws();return(t=v.from(t).toNumber())<this._maxInternalBlockNumber&&(t=this._maxInternalBlockNumber),this._maxInternalBlockNumber=t,this._setFastBlockNumber(t),{blockNumber:t,reqTime:e,respTime:i}}));return this._internalBlockNumber=r,r.catch((t=>{this._internalBlockNumber===r&&(this._internalBlockNumber=null)})),(yield r).blockNumber}))}poll(){return zs(this,void 0,void 0,(function*(){const t=ha++,e=[];let r=null;try{r=yield this._getInternalBlockNumber(100+this.pollingInterval/2)}catch(t){return void this.emit("error",t)}if(this._setFastBlockNumber(r),this.emit("poll",t,r),r!==this._lastBlockNumber){if(-2===this._emitted.block&&(this._emitted.block=r-1),Math.abs(this._emitted.block-r)>1e3)Hs.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${r})`),this.emit("error",Hs.makeError("network block skew detected",c.Logger.errors.NETWORK_ERROR,{blockNumber:r,event:"blockSkew",previousBlockNumber:this._emitted.block})),this.emit("block",r);else for(let t=this._emitted.block+1;t<=r;t++)this.emit("block",t);this._emitted.block!==r&&(this._emitted.block=r,Object.keys(this._emitted).forEach((t=>{if("block"===t)return;const e=this._emitted[t];"pending"!==e&&r-e>12&&delete this._emitted[t]}))),-2===this._lastBlockNumber&&(this._lastBlockNumber=r-1),this._events.forEach((t=>{switch(t.type){case"tx":{const r=t.hash;let n=this.getTransactionReceipt(r).then((t=>t&&null!=t.blockNumber?(this._emitted["t:"+r]=t.blockNumber,this.emit(r,t),null):null)).catch((t=>{this.emit("error",t)}));e.push(n);break}case"filter":if(!t._inflight){t._inflight=!0,-2===t._lastBlockNumber&&(t._lastBlockNumber=r-1);const n=t.filter;n.fromBlock=t._lastBlockNumber+1,n.toBlock=r;const i=n.toBlock-this._maxFilterBlockRange;i>n.fromBlock&&(n.fromBlock=i),n.fromBlock<0&&(n.fromBlock=0);const o=this.getLogs(n).then((e=>{t._inflight=!1,0!==e.length&&e.forEach((e=>{e.blockNumber>t._lastBlockNumber&&(t._lastBlockNumber=e.blockNumber),this._emitted["b:"+e.blockHash]=e.blockNumber,this._emitted["t:"+e.transactionHash]=e.blockNumber,this.emit(n,e)}))})).catch((e=>{this.emit("error",e),t._inflight=!1}));e.push(o)}}})),this._lastBlockNumber=r,Promise.all(e).then((()=>{this.emit("didPoll",t)})).catch((t=>{this.emit("error",t)}))}else this.emit("didPoll",t)}))}resetEventsBlock(t){this._lastBlockNumber=t-1,this.polling&&this.poll()}get network(){return this._network}detectNetwork(){return zs(this,void 0,void 0,(function*(){return Hs.throwError("provider does not support network detection",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"provider.detectNetwork"})}))}getNetwork(){return zs(this,void 0,void 0,(function*(){const t=yield this._ready(),e=yield this.detectNetwork();if(t.chainId!==e.chainId){if(this.anyNetwork)return this._network=e,this._lastBlockNumber=-2,this._fastBlockNumber=null,this._fastBlockNumberPromise=null,this._fastQueryDate=0,this._emitted.block=-2,this._maxInternalBlockNumber=-1024,this._internalBlockNumber=null,this.emit("network",e,t),yield Ys(0),this._network;const r=Hs.makeError("underlying network changed",c.Logger.errors.NETWORK_ERROR,{event:"changed",network:t,detectedNetwork:e});throw this.emit("error",r),r}return t}))}get blockNumber(){return this._getInternalBlockNumber(100+this.pollingInterval/2).then((t=>{this._setFastBlockNumber(t)}),(t=>{})),null!=this._fastBlockNumber?this._fastBlockNumber:-1}get polling(){return null!=this._poller}set polling(t){t&&!this._poller?(this._poller=setInterval((()=>{this.poll()}),this.pollingInterval),this._bootstrapPoll||(this._bootstrapPoll=setTimeout((()=>{this.poll(),this._bootstrapPoll=setTimeout((()=>{this._poller||this.poll(),this._bootstrapPoll=null}),this.pollingInterval)}),0))):!t&&this._poller&&(clearInterval(this._poller),this._poller=null)}get pollingInterval(){return this._pollingInterval}set pollingInterval(t){if("number"!=typeof t||t<=0||parseInt(String(t))!=t)throw new Error("invalid polling interval");this._pollingInterval=t,this._poller&&(clearInterval(this._poller),this._poller=setInterval((()=>{this.poll()}),this._pollingInterval))}_getFastBlockNumber(){const t=Ws();return t-this._fastQueryDate>2*this._pollingInterval&&(this._fastQueryDate=t,this._fastBlockNumberPromise=this.getBlockNumber().then((t=>((null==this._fastBlockNumber||t>this._fastBlockNumber)&&(this._fastBlockNumber=t),this._fastBlockNumber)))),this._fastBlockNumberPromise}_setFastBlockNumber(t){null!=this._fastBlockNumber&&t<this._fastBlockNumber||(this._fastQueryDate=Ws(),(null==this._fastBlockNumber||t>this._fastBlockNumber)&&(this._fastBlockNumber=t,this._fastBlockNumberPromise=Promise.resolve(t)))}waitForTransaction(t,e,r){return zs(this,void 0,void 0,(function*(){return this._waitForTransaction(t,null==e?1:e,r||0,null)}))}_waitForTransaction(t,e,r,n){return zs(this,void 0,void 0,(function*(){const i=yield this.getTransactionReceipt(t);return(i?i.confirmations:0)>=e?i:new Promise(((i,o)=>{const s=[];let a=!1;const u=function(){return!!a||(a=!0,s.forEach((t=>{t()})),!1)},l=t=>{t.confirmations<e||u()||i(t)};if(this.on(t,l),s.push((()=>{this.removeListener(t,l)})),n){let r=n.startBlock,i=null;const l=s=>zs(this,void 0,void 0,(function*(){a||(yield Ys(1e3),this.getTransactionCount(n.from).then((h=>zs(this,void 0,void 0,(function*(){if(!a){if(h<=n.nonce)r=s;else{{const e=yield this.getTransaction(t);if(e&&null!=e.blockNumber)return}for(null==i&&(i=r-3,i<n.startBlock&&(i=n.startBlock));i<=s;){if(a)return;const r=yield this.getBlockWithTransactions(i);for(let i=0;i<r.transactions.length;i++){const s=r.transactions[i];if(s.hash===t)return;if(s.from===n.from&&s.nonce===n.nonce){if(a)return;const r=yield this.waitForTransaction(s.hash,e);if(u())return;let i="replaced";return s.data===n.data&&s.to===n.to&&s.value.eq(n.value)?i="repriced":"0x"===s.data&&s.from===s.to&&s.value.isZero()&&(i="cancelled"),void o(Hs.makeError("transaction was replaced",c.Logger.errors.TRANSACTION_REPLACED,{cancelled:"replaced"===i||"cancelled"===i,reason:i,replacement:this._wrapTransaction(s),hash:t,receipt:r}))}}i++}}a||this.once("block",l)}}))),(t=>{a||this.once("block",l)})))}));if(a)return;this.once("block",l),s.push((()=>{this.removeListener("block",l)}))}if("number"==typeof r&&r>0){const t=setTimeout((()=>{u()||o(Hs.makeError("timeout exceeded",c.Logger.errors.TIMEOUT,{timeout:r}))}),r);t.unref&&t.unref(),s.push((()=>{clearTimeout(t)}))}}))}))}getBlockNumber(){return zs(this,void 0,void 0,(function*(){return this._getInternalBlockNumber(0)}))}getGasPrice(){return zs(this,void 0,void 0,(function*(){yield this.getNetwork();const t=yield this.perform("getGasPrice",{});try{return v.from(t)}catch(e){return Hs.throwError("bad result from backend",c.Logger.errors.SERVER_ERROR,{method:"getGasPrice",result:t,error:e})}}))}getBalance(t,e){return zs(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield(0,L.resolveProperties)({address:this._getAddress(t),blockTag:this._getBlockTag(e)}),n=yield this.perform("getBalance",r);try{return v.from(n)}catch(t){return Hs.throwError("bad result from backend",c.Logger.errors.SERVER_ERROR,{method:"getBalance",params:r,result:n,error:t})}}))}getTransactionCount(t,e){return zs(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield(0,L.resolveProperties)({address:this._getAddress(t),blockTag:this._getBlockTag(e)}),n=yield this.perform("getTransactionCount",r);try{return v.from(n).toNumber()}catch(t){return Hs.throwError("bad result from backend",c.Logger.errors.SERVER_ERROR,{method:"getTransactionCount",params:r,result:n,error:t})}}))}getCode(t,e){return zs(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield(0,L.resolveProperties)({address:this._getAddress(t),blockTag:this._getBlockTag(e)}),n=yield this.perform("getCode",r);try{return(0,l.hexlify)(n)}catch(t){return Hs.throwError("bad result from backend",c.Logger.errors.SERVER_ERROR,{method:"getCode",params:r,result:n,error:t})}}))}getStorageAt(t,e,r){return zs(this,void 0,void 0,(function*(){yield this.getNetwork();const n=yield(0,L.resolveProperties)({address:this._getAddress(t),blockTag:this._getBlockTag(r),position:Promise.resolve(e).then((t=>(0,l.hexValue)(t)))}),i=yield this.perform("getStorageAt",n);try{return(0,l.hexlify)(i)}catch(t){return Hs.throwError("bad result from backend",c.Logger.errors.SERVER_ERROR,{method:"getStorageAt",params:n,result:i,error:t})}}))}_wrapTransaction(t,e,r){if(null!=e&&32!==(0,l.hexDataLength)(e))throw new Error("invalid response - sendTransaction");const n=t;return null!=e&&t.hash!==e&&Hs.throwError("Transaction hash mismatch from Provider.sendTransaction.",c.Logger.errors.UNKNOWN_ERROR,{expectedHash:t.hash,returnedHash:e}),n.wait=(e,n)=>zs(this,void 0,void 0,(function*(){let i;null==e&&(e=1),null==n&&(n=0),0!==e&&null!=r&&(i={data:t.data,from:t.from,nonce:t.nonce,to:t.to,value:t.value,startBlock:r});const o=yield this._waitForTransaction(t.hash,e,n,i);return null==o&&0===e?null:(this._emitted["t:"+t.hash]=o.blockNumber,0===o.status&&Hs.throwError("transaction failed",c.Logger.errors.CALL_EXCEPTION,{transactionHash:t.hash,transaction:t,receipt:o}),o)})),n}sendTransaction(t){return zs(this,void 0,void 0,(function*(){yield this.getNetwork();const e=yield Promise.resolve(t).then((t=>(0,l.hexlify)(t))),r=this.formatter.transaction(t);null==r.confirmations&&(r.confirmations=0);const n=yield this._getInternalBlockNumber(100+2*this.pollingInterval);try{const t=yield this.perform("sendTransaction",{signedTransaction:e});return this._wrapTransaction(r,t,n)}catch(t){throw t.transaction=r,t.transactionHash=r.hash,t}}))}_getTransactionRequest(t){return zs(this,void 0,void 0,(function*(){const e=yield t,r={};return["from","to"].forEach((t=>{null!=e[t]&&(r[t]=Promise.resolve(e[t]).then((t=>t?this._getAddress(t):null)))})),["gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","value"].forEach((t=>{null!=e[t]&&(r[t]=Promise.resolve(e[t]).then((t=>t?v.from(t):null)))})),["type"].forEach((t=>{null!=e[t]&&(r[t]=Promise.resolve(e[t]).then((t=>null!=t?t:null)))})),e.accessList&&(r.accessList=this.formatter.accessList(e.accessList)),["data"].forEach((t=>{null!=e[t]&&(r[t]=Promise.resolve(e[t]).then((t=>t?(0,l.hexlify)(t):null)))})),this.formatter.transactionRequest(yield(0,L.resolveProperties)(r))}))}_getFilter(t){return zs(this,void 0,void 0,(function*(){t=yield t;const e={};return null!=t.address&&(e.address=this._getAddress(t.address)),["blockHash","topics"].forEach((r=>{null!=t[r]&&(e[r]=t[r])})),["fromBlock","toBlock"].forEach((r=>{null!=t[r]&&(e[r]=this._getBlockTag(t[r]))})),this.formatter.filter(yield(0,L.resolveProperties)(e))}))}_call(t,e,r){return zs(this,void 0,void 0,(function*(){r>=10&&Hs.throwError("CCIP read exceeded maximum redirections",c.Logger.errors.SERVER_ERROR,{redirects:r,transaction:t});const n=t.to,i=yield this.perform("call",{transaction:t,blockTag:e});if(r>=0&&"latest"===e&&null!=n&&"0x556f1830"===i.substring(0,10)&&(0,l.hexDataLength)(i)%32==4)try{const o=(0,l.hexDataSlice)(i,4),s=(0,l.hexDataSlice)(o,0,32);v.from(s).eq(n)||Hs.throwError("CCIP Read sender did not match",c.Logger.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:t,data:i});const a=[],u=v.from((0,l.hexDataSlice)(o,32,64)).toNumber(),h=v.from((0,l.hexDataSlice)(o,u,u+32)).toNumber(),f=(0,l.hexDataSlice)(o,u+32);for(let e=0;e<h;e++){const r=na(f,32*e);null==r&&Hs.throwError("CCIP Read contained corrupt URL string",c.Logger.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:t,data:i}),a.push(r)}const d=ia(o,64);v.from((0,l.hexDataSlice)(o,100,128)).isZero()||Hs.throwError("CCIP Read callback selector included junk",c.Logger.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:t,data:i});const p=(0,l.hexDataSlice)(o,96,100),g=ia(o,128),m=yield this.ccipReadFetch(t,d,a);null==m&&Hs.throwError("CCIP Read disabled or provided no URLs",c.Logger.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:t,data:i});const y={to:n,data:(0,l.hexConcat)([p,ua([m,g])])};return this._call(y,e,r+1)}catch(t){if(t.code===c.Logger.errors.SERVER_ERROR)throw t}try{return(0,l.hexlify)(i)}catch(r){return Hs.throwError("bad result from backend",c.Logger.errors.SERVER_ERROR,{method:"call",params:{transaction:t,blockTag:e},result:i,error:r})}}))}call(t,e){return zs(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield(0,L.resolveProperties)({transaction:this._getTransactionRequest(t),blockTag:this._getBlockTag(e),ccipReadEnabled:Promise.resolve(t.ccipReadEnabled)});return this._call(r.transaction,r.blockTag,r.ccipReadEnabled?0:-1)}))}estimateGas(t){return zs(this,void 0,void 0,(function*(){yield this.getNetwork();const e=yield(0,L.resolveProperties)({transaction:this._getTransactionRequest(t)}),r=yield this.perform("estimateGas",e);try{return v.from(r)}catch(t){return Hs.throwError("bad result from backend",c.Logger.errors.SERVER_ERROR,{method:"estimateGas",params:e,result:r,error:t})}}))}_getAddress(t){return zs(this,void 0,void 0,(function*(){"string"!=typeof(t=yield t)&&Hs.throwArgumentError("invalid address or ENS name","name",t);const e=yield this.resolveName(t);return null==e&&Hs.throwError("ENS name not configured",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:`resolveName(${JSON.stringify(t)})`}),e}))}_getBlock(t,e){return zs(this,void 0,void 0,(function*(){yield this.getNetwork(),t=yield t;let r=-128;const n={includeTransactions:!!e};if((0,l.isHexString)(t,32))n.blockHash=t;else try{n.blockTag=yield this._getBlockTag(t),(0,l.isHexString)(n.blockTag)&&(r=parseInt(n.blockTag.substring(2),16))}catch(e){Hs.throwArgumentError("invalid block hash or block tag","blockHashOrBlockTag",t)}return(0,ms.poll)((()=>zs(this,void 0,void 0,(function*(){const t=yield this.perform("getBlock",n);if(null==t)return null!=n.blockHash&&null==this._emitted["b:"+n.blockHash]||null!=n.blockTag&&r>this._emitted.block?null:void 0;if(e){let e=null;for(let r=0;r<t.transactions.length;r++){const n=t.transactions[r];if(null==n.blockNumber)n.confirmations=0;else if(null==n.confirmations){null==e&&(e=yield this._getInternalBlockNumber(100+2*this.pollingInterval));let t=e-n.blockNumber+1;t<=0&&(t=1),n.confirmations=t}}const r=this.formatter.blockWithTransactions(t);return r.transactions=r.transactions.map((t=>this._wrapTransaction(t))),r}return this.formatter.block(t)}))),{oncePoll:this})}))}getBlock(t){return this._getBlock(t,!1)}getBlockWithTransactions(t){return this._getBlock(t,!0)}getTransaction(t){return zs(this,void 0,void 0,(function*(){yield this.getNetwork(),t=yield t;const e={transactionHash:this.formatter.hash(t,!0)};return(0,ms.poll)((()=>zs(this,void 0,void 0,(function*(){const r=yield this.perform("getTransaction",e);if(null==r)return null==this._emitted["t:"+t]?null:void 0;const n=this.formatter.transactionResponse(r);if(null==n.blockNumber)n.confirmations=0;else if(null==n.confirmations){let t=(yield this._getInternalBlockNumber(100+2*this.pollingInterval))-n.blockNumber+1;t<=0&&(t=1),n.confirmations=t}return this._wrapTransaction(n)}))),{oncePoll:this})}))}getTransactionReceipt(t){return zs(this,void 0,void 0,(function*(){yield this.getNetwork(),t=yield t;const e={transactionHash:this.formatter.hash(t,!0)};return(0,ms.poll)((()=>zs(this,void 0,void 0,(function*(){const r=yield this.perform("getTransactionReceipt",e);if(null==r)return null==this._emitted["t:"+t]?null:void 0;if(null==r.blockHash)return;const n=this.formatter.receipt(r);if(null==n.blockNumber)n.confirmations=0;else if(null==n.confirmations){let t=(yield this._getInternalBlockNumber(100+2*this.pollingInterval))-n.blockNumber+1;t<=0&&(t=1),n.confirmations=t}return n}))),{oncePoll:this})}))}getLogs(t){return zs(this,void 0,void 0,(function*(){yield this.getNetwork();const e=yield(0,L.resolveProperties)({filter:this._getFilter(t)}),r=yield this.perform("getLogs",e);return r.forEach((t=>{null==t.removed&&(t.removed=!1)})),Ds.arrayOf(this.formatter.filterLog.bind(this.formatter))(r)}))}getEtherPrice(){return zs(this,void 0,void 0,(function*(){return yield this.getNetwork(),this.perform("getEtherPrice",{})}))}_getBlockTag(t){return zs(this,void 0,void 0,(function*(){if("number"==typeof(t=yield t)&&t<0){t%1&&Hs.throwArgumentError("invalid BlockTag","blockTag",t);let e=yield this._getInternalBlockNumber(100+2*this.pollingInterval);return e+=t,e<0&&(e=0),this.formatter.blockTag(e)}return this.formatter.blockTag(t)}))}getResolver(t){return zs(this,void 0,void 0,(function*(){let e=t;for(;;){if(""===e||"."===e)return null;if("eth"!==t&&"eth"===e)return null;const r=yield this._getResolver(e,"getResolver");if(null!=r){const n=new la(this,r,t);return e===t||(yield n.supportsWildcard())?n:null}e=e.split(".").slice(1).join(".")}}))}_getResolver(t,e){return zs(this,void 0,void 0,(function*(){null==e&&(e="ENS");const r=yield this.getNetwork();r.ensAddress||Hs.throwError("network does not support ENS",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:e,network:r.name});try{const e=yield this.call({to:r.ensAddress,data:"0x0178b8bf"+Rr(t).substring(2)});return this.formatter.callAddress(e)}catch(t){}return null}))}resolveName(t){return zs(this,void 0,void 0,(function*(){t=yield t;try{return Promise.resolve(this.formatter.address(t))}catch(e){if((0,l.isHexString)(t))throw e}"string"!=typeof t&&Hs.throwArgumentError("invalid ENS name","name",t);const e=yield this.getResolver(t);return e?yield e.getAddress():null}))}lookupAddress(t){return zs(this,void 0,void 0,(function*(){t=yield t;const e=(t=this.formatter.address(t)).substring(2).toLowerCase()+".addr.reverse",r=yield this._getResolver(e,"lookupAddress");if(null==r)return null;const n=na(yield this.call({to:r,data:"0x691f3431"+Rr(e).substring(2)}),0);return(yield this.resolveName(n))!=t?null:n}))}getAvatar(t){return zs(this,void 0,void 0,(function*(){let e=null;if((0,l.isHexString)(t)){const r=this.formatter.address(t).substring(2).toLowerCase()+".addr.reverse",n=yield this._getResolver(r,"getAvatar");if(!n)return null;e=new la(this,n,r);try{const t=yield e.getAvatar();if(t)return t.url}catch(t){if(t.code!==c.Logger.errors.CALL_EXCEPTION)throw t}try{const t=na(yield this.call({to:n,data:"0x691f3431"+Rr(r).substring(2)}),0);e=yield this.getResolver(t)}catch(t){if(t.code!==c.Logger.errors.CALL_EXCEPTION)throw t;return null}}else if(e=yield this.getResolver(t),!e)return null;const r=yield e.getAvatar();return null==r?null:r.url}))}perform(t,e){return Hs.throwError(t+" not implemented",c.Logger.errors.NOT_IMPLEMENTED,{operation:t})}_startEvent(t){this.polling=this._events.filter((t=>t.pollable())).length>0}_stopEvent(t){this.polling=this._events.filter((t=>t.pollable())).length>0}_addEventListener(t,e,r){const n=new Zs(Vs(t),e,r);return this._events.push(n),this._startEvent(n),this}on(t,e){return this._addEventListener(t,e,!1)}once(t,e){return this._addEventListener(t,e,!0)}emit(t,...e){let r=!1,n=[],i=Vs(t);return this._events=this._events.filter((t=>t.tag!==i||(setTimeout((()=>{t.listener.apply(this,e)}),0),r=!0,!t.once||(n.push(t),!1)))),n.forEach((t=>{this._stopEvent(t)})),r}listenerCount(t){if(!t)return this._events.length;let e=Vs(t);return this._events.filter((t=>t.tag===e)).length}listeners(t){if(null==t)return this._events.map((t=>t.listener));let e=Vs(t);return this._events.filter((t=>t.tag===e)).map((t=>t.listener))}off(t,e){if(null==e)return this.removeAllListeners(t);const r=[];let n=!1,i=Vs(t);return this._events=this._events.filter((t=>t.tag!==i||t.listener!=e||(!!n||(n=!0,r.push(t),!1)))),r.forEach((t=>{this._stopEvent(t)})),this}removeAllListeners(t){let e=[];if(null==t)e=this._events,this._events=[];else{const r=Vs(t);this._events=this._events.filter((t=>t.tag!==r||(e.push(t),!1)))}return e.forEach((t=>{this._stopEvent(t)})),this}constructor(t){if(super(),this._events=[],this._emitted={block:-2},this.disableCcipRead=!1,this.formatter=new.target.getFormatter(),(0,L.defineReadOnly)(this,"anyNetwork","any"===t),this.anyNetwork&&(t=this.detectNetwork()),t instanceof Promise)this._networkPromise=t,t.catch((t=>{})),this._ready().catch((t=>{}));else{const e=(0,L.getStatic)(new.target,"getNetwork")(t);e?((0,L.defineReadOnly)(this,"_network",e),this.emit("network",e,null)):Hs.throwArgumentError("invalid network","network",t)}this._maxInternalBlockNumber=-1024,this._lastBlockNumber=-2,this._maxFilterBlockRange=10,this._pollingInterval=4e3,this._fastQueryDate=0}}var da={};t(da,"WebSocketProvider",(function(){return Ia}),(function(t){return Ia=t}));var pa={};t(pa,"JsonRpcSigner",(function(){return Sa}),(function(t){return Sa=t})),t(pa,"JsonRpcProvider",(function(){return Pa}),(function(t){return Pa=t}));l=o("3Yhqu"),c=o("2rINa");var ga=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const ma=new(0,c.Logger)(Ls),ya=["call","estimateGas"];function va(t,e){if(null==t)return null;if("string"==typeof t.message&&t.message.match("reverted")){const r=(0,l.isHexString)(t.data)?t.data:null;if(!e||r)return{message:t.message,data:r}}if("object"==typeof t){for(const r in t){const n=va(t[r],e);if(n)return n}return null}if("string"==typeof t)try{return va(JSON.parse(t),e)}catch(t){}return null}function wa(t,e,r){const n=r.transaction||r.signedTransaction;if("call"===t){const t=va(e,!0);if(t)return t.data;ma.throwError("missing revert data in call exception; Transaction reverted without a reason string",c.Logger.errors.CALL_EXCEPTION,{data:"0x",transaction:n,error:e})}if("estimateGas"===t){let r=va(e.body,!1);null==r&&(r=va(e,!1)),r&&ma.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",c.Logger.errors.UNPREDICTABLE_GAS_LIMIT,{reason:r.message,method:t,transaction:n,error:e})}let i=e.message;throw e.code===c.Logger.errors.SERVER_ERROR&&e.error&&"string"==typeof e.error.message?i=e.error.message:"string"==typeof e.body?i=e.body:"string"==typeof e.responseText&&(i=e.responseText),i=(i||"").toLowerCase(),i.match(/insufficient funds|base fee exceeds gas limit/i)&&ma.throwError("insufficient funds for intrinsic transaction cost",c.Logger.errors.INSUFFICIENT_FUNDS,{error:e,method:t,transaction:n}),i.match(/nonce (is )?too low/i)&&ma.throwError("nonce has already been used",c.Logger.errors.NONCE_EXPIRED,{error:e,method:t,transaction:n}),i.match(/replacement transaction underpriced|transaction gas price.*too low/i)&&ma.throwError("replacement fee too low",c.Logger.errors.REPLACEMENT_UNDERPRICED,{error:e,method:t,transaction:n}),i.match(/only replay-protected/i)&&ma.throwError("legacy pre-eip-155 transactions not supported",c.Logger.errors.UNSUPPORTED_OPERATION,{error:e,method:t,transaction:n}),ya.indexOf(t)>=0&&i.match(/gas required exceeds allowance|always failing transaction|execution reverted/)&&ma.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",c.Logger.errors.UNPREDICTABLE_GAS_LIMIT,{error:e,method:t,transaction:n}),e}function ba(t){return new Promise((function(e){setTimeout(e,t)}))}function Aa(t){if(t.error){const e=new Error(t.error.message);throw e.code=t.error.code,e.data=t.error.data,e}return t.result}function Ea(t){return t?t.toLowerCase():t}const ka={};class Sa extends ln.Signer{connect(t){return ma.throwError("cannot alter JSON-RPC Signer connection",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"connect"})}connectUnchecked(){return new xa(ka,this.provider,this._address||this._index)}getAddress(){return this._address?Promise.resolve(this._address):this.provider.send("eth_accounts",[]).then((t=>(t.length<=this._index&&ma.throwError("unknown account #"+this._index,c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"getAddress"}),this.provider.formatter.address(t[this._index]))))}sendUncheckedTransaction(t){t=(0,L.shallowCopy)(t);const e=this.getAddress().then((t=>(t&&(t=t.toLowerCase()),t)));if(null==t.gasLimit){const r=(0,L.shallowCopy)(t);r.from=e,t.gasLimit=this.provider.estimateGas(r)}return null!=t.to&&(t.to=Promise.resolve(t.to).then((t=>ga(this,void 0,void 0,(function*(){if(null==t)return null;const e=yield this.provider.resolveName(t);return null==e&&ma.throwArgumentError("provided ENS name resolves to null","tx.to",t),e}))))),(0,L.resolveProperties)({tx:(0,L.resolveProperties)(t),sender:e}).then((({tx:e,sender:r})=>{null!=e.from?e.from.toLowerCase()!==r&&ma.throwArgumentError("from address mismatch","transaction",t):e.from=r;const n=this.provider.constructor.hexlifyTransaction(e,{from:!0});return this.provider.send("eth_sendTransaction",[n]).then((t=>t),(t=>("string"==typeof t.message&&t.message.match(/user denied/i)&&ma.throwError("user rejected transaction",c.Logger.errors.ACTION_REJECTED,{action:"sendTransaction",transaction:e}),wa("sendTransaction",t,n))))}))}signTransaction(t){return ma.throwError("signing transactions is unsupported",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"signTransaction"})}sendTransaction(t){return ga(this,void 0,void 0,(function*(){const e=yield this.provider._getInternalBlockNumber(100+2*this.provider.pollingInterval),r=yield this.sendUncheckedTransaction(t);try{return yield(0,ms.poll)((()=>ga(this,void 0,void 0,(function*(){const t=yield this.provider.getTransaction(r);if(null!==t)return this.provider._wrapTransaction(t,r,e)}))),{oncePoll:this.provider})}catch(t){throw t.transactionHash=r,t}}))}signMessage(t){return ga(this,void 0,void 0,(function*(){const e="string"==typeof t?Me(t):t,r=yield this.getAddress();try{return yield this.provider.send("personal_sign",[(0,l.hexlify)(e),r.toLowerCase()])}catch(t){throw"string"==typeof t.message&&t.message.match(/user denied/i)&&ma.throwError("user rejected signing",c.Logger.errors.ACTION_REJECTED,{action:"signMessage",from:r,message:e}),t}}))}_legacySignMessage(t){return ga(this,void 0,void 0,(function*(){const e="string"==typeof t?Me(t):t,r=yield this.getAddress();try{return yield this.provider.send("eth_sign",[r.toLowerCase(),(0,l.hexlify)(e)])}catch(t){throw"string"==typeof t.message&&t.message.match(/user denied/i)&&ma.throwError("user rejected signing",c.Logger.errors.ACTION_REJECTED,{action:"_legacySignMessage",from:r,message:e}),t}}))}_signTypedData(t,e,r){return ga(this,void 0,void 0,(function*(){const n=yield Ir.TypedDataEncoder.resolveNames(t,e,r,(t=>this.provider.resolveName(t))),i=yield this.getAddress();try{return yield this.provider.send("eth_signTypedData_v4",[i.toLowerCase(),JSON.stringify(Ir.TypedDataEncoder.getPayload(n.domain,e,n.value))])}catch(t){throw"string"==typeof t.message&&t.message.match(/user denied/i)&&ma.throwError("user rejected signing",c.Logger.errors.ACTION_REJECTED,{action:"_signTypedData",from:i,message:{domain:n.domain,types:e,value:n.value}}),t}}))}unlock(t){return ga(this,void 0,void 0,(function*(){const e=this.provider,r=yield this.getAddress();return e.send("personal_unlockAccount",[r.toLowerCase(),t,null])}))}constructor(t,e,r){if(super(),t!==ka)throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");(0,L.defineReadOnly)(this,"provider",e),null==r&&(r=0),"string"==typeof r?((0,L.defineReadOnly)(this,"_address",this.provider.formatter.address(r)),(0,L.defineReadOnly)(this,"_index",null)):"number"==typeof r?((0,L.defineReadOnly)(this,"_index",r),(0,L.defineReadOnly)(this,"_address",null)):ma.throwArgumentError("invalid address or index","addressOrIndex",r)}}class xa extends Sa{sendTransaction(t){return this.sendUncheckedTransaction(t).then((t=>({hash:t,nonce:null,gasLimit:null,gasPrice:null,data:null,value:null,chainId:null,confirmations:0,from:null,wait:e=>this.provider.waitForTransaction(t,e)})))}}const _a={chainId:!0,data:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,value:!0,type:!0,accessList:!0,maxFeePerGas:!0,maxPriorityFeePerGas:!0};class Pa extends ps.BaseProvider{get _cache(){return null==this._eventLoopCache&&(this._eventLoopCache={}),this._eventLoopCache}static defaultUrl(){return"http://localhost:8545"}detectNetwork(){return this._cache.detectNetwork||(this._cache.detectNetwork=this._uncachedDetectNetwork(),setTimeout((()=>{this._cache.detectNetwork=null}),0)),this._cache.detectNetwork}_uncachedDetectNetwork(){return ga(this,void 0,void 0,(function*(){yield ba(0);let t=null;try{t=yield this.send("eth_chainId",[])}catch(e){try{t=yield this.send("net_version",[])}catch(t){}}if(null!=t){const e=(0,L.getStatic)(this.constructor,"getNetwork");try{return e(v.from(t).toNumber())}catch(e){return ma.throwError("could not detect network",c.Logger.errors.NETWORK_ERROR,{chainId:t,event:"invalidNetwork",serverError:e})}}return ma.throwError("could not detect network",c.Logger.errors.NETWORK_ERROR,{event:"noNetwork"})}))}getSigner(t){return new Sa(ka,this,t)}getUncheckedSigner(t){return this.getSigner(t).connectUnchecked()}listAccounts(){return this.send("eth_accounts",[]).then((t=>t.map((t=>this.formatter.address(t)))))}send(t,e){const r={method:t,params:e,id:this._nextId++,jsonrpc:"2.0"};this.emit("debug",{action:"request",request:(0,L.deepCopy)(r),provider:this});const n=["eth_chainId","eth_blockNumber"].indexOf(t)>=0;if(n&&this._cache[t])return this._cache[t];const i=(0,ms.fetchJson)(this.connection,JSON.stringify(r),Aa).then((t=>(this.emit("debug",{action:"response",request:r,response:t,provider:this}),t)),(t=>{throw this.emit("debug",{action:"response",error:t,request:r,provider:this}),t}));return n&&(this._cache[t]=i,setTimeout((()=>{this._cache[t]=null}),0)),i}prepareRequest(t,e){switch(t){case"getBlockNumber":return["eth_blockNumber",[]];case"getGasPrice":return["eth_gasPrice",[]];case"getBalance":return["eth_getBalance",[Ea(e.address),e.blockTag]];case"getTransactionCount":return["eth_getTransactionCount",[Ea(e.address),e.blockTag]];case"getCode":return["eth_getCode",[Ea(e.address),e.blockTag]];case"getStorageAt":return["eth_getStorageAt",[Ea(e.address),(0,l.hexZeroPad)(e.position,32),e.blockTag]];case"sendTransaction":return["eth_sendRawTransaction",[e.signedTransaction]];case"getBlock":return e.blockTag?["eth_getBlockByNumber",[e.blockTag,!!e.includeTransactions]]:e.blockHash?["eth_getBlockByHash",[e.blockHash,!!e.includeTransactions]]:null;case"getTransaction":return["eth_getTransactionByHash",[e.transactionHash]];case"getTransactionReceipt":return["eth_getTransactionReceipt",[e.transactionHash]];case"call":return["eth_call",[(0,L.getStatic)(this.constructor,"hexlifyTransaction")(e.transaction,{from:!0}),e.blockTag]];case"estimateGas":return["eth_estimateGas",[(0,L.getStatic)(this.constructor,"hexlifyTransaction")(e.transaction,{from:!0})]];case"getLogs":return e.filter&&null!=e.filter.address&&(e.filter.address=Ea(e.filter.address)),["eth_getLogs",[e.filter]]}return null}perform(t,e){return ga(this,void 0,void 0,(function*(){if("call"===t||"estimateGas"===t){const t=e.transaction;if(t&&null!=t.type&&v.from(t.type).isZero()&&null==t.maxFeePerGas&&null==t.maxPriorityFeePerGas){const r=yield this.getFeeData();null==r.maxFeePerGas&&null==r.maxPriorityFeePerGas&&((e=(0,L.shallowCopy)(e)).transaction=(0,L.shallowCopy)(t),delete e.transaction.type)}}const r=this.prepareRequest(t,e);null==r&&ma.throwError(t+" not implemented",c.Logger.errors.NOT_IMPLEMENTED,{operation:t});try{return yield this.send(r[0],r[1])}catch(r){return wa(t,r,e)}}))}_startEvent(t){"pending"===t.tag&&this._startPending(),super._startEvent(t)}_startPending(){if(null!=this._pendingFilter)return;const t=this,e=this.send("eth_newPendingTransactionFilter",[]);this._pendingFilter=e,e.then((function(r){return function n(){t.send("eth_getFilterChanges",[r]).then((function(r){if(t._pendingFilter!=e)return null;let n=Promise.resolve();return r.forEach((function(e){t._emitted["t:"+e.toLowerCase()]="pending",n=n.then((function(){return t.getTransaction(e).then((function(e){return t.emit("pending",e),null}))}))})),n.then((function(){return ba(1e3)}))})).then((function(){if(t._pendingFilter==e)return setTimeout((function(){n()}),0),null;t.send("eth_uninstallFilter",[r])})).catch((t=>{}))}(),r})).catch((t=>{}))}_stopEvent(t){"pending"===t.tag&&0===this.listenerCount("pending")&&(this._pendingFilter=null),super._stopEvent(t)}static hexlifyTransaction(t,e){const r=(0,L.shallowCopy)(_a);if(e)for(const t in e)e[t]&&(r[t]=!0);(0,L.checkProperties)(t,r);const n={};return["chainId","gasLimit","gasPrice","type","maxFeePerGas","maxPriorityFeePerGas","nonce","value"].forEach((function(e){if(null==t[e])return;const r=(0,l.hexValue)(v.from(t[e]));"gasLimit"===e&&(e="gas"),n[e]=r})),["from","to","data"].forEach((function(e){null!=t[e]&&(n[e]=(0,l.hexlify)(t[e]))})),t.accessList&&(n.accessList=yi(t.accessList)),n}constructor(t,e){let r=e;null==r&&(r=new Promise(((t,e)=>{setTimeout((()=>{this.detectNetwork().then((e=>{t(e)}),(t=>{e(t)}))}),0)}))),super(r),t||(t=(0,L.getStatic)(this.constructor,"defaultUrl")()),(0,L.defineReadOnly)(this,"connection","string"==typeof t?Object.freeze({url:t}):Object.freeze((0,L.shallowCopy)(t))),this._nextId=42}}c=o("2rINa");let Na=null;try{if(Na=WebSocket,null==Na)throw new Error("inject please")}catch(t){const e=new(0,c.Logger)(Ls);Na=function(){e.throwError("WebSockets not supported in this environment",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new WebSocket()"})}}c=o("2rINa");var Ra=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const Ca=new(0,c.Logger)(Ls);let Ma=1;class Ia extends pa.JsonRpcProvider{get websocket(){return this._websocket}detectNetwork(){return this._detectNetwork}get pollingInterval(){return 0}resetEventsBlock(t){Ca.throwError("cannot reset events block on WebSocketProvider",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"resetEventBlock"})}set pollingInterval(t){Ca.throwError("cannot set polling interval on WebSocketProvider",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"setPollingInterval"})}poll(){return Ra(this,void 0,void 0,(function*(){return null}))}set polling(t){t&&Ca.throwError("cannot set polling on WebSocketProvider",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"setPolling"})}send(t,e){const r=Ma++;return new Promise(((n,i)=>{const o=JSON.stringify({method:t,params:e,id:r,jsonrpc:"2.0"});this.emit("debug",{action:"request",request:JSON.parse(o),provider:this}),this._requests[String(r)]={callback:function(t,e){return t?i(t):n(e)},payload:o},this._wsReady&&this.websocket.send(o)}))}static defaultUrl(){return"ws://localhost:8546"}_subscribe(t,e,r){return Ra(this,void 0,void 0,(function*(){let n=this._subIds[t];null==n&&(n=Promise.all(e).then((t=>this.send("eth_subscribe",t))),this._subIds[t]=n);const i=yield n;this._subs[i]={tag:t,processFunc:r}}))}_startEvent(t){switch(t.type){case"block":this._subscribe("block",["newHeads"],(t=>{const e=v.from(t.number).toNumber();this._emitted.block=e,this.emit("block",e)}));break;case"pending":this._subscribe("pending",["newPendingTransactions"],(t=>{this.emit("pending",t)}));break;case"filter":this._subscribe(t.tag,["logs",this._getFilter(t.filter)],(e=>{null==e.removed&&(e.removed=!1),this.emit(t.filter,this.formatter.filterLog(e))}));break;case"tx":{const e=t=>{const e=t.hash;this.getTransactionReceipt(e).then((t=>{t&&this.emit(e,t)}))};e(t),this._subscribe("tx",["newHeads"],(t=>{this._events.filter((t=>"tx"===t.type)).forEach(e)}));break}case"debug":case"poll":case"willPoll":case"didPoll":case"error":break;default:console.log("unhandled:",t)}}_stopEvent(t){let e=t.tag;if("tx"===t.type){if(this._events.filter((t=>"tx"===t.type)).length)return;e="tx"}else if(this.listenerCount(t.event))return;const r=this._subIds[e];r&&(delete this._subIds[e],r.then((t=>{this._subs[t]&&(delete this._subs[t],this.send("eth_unsubscribe",[t]))})))}destroy(){return Ra(this,void 0,void 0,(function*(){this.websocket.readyState===Na.CONNECTING&&(yield new Promise((t=>{this.websocket.onopen=function(){t(!0)},this.websocket.onerror=function(){t(!1)}}))),this.websocket.close(1e3)}))}constructor(t,e){"any"===e&&Ca.throwError("WebSocketProvider does not support 'any' network yet",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"network:any"}),super("string"==typeof t?t:"_websocket",e),this._pollingInterval=-1,this._wsReady=!1,(0,L.defineReadOnly)(this,"_websocket","string"==typeof t?new Na(this.connection.url):t),(0,L.defineReadOnly)(this,"_requests",{}),(0,L.defineReadOnly)(this,"_subs",{}),(0,L.defineReadOnly)(this,"_subIds",{}),(0,L.defineReadOnly)(this,"_detectNetwork",super.detectNetwork()),this.websocket.onopen=()=>{this._wsReady=!0,Object.keys(this._requests).forEach((t=>{this.websocket.send(this._requests[t].payload)}))},this.websocket.onmessage=t=>{const e=t.data,r=JSON.parse(e);if(null!=r.id){const t=String(r.id),n=this._requests[t];if(delete this._requests[t],void 0!==r.result)n.callback(null,r.result),this.emit("debug",{action:"response",request:JSON.parse(n.payload),response:r.result,provider:this});else{let t=null;r.error?(t=new Error(r.error.message||"unknown error"),(0,L.defineReadOnly)(t,"code",r.error.code||null),(0,L.defineReadOnly)(t,"response",e)):t=new Error("unknown error"),n.callback(t,void 0),this.emit("debug",{action:"response",error:t,request:JSON.parse(n.payload),provider:this})}}else if("eth_subscription"===r.method){const t=this._subs[r.params.subscription];t&&t.processFunc(r.params.result)}else console.warn("this should not happen")};const r=setInterval((()=>{this.emit("poll")}),1e3);r.unref&&r.unref()}}c=o("2rINa");var Ta={};t(Ta,"StaticJsonRpcProvider",(function(){return La}),(function(t){return La=t})),t(Ta,"UrlJsonRpcProvider",(function(){return Fa}),(function(t){return Fa=t}));c=o("2rINa");var Oa=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const Ba=new(0,c.Logger)(Ls);class La extends pa.JsonRpcProvider{detectNetwork(){const t=Object.create(null,{detectNetwork:{get:()=>super.detectNetwork}});return Oa(this,void 0,void 0,(function*(){let e=this.network;return null==e&&(e=yield t.detectNetwork.call(this),e||Ba.throwError("no network detected",c.Logger.errors.UNKNOWN_ERROR,{}),null==this._network&&((0,L.defineReadOnly)(this,"_network",e),this.emit("network",e,null))),e}))}}class Fa extends La{_startPending(){Ba.warn("WARNING: API provider does not support pending filters")}isCommunityResource(){return!1}getSigner(t){return Ba.throwError("API provider does not support signing",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"getSigner"})}listAccounts(){return Promise.resolve([])}static getApiKey(t){return t}static getUrl(t,e){return Ba.throwError("not implemented; sub-classes must override getUrl",c.Logger.errors.NOT_IMPLEMENTED,{operation:"getUrl"})}constructor(t,e){Ba.checkAbstract(new.target,Fa),t=(0,L.getStatic)(new.target,"getNetwork")(t),e=(0,L.getStatic)(new.target,"getApiKey")(e);super((0,L.getStatic)(new.target,"getUrl")(t,e),t),"string"==typeof e?(0,L.defineReadOnly)(this,"apiKey",e):null!=e&&Object.keys(e).forEach((t=>{(0,L.defineReadOnly)(this,t,e[t])}))}}const Da=new(0,c.Logger)(Ls),Ua="_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";class Ga extends da.WebSocketProvider{isCommunityResource(){return this.apiKey===Ua}constructor(t,e){const r=new qa(t,e);super(r.connection.url.replace(/^http/i,"ws").replace(".alchemyapi.",".ws.alchemyapi."),r.network),(0,L.defineReadOnly)(this,"apiKey",r.apiKey)}}class qa extends Ta.UrlJsonRpcProvider{static getWebSocketProvider(t,e){return new Ga(t,e)}static getApiKey(t){return null==t?Ua:(t&&"string"!=typeof t&&Da.throwArgumentError("invalid apiKey","apiKey",t),t)}static getUrl(t,e){let r=null;switch(t.name){case"homestead":r="eth-mainnet.alchemyapi.io/v2/";break;case"ropsten":r="eth-ropsten.alchemyapi.io/v2/";break;case"rinkeby":r="eth-rinkeby.alchemyapi.io/v2/";break;case"goerli":r="eth-goerli.alchemyapi.io/v2/";break;case"kovan":r="eth-kovan.alchemyapi.io/v2/";break;case"matic":r="polygon-mainnet.g.alchemy.com/v2/";break;case"maticmum":r="polygon-mumbai.g.alchemy.com/v2/";break;case"arbitrum":r="arb-mainnet.g.alchemy.com/v2/";break;case"arbitrum-rinkeby":r="arb-rinkeby.g.alchemy.com/v2/";break;case"arbitrum-goerli":r="arb-goerli.g.alchemy.com/v2/";break;case"optimism":r="opt-mainnet.g.alchemy.com/v2/";break;case"optimism-kovan":r="opt-kovan.g.alchemy.com/v2/";break;case"optimism-goerli":r="opt-goerli.g.alchemy.com/v2/";break;default:Da.throwArgumentError("unsupported network","network",arguments[0])}return{allowGzip:!0,url:"https://"+r+e,throttleCallback:(t,r)=>(e===Ua&&js(),Promise.resolve(!0))}}isCommunityResource(){return this.apiKey===Ua}}const ja=new(0,(c=o("2rINa")).Logger)(Ls),za="9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";function Ha(t){switch(t){case"homestead":return"rpc.ankr.com/eth/";case"ropsten":return"rpc.ankr.com/eth_ropsten/";case"rinkeby":return"rpc.ankr.com/eth_rinkeby/";case"goerli":return"rpc.ankr.com/eth_goerli/";case"matic":return"rpc.ankr.com/polygon/";case"arbitrum":return"rpc.ankr.com/arbitrum/"}return ja.throwArgumentError("unsupported network","name",t)}class Ka extends Ta.UrlJsonRpcProvider{isCommunityResource(){return this.apiKey===za}static getApiKey(t){return null==t?za:t}static getUrl(t,e){null==e&&(e=za);const r={allowGzip:!0,url:"https://"+Ha(t.name)+e,throttleCallback:(t,r)=>(e.apiKey===za&&js(),Promise.resolve(!0))};return null!=e.projectSecret&&(r.user="",r.password=e.projectSecret),r}}var Ja={};t(Ja,"CloudflareProvider",(function(){return Ya}),(function(t){return Ya=t}));c=o("2rINa");var Va=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const Wa=new(0,c.Logger)(Ls);class Ya extends Ta.UrlJsonRpcProvider{static getApiKey(t){return null!=t&&Wa.throwArgumentError("apiKey not supported for cloudflare","apiKey",t),null}static getUrl(t,e){let r=null;if("homestead"===t.name)r="https://cloudflare-eth.com/";else Wa.throwArgumentError("unsupported network","network",arguments[0]);return r}perform(t,e){const r=Object.create(null,{perform:{get:()=>super.perform}});return Va(this,void 0,void 0,(function*(){if("getBlockNumber"===t){return(yield r.perform.call(this,"getBlock",{blockTag:"latest"})).number}return r.perform.call(this,t,e)}))}}var Qa={};t(Qa,"EtherscanProvider",(function(){return iu}),(function(t){return iu=t}));l=o("3Yhqu"),c=o("2rINa");var Za=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const Xa=new(0,c.Logger)(Ls);function $a(t){const e={};for(let r in t){if(null==t[r])continue;let n=t[r];"type"===r&&0===n||(n={type:!0,gasLimit:!0,gasPrice:!0,maxFeePerGs:!0,maxPriorityFeePerGas:!0,nonce:!0,value:!0}[r]?(0,l.hexValue)((0,l.hexlify)(n)):"accessList"===r?"["+yi(n).map((t=>`{address:"${t.address}",storageKeys:["${t.storageKeys.join('","')}"]}`)).join(",")+"]":(0,l.hexlify)(n),e[r]=n)}return e}function tu(t){if(0==t.status&&("No records found"===t.message||"No transactions found"===t.message))return t.result;if(1!=t.status||"string"!=typeof t.message||!t.message.match(/^OK/)){const e=new Error("invalid response");throw e.result=JSON.stringify(t),(t.result||"").toLowerCase().indexOf("rate limit")>=0&&(e.throttleRetry=!0),e}return t.result}function eu(t){if(t&&0==t.status&&"NOTOK"==t.message&&(t.result||"").toLowerCase().indexOf("rate limit")>=0){const e=new Error("throttled response");throw e.result=JSON.stringify(t),e.throttleRetry=!0,e}if("2.0"!=t.jsonrpc){const e=new Error("invalid response");throw e.result=JSON.stringify(t),e}if(t.error){const e=new Error(t.error.message||"unknown error");throw t.error.code&&(e.code=t.error.code),t.error.data&&(e.data=t.error.data),e}return t.result}function ru(t){if("pending"===t)throw new Error("pending not supported");return"latest"===t?t:parseInt(t.substring(2),16)}function nu(t,e,r){if("call"===t&&e.code===c.Logger.errors.SERVER_ERROR){const t=e.error;if(t&&(t.message.match(/reverted/i)||t.message.match(/VM execution error/i))){let r=t.data;if(r&&(r="0x"+r.replace(/^.*0x/i,"")),(0,l.isHexString)(r))return r;Xa.throwError("missing revert data in call exception",c.Logger.errors.CALL_EXCEPTION,{error:e,data:"0x"})}}let n=e.message;throw e.code===c.Logger.errors.SERVER_ERROR&&(e.error&&"string"==typeof e.error.message?n=e.error.message:"string"==typeof e.body?n=e.body:"string"==typeof e.responseText&&(n=e.responseText)),n=(n||"").toLowerCase(),n.match(/insufficient funds/)&&Xa.throwError("insufficient funds for intrinsic transaction cost",c.Logger.errors.INSUFFICIENT_FUNDS,{error:e,method:t,transaction:r}),n.match(/same hash was already imported|transaction nonce is too low|nonce too low/)&&Xa.throwError("nonce has already been used",c.Logger.errors.NONCE_EXPIRED,{error:e,method:t,transaction:r}),n.match(/another transaction with same nonce/)&&Xa.throwError("replacement fee too low",c.Logger.errors.REPLACEMENT_UNDERPRICED,{error:e,method:t,transaction:r}),n.match(/execution failed due to an exception|execution reverted/)&&Xa.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",c.Logger.errors.UNPREDICTABLE_GAS_LIMIT,{error:e,method:t,transaction:r}),e}class iu extends ps.BaseProvider{getBaseUrl(){switch(this.network?this.network.name:"invalid"){case"homestead":return"https://api.etherscan.io";case"ropsten":return"https://api-ropsten.etherscan.io";case"rinkeby":return"https://api-rinkeby.etherscan.io";case"kovan":return"https://api-kovan.etherscan.io";case"goerli":return"https://api-goerli.etherscan.io";case"optimism":return"https://api-optimistic.etherscan.io";case"optimism-kovan":return"https://api-kovan-optimistic.etherscan.io"}return Xa.throwArgumentError("unsupported network","network",this.network.name)}getUrl(t,e){const r=Object.keys(e).reduce(((t,r)=>{const n=e[r];return null!=n&&(t+=`&${r}=${n}`),t}),""),n=this.apiKey?`&apikey=${this.apiKey}`:"";return`${this.baseUrl}/api?module=${t}${r}${n}`}getPostUrl(){return`${this.baseUrl}/api`}getPostData(t,e){return e.module=t,e.apikey=this.apiKey,e}fetch(t,e,r){return Za(this,void 0,void 0,(function*(){const n=r?this.getPostUrl():this.getUrl(t,e),i=r?this.getPostData(t,e):null,o="proxy"===t?eu:tu;this.emit("debug",{action:"request",request:n,provider:this});const s={url:n,throttleSlotInterval:1e3,throttleCallback:(t,e)=>(this.isCommunityResource()&&js(),Promise.resolve(!0))};let a=null;i&&(s.headers={"content-type":"application/x-www-form-urlencoded; charset=UTF-8"},a=Object.keys(i).map((t=>`${t}=${i[t]}`)).join("&"));const u=yield(0,ms.fetchJson)(s,a,o||eu);return this.emit("debug",{action:"response",request:n,response:(0,L.deepCopy)(u),provider:this}),u}))}detectNetwork(){return Za(this,void 0,void 0,(function*(){return this.network}))}perform(t,e){const r=Object.create(null,{perform:{get:()=>super.perform}});return Za(this,void 0,void 0,(function*(){switch(t){case"getBlockNumber":return this.fetch("proxy",{action:"eth_blockNumber"});case"getGasPrice":return this.fetch("proxy",{action:"eth_gasPrice"});case"getBalance":return this.fetch("account",{action:"balance",address:e.address,tag:e.blockTag});case"getTransactionCount":return this.fetch("proxy",{action:"eth_getTransactionCount",address:e.address,tag:e.blockTag});case"getCode":return this.fetch("proxy",{action:"eth_getCode",address:e.address,tag:e.blockTag});case"getStorageAt":return this.fetch("proxy",{action:"eth_getStorageAt",address:e.address,position:e.position,tag:e.blockTag});case"sendTransaction":return this.fetch("proxy",{action:"eth_sendRawTransaction",hex:e.signedTransaction},!0).catch((t=>nu("sendTransaction",t,e.signedTransaction)));case"getBlock":if(e.blockTag)return this.fetch("proxy",{action:"eth_getBlockByNumber",tag:e.blockTag,boolean:e.includeTransactions?"true":"false"});throw new Error("getBlock by blockHash not implemented");case"getTransaction":return this.fetch("proxy",{action:"eth_getTransactionByHash",txhash:e.transactionHash});case"getTransactionReceipt":return this.fetch("proxy",{action:"eth_getTransactionReceipt",txhash:e.transactionHash});case"call":{if("latest"!==e.blockTag)throw new Error("EtherscanProvider does not support blockTag for call");const t=$a(e.transaction);t.module="proxy",t.action="eth_call";try{return yield this.fetch("proxy",t,!0)}catch(t){return nu("call",t,e.transaction)}}case"estimateGas":{const t=$a(e.transaction);t.module="proxy",t.action="eth_estimateGas";try{return yield this.fetch("proxy",t,!0)}catch(t){return nu("estimateGas",t,e.transaction)}}case"getLogs":{const t={action:"getLogs"};if(e.filter.fromBlock&&(t.fromBlock=ru(e.filter.fromBlock)),e.filter.toBlock&&(t.toBlock=ru(e.filter.toBlock)),e.filter.address&&(t.address=e.filter.address),e.filter.topics&&e.filter.topics.length>0&&(e.filter.topics.length>1&&Xa.throwError("unsupported topic count",c.Logger.errors.UNSUPPORTED_OPERATION,{topics:e.filter.topics}),1===e.filter.topics.length)){const r=e.filter.topics[0];"string"==typeof r&&66===r.length||Xa.throwError("unsupported topic format",c.Logger.errors.UNSUPPORTED_OPERATION,{topic0:r}),t.topic0=r}const r=yield this.fetch("logs",t);let n={};for(let t=0;t<r.length;t++){const e=r[t];if(null==e.blockHash){if(null==n[e.blockNumber]){const t=yield this.getBlock(e.blockNumber);t&&(n[e.blockNumber]=t.hash)}e.blockHash=n[e.blockNumber]}}return r}case"getEtherPrice":return"homestead"!==this.network.name?0:parseFloat((yield this.fetch("stats",{action:"ethprice"})).ethusd)}return r.perform.call(this,t,e)}))}getHistory(t,e,r){return Za(this,void 0,void 0,(function*(){const n={action:"txlist",address:yield this.resolveName(t),startblock:null==e?0:e,endblock:null==r?99999999:r,sort:"asc"};return(yield this.fetch("account",n)).map((t=>{["contractAddress","to"].forEach((function(e){""==t[e]&&delete t[e]})),null==t.creates&&null!=t.contractAddress&&(t.creates=t.contractAddress);const e=this.formatter.transactionResponse(t);return t.timeStamp&&(e.timestamp=parseInt(t.timeStamp)),e}))}))}isCommunityResource(){return null==this.apiKey}constructor(t,e){super(t),(0,L.defineReadOnly)(this,"baseUrl",this.getBaseUrl()),(0,L.defineReadOnly)(this,"apiKey",e||null)}}var ou={};t(ou,"FallbackProvider",(function(){return bu}),(function(t){return bu=t}));l=o("3Yhqu"),c=o("2rINa");var su=function(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{u(n.next(t))}catch(t){o(t)}}function a(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}u((n=n.apply(t,e||[])).next())}))};const au=new(0,c.Logger)(Ls);function uu(){return(new Date).getTime()}function lu(t){let e=null;for(let r=0;r<t.length;r++){const n=t[r];if(null==n)return null;e?e.name===n.name&&e.chainId===n.chainId&&(e.ensAddress===n.ensAddress||null==e.ensAddress&&null==n.ensAddress)||au.throwArgumentError("provider mismatch","networks",t):e=n}return e}function cu(t,e){t=t.slice().sort();const r=Math.floor(t.length/2);if(t.length%2)return t[r];const n=t[r-1],i=t[r];return null!=e&&Math.abs(n-i)>e?null:(n+i)/2}function hu(t){if(null===t)return"null";if("number"==typeof t||"boolean"==typeof t)return JSON.stringify(t);if("string"==typeof t)return t;if(v.isBigNumber(t))return t.toString();if(Array.isArray(t))return JSON.stringify(t.map((t=>hu(t))));if("object"==typeof t){const e=Object.keys(t);return e.sort(),"{"+e.map((e=>{let r=t[e];return r="function"==typeof r?"[function]":hu(r),JSON.stringify(e)+":"+r})).join(",")+"}"}throw new Error("unknown value type: "+typeof t)}let fu=1;function du(t){let e=null,r=null,n=new Promise((n=>{e=function(){r&&(clearTimeout(r),r=null),n()},r=setTimeout(e,t)}));return{cancel:e,getPromise:function(){return n},wait:t=>(n=n.then(t),n)}}const pu=[c.Logger.errors.CALL_EXCEPTION,c.Logger.errors.INSUFFICIENT_FUNDS,c.Logger.errors.NONCE_EXPIRED,c.Logger.errors.REPLACEMENT_UNDERPRICED,c.Logger.errors.UNPREDICTABLE_GAS_LIMIT],gu=["address","args","errorArgs","errorSignature","method","transaction"];function mu(t,e){const r={weight:t.weight};return Object.defineProperty(r,"provider",{get:()=>t.provider}),t.start&&(r.start=t.start),e&&(r.duration=e-t.start),t.done&&(t.error?r.error=t.error:r.result=t.result||null),r}function yu(t,e,r){let n=hu;switch(e){case"getBlockNumber":return function(e){const r=e.map((t=>t.result));let n=cu(e.map((t=>t.result)),2);if(null!=n)return n=Math.ceil(n),r.indexOf(n+1)>=0&&n++,n>=t._highestBlockNumber&&(t._highestBlockNumber=n),t._highestBlockNumber};case"getGasPrice":return function(t){const e=t.map((t=>t.result));return e.sort(),e[Math.floor(e.length/2)]};case"getEtherPrice":return function(t){return cu(t.map((t=>t.result)))};case"getBalance":case"getTransactionCount":case"getCode":case"getStorageAt":case"call":case"estimateGas":case"getLogs":break;case"getTransaction":case"getTransactionReceipt":n=function(t){return null==t?null:((t=(0,L.shallowCopy)(t)).confirmations=-1,hu(t))};break;case"getBlock":n=r.includeTransactions?function(t){return null==t?null:((t=(0,L.shallowCopy)(t)).transactions=t.transactions.map((t=>((t=(0,L.shallowCopy)(t)).confirmations=-1,t))),hu(t))}:function(t){return null==t?null:hu(t)};break;default:throw new Error("unknown method: "+e)}return function(t,e){return function(r){const n={};r.forEach((e=>{const r=t(e.result);n[r]||(n[r]={count:0,result:e.result}),n[r].count++}));const i=Object.keys(n);for(let t=0;t<i.length;t++){const r=n[i[t]];if(r.count>=e)return r.result}}}(n,t.quorum)}function vu(t,e){return su(this,void 0,void 0,(function*(){const r=t.provider;return null!=r.blockNumber&&r.blockNumber>=e||-1===e?r:(0,ms.poll)((()=>new Promise(((n,i)=>{setTimeout((function(){return r.blockNumber>=e?n(r):t.cancelled?n(null):n(void 0)}),0)}))),{oncePoll:r})}))}function wu(t,e,r,n){return su(this,void 0,void 0,(function*(){let i=t.provider;switch(r){case"getBlockNumber":case"getGasPrice":return i[r]();case"getEtherPrice":if(i.getEtherPrice)return i.getEtherPrice();break;case"getBalance":case"getTransactionCount":case"getCode":return n.blockTag&&(0,l.isHexString)(n.blockTag)&&(i=yield vu(t,e)),i[r](n.address,n.blockTag||"latest");case"getStorageAt":return n.blockTag&&(0,l.isHexString)(n.blockTag)&&(i=yield vu(t,e)),i.getStorageAt(n.address,n.position,n.blockTag||"latest");case"getBlock":return n.blockTag&&(0,l.isHexString)(n.blockTag)&&(i=yield vu(t,e)),i[n.includeTransactions?"getBlockWithTransactions":"getBlock"](n.blockTag||n.blockHash);case"call":case"estimateGas":return n.blockTag&&(0,l.isHexString)(n.blockTag)&&(i=yield vu(t,e)),"call"===r&&n.blockTag?i[r](n.transaction,n.blockTag):i[r](n.transaction);case"getTransaction":case"getTransactionReceipt":return i[r](n.transactionHash);case"getLogs":{let r=n.filter;return(r.fromBlock&&(0,l.isHexString)(r.fromBlock)||r.toBlock&&(0,l.isHexString)(r.toBlock))&&(i=yield vu(t,e)),i.getLogs(r)}}return au.throwError("unknown method error",c.Logger.errors.UNKNOWN_ERROR,{method:r,params:n})}))}class bu extends ps.BaseProvider{detectNetwork(){return su(this,void 0,void 0,(function*(){return lu(yield Promise.all(this.providerConfigs.map((t=>t.provider.getNetwork()))))}))}perform(t,e){return su(this,void 0,void 0,(function*(){if("sendTransaction"===t){const t=yield Promise.all(this.providerConfigs.map((t=>t.provider.sendTransaction(e.signedTransaction).then((t=>t.hash),(t=>t)))));for(let e=0;e<t.length;e++){const r=t[e];if("string"==typeof r)return r}throw t[0]}-1===this._highestBlockNumber&&"getBlockNumber"!==t&&(yield this.getBlockNumber());const r=yu(this,t,e),n=xo(this.providerConfigs.map(L.shallowCopy));n.sort(((t,e)=>t.priority-e.priority));const i=this._highestBlockNumber;let o=0,s=!0;for(;;){const a=uu();let u=n.filter((t=>t.runner&&a-t.start<t.stallTimeout)).reduce(((t,e)=>t+e.weight),0);for(;u<this.quorum&&o<n.length;){const r=n[o++],s=fu++;r.start=uu(),r.staller=du(r.stallTimeout),r.staller.wait((()=>{r.staller=null})),r.runner=wu(r,i,t,e).then((n=>{r.done=!0,r.result=n,this.listenerCount("debug")&&this.emit("debug",{action:"request",rid:s,backend:mu(r,uu()),request:{method:t,params:(0,L.deepCopy)(e)},provider:this})}),(n=>{r.done=!0,r.error=n,this.listenerCount("debug")&&this.emit("debug",{action:"request",rid:s,backend:mu(r,uu()),request:{method:t,params:(0,L.deepCopy)(e)},provider:this})})),this.listenerCount("debug")&&this.emit("debug",{action:"request",rid:s,backend:mu(r,null),request:{method:t,params:(0,L.deepCopy)(e)},provider:this}),u+=r.weight}const l=[];n.forEach((t=>{!t.done&&t.runner&&(l.push(t.runner),t.staller&&l.push(t.staller.getPromise()))})),l.length&&(yield Promise.race(l));const c=n.filter((t=>t.done&&null==t.error));if(c.length>=this.quorum){const t=r(c);if(void 0!==t)return n.forEach((t=>{t.staller&&t.staller.cancel(),t.cancelled=!0})),t;s||(yield du(100).getPromise()),s=!1}const h=n.reduce(((t,e)=>{if(!e.done||null==e.error)return t;const r=e.error.code;return pu.indexOf(r)>=0&&(t[r]||(t[r]={error:e.error,weight:0}),t[r].weight+=e.weight),t}),{});if(Object.keys(h).forEach((t=>{const e=h[t];if(e.weight<this.quorum)return;n.forEach((t=>{t.staller&&t.staller.cancel(),t.cancelled=!0}));const r=e.error,i={};gu.forEach((t=>{null!=r[t]&&(i[t]=r[t])})),au.throwError(r.reason||r.message,t,i)})),0===n.filter((t=>!t.done)).length)break}return n.forEach((t=>{t.staller&&t.staller.cancel(),t.cancelled=!0})),au.throwError("failed to meet quorum",c.Logger.errors.SERVER_ERROR,{method:t,params:e,results:n.map((t=>mu(t))),provider:this})}))}constructor(t,e){0===t.length&&au.throwArgumentError("missing providers","providers",t);const r=t.map(((t,e)=>{if(nn.Provider.isProvider(t)){const e=Gs(t)?2e3:750,r=1;return Object.freeze({provider:t,weight:1,stallTimeout:e,priority:r})}const r=(0,L.shallowCopy)(t);null==r.priority&&(r.priority=1),null==r.stallTimeout&&(r.stallTimeout=Gs(t)?2e3:750),null==r.weight&&(r.weight=1);const n=r.weight;return(n%1||n>512||n<1)&&au.throwArgumentError("invalid weight; must be integer in [1, 512]",`providers[${e}].weight`,n),Object.freeze(r)})),n=r.reduce(((t,e)=>t+e.weight),0);null==e?e=n/2:e>n&&au.throwArgumentError("quorum will always fail; larger than total weight","quorum",e);let i=lu(r.map((t=>t.provider.network)));null==i&&(i=new Promise(((t,e)=>{setTimeout((()=>{this.detectNetwork().then(t,e)}),0)}))),super(i),(0,L.defineReadOnly)(this,"providerConfigs",Object.freeze(r)),(0,L.defineReadOnly)(this,"quorum",e),this._highestBlockNumber=-1}}const Au=null;const Eu=new(0,(c=o("2rINa")).Logger)(Ls),ku="84842078b09946638c03157f83405213";class Su extends da.WebSocketProvider{isCommunityResource(){return this.projectId===ku}constructor(t,e){const r=new xu(t,e),n=r.connection;n.password&&Eu.throwError("INFURA WebSocket project secrets unsupported",c.Logger.errors.UNSUPPORTED_OPERATION,{operation:"InfuraProvider.getWebSocketProvider()"});super(n.url.replace(/^http/i,"ws").replace("/v3/","/ws/v3/"),t),(0,L.defineReadOnly)(this,"apiKey",r.projectId),(0,L.defineReadOnly)(this,"projectId",r.projectId),(0,L.defineReadOnly)(this,"projectSecret",r.projectSecret)}}class xu extends Ta.UrlJsonRpcProvider{static getWebSocketProvider(t,e){return new Su(t,e)}static getApiKey(t){const e={apiKey:ku,projectId:ku,projectSecret:null};return null==t||("string"==typeof t?e.projectId=t:null!=t.projectSecret?(Eu.assertArgument("string"==typeof t.projectId,"projectSecret requires a projectId","projectId",t.projectId),Eu.assertArgument("string"==typeof t.projectSecret,"invalid projectSecret","projectSecret","[REDACTED]"),e.projectId=t.projectId,e.projectSecret=t.projectSecret):t.projectId&&(e.projectId=t.projectId),e.apiKey=e.projectId),e}static getUrl(t,e){let r=null;switch(t?t.name:"unknown"){case"homestead":r="mainnet.infura.io";break;case"ropsten":r="ropsten.infura.io";break;case"rinkeby":r="rinkeby.infura.io";break;case"kovan":r="kovan.infura.io";break;case"goerli":r="goerli.infura.io";break;case"matic":r="polygon-mainnet.infura.io";break;case"maticmum":r="polygon-mumbai.infura.io";break;case"optimism":r="optimism-mainnet.infura.io";break;case"optimism-kovan":r="optimism-kovan.infura.io";break;case"arbitrum":r="arbitrum-mainnet.infura.io";break;case"arbitrum-rinkeby":r="arbitrum-rinkeby.infura.io";break;default:Eu.throwError("unsupported network",c.Logger.errors.INVALID_ARGUMENT,{argument:"network",value:t})}const n={allowGzip:!0,url:"https://"+r+"/v3/"+e.projectId,throttleCallback:(t,r)=>(e.projectId===ku&&js(),Promise.resolve(!0))};return null!=e.projectSecret&&(n.user="",n.password=e.projectSecret),n}isCommunityResource(){return this.projectId===ku}}class _u extends pa.JsonRpcProvider{send(t,e){const r={method:t,params:e,id:this._nextId++,jsonrpc:"2.0"};null==this._pendingBatch&&(this._pendingBatch=[]);const n={request:r,resolve:null,reject:null},i=new Promise(((t,e)=>{n.resolve=t,n.reject=e}));return this._pendingBatch.push(n),this._pendingBatchAggregator||(this._pendingBatchAggregator=setTimeout((()=>{const t=this._pendingBatch;this._pendingBatch=null,this._pendingBatchAggregator=null;const e=t.map((t=>t.request));return this.emit("debug",{action:"requestBatch",request:(0,L.deepCopy)(e),provider:this}),(0,ms.fetchJson)(this.connection,JSON.stringify(e)).then((r=>{this.emit("debug",{action:"response",request:e,response:r,provider:this}),t.forEach(((t,e)=>{const n=r[e];if(n.error){const e=new Error(n.error.message);e.code=n.error.code,e.data=n.error.data,t.reject(e)}else t.resolve(n.result)}))}),(r=>{this.emit("debug",{action:"response",error:r,request:e,provider:this}),t.forEach((t=>{t.reject(r)}))}))}),10)),i}}const Pu=new(0,(c=o("2rINa")).Logger)(Ls);class Nu extends Ta.UrlJsonRpcProvider{static getApiKey(t){return t&&"string"!=typeof t&&Pu.throwArgumentError("invalid apiKey","apiKey",t),t||"ETHERS_JS_SHARED"}static getUrl(t,e){Pu.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");let r=null;switch(t.name){case"homestead":r="https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";break;case"ropsten":r="https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";break;case"rinkeby":r="https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";break;case"goerli":r="https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";break;case"kovan":r="https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";break;default:Pu.throwArgumentError("unsupported network","network",arguments[0])}return r+"?apiKey="+e}}const Ru=new(0,(c=o("2rINa")).Logger)(Ls),Cu="62e1ad51b37b8e00394bda3b";class Mu extends Ta.UrlJsonRpcProvider{static getApiKey(t){const e={applicationId:null,loadBalancer:!0,applicationSecretKey:null};return null==t?e.applicationId=Cu:"string"==typeof t?e.applicationId=t:null!=t.applicationSecretKey?(e.applicationId=t.applicationId,e.applicationSecretKey=t.applicationSecretKey):t.applicationId?e.applicationId=t.applicationId:Ru.throwArgumentError("unsupported PocketProvider apiKey","apiKey",t),e}static getUrl(t,e){let r=null;switch(t?t.name:"unknown"){case"goerli":r="eth-goerli.gateway.pokt.network";break;case"homestead":r="eth-mainnet.gateway.pokt.network";break;case"kovan":r="poa-kovan.gateway.pokt.network";break;case"matic":r="poly-mainnet.gateway.pokt.network";break;case"maticmum":r="polygon-mumbai-rpc.gateway.pokt.network";break;case"rinkeby":r="eth-rinkeby.gateway.pokt.network";break;case"ropsten":r="eth-ropsten.gateway.pokt.network";break;default:Ru.throwError("unsupported network",c.Logger.errors.INVALID_ARGUMENT,{argument:"network",value:t})}const n={headers:{},url:`https://${r}/v1/lb/${e.applicationId}`};return null!=e.applicationSecretKey&&(n.user="",n.password=e.applicationSecretKey),n}isCommunityResource(){return this.applicationId===Cu}}const Iu=new(0,(c=o("2rINa")).Logger)(Ls);let Tu=1;function Ou(t,e){const r="Web3LegacyFetcher";return function(t,n){const i={method:t,params:n,id:Tu++,jsonrpc:"2.0"};return new Promise(((t,n)=>{this.emit("debug",{action:"request",fetcher:r,request:(0,L.deepCopy)(i),provider:this}),e(i,((e,o)=>{if(e)return this.emit("debug",{action:"response",fetcher:r,error:e,request:i,provider:this}),n(e);if(this.emit("debug",{action:"response",fetcher:r,request:i,response:o,provider:this}),o.error){const t=new Error(o.error.message);return t.code=o.error.code,t.data=o.error.data,n(t)}t(o.result)}))}))}}class Bu extends pa.JsonRpcProvider{send(t,e){return this.jsonRpcFetchFunc(t,e)}constructor(t,e){null==t&&Iu.throwArgumentError("missing provider","provider",t);let r=null,n=null,i=null;"function"==typeof t?(r="unknown:",n=t):(r=t.host||t.path||"",!r&&t.isMetaMask&&(r="metamask"),i=t,t.request?(""===r&&(r="eip-1193:"),n=function(t){return function(e,r){null==r&&(r=[]);const n={method:e,params:r};return this.emit("debug",{action:"request",fetcher:"Eip1193Fetcher",request:(0,L.deepCopy)(n),provider:this}),t.request(n).then((t=>(this.emit("debug",{action:"response",fetcher:"Eip1193Fetcher",request:n,response:t,provider:this}),t)),(t=>{throw this.emit("debug",{action:"response",fetcher:"Eip1193Fetcher",request:n,error:t,provider:this}),t}))}}(t)):t.sendAsync?n=Ou(0,t.sendAsync.bind(t)):t.send?n=Ou(0,t.send.bind(t)):Iu.throwArgumentError("unsupported provider","provider",t),r||(r="unknown:")),super(r,e),(0,L.defineReadOnly)(this,"jsonRpcFetchFunc",n),(0,L.defineReadOnly)(this,"provider",i)}}const Lu=new(0,(c=o("2rINa")).Logger)(Ls);function Fu(t,e){if(null==t&&(t="homestead"),"string"==typeof t){const e=t.match(/^(ws|http)s?:/i);if(e)switch(e[1].toLowerCase()){case"http":case"https":return new(0,pa.JsonRpcProvider)(t);case"ws":case"wss":return new(0,da.WebSocketProvider)(t);default:Lu.throwArgumentError("unsupported URL scheme","network",t)}}const r=ds(t);return r&&r._defaultProvider||Lu.throwError("unsupported getDefaultProvider network",c.Logger.errors.NETWORK_ERROR,{operation:"getDefaultProvider",network:t}),r._defaultProvider({FallbackProvider:ou.FallbackProvider,AlchemyProvider:qa,AnkrProvider:Ka,CloudflareProvider:Ja.CloudflareProvider,EtherscanProvider:Qa.EtherscanProvider,InfuraProvider:xu,JsonRpcProvider:pa.JsonRpcProvider,NodesmithProvider:Nu,PocketProvider:Mu,Web3Provider:Bu,IpcProvider:Au},e)}var Du={};t(Du,"AbiCoder",(function(){return er})),t(Du,"defaultAbiCoder",(function(){return rr})),t(Du,"Fragment",(function(){return st})),t(Du,"ConstructorFragment",(function(){return ht})),t(Du,"ErrorFragment",(function(){return pt})),t(Du,"EventFragment",(function(){return at})),t(Du,"FunctionFragment",(function(){return ft})),t(Du,"ParamType",(function(){return it})),t(Du,"FormatTypes",(function(){return rt})),t(Du,"checkResultErrors",(function(){return bt})),t(Du,"Logger",(function(){return o("2rINa").Logger})),t(Du,"RLP",(function(){return o("7ZdUu")})),t(Du,"_fetchData",(function(){return ms._fetchData})),t(Du,"fetchJson",(function(){return ms.fetchJson})),t(Du,"poll",(function(){return ms.poll})),t(Du,"checkProperties",(function(){return L.checkProperties})),t(Du,"deepCopy",(function(){return L.deepCopy})),t(Du,"defineReadOnly",(function(){return L.defineReadOnly})),t(Du,"getStatic",(function(){return L.getStatic})),t(Du,"resolveProperties",(function(){return L.resolveProperties})),t(Du,"shallowCopy",(function(){return L.shallowCopy})),t(Du,"arrayify",(function(){return o("3Yhqu").arrayify})),t(Du,"concat",(function(){return o("3Yhqu").concat})),t(Du,"stripZeros",(function(){return o("3Yhqu").stripZeros})),t(Du,"zeroPad",(function(){return o("3Yhqu").zeroPad})),t(Du,"isBytes",(function(){return o("3Yhqu").isBytes})),t(Du,"isBytesLike",(function(){return o("3Yhqu").isBytesLike})),t(Du,"defaultPath",(function(){return po})),t(Du,"HDNode",(function(){return go})),t(Du,"SigningKey",(function(){return ni})),t(Du,"Interface",(function(){return rn})),t(Du,"LogDescription",(function(){return Qr})),t(Du,"TransactionDescription",(function(){return Zr})),t(Du,"base58",(function(){return zi})),t(Du,"base64",(function(){return o("G6hN9")})),t(Du,"hexlify",(function(){return o("3Yhqu").hexlify})),t(Du,"isHexString",(function(){return o("3Yhqu").isHexString})),t(Du,"hexConcat",(function(){return o("3Yhqu").hexConcat})),t(Du,"hexStripZeros",(function(){return o("3Yhqu").hexStripZeros})),t(Du,"hexValue",(function(){return o("3Yhqu").hexValue})),t(Du,"hexZeroPad",(function(){return o("3Yhqu").hexZeroPad})),t(Du,"hexDataLength",(function(){return o("3Yhqu").hexDataLength})),t(Du,"hexDataSlice",(function(){return o("3Yhqu").hexDataSlice})),t(Du,"nameprep",(function(){return Ye})),t(Du,"_toEscapedUtf8String",(function(){return Te})),t(Du,"toUtf8Bytes",(function(){return Me})),t(Du,"toUtf8CodePoints",(function(){return Le})),t(Du,"toUtf8String",(function(){return Be})),t(Du,"Utf8ErrorFuncs",(function(){return Re})),t(Du,"formatBytes32String",(function(){return Fe})),t(Du,"parseBytes32String",(function(){return De})),t(Du,"dnsEncode",(function(){return Cr})),t(Du,"hashMessage",(function(){return Mr})),t(Du,"namehash",(function(){return Rr})),t(Du,"isValidName",(function(){return Nr})),t(Du,"id",(function(){return nr})),t(Du,"_TypedDataEncoder",(function(){return Ir.TypedDataEncoder})),t(Du,"getAddress",(function(){return Wt})),t(Du,"getIcapAddress",(function(){return Qt})),t(Du,"getContractAddress",(function(){return Zt})),t(Du,"getCreate2Address",(function(){return Xt})),t(Du,"isAddress",(function(){return Yt})),t(Du,"formatEther",(function(){return Xu})),t(Du,"parseEther",(function(){return $u})),t(Du,"formatUnits",(function(){return Qu})),t(Du,"parseUnits",(function(){return Zu})),t(Du,"commify",(function(){return Yu})),t(Du,"computeHmac",(function(){return Qi})),t(Du,"keccak256",(function(){return Gt})),t(Du,"ripemd160",(function(){return Vi})),t(Du,"sha256",(function(){return Wi})),t(Du,"sha512",(function(){return Yi})),t(Du,"randomBytes",(function(){return So})),t(Du,"shuffled",(function(){return xo})),t(Du,"solidityPack",(function(){return Hu})),t(Du,"solidityKeccak256",(function(){return Ku})),t(Du,"soliditySha256",(function(){return Ju})),t(Du,"splitSignature",(function(){return o("3Yhqu").splitSignature})),t(Du,"joinSignature",(function(){return o("3Yhqu").joinSignature})),t(Du,"accessListify",(function(){return yi})),t(Du,"parseTransaction",(function(){return ki})),t(Du,"serializeTransaction",(function(){return Ai})),t(Du,"TransactionTypes",(function(){return ai})),t(Du,"getJsonWalletAddress",(function(){return Do})),t(Du,"computeAddress",(function(){return di})),t(Du,"recoverAddress",(function(){return pi})),t(Du,"computePublicKey",(function(){return oi})),t(Du,"recoverPublicKey",(function(){return ii})),t(Du,"verifyMessage",(function(){return qi.verifyMessage})),t(Du,"verifyTypedData",(function(){return qi.verifyTypedData})),t(Du,"getAccountPath",(function(){return bo})),t(Du,"mnemonicToEntropy",(function(){return yo})),t(Du,"entropyToMnemonic",(function(){return vo})),t(Du,"isValidMnemonic",(function(){return wo})),t(Du,"mnemonicToSeed",(function(){return mo})),t(Du,"SupportedAlgorithm",(function(){return Hi})),t(Du,"UnicodeNormalizationForm",(function(){return Se})),t(Du,"Utf8ErrorReason",(function(){return _e})),t(Du,"Indexed",(function(){return $r}));o("G6hN9"),l=o("3Yhqu"),c=o("2rINa"),l=o("3Yhqu"),c=o("2rINa");const Uu=new RegExp("^bytes([0-9]+)$"),Gu=new RegExp("^(u?int)([0-9]*)$"),qu=new RegExp("^(.*)\\[([0-9]*)\\]$"),ju=new(0,c.Logger)("solidity/5.7.0");function zu(t,e,r){switch(t){case"address":return r?(0,l.zeroPad)(e,32):(0,l.arrayify)(e);case"string":return Me(e);case"bytes":return(0,l.arrayify)(e);case"bool":return e=e?"0x01":"0x00",r?(0,l.zeroPad)(e,32):(0,l.arrayify)(e)}let n=t.match(Gu);if(n){let i=parseInt(n[2]||"256");return(n[2]&&String(i)!==n[2]||i%8!=0||0===i||i>256)&&ju.throwArgumentError("invalid number type","type",t),r&&(i=256),e=v.from(e).toTwos(i),(0,l.zeroPad)(e,i/8)}if(n=t.match(Uu),n){const i=parseInt(n[1]);return(String(i)!==n[1]||0===i||i>32)&&ju.throwArgumentError("invalid bytes type","type",t),(0,l.arrayify)(e).byteLength!==i&&ju.throwArgumentError(`invalid value for ${t}`,"value",e),r?(0,l.arrayify)((e+"0000000000000000000000000000000000000000000000000000000000000000").substring(0,66)):e}if(n=t.match(qu),n&&Array.isArray(e)){const r=n[1];parseInt(n[2]||String(e.length))!=e.length&&ju.throwArgumentError(`invalid array length for ${t}`,"value",e);const i=[];return e.forEach((function(t){i.push(zu(r,t,!0))})),(0,l.concat)(i)}return ju.throwArgumentError("invalid type","type",t)}function Hu(t,e){t.length!=e.length&&ju.throwArgumentError("wrong number of values; expected ${ types.length }","values",e);const r=[];return t.forEach((function(t,n){r.push(zu(t,e[n]))})),(0,l.hexlify)((0,l.concat)(r))}function Ku(t,e){return Gt(Hu(t,e))}function Ju(t,e){return Wi(Hu(t,e))}qt=o("7ZdUu");const Vu=new(0,(c=o("2rINa")).Logger)("units/5.7.0"),Wu=["wei","kwei","mwei","gwei","szabo","finney","ether"];function Yu(t){const e=String(t).split(".");(e.length>2||!e[0].match(/^-?[0-9]*$/)||e[1]&&!e[1].match(/^[0-9]*$/)||"."===t||"-."===t)&&Vu.throwArgumentError("invalid value","value",t);let r=e[0],n="";for("-"===r.substring(0,1)&&(n="-",r=r.substring(1));"0"===r.substring(0,1);)r=r.substring(1);""===r&&(r="0");let i="";for(2===e.length&&(i="."+(e[1]||"0"));i.length>2&&"0"===i[i.length-1];)i=i.substring(0,i.length-1);const o=[];for(;r.length;){if(r.length<=3){o.unshift(r);break}{const t=r.length-3;o.unshift(r.substring(t)),r=r.substring(0,t)}}return n+o.join(",")+i}function Qu(t,e){if("string"==typeof e){const t=Wu.indexOf(e);-1!==t&&(e=3*t)}return C(t,null!=e?e:18)}function Zu(t,e){if("string"!=typeof t&&Vu.throwArgumentError("value must be a string","value",t),"string"==typeof e){const t=Wu.indexOf(e);-1!==t&&(e=3*t)}return M(t,null!=e?e:18)}function Xu(t){return Qu(t,18)}function $u(t){return Zu(t,18)}c=o("2rINa");const tl="ethers/5.7.0",el=new(0,c.Logger)(tl);c=o("2rINa"),c=o("2rINa");try{const t=window;null==t._ethers&&(t._ethers=s)}catch(t){}s.utils.defaultPath;function rl(t){if(!t.mnemonic)throw new Error("Expected an HDNode with a mnemonic");return{mnemonic:t.mnemonic,privateKey:t.privateKey,address:t.address,name:null}}e.onmessage=t=>{const{phrase:r,n:n}=t.data,i=function({phrase:t,n:e}){const r=[],n=s.utils.HDNode.fromMnemonic(t);for(let t=0;t<e;t++){const e=`m/44'/60'/0'/0/${t}`,i=n.derivePath(e);r.push(rl(i))}return r}({phrase:r,n:n});e.postMessage(i)}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
