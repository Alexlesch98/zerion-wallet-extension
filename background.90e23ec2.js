!function(){function e(e,t,r,n){Object.defineProperty(e,t,{get:r,set:n,enumerable:!0,configurable:!0})}var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};function r(e){return e&&e.__esModule?e.default:e}var n={},i={},o=t.parcelRequire7f4b;null==o&&((o=function(e){if(e in n)return n[e].exports;if(e in i){var t=i[e];delete i[e];var r={id:e,exports:{}};return n[e]=r,t.call(r.exports,r,r.exports),r.exports}var o=new Error("Cannot find module '"+e+"'");throw o.code="MODULE_NOT_FOUND",o}).register=function(e,t){i[e]=t},t.parcelRequire7f4b=o),o.register("8wNGQ",(function(t,r){var n,i;e(t.exports,"register",(function(){return n}),(function(e){return n=e})),e(t.exports,"resolve",(function(){return i}),(function(e){return i=e}));var o={};n=function(e){for(var t=Object.keys(e),r=0;r<t.length;r++)o[t[r]]=e[t[r]]},i=function(e){var t=o[e];if(null==t)throw new Error("Could not resolve bundle with id "+e);return t}})),o.register("iLNs9",(function(e,t){var r;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,r=function(e){"use strict";var t,r;if(!(null===(t=globalThis.chrome)||void 0===t||null===(r=t.runtime)||void 0===r?void 0:r.id))throw new Error("This script should only be loaded in a browser extension.");if(void 0===globalThis.browser||Object.getPrototypeOf(globalThis.browser)!==Object.prototype){const t="The message port closed before a response was received.",r=e=>{const r={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(r).length)throw new Error("api-metadata.json has not been included in browser-polyfill");class n extends WeakMap{get(e){return this.has(e)||this.set(e,this.createItem(e)),super.get(e)}constructor(e,t){super(t),this.createItem=e}}const i=(t,r)=>(...n)=>{e.runtime.lastError?t.reject(new Error(e.runtime.lastError.message)):r.singleCallbackArg||n.length<=1&&!1!==r.singleCallbackArg?t.resolve(n[0]):t.resolve(n)},o=e=>1==e?"argument":"arguments",s=(e,t,r)=>new Proxy(t,{apply:(t,n,i)=>r.call(n,e,...i)});let a=Function.call.bind(Object.prototype.hasOwnProperty);const u=(e,t={},r={})=>{let n=Object.create(null),c={has:(t,r)=>r in e||r in n,get(c,l,h){if(l in n)return n[l];if(!(l in e))return;let f=e[l];if("function"==typeof f)if("function"==typeof t[l])f=s(e,e[l],t[l]);else if(a(r,l)){let t=((e,t)=>function(r,...n){if(n.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${o(t.minArgs)} for ${e}(), got ${n.length}`);if(n.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${o(t.maxArgs)} for ${e}(), got ${n.length}`);return new Promise(((o,s)=>{if(t.fallbackToNoCallback)try{r[e](...n,i({resolve:o,reject:s},t))}catch(i){console.warn(`${e} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,i),r[e](...n),t.fallbackToNoCallback=!1,t.noCallback=!0,o()}else t.noCallback?(r[e](...n),o()):r[e](...n,i({resolve:o,reject:s},t))}))})(l,r[l]);f=s(e,e[l],t)}else f=f.bind(e);else if("object"==typeof f&&null!==f&&(a(t,l)||a(r,l)))f=u(f,t[l],r[l]);else{if(!a(r,"*"))return Object.defineProperty(n,l,{configurable:!0,enumerable:!0,get:()=>e[l],set(t){e[l]=t}}),f;f=u(f,t[l],r["*"])}return n[l]=f,f},set:(t,r,i,o)=>(r in n?n[r]=i:e[r]=i,!0),defineProperty:(e,t,r)=>Reflect.defineProperty(n,t,r),deleteProperty:(e,t)=>Reflect.deleteProperty(n,t)},l=Object.create(e);return new Proxy(l,c)},c=e=>({addListener(t,r,...n){t.addListener(e.get(r),...n)},hasListener:(t,r)=>t.hasListener(e.get(r)),removeListener(t,r){t.removeListener(e.get(r))}}),l=new n((e=>"function"!=typeof e?e:function(t){const r=u(t,{},{getContent:{minArgs:0,maxArgs:0}});e(r)})),h=new n((e=>"function"!=typeof e?e:function(t,r,n){let i,o,s=!1,a=new Promise((e=>{i=function(t){s=!0,e(t)}}));try{o=e(t,r,i)}catch(e){o=Promise.reject(e)}const u=!0!==o&&(c=o)&&"object"==typeof c&&"function"==typeof c.then;var c;if(!0!==o&&!u&&!s)return!1;const l=e=>{e.then((e=>{n(e)}),(e=>{let t;t=e&&(e instanceof Error||"string"==typeof e.message)?e.message:"An unexpected error occurred",n({__mozWebExtensionPolyfillReject__:!0,message:t})})).catch((e=>{console.error("Failed to send onMessage rejected reply",e)}))};return l(u?o:a),!0})),f=({reject:r,resolve:n},i)=>{e.runtime.lastError?e.runtime.lastError.message===t?n():r(new Error(e.runtime.lastError.message)):i&&i.__mozWebExtensionPolyfillReject__?r(new Error(i.message)):n(i)},d=(e,t,r,...n)=>{if(n.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${o(t.minArgs)} for ${e}(), got ${n.length}`);if(n.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${o(t.maxArgs)} for ${e}(), got ${n.length}`);return new Promise(((e,t)=>{const i=f.bind(null,{resolve:e,reject:t});n.push(i),r.sendMessage(...n)}))},p={devtools:{network:{onRequestFinished:c(l)}},runtime:{onMessage:c(h),onMessageExternal:c(h),sendMessage:d.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:d.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},g={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return r.privacy={network:{"*":g},services:{"*":g},websites:{"*":g}},u(e,p,r)};e.exports=r(chrome)}else e.exports=globalThis.browser},"function"==typeof define&&define.amd?define("webextension-polyfill",["module"],r):r(e)})),o.register("jc6J8",(function(e,t){!function(e,t){"use strict";function r(e,t){if(!e)throw new Error(t||"Assertion failed")}function n(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}function i(e,t,r){if(i.isBN(e))return e;this.negative=0,this.words=null,this.length=0,this.red=null,null!==e&&("le"!==t&&"be"!==t||(r=t,t=10),this._init(e||0,t||10,r||"be"))}var s;"object"==typeof e?e.exports=i:t.BN=i,i.BN=i,i.wordSize=26;try{s="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:o("e0EMb").Buffer}catch(e){}function a(e,t){var n=e.charCodeAt(t);return n>=48&&n<=57?n-48:n>=65&&n<=70?n-55:n>=97&&n<=102?n-87:void r(!1,"Invalid character in "+e)}function u(e,t,r){var n=a(e,r);return r-1>=t&&(n|=a(e,r-1)<<4),n}function c(e,t,n,i){for(var o=0,s=0,a=Math.min(e.length,n),u=t;u<a;u++){var c=e.charCodeAt(u)-48;o*=i,s=c>=49?c-49+10:c>=17?c-17+10:c,r(c>=0&&s<i,"Invalid character"),o+=s}return o}function l(e,t){e.words=t.words,e.length=t.length,e.negative=t.negative,e.red=t.red}if(i.isBN=function(e){return e instanceof i||null!==e&&"object"==typeof e&&e.constructor.wordSize===i.wordSize&&Array.isArray(e.words)},i.max=function(e,t){return e.cmp(t)>0?e:t},i.min=function(e,t){return e.cmp(t)<0?e:t},i.prototype._init=function(e,t,n){if("number"==typeof e)return this._initNumber(e,t,n);if("object"==typeof e)return this._initArray(e,t,n);"hex"===t&&(t=16),r(t===(0|t)&&t>=2&&t<=36);var i=0;"-"===(e=e.toString().replace(/\s+/g,""))[0]&&(i++,this.negative=1),i<e.length&&(16===t?this._parseHex(e,i,n):(this._parseBase(e,t,i),"le"===n&&this._initArray(this.toArray(),t,n)))},i.prototype._initNumber=function(e,t,n){e<0&&(this.negative=1,e=-e),e<67108864?(this.words=[67108863&e],this.length=1):e<4503599627370496?(this.words=[67108863&e,e/67108864&67108863],this.length=2):(r(e<9007199254740992),this.words=[67108863&e,e/67108864&67108863,1],this.length=3),"le"===n&&this._initArray(this.toArray(),t,n)},i.prototype._initArray=function(e,t,n){if(r("number"==typeof e.length),e.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(e.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,s,a=0;if("be"===n)for(i=e.length-1,o=0;i>=0;i-=3)s=e[i]|e[i-1]<<8|e[i-2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);else if("le"===n)for(i=0,o=0;i<e.length;i+=3)s=e[i]|e[i+1]<<8|e[i+2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);return this._strip()},i.prototype._parseHex=function(e,t,r){this.length=Math.ceil((e.length-t)/6),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var i,o=0,s=0;if("be"===r)for(n=e.length-1;n>=t;n-=2)i=u(e,t,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;else for(n=(e.length-t)%2==0?t+1:t;n<e.length;n+=2)i=u(e,t,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;this._strip()},i.prototype._parseBase=function(e,t,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=t)n++;n--,i=i/t|0;for(var o=e.length-r,s=o%n,a=Math.min(o,o-s)+r,u=0,l=r;l<a;l+=n)u=c(e,l,l+n,t),this.imuln(i),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==s){var h=1;for(u=c(e,l,e.length,t),l=0;l<s;l++)h*=t;this.imuln(h),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}this._strip()},i.prototype.copy=function(e){e.words=new Array(this.length);for(var t=0;t<this.length;t++)e.words[t]=this.words[t];e.length=this.length,e.negative=this.negative,e.red=this.red},i.prototype._move=function(e){l(e,this)},i.prototype.clone=function(){var e=new i(null);return this.copy(e),e},i.prototype._expand=function(e){for(;this.length<e;)this.words[this.length++]=0;return this},i.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},i.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for)try{i.prototype[Symbol.for("nodejs.util.inspect.custom")]=h}catch(e){i.prototype.inspect=h}else i.prototype.inspect=h;function h(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var f=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],d=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],p=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];i.prototype.toString=function(e,t){var n;if(t=0|t||1,16===(e=e||10)||"hex"===e){n="";for(var i=0,o=0,s=0;s<this.length;s++){var a=this.words[s],u=(16777215&(a<<i|o)).toString(16);o=a>>>24-i&16777215,(i+=2)>=26&&(i-=26,s--),n=0!==o||s!==this.length-1?f[6-u.length]+u+n:u+n}for(0!==o&&(n=o.toString(16)+n);n.length%t!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}if(e===(0|e)&&e>=2&&e<=36){var c=d[e],l=p[e];n="";var h=this.clone();for(h.negative=0;!h.isZero();){var g=h.modrn(l).toString(e);n=(h=h.idivn(l)).isZero()?g+n:f[c-g.length]+g+n}for(this.isZero()&&(n="0"+n);n.length%t!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}r(!1,"Base should be between 2 and 36")},i.prototype.toNumber=function(){var e=this.words[0];return 2===this.length?e+=67108864*this.words[1]:3===this.length&&1===this.words[2]?e+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-e:e},i.prototype.toJSON=function(){return this.toString(16,2)},s&&(i.prototype.toBuffer=function(e,t){return this.toArrayLike(s,e,t)}),i.prototype.toArray=function(e,t){return this.toArrayLike(Array,e,t)};function g(e,t,r){r.negative=t.negative^e.negative;var n=e.length+t.length|0;r.length=n,n=n-1|0;var i=0|e.words[0],o=0|t.words[0],s=i*o,a=67108863&s,u=s/67108864|0;r.words[0]=a;for(var c=1;c<n;c++){for(var l=u>>>26,h=67108863&u,f=Math.min(c,t.length-1),d=Math.max(0,c-e.length+1);d<=f;d++){var p=c-d|0;l+=(s=(i=0|e.words[p])*(o=0|t.words[d])+h)/67108864|0,h=67108863&s}r.words[c]=0|h,u=0|l}return 0!==u?r.words[c]=0|u:r.length--,r._strip()}i.prototype.toArrayLike=function(e,t,n){this._strip();var i=this.byteLength(),o=n||Math.max(1,i);r(i<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0");var s=function(e,t){return e.allocUnsafe?e.allocUnsafe(t):new e(t)}(e,o);return this["_toArrayLike"+("le"===t?"LE":"BE")](s,i),s},i.prototype._toArrayLikeLE=function(e,t){for(var r=0,n=0,i=0,o=0;i<this.length;i++){var s=this.words[i]<<o|n;e[r++]=255&s,r<e.length&&(e[r++]=s>>8&255),r<e.length&&(e[r++]=s>>16&255),6===o?(r<e.length&&(e[r++]=s>>24&255),n=0,o=0):(n=s>>>24,o+=2)}if(r<e.length)for(e[r++]=n;r<e.length;)e[r++]=0},i.prototype._toArrayLikeBE=function(e,t){for(var r=e.length-1,n=0,i=0,o=0;i<this.length;i++){var s=this.words[i]<<o|n;e[r--]=255&s,r>=0&&(e[r--]=s>>8&255),r>=0&&(e[r--]=s>>16&255),6===o?(r>=0&&(e[r--]=s>>24&255),n=0,o=0):(n=s>>>24,o+=2)}if(r>=0)for(e[r--]=n;r>=0;)e[r--]=0},Math.clz32?i.prototype._countBits=function(e){return 32-Math.clz32(e)}:i.prototype._countBits=function(e){var t=e,r=0;return t>=4096&&(r+=13,t>>>=13),t>=64&&(r+=7,t>>>=7),t>=8&&(r+=4,t>>>=4),t>=2&&(r+=2,t>>>=2),r+t},i.prototype._zeroBits=function(e){if(0===e)return 26;var t=e,r=0;return 0==(8191&t)&&(r+=13,t>>>=13),0==(127&t)&&(r+=7,t>>>=7),0==(15&t)&&(r+=4,t>>>=4),0==(3&t)&&(r+=2,t>>>=2),0==(1&t)&&r++,r},i.prototype.bitLength=function(){var e=this.words[this.length-1],t=this._countBits(e);return 26*(this.length-1)+t},i.prototype.zeroBits=function(){if(this.isZero())return 0;for(var e=0,t=0;t<this.length;t++){var r=this._zeroBits(this.words[t]);if(e+=r,26!==r)break}return e},i.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},i.prototype.toTwos=function(e){return 0!==this.negative?this.abs().inotn(e).iaddn(1):this.clone()},i.prototype.fromTwos=function(e){return this.testn(e-1)?this.notn(e).iaddn(1).ineg():this.clone()},i.prototype.isNeg=function(){return 0!==this.negative},i.prototype.neg=function(){return this.clone().ineg()},i.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},i.prototype.iuor=function(e){for(;this.length<e.length;)this.words[this.length++]=0;for(var t=0;t<e.length;t++)this.words[t]=this.words[t]|e.words[t];return this._strip()},i.prototype.ior=function(e){return r(0==(this.negative|e.negative)),this.iuor(e)},i.prototype.or=function(e){return this.length>e.length?this.clone().ior(e):e.clone().ior(this)},i.prototype.uor=function(e){return this.length>e.length?this.clone().iuor(e):e.clone().iuor(this)},i.prototype.iuand=function(e){var t;t=this.length>e.length?e:this;for(var r=0;r<t.length;r++)this.words[r]=this.words[r]&e.words[r];return this.length=t.length,this._strip()},i.prototype.iand=function(e){return r(0==(this.negative|e.negative)),this.iuand(e)},i.prototype.and=function(e){return this.length>e.length?this.clone().iand(e):e.clone().iand(this)},i.prototype.uand=function(e){return this.length>e.length?this.clone().iuand(e):e.clone().iuand(this)},i.prototype.iuxor=function(e){var t,r;this.length>e.length?(t=this,r=e):(t=e,r=this);for(var n=0;n<r.length;n++)this.words[n]=t.words[n]^r.words[n];if(this!==t)for(;n<t.length;n++)this.words[n]=t.words[n];return this.length=t.length,this._strip()},i.prototype.ixor=function(e){return r(0==(this.negative|e.negative)),this.iuxor(e)},i.prototype.xor=function(e){return this.length>e.length?this.clone().ixor(e):e.clone().ixor(this)},i.prototype.uxor=function(e){return this.length>e.length?this.clone().iuxor(e):e.clone().iuxor(this)},i.prototype.inotn=function(e){r("number"==typeof e&&e>=0);var t=0|Math.ceil(e/26),n=e%26;this._expand(t),n>0&&t--;for(var i=0;i<t;i++)this.words[i]=67108863&~this.words[i];return n>0&&(this.words[i]=~this.words[i]&67108863>>26-n),this._strip()},i.prototype.notn=function(e){return this.clone().inotn(e)},i.prototype.setn=function(e,t){r("number"==typeof e&&e>=0);var n=e/26|0,i=e%26;return this._expand(n+1),this.words[n]=t?this.words[n]|1<<i:this.words[n]&~(1<<i),this._strip()},i.prototype.iadd=function(e){var t,r,n;if(0!==this.negative&&0===e.negative)return this.negative=0,t=this.isub(e),this.negative^=1,this._normSign();if(0===this.negative&&0!==e.negative)return e.negative=0,t=this.isub(e),e.negative=1,t._normSign();this.length>e.length?(r=this,n=e):(r=e,n=this);for(var i=0,o=0;o<n.length;o++)t=(0|r.words[o])+(0|n.words[o])+i,this.words[o]=67108863&t,i=t>>>26;for(;0!==i&&o<r.length;o++)t=(0|r.words[o])+i,this.words[o]=67108863&t,i=t>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},i.prototype.add=function(e){var t;return 0!==e.negative&&0===this.negative?(e.negative=0,t=this.sub(e),e.negative^=1,t):0===e.negative&&0!==this.negative?(this.negative=0,t=e.sub(this),this.negative=1,t):this.length>e.length?this.clone().iadd(e):e.clone().iadd(this)},i.prototype.isub=function(e){if(0!==e.negative){e.negative=0;var t=this.iadd(e);return e.negative=1,t._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(e),this.negative=1,this._normSign();var r,n,i=this.cmp(e);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=e):(r=e,n=this);for(var o=0,s=0;s<n.length;s++)o=(t=(0|r.words[s])-(0|n.words[s])+o)>>26,this.words[s]=67108863&t;for(;0!==o&&s<r.length;s++)o=(t=(0|r.words[s])+o)>>26,this.words[s]=67108863&t;if(0===o&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this._strip()},i.prototype.sub=function(e){return this.clone().isub(e)};var m=function(e,t,r){var n,i,o,s=e.words,a=t.words,u=r.words,c=0,l=0|s[0],h=8191&l,f=l>>>13,d=0|s[1],p=8191&d,g=d>>>13,m=0|s[2],y=8191&m,v=m>>>13,w=0|s[3],b=8191&w,A=w>>>13,E=0|s[4],x=8191&E,S=E>>>13,C=0|s[5],k=8191&C,_=C>>>13,P=0|s[6],R=8191&P,O=P>>>13,N=0|s[7],I=8191&N,T=N>>>13,M=0|s[8],B=8191&M,F=M>>>13,L=0|s[9],D=8191&L,j=L>>>13,U=0|a[0],z=8191&U,q=U>>>13,K=0|a[1],G=8191&K,W=K>>>13,H=0|a[2],J=8191&H,V=H>>>13,Y=0|a[3],Q=8191&Y,Z=Y>>>13,X=0|a[4],$=8191&X,ee=X>>>13,te=0|a[5],re=8191&te,ne=te>>>13,ie=0|a[6],oe=8191&ie,se=ie>>>13,ae=0|a[7],ue=8191&ae,ce=ae>>>13,le=0|a[8],he=8191&le,fe=le>>>13,de=0|a[9],pe=8191&de,ge=de>>>13;r.negative=e.negative^t.negative,r.length=19;var me=(c+(n=Math.imul(h,z))|0)+((8191&(i=(i=Math.imul(h,q))+Math.imul(f,z)|0))<<13)|0;c=((o=Math.imul(f,q))+(i>>>13)|0)+(me>>>26)|0,me&=67108863,n=Math.imul(p,z),i=(i=Math.imul(p,q))+Math.imul(g,z)|0,o=Math.imul(g,q);var ye=(c+(n=n+Math.imul(h,G)|0)|0)+((8191&(i=(i=i+Math.imul(h,W)|0)+Math.imul(f,G)|0))<<13)|0;c=((o=o+Math.imul(f,W)|0)+(i>>>13)|0)+(ye>>>26)|0,ye&=67108863,n=Math.imul(y,z),i=(i=Math.imul(y,q))+Math.imul(v,z)|0,o=Math.imul(v,q),n=n+Math.imul(p,G)|0,i=(i=i+Math.imul(p,W)|0)+Math.imul(g,G)|0,o=o+Math.imul(g,W)|0;var ve=(c+(n=n+Math.imul(h,J)|0)|0)+((8191&(i=(i=i+Math.imul(h,V)|0)+Math.imul(f,J)|0))<<13)|0;c=((o=o+Math.imul(f,V)|0)+(i>>>13)|0)+(ve>>>26)|0,ve&=67108863,n=Math.imul(b,z),i=(i=Math.imul(b,q))+Math.imul(A,z)|0,o=Math.imul(A,q),n=n+Math.imul(y,G)|0,i=(i=i+Math.imul(y,W)|0)+Math.imul(v,G)|0,o=o+Math.imul(v,W)|0,n=n+Math.imul(p,J)|0,i=(i=i+Math.imul(p,V)|0)+Math.imul(g,J)|0,o=o+Math.imul(g,V)|0;var we=(c+(n=n+Math.imul(h,Q)|0)|0)+((8191&(i=(i=i+Math.imul(h,Z)|0)+Math.imul(f,Q)|0))<<13)|0;c=((o=o+Math.imul(f,Z)|0)+(i>>>13)|0)+(we>>>26)|0,we&=67108863,n=Math.imul(x,z),i=(i=Math.imul(x,q))+Math.imul(S,z)|0,o=Math.imul(S,q),n=n+Math.imul(b,G)|0,i=(i=i+Math.imul(b,W)|0)+Math.imul(A,G)|0,o=o+Math.imul(A,W)|0,n=n+Math.imul(y,J)|0,i=(i=i+Math.imul(y,V)|0)+Math.imul(v,J)|0,o=o+Math.imul(v,V)|0,n=n+Math.imul(p,Q)|0,i=(i=i+Math.imul(p,Z)|0)+Math.imul(g,Q)|0,o=o+Math.imul(g,Z)|0;var be=(c+(n=n+Math.imul(h,$)|0)|0)+((8191&(i=(i=i+Math.imul(h,ee)|0)+Math.imul(f,$)|0))<<13)|0;c=((o=o+Math.imul(f,ee)|0)+(i>>>13)|0)+(be>>>26)|0,be&=67108863,n=Math.imul(k,z),i=(i=Math.imul(k,q))+Math.imul(_,z)|0,o=Math.imul(_,q),n=n+Math.imul(x,G)|0,i=(i=i+Math.imul(x,W)|0)+Math.imul(S,G)|0,o=o+Math.imul(S,W)|0,n=n+Math.imul(b,J)|0,i=(i=i+Math.imul(b,V)|0)+Math.imul(A,J)|0,o=o+Math.imul(A,V)|0,n=n+Math.imul(y,Q)|0,i=(i=i+Math.imul(y,Z)|0)+Math.imul(v,Q)|0,o=o+Math.imul(v,Z)|0,n=n+Math.imul(p,$)|0,i=(i=i+Math.imul(p,ee)|0)+Math.imul(g,$)|0,o=o+Math.imul(g,ee)|0;var Ae=(c+(n=n+Math.imul(h,re)|0)|0)+((8191&(i=(i=i+Math.imul(h,ne)|0)+Math.imul(f,re)|0))<<13)|0;c=((o=o+Math.imul(f,ne)|0)+(i>>>13)|0)+(Ae>>>26)|0,Ae&=67108863,n=Math.imul(R,z),i=(i=Math.imul(R,q))+Math.imul(O,z)|0,o=Math.imul(O,q),n=n+Math.imul(k,G)|0,i=(i=i+Math.imul(k,W)|0)+Math.imul(_,G)|0,o=o+Math.imul(_,W)|0,n=n+Math.imul(x,J)|0,i=(i=i+Math.imul(x,V)|0)+Math.imul(S,J)|0,o=o+Math.imul(S,V)|0,n=n+Math.imul(b,Q)|0,i=(i=i+Math.imul(b,Z)|0)+Math.imul(A,Q)|0,o=o+Math.imul(A,Z)|0,n=n+Math.imul(y,$)|0,i=(i=i+Math.imul(y,ee)|0)+Math.imul(v,$)|0,o=o+Math.imul(v,ee)|0,n=n+Math.imul(p,re)|0,i=(i=i+Math.imul(p,ne)|0)+Math.imul(g,re)|0,o=o+Math.imul(g,ne)|0;var Ee=(c+(n=n+Math.imul(h,oe)|0)|0)+((8191&(i=(i=i+Math.imul(h,se)|0)+Math.imul(f,oe)|0))<<13)|0;c=((o=o+Math.imul(f,se)|0)+(i>>>13)|0)+(Ee>>>26)|0,Ee&=67108863,n=Math.imul(I,z),i=(i=Math.imul(I,q))+Math.imul(T,z)|0,o=Math.imul(T,q),n=n+Math.imul(R,G)|0,i=(i=i+Math.imul(R,W)|0)+Math.imul(O,G)|0,o=o+Math.imul(O,W)|0,n=n+Math.imul(k,J)|0,i=(i=i+Math.imul(k,V)|0)+Math.imul(_,J)|0,o=o+Math.imul(_,V)|0,n=n+Math.imul(x,Q)|0,i=(i=i+Math.imul(x,Z)|0)+Math.imul(S,Q)|0,o=o+Math.imul(S,Z)|0,n=n+Math.imul(b,$)|0,i=(i=i+Math.imul(b,ee)|0)+Math.imul(A,$)|0,o=o+Math.imul(A,ee)|0,n=n+Math.imul(y,re)|0,i=(i=i+Math.imul(y,ne)|0)+Math.imul(v,re)|0,o=o+Math.imul(v,ne)|0,n=n+Math.imul(p,oe)|0,i=(i=i+Math.imul(p,se)|0)+Math.imul(g,oe)|0,o=o+Math.imul(g,se)|0;var xe=(c+(n=n+Math.imul(h,ue)|0)|0)+((8191&(i=(i=i+Math.imul(h,ce)|0)+Math.imul(f,ue)|0))<<13)|0;c=((o=o+Math.imul(f,ce)|0)+(i>>>13)|0)+(xe>>>26)|0,xe&=67108863,n=Math.imul(B,z),i=(i=Math.imul(B,q))+Math.imul(F,z)|0,o=Math.imul(F,q),n=n+Math.imul(I,G)|0,i=(i=i+Math.imul(I,W)|0)+Math.imul(T,G)|0,o=o+Math.imul(T,W)|0,n=n+Math.imul(R,J)|0,i=(i=i+Math.imul(R,V)|0)+Math.imul(O,J)|0,o=o+Math.imul(O,V)|0,n=n+Math.imul(k,Q)|0,i=(i=i+Math.imul(k,Z)|0)+Math.imul(_,Q)|0,o=o+Math.imul(_,Z)|0,n=n+Math.imul(x,$)|0,i=(i=i+Math.imul(x,ee)|0)+Math.imul(S,$)|0,o=o+Math.imul(S,ee)|0,n=n+Math.imul(b,re)|0,i=(i=i+Math.imul(b,ne)|0)+Math.imul(A,re)|0,o=o+Math.imul(A,ne)|0,n=n+Math.imul(y,oe)|0,i=(i=i+Math.imul(y,se)|0)+Math.imul(v,oe)|0,o=o+Math.imul(v,se)|0,n=n+Math.imul(p,ue)|0,i=(i=i+Math.imul(p,ce)|0)+Math.imul(g,ue)|0,o=o+Math.imul(g,ce)|0;var Se=(c+(n=n+Math.imul(h,he)|0)|0)+((8191&(i=(i=i+Math.imul(h,fe)|0)+Math.imul(f,he)|0))<<13)|0;c=((o=o+Math.imul(f,fe)|0)+(i>>>13)|0)+(Se>>>26)|0,Se&=67108863,n=Math.imul(D,z),i=(i=Math.imul(D,q))+Math.imul(j,z)|0,o=Math.imul(j,q),n=n+Math.imul(B,G)|0,i=(i=i+Math.imul(B,W)|0)+Math.imul(F,G)|0,o=o+Math.imul(F,W)|0,n=n+Math.imul(I,J)|0,i=(i=i+Math.imul(I,V)|0)+Math.imul(T,J)|0,o=o+Math.imul(T,V)|0,n=n+Math.imul(R,Q)|0,i=(i=i+Math.imul(R,Z)|0)+Math.imul(O,Q)|0,o=o+Math.imul(O,Z)|0,n=n+Math.imul(k,$)|0,i=(i=i+Math.imul(k,ee)|0)+Math.imul(_,$)|0,o=o+Math.imul(_,ee)|0,n=n+Math.imul(x,re)|0,i=(i=i+Math.imul(x,ne)|0)+Math.imul(S,re)|0,o=o+Math.imul(S,ne)|0,n=n+Math.imul(b,oe)|0,i=(i=i+Math.imul(b,se)|0)+Math.imul(A,oe)|0,o=o+Math.imul(A,se)|0,n=n+Math.imul(y,ue)|0,i=(i=i+Math.imul(y,ce)|0)+Math.imul(v,ue)|0,o=o+Math.imul(v,ce)|0,n=n+Math.imul(p,he)|0,i=(i=i+Math.imul(p,fe)|0)+Math.imul(g,he)|0,o=o+Math.imul(g,fe)|0;var Ce=(c+(n=n+Math.imul(h,pe)|0)|0)+((8191&(i=(i=i+Math.imul(h,ge)|0)+Math.imul(f,pe)|0))<<13)|0;c=((o=o+Math.imul(f,ge)|0)+(i>>>13)|0)+(Ce>>>26)|0,Ce&=67108863,n=Math.imul(D,G),i=(i=Math.imul(D,W))+Math.imul(j,G)|0,o=Math.imul(j,W),n=n+Math.imul(B,J)|0,i=(i=i+Math.imul(B,V)|0)+Math.imul(F,J)|0,o=o+Math.imul(F,V)|0,n=n+Math.imul(I,Q)|0,i=(i=i+Math.imul(I,Z)|0)+Math.imul(T,Q)|0,o=o+Math.imul(T,Z)|0,n=n+Math.imul(R,$)|0,i=(i=i+Math.imul(R,ee)|0)+Math.imul(O,$)|0,o=o+Math.imul(O,ee)|0,n=n+Math.imul(k,re)|0,i=(i=i+Math.imul(k,ne)|0)+Math.imul(_,re)|0,o=o+Math.imul(_,ne)|0,n=n+Math.imul(x,oe)|0,i=(i=i+Math.imul(x,se)|0)+Math.imul(S,oe)|0,o=o+Math.imul(S,se)|0,n=n+Math.imul(b,ue)|0,i=(i=i+Math.imul(b,ce)|0)+Math.imul(A,ue)|0,o=o+Math.imul(A,ce)|0,n=n+Math.imul(y,he)|0,i=(i=i+Math.imul(y,fe)|0)+Math.imul(v,he)|0,o=o+Math.imul(v,fe)|0;var ke=(c+(n=n+Math.imul(p,pe)|0)|0)+((8191&(i=(i=i+Math.imul(p,ge)|0)+Math.imul(g,pe)|0))<<13)|0;c=((o=o+Math.imul(g,ge)|0)+(i>>>13)|0)+(ke>>>26)|0,ke&=67108863,n=Math.imul(D,J),i=(i=Math.imul(D,V))+Math.imul(j,J)|0,o=Math.imul(j,V),n=n+Math.imul(B,Q)|0,i=(i=i+Math.imul(B,Z)|0)+Math.imul(F,Q)|0,o=o+Math.imul(F,Z)|0,n=n+Math.imul(I,$)|0,i=(i=i+Math.imul(I,ee)|0)+Math.imul(T,$)|0,o=o+Math.imul(T,ee)|0,n=n+Math.imul(R,re)|0,i=(i=i+Math.imul(R,ne)|0)+Math.imul(O,re)|0,o=o+Math.imul(O,ne)|0,n=n+Math.imul(k,oe)|0,i=(i=i+Math.imul(k,se)|0)+Math.imul(_,oe)|0,o=o+Math.imul(_,se)|0,n=n+Math.imul(x,ue)|0,i=(i=i+Math.imul(x,ce)|0)+Math.imul(S,ue)|0,o=o+Math.imul(S,ce)|0,n=n+Math.imul(b,he)|0,i=(i=i+Math.imul(b,fe)|0)+Math.imul(A,he)|0,o=o+Math.imul(A,fe)|0;var _e=(c+(n=n+Math.imul(y,pe)|0)|0)+((8191&(i=(i=i+Math.imul(y,ge)|0)+Math.imul(v,pe)|0))<<13)|0;c=((o=o+Math.imul(v,ge)|0)+(i>>>13)|0)+(_e>>>26)|0,_e&=67108863,n=Math.imul(D,Q),i=(i=Math.imul(D,Z))+Math.imul(j,Q)|0,o=Math.imul(j,Z),n=n+Math.imul(B,$)|0,i=(i=i+Math.imul(B,ee)|0)+Math.imul(F,$)|0,o=o+Math.imul(F,ee)|0,n=n+Math.imul(I,re)|0,i=(i=i+Math.imul(I,ne)|0)+Math.imul(T,re)|0,o=o+Math.imul(T,ne)|0,n=n+Math.imul(R,oe)|0,i=(i=i+Math.imul(R,se)|0)+Math.imul(O,oe)|0,o=o+Math.imul(O,se)|0,n=n+Math.imul(k,ue)|0,i=(i=i+Math.imul(k,ce)|0)+Math.imul(_,ue)|0,o=o+Math.imul(_,ce)|0,n=n+Math.imul(x,he)|0,i=(i=i+Math.imul(x,fe)|0)+Math.imul(S,he)|0,o=o+Math.imul(S,fe)|0;var Pe=(c+(n=n+Math.imul(b,pe)|0)|0)+((8191&(i=(i=i+Math.imul(b,ge)|0)+Math.imul(A,pe)|0))<<13)|0;c=((o=o+Math.imul(A,ge)|0)+(i>>>13)|0)+(Pe>>>26)|0,Pe&=67108863,n=Math.imul(D,$),i=(i=Math.imul(D,ee))+Math.imul(j,$)|0,o=Math.imul(j,ee),n=n+Math.imul(B,re)|0,i=(i=i+Math.imul(B,ne)|0)+Math.imul(F,re)|0,o=o+Math.imul(F,ne)|0,n=n+Math.imul(I,oe)|0,i=(i=i+Math.imul(I,se)|0)+Math.imul(T,oe)|0,o=o+Math.imul(T,se)|0,n=n+Math.imul(R,ue)|0,i=(i=i+Math.imul(R,ce)|0)+Math.imul(O,ue)|0,o=o+Math.imul(O,ce)|0,n=n+Math.imul(k,he)|0,i=(i=i+Math.imul(k,fe)|0)+Math.imul(_,he)|0,o=o+Math.imul(_,fe)|0;var Re=(c+(n=n+Math.imul(x,pe)|0)|0)+((8191&(i=(i=i+Math.imul(x,ge)|0)+Math.imul(S,pe)|0))<<13)|0;c=((o=o+Math.imul(S,ge)|0)+(i>>>13)|0)+(Re>>>26)|0,Re&=67108863,n=Math.imul(D,re),i=(i=Math.imul(D,ne))+Math.imul(j,re)|0,o=Math.imul(j,ne),n=n+Math.imul(B,oe)|0,i=(i=i+Math.imul(B,se)|0)+Math.imul(F,oe)|0,o=o+Math.imul(F,se)|0,n=n+Math.imul(I,ue)|0,i=(i=i+Math.imul(I,ce)|0)+Math.imul(T,ue)|0,o=o+Math.imul(T,ce)|0,n=n+Math.imul(R,he)|0,i=(i=i+Math.imul(R,fe)|0)+Math.imul(O,he)|0,o=o+Math.imul(O,fe)|0;var Oe=(c+(n=n+Math.imul(k,pe)|0)|0)+((8191&(i=(i=i+Math.imul(k,ge)|0)+Math.imul(_,pe)|0))<<13)|0;c=((o=o+Math.imul(_,ge)|0)+(i>>>13)|0)+(Oe>>>26)|0,Oe&=67108863,n=Math.imul(D,oe),i=(i=Math.imul(D,se))+Math.imul(j,oe)|0,o=Math.imul(j,se),n=n+Math.imul(B,ue)|0,i=(i=i+Math.imul(B,ce)|0)+Math.imul(F,ue)|0,o=o+Math.imul(F,ce)|0,n=n+Math.imul(I,he)|0,i=(i=i+Math.imul(I,fe)|0)+Math.imul(T,he)|0,o=o+Math.imul(T,fe)|0;var Ne=(c+(n=n+Math.imul(R,pe)|0)|0)+((8191&(i=(i=i+Math.imul(R,ge)|0)+Math.imul(O,pe)|0))<<13)|0;c=((o=o+Math.imul(O,ge)|0)+(i>>>13)|0)+(Ne>>>26)|0,Ne&=67108863,n=Math.imul(D,ue),i=(i=Math.imul(D,ce))+Math.imul(j,ue)|0,o=Math.imul(j,ce),n=n+Math.imul(B,he)|0,i=(i=i+Math.imul(B,fe)|0)+Math.imul(F,he)|0,o=o+Math.imul(F,fe)|0;var Ie=(c+(n=n+Math.imul(I,pe)|0)|0)+((8191&(i=(i=i+Math.imul(I,ge)|0)+Math.imul(T,pe)|0))<<13)|0;c=((o=o+Math.imul(T,ge)|0)+(i>>>13)|0)+(Ie>>>26)|0,Ie&=67108863,n=Math.imul(D,he),i=(i=Math.imul(D,fe))+Math.imul(j,he)|0,o=Math.imul(j,fe);var Te=(c+(n=n+Math.imul(B,pe)|0)|0)+((8191&(i=(i=i+Math.imul(B,ge)|0)+Math.imul(F,pe)|0))<<13)|0;c=((o=o+Math.imul(F,ge)|0)+(i>>>13)|0)+(Te>>>26)|0,Te&=67108863;var Me=(c+(n=Math.imul(D,pe))|0)+((8191&(i=(i=Math.imul(D,ge))+Math.imul(j,pe)|0))<<13)|0;return c=((o=Math.imul(j,ge))+(i>>>13)|0)+(Me>>>26)|0,Me&=67108863,u[0]=me,u[1]=ye,u[2]=ve,u[3]=we,u[4]=be,u[5]=Ae,u[6]=Ee,u[7]=xe,u[8]=Se,u[9]=Ce,u[10]=ke,u[11]=_e,u[12]=Pe,u[13]=Re,u[14]=Oe,u[15]=Ne,u[16]=Ie,u[17]=Te,u[18]=Me,0!==c&&(u[19]=c,r.length++),r};function y(e,t,r){r.negative=t.negative^e.negative,r.length=e.length+t.length;for(var n=0,i=0,o=0;o<r.length-1;o++){var s=i;i=0;for(var a=67108863&n,u=Math.min(o,t.length-1),c=Math.max(0,o-e.length+1);c<=u;c++){var l=o-c,h=(0|e.words[l])*(0|t.words[c]),f=67108863&h;a=67108863&(f=f+a|0),i+=(s=(s=s+(h/67108864|0)|0)+(f>>>26)|0)>>>26,s&=67108863}r.words[o]=a,n=s,s=i}return 0!==n?r.words[o]=n:r.length--,r._strip()}function v(e,t,r){return y(e,t,r)}function w(e,t){this.x=e,this.y=t}Math.imul||(m=g),i.prototype.mulTo=function(e,t){var r=this.length+e.length;return 10===this.length&&10===e.length?m(this,e,t):r<63?g(this,e,t):r<1024?y(this,e,t):v(this,e,t)},w.prototype.makeRBT=function(e){for(var t=new Array(e),r=i.prototype._countBits(e)-1,n=0;n<e;n++)t[n]=this.revBin(n,r,e);return t},w.prototype.revBin=function(e,t,r){if(0===e||e===r-1)return e;for(var n=0,i=0;i<t;i++)n|=(1&e)<<t-i-1,e>>=1;return n},w.prototype.permute=function(e,t,r,n,i,o){for(var s=0;s<o;s++)n[s]=t[e[s]],i[s]=r[e[s]]},w.prototype.transform=function(e,t,r,n,i,o){this.permute(o,e,t,r,n,i);for(var s=1;s<i;s<<=1)for(var a=s<<1,u=Math.cos(2*Math.PI/a),c=Math.sin(2*Math.PI/a),l=0;l<i;l+=a)for(var h=u,f=c,d=0;d<s;d++){var p=r[l+d],g=n[l+d],m=r[l+d+s],y=n[l+d+s],v=h*m-f*y;y=h*y+f*m,m=v,r[l+d]=p+m,n[l+d]=g+y,r[l+d+s]=p-m,n[l+d+s]=g-y,d!==a&&(v=u*h-c*f,f=u*f+c*h,h=v)}},w.prototype.guessLen13b=function(e,t){var r=1|Math.max(t,e),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},w.prototype.conjugate=function(e,t,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=e[n];e[n]=e[r-n-1],e[r-n-1]=i,i=t[n],t[n]=-t[r-n-1],t[r-n-1]=-i}},w.prototype.normalize13b=function(e,t){for(var r=0,n=0;n<t/2;n++){var i=8192*Math.round(e[2*n+1]/t)+Math.round(e[2*n]/t)+r;e[n]=67108863&i,r=i<67108864?0:i/67108864|0}return e},w.prototype.convert13b=function(e,t,n,i){for(var o=0,s=0;s<t;s++)o+=0|e[s],n[2*s]=8191&o,o>>>=13,n[2*s+1]=8191&o,o>>>=13;for(s=2*t;s<i;++s)n[s]=0;r(0===o),r(0==(-8192&o))},w.prototype.stub=function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=0;return t},w.prototype.mulp=function(e,t,r){var n=2*this.guessLen13b(e.length,t.length),i=this.makeRBT(n),o=this.stub(n),s=new Array(n),a=new Array(n),u=new Array(n),c=new Array(n),l=new Array(n),h=new Array(n),f=r.words;f.length=n,this.convert13b(e.words,e.length,s,n),this.convert13b(t.words,t.length,c,n),this.transform(s,o,a,u,n,i),this.transform(c,o,l,h,n,i);for(var d=0;d<n;d++){var p=a[d]*l[d]-u[d]*h[d];u[d]=a[d]*h[d]+u[d]*l[d],a[d]=p}return this.conjugate(a,u,n),this.transform(a,u,f,o,n,i),this.conjugate(f,o,n),this.normalize13b(f,n),r.negative=e.negative^t.negative,r.length=e.length+t.length,r._strip()},i.prototype.mul=function(e){var t=new i(null);return t.words=new Array(this.length+e.length),this.mulTo(e,t)},i.prototype.mulf=function(e){var t=new i(null);return t.words=new Array(this.length+e.length),v(this,e,t)},i.prototype.imul=function(e){return this.clone().mulTo(e,this)},i.prototype.imuln=function(e){var t=e<0;t&&(e=-e),r("number"==typeof e),r(e<67108864);for(var n=0,i=0;i<this.length;i++){var o=(0|this.words[i])*e,s=(67108863&o)+(67108863&n);n>>=26,n+=o/67108864|0,n+=s>>>26,this.words[i]=67108863&s}return 0!==n&&(this.words[i]=n,this.length++),t?this.ineg():this},i.prototype.muln=function(e){return this.clone().imuln(e)},i.prototype.sqr=function(){return this.mul(this)},i.prototype.isqr=function(){return this.imul(this.clone())},i.prototype.pow=function(e){var t=function(e){for(var t=new Array(e.bitLength()),r=0;r<t.length;r++){var n=r/26|0,i=r%26;t[r]=e.words[n]>>>i&1}return t}(e);if(0===t.length)return new i(1);for(var r=this,n=0;n<t.length&&0===t[n];n++,r=r.sqr());if(++n<t.length)for(var o=r.sqr();n<t.length;n++,o=o.sqr())0!==t[n]&&(r=r.mul(o));return r},i.prototype.iushln=function(e){r("number"==typeof e&&e>=0);var t,n=e%26,i=(e-n)/26,o=67108863>>>26-n<<26-n;if(0!==n){var s=0;for(t=0;t<this.length;t++){var a=this.words[t]&o,u=(0|this.words[t])-a<<n;this.words[t]=u|s,s=a>>>26-n}s&&(this.words[t]=s,this.length++)}if(0!==i){for(t=this.length-1;t>=0;t--)this.words[t+i]=this.words[t];for(t=0;t<i;t++)this.words[t]=0;this.length+=i}return this._strip()},i.prototype.ishln=function(e){return r(0===this.negative),this.iushln(e)},i.prototype.iushrn=function(e,t,n){var i;r("number"==typeof e&&e>=0),i=t?(t-t%26)/26:0;var o=e%26,s=Math.min((e-o)/26,this.length),a=67108863^67108863>>>o<<o,u=n;if(i-=s,i=Math.max(0,i),u){for(var c=0;c<s;c++)u.words[c]=this.words[c];u.length=s}if(0===s);else if(this.length>s)for(this.length-=s,c=0;c<this.length;c++)this.words[c]=this.words[c+s];else this.words[0]=0,this.length=1;var l=0;for(c=this.length-1;c>=0&&(0!==l||c>=i);c--){var h=0|this.words[c];this.words[c]=l<<26-o|h>>>o,l=h&a}return u&&0!==l&&(u.words[u.length++]=l),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},i.prototype.ishrn=function(e,t,n){return r(0===this.negative),this.iushrn(e,t,n)},i.prototype.shln=function(e){return this.clone().ishln(e)},i.prototype.ushln=function(e){return this.clone().iushln(e)},i.prototype.shrn=function(e){return this.clone().ishrn(e)},i.prototype.ushrn=function(e){return this.clone().iushrn(e)},i.prototype.testn=function(e){r("number"==typeof e&&e>=0);var t=e%26,n=(e-t)/26,i=1<<t;return!(this.length<=n)&&!!(this.words[n]&i)},i.prototype.imaskn=function(e){r("number"==typeof e&&e>=0);var t=e%26,n=(e-t)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=n)return this;if(0!==t&&n++,this.length=Math.min(n,this.length),0!==t){var i=67108863^67108863>>>t<<t;this.words[this.length-1]&=i}return this._strip()},i.prototype.maskn=function(e){return this.clone().imaskn(e)},i.prototype.iaddn=function(e){return r("number"==typeof e),r(e<67108864),e<0?this.isubn(-e):0!==this.negative?1===this.length&&(0|this.words[0])<=e?(this.words[0]=e-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(e),this.negative=1,this):this._iaddn(e)},i.prototype._iaddn=function(e){this.words[0]+=e;for(var t=0;t<this.length&&this.words[t]>=67108864;t++)this.words[t]-=67108864,t===this.length-1?this.words[t+1]=1:this.words[t+1]++;return this.length=Math.max(this.length,t+1),this},i.prototype.isubn=function(e){if(r("number"==typeof e),r(e<67108864),e<0)return this.iaddn(-e);if(0!==this.negative)return this.negative=0,this.iaddn(e),this.negative=1,this;if(this.words[0]-=e,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var t=0;t<this.length&&this.words[t]<0;t++)this.words[t]+=67108864,this.words[t+1]-=1;return this._strip()},i.prototype.addn=function(e){return this.clone().iaddn(e)},i.prototype.subn=function(e){return this.clone().isubn(e)},i.prototype.iabs=function(){return this.negative=0,this},i.prototype.abs=function(){return this.clone().iabs()},i.prototype._ishlnsubmul=function(e,t,n){var i,o,s=e.length+n;this._expand(s);var a=0;for(i=0;i<e.length;i++){o=(0|this.words[i+n])+a;var u=(0|e.words[i])*t;a=((o-=67108863&u)>>26)-(u/67108864|0),this.words[i+n]=67108863&o}for(;i<this.length-n;i++)a=(o=(0|this.words[i+n])+a)>>26,this.words[i+n]=67108863&o;if(0===a)return this._strip();for(r(-1===a),a=0,i=0;i<this.length;i++)a=(o=-(0|this.words[i])+a)>>26,this.words[i]=67108863&o;return this.negative=1,this._strip()},i.prototype._wordDiv=function(e,t){var r=(this.length,e.length),n=this.clone(),o=e,s=0|o.words[o.length-1];0!==(r=26-this._countBits(s))&&(o=o.ushln(r),n.iushln(r),s=0|o.words[o.length-1]);var a,u=n.length-o.length;if("mod"!==t){(a=new i(null)).length=u+1,a.words=new Array(a.length);for(var c=0;c<a.length;c++)a.words[c]=0}var l=n.clone()._ishlnsubmul(o,1,u);0===l.negative&&(n=l,a&&(a.words[u]=1));for(var h=u-1;h>=0;h--){var f=67108864*(0|n.words[o.length+h])+(0|n.words[o.length+h-1]);for(f=Math.min(f/s|0,67108863),n._ishlnsubmul(o,f,h);0!==n.negative;)f--,n.negative=0,n._ishlnsubmul(o,1,h),n.isZero()||(n.negative^=1);a&&(a.words[h]=f)}return a&&a._strip(),n._strip(),"div"!==t&&0!==r&&n.iushrn(r),{div:a||null,mod:n}},i.prototype.divmod=function(e,t,n){return r(!e.isZero()),this.isZero()?{div:new i(0),mod:new i(0)}:0!==this.negative&&0===e.negative?(a=this.neg().divmod(e,t),"mod"!==t&&(o=a.div.neg()),"div"!==t&&(s=a.mod.neg(),n&&0!==s.negative&&s.iadd(e)),{div:o,mod:s}):0===this.negative&&0!==e.negative?(a=this.divmod(e.neg(),t),"mod"!==t&&(o=a.div.neg()),{div:o,mod:a.mod}):0!=(this.negative&e.negative)?(a=this.neg().divmod(e.neg(),t),"div"!==t&&(s=a.mod.neg(),n&&0!==s.negative&&s.isub(e)),{div:a.div,mod:s}):e.length>this.length||this.cmp(e)<0?{div:new i(0),mod:this}:1===e.length?"div"===t?{div:this.divn(e.words[0]),mod:null}:"mod"===t?{div:null,mod:new i(this.modrn(e.words[0]))}:{div:this.divn(e.words[0]),mod:new i(this.modrn(e.words[0]))}:this._wordDiv(e,t);var o,s,a},i.prototype.div=function(e){return this.divmod(e,"div",!1).div},i.prototype.mod=function(e){return this.divmod(e,"mod",!1).mod},i.prototype.umod=function(e){return this.divmod(e,"mod",!0).mod},i.prototype.divRound=function(e){var t=this.divmod(e);if(t.mod.isZero())return t.div;var r=0!==t.div.negative?t.mod.isub(e):t.mod,n=e.ushrn(1),i=e.andln(1),o=r.cmp(n);return o<0||1===i&&0===o?t.div:0!==t.div.negative?t.div.isubn(1):t.div.iaddn(1)},i.prototype.modrn=function(e){var t=e<0;t&&(e=-e),r(e<=67108863);for(var n=67108864%e,i=0,o=this.length-1;o>=0;o--)i=(n*i+(0|this.words[o]))%e;return t?-i:i},i.prototype.modn=function(e){return this.modrn(e)},i.prototype.idivn=function(e){var t=e<0;t&&(e=-e),r(e<=67108863);for(var n=0,i=this.length-1;i>=0;i--){var o=(0|this.words[i])+67108864*n;this.words[i]=o/e|0,n=o%e}return this._strip(),t?this.ineg():this},i.prototype.divn=function(e){return this.clone().idivn(e)},i.prototype.egcd=function(e){r(0===e.negative),r(!e.isZero());var t=this,n=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var o=new i(1),s=new i(0),a=new i(0),u=new i(1),c=0;t.isEven()&&n.isEven();)t.iushrn(1),n.iushrn(1),++c;for(var l=n.clone(),h=t.clone();!t.isZero();){for(var f=0,d=1;0==(t.words[0]&d)&&f<26;++f,d<<=1);if(f>0)for(t.iushrn(f);f-- >0;)(o.isOdd()||s.isOdd())&&(o.iadd(l),s.isub(h)),o.iushrn(1),s.iushrn(1);for(var p=0,g=1;0==(n.words[0]&g)&&p<26;++p,g<<=1);if(p>0)for(n.iushrn(p);p-- >0;)(a.isOdd()||u.isOdd())&&(a.iadd(l),u.isub(h)),a.iushrn(1),u.iushrn(1);t.cmp(n)>=0?(t.isub(n),o.isub(a),s.isub(u)):(n.isub(t),a.isub(o),u.isub(s))}return{a:a,b:u,gcd:n.iushln(c)}},i.prototype._invmp=function(e){r(0===e.negative),r(!e.isZero());var t=this,n=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var o,s=new i(1),a=new i(0),u=n.clone();t.cmpn(1)>0&&n.cmpn(1)>0;){for(var c=0,l=1;0==(t.words[0]&l)&&c<26;++c,l<<=1);if(c>0)for(t.iushrn(c);c-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);for(var h=0,f=1;0==(n.words[0]&f)&&h<26;++h,f<<=1);if(h>0)for(n.iushrn(h);h-- >0;)a.isOdd()&&a.iadd(u),a.iushrn(1);t.cmp(n)>=0?(t.isub(n),s.isub(a)):(n.isub(t),a.isub(s))}return(o=0===t.cmpn(1)?s:a).cmpn(0)<0&&o.iadd(e),o},i.prototype.gcd=function(e){if(this.isZero())return e.abs();if(e.isZero())return this.abs();var t=this.clone(),r=e.clone();t.negative=0,r.negative=0;for(var n=0;t.isEven()&&r.isEven();n++)t.iushrn(1),r.iushrn(1);for(;;){for(;t.isEven();)t.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=t.cmp(r);if(i<0){var o=t;t=r,r=o}else if(0===i||0===r.cmpn(1))break;t.isub(r)}return r.iushln(n)},i.prototype.invm=function(e){return this.egcd(e).a.umod(e)},i.prototype.isEven=function(){return 0==(1&this.words[0])},i.prototype.isOdd=function(){return 1==(1&this.words[0])},i.prototype.andln=function(e){return this.words[0]&e},i.prototype.bincn=function(e){r("number"==typeof e);var t=e%26,n=(e-t)/26,i=1<<t;if(this.length<=n)return this._expand(n+1),this.words[n]|=i,this;for(var o=i,s=n;0!==o&&s<this.length;s++){var a=0|this.words[s];o=(a+=o)>>>26,a&=67108863,this.words[s]=a}return 0!==o&&(this.words[s]=o,this.length++),this},i.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},i.prototype.cmpn=function(e){var t,n=e<0;if(0!==this.negative&&!n)return-1;if(0===this.negative&&n)return 1;if(this._strip(),this.length>1)t=1;else{n&&(e=-e),r(e<=67108863,"Number is too big");var i=0|this.words[0];t=i===e?0:i<e?-1:1}return 0!==this.negative?0|-t:t},i.prototype.cmp=function(e){if(0!==this.negative&&0===e.negative)return-1;if(0===this.negative&&0!==e.negative)return 1;var t=this.ucmp(e);return 0!==this.negative?0|-t:t},i.prototype.ucmp=function(e){if(this.length>e.length)return 1;if(this.length<e.length)return-1;for(var t=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|e.words[r];if(n!==i){n<i?t=-1:n>i&&(t=1);break}}return t},i.prototype.gtn=function(e){return 1===this.cmpn(e)},i.prototype.gt=function(e){return 1===this.cmp(e)},i.prototype.gten=function(e){return this.cmpn(e)>=0},i.prototype.gte=function(e){return this.cmp(e)>=0},i.prototype.ltn=function(e){return-1===this.cmpn(e)},i.prototype.lt=function(e){return-1===this.cmp(e)},i.prototype.lten=function(e){return this.cmpn(e)<=0},i.prototype.lte=function(e){return this.cmp(e)<=0},i.prototype.eqn=function(e){return 0===this.cmpn(e)},i.prototype.eq=function(e){return 0===this.cmp(e)},i.red=function(e){return new k(e)},i.prototype.toRed=function(e){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),e.convertTo(this)._forceRed(e)},i.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},i.prototype._forceRed=function(e){return this.red=e,this},i.prototype.forceRed=function(e){return r(!this.red,"Already a number in reduction context"),this._forceRed(e)},i.prototype.redAdd=function(e){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,e)},i.prototype.redIAdd=function(e){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,e)},i.prototype.redSub=function(e){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,e)},i.prototype.redISub=function(e){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,e)},i.prototype.redShl=function(e){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,e)},i.prototype.redMul=function(e){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.mul(this,e)},i.prototype.redIMul=function(e){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.imul(this,e)},i.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},i.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},i.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},i.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},i.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},i.prototype.redPow=function(e){return r(this.red&&!e.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,e)};var b={k256:null,p224:null,p192:null,p25519:null};function A(e,t){this.name=e,this.p=new i(t,16),this.n=this.p.bitLength(),this.k=new i(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function E(){A.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function x(){A.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function S(){A.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function C(){A.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function k(e){if("string"==typeof e){var t=i._prime(e);this.m=t.p,this.prime=t}else r(e.gtn(1),"modulus must be greater than 1"),this.m=e,this.prime=null}function _(e){k.call(this,e),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new i(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}A.prototype._tmp=function(){var e=new i(null);return e.words=new Array(Math.ceil(this.n/13)),e},A.prototype.ireduce=function(e){var t,r=e;do{this.split(r,this.tmp),t=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(t>this.n);var n=t<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},A.prototype.split=function(e,t){e.iushrn(this.n,0,t)},A.prototype.imulK=function(e){return e.imul(this.k)},n(E,A),E.prototype.split=function(e,t){for(var r=4194303,n=Math.min(e.length,9),i=0;i<n;i++)t.words[i]=e.words[i];if(t.length=n,e.length<=9)return e.words[0]=0,void(e.length=1);var o=e.words[9];for(t.words[t.length++]=o&r,i=10;i<e.length;i++){var s=0|e.words[i];e.words[i-10]=(s&r)<<4|o>>>22,o=s}o>>>=22,e.words[i-10]=o,0===o&&e.length>10?e.length-=10:e.length-=9},E.prototype.imulK=function(e){e.words[e.length]=0,e.words[e.length+1]=0,e.length+=2;for(var t=0,r=0;r<e.length;r++){var n=0|e.words[r];t+=977*n,e.words[r]=67108863&t,t=64*n+(t/67108864|0)}return 0===e.words[e.length-1]&&(e.length--,0===e.words[e.length-1]&&e.length--),e},n(x,A),n(S,A),n(C,A),C.prototype.imulK=function(e){for(var t=0,r=0;r<e.length;r++){var n=19*(0|e.words[r])+t,i=67108863&n;n>>>=26,e.words[r]=i,t=n}return 0!==t&&(e.words[e.length++]=t),e},i._prime=function(e){if(b[e])return b[e];var t;if("k256"===e)t=new E;else if("p224"===e)t=new x;else if("p192"===e)t=new S;else{if("p25519"!==e)throw new Error("Unknown prime "+e);t=new C}return b[e]=t,t},k.prototype._verify1=function(e){r(0===e.negative,"red works only with positives"),r(e.red,"red works only with red numbers")},k.prototype._verify2=function(e,t){r(0==(e.negative|t.negative),"red works only with positives"),r(e.red&&e.red===t.red,"red works only with red numbers")},k.prototype.imod=function(e){return this.prime?this.prime.ireduce(e)._forceRed(this):(l(e,e.umod(this.m)._forceRed(this)),e)},k.prototype.neg=function(e){return e.isZero()?e.clone():this.m.sub(e)._forceRed(this)},k.prototype.add=function(e,t){this._verify2(e,t);var r=e.add(t);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},k.prototype.iadd=function(e,t){this._verify2(e,t);var r=e.iadd(t);return r.cmp(this.m)>=0&&r.isub(this.m),r},k.prototype.sub=function(e,t){this._verify2(e,t);var r=e.sub(t);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},k.prototype.isub=function(e,t){this._verify2(e,t);var r=e.isub(t);return r.cmpn(0)<0&&r.iadd(this.m),r},k.prototype.shl=function(e,t){return this._verify1(e),this.imod(e.ushln(t))},k.prototype.imul=function(e,t){return this._verify2(e,t),this.imod(e.imul(t))},k.prototype.mul=function(e,t){return this._verify2(e,t),this.imod(e.mul(t))},k.prototype.isqr=function(e){return this.imul(e,e.clone())},k.prototype.sqr=function(e){return this.mul(e,e)},k.prototype.sqrt=function(e){if(e.isZero())return e.clone();var t=this.m.andln(3);if(r(t%2==1),3===t){var n=this.m.add(new i(1)).iushrn(2);return this.pow(e,n)}for(var o=this.m.subn(1),s=0;!o.isZero()&&0===o.andln(1);)s++,o.iushrn(1);r(!o.isZero());var a=new i(1).toRed(this),u=a.redNeg(),c=this.m.subn(1).iushrn(1),l=this.m.bitLength();for(l=new i(2*l*l).toRed(this);0!==this.pow(l,c).cmp(u);)l.redIAdd(u);for(var h=this.pow(l,o),f=this.pow(e,o.addn(1).iushrn(1)),d=this.pow(e,o),p=s;0!==d.cmp(a);){for(var g=d,m=0;0!==g.cmp(a);m++)g=g.redSqr();r(m<p);var y=this.pow(h,new i(1).iushln(p-m-1));f=f.redMul(y),h=y.redSqr(),d=d.redMul(h),p=m}return f},k.prototype.invm=function(e){var t=e._invmp(this.m);return 0!==t.negative?(t.negative=0,this.imod(t).redNeg()):this.imod(t)},k.prototype.pow=function(e,t){if(t.isZero())return new i(1).toRed(this);if(0===t.cmpn(1))return e.clone();var r=new Array(16);r[0]=new i(1).toRed(this),r[1]=e;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],e);var o=r[0],s=0,a=0,u=t.bitLength()%26;for(0===u&&(u=26),n=t.length-1;n>=0;n--){for(var c=t.words[n],l=u-1;l>=0;l--){var h=c>>l&1;o!==r[0]&&(o=this.sqr(o)),0!==h||0!==s?(s<<=1,s|=h,(4===++a||0===n&&0===l)&&(o=this.mul(o,r[s]),a=0,s=0)):a=0}u=26}return o},k.prototype.convertTo=function(e){var t=e.umod(this.m);return t===e?t.clone():t},k.prototype.convertFrom=function(e){var t=e.clone();return t.red=null,t},i.mont=function(e){return new _(e)},n(_,k),_.prototype.convertTo=function(e){return this.imod(e.ushln(this.shift))},_.prototype.convertFrom=function(e){var t=this.imod(e.mul(this.rinv));return t.red=null,t},_.prototype.imul=function(e,t){if(e.isZero()||t.isZero())return e.words[0]=0,e.length=1,e;var r=e.imul(t),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},_.prototype.mul=function(e,t){if(e.isZero()||t.isZero())return new i(0)._forceRed(this);var r=e.mul(t),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),o=r.isub(n).iushrn(this.shift),s=o;return o.cmp(this.m)>=0?s=o.isub(this.m):o.cmpn(0)<0&&(s=o.iadd(this.m)),s._forceRed(this)},_.prototype.invm=function(e){return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this)}}(e,this)})),o.register("e0EMb",(function(e,t){})),o.register("7ZdUu",(function(t,r){e(t.exports,"encode",(function(){return h})),e(t.exports,"decode",(function(){return p}));var n=o("3Yhqu"),i=o("2rINa"),s=o("5LLyF");const a=new(0,i.Logger)(s.version);function u(e){const t=[];for(;e;)t.unshift(255&e),e>>=8;return t}function c(e,t,r){let n=0;for(let i=0;i<r;i++)n=256*n+e[t+i];return n}function l(e){if(Array.isArray(e)){let t=[];if(e.forEach((function(e){t=t.concat(l(e))})),t.length<=55)return t.unshift(192+t.length),t;const r=u(t.length);return r.unshift(247+r.length),r.concat(t)}(0,n.isBytesLike)(e)||a.throwArgumentError("RLP object must be BytesLike","object",e);const t=Array.prototype.slice.call((0,n.arrayify)(e));if(1===t.length&&t[0]<=127)return t;if(t.length<=55)return t.unshift(128+t.length),t;const r=u(t.length);return r.unshift(183+r.length),r.concat(t)}function h(e){return(0,n.hexlify)(l(e))}function f(e,t,r,n){const o=[];for(;r<t+1+n;){const s=d(e,r);o.push(s.result),(r+=s.consumed)>t+1+n&&a.throwError("child data too short",i.Logger.errors.BUFFER_OVERRUN,{})}return{consumed:1+n,result:o}}function d(e,t){if(0===e.length&&a.throwError("data too short",i.Logger.errors.BUFFER_OVERRUN,{}),e[t]>=248){const r=e[t]-247;t+1+r>e.length&&a.throwError("data short segment too short",i.Logger.errors.BUFFER_OVERRUN,{});const n=c(e,t+1,r);return t+1+r+n>e.length&&a.throwError("data long segment too short",i.Logger.errors.BUFFER_OVERRUN,{}),f(e,t,t+1+r,r+n)}if(e[t]>=192){const r=e[t]-192;return t+1+r>e.length&&a.throwError("data array too short",i.Logger.errors.BUFFER_OVERRUN,{}),f(e,t,t+1,r)}if(e[t]>=184){const r=e[t]-183;t+1+r>e.length&&a.throwError("data array too short",i.Logger.errors.BUFFER_OVERRUN,{});const o=c(e,t+1,r);t+1+r+o>e.length&&a.throwError("data array too short",i.Logger.errors.BUFFER_OVERRUN,{});return{consumed:1+r+o,result:(0,n.hexlify)(e.slice(t+1+r,t+1+r+o))}}if(e[t]>=128){const r=e[t]-128;t+1+r>e.length&&a.throwError("data too short",i.Logger.errors.BUFFER_OVERRUN,{});return{consumed:1+r,result:(0,n.hexlify)(e.slice(t+1,t+1+r))}}return{consumed:1,result:(0,n.hexlify)(e[t])}}function p(e){const t=(0,n.arrayify)(e),r=d(t,0);return r.consumed!==t.length&&a.throwArgumentError("invalid rlp data","data",e),r.result}})),o.register("3Yhqu",(function(t,r){e(t.exports,"isBytesLike",(function(){return c})),e(t.exports,"isHexString",(function(){return m})),e(t.exports,"isBytes",(function(){return h})),e(t.exports,"arrayify",(function(){return f})),e(t.exports,"concat",(function(){return d})),e(t.exports,"stripZeros",(function(){return p})),e(t.exports,"zeroPad",(function(){return g})),e(t.exports,"hexlify",(function(){return v})),e(t.exports,"hexDataLength",(function(){return w})),e(t.exports,"hexDataSlice",(function(){return b})),e(t.exports,"hexConcat",(function(){return A})),e(t.exports,"hexValue",(function(){return E})),e(t.exports,"hexStripZeros",(function(){return x})),e(t.exports,"hexZeroPad",(function(){return S})),e(t.exports,"splitSignature",(function(){return C})),e(t.exports,"joinSignature",(function(){return k}));var n=o("2rINa"),i=o("d2nMw");const s=new(0,n.Logger)(i.version);function a(e){return!!e.toHexString}function u(e){return e.slice||(e.slice=function(){const t=Array.prototype.slice.call(arguments);return u(new Uint8Array(Array.prototype.slice.apply(e,t)))}),e}function c(e){return m(e)&&!(e.length%2)||h(e)}function l(e){return"number"==typeof e&&e==e&&e%1==0}function h(e){if(null==e)return!1;if(e.constructor===Uint8Array)return!0;if("string"==typeof e)return!1;if(!l(e.length)||e.length<0)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(!l(r)||r<0||r>=256)return!1}return!0}function f(e,t){if(t||(t={}),"number"==typeof e){s.checkSafeUint53(e,"invalid arrayify value");const t=[];for(;e;)t.unshift(255&e),e=parseInt(String(e/256));return 0===t.length&&t.push(0),u(new Uint8Array(t))}if(t.allowMissingPrefix&&"string"==typeof e&&"0x"!==e.substring(0,2)&&(e="0x"+e),a(e)&&(e=e.toHexString()),m(e)){let r=e.substring(2);r.length%2&&("left"===t.hexPad?r="0"+r:"right"===t.hexPad?r+="0":s.throwArgumentError("hex data is odd-length","value",e));const n=[];for(let e=0;e<r.length;e+=2)n.push(parseInt(r.substring(e,e+2),16));return u(new Uint8Array(n))}return h(e)?u(new Uint8Array(e)):s.throwArgumentError("invalid arrayify value","value",e)}function d(e){const t=e.map((e=>f(e))),r=t.reduce(((e,t)=>e+t.length),0),n=new Uint8Array(r);return t.reduce(((e,t)=>(n.set(t,e),e+t.length)),0),u(n)}function p(e){let t=f(e);if(0===t.length)return t;let r=0;for(;r<t.length&&0===t[r];)r++;return r&&(t=t.slice(r)),t}function g(e,t){(e=f(e)).length>t&&s.throwArgumentError("value out of range","value",arguments[0]);const r=new Uint8Array(t);return r.set(e,t-e.length),u(r)}function m(e,t){return!("string"!=typeof e||!e.match(/^0x[0-9A-Fa-f]*$/))&&(!t||e.length===2+2*t)}const y="0123456789abcdef";function v(e,t){if(t||(t={}),"number"==typeof e){s.checkSafeUint53(e,"invalid hexlify value");let t="";for(;e;)t=y[15&e]+t,e=Math.floor(e/16);return t.length?(t.length%2&&(t="0"+t),"0x"+t):"0x00"}if("bigint"==typeof e)return(e=e.toString(16)).length%2?"0x0"+e:"0x"+e;if(t.allowMissingPrefix&&"string"==typeof e&&"0x"!==e.substring(0,2)&&(e="0x"+e),a(e))return e.toHexString();if(m(e))return e.length%2&&("left"===t.hexPad?e="0x0"+e.substring(2):"right"===t.hexPad?e+="0":s.throwArgumentError("hex data is odd-length","value",e)),e.toLowerCase();if(h(e)){let t="0x";for(let r=0;r<e.length;r++){let n=e[r];t+=y[(240&n)>>4]+y[15&n]}return t}return s.throwArgumentError("invalid hexlify value","value",e)}function w(e){if("string"!=typeof e)e=v(e);else if(!m(e)||e.length%2)return null;return(e.length-2)/2}function b(e,t,r){return"string"!=typeof e?e=v(e):(!m(e)||e.length%2)&&s.throwArgumentError("invalid hexData","value",e),t=2+2*t,null!=r?"0x"+e.substring(t,2+2*r):"0x"+e.substring(t)}function A(e){let t="0x";return e.forEach((e=>{t+=v(e).substring(2)})),t}function E(e){const t=x(v(e,{hexPad:"left"}));return"0x"===t?"0x0":t}function x(e){"string"!=typeof e&&(e=v(e)),m(e)||s.throwArgumentError("invalid hex string","value",e),e=e.substring(2);let t=0;for(;t<e.length&&"0"===e[t];)t++;return"0x"+e.substring(t)}function S(e,t){for("string"!=typeof e?e=v(e):m(e)||s.throwArgumentError("invalid hex string","value",e),e.length>2*t+2&&s.throwArgumentError("value out of range","value",arguments[1]);e.length<2*t+2;)e="0x0"+e.substring(2);return e}function C(e){const t={r:"0x",s:"0x",_vs:"0x",recoveryParam:0,v:0,yParityAndS:"0x",compact:"0x"};if(c(e)){let r=f(e);64===r.length?(t.v=27+(r[32]>>7),r[32]&=127,t.r=v(r.slice(0,32)),t.s=v(r.slice(32,64))):65===r.length?(t.r=v(r.slice(0,32)),t.s=v(r.slice(32,64)),t.v=r[64]):s.throwArgumentError("invalid signature string","signature",e),t.v<27&&(0===t.v||1===t.v?t.v+=27:s.throwArgumentError("signature invalid v byte","signature",e)),t.recoveryParam=1-t.v%2,t.recoveryParam&&(r[32]|=128),t._vs=v(r.slice(32,64))}else{if(t.r=e.r,t.s=e.s,t.v=e.v,t.recoveryParam=e.recoveryParam,t._vs=e._vs,null!=t._vs){const r=g(f(t._vs),32);t._vs=v(r);const n=r[0]>=128?1:0;null==t.recoveryParam?t.recoveryParam=n:t.recoveryParam!==n&&s.throwArgumentError("signature recoveryParam mismatch _vs","signature",e),r[0]&=127;const i=v(r);null==t.s?t.s=i:t.s!==i&&s.throwArgumentError("signature v mismatch _vs","signature",e)}if(null==t.recoveryParam)null==t.v?s.throwArgumentError("signature missing v and recoveryParam","signature",e):0===t.v||1===t.v?t.recoveryParam=t.v:t.recoveryParam=1-t.v%2;else if(null==t.v)t.v=27+t.recoveryParam;else{const r=0===t.v||1===t.v?t.v:1-t.v%2;t.recoveryParam!==r&&s.throwArgumentError("signature recoveryParam mismatch v","signature",e)}null!=t.r&&m(t.r)?t.r=S(t.r,32):s.throwArgumentError("signature missing or invalid r","signature",e),null!=t.s&&m(t.s)?t.s=S(t.s,32):s.throwArgumentError("signature missing or invalid s","signature",e);const r=f(t.s);r[0]>=128&&s.throwArgumentError("signature s out of range","signature",e),t.recoveryParam&&(r[0]|=128);const n=v(r);t._vs&&(m(t._vs)||s.throwArgumentError("signature invalid _vs","signature",e),t._vs=S(t._vs,32)),null==t._vs?t._vs=n:t._vs!==n&&s.throwArgumentError("signature _vs mismatch v and s","signature",e)}return t.yParityAndS=t._vs,t.compact=t.r+t.yParityAndS.substring(2),t}function k(e){return v(d([(e=C(e)).r,e.s,e.recoveryParam?"0x1c":"0x1b"]))}})),o.register("2rINa",(function(t,r){e(t.exports,"ErrorCode",(function(){return d})),e(t.exports,"Logger",(function(){return m}));var n=o("1XHjl");let i=!1,s=!1;const a={debug:1,default:2,info:2,warning:3,error:4,off:5};let u=a.default,c=null;const l=function(){try{const e=[];if(["NFD","NFC","NFKD","NFKC"].forEach((t=>{try{if("test"!=="test".normalize(t))throw new Error("bad normalize")}catch(r){e.push(t)}})),e.length)throw new Error("missing "+e.join(", "));if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken implementation")}catch(e){return e.message}return null}();var h,f,d,p;(f=h||(h={})).DEBUG="DEBUG",f.INFO="INFO",f.WARNING="WARNING",f.ERROR="ERROR",f.OFF="OFF",(p=d||(d={})).UNKNOWN_ERROR="UNKNOWN_ERROR",p.NOT_IMPLEMENTED="NOT_IMPLEMENTED",p.UNSUPPORTED_OPERATION="UNSUPPORTED_OPERATION",p.NETWORK_ERROR="NETWORK_ERROR",p.SERVER_ERROR="SERVER_ERROR",p.TIMEOUT="TIMEOUT",p.BUFFER_OVERRUN="BUFFER_OVERRUN",p.NUMERIC_FAULT="NUMERIC_FAULT",p.MISSING_NEW="MISSING_NEW",p.INVALID_ARGUMENT="INVALID_ARGUMENT",p.MISSING_ARGUMENT="MISSING_ARGUMENT",p.UNEXPECTED_ARGUMENT="UNEXPECTED_ARGUMENT",p.CALL_EXCEPTION="CALL_EXCEPTION",p.INSUFFICIENT_FUNDS="INSUFFICIENT_FUNDS",p.NONCE_EXPIRED="NONCE_EXPIRED",p.REPLACEMENT_UNDERPRICED="REPLACEMENT_UNDERPRICED",p.UNPREDICTABLE_GAS_LIMIT="UNPREDICTABLE_GAS_LIMIT",p.TRANSACTION_REPLACED="TRANSACTION_REPLACED",p.ACTION_REJECTED="ACTION_REJECTED";const g="0123456789abcdef";class m{_log(e,t){const r=e.toLowerCase();null==a[r]&&this.throwArgumentError("invalid log level name","logLevel",e),u>a[r]||console.log.apply(console,t)}debug(...e){this._log(m.levels.DEBUG,e)}info(...e){this._log(m.levels.INFO,e)}warn(...e){this._log(m.levels.WARNING,e)}makeError(e,t,r){if(s)return this.makeError("censored error",t,{});t||(t=m.errors.UNKNOWN_ERROR),r||(r={});const n=[];Object.keys(r).forEach((e=>{const t=r[e];try{if(t instanceof Uint8Array){let r="";for(let e=0;e<t.length;e++)r+=g[t[e]>>4],r+=g[15&t[e]];n.push(e+"=Uint8Array(0x"+r+")")}else n.push(e+"="+JSON.stringify(t))}catch(t){n.push(e+"="+JSON.stringify(r[e].toString()))}})),n.push(`code=${t}`),n.push(`version=${this.version}`);const i=e;let o="";switch(t){case d.NUMERIC_FAULT:{o="NUMERIC_FAULT";const t=e;switch(t){case"overflow":case"underflow":case"division-by-zero":o+="-"+t;break;case"negative-power":case"negative-width":o+="-unsupported";break;case"unbound-bitwise-result":o+="-unbound-result"}break}case d.CALL_EXCEPTION:case d.INSUFFICIENT_FUNDS:case d.MISSING_NEW:case d.NONCE_EXPIRED:case d.REPLACEMENT_UNDERPRICED:case d.TRANSACTION_REPLACED:case d.UNPREDICTABLE_GAS_LIMIT:o=t}o&&(e+=" [ See: https://links.ethers.org/v5-errors-"+o+" ]"),n.length&&(e+=" ("+n.join(", ")+")");const a=new Error(e);return a.reason=i,a.code=t,Object.keys(r).forEach((function(e){a[e]=r[e]})),a}throwError(e,t,r){throw this.makeError(e,t,r)}throwArgumentError(e,t,r){return this.throwError(e,m.errors.INVALID_ARGUMENT,{argument:t,value:r})}assert(e,t,r,n){e||this.throwError(t,r,n)}assertArgument(e,t,r,n){e||this.throwArgumentError(t,r,n)}checkNormalize(e){null==e&&(e="platform missing String.prototype.normalize"),l&&this.throwError("platform missing String.prototype.normalize",m.errors.UNSUPPORTED_OPERATION,{operation:"String.prototype.normalize",form:l})}checkSafeUint53(e,t){"number"==typeof e&&(null==t&&(t="value not safe"),(e<0||e>=9007199254740991)&&this.throwError(t,m.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"out-of-safe-range",value:e}),e%1&&this.throwError(t,m.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"non-integer",value:e}))}checkArgumentCount(e,t,r){r=r?": "+r:"",e<t&&this.throwError("missing argument"+r,m.errors.MISSING_ARGUMENT,{count:e,expectedCount:t}),e>t&&this.throwError("too many arguments"+r,m.errors.UNEXPECTED_ARGUMENT,{count:e,expectedCount:t})}checkNew(e,t){e!==Object&&null!=e||this.throwError("missing new",m.errors.MISSING_NEW,{name:t.name})}checkAbstract(e,t){e===t?this.throwError("cannot instantiate abstract class "+JSON.stringify(t.name)+" directly; use a sub-class",m.errors.UNSUPPORTED_OPERATION,{name:e.name,operation:"new"}):e!==Object&&null!=e||this.throwError("missing new",m.errors.MISSING_NEW,{name:t.name})}static globalLogger(){return c||(c=new m(n.version)),c}static setCensorship(e,t){if(!e&&t&&this.globalLogger().throwError("cannot permanently disable censorship",m.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"}),i){if(!e)return;this.globalLogger().throwError("error censorship permanent",m.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"})}s=!!e,i=!!t}static setLogLevel(e){const t=a[e.toLowerCase()];null!=t?u=t:m.globalLogger().warn("invalid log level - "+e)}static from(e){return new m(e)}constructor(e){Object.defineProperty(this,"version",{enumerable:!0,value:e,writable:!1})}}m.errors=d,m.levels=h})),o.register("1XHjl",(function(t,r){e(t.exports,"version",(function(){return n}));const n="logger/5.7.0"})),o.register("d2nMw",(function(t,r){e(t.exports,"version",(function(){return n}));const n="bytes/5.7.0"})),o.register("5LLyF",(function(t,r){e(t.exports,"version",(function(){return n}));const n="rlp/5.7.0"})),o.register("G6hN9",(function(t,r){e(t.exports,"decode",(function(){return o("9fE0x").decode})),e(t.exports,"encode",(function(){return o("9fE0x").encode}));o("9fE0x")})),o.register("9fE0x",(function(t,r){e(t.exports,"decode",(function(){return i})),e(t.exports,"encode",(function(){return s}));var n=o("3Yhqu");function i(e){e=atob(e);const t=[];for(let r=0;r<e.length;r++)t.push(e.charCodeAt(r));return(0,n.arrayify)(t)}function s(e){e=(0,n.arrayify)(e);let t="";for(let r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return btoa(t)}})),o.register("b38NR",(function(t,r){var n,i,s,a,u,c,l,h,f,d,p,g,m,y,v,w,b,A,E,x,S,C,k,_,P,R;e(t.exports,"inherits",(function(){return n}),(function(e){return n=e})),e(t.exports,"toArray",(function(){return i}),(function(e){return i=e})),e(t.exports,"toHex",(function(){return s}),(function(e){return s=e})),e(t.exports,"htonl",(function(){return a}),(function(e){return a=e})),e(t.exports,"toHex32",(function(){return u}),(function(e){return u=e})),e(t.exports,"zero2",(function(){return c}),(function(e){return c=e})),e(t.exports,"zero8",(function(){return l}),(function(e){return l=e})),e(t.exports,"join32",(function(){return h}),(function(e){return h=e})),e(t.exports,"split32",(function(){return f}),(function(e){return f=e})),e(t.exports,"rotr32",(function(){return d}),(function(e){return d=e})),e(t.exports,"rotl32",(function(){return p}),(function(e){return p=e})),e(t.exports,"sum32",(function(){return g}),(function(e){return g=e})),e(t.exports,"sum32_3",(function(){return m}),(function(e){return m=e})),e(t.exports,"sum32_4",(function(){return y}),(function(e){return y=e})),e(t.exports,"sum32_5",(function(){return v}),(function(e){return v=e})),e(t.exports,"sum64",(function(){return w}),(function(e){return w=e})),e(t.exports,"sum64_hi",(function(){return b}),(function(e){return b=e})),e(t.exports,"sum64_lo",(function(){return A}),(function(e){return A=e})),e(t.exports,"sum64_4_hi",(function(){return E}),(function(e){return E=e})),e(t.exports,"sum64_4_lo",(function(){return x}),(function(e){return x=e})),e(t.exports,"sum64_5_hi",(function(){return S}),(function(e){return S=e})),e(t.exports,"sum64_5_lo",(function(){return C}),(function(e){return C=e})),e(t.exports,"rotr64_hi",(function(){return k}),(function(e){return k=e})),e(t.exports,"rotr64_lo",(function(){return _}),(function(e){return _=e})),e(t.exports,"shr64_hi",(function(){return P}),(function(e){return P=e})),e(t.exports,"shr64_lo",(function(){return R}),(function(e){return R=e}));var O=o("3jmTT"),N=o("3i1mo");function I(e,t){return 55296==(64512&e.charCodeAt(t))&&(!(t<0||t+1>=e.length)&&56320==(64512&e.charCodeAt(t+1)))}function T(e){return(e>>>24|e>>>8&65280|e<<8&16711680|(255&e)<<24)>>>0}function M(e){return 1===e.length?"0"+e:e}function B(e){return 7===e.length?"0"+e:6===e.length?"00"+e:5===e.length?"000"+e:4===e.length?"0000"+e:3===e.length?"00000"+e:2===e.length?"000000"+e:1===e.length?"0000000"+e:e}n=N,i=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"==typeof e)if(t){if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),i=0;i<e.length;i+=2)r.push(parseInt(e[i]+e[i+1],16))}else for(var n=0,i=0;i<e.length;i++){var o=e.charCodeAt(i);o<128?r[n++]=o:o<2048?(r[n++]=o>>6|192,r[n++]=63&o|128):I(e,i)?(o=65536+((1023&o)<<10)+(1023&e.charCodeAt(++i)),r[n++]=o>>18|240,r[n++]=o>>12&63|128,r[n++]=o>>6&63|128,r[n++]=63&o|128):(r[n++]=o>>12|224,r[n++]=o>>6&63|128,r[n++]=63&o|128)}else for(i=0;i<e.length;i++)r[i]=0|e[i];return r},s=function(e){for(var t="",r=0;r<e.length;r++)t+=M(e[r].toString(16));return t},a=T,u=function(e,t){for(var r="",n=0;n<e.length;n++){var i=e[n];"little"===t&&(i=T(i)),r+=B(i.toString(16))}return r},c=M,l=B,h=function(e,t,r,n){var i=r-t;O(i%4==0);for(var o=new Array(i/4),s=0,a=t;s<o.length;s++,a+=4){var u;u="big"===n?e[a]<<24|e[a+1]<<16|e[a+2]<<8|e[a+3]:e[a+3]<<24|e[a+2]<<16|e[a+1]<<8|e[a],o[s]=u>>>0}return o},f=function(e,t){for(var r=new Array(4*e.length),n=0,i=0;n<e.length;n++,i+=4){var o=e[n];"big"===t?(r[i]=o>>>24,r[i+1]=o>>>16&255,r[i+2]=o>>>8&255,r[i+3]=255&o):(r[i+3]=o>>>24,r[i+2]=o>>>16&255,r[i+1]=o>>>8&255,r[i]=255&o)}return r},d=function(e,t){return e>>>t|e<<32-t},p=function(e,t){return e<<t|e>>>32-t},g=function(e,t){return e+t>>>0},m=function(e,t,r){return e+t+r>>>0},y=function(e,t,r,n){return e+t+r+n>>>0},v=function(e,t,r,n,i){return e+t+r+n+i>>>0},w=function(e,t,r,n){var i=e[t],o=n+e[t+1]>>>0,s=(o<n?1:0)+r+i;e[t]=s>>>0,e[t+1]=o},b=function(e,t,r,n){return(t+n>>>0<t?1:0)+e+r>>>0},A=function(e,t,r,n){return t+n>>>0},E=function(e,t,r,n,i,o,s,a){var u=0,c=t;return u+=(c=c+n>>>0)<t?1:0,u+=(c=c+o>>>0)<o?1:0,e+r+i+s+(u+=(c=c+a>>>0)<a?1:0)>>>0},x=function(e,t,r,n,i,o,s,a){return t+n+o+a>>>0},S=function(e,t,r,n,i,o,s,a,u,c){var l=0,h=t;return l+=(h=h+n>>>0)<t?1:0,l+=(h=h+o>>>0)<o?1:0,l+=(h=h+a>>>0)<a?1:0,e+r+i+s+u+(l+=(h=h+c>>>0)<c?1:0)>>>0},C=function(e,t,r,n,i,o,s,a,u,c){return t+n+o+a+c>>>0},k=function(e,t,r){return(t<<32-r|e>>>r)>>>0},_=function(e,t,r){return(e<<32-r|t>>>r)>>>0},P=function(e,t,r){return e>>>r},R=function(e,t,r){return(e<<32-r|t>>>r)>>>0}})),o.register("3jmTT",(function(e,t){function r(e,t){if(!e)throw new Error(t||"Assertion failed")}e.exports=r,r.equal=function(e,t,r){if(e!=t)throw new Error(r||"Assertion failed: "+e+" != "+t)}})),o.register("3i1mo",(function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}})),o.register("dx0A1",(function(t,r){var n;e(t.exports,"BlockHash",(function(){return n}),(function(e){return n=e}));var i=o("b38NR"),s=o("3jmTT");function a(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}n=a,a.prototype.update=function(e,t){if(e=i.toArray(e,t),this.pending?this.pending=this.pending.concat(e):this.pending=e,this.pendingTotal+=e.length,this.pending.length>=this._delta8){var r=(e=this.pending).length%this._delta8;this.pending=e.slice(e.length-r,e.length),0===this.pending.length&&(this.pending=null),e=i.join32(e,0,e.length-r,this.endian);for(var n=0;n<e.length;n+=this._delta32)this._update(e,n,n+this._delta32)}return this},a.prototype.digest=function(e){return this.update(this._pad()),s(null===this.pending),this._digest(e)},a.prototype._pad=function(){var e=this.pendingTotal,t=this._delta8,r=t-(e+this.padLength)%t,n=new Array(r+this.padLength);n[0]=128;for(var i=1;i<r;i++)n[i]=0;if(e<<=3,"big"===this.endian){for(var o=8;o<this.padLength;o++)n[i++]=0;n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=e>>>24&255,n[i++]=e>>>16&255,n[i++]=e>>>8&255,n[i++]=255&e}else for(n[i++]=255&e,n[i++]=e>>>8&255,n[i++]=e>>>16&255,n[i++]=e>>>24&255,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,o=8;o<this.padLength;o++)n[i++]=0;return n}})),o.register("783N8",(function(t,r){var n,i,s,a,u;e(t.exports,"sha1",(function(){return n}),(function(e){return n=e})),e(t.exports,"sha224",(function(){return i}),(function(e){return i=e})),e(t.exports,"sha256",(function(){return s}),(function(e){return s=e})),e(t.exports,"sha384",(function(){return a}),(function(e){return a=e})),e(t.exports,"sha512",(function(){return u}),(function(e){return u=e})),n=o("9tgOt"),i=o("hz1Lv"),s=o("ZPpGW"),a=o("daWaa"),u=o("ivfL3")})),o.register("9tgOt",(function(e,t){"use strict";var r=o("b38NR"),n=o("dx0A1"),i=o("9kgQQ"),s=r.rotl32,a=r.sum32,u=r.sum32_5,c=i.ft_1,l=n.BlockHash,h=[1518500249,1859775393,2400959708,3395469782];function f(){if(!(this instanceof f))return new f;l.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}r.inherits(f,l),e.exports=f,f.blockSize=512,f.outSize=160,f.hmacStrength=80,f.padLength=64,f.prototype._update=function(e,t){for(var r=this.W,n=0;n<16;n++)r[n]=e[t+n];for(;n<r.length;n++)r[n]=s(r[n-3]^r[n-8]^r[n-14]^r[n-16],1);var i=this.h[0],o=this.h[1],l=this.h[2],f=this.h[3],d=this.h[4];for(n=0;n<r.length;n++){var p=~~(n/20),g=u(s(i,5),c(p,o,l,f),d,r[n],h[p]);d=f,f=l,l=s(o,30),o=i,i=g}this.h[0]=a(this.h[0],i),this.h[1]=a(this.h[1],o),this.h[2]=a(this.h[2],l),this.h[3]=a(this.h[3],f),this.h[4]=a(this.h[4],d)},f.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h,"big"):r.split32(this.h,"big")}})),o.register("9kgQQ",(function(t,r){var n,i,s,a,u,c,l;e(t.exports,"ft_1",(function(){return n}),(function(e){return n=e})),e(t.exports,"ch32",(function(){return i}),(function(e){return i=e})),e(t.exports,"maj32",(function(){return s}),(function(e){return s=e})),e(t.exports,"s0_256",(function(){return a}),(function(e){return a=e})),e(t.exports,"s1_256",(function(){return u}),(function(e){return u=e})),e(t.exports,"g0_256",(function(){return c}),(function(e){return c=e})),e(t.exports,"g1_256",(function(){return l}),(function(e){return l=e}));var h=o("b38NR").rotr32;function f(e,t,r){return e&t^~e&r}function d(e,t,r){return e&t^e&r^t&r}function p(e,t,r){return e^t^r}n=function(e,t,r,n){return 0===e?f(t,r,n):1===e||3===e?p(t,r,n):2===e?d(t,r,n):void 0},i=f,s=d,a=function(e){return h(e,2)^h(e,13)^h(e,22)},u=function(e){return h(e,6)^h(e,11)^h(e,25)},c=function(e){return h(e,7)^h(e,18)^e>>>3},l=function(e){return h(e,17)^h(e,19)^e>>>10}})),o.register("hz1Lv",(function(e,t){"use strict";var r=o("b38NR"),n=o("ZPpGW");function i(){if(!(this instanceof i))return new i;n.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}r.inherits(i,n),e.exports=i,i.blockSize=512,i.outSize=224,i.hmacStrength=192,i.padLength=64,i.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h.slice(0,7),"big"):r.split32(this.h.slice(0,7),"big")}})),o.register("ZPpGW",(function(e,t){"use strict";var r=o("b38NR"),n=o("dx0A1"),i=o("9kgQQ"),s=o("3jmTT"),a=r.sum32,u=r.sum32_4,c=r.sum32_5,l=i.ch32,h=i.maj32,f=i.s0_256,d=i.s1_256,p=i.g0_256,g=i.g1_256,m=n.BlockHash,y=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function v(){if(!(this instanceof v))return new v;m.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=y,this.W=new Array(64)}r.inherits(v,m),e.exports=v,v.blockSize=512,v.outSize=256,v.hmacStrength=192,v.padLength=64,v.prototype._update=function(e,t){for(var r=this.W,n=0;n<16;n++)r[n]=e[t+n];for(;n<r.length;n++)r[n]=u(g(r[n-2]),r[n-7],p(r[n-15]),r[n-16]);var i=this.h[0],o=this.h[1],m=this.h[2],y=this.h[3],v=this.h[4],w=this.h[5],b=this.h[6],A=this.h[7];for(s(this.k.length===r.length),n=0;n<r.length;n++){var E=c(A,d(v),l(v,w,b),this.k[n],r[n]),x=a(f(i),h(i,o,m));A=b,b=w,w=v,v=a(y,E),y=m,m=o,o=i,i=a(E,x)}this.h[0]=a(this.h[0],i),this.h[1]=a(this.h[1],o),this.h[2]=a(this.h[2],m),this.h[3]=a(this.h[3],y),this.h[4]=a(this.h[4],v),this.h[5]=a(this.h[5],w),this.h[6]=a(this.h[6],b),this.h[7]=a(this.h[7],A)},v.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h,"big"):r.split32(this.h,"big")}})),o.register("daWaa",(function(e,t){"use strict";var r=o("b38NR"),n=o("ivfL3");function i(){if(!(this instanceof i))return new i;n.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}r.inherits(i,n),e.exports=i,i.blockSize=1024,i.outSize=384,i.hmacStrength=192,i.padLength=128,i.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h.slice(0,12),"big"):r.split32(this.h.slice(0,12),"big")}})),o.register("ivfL3",(function(e,t){"use strict";var r=o("b38NR"),n=o("dx0A1"),i=o("3jmTT"),s=r.rotr64_hi,a=r.rotr64_lo,u=r.shr64_hi,c=r.shr64_lo,l=r.sum64,h=r.sum64_hi,f=r.sum64_lo,d=r.sum64_4_hi,p=r.sum64_4_lo,g=r.sum64_5_hi,m=r.sum64_5_lo,y=n.BlockHash,v=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function w(){if(!(this instanceof w))return new w;y.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=v,this.W=new Array(160)}function b(e,t,r,n,i){var o=e&r^~e&i;return o<0&&(o+=4294967296),o}function A(e,t,r,n,i,o){var s=t&n^~t&o;return s<0&&(s+=4294967296),s}function E(e,t,r,n,i){var o=e&r^e&i^r&i;return o<0&&(o+=4294967296),o}function x(e,t,r,n,i,o){var s=t&n^t&o^n&o;return s<0&&(s+=4294967296),s}function S(e,t){var r=s(e,t,28)^s(t,e,2)^s(t,e,7);return r<0&&(r+=4294967296),r}function C(e,t){var r=a(e,t,28)^a(t,e,2)^a(t,e,7);return r<0&&(r+=4294967296),r}function k(e,t){var r=s(e,t,14)^s(e,t,18)^s(t,e,9);return r<0&&(r+=4294967296),r}function _(e,t){var r=a(e,t,14)^a(e,t,18)^a(t,e,9);return r<0&&(r+=4294967296),r}function P(e,t){var r=s(e,t,1)^s(e,t,8)^u(e,t,7);return r<0&&(r+=4294967296),r}function R(e,t){var r=a(e,t,1)^a(e,t,8)^c(e,t,7);return r<0&&(r+=4294967296),r}function O(e,t){var r=s(e,t,19)^s(t,e,29)^u(e,t,6);return r<0&&(r+=4294967296),r}function N(e,t){var r=a(e,t,19)^a(t,e,29)^c(e,t,6);return r<0&&(r+=4294967296),r}r.inherits(w,y),e.exports=w,w.blockSize=1024,w.outSize=512,w.hmacStrength=192,w.padLength=128,w.prototype._prepareBlock=function(e,t){for(var r=this.W,n=0;n<32;n++)r[n]=e[t+n];for(;n<r.length;n+=2){var i=O(r[n-4],r[n-3]),o=N(r[n-4],r[n-3]),s=r[n-14],a=r[n-13],u=P(r[n-30],r[n-29]),c=R(r[n-30],r[n-29]),l=r[n-32],h=r[n-31];r[n]=d(i,o,s,a,u,c,l,h),r[n+1]=p(i,o,s,a,u,c,l,h)}},w.prototype._update=function(e,t){this._prepareBlock(e,t);var r=this.W,n=this.h[0],o=this.h[1],s=this.h[2],a=this.h[3],u=this.h[4],c=this.h[5],d=this.h[6],p=this.h[7],y=this.h[8],v=this.h[9],w=this.h[10],P=this.h[11],R=this.h[12],O=this.h[13],N=this.h[14],I=this.h[15];i(this.k.length===r.length);for(var T=0;T<r.length;T+=2){var M=N,B=I,F=k(y,v),L=_(y,v),D=b(y,v,w,P,R),j=A(y,v,w,P,R,O),U=this.k[T],z=this.k[T+1],q=r[T],K=r[T+1],G=g(M,B,F,L,D,j,U,z,q,K),W=m(M,B,F,L,D,j,U,z,q,K);M=S(n,o),B=C(n,o),F=E(n,o,s,a,u),L=x(n,o,s,a,u,c);var H=h(M,B,F,L),J=f(M,B,F,L);N=R,I=O,R=w,O=P,w=y,P=v,y=h(d,p,G,W),v=f(p,p,G,W),d=u,p=c,u=s,c=a,s=n,a=o,n=h(G,W,H,J),o=f(G,W,H,J)}l(this.h,0,n,o),l(this.h,2,s,a),l(this.h,4,u,c),l(this.h,6,d,p),l(this.h,8,y,v),l(this.h,10,w,P),l(this.h,12,R,O),l(this.h,14,N,I)},w.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h,"big"):r.split32(this.h,"big")}})),o.register("j1ZCa",(function(t,r){var n;e(t.exports,"ripemd160",(function(){return n}),(function(e){return n=e}));var i=o("b38NR"),s=o("dx0A1"),a=i.rotl32,u=i.sum32,c=i.sum32_3,l=i.sum32_4,h=s.BlockHash;function f(){if(!(this instanceof f))return new f;h.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function d(e,t,r,n){return e<=15?t^r^n:e<=31?t&r|~t&n:e<=47?(t|~r)^n:e<=63?t&n|r&~n:t^(r|~n)}function p(e){return e<=15?0:e<=31?1518500249:e<=47?1859775393:e<=63?2400959708:2840853838}function g(e){return e<=15?1352829926:e<=31?1548603684:e<=47?1836072691:e<=63?2053994217:0}i.inherits(f,h),n=f,f.blockSize=512,f.outSize=160,f.hmacStrength=192,f.padLength=64,f.prototype._update=function(e,t){for(var r=this.h[0],n=this.h[1],i=this.h[2],o=this.h[3],s=this.h[4],h=r,f=n,b=i,A=o,E=s,x=0;x<80;x++){var S=u(a(l(r,d(x,n,i,o),e[m[x]+t],p(x)),v[x]),s);r=s,s=o,o=a(i,10),i=n,n=S,S=u(a(l(h,d(79-x,f,b,A),e[y[x]+t],g(x)),w[x]),E),h=E,E=A,A=a(b,10),b=f,f=S}S=c(this.h[1],i,A),this.h[1]=c(this.h[2],o,E),this.h[2]=c(this.h[3],s,h),this.h[3]=c(this.h[4],r,f),this.h[4]=c(this.h[0],n,b),this.h[0]=S},f.prototype._digest=function(e){return"hex"===e?i.toHex32(this.h,"little"):i.split32(this.h,"little")};var m=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],y=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],v=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],w=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]})),o.register("L28J4",(function(e,t){"use strict";var r=o("b38NR"),n=o("3jmTT");function i(e,t,n){if(!(this instanceof i))return new i(e,t,n);this.Hash=e,this.blockSize=e.blockSize/8,this.outSize=e.outSize/8,this.inner=null,this.outer=null,this._init(r.toArray(t,n))}e.exports=i,i.prototype._init=function(e){e.length>this.blockSize&&(e=(new this.Hash).update(e).digest()),n(e.length<=this.blockSize);for(var t=e.length;t<this.blockSize;t++)e.push(0);for(t=0;t<e.length;t++)e[t]^=54;for(this.inner=(new this.Hash).update(e),t=0;t<e.length;t++)e[t]^=106;this.outer=(new this.Hash).update(e)},i.prototype.update=function(e,t){return this.inner.update(e,t),this},i.prototype.digest=function(e){return this.outer.update(this.inner.digest()),this.outer.digest(e)}})),o.register("lif7x",(function(e,t){var r=o("cIKLi"),n=o("2UdYc"),i=o("GxxE1")("socket.io-client");e.exports=t=a;var s=t.managers={};function a(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,a=r(e),u=a.source,c=a.id,l=a.path,h=s[c]&&l in s[c].nsps;return t.forceNew||t["force new connection"]||!1===t.multiplex||h?(i("ignoring socket cache for %s",u),n=o("4VBWV")(u,t)):(s[c]||(i("new io instance for %s",u),s[c]=o("4VBWV")(u,t)),n=s[c]),a.query&&!t.query&&(t.query=a.query),n.socket(a.path,t)}t.protocol=n.protocol,t.connect=a,t.Manager=o("4VBWV"),t.Socket=o("1FJi6")})),o.register("cIKLi",(function(e,t){var r=o("i8cMY"),n=o("GxxE1")("socket.io-client:url");e.exports=function(e,t){var i=e;t=t||"undefined"!=typeof location&&location,null==e&&(e=t.protocol+"//"+t.host);"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?t.protocol+e:t.host+e),/^(https?|wss?):\/\//.test(e)||(n("protocol-less url %s",e),e=void 0!==t?t.protocol+"//"+e:"https://"+e),n("parse %s",e),i=r(e));i.port||(/^(http|ws)$/.test(i.protocol)?i.port="80":/^(http|ws)s$/.test(i.protocol)&&(i.port="443"));i.path=i.path||"/";var o=-1!==i.host.indexOf(":")?"["+i.host+"]":i.host;return i.id=i.protocol+"://"+o+":"+i.port,i.href=i.protocol+"://"+o+(t&&t.port===i.port?"":":"+i.port),i}})),o.register("i8cMY",(function(e,t){var r=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var t=e,i=e.indexOf("["),o=e.indexOf("]");-1!=i&&-1!=o&&(e=e.substring(0,i)+e.substring(i,o).replace(/:/g,";")+e.substring(o,e.length));for(var s,a,u=r.exec(e||""),c={},l=14;l--;)c[n[l]]=u[l]||"";return-1!=i&&-1!=o&&(c.source=t,c.host=c.host.substring(1,c.host.length-1).replace(/;/g,":"),c.authority=c.authority.replace("[","").replace("]","").replace(/;/g,":"),c.ipv6uri=!0),c.pathNames=function(e,t){var r=/\/{2,9}/g,n=t.replace(r,"/").split("/");"/"!=t.substr(0,1)&&0!==t.length||n.splice(0,1);"/"==t.substr(t.length-1,1)&&n.splice(n.length-1,1);return n}(0,c.path),c.queryKey=(s=c.query,a={},s.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,t,r){t&&(a[t]=r)})),a),c}})),o.register("GxxE1",(function(e,t){var r=o("d5Ya9");function n(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=void 0),e}(t=e.exports=o("dmvBY")).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var r=this.useColors;if(e[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+e[0]+(r?"%c ":" ")+"+"+t.humanize(this.diff),!r)return;var n="color: "+this.color;e.splice(1,0,n,"color: inherit");var i=0,o=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(i++,"%c"===e&&(o=i))})),e.splice(o,0,n)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=n,t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(n())})),o.register("d5Ya9",(function(e,t){var r,n,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(r===setTimeout)return setTimeout(e,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(e){r=o}try{n="function"==typeof clearTimeout?clearTimeout:s}catch(e){n=s}}();var u,c=[],l=!1,h=-1;function f(){l&&u&&(l=!1,u.length?c=u.concat(c):h=-1,c.length&&d())}function d(){if(!l){var e=a(f);l=!0;for(var t=c.length;t;){for(u=c,c=[];++h<t;)u&&u[h].run();h=-1,t=c.length}u=null,l=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function g(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new p(e,t)),1!==c.length||l||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}})),o.register("dmvBY",(function(e,t){function r(e){var r;function i(){if(i.enabled){var e=i,n=+new Date,o=n-(r||n);e.diff=o,e.prev=r,e.curr=n,r=n;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=t.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var u=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,(function(r,n){if("%%"===r)return r;u++;var i=t.formatters[n];if("function"==typeof i){var o=s[u];r=i.call(e,o),s.splice(u,1),u--}return r})),t.formatArgs.call(e,s);var c=i.log||t.log||console.log.bind(console);c.apply(e,s)}}return i.namespace=e,i.enabled=t.enabled(e),i.useColors=t.useColors(),i.color=function(e){var r,n=0;for(r in e)n=(n<<5)-n+e.charCodeAt(r),n|=0;return t.colors[Math.abs(n)%t.colors.length]}(e),i.destroy=n,"function"==typeof t.init&&t.init(i),t.instances.push(i),i}function n(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var r;t.save(e),t.names=[],t.skips=[];var n=("string"==typeof e?e:"").split(/[\s,]+/),i=n.length;for(r=0;r<i;r++)n[r]&&("-"===(e=n[r].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(r=0;r<t.instances.length;r++){var o=t.instances[r];o.enabled=t.enabled(o.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var r,n;for(r=0,n=t.skips.length;r<n;r++)if(t.skips[r].test(e))return!1;for(r=0,n=t.names.length;r<n;r++)if(t.names[r].test(e))return!0;return!1},t.humanize=o("vg6Sd"),t.instances=[],t.names=[],t.skips=[],t.formatters={}})),o.register("vg6Sd",(function(e,t){var r=1e3,n=6e4,i=36e5,o=864e5,s=315576e5;function a(e,t,r){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+r:Math.ceil(e/t)+" "+r+"s"}e.exports=function(e,t){t=t||{};var u,c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var a=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*i;case"minutes":case"minute":case"mins":case"min":case"m":return a*n;case"seconds":case"second":case"secs":case"sec":case"s":return a*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(e);if("number"===c&&!1===isNaN(e))return t.long?a(u=e,o,"day")||a(u,i,"hour")||a(u,n,"minute")||a(u,r,"second")||u+" ms":function(e){return e>=o?Math.round(e/o)+"d":e>=i?Math.round(e/i)+"h":e>=n?Math.round(e/n)+"m":e>=r?Math.round(e/r)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}})),o.register("2UdYc",(function(t,r){var n,i,s,a,u,c,l,h,f,d,p;e(t.exports,"protocol",(function(){return n}),(function(e){return n=e})),e(t.exports,"types",(function(){return i}),(function(e){return i=e})),e(t.exports,"CONNECT",(function(){return s}),(function(e){return s=e})),e(t.exports,"DISCONNECT",(function(){return a}),(function(e){return a=e})),e(t.exports,"EVENT",(function(){return u}),(function(e){return u=e})),e(t.exports,"ACK",(function(){return c}),(function(e){return c=e})),e(t.exports,"ERROR",(function(){return l}),(function(e){return l=e})),e(t.exports,"BINARY_EVENT",(function(){return h}),(function(e){return h=e})),e(t.exports,"BINARY_ACK",(function(){return f}),(function(e){return f=e})),e(t.exports,"Encoder",(function(){return d}),(function(e){return d=e})),e(t.exports,"Decoder",(function(){return p}),(function(e){return p=e}));var g=o("evfUg")("socket.io-parser"),m=o("21ZTD"),y=o("7WMrZ"),v=o("d206p"),w=o("1z9d3");function b(){}n=4,i=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],s=0,a=1,u=2,c=3,h=5,f=6,d=b,p=x;var A=(l=4)+'"encode error"';function E(e){var t=""+e.type;if(h!==e.type&&f!==e.type||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data){var r=function(e){try{return JSON.stringify(e)}catch(e){return!1}}(e.data);if(!1===r)return A;t+=r}return g("encoded %j as %s",e,t),t}function x(){this.reconstructor=null}function S(e){this.reconPack=e,this.buffers=[]}function C(e){return{type:l,data:"parser error: "+e}}b.prototype.encode=function(e,t){(g("encoding packet %j",e),h===e.type||f===e.type)?function(e,t){function r(e){var r=y.deconstructPacket(e),n=E(r.packet),i=r.buffers;i.unshift(n),t(i)}y.removeBlobs(e,r)}(e,t):t([E(e)])},m(x.prototype),x.prototype.add=function(e){var t;if("string"==typeof e)t=function(e){var t=0,r={type:Number(e.charAt(0))};if(null==i[r.type])return C("unknown packet type "+r.type);if(h===r.type||f===r.type){for(var n=t+1;"-"!==e.charAt(++t)&&t!=e.length;);var o=e.substring(n,t);if(o!=Number(o)||"-"!==e.charAt(t))throw new Error("Illegal attachments");r.attachments=Number(o)}if("/"===e.charAt(t+1)){for(n=t+1;++t;){if(","===(a=e.charAt(t)))break;if(t===e.length)break}r.nsp=e.substring(n,t)}else r.nsp="/";var s=e.charAt(t+1);if(""!==s&&Number(s)==s){for(n=t+1;++t;){var a;if(null==(a=e.charAt(t))||Number(a)!=a){--t;break}if(t===e.length)break}r.id=Number(e.substring(n,t+1))}if(e.charAt(++t)){var u=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(t));if(!(!1!==u&&(r.type===l||v(u))))return C("invalid payload");r.data=u}return g("decoded %s as %j",e,r),r}(e),h===t.type||f===t.type?(this.reconstructor=new S(t),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",t)):this.emit("decoded",t);else{if(!w(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(t=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,this.emit("decoded",t))}},x.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},S.prototype.takeBinaryData=function(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){var t=y.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null},S.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}})),o.register("evfUg",(function(e,t){var r=o("d5Ya9");function n(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=void 0),e}(t=e.exports=o("4f6pw")).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var r=this.useColors;if(e[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+e[0]+(r?"%c ":" ")+"+"+t.humanize(this.diff),!r)return;var n="color: "+this.color;e.splice(1,0,n,"color: inherit");var i=0,o=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(i++,"%c"===e&&(o=i))})),e.splice(o,0,n)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=n,t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(n())})),o.register("4f6pw",(function(e,t){function r(e){var r;function i(){if(i.enabled){var e=i,n=+new Date,o=n-(r||n);e.diff=o,e.prev=r,e.curr=n,r=n;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=t.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var u=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,(function(r,n){if("%%"===r)return r;u++;var i=t.formatters[n];if("function"==typeof i){var o=s[u];r=i.call(e,o),s.splice(u,1),u--}return r})),t.formatArgs.call(e,s);var c=i.log||t.log||console.log.bind(console);c.apply(e,s)}}return i.namespace=e,i.enabled=t.enabled(e),i.useColors=t.useColors(),i.color=function(e){var r,n=0;for(r in e)n=(n<<5)-n+e.charCodeAt(r),n|=0;return t.colors[Math.abs(n)%t.colors.length]}(e),i.destroy=n,"function"==typeof t.init&&t.init(i),t.instances.push(i),i}function n(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var r;t.save(e),t.names=[],t.skips=[];var n=("string"==typeof e?e:"").split(/[\s,]+/),i=n.length;for(r=0;r<i;r++)n[r]&&("-"===(e=n[r].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(r=0;r<t.instances.length;r++){var o=t.instances[r];o.enabled=t.enabled(o.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var r,n;for(r=0,n=t.skips.length;r<n;r++)if(t.skips[r].test(e))return!1;for(r=0,n=t.names.length;r<n;r++)if(t.names[r].test(e))return!0;return!1},t.humanize=o("1qDPb"),t.instances=[],t.names=[],t.skips=[],t.formatters={}})),o.register("1qDPb",(function(e,t){var r=1e3,n=6e4,i=36e5,o=864e5,s=315576e5;function a(e,t,r){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+r:Math.ceil(e/t)+" "+r+"s"}e.exports=function(e,t){t=t||{};var u,c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var a=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*i;case"minutes":case"minute":case"mins":case"min":case"m":return a*n;case"seconds":case"second":case"secs":case"sec":case"s":return a*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(e);if("number"===c&&!1===isNaN(e))return t.long?a(u=e,o,"day")||a(u,i,"hour")||a(u,n,"minute")||a(u,r,"second")||u+" ms":function(e){return e>=o?Math.round(e/o)+"d":e>=i?Math.round(e/i)+"h":e>=n?Math.round(e/n)+"m":e>=r?Math.round(e/r)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}})),o.register("21ZTD",(function(e,t){function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function r(){this.off(e,r),t.apply(this,arguments)}return r.fn=t,this.on(e,r),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var r,n=this._callbacks["$"+e];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var i=0;i<n.length;i++)if((r=n[i])===t||r.fn===t){n.splice(i,1);break}return 0===n.length&&delete this._callbacks["$"+e],this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),r=this._callbacks["$"+e],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(r){n=0;for(var i=(r=r.slice(0)).length;n<i;++n)r[n].apply(this,t)}return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}})),o.register("7WMrZ",(function(t,r){var n,i,s;e(t.exports,"deconstructPacket",(function(){return n}),(function(e){return n=e})),e(t.exports,"reconstructPacket",(function(){return i}),(function(e){return i=e})),e(t.exports,"removeBlobs",(function(){return s}),(function(e){return s=e}));var a=o("d206p"),u=o("1z9d3"),c=Object.prototype.toString,l="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===c.call(Blob),h="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===c.call(File);function f(e,t){if(!e)return e;if(u(e)){var r={_placeholder:!0,num:t.length};return t.push(e),r}if(a(e)){for(var n=new Array(e.length),i=0;i<e.length;i++)n[i]=f(e[i],t);return n}if("object"==typeof e&&!(e instanceof Date)){n={};for(var o in e)n[o]=f(e[o],t);return n}return e}function d(e,t){if(!e)return e;if(e&&e._placeholder)return t[e.num];if(a(e))for(var r=0;r<e.length;r++)e[r]=d(e[r],t);else if("object"==typeof e)for(var n in e)e[n]=d(e[n],t);return e}n=function(e){var t=[],r=e.data,n=e;return n.data=f(r,t),n.attachments=t.length,{packet:n,buffers:t}},i=function(e,t){return e.data=d(e.data,t),e.attachments=void 0,e},s=function(e,t){var r=0,n=e;!function e(i,o,s){if(!i)return i;if(l&&i instanceof Blob||h&&i instanceof File){r++;var c=new FileReader;c.onload=function(){s?s[o]=this.result:n=this.result,--r||t(n)},c.readAsArrayBuffer(i)}else if(a(i))for(var f=0;f<i.length;f++)e(i[f],f,i);else if("object"==typeof i&&!u(i))for(var d in i)e(i[d],d,i)}(n),r||t(n)}})),o.register("d206p",(function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}})),o.register("1z9d3",(function(e,t){var r=o("1j0oY").Buffer;e.exports=function(e){return n&&r.isBuffer(e)||i&&(e instanceof ArrayBuffer||function(e){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer}(e))};var n="function"==typeof r&&"function"==typeof r.isBuffer,i="function"==typeof ArrayBuffer})),o.register("1j0oY",(function(t,r){var n,i,s,a;e(t.exports,"Buffer",(function(){return n}),(function(e){return n=e})),e(t.exports,"SlowBuffer",(function(){return i}),(function(e){return i=e})),e(t.exports,"INSPECT_MAX_BYTES",(function(){return s}),(function(e){return s=e})),e(t.exports,"kMaxLength",(function(){return a}),(function(e){return a=e}));var u=o("fXOdH"),c=o("2JRKd");const l="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;n=d,i=function(e){+e!=e&&(e=0);return d.alloc(+e)},s=50;const h=2147483647;function f(e){if(e>h)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,d.prototype),t}function d(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return m(e)}return p(e,t,r)}function p(e,t,r){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!d.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const r=0|b(e,t);let n=f(r);const i=n.write(e,t);i!==r&&(n=n.slice(0,i));return n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(ee(e,Uint8Array)){const t=new Uint8Array(e);return v(t.buffer,t.byteOffset,t.byteLength)}return y(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(ee(e,ArrayBuffer)||e&&ee(e.buffer,ArrayBuffer))return v(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&(ee(e,SharedArrayBuffer)||e&&ee(e.buffer,SharedArrayBuffer)))return v(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return d.from(n,t,r);const i=function(e){if(d.isBuffer(e)){const t=0|w(e.length),r=f(t);return 0===r.length||e.copy(r,0,0,t),r}if(void 0!==e.length)return"number"!=typeof e.length||te(e.length)?f(0):y(e);if("Buffer"===e.type&&Array.isArray(e.data))return y(e.data)}(e);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return d.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function g(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function m(e){return g(e),f(e<0?0:0|w(e))}function y(e){const t=e.length<0?0:0|w(e.length),r=f(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function v(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(n,d.prototype),n}function w(e){if(e>=h)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+h.toString(16)+" bytes");return 0|e}function b(e,t){if(d.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||ee(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let i=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return Z(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return X(e).length;default:if(i)return n?-1:Z(e).length;t=(""+t).toLowerCase(),i=!0}}function A(e,t,r){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return B(this,t,r);case"utf8":case"utf-8":return N(this,t,r);case"ascii":return T(this,t,r);case"latin1":case"binary":return M(this,t,r);case"base64":return O(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return F(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function E(e,t,r){const n=e[t];e[t]=e[r],e[r]=n}function x(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),te(r=+r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=d.from(t,n)),d.isBuffer(t))return 0===t.length?-1:S(e,t,r,n,i);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):S(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function S(e,t,r,n,i){let o,s=1,a=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;s=2,a/=2,u/=2,r/=2}function c(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(i){let n=-1;for(o=r;o<a;o++)if(c(e,o)===c(t,-1===n?0:o-n)){if(-1===n&&(n=o),o-n+1===u)return n*s}else-1!==n&&(o-=o-n),n=-1}else for(r+u>a&&(r=a-u),o=r;o>=0;o--){let r=!0;for(let n=0;n<u;n++)if(c(e,o+n)!==c(t,n)){r=!1;break}if(r)return o}return-1}function C(e,t,r,n){r=Number(r)||0;const i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;const o=t.length;let s;for(n>o/2&&(n=o/2),s=0;s<n;++s){const n=parseInt(t.substr(2*s,2),16);if(te(n))return s;e[r+s]=n}return s}function k(e,t,r,n){return $(Z(t,e.length-r),e,r,n)}function _(e,t,r,n){return $(function(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function P(e,t,r,n){return $(X(t),e,r,n)}function R(e,t,r,n){return $(function(e,t){let r,n,i;const o=[];for(let s=0;s<e.length&&!((t-=2)<0);++s)r=e.charCodeAt(s),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(t,e.length-r),e,r,n)}function O(e,t,r){return 0===t&&r===e.length?u.fromByteArray(e):u.fromByteArray(e.slice(t,r))}function N(e,t,r){r=Math.min(e.length,r);const n=[];let i=t;for(;i<r;){const t=e[i];let o=null,s=t>239?4:t>223?3:t>191?2:1;if(i+s<=r){let r,n,a,u;switch(s){case 1:t<128&&(o=t);break;case 2:r=e[i+1],128==(192&r)&&(u=(31&t)<<6|63&r,u>127&&(o=u));break;case 3:r=e[i+1],n=e[i+2],128==(192&r)&&128==(192&n)&&(u=(15&t)<<12|(63&r)<<6|63&n,u>2047&&(u<55296||u>57343)&&(o=u));break;case 4:r=e[i+1],n=e[i+2],a=e[i+3],128==(192&r)&&128==(192&n)&&128==(192&a)&&(u=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&a,u>65535&&u<1114112&&(o=u))}}null===o?(o=65533,s=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),i+=s}return function(e){const t=e.length;if(t<=I)return String.fromCharCode.apply(String,e);let r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=I));return r}(n)}a=h,d.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),d.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(d.prototype,"parent",{enumerable:!0,get:function(){if(d.isBuffer(this))return this.buffer}}),Object.defineProperty(d.prototype,"offset",{enumerable:!0,get:function(){if(d.isBuffer(this))return this.byteOffset}}),d.poolSize=8192,d.from=function(e,t,r){return p(e,t,r)},Object.setPrototypeOf(d.prototype,Uint8Array.prototype),Object.setPrototypeOf(d,Uint8Array),d.alloc=function(e,t,r){return function(e,t,r){return g(e),e<=0?f(e):void 0!==t?"string"==typeof r?f(e).fill(t,r):f(e).fill(t):f(e)}(e,t,r)},d.allocUnsafe=function(e){return m(e)},d.allocUnsafeSlow=function(e){return m(e)},d.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==d.prototype},d.compare=function(e,t){if(ee(e,Uint8Array)&&(e=d.from(e,e.offset,e.byteLength)),ee(t,Uint8Array)&&(t=d.from(t,t.offset,t.byteLength)),!d.isBuffer(e)||!d.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},d.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},d.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return d.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const n=d.allocUnsafe(t);let i=0;for(r=0;r<e.length;++r){let t=e[r];if(ee(t,Uint8Array))i+t.length>n.length?(d.isBuffer(t)||(t=d.from(t)),t.copy(n,i)):Uint8Array.prototype.set.call(n,t,i);else{if(!d.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(n,i)}i+=t.length}return n},d.byteLength=b,d.prototype._isBuffer=!0,d.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)E(this,t,t+1);return this},d.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)E(this,t,t+3),E(this,t+1,t+2);return this},d.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)E(this,t,t+7),E(this,t+1,t+6),E(this,t+2,t+5),E(this,t+3,t+4);return this},d.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?N(this,0,e):A.apply(this,arguments)},d.prototype.toLocaleString=d.prototype.toString,d.prototype.equals=function(e){if(!d.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===d.compare(this,e)},d.prototype.inspect=function(){let e="";const t=s;return e=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim(),this.length>t&&(e+=" ... "),"<Buffer "+e+">"},l&&(d.prototype[l]=d.prototype.inspect),d.prototype.compare=function(e,t,r,n,i){if(ee(e,Uint8Array)&&(e=d.from(e,e.offset,e.byteLength)),!d.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;let o=(i>>>=0)-(n>>>=0),s=(r>>>=0)-(t>>>=0);const a=Math.min(o,s),u=this.slice(n,i),c=e.slice(t,r);for(let e=0;e<a;++e)if(u[e]!==c[e]){o=u[e],s=c[e];break}return o<s?-1:s<o?1:0},d.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},d.prototype.indexOf=function(e,t,r){return x(this,e,t,r,!0)},d.prototype.lastIndexOf=function(e,t,r){return x(this,e,t,r,!1)},d.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let o=!1;for(;;)switch(n){case"hex":return C(this,e,t,r);case"utf8":case"utf-8":return k(this,e,t,r);case"ascii":case"latin1":case"binary":return _(this,e,t,r);case"base64":return P(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},d.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const I=4096;function T(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function M(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function B(e,t,r){const n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let i="";for(let n=t;n<r;++n)i+=re[e[n]];return i}function F(e,t,r){const n=e.slice(t,r);let i="";for(let e=0;e<n.length-1;e+=2)i+=String.fromCharCode(n[e]+256*n[e+1]);return i}function L(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function D(e,t,r,n,i,o){if(!d.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function j(e,t,r,n,i){J(t,n,i,e,r,7);let o=Number(t&BigInt(4294967295));e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o;let s=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,r}function U(e,t,r,n,i){J(t,n,i,e,r,7);let o=Number(t&BigInt(4294967295));e[r+7]=o,o>>=8,e[r+6]=o,o>>=8,e[r+5]=o,o>>=8,e[r+4]=o;let s=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=s,s>>=8,e[r+2]=s,s>>=8,e[r+1]=s,s>>=8,e[r]=s,r+8}function z(e,t,r,n,i,o){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function q(e,t,r,n,i){return t=+t,r>>>=0,i||z(e,0,r,4),c.write(e,t,r,n,23,4),r+4}function K(e,t,r,n,i){return t=+t,r>>>=0,i||z(e,0,r,8),c.write(e,t,r,n,52,8),r+8}d.prototype.slice=function(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);const n=this.subarray(e,t);return Object.setPrototypeOf(n,d.prototype),n},d.prototype.readUintLE=d.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||L(e,t,this.length);let n=this[e],i=1,o=0;for(;++o<t&&(i*=256);)n+=this[e+o]*i;return n},d.prototype.readUintBE=d.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||L(e,t,this.length);let n=this[e+--t],i=1;for(;t>0&&(i*=256);)n+=this[e+--t]*i;return n},d.prototype.readUint8=d.prototype.readUInt8=function(e,t){return e>>>=0,t||L(e,1,this.length),this[e]},d.prototype.readUint16LE=d.prototype.readUInt16LE=function(e,t){return e>>>=0,t||L(e,2,this.length),this[e]|this[e+1]<<8},d.prototype.readUint16BE=d.prototype.readUInt16BE=function(e,t){return e>>>=0,t||L(e,2,this.length),this[e]<<8|this[e+1]},d.prototype.readUint32LE=d.prototype.readUInt32LE=function(e,t){return e>>>=0,t||L(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},d.prototype.readUint32BE=d.prototype.readUInt32BE=function(e,t){return e>>>=0,t||L(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},d.prototype.readBigUInt64LE=ne((function(e){V(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||Y(e,this.length-8);const n=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,i=this[++e]+256*this[++e]+65536*this[++e]+r*2**24;return BigInt(n)+(BigInt(i)<<BigInt(32))})),d.prototype.readBigUInt64BE=ne((function(e){V(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||Y(e,this.length-8);const n=t*2**24+65536*this[++e]+256*this[++e]+this[++e],i=this[++e]*2**24+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(i)})),d.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||L(e,t,this.length);let n=this[e],i=1,o=0;for(;++o<t&&(i*=256);)n+=this[e+o]*i;return i*=128,n>=i&&(n-=Math.pow(2,8*t)),n},d.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||L(e,t,this.length);let n=t,i=1,o=this[e+--n];for(;n>0&&(i*=256);)o+=this[e+--n]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*t)),o},d.prototype.readInt8=function(e,t){return e>>>=0,t||L(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},d.prototype.readInt16LE=function(e,t){e>>>=0,t||L(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},d.prototype.readInt16BE=function(e,t){e>>>=0,t||L(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},d.prototype.readInt32LE=function(e,t){return e>>>=0,t||L(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},d.prototype.readInt32BE=function(e,t){return e>>>=0,t||L(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},d.prototype.readBigInt64LE=ne((function(e){V(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||Y(e,this.length-8);const n=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),d.prototype.readBigInt64BE=ne((function(e){V(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||Y(e,this.length-8);const n=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(n)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+r)})),d.prototype.readFloatLE=function(e,t){return e>>>=0,t||L(e,4,this.length),c.read(this,e,!0,23,4)},d.prototype.readFloatBE=function(e,t){return e>>>=0,t||L(e,4,this.length),c.read(this,e,!1,23,4)},d.prototype.readDoubleLE=function(e,t){return e>>>=0,t||L(e,8,this.length),c.read(this,e,!0,52,8)},d.prototype.readDoubleBE=function(e,t){return e>>>=0,t||L(e,8,this.length),c.read(this,e,!1,52,8)},d.prototype.writeUintLE=d.prototype.writeUIntLE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){D(this,e,t,r,Math.pow(2,8*r)-1,0)}let i=1,o=0;for(this[t]=255&e;++o<r&&(i*=256);)this[t+o]=e/i&255;return t+r},d.prototype.writeUintBE=d.prototype.writeUIntBE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){D(this,e,t,r,Math.pow(2,8*r)-1,0)}let i=r-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+r},d.prototype.writeUint8=d.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,1,255,0),this[t]=255&e,t+1},d.prototype.writeUint16LE=d.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},d.prototype.writeUint16BE=d.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},d.prototype.writeUint32LE=d.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},d.prototype.writeUint32BE=d.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},d.prototype.writeBigUInt64LE=ne((function(e,t=0){return j(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),d.prototype.writeBigUInt64BE=ne((function(e,t=0){return U(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),d.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);D(this,e,t,r,n-1,-n)}let i=0,o=1,s=0;for(this[t]=255&e;++i<r&&(o*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/o>>0)-s&255;return t+r},d.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);D(this,e,t,r,n-1,-n)}let i=r-1,o=1,s=0;for(this[t+i]=255&e;--i>=0&&(o*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/o>>0)-s&255;return t+r},d.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},d.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},d.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},d.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},d.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||D(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},d.prototype.writeBigInt64LE=ne((function(e,t=0){return j(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),d.prototype.writeBigInt64BE=ne((function(e,t=0){return U(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),d.prototype.writeFloatLE=function(e,t,r){return q(this,e,t,!0,r)},d.prototype.writeFloatBE=function(e,t,r){return q(this,e,t,!1,r)},d.prototype.writeDoubleLE=function(e,t,r){return K(this,e,t,!0,r)},d.prototype.writeDoubleBE=function(e,t,r){return K(this,e,t,!1,r)},d.prototype.copy=function(e,t,r,n){if(!d.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);const i=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),i},d.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!d.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){const t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;let i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{const o=d.isBuffer(e)?e:d.from(e,n),s=o.length;if(0===s)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<r-t;++i)this[i+t]=o[i%s]}return this};const G={};function W(e,t,r){G[e]=class extends r{get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}}}function H(e){let t="",r=e.length;const n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function J(e,t,r,n,i,o){if(e>r||e<t){const n="bigint"==typeof t?"n":"";let i;throw i=o>3?0===t||t===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(o+1)}${n}`:`>= -(2${n} ** ${8*(o+1)-1}${n}) and < 2 ** ${8*(o+1)-1}${n}`:`>= ${t}${n} and <= ${r}${n}`,new G.ERR_OUT_OF_RANGE("value",i,e)}!function(e,t,r){V(t,"offset"),void 0!==e[t]&&void 0!==e[t+r]||Y(t,e.length-(r+1))}(n,i,o)}function V(e,t){if("number"!=typeof e)throw new G.ERR_INVALID_ARG_TYPE(t,"number",e)}function Y(e,t,r){if(Math.floor(e)!==e)throw V(e,r),new G.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new G.ERR_BUFFER_OUT_OF_BOUNDS;throw new G.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}W("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),W("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),W("ERR_OUT_OF_RANGE",(function(e,t,r){let n=`The value of "${e}" is out of range.`,i=r;return Number.isInteger(r)&&Math.abs(r)>2**32?i=H(String(r)):"bigint"==typeof r&&(i=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(i=H(i)),i+="n"),n+=` It must be ${t}. Received ${i}`,n}),RangeError);const Q=/[^+/0-9A-Za-z-_]/g;function Z(e,t){let r;t=t||1/0;const n=e.length;let i=null;const o=[];for(let s=0;s<n;++s){if(r=e.charCodeAt(s),r>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(t-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function X(e){return u.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(Q,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function $(e,t,r,n){let i;for(i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}function ee(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function te(e){return e!=e}const re=function(){const e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let i=0;i<16;++i)t[n+i]=e[r]+e[i]}return t}();function ne(e){return"undefined"==typeof BigInt?ie:e}function ie(){throw new Error("BigInt not supported")}})),o.register("fXOdH",(function(t,r){var n,i;e(t.exports,"toByteArray",(function(){return n}),(function(e){return n=e})),e(t.exports,"fromByteArray",(function(){return i}),(function(e){return i=e})),n=function(e){var t,r,n=h(e),i=n[0],o=n[1],u=new a(function(e,t,r){return 3*(t+r)/4-r}(0,i,o)),c=0,l=o>0?i-4:i;for(r=0;r<l;r+=4)t=s[e.charCodeAt(r)]<<18|s[e.charCodeAt(r+1)]<<12|s[e.charCodeAt(r+2)]<<6|s[e.charCodeAt(r+3)],u[c++]=t>>16&255,u[c++]=t>>8&255,u[c++]=255&t;2===o&&(t=s[e.charCodeAt(r)]<<2|s[e.charCodeAt(r+1)]>>4,u[c++]=255&t);1===o&&(t=s[e.charCodeAt(r)]<<10|s[e.charCodeAt(r+1)]<<4|s[e.charCodeAt(r+2)]>>2,u[c++]=t>>8&255,u[c++]=255&t);return u},i=function(e){for(var t,r=e.length,n=r%3,i=[],s=16383,a=0,u=r-n;a<u;a+=s)i.push(f(e,a,a+s>u?u:a+s));1===n?(t=e[r-1],i.push(o[t>>2]+o[t<<4&63]+"==")):2===n&&(t=(e[r-2]<<8)+e[r-1],i.push(o[t>>10]+o[t>>4&63]+o[t<<2&63]+"="));return i.join("")};for(var o=[],s=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",c=0,l=u.length;c<l;++c)o[c]=u[c],s[u.charCodeAt(c)]=c;function h(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function f(e,t,r){for(var n,i,s=[],a=t;a<r;a+=3)n=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(o[(i=n)>>18&63]+o[i>>12&63]+o[i>>6&63]+o[63&i]);return s.join("")}s["-".charCodeAt(0)]=62,s["_".charCodeAt(0)]=63})),o.register("2JRKd",(function(t,r){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */var n,i;e(t.exports,"read",(function(){return n}),(function(e){return n=e})),e(t.exports,"write",(function(){return i}),(function(e){return i=e})),n=function(e,t,r,n,i){var o,s,a=8*i-n-1,u=(1<<a)-1,c=u>>1,l=-7,h=r?i-1:0,f=r?-1:1,d=e[t+h];for(h+=f,o=d&(1<<-l)-1,d>>=-l,l+=a;l>0;o=256*o+e[t+h],h+=f,l-=8);for(s=o&(1<<-l)-1,o>>=-l,l+=n;l>0;s=256*s+e[t+h],h+=f,l-=8);if(0===o)o=1-c;else{if(o===u)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,n),o-=c}return(d?-1:1)*s*Math.pow(2,o-n)},i=function(e,t,r,n,i,o){var s,a,u,c=8*o-i-1,l=(1<<c)-1,h=l>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:o-1,p=n?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+h>=1?f/u:f*Math.pow(2,1-h))*u>=2&&(s++,u/=2),s+h>=l?(a=0,s=l):s+h>=1?(a=(t*u-1)*Math.pow(2,i),s+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,i),s=0));i>=8;e[r+d]=255&a,d+=p,a/=256,i-=8);for(s=s<<i|a,c+=i;c>0;e[r+d]=255&s,d+=p,s/=256,c-=8);e[r+d-p]|=128*g}})),o.register("4VBWV",(function(e,t){var r=o("ljCBP"),n=o("1FJi6"),i=o("21ZTD"),s=o("2UdYc"),a=o("6iN5M"),u=o("2VBnj"),c=o("GxxE1")("socket.io-client:manager"),l=o("nInGw"),h=o("eBmf0"),f=Object.prototype.hasOwnProperty;function d(e,t){if(!(this instanceof d))return new d(e,t);e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.nsps={},this.subs=[],this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new h({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this.readyState="closed",this.uri=e,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var r=t.parser||s;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this.autoConnect=!1!==t.autoConnect,this.autoConnect&&this.open()}e.exports=d,d.prototype.emitAll=function(){for(var e in this.emit.apply(this,arguments),this.nsps)f.call(this.nsps,e)&&this.nsps[e].emit.apply(this.nsps[e],arguments)},d.prototype.updateSocketIds=function(){for(var e in this.nsps)f.call(this.nsps,e)&&(this.nsps[e].id=this.generateId(e))},d.prototype.generateId=function(e){return("/"===e?"":e+"#")+this.engine.id},i(d.prototype),d.prototype.reconnection=function(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection},d.prototype.reconnectionAttempts=function(e){return arguments.length?(this._reconnectionAttempts=e,this):this._reconnectionAttempts},d.prototype.reconnectionDelay=function(e){return arguments.length?(this._reconnectionDelay=e,this.backoff&&this.backoff.setMin(e),this):this._reconnectionDelay},d.prototype.randomizationFactor=function(e){return arguments.length?(this._randomizationFactor=e,this.backoff&&this.backoff.setJitter(e),this):this._randomizationFactor},d.prototype.reconnectionDelayMax=function(e){return arguments.length?(this._reconnectionDelayMax=e,this.backoff&&this.backoff.setMax(e),this):this._reconnectionDelayMax},d.prototype.timeout=function(e){return arguments.length?(this._timeout=e,this):this._timeout},d.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},d.prototype.open=d.prototype.connect=function(e,t){if(c("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=r(this.uri,this.opts);var n=this.engine,i=this;this.readyState="opening",this.skipReconnect=!1;var o=a(n,"open",(function(){i.onopen(),e&&e()})),s=a(n,"error",(function(t){if(c("connect_error"),i.cleanup(),i.readyState="closed",i.emitAll("connect_error",t),e){var r=new Error("Connection error");r.data=t,e(r)}else i.maybeReconnectOnOpen()}));if(!1!==this._timeout){var u=this._timeout;c("connect attempt will timeout after %d",u),0===u&&o.destroy();var l=setTimeout((function(){c("connect attempt timed out after %d",u),o.destroy(),n.close(),n.emit("error","timeout"),i.emitAll("connect_timeout",u)}),u);this.subs.push({destroy:function(){clearTimeout(l)}})}return this.subs.push(o),this.subs.push(s),this},d.prototype.onopen=function(){c("open"),this.cleanup(),this.readyState="open",this.emit("open");var e=this.engine;this.subs.push(a(e,"data",u(this,"ondata"))),this.subs.push(a(e,"ping",u(this,"onping"))),this.subs.push(a(e,"pong",u(this,"onpong"))),this.subs.push(a(e,"error",u(this,"onerror"))),this.subs.push(a(e,"close",u(this,"onclose"))),this.subs.push(a(this.decoder,"decoded",u(this,"ondecoded")))},d.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},d.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},d.prototype.ondata=function(e){this.decoder.add(e)},d.prototype.ondecoded=function(e){this.emit("packet",e)},d.prototype.onerror=function(e){c("error",e),this.emitAll("error",e)},d.prototype.socket=function(e,t){var r=this.nsps[e];if(!r){r=new n(this,e,t),this.nsps[e]=r;var i=this;r.on("connecting",o),r.on("connect",(function(){r.id=i.generateId(e)})),this.autoConnect&&o()}function o(){~l(i.connecting,r)||i.connecting.push(r)}return r},d.prototype.destroy=function(e){var t=l(this.connecting,e);~t&&this.connecting.splice(t,1),this.connecting.length||this.close()},d.prototype.packet=function(e){c("writing packet %j",e);var t=this;e.query&&0===e.type&&(e.nsp+="?"+e.query),t.encoding?t.packetBuffer.push(e):(t.encoding=!0,this.encoder.encode(e,(function(r){for(var n=0;n<r.length;n++)t.engine.write(r[n],e.options);t.encoding=!1,t.processPacketQueue()})))},d.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var e=this.packetBuffer.shift();this.packet(e)}},d.prototype.cleanup=function(){c("cleanup");for(var e=this.subs.length,t=0;t<e;t++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},d.prototype.close=d.prototype.disconnect=function(){c("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},d.prototype.onclose=function(e){c("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()},d.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var e=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var t=this.backoff.duration();c("will wait %dms before reconnect attempt",t),this.reconnecting=!0;var r=setTimeout((function(){e.skipReconnect||(c("attempting reconnect"),e.emitAll("reconnect_attempt",e.backoff.attempts),e.emitAll("reconnecting",e.backoff.attempts),e.skipReconnect||e.open((function(t){t?(c("reconnect attempt error"),e.reconnecting=!1,e.reconnect(),e.emitAll("reconnect_error",t.data)):(c("reconnect success"),e.onreconnect())})))}),t);this.subs.push({destroy:function(){clearTimeout(r)}})}},d.prototype.onreconnect=function(){var e=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",e)}})),o.register("ljCBP",(function(e,t){e.exports=o("7Ht36"),e.exports.parser=o("blL5r")})),o.register("7Ht36",(function(e,t){var r=o("21ZTD"),n=o("aFP2d")("engine.io-client:socket"),i=o("nInGw"),s=o("i8cMY"),a=o("9oEcW");function u(e,t){if(!(this instanceof u))return new u(e,t);t=t||{},e&&"object"==typeof e&&(t=e,e=null),e?(e=s(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=s(t.host).host),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.agent=t.agent||!1,this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=t.query||{},"string"==typeof this.query&&(this.query=a.decode(this.query)),this.upgrade=!1!==t.upgrade,this.path=(t.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!t.forceJSONP,this.jsonp=!1!==t.jsonp,this.forceBase64=!!t.forceBase64,this.enablesXDR=!!t.enablesXDR,this.withCredentials=!1!==t.withCredentials,this.timestampParam=t.timestampParam||"t",this.timestampRequests=t.timestampRequests,this.transports=t.transports||["polling","websocket"],this.transportOptions=t.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=t.policyPort||843,this.rememberUpgrade=t.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=t.onlyBinaryUpgrades,this.perMessageDeflate=!1!==t.perMessageDeflate&&(t.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=t.pfx||void 0,this.key=t.key||void 0,this.passphrase=t.passphrase||void 0,this.cert=t.cert||void 0,this.ca=t.ca||void 0,this.ciphers=t.ciphers||void 0,this.rejectUnauthorized=void 0===t.rejectUnauthorized||t.rejectUnauthorized,this.forceNode=!!t.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(t.extraHeaders&&Object.keys(t.extraHeaders).length>0&&(this.extraHeaders=t.extraHeaders),t.localAddress&&(this.localAddress=t.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}e.exports=u,u.priorWebsocketSuccess=!1,r(u.prototype),u.protocol=o("blL5r").protocol,u.Socket=u,u.Transport=o("kAMKW"),u.transports=o("f2yr0"),u.parser=o("blL5r"),u.prototype.createTransport=function(e){n('creating transport "%s"',e);var t=function(e){var t={};for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);return t}(this.query);t.EIO=o("blL5r").protocol,t.transport=e;var r=this.transportOptions[e]||{};return this.id&&(t.sid=this.id),new(o("f2yr0")[e])({query:t,socket:this,agent:r.agent||this.agent,hostname:r.hostname||this.hostname,port:r.port||this.port,secure:r.secure||this.secure,path:r.path||this.path,forceJSONP:r.forceJSONP||this.forceJSONP,jsonp:r.jsonp||this.jsonp,forceBase64:r.forceBase64||this.forceBase64,enablesXDR:r.enablesXDR||this.enablesXDR,withCredentials:r.withCredentials||this.withCredentials,timestampRequests:r.timestampRequests||this.timestampRequests,timestampParam:r.timestampParam||this.timestampParam,policyPort:r.policyPort||this.policyPort,pfx:r.pfx||this.pfx,key:r.key||this.key,passphrase:r.passphrase||this.passphrase,cert:r.cert||this.cert,ca:r.ca||this.ca,ciphers:r.ciphers||this.ciphers,rejectUnauthorized:r.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:r.perMessageDeflate||this.perMessageDeflate,extraHeaders:r.extraHeaders||this.extraHeaders,forceNode:r.forceNode||this.forceNode,localAddress:r.localAddress||this.localAddress,requestTimeout:r.requestTimeout||this.requestTimeout,protocols:r.protocols||void 0,isReactNative:this.isReactNative})},u.prototype.open=function(){var e;if(this.rememberUpgrade&&u.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length){var t=this;return void setTimeout((function(){t.emit("error","No transports available")}),0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)},u.prototype.setTransport=function(e){n("setting transport %s",e.name);var t=this;this.transport&&(n("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",(function(){t.onDrain()})).on("packet",(function(e){t.onPacket(e)})).on("error",(function(e){t.onError(e)})).on("close",(function(){t.onClose("transport close")}))},u.prototype.probe=function(e){n('probing transport "%s"',e);var t=this.createTransport(e,{probe:1}),r=!1,i=this;function o(){if(i.onlyBinaryUpgrades){var o=!this.supportsBinary&&i.transport.supportsBinary;r=r||o}r||(n('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",(function(o){if(!r)if("pong"===o.type&&"probe"===o.data){if(n('probe transport "%s" pong',e),i.upgrading=!0,i.emit("upgrading",t),!t)return;u.priorWebsocketSuccess="websocket"===t.name,n('pausing current transport "%s"',i.transport.name),i.transport.pause((function(){r||"closed"!==i.readyState&&(n("changing transport and sending upgrade packet"),f(),i.setTransport(t),t.send([{type:"upgrade"}]),i.emit("upgrade",t),t=null,i.upgrading=!1,i.flush())}))}else{n('probe transport "%s" failed',e);var s=new Error("probe error");s.transport=t.name,i.emit("upgradeError",s)}})))}function s(){r||(r=!0,f(),t.close(),t=null)}function a(r){var o=new Error("probe error: "+r);o.transport=t.name,s(),n('probe transport "%s" failed because of error: %s',e,r),i.emit("upgradeError",o)}function c(){a("transport closed")}function l(){a("socket closed")}function h(e){t&&e.name!==t.name&&(n('"%s" works - aborting "%s"',e.name,t.name),s())}function f(){t.removeListener("open",o),t.removeListener("error",a),t.removeListener("close",c),i.removeListener("close",l),i.removeListener("upgrading",h)}u.priorWebsocketSuccess=!1,t.once("open",o),t.once("error",a),t.once("close",c),this.once("close",l),this.once("upgrading",h),t.open()},u.prototype.onOpen=function(){if(n("socket open"),this.readyState="open",u.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){n("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}},u.prototype.onPacket=function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(n('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else n('packet received with socket readyState "%s"',this.readyState)},u.prototype.onHandshake=function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},u.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout((function(){"closed"!==t.readyState&&t.onClose("ping timeout")}),e||t.pingInterval+t.pingTimeout)},u.prototype.setPing=function(){var e=this;clearTimeout(e.pingIntervalTimer),e.pingIntervalTimer=setTimeout((function(){n("writing ping packet - expecting pong within %sms",e.pingTimeout),e.ping(),e.onHeartbeat(e.pingTimeout)}),e.pingInterval)},u.prototype.ping=function(){var e=this;this.sendPacket("ping",(function(){e.emit("ping")}))},u.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},u.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(n("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},u.prototype.write=u.prototype.send=function(e,t,r){return this.sendPacket("message",e,t,r),this},u.prototype.sendPacket=function(e,t,r,n){if("function"==typeof t&&(n=t,t=void 0),"function"==typeof r&&(n=r,r=null),"closing"!==this.readyState&&"closed"!==this.readyState){(r=r||{}).compress=!1!==r.compress;var i={type:e,data:t,options:r};this.emit("packetCreate",i),this.writeBuffer.push(i),n&&this.once("flush",n),this.flush()}},u.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var e=this;this.writeBuffer.length?this.once("drain",(function(){this.upgrading?i():t()})):this.upgrading?i():t()}function t(){e.onClose("forced close"),n("socket closing - telling transport to close"),e.transport.close()}function r(){e.removeListener("upgrade",r),e.removeListener("upgradeError",r),t()}function i(){e.once("upgrade",r),e.once("upgradeError",r)}return this},u.prototype.onError=function(e){n("socket error %j",e),u.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)},u.prototype.onClose=function(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){n('socket close with reason: "%s"',e);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",e,t),this.writeBuffer=[],this.prevBufferLen=0}},u.prototype.filterUpgrades=function(e){for(var t=[],r=0,n=e.length;r<n;r++)~i(this.transports,e[r])&&t.push(e[r]);return t}})),o.register("f2yr0",(function(t,r){var n,i;e(t.exports,"polling",(function(){return n}),(function(e){return n=e})),e(t.exports,"websocket",(function(){return i}),(function(e){return i=e}));var s=o("g5AtX"),a=o("8RiD9"),u=o("4Mbi4"),c=o("jBkPT");n=function(e){var t=!1,r=!1,n=!1!==e.jsonp;if("undefined"!=typeof location){var i="https:"===location.protocol,o=location.port;o||(o=i?443:80),t=e.hostname!==location.hostname||o!==e.port,r=e.secure!==i}if(e.xdomain=t,e.xscheme=r,"open"in new s(e)&&!e.forceJSONP)return new a(e);if(!n)throw new Error("JSONP disabled");return new u(e)},i=c})),o.register("g5AtX",(function(e,t){var r=o("9Gzt4"),n=o("1eF2k");e.exports=function(e){var t=e.xdomain,i=e.xscheme,o=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!t||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!i&&o)return new XDomainRequest}catch(e){}if(!t)try{return new(n[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}})),o.register("9Gzt4",(function(e,t){try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}})),o.register("1eF2k",(function(e,t){e.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()})),o.register("8RiD9",(function(e,t){var r=o("g5AtX"),n=o("ltqt7"),i=o("21ZTD"),s=o("eYthP"),a=o("aFP2d")("engine.io-client:polling-xhr"),u=o("1eF2k");function c(){}function l(e){if(n.call(this,e),this.requestTimeout=e.requestTimeout,this.extraHeaders=e.extraHeaders,"undefined"!=typeof location){var t="https:"===location.protocol,r=location.port;r||(r=t?443:80),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||r!==e.port,this.xs=e.secure!==t}}function h(e){this.method=e.method||"GET",this.uri=e.uri,this.xd=!!e.xd,this.xs=!!e.xs,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.agent=e.agent,this.isBinary=e.isBinary,this.supportsBinary=e.supportsBinary,this.enablesXDR=e.enablesXDR,this.withCredentials=e.withCredentials,this.requestTimeout=e.requestTimeout,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.extraHeaders=e.extraHeaders,this.create()}if(e.exports=l,e.exports.Request=h,s(l,n),l.prototype.supportsBinary=!0,l.prototype.request=function(e){return(e=e||{}).uri=this.uri(),e.xd=this.xd,e.xs=this.xs,e.agent=this.agent||!1,e.supportsBinary=this.supportsBinary,e.enablesXDR=this.enablesXDR,e.withCredentials=this.withCredentials,e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized,e.requestTimeout=this.requestTimeout,e.extraHeaders=this.extraHeaders,new h(e)},l.prototype.doWrite=function(e,t){var r="string"!=typeof e&&void 0!==e,n=this.request({method:"POST",data:e,isBinary:r}),i=this;n.on("success",t),n.on("error",(function(e){i.onError("xhr post error",e)})),this.sendXhr=n},l.prototype.doPoll=function(){a("xhr poll");var e=this.request(),t=this;e.on("data",(function(e){t.onData(e)})),e.on("error",(function(e){t.onError("xhr poll error",e)})),this.pollXhr=e},i(h.prototype),h.prototype.create=function(){var e={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized;var t=this.xhr=new r(e),n=this;try{a("xhr open %s: %s",this.method,this.uri),t.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var i in t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(i)&&t.setRequestHeader(i,this.extraHeaders[i])}catch(e){}if("POST"===this.method)try{this.isBinary?t.setRequestHeader("Content-type","application/octet-stream"):t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.withCredentials),this.requestTimeout&&(t.timeout=this.requestTimeout),this.hasXDR()?(t.onload=function(){n.onLoad()},t.onerror=function(){n.onError(t.responseText)}):t.onreadystatechange=function(){if(2===t.readyState)try{var e=t.getResponseHeader("Content-Type");(n.supportsBinary&&"application/octet-stream"===e||"application/octet-stream; charset=UTF-8"===e)&&(t.responseType="arraybuffer")}catch(e){}4===t.readyState&&(200===t.status||1223===t.status?n.onLoad():setTimeout((function(){n.onError("number"==typeof t.status?t.status:0)}),0))},a("xhr data %s",this.data),t.send(this.data)}catch(e){return void setTimeout((function(){n.onError(e)}),0)}"undefined"!=typeof document&&(this.index=h.requestsCount++,h.requests[this.index]=this)},h.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},h.prototype.onData=function(e){this.emit("data",e),this.onSuccess()},h.prototype.onError=function(e){this.emit("error",e),this.cleanup(!0)},h.prototype.cleanup=function(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=c:this.xhr.onreadystatechange=c,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete h.requests[this.index],this.xhr=null}},h.prototype.onLoad=function(){var e;try{var t;try{t=this.xhr.getResponseHeader("Content-Type")}catch(e){}e=("application/octet-stream"===t||"application/octet-stream; charset=UTF-8"===t)&&this.xhr.response||this.xhr.responseText}catch(e){this.onError(e)}null!=e&&this.onData(e)},h.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},h.prototype.abort=function(){this.cleanup()},h.requestsCount=0,h.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",f);else if("function"==typeof addEventListener){addEventListener("onpagehide"in u?"pagehide":"unload",f,!1)}function f(){for(var e in h.requests)h.requests.hasOwnProperty(e)&&h.requests[e].abort()}})),o.register("ltqt7",(function(e,t){var r=o("kAMKW"),n=o("9oEcW"),i=o("blL5r"),s=o("eYthP"),a=o("cv2Po"),u=o("aFP2d")("engine.io-client:polling");e.exports=l;var c=null!=new(o("g5AtX"))({xdomain:!1}).responseType;function l(e){var t=e&&e.forceBase64;c&&!t||(this.supportsBinary=!1),r.call(this,e)}s(l,r),l.prototype.name="polling",l.prototype.doOpen=function(){this.poll()},l.prototype.pause=function(e){var t=this;function r(){u("paused"),t.readyState="paused",e()}if(this.readyState="pausing",this.polling||!this.writable){var n=0;this.polling&&(u("we are currently polling - waiting to pause"),n++,this.once("pollComplete",(function(){u("pre-pause polling complete"),--n||r()}))),this.writable||(u("we are currently writing - waiting to pause"),n++,this.once("drain",(function(){u("pre-pause writing complete"),--n||r()})))}else r()},l.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},l.prototype.onData=function(e){var t=this;u("polling got data %s",e);i.decodePayload(e,this.socket.binaryType,(function(e,r,n){if("opening"===t.readyState&&"open"===e.type&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},l.prototype.doClose=function(){var e=this;function t(){u("writing close packet"),e.write([{type:"close"}])}"open"===this.readyState?(u("transport open - closing"),t()):(u("transport not open - deferring close"),this.once("open",t))},l.prototype.write=function(e){var t=this;this.writable=!1;var r=function(){t.writable=!0,t.emit("drain")};i.encodePayload(e,this.supportsBinary,(function(e){t.doWrite(e,r)}))},l.prototype.uri=function(){var e=this.query||{},t=this.secure?"https":"http",r="";return!1!==this.timestampRequests&&(e[this.timestampParam]=a()),this.supportsBinary||e.sid||(e.b64=1),e=n.encode(e),this.port&&("https"===t&&443!==Number(this.port)||"http"===t&&80!==Number(this.port))&&(r=":"+this.port),e.length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+r+this.path+e}})),o.register("kAMKW",(function(e,t){var r=o("blL5r"),n=o("21ZTD");function i(e){this.path=e.path,this.hostname=e.hostname,this.port=e.port,this.secure=e.secure,this.query=e.query,this.timestampParam=e.timestampParam,this.timestampRequests=e.timestampRequests,this.readyState="",this.agent=e.agent||!1,this.socket=e.socket,this.enablesXDR=e.enablesXDR,this.withCredentials=e.withCredentials,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.forceNode=e.forceNode,this.isReactNative=e.isReactNative,this.extraHeaders=e.extraHeaders,this.localAddress=e.localAddress}e.exports=i,n(i.prototype),i.prototype.onError=function(e,t){var r=new Error(e);return r.type="TransportError",r.description=t,this.emit("error",r),this},i.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},i.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},i.prototype.send=function(e){if("open"!==this.readyState)throw new Error("Transport not open");this.write(e)},i.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},i.prototype.onData=function(e){var t=r.decodePacket(e,this.socket.binaryType);this.onPacket(t)},i.prototype.onPacket=function(e){this.emit("packet",e)},i.prototype.onClose=function(){this.readyState="closed",this.emit("close")}})),o.register("blL5r",(function(t,r){var n,i,s,a,u,c,l,h,f,d,p;e(t.exports,"protocol",(function(){return n}),(function(e){return n=e})),e(t.exports,"packets",(function(){return i}),(function(e){return i=e})),e(t.exports,"encodePacket",(function(){return s}),(function(e){return s=e})),e(t.exports,"encodeBase64Packet",(function(){return a}),(function(e){return a=e})),e(t.exports,"decodePacket",(function(){return u}),(function(e){return u=e})),e(t.exports,"decodeBase64Packet",(function(){return c}),(function(e){return c=e})),e(t.exports,"encodePayload",(function(){return l}),(function(e){return l=e})),e(t.exports,"encodePayloadAsBlob",(function(){return d}),(function(e){return d=e})),e(t.exports,"encodePayloadAsArrayBuffer",(function(){return f}),(function(e){return f=e})),e(t.exports,"decodePayload",(function(){return h}),(function(e){return h=e})),e(t.exports,"decodePayloadAsBinary",(function(){return p}),(function(e){return p=e}));var g,m=o("iZKbS"),y=o("gcs7F"),v=o("8Mtif"),w=o("leCoS"),b=o("aciaF");"undefined"!=typeof ArrayBuffer&&(g=o("j4BG8"));var A="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),E="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),x=A||E;n=3;var S=i={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},C=m(S),k={type:"error",data:"parser error"},_=o("gElpa");function P(e,t,r){for(var n=new Array(e.length),i=w(e.length,r),o=function(e,r,i){t(r,(function(t,r){n[e]=r,i(t,n)}))},s=0;s<e.length;s++)o(s,e[s],i)}s=function(e,t,r,n){"function"==typeof t&&(n=t,t=!1),"function"==typeof r&&(n=r,r=null);var o=void 0===e.data?void 0:e.data.buffer||e.data;if("undefined"!=typeof ArrayBuffer&&o instanceof ArrayBuffer)return function(e,t,r){if(!t)return a(e,r);var n=e.data,i=new Uint8Array(n),o=new Uint8Array(1+n.byteLength);o[0]=S[e.type];for(var s=0;s<i.length;s++)o[s+1]=i[s];return r(o.buffer)}(e,t,n);if(void 0!==_&&o instanceof _)return function(e,t,r){if(!t)return a(e,r);if(x)return function(e,t,r){if(!t)return a(e,r);var n=new FileReader;return n.onload=function(){s({type:e.type,data:n.result},t,!0,r)},n.readAsArrayBuffer(e.data)}(e,t,r);var n=new Uint8Array(1);n[0]=S[e.type];var i=new _([n.buffer,e.data]);return r(i)}(e,t,n);if(o&&o.base64)return function(e,t){var r="b"+i[e.type]+e.data.data;return t(r)}(e,n);var u=S[e.type];return void 0!==e.data&&(u+=r?b.encode(String(e.data),{strict:!1}):String(e.data)),n(""+u)},a=function(e,t){var r,n="b"+i[e.type];if(void 0!==_&&e.data instanceof _){var o=new FileReader;return o.onload=function(){var e=o.result.split(",")[1];t(n+e)},o.readAsDataURL(e.data)}try{r=String.fromCharCode.apply(null,new Uint8Array(e.data))}catch(t){for(var s=new Uint8Array(e.data),a=new Array(s.length),u=0;u<s.length;u++)a[u]=s[u];r=String.fromCharCode.apply(null,a)}return n+=btoa(r),t(n)},u=function(e,t,r){if(void 0===e)return k;if("string"==typeof e){if("b"===e.charAt(0))return c(e.substr(1),t);if(r&&!1===(e=function(e){try{e=b.decode(e,{strict:!1})}catch(e){return!1}return e}(e)))return k;var n=e.charAt(0);return Number(n)==n&&C[n]?e.length>1?{type:C[n],data:e.substring(1)}:{type:C[n]}:k}n=new Uint8Array(e)[0];var i=v(e,1);return _&&"blob"===t&&(i=new _([i])),{type:C[n],data:i}},c=function(e,t){var r=C[e.charAt(0)];if(!g)return{type:r,data:{base64:!0,data:e.substr(1)}};var n=g.decode(e.substr(1));return"blob"===t&&_&&(n=new _([n])),{type:r,data:n}},l=function(e,t,r){"function"==typeof t&&(r=t,t=null);var n=y(e);if(t&&n)return _&&!x?d(e,r):f(e,r);if(!e.length)return r("0:");P(e,(function(e,r){s(e,!!n&&t,!1,(function(e){r(null,function(e){return e.length+":"+e}(e))}))}),(function(e,t){return r(t.join(""))}))},h=function(e,t,r){if("string"!=typeof e)return p(e,t,r);var n;if("function"==typeof t&&(r=t,t=null),""===e)return r(k,0,1);for(var i,o,s="",a=0,c=e.length;a<c;a++){var l=e.charAt(a);if(":"===l){if(""===s||s!=(i=Number(s)))return r(k,0,1);if(s!=(o=e.substr(a+1,i)).length)return r(k,0,1);if(o.length){if(n=u(o,t,!1),k.type===n.type&&k.data===n.data)return r(k,0,1);if(!1===r(n,a+i,c))return}a+=i,s=""}else s+=l}return""!==s?r(k,0,1):void 0},f=function(e,t){if(!e.length)return t(new ArrayBuffer(0));P(e,(function(e,t){s(e,!0,!0,(function(e){return t(null,e)}))}),(function(e,r){var n=r.reduce((function(e,t){var r;return e+(r="string"==typeof t?t.length:t.byteLength).toString().length+r+2}),0),i=new Uint8Array(n),o=0;return r.forEach((function(e){var t="string"==typeof e,r=e;if(t){for(var n=new Uint8Array(e.length),s=0;s<e.length;s++)n[s]=e.charCodeAt(s);r=n.buffer}i[o++]=t?0:1;var a=r.byteLength.toString();for(s=0;s<a.length;s++)i[o++]=parseInt(a[s]);i[o++]=255;for(n=new Uint8Array(r),s=0;s<n.length;s++)i[o++]=n[s]})),t(i.buffer)}))},d=function(e,t){P(e,(function(e,t){s(e,!0,!0,(function(e){var r=new Uint8Array(1);if(r[0]=1,"string"==typeof e){for(var n=new Uint8Array(e.length),i=0;i<e.length;i++)n[i]=e.charCodeAt(i);e=n.buffer,r[0]=0}var o=(e instanceof ArrayBuffer?e.byteLength:e.size).toString(),s=new Uint8Array(o.length+1);for(i=0;i<o.length;i++)s[i]=parseInt(o[i]);if(s[o.length]=255,_){var a=new _([r.buffer,s.buffer,e]);t(null,a)}}))}),(function(e,r){return t(new _(r))}))},p=function(e,t,r){"function"==typeof t&&(r=t,t=null);for(var n=e,i=[];n.byteLength>0;){for(var o=new Uint8Array(n),s=0===o[0],a="",c=1;255!==o[c];c++){if(a.length>310)return r(k,0,1);a+=o[c]}n=v(n,2+a.length),a=parseInt(a);var l=v(n,0,a);if(s)try{l=String.fromCharCode.apply(null,new Uint8Array(l))}catch(e){var h=new Uint8Array(l);l="";for(c=0;c<h.length;c++)l+=String.fromCharCode(h[c])}i.push(l),n=v(n,a)}var f=i.length;i.forEach((function(e,n){r(u(e,t,!0),n,f)}))}})),o.register("iZKbS",(function(e,t){e.exports=Object.keys||function(e){var t=[],r=Object.prototype.hasOwnProperty;for(var n in e)r.call(e,n)&&t.push(n);return t}})),o.register("gcs7F",(function(e,t){var r=o("1j0oY").Buffer,n=o("d206p"),i=Object.prototype.toString,s="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);e.exports=function e(t){if(!t||"object"!=typeof t)return!1;if(n(t)){for(var i=0,o=t.length;i<o;i++)if(e(t[i]))return!0;return!1}if("function"==typeof r&&r.isBuffer&&r.isBuffer(t)||"function"==typeof ArrayBuffer&&t instanceof ArrayBuffer||s&&t instanceof Blob||a&&t instanceof File)return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return e(t.toJSON(),!0);for(var u in t)if(Object.prototype.hasOwnProperty.call(t,u)&&e(t[u]))return!0;return!1}})),o.register("8Mtif",(function(e,t){e.exports=function(e,t,r){var n=e.byteLength;if(t=t||0,r=r||n,e.slice)return e.slice(t,r);if(t<0&&(t+=n),r<0&&(r+=n),r>n&&(r=n),t>=n||t>=r||0===n)return new ArrayBuffer(0);for(var i=new Uint8Array(e),o=new Uint8Array(r-t),s=t,a=0;s<r;s++,a++)o[a]=i[s];return o.buffer}})),o.register("leCoS",(function(e,t){function r(){}e.exports=function(e,t,n){var i=!1;return n=n||r,o.count=e,0===e?t():o;function o(e,r){if(o.count<=0)throw new Error("after called too many times");--o.count,e?(i=!0,t(e),t=n):0!==o.count||i||t(null,r)}}})),o.register("aciaF",(function(e,t){
/*! https://mths.be/utf8js v2.1.2 by @mathias */var r,n,i,o=String.fromCharCode;function s(e){for(var t,r,n=[],i=0,o=e.length;i<o;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<o?56320==(64512&(r=e.charCodeAt(i++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),i--):n.push(t);return n}function a(e,t){if(e>=55296&&e<=57343){if(t)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function u(e,t){return o(e>>t&63|128)}function c(e,t){if(0==(4294967168&e))return o(e);var r="";return 0==(4294965248&e)?r=o(e>>6&31|192):0==(4294901760&e)?(a(e,t)||(e=65533),r=o(e>>12&15|224),r+=u(e,6)):0==(4292870144&e)&&(r=o(e>>18&7|240),r+=u(e,12),r+=u(e,6)),r+=o(63&e|128)}function l(){if(i>=n)throw Error("Invalid byte index");var e=255&r[i];if(i++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function h(e){var t,o;if(i>n)throw Error("Invalid byte index");if(i==n)return!1;if(t=255&r[i],i++,0==(128&t))return t;if(192==(224&t)){if((o=(31&t)<<6|l())>=128)return o;throw Error("Invalid continuation byte")}if(224==(240&t)){if((o=(15&t)<<12|l()<<6|l())>=2048)return a(o,e)?o:65533;throw Error("Invalid continuation byte")}if(240==(248&t)&&(o=(7&t)<<18|l()<<12|l()<<6|l())>=65536&&o<=1114111)return o;throw Error("Invalid UTF-8 detected")}e.exports={version:"2.1.2",encode:function(e,t){for(var r=!1!==(t=t||{}).strict,n=s(e),i=n.length,o=-1,a="";++o<i;)a+=c(n[o],r);return a},decode:function(e,t){var a=!1!==(t=t||{}).strict;r=s(e),n=r.length,i=0;for(var u,c=[];!1!==(u=h(a));)c.push(u);return function(e){for(var t,r=e.length,n=-1,i="";++n<r;)(t=e[n])>65535&&(i+=o((t-=65536)>>>10&1023|55296),t=56320|1023&t),i+=o(t);return i}(c)}}})),o.register("j4BG8",(function(t,r){var n,i;e(t.exports,"encode",(function(){return n}),(function(e){return n=e})),e(t.exports,"decode",(function(){return i}),(function(e){return i=e})),function(e){"use strict";n=function(t){var r,n=new Uint8Array(t),i=n.length,o="";for(r=0;r<i;r+=3)o+=e[n[r]>>2],o+=e[(3&n[r])<<4|n[r+1]>>4],o+=e[(15&n[r+1])<<2|n[r+2]>>6],o+=e[63&n[r+2]];return i%3==2?o=o.substring(0,o.length-1)+"=":i%3==1&&(o=o.substring(0,o.length-2)+"=="),o},i=function(t){var r,n,i,o,s,a=.75*t.length,u=t.length,c=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var l=new ArrayBuffer(a),h=new Uint8Array(l);for(r=0;r<u;r+=4)n=e.indexOf(t[r]),i=e.indexOf(t[r+1]),o=e.indexOf(t[r+2]),s=e.indexOf(t[r+3]),h[c++]=n<<2|i>>4,h[c++]=(15&i)<<4|o>>2,h[c++]=(3&o)<<6|63&s;return l}}("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")})),o.register("gElpa",(function(e,t){var r=void 0!==r?r:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder,n=function(){try{return 2===new Blob(["hi"]).size}catch(e){return!1}}(),i=n&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(e){return!1}}(),o=r&&r.prototype.append&&r.prototype.getBlob;function s(e){return e.map((function(e){if(e.buffer instanceof ArrayBuffer){var t=e.buffer;if(e.byteLength!==t.byteLength){var r=new Uint8Array(e.byteLength);r.set(new Uint8Array(t,e.byteOffset,e.byteLength)),t=r.buffer}return t}return e}))}function a(e,t){t=t||{};var n=new r;return s(e).forEach((function(e){n.append(e)})),t.type?n.getBlob(t.type):n.getBlob()}function u(e,t){return new Blob(s(e),t||{})}"undefined"!=typeof Blob&&(a.prototype=Blob.prototype,u.prototype=Blob.prototype),e.exports=n?i?Blob:u:o?a:void 0})),o.register("9oEcW",(function(t,r){var n,i;e(t.exports,"encode",(function(){return n}),(function(e){return n=e})),e(t.exports,"decode",(function(){return i}),(function(e){return i=e})),n=function(e){var t="";for(var r in e)e.hasOwnProperty(r)&&(t.length&&(t+="&"),t+=encodeURIComponent(r)+"="+encodeURIComponent(e[r]));return t},i=function(e){for(var t={},r=e.split("&"),n=0,i=r.length;n<i;n++){var o=r[n].split("=");t[decodeURIComponent(o[0])]=decodeURIComponent(o[1])}return t}})),o.register("eYthP",(function(e,t){e.exports=function(e,t){var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}})),o.register("cv2Po",(function(e,t){"use strict";var r,n="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i={},o=0,s=0;function a(e){var t="";do{t=n[e%64]+t,e=Math.floor(e/64)}while(e>0);return t}function u(){var e=a(+new Date);return e!==r?(o=0,r=e):e+"."+a(o++)}for(;s<64;s++)i[n[s]]=s;u.encode=a,u.decode=function(e){var t=0;for(s=0;s<e.length;s++)t=64*t+i[e.charAt(s)];return t},e.exports=u})),o.register("aFP2d",(function(e,t){var r=o("d5Ya9");function n(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=void 0),e}(t=e.exports=o("iL9DJ")).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var r=this.useColors;if(e[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+e[0]+(r?"%c ":" ")+"+"+t.humanize(this.diff),!r)return;var n="color: "+this.color;e.splice(1,0,n,"color: inherit");var i=0,o=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(i++,"%c"===e&&(o=i))})),e.splice(o,0,n)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=n,t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(n())})),o.register("iL9DJ",(function(e,t){function r(e){var r;function i(){if(i.enabled){var e=i,n=+new Date,o=n-(r||n);e.diff=o,e.prev=r,e.curr=n,r=n;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=t.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var u=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,(function(r,n){if("%%"===r)return r;u++;var i=t.formatters[n];if("function"==typeof i){var o=s[u];r=i.call(e,o),s.splice(u,1),u--}return r})),t.formatArgs.call(e,s);var c=i.log||t.log||console.log.bind(console);c.apply(e,s)}}return i.namespace=e,i.enabled=t.enabled(e),i.useColors=t.useColors(),i.color=function(e){var r,n=0;for(r in e)n=(n<<5)-n+e.charCodeAt(r),n|=0;return t.colors[Math.abs(n)%t.colors.length]}(e),i.destroy=n,"function"==typeof t.init&&t.init(i),t.instances.push(i),i}function n(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var r;t.save(e),t.names=[],t.skips=[];var n=("string"==typeof e?e:"").split(/[\s,]+/),i=n.length;for(r=0;r<i;r++)n[r]&&("-"===(e=n[r].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(r=0;r<t.instances.length;r++){var o=t.instances[r];o.enabled=t.enabled(o.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var r,n;for(r=0,n=t.skips.length;r<n;r++)if(t.skips[r].test(e))return!1;for(r=0,n=t.names.length;r<n;r++)if(t.names[r].test(e))return!0;return!1},t.humanize=o("aGin3"),t.instances=[],t.names=[],t.skips=[],t.formatters={}})),o.register("aGin3",(function(e,t){var r=1e3,n=6e4,i=36e5,o=864e5,s=315576e5;function a(e,t,r){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+r:Math.ceil(e/t)+" "+r+"s"}e.exports=function(e,t){t=t||{};var u,c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var a=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*i;case"minutes":case"minute":case"mins":case"min":case"m":return a*n;case"seconds":case"second":case"secs":case"sec":case"s":return a*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(e);if("number"===c&&!1===isNaN(e))return t.long?a(u=e,o,"day")||a(u,i,"hour")||a(u,n,"minute")||a(u,r,"second")||u+" ms":function(e){return e>=o?Math.round(e/o)+"d":e>=i?Math.round(e/i)+"h":e>=n?Math.round(e/n)+"m":e>=r?Math.round(e/r)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}})),o.register("4Mbi4",(function(e,t){var r=o("ltqt7"),n=o("eYthP"),i=o("1eF2k");e.exports=l;var s,a=/\n/g,u=/\\n/g;function c(){}function l(e){r.call(this,e),this.query=this.query||{},s||(s=i.___eio=i.___eio||[]),this.index=s.length;var t=this;s.push((function(e){t.onData(e)})),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",(function(){t.script&&(t.script.onerror=c)}),!1)}n(l,r),l.prototype.supportsBinary=!1,l.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),r.prototype.doClose.call(this)},l.prototype.doPoll=function(){var e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};var r=document.getElementsByTagName("script")[0];r?r.parentNode.insertBefore(t,r):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){var e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)}),100)},l.prototype.doWrite=function(e,t){var r=this;if(!this.form){var n,i=document.createElement("form"),o=document.createElement("textarea"),s=this.iframeId="eio_iframe_"+this.index;i.className="socketio",i.style.position="absolute",i.style.top="-1000px",i.style.left="-1000px",i.target=s,i.method="POST",i.setAttribute("accept-charset","utf-8"),o.name="d",i.appendChild(o),document.body.appendChild(i),this.form=i,this.area=o}function c(){l(),t()}function l(){if(r.iframe)try{r.form.removeChild(r.iframe)}catch(e){r.onError("jsonp polling iframe removal error",e)}try{var e='<iframe src="javascript:0" name="'+r.iframeId+'">';n=document.createElement(e)}catch(e){(n=document.createElement("iframe")).name=r.iframeId,n.src="javascript:0"}n.id=r.iframeId,r.form.appendChild(n),r.iframe=n}this.form.action=this.uri(),l(),e=e.replace(u,"\\\n"),this.area.value=e.replace(a,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===r.iframe.readyState&&c()}:this.iframe.onload=c}})),o.register("jBkPT",(function(e,t){var r,n,i=o("1j0oY").Buffer,s=o("kAMKW"),a=o("blL5r"),u=o("9oEcW"),c=o("eYthP"),l=o("cv2Po"),h=o("aFP2d")("engine.io-client:websocket");if("undefined"!=typeof WebSocket?r=WebSocket:"undefined"!=typeof self&&(r=self.WebSocket||self.MozWebSocket),"undefined"==typeof window)try{n=o("e0EMb")}catch(e){}var f=r||n;function d(e){e&&e.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=e.perMessageDeflate,this.usingBrowserWebSocket=r&&!e.forceNode,this.protocols=e.protocols,this.usingBrowserWebSocket||(f=n),s.call(this,e)}e.exports=d,c(d,s),d.prototype.name="websocket",d.prototype.supportsBinary=!0,d.prototype.doOpen=function(){if(this.check()){var e=this.uri(),t=this.protocols,r={};this.isReactNative||(r.agent=this.agent,r.perMessageDeflate=this.perMessageDeflate,r.pfx=this.pfx,r.key=this.key,r.passphrase=this.passphrase,r.cert=this.cert,r.ca=this.ca,r.ciphers=this.ciphers,r.rejectUnauthorized=this.rejectUnauthorized),this.extraHeaders&&(r.headers=this.extraHeaders),this.localAddress&&(r.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?t?new f(e,t):new f(e):new f(e,t,r)}catch(e){return this.emit("error",e)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},d.prototype.addEventListeners=function(){var e=this;this.ws.onopen=function(){e.onOpen()},this.ws.onclose=function(){e.onClose()},this.ws.onmessage=function(t){e.onData(t.data)},this.ws.onerror=function(t){e.onError("websocket error",t)}},d.prototype.write=function(e){var t=this;this.writable=!1;for(var r=e.length,n=0,o=r;n<o;n++)!function(e){a.encodePacket(e,t.supportsBinary,(function(n){if(!t.usingBrowserWebSocket){var o={};if(e.options&&(o.compress=e.options.compress),t.perMessageDeflate)("string"==typeof n?i.byteLength(n):n.length)<t.perMessageDeflate.threshold&&(o.compress=!1)}try{t.usingBrowserWebSocket?t.ws.send(n):t.ws.send(n,o)}catch(e){h("websocket closed before onclose event")}--r||s()}))}(e[n]);function s(){t.emit("flush"),setTimeout((function(){t.writable=!0,t.emit("drain")}),0)}},d.prototype.onClose=function(){s.prototype.onClose.call(this)},d.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},d.prototype.uri=function(){var e=this.query||{},t=this.secure?"wss":"ws",r="";return this.port&&("wss"===t&&443!==Number(this.port)||"ws"===t&&80!==Number(this.port))&&(r=":"+this.port),this.timestampRequests&&(e[this.timestampParam]=l()),this.supportsBinary||(e.b64=1),(e=u.encode(e)).length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+r+this.path+e},d.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===d.prototype.name)}})),o.register("nInGw",(function(e,t){var r=[].indexOf;e.exports=function(e,t){if(r)return e.indexOf(t);for(var n=0;n<e.length;++n)if(e[n]===t)return n;return-1}})),o.register("1FJi6",(function(e,t){var r=o("2UdYc"),n=o("21ZTD"),i=o("5mOkD"),s=o("6iN5M"),a=o("2VBnj"),u=o("GxxE1")("socket.io-client:socket"),c=o("9oEcW"),l=o("gcs7F");e.exports=d;var h={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},f=n.prototype.emit;function d(e,t,r){this.io=e,this.nsp=t,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},r&&r.query&&(this.query=r.query),this.io.autoConnect&&this.open()}n(d.prototype),d.prototype.subEvents=function(){if(!this.subs){var e=this.io;this.subs=[s(e,"open",a(this,"onopen")),s(e,"packet",a(this,"onpacket")),s(e,"close",a(this,"onclose"))]}},d.prototype.open=d.prototype.connect=function(){return this.connected||(this.subEvents(),this.io.reconnecting||this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting")),this},d.prototype.send=function(){var e=i(arguments);return e.unshift("message"),this.emit.apply(this,e),this},d.prototype.emit=function(e){if(h.hasOwnProperty(e))return f.apply(this,arguments),this;var t=i(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:l(t))?r.BINARY_EVENT:r.EVENT,data:t,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},d.prototype.packet=function(e){e.nsp=this.nsp,this.io.packet(e)},d.prototype.onopen=function(){if(u("transport is open - connecting"),"/"!==this.nsp)if(this.query){var e="object"==typeof this.query?c.encode(this.query):this.query;u("sending connect packet with query %s",e),this.packet({type:r.CONNECT,query:e})}else this.packet({type:r.CONNECT})},d.prototype.onclose=function(e){u("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",e)},d.prototype.onpacket=function(e){var t=e.nsp===this.nsp,n=e.type===r.ERROR&&"/"===e.nsp;if(t||n)switch(e.type){case r.CONNECT:this.onconnect();break;case r.EVENT:case r.BINARY_EVENT:this.onevent(e);break;case r.ACK:case r.BINARY_ACK:this.onack(e);break;case r.DISCONNECT:this.ondisconnect();break;case r.ERROR:this.emit("error",e.data)}},d.prototype.onevent=function(e){var t=e.data||[];u("emitting event %j",t),null!=e.id&&(u("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?f.apply(this,t):this.receiveBuffer.push(t)},d.prototype.ack=function(e){var t=this,n=!1;return function(){if(!n){n=!0;var o=i(arguments);u("sending ack %j",o),t.packet({type:l(o)?r.BINARY_ACK:r.ACK,id:e,data:o})}}},d.prototype.onack=function(e){var t=this.acks[e.id];"function"==typeof t?(u("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):u("bad ack %s",e.id)},d.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emitBuffered(),this.emit("connect")},d.prototype.emitBuffered=function(){var e;for(e=0;e<this.receiveBuffer.length;e++)f.apply(this,this.receiveBuffer[e]);for(this.receiveBuffer=[],e=0;e<this.sendBuffer.length;e++)this.packet(this.sendBuffer[e]);this.sendBuffer=[]},d.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},d.prototype.destroy=function(){if(this.subs){for(var e=0;e<this.subs.length;e++)this.subs[e].destroy();this.subs=null}this.io.destroy(this)},d.prototype.close=d.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:r.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},d.prototype.compress=function(e){return this.flags.compress=e,this},d.prototype.binary=function(e){return this.flags.binary=e,this}})),o.register("5mOkD",(function(e,t){e.exports=function(e,t){for(var r=[],n=(t=t||0)||0;n<e.length;n++)r[n-t]=e[n];return r}})),o.register("6iN5M",(function(e,t){e.exports=function(e,t,r){return e.on(t,r),{destroy:function(){e.removeListener(t,r)}}}})),o.register("2VBnj",(function(e,t){var r=[].slice;e.exports=function(e,t){if("string"==typeof t&&(t=e[t]),"function"!=typeof t)throw new Error("bind() requires a function");var n=r.call(arguments,2);return function(){return t.apply(e,n.concat(r.call(arguments)))}}})),o.register("eBmf0",(function(e,t){function r(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=r,r.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),r=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-r:e+r}return 0|Math.min(e,this.max)},r.prototype.reset=function(){this.attempts=0},r.prototype.setMin=function(e){this.ms=e},r.prototype.setMax=function(e){this.max=e},r.prototype.setJitter=function(e){this.jitter=e}})),o.register("3iiR7",(function(t,r){var n,i,o,s,a,u,c,l,h,f,d,p,g,m,y,v,w,b,A,E,x,S,C,k,_,P,R,O,N,I,T,M,B,F,L;e(t.exports,"Children",(function(){return n}),(function(e){return n=e})),e(t.exports,"Component",(function(){return i}),(function(e){return i=e})),e(t.exports,"Fragment",(function(){return o}),(function(e){return o=e})),e(t.exports,"Profiler",(function(){return s}),(function(e){return s=e})),e(t.exports,"PureComponent",(function(){return a}),(function(e){return a=e})),e(t.exports,"StrictMode",(function(){return u}),(function(e){return u=e})),e(t.exports,"Suspense",(function(){return c}),(function(e){return c=e})),e(t.exports,"__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED",(function(){return l}),(function(e){return l=e})),e(t.exports,"cloneElement",(function(){return h}),(function(e){return h=e})),e(t.exports,"createContext",(function(){return f}),(function(e){return f=e})),e(t.exports,"createElement",(function(){return d}),(function(e){return d=e})),e(t.exports,"createFactory",(function(){return p}),(function(e){return p=e})),e(t.exports,"createRef",(function(){return g}),(function(e){return g=e})),e(t.exports,"forwardRef",(function(){return m}),(function(e){return m=e})),e(t.exports,"isValidElement",(function(){return y}),(function(e){return y=e})),e(t.exports,"lazy",(function(){return v}),(function(e){return v=e})),e(t.exports,"memo",(function(){return w}),(function(e){return w=e})),e(t.exports,"startTransition",(function(){return b}),(function(e){return b=e})),e(t.exports,"unstable_act",(function(){return A}),(function(e){return A=e})),e(t.exports,"useCallback",(function(){return E}),(function(e){return E=e})),e(t.exports,"useContext",(function(){return x}),(function(e){return x=e})),e(t.exports,"useDebugValue",(function(){return S}),(function(e){return S=e})),e(t.exports,"useDeferredValue",(function(){return C}),(function(e){return C=e})),e(t.exports,"useEffect",(function(){return k}),(function(e){return k=e})),e(t.exports,"useId",(function(){return _}),(function(e){return _=e})),e(t.exports,"useImperativeHandle",(function(){return P}),(function(e){return P=e})),e(t.exports,"useInsertionEffect",(function(){return R}),(function(e){return R=e})),e(t.exports,"useLayoutEffect",(function(){return O}),(function(e){return O=e})),e(t.exports,"useMemo",(function(){return N}),(function(e){return N=e})),e(t.exports,"useReducer",(function(){return I}),(function(e){return I=e})),e(t.exports,"useRef",(function(){return T}),(function(e){return T=e})),e(t.exports,"useState",(function(){return M}),(function(e){return M=e})),e(t.exports,"useSyncExternalStore",(function(){return B}),(function(e){return B=e})),e(t.exports,"useTransition",(function(){return F}),(function(e){return F=e})),e(t.exports,"version",(function(){return L}),(function(e){return L=e}));var D=Symbol.for("react.element"),j=Symbol.for("react.portal"),U=Symbol.for("react.fragment"),z=Symbol.for("react.strict_mode"),q=Symbol.for("react.profiler"),K=Symbol.for("react.provider"),G=Symbol.for("react.context"),W=Symbol.for("react.forward_ref"),H=Symbol.for("react.suspense"),J=Symbol.for("react.memo"),V=Symbol.for("react.lazy"),Y=Symbol.iterator;var Q={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Z=Object.assign,X={};function $(e,t,r){this.props=e,this.context=t,this.refs=X,this.updater=r||Q}function ee(){}function te(e,t,r){this.props=e,this.context=t,this.refs=X,this.updater=r||Q}$.prototype.isReactComponent={},$.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},$.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},ee.prototype=$.prototype;var re=te.prototype=new ee;re.constructor=te,Z(re,$.prototype),re.isPureReactComponent=!0;var ne=Array.isArray,ie=Object.prototype.hasOwnProperty,oe={current:null},se={key:!0,ref:!0,__self:!0,__source:!0};function ae(e,t,r){var n,i={},o=null,s=null;if(null!=t)for(n in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(o=""+t.key),t)ie.call(t,n)&&!se.hasOwnProperty(n)&&(i[n]=t[n]);var a=arguments.length-2;if(1===a)i.children=r;else if(1<a){for(var u=Array(a),c=0;c<a;c++)u[c]=arguments[c+2];i.children=u}if(e&&e.defaultProps)for(n in a=e.defaultProps)void 0===i[n]&&(i[n]=a[n]);return{$$typeof:D,type:e,key:o,ref:s,props:i,_owner:oe.current}}function ue(e){return"object"==typeof e&&null!==e&&e.$$typeof===D}var ce=/\/+/g;function le(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function he(e,t,r,n,i){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var s,a=!1;if(null===e)a=!0;else switch(o){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case D:case j:a=!0}}if(a)return i=i(a=e),e=""===n?"."+le(a,0):n,ne(i)?(r="",null!=e&&(r=e.replace(ce,"$&/")+"/"),he(i,t,r,"",(function(e){return e}))):null!=i&&(ue(i)&&(i=function(e,t){return{$$typeof:D,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,r+(!i.key||a&&a.key===i.key?"":(""+i.key).replace(ce,"$&/")+"/")+e)),t.push(i)),1;if(a=0,n=""===n?".":n+":",ne(e))for(var u=0;u<e.length;u++){var c=n+le(o=e[u],u);a+=he(o,t,r,c,i)}else if("function"==typeof(c=null===(s=e)||"object"!=typeof s?null:"function"==typeof(s=Y&&s[Y]||s["@@iterator"])?s:null))for(e=c.call(e),u=0;!(o=e.next()).done;)a+=he(o=o.value,t,r,c=n+le(o,u++),i);else if("object"===o)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return a}function fe(e,t,r){if(null==e)return e;var n=[],i=0;return he(e,n,"","",(function(e){return t.call(r,e,i++)})),n}function de(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var pe={current:null},ge={transition:null};n={map:fe,forEach:function(e,t,r){fe(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return fe(e,(function(){t++})),t},toArray:function(e){return fe(e,(function(e){return e}))||[]},only:function(e){if(!ue(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},i=$,o=U,s=q,a=te,u=z,c=H,l={ReactCurrentDispatcher:pe,ReactCurrentBatchConfig:ge,ReactCurrentOwner:oe},h=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var n=Z({},e.props),i=e.key,o=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(o=t.ref,s=oe.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var a=e.type.defaultProps;for(u in t)ie.call(t,u)&&!se.hasOwnProperty(u)&&(n[u]=void 0===t[u]&&void 0!==a?a[u]:t[u])}var u=arguments.length-2;if(1===u)n.children=r;else if(1<u){a=Array(u);for(var c=0;c<u;c++)a[c]=arguments[c+2];n.children=a}return{$$typeof:D,type:e.type,key:i,ref:o,props:n,_owner:s}},f=function(e){return(e={$$typeof:G,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:K,_context:e},e.Consumer=e},d=ae,p=function(e){var t=ae.bind(null,e);return t.type=e,t},g=function(){return{current:null}},m=function(e){return{$$typeof:W,render:e}},y=ue,v=function(e){return{$$typeof:V,_payload:{_status:-1,_result:e},_init:de}},w=function(e,t){return{$$typeof:J,type:e,compare:void 0===t?null:t}},b=function(e){var t=ge.transition;ge.transition={};try{e()}finally{ge.transition=t}},A=function(){throw Error("act(...) is not supported in production builds of React.")},E=function(e,t){return pe.current.useCallback(e,t)},x=function(e){return pe.current.useContext(e)},S=function(){},C=function(e){return pe.current.useDeferredValue(e)},k=function(e,t){return pe.current.useEffect(e,t)},_=function(){return pe.current.useId()},P=function(e,t,r){return pe.current.useImperativeHandle(e,t,r)},R=function(e,t){return pe.current.useInsertionEffect(e,t)},O=function(e,t){return pe.current.useLayoutEffect(e,t)},N=function(e,t){return pe.current.useMemo(e,t)},I=function(e,t,r){return pe.current.useReducer(e,t,r)},T=function(e){return pe.current.useRef(e)},M=function(e){return pe.current.useState(e)},B=function(e,t,r){return pe.current.useSyncExternalStore(e,t,r)},F=function(){return pe.current.useTransition()},L="18.2.0"})),o.register("jNpKs",(function(e,t){"use strict";Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.STANDARD_ERROR_MAP=e.exports.SERVER_ERROR_CODE_RANGE=e.exports.RESERVED_ERROR_CODES=e.exports.SERVER_ERROR=e.exports.INTERNAL_ERROR=e.exports.INVALID_PARAMS=e.exports.METHOD_NOT_FOUND=e.exports.INVALID_REQUEST=e.exports.PARSE_ERROR=void 0,e.exports.PARSE_ERROR="PARSE_ERROR",e.exports.INVALID_REQUEST="INVALID_REQUEST",e.exports.METHOD_NOT_FOUND="METHOD_NOT_FOUND",e.exports.INVALID_PARAMS="INVALID_PARAMS",e.exports.INTERNAL_ERROR="INTERNAL_ERROR",e.exports.SERVER_ERROR="SERVER_ERROR",e.exports.RESERVED_ERROR_CODES=[-32700,-32600,-32601,-32602,-32603],e.exports.SERVER_ERROR_CODE_RANGE=[-32e3,-32099],e.exports.STANDARD_ERROR_MAP={[e.exports.PARSE_ERROR]:{code:-32700,message:"Parse error"},[e.exports.INVALID_REQUEST]:{code:-32600,message:"Invalid Request"},[e.exports.METHOD_NOT_FOUND]:{code:-32601,message:"Method not found"},[e.exports.INVALID_PARAMS]:{code:-32602,message:"Invalid params"},[e.exports.INTERNAL_ERROR]:{code:-32603,message:"Internal error"},[e.exports.SERVER_ERROR]:{code:-32e3,message:"Server error"}}})),o.register("8lQgl",(function(e,t){"use strict";Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.validateJsonRpcError=e.exports.getErrorByCode=e.exports.getError=e.exports.isValidErrorCode=e.exports.isReservedErrorCode=e.exports.isServerErrorCode=void 0;var r=o("jNpKs");function n(e){return r.RESERVED_ERROR_CODES.includes(e)}function i(e){return"number"==typeof e}function s(e){const t=Object.values(r.STANDARD_ERROR_MAP).find((t=>t.code===e));return t||r.STANDARD_ERROR_MAP[r.INTERNAL_ERROR]}e.exports.isServerErrorCode=function(e){return e<=r.SERVER_ERROR_CODE_RANGE[0]&&e>=r.SERVER_ERROR_CODE_RANGE[1]},e.exports.isReservedErrorCode=n,e.exports.isValidErrorCode=i,e.exports.getError=function(e){return Object.keys(r.STANDARD_ERROR_MAP).includes(e)?r.STANDARD_ERROR_MAP[e]:r.STANDARD_ERROR_MAP[r.INTERNAL_ERROR]},e.exports.getErrorByCode=s,e.exports.validateJsonRpcError=function(e){if(void 0===e.error.code)return{valid:!1,error:"Missing code for JSON-RPC error"};if(void 0===e.error.message)return{valid:!1,error:"Missing message for JSON-RPC error"};if(!i(e.error.code))return{valid:!1,error:`Invalid error code type for JSON-RPC: ${e.error.code}`};if(n(e.error.code)){const t=s(e.error.code);if(t.message!==r.STANDARD_ERROR_MAP[r.INTERNAL_ERROR].message&&e.error.message===t.message)return{valid:!1,error:`Invalid error code message for JSON-RPC: ${e.error.code}`}}return{valid:!0}}})),o.register("hCYvh",(function(e,t){"use strict";Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.isNodeJs=void 0;var r=o("6MfS1");e.exports.isNodeJs=o("dHAiN").isNode,r.__exportStar(o("dHAiN"),e.exports)})),o.register("6MfS1",(function(t,r){e(t.exports,"__awaiter",(function(){return n})),e(t.exports,"__exportStar",(function(){return o})),e(t.exports,"__importDefault",(function(){return s}));function n(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))}var i=Object.create?function(e,t,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(t,r);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,i)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]};function o(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||i(t,e,r)}Object.create;function s(e){return e&&e.__esModule?e:{default:e}}})),o.register("dHAiN",(function(e,t){"use strict";var r=e.exports&&e.exports.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),n=e.exports&&e.exports.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(e.exports,"__esModule",{value:!0}),n(o("5fJwm"),e.exports),n(o("fJTs3"),e.exports)})),o.register("5fJwm",(function(e,r){"use strict";function n(){return(null==t?void 0:t.crypto)||(null==t?void 0:t.msCrypto)||{}}function i(){const e=n();return e.subtle||e.webkitSubtle}Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.isBrowserCryptoAvailable=e.exports.getSubtleCrypto=e.exports.getBrowerCrypto=void 0,e.exports.getBrowerCrypto=n,e.exports.getSubtleCrypto=i,e.exports.isBrowserCryptoAvailable=function(){return!!n()&&!!i()}})),o.register("fJTs3",(function(e,t){"use strict";var r=o("d5Ya9");function n(){return"undefined"==typeof document&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product}function i(){return void 0!==r&&void 0!==r.versions&&void 0!==r.versions.node}Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.isBrowser=e.exports.isNode=e.exports.isReactNative=void 0,e.exports.isReactNative=n,e.exports.isNode=i,e.exports.isBrowser=function(){return!n()&&!i()}})),o.register("d54LR",(function(e,t){"use strict";Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.formatErrorMessage=e.exports.formatJsonRpcError=e.exports.formatJsonRpcResult=e.exports.formatJsonRpcRequest=e.exports.payloadId=void 0;var r=o("8lQgl"),n=o("jNpKs");function i(){return Date.now()*Math.pow(10,3)+Math.floor(Math.random()*Math.pow(10,3))}function s(e){if(void 0===e)return r.getError(n.INTERNAL_ERROR);if("string"==typeof e&&(e=Object.assign(Object.assign({},r.getError(n.SERVER_ERROR)),{message:e})),r.isReservedErrorCode(e.code)&&(e=r.getErrorByCode(e.code)),!r.isServerErrorCode(e.code))throw new Error("Error code is not in server code range");return e}e.exports.payloadId=i,e.exports.formatJsonRpcRequest=function(e,t,r){return{id:r||i(),jsonrpc:"2.0",method:e,params:t}},e.exports.formatJsonRpcResult=function(e,t){return{id:e,jsonrpc:"2.0",result:t}},e.exports.formatJsonRpcError=function(e,t){return{id:e,jsonrpc:"2.0",error:s(t)}},e.exports.formatErrorMessage=s})),o.register("5phfX",(function(e,t){"use strict";function r(e){return"*"===e}function n(e){return!!r(e)||!!e.includes("*")&&(2===e.split("*").length&&1===e.split("*").filter((e=>""===e.trim())).length)}Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.isValidTrailingWildcardRoute=e.exports.isValidLeadingWildcardRoute=e.exports.isValidWildcardRoute=e.exports.isValidDefaultRoute=e.exports.isValidRoute=void 0,e.exports.isValidRoute=function(e){return e.includes("*")?n(e):!/\W/g.test(e)},e.exports.isValidDefaultRoute=r,e.exports.isValidWildcardRoute=n,e.exports.isValidLeadingWildcardRoute=function(e){return!r(e)&&n(e)&&!e.split("*")[0].trim()},e.exports.isValidTrailingWildcardRoute=function(e){return!r(e)&&n(e)&&!e.split("*")[1].trim()}})),o.register("irQnp",(function(e,t){"use strict";Object.defineProperty(e.exports,"__esModule",{value:!0}),o("6MfS1").__exportStar(o("92fAo"),e.exports)})),o.register("92fAo",(function(e,t){"use strict";Object.defineProperty(e.exports,"__esModule",{value:!0});var r=o("6MfS1");r.__exportStar(o("iXOAz"),e.exports),r.__exportStar(o("fi8FU"),e.exports),r.__exportStar(o("5dJ5H"),e.exports),r.__exportStar(o("4Ni5S"),e.exports),r.__exportStar(o("5Mb3f"),e.exports),r.__exportStar(o("kbUUq"),e.exports),r.__exportStar(o("igRrP"),e.exports),r.__exportStar(o("BPNFn"),e.exports)})),o.register("iXOAz",(function(e,t){"use strict";Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.IBlockchainProvider=e.exports.IBlockchainAuthenticator=e.exports.IPendingRequests=void 0;var r=o("5dJ5H"),n=o("5Mb3f");e.exports.IPendingRequests=class{constructor(e){this.storage=e}};class i extends r.IEvents{constructor(e){super(),this.config=e}}e.exports.IBlockchainAuthenticator=i;class s extends n.IJsonRpcProvider{constructor(e,t){super(e)}}e.exports.IBlockchainProvider=s})),o.register("5dJ5H",(function(e,t){"use strict";Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.IEvents=void 0;e.exports.IEvents=class{}})),o.register("5Mb3f",(function(e,t){"use strict";Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.IJsonRpcProvider=e.exports.IBaseJsonRpcProvider=e.exports.IJsonRpcConnection=void 0;var r=o("5dJ5H");class n extends r.IEvents{constructor(e){super()}}e.exports.IJsonRpcConnection=n;class i extends r.IEvents{constructor(){super()}}e.exports.IBaseJsonRpcProvider=i;e.exports.IJsonRpcProvider=class extends i{constructor(e){super()}}})),o.register("fi8FU",(function(e,t){"use strict";Object.defineProperty(e.exports,"__esModule",{value:!0})})),o.register("4Ni5S",(function(e,t){"use strict";Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.IMultiServiceProvider=void 0;var r=o("5Mb3f");class n extends r.IBaseJsonRpcProvider{constructor(e){super(),this.config=e}}e.exports.IMultiServiceProvider=n})),o.register("kbUUq",(function(e,t){"use strict";Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.IJsonRpcRouter=void 0;e.exports.IJsonRpcRouter=class{constructor(e){this.routes=e}}})),o.register("igRrP",(function(e,t){"use strict";Object.defineProperty(e.exports,"__esModule",{value:!0})})),o.register("BPNFn",(function(e,t){"use strict";Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.IJsonRpcValidator=void 0;e.exports.IJsonRpcValidator=class{constructor(e){this.schemas=e}}})),o.register("6K3B3",(function(e,t){"use strict";function r(e){return"id"in e&&"jsonrpc"in e&&"2.0"===e.jsonrpc}function n(e){return"result"in e}function i(e){return"error"in e}Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.isJsonRpcValidationInvalid=e.exports.isJsonRpcError=e.exports.isJsonRpcResult=e.exports.isJsonRpcResponse=e.exports.isJsonRpcRequest=e.exports.isJsonRpcPayload=void 0,e.exports.isJsonRpcPayload=r,e.exports.isJsonRpcRequest=function(e){return r(e)&&"method"in e},e.exports.isJsonRpcResponse=function(e){return r(e)&&(n(e)||i(e))},e.exports.isJsonRpcResult=n,e.exports.isJsonRpcError=i,e.exports.isJsonRpcValidationInvalid=function(e){return"error"in e&&!1===e.valid}})),o.register("9ev1f",(function(t,r){var n;e(t.exports,"getBundleURL",(function(){return n}),(function(e){return n=e}));var i={};function o(e){return(""+e).replace(/^((?:https?|file|ftp|(chrome|moz)-extension):\/\/.+)\/[^/]+$/,"$1")+"/"}n=function(e){var t=i[e];return t||(t=function(){try{throw new Error}catch(t){var e=(""+t.stack).match(/(https?|file|ftp|(chrome|moz)-extension):\/\/[^)\n]+/g);if(e)return o(e[2])}return"/"}(),i[e]=t),t}})),o.register("2BQXy",(function(e,t){var r=o("303DT"),n=o("cCCgK"),i=t&&!t.nodeType&&t,s=i&&e&&!e.nodeType&&e,a=s&&s.exports===i?r.Buffer:void 0,u=(a?a.isBuffer:void 0)||n;e.exports=u})),o.register("303DT",(function(e,t){var r=o("fumnU"),n="object"==typeof self&&self&&self.Object===Object&&self,i=r||n||Function("return this")();e.exports=i})),o.register("fumnU",(function(e,r){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n})),o.register("cCCgK",(function(e,t){e.exports=function(){return!1}})),o.register("dBwJu",(function(e,t){var r=o("fumnU"),n=t&&!t.nodeType&&t,i=n&&e&&!e.nodeType&&e,s=i&&i.exports===n&&r.process,a=function(){try{var e=i&&i.require&&i.require("util").types;return e||s&&s.binding&&s.binding("util")}catch(e){}}();e.exports=a})),o.register("80fr4",(function(e,t){var r=o("303DT"),n=t&&!t.nodeType&&t,i=n&&e&&!e.nodeType&&e,s=i&&i.exports===n?r.Buffer:void 0,a=s?s.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var r=e.length,n=a?a(r):new e.constructor(r);return e.copy(n),n}})),o("8wNGQ").register(JSON.parse('{"iV77h":"background.90e23ec2.js","2zmJU":"dialog.9beef15a.html","jCq9D":"popup.5b4697ed.js","ctEUo":"popup.9a58e125.css","2A3mm":"popup.5d78e648.js"}'));var s=o("iLNs9"),a={};e(a,"logger",(function(){return qu})),e(a,"Signer",(function(){return Yr.Signer})),e(a,"Wallet",(function(){return Pi.Wallet})),e(a,"VoidSigner",(function(){return Yr.VoidSigner})),e(a,"getDefaultProvider",(function(){return Su})),e(a,"providers",(function(){return Ho})),e(a,"BaseContract",(function(){return u.BaseContract})),e(a,"Contract",(function(){return u.Contract})),e(a,"ContractFactory",(function(){return u.ContractFactory})),e(a,"BigNumber",(function(){return w})),e(a,"FixedNumber",(function(){return M})),e(a,"constants",(function(){return Ze})),e(a,"errors",(function(){return o("2rINa").ErrorCode})),e(a,"utils",(function(){return Cu})),e(a,"wordlists",(function(){return Gi})),e(a,"version",(function(){return zu})),e(a,"Wordlist",(function(){return Ui}));var u={};e(u,"BaseContract",(function(){return Ci}),(function(e){return Ci=e})),e(u,"Contract",(function(){return ki}),(function(e){return ki=e})),e(u,"ContractFactory",(function(){return _i}),(function(e){return _i=e}));var c=o("jc6J8"),l=o("3Yhqu"),h=o("2rINa");const f="bignumber/5.7.0";var d=r(c).BN;const p=new(0,h.Logger)(f),g={},m=9007199254740991;function y(e){return null!=e&&(w.isBigNumber(e)||"number"==typeof e&&e%1==0||"string"==typeof e&&!!e.match(/^-?[0-9]+$/)||(0,l.isHexString)(e)||"bigint"==typeof e||(0,l.isBytes)(e))}let v=!1;class w{fromTwos(e){return A(E(this).fromTwos(e))}toTwos(e){return A(E(this).toTwos(e))}abs(){return"-"===this._hex[0]?w.from(this._hex.substring(1)):this}add(e){return A(E(this).add(E(e)))}sub(e){return A(E(this).sub(E(e)))}div(e){return w.from(e).isZero()&&x("division-by-zero","div"),A(E(this).div(E(e)))}mul(e){return A(E(this).mul(E(e)))}mod(e){const t=E(e);return t.isNeg()&&x("division-by-zero","mod"),A(E(this).umod(t))}pow(e){const t=E(e);return t.isNeg()&&x("negative-power","pow"),A(E(this).pow(t))}and(e){const t=E(e);return(this.isNegative()||t.isNeg())&&x("unbound-bitwise-result","and"),A(E(this).and(t))}or(e){const t=E(e);return(this.isNegative()||t.isNeg())&&x("unbound-bitwise-result","or"),A(E(this).or(t))}xor(e){const t=E(e);return(this.isNegative()||t.isNeg())&&x("unbound-bitwise-result","xor"),A(E(this).xor(t))}mask(e){return(this.isNegative()||e<0)&&x("negative-width","mask"),A(E(this).maskn(e))}shl(e){return(this.isNegative()||e<0)&&x("negative-width","shl"),A(E(this).shln(e))}shr(e){return(this.isNegative()||e<0)&&x("negative-width","shr"),A(E(this).shrn(e))}eq(e){return E(this).eq(E(e))}lt(e){return E(this).lt(E(e))}lte(e){return E(this).lte(E(e))}gt(e){return E(this).gt(E(e))}gte(e){return E(this).gte(E(e))}isNegative(){return"-"===this._hex[0]}isZero(){return E(this).isZero()}toNumber(){try{return E(this).toNumber()}catch(e){x("overflow","toNumber",this.toString())}return null}toBigInt(){try{return BigInt(this.toString())}catch(e){}return p.throwError("this platform does not support BigInt",h.Logger.errors.UNSUPPORTED_OPERATION,{value:this.toString()})}toString(){return arguments.length>0&&(10===arguments[0]?v||(v=!0,p.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")):16===arguments[0]?p.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",h.Logger.errors.UNEXPECTED_ARGUMENT,{}):p.throwError("BigNumber.toString does not accept parameters",h.Logger.errors.UNEXPECTED_ARGUMENT,{})),E(this).toString(10)}toHexString(){return this._hex}toJSON(e){return{type:"BigNumber",hex:this.toHexString()}}static from(e){if(e instanceof w)return e;if("string"==typeof e)return e.match(/^-?0x[0-9a-f]+$/i)?new w(g,b(e)):e.match(/^-?[0-9]+$/)?new w(g,b(new d(e))):p.throwArgumentError("invalid BigNumber string","value",e);if("number"==typeof e)return e%1&&x("underflow","BigNumber.from",e),(e>=m||e<=-9007199254740991)&&x("overflow","BigNumber.from",e),w.from(String(e));const t=e;if("bigint"==typeof t)return w.from(t.toString());if((0,l.isBytes)(t))return w.from((0,l.hexlify)(t));if(t)if(t.toHexString){const e=t.toHexString();if("string"==typeof e)return w.from(e)}else{let e=t._hex;if(null==e&&"BigNumber"===t.type&&(e=t.hex),"string"==typeof e&&((0,l.isHexString)(e)||"-"===e[0]&&(0,l.isHexString)(e.substring(1))))return w.from(e)}return p.throwArgumentError("invalid BigNumber value","value",e)}static isBigNumber(e){return!(!e||!e._isBigNumber)}constructor(e,t){e!==g&&p.throwError("cannot call constructor directly; use BigNumber.from",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new (BigNumber)"}),this._hex=t,this._isBigNumber=!0,Object.freeze(this)}}function b(e){if("string"!=typeof e)return b(e.toString(16));if("-"===e[0])return"-"===(e=e.substring(1))[0]&&p.throwArgumentError("invalid hex","value",e),"0x00"===(e=b(e))?e:"-"+e;if("0x"!==e.substring(0,2)&&(e="0x"+e),"0x"===e)return"0x00";for(e.length%2&&(e="0x0"+e.substring(2));e.length>4&&"0x00"===e.substring(0,4);)e="0x"+e.substring(4);return e}function A(e){return w.from(b(e))}function E(e){const t=w.from(e).toHexString();return"-"===t[0]?new d("-"+t.substring(3),16):new d(t.substring(2),16)}function x(e,t,r){const n={fault:e,operation:t};return null!=r&&(n.value=r),p.throwError(e,h.Logger.errors.NUMERIC_FAULT,n)}l=o("3Yhqu");const S=new(0,(h=o("2rINa")).Logger)(f),C={},k=w.from(0),_=w.from(-1);function P(e,t,r,n){const i={fault:t,operation:r};return void 0!==n&&(i.value=n),S.throwError(e,h.Logger.errors.NUMERIC_FAULT,i)}let R="0";for(;R.length<256;)R+=R;function O(e){if("number"!=typeof e)try{e=w.from(e).toNumber()}catch(e){}return"number"==typeof e&&e>=0&&e<=256&&!(e%1)?"1"+R.substring(0,e):S.throwArgumentError("invalid decimal size","decimals",e)}function N(e,t){null==t&&(t=0);const r=O(t),n=(e=w.from(e)).lt(k);n&&(e=e.mul(_));let i=e.mod(r).toString();for(;i.length<r.length-1;)i="0"+i;i=i.match(/^([0-9]*[1-9]|0)(0*)/)[1];const o=e.div(r).toString();return e=1===r.length?o:o+"."+i,n&&(e="-"+e),e}function I(e,t){null==t&&(t=0);const r=O(t);"string"==typeof e&&e.match(/^-?[0-9.]+$/)||S.throwArgumentError("invalid decimal value","value",e);const n="-"===e.substring(0,1);n&&(e=e.substring(1)),"."===e&&S.throwArgumentError("missing value","value",e);const i=e.split(".");i.length>2&&S.throwArgumentError("too many decimal points","value",e);let o=i[0],s=i[1];for(o||(o="0"),s||(s="0");"0"===s[s.length-1];)s=s.substring(0,s.length-1);for(s.length>r.length-1&&P("fractional component exceeds decimals","underflow","parseFixed"),""===s&&(s="0");s.length<r.length-1;)s+="0";const a=w.from(o),u=w.from(s);let c=a.mul(r).add(u);return n&&(c=c.mul(_)),c}class T{static from(e){if(e instanceof T)return e;"number"==typeof e&&(e=`fixed128x${e}`);let t=!0,r=128,n=18;if("string"==typeof e)if("fixed"===e);else if("ufixed"===e)t=!1;else{const i=e.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);i||S.throwArgumentError("invalid fixed format","format",e),t="u"!==i[1],r=parseInt(i[2]),n=parseInt(i[3])}else if(e){const i=(t,r,n)=>null==e[t]?n:(typeof e[t]!==r&&S.throwArgumentError("invalid fixed format ("+t+" not "+r+")","format."+t,e[t]),e[t]);t=i("signed","boolean",t),r=i("width","number",r),n=i("decimals","number",n)}return r%8&&S.throwArgumentError("invalid fixed format width (not byte aligned)","format.width",r),n>80&&S.throwArgumentError("invalid fixed format (decimals too large)","format.decimals",n),new T(C,t,r,n)}constructor(e,t,r,n){e!==C&&S.throwError("cannot use FixedFormat constructor; use FixedFormat.from",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new FixedFormat"}),this.signed=t,this.width=r,this.decimals=n,this.name=(t?"":"u")+"fixed"+String(r)+"x"+String(n),this._multiplier=O(n),Object.freeze(this)}}class M{_checkFormat(e){this.format.name!==e.format.name&&S.throwArgumentError("incompatible format; use fixedNumber.toFormat","other",e)}addUnsafe(e){this._checkFormat(e);const t=I(this._value,this.format.decimals),r=I(e._value,e.format.decimals);return M.fromValue(t.add(r),this.format.decimals,this.format)}subUnsafe(e){this._checkFormat(e);const t=I(this._value,this.format.decimals),r=I(e._value,e.format.decimals);return M.fromValue(t.sub(r),this.format.decimals,this.format)}mulUnsafe(e){this._checkFormat(e);const t=I(this._value,this.format.decimals),r=I(e._value,e.format.decimals);return M.fromValue(t.mul(r).div(this.format._multiplier),this.format.decimals,this.format)}divUnsafe(e){this._checkFormat(e);const t=I(this._value,this.format.decimals),r=I(e._value,e.format.decimals);return M.fromValue(t.mul(this.format._multiplier).div(r),this.format.decimals,this.format)}floor(){const e=this.toString().split(".");1===e.length&&e.push("0");let t=M.from(e[0],this.format);const r=!e[1].match(/^(0*)$/);return this.isNegative()&&r&&(t=t.subUnsafe(B.toFormat(t.format))),t}ceiling(){const e=this.toString().split(".");1===e.length&&e.push("0");let t=M.from(e[0],this.format);const r=!e[1].match(/^(0*)$/);return!this.isNegative()&&r&&(t=t.addUnsafe(B.toFormat(t.format))),t}round(e){null==e&&(e=0);const t=this.toString().split(".");if(1===t.length&&t.push("0"),(e<0||e>80||e%1)&&S.throwArgumentError("invalid decimal count","decimals",e),t[1].length<=e)return this;const r=M.from("1"+R.substring(0,e),this.format),n=F.toFormat(this.format);return this.mulUnsafe(r).addUnsafe(n).floor().divUnsafe(r)}isZero(){return"0.0"===this._value||"0"===this._value}isNegative(){return"-"===this._value[0]}toString(){return this._value}toHexString(e){if(null==e)return this._hex;e%8&&S.throwArgumentError("invalid byte width","width",e);const t=w.from(this._hex).fromTwos(this.format.width).toTwos(e).toHexString();return(0,l.hexZeroPad)(t,e/8)}toUnsafeFloat(){return parseFloat(this.toString())}toFormat(e){return M.fromString(this._value,e)}static fromValue(e,t,r){return null!=r||null==t||y(t)||(r=t,t=null),null==t&&(t=0),null==r&&(r="fixed"),M.fromString(N(e,t),T.from(r))}static fromString(e,t){null==t&&(t="fixed");const r=T.from(t),n=I(e,r.decimals);!r.signed&&n.lt(k)&&P("unsigned value cannot be negative","overflow","value",e);let i=null;r.signed?i=n.toTwos(r.width).toHexString():(i=n.toHexString(),i=(0,l.hexZeroPad)(i,r.width/8));const o=N(n,r.decimals);return new M(C,i,o,r)}static fromBytes(e,t){null==t&&(t="fixed");const r=T.from(t);if((0,l.arrayify)(e).length>r.width/8)throw new Error("overflow");let n=w.from(e);r.signed&&(n=n.fromTwos(r.width));const i=n.toTwos((r.signed?0:1)+r.width).toHexString(),o=N(n,r.decimals);return new M(C,i,o,r)}static from(e,t){if("string"==typeof e)return M.fromString(e,t);if((0,l.isBytes)(e))return M.fromBytes(e,t);try{return M.fromValue(e,0,t)}catch(e){if(e.code!==h.Logger.errors.INVALID_ARGUMENT)throw e}return S.throwArgumentError("invalid FixedNumber value","value",e)}static isFixedNumber(e){return!(!e||!e._isFixedNumber)}constructor(e,t,r,n){e!==C&&S.throwError("cannot use FixedNumber constructor; use FixedNumber.from",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new FixedFormat"}),this.format=n,this._hex=t,this._value=r,this._isFixedNumber=!0,Object.freeze(this)}}const B=M.from(1),F=M.from("0.5");var L={};e(L,"defineReadOnly",(function(){return U}),(function(e){return U=e})),e(L,"getStatic",(function(){return z}),(function(e){return z=e})),e(L,"resolveProperties",(function(){return q}),(function(e){return q=e})),e(L,"checkProperties",(function(){return K}),(function(e){return K=e})),e(L,"shallowCopy",(function(){return G}),(function(e){return G=e})),e(L,"deepCopy",(function(){return V}),(function(e){return V=e})),e(L,"Description",(function(){return Y}),(function(e){return Y=e}));h=o("2rINa");var D=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))};const j=new(0,h.Logger)("properties/5.7.0");function U(e,t,r){Object.defineProperty(e,t,{enumerable:!0,value:r,writable:!1})}function z(e,t){for(let r=0;r<32;r++){if(e[t])return e[t];if(!e.prototype||"object"!=typeof e.prototype)break;e=Object.getPrototypeOf(e.prototype).constructor}return null}function q(e){return D(this,void 0,void 0,(function*(){const t=Object.keys(e).map((t=>{const r=e[t];return Promise.resolve(r).then((e=>({key:t,value:e})))}));return(yield Promise.all(t)).reduce(((e,t)=>(e[t.key]=t.value,e)),{})}))}function K(e,t){e&&"object"==typeof e||j.throwArgumentError("invalid object","object",e),Object.keys(e).forEach((r=>{t[r]||j.throwArgumentError("invalid object key - "+r,"transaction:"+r,e)}))}function G(e){const t={};for(const r in e)t[r]=e[r];return t}const W={bigint:!0,boolean:!0,function:!0,number:!0,string:!0};function H(e){if(null==e||W[typeof e])return!0;if(Array.isArray(e)||"object"==typeof e){if(!Object.isFrozen(e))return!1;const t=Object.keys(e);for(let r=0;r<t.length;r++){let n=null;try{n=e[t[r]]}catch(e){continue}if(!H(n))return!1}return!0}return j.throwArgumentError("Cannot deepCopy "+typeof e,"object",e)}function J(e){if(H(e))return e;if(Array.isArray(e))return Object.freeze(e.map((e=>V(e))));if("object"==typeof e){const t={};for(const r in e){const n=e[r];void 0!==n&&U(t,r,V(n))}return t}return j.throwArgumentError("Cannot deepCopy "+typeof e,"object",e)}function V(e){return J(e)}class Y{constructor(e){for(const t in e)this[t]=V(e[t])}}const Q="abi/5.7.0",Z=new(0,(h=o("2rINa")).Logger)(Q),X={};let $={calldata:!0,memory:!0,storage:!0},ee={calldata:!0,memory:!0};function te(e,t){if("bytes"===e||"string"===e){if($[t])return!0}else if("address"===e){if("payable"===t)return!0}else if((e.indexOf("[")>=0||"tuple"===e)&&ee[t])return!0;return($[t]||"payable"===t)&&Z.throwArgumentError("invalid modifier","name",t),!1}function re(e,t){for(let r in t)(0,L.defineReadOnly)(e,r,t[r])}const ne=Object.freeze({sighash:"sighash",minimal:"minimal",full:"full",json:"json"}),ie=new RegExp(/^(.*)\[([0-9]*)\]$/);class oe{format(e){if(e||(e=ne.sighash),ne[e]||Z.throwArgumentError("invalid format type","format",e),e===ne.json){let t={type:"tuple"===this.baseType?"tuple":this.type,name:this.name||void 0};return"boolean"==typeof this.indexed&&(t.indexed=this.indexed),this.components&&(t.components=this.components.map((t=>JSON.parse(t.format(e))))),JSON.stringify(t)}let t="";return"array"===this.baseType?(t+=this.arrayChildren.format(e),t+="["+(this.arrayLength<0?"":String(this.arrayLength))+"]"):"tuple"===this.baseType?(e!==ne.sighash&&(t+=this.type),t+="("+this.components.map((t=>t.format(e))).join(e===ne.full?", ":",")+")"):t+=this.type,e!==ne.sighash&&(!0===this.indexed&&(t+=" indexed"),e===ne.full&&this.name&&(t+=" "+this.name)),t}static from(e,t){return"string"==typeof e?oe.fromString(e,t):oe.fromObject(e)}static fromObject(e){return oe.isParamType(e)?e:new oe(X,{name:e.name||null,type:me(e.type),indexed:null==e.indexed?null:!!e.indexed,components:e.components?e.components.map(oe.fromObject):null})}static fromString(e,t){return r=function(e,t){let r=e;function n(t){Z.throwArgumentError(`unexpected character at position ${t}`,"param",e)}function i(e){let r={type:"",name:"",parent:e,state:{allowType:!0}};return t&&(r.indexed=!1),r}e=e.replace(/\s/g," ");let o={type:"",name:"",state:{allowType:!0}},s=o;for(let r=0;r<e.length;r++){let o=e[r];switch(o){case"(":s.state.allowType&&""===s.type?s.type="tuple":s.state.allowParams||n(r),s.state.allowType=!1,s.type=me(s.type),s.components=[i(s)],s=s.components[0];break;case")":delete s.state,"indexed"===s.name&&(t||n(r),s.indexed=!0,s.name=""),te(s.type,s.name)&&(s.name=""),s.type=me(s.type);let e=s;s=s.parent,s||n(r),delete e.parent,s.state.allowParams=!1,s.state.allowName=!0,s.state.allowArray=!0;break;case",":delete s.state,"indexed"===s.name&&(t||n(r),s.indexed=!0,s.name=""),te(s.type,s.name)&&(s.name=""),s.type=me(s.type);let a=i(s.parent);s.parent.components.push(a),delete s.parent,s=a;break;case" ":s.state.allowType&&""!==s.type&&(s.type=me(s.type),delete s.state.allowType,s.state.allowName=!0,s.state.allowParams=!0),s.state.allowName&&""!==s.name&&("indexed"===s.name?(t||n(r),s.indexed&&n(r),s.indexed=!0,s.name=""):te(s.type,s.name)?s.name="":s.state.allowName=!1);break;case"[":s.state.allowArray||n(r),s.type+=o,s.state.allowArray=!1,s.state.allowName=!1,s.state.readArray=!0;break;case"]":s.state.readArray||n(r),s.type+=o,s.state.readArray=!1,s.state.allowArray=!0,s.state.allowName=!0;break;default:s.state.allowType?(s.type+=o,s.state.allowParams=!0,s.state.allowArray=!0):s.state.allowName?(s.name+=o,delete s.state.allowArray):s.state.readArray?s.type+=o:n(r)}}return s.parent&&Z.throwArgumentError("unexpected eof","param",e),delete o.state,"indexed"===s.name?(t||n(r.length-7),s.indexed&&n(r.length-7),s.indexed=!0,s.name=""):te(s.type,s.name)&&(s.name=""),o.type=me(o.type),o}(e,!!t),oe.fromObject({name:r.name,type:r.type,indexed:r.indexed,components:r.components});var r}static isParamType(e){return!(null==e||!e._isParamType)}constructor(e,t){e!==X&&Z.throwError("use fromString",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new ParamType()"}),re(this,t);let r=this.type.match(ie);re(this,r?{arrayLength:parseInt(r[2]||"-1"),arrayChildren:oe.fromObject({type:r[1],components:this.components}),baseType:"array"}:{arrayLength:null,arrayChildren:null,baseType:null!=this.components?"tuple":this.type}),this._isParamType=!0,Object.freeze(this)}}function se(e,t){return function(e){e=e.trim();let t=[],r="",n=0;for(let i=0;i<e.length;i++){let o=e[i];","===o&&0===n?(t.push(r),r=""):(r+=o,"("===o?n++:")"===o&&(n--,-1===n&&Z.throwArgumentError("unbalanced parenthesis","value",e)))}r&&t.push(r);return t}(e).map((e=>oe.fromString(e,t)))}class ae{static from(e){return ae.isFragment(e)?e:"string"==typeof e?ae.fromString(e):ae.fromObject(e)}static fromObject(e){if(ae.isFragment(e))return e;switch(e.type){case"function":return de.fromObject(e);case"event":return ue.fromObject(e);case"constructor":return fe.fromObject(e);case"error":return ge.fromObject(e);case"fallback":case"receive":return null}return Z.throwArgumentError("invalid fragment object","value",e)}static fromString(e){return"event"===(e=(e=(e=e.replace(/\s/g," ")).replace(/\(/g," (").replace(/\)/g,") ").replace(/\s+/g," ")).trim()).split(" ")[0]?ue.fromString(e.substring(5).trim()):"function"===e.split(" ")[0]?de.fromString(e.substring(8).trim()):"constructor"===e.split("(")[0].trim()?fe.fromString(e.trim()):"error"===e.split(" ")[0]?ge.fromString(e.substring(5).trim()):Z.throwArgumentError("unsupported fragment","value",e)}static isFragment(e){return!(!e||!e._isFragment)}constructor(e,t){e!==X&&Z.throwError("use a static from method",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new Fragment()"}),re(this,t),this._isFragment=!0,Object.freeze(this)}}class ue extends ae{format(e){if(e||(e=ne.sighash),ne[e]||Z.throwArgumentError("invalid format type","format",e),e===ne.json)return JSON.stringify({type:"event",anonymous:this.anonymous,name:this.name,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});let t="";return e!==ne.sighash&&(t+="event "),t+=this.name+"("+this.inputs.map((t=>t.format(e))).join(e===ne.full?", ":",")+") ",e!==ne.sighash&&this.anonymous&&(t+="anonymous "),t.trim()}static from(e){return"string"==typeof e?ue.fromString(e):ue.fromObject(e)}static fromObject(e){if(ue.isEventFragment(e))return e;"event"!==e.type&&Z.throwArgumentError("invalid event object","value",e);const t={name:ve(e.name),anonymous:e.anonymous,inputs:e.inputs?e.inputs.map(oe.fromObject):[],type:"event"};return new ue(X,t)}static fromString(e){let t=e.match(we);t||Z.throwArgumentError("invalid event string","value",e);let r=!1;return t[3].split(" ").forEach((e=>{switch(e.trim()){case"anonymous":r=!0;break;case"":break;default:Z.warn("unknown modifier: "+e)}})),ue.fromObject({name:t[1].trim(),anonymous:r,inputs:se(t[2],!0),type:"event"})}static isEventFragment(e){return e&&e._isFragment&&"event"===e.type}}function ce(e,t){t.gas=null;let r=e.split("@");return 1!==r.length?(r.length>2&&Z.throwArgumentError("invalid human-readable ABI signature","value",e),r[1].match(/^[0-9]+$/)||Z.throwArgumentError("invalid human-readable ABI signature gas","value",e),t.gas=w.from(r[1]),r[0]):e}function le(e,t){t.constant=!1,t.payable=!1,t.stateMutability="nonpayable",e.split(" ").forEach((e=>{switch(e.trim()){case"constant":t.constant=!0;break;case"payable":t.payable=!0,t.stateMutability="payable";break;case"nonpayable":t.payable=!1,t.stateMutability="nonpayable";break;case"pure":t.constant=!0,t.stateMutability="pure";break;case"view":t.constant=!0,t.stateMutability="view";break;case"external":case"public":case"":break;default:console.log("unknown modifier: "+e)}}))}function he(e){let t={constant:!1,payable:!0,stateMutability:"payable"};return null!=e.stateMutability?(t.stateMutability=e.stateMutability,t.constant="view"===t.stateMutability||"pure"===t.stateMutability,null!=e.constant&&!!e.constant!==t.constant&&Z.throwArgumentError("cannot have constant function with mutability "+t.stateMutability,"value",e),t.payable="payable"===t.stateMutability,null!=e.payable&&!!e.payable!==t.payable&&Z.throwArgumentError("cannot have payable function with mutability "+t.stateMutability,"value",e)):null!=e.payable?(t.payable=!!e.payable,null!=e.constant||t.payable||"constructor"===e.type||Z.throwArgumentError("unable to determine stateMutability","value",e),t.constant=!!e.constant,t.constant?t.stateMutability="view":t.stateMutability=t.payable?"payable":"nonpayable",t.payable&&t.constant&&Z.throwArgumentError("cannot have constant payable function","value",e)):null!=e.constant?(t.constant=!!e.constant,t.payable=!t.constant,t.stateMutability=t.constant?"view":"payable"):"constructor"!==e.type&&Z.throwArgumentError("unable to determine stateMutability","value",e),t}class fe extends ae{format(e){if(e||(e=ne.sighash),ne[e]||Z.throwArgumentError("invalid format type","format",e),e===ne.json)return JSON.stringify({type:"constructor",stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:void 0,payable:this.payable,gas:this.gas?this.gas.toNumber():void 0,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});e===ne.sighash&&Z.throwError("cannot format a constructor for sighash",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"format(sighash)"});let t="constructor("+this.inputs.map((t=>t.format(e))).join(e===ne.full?", ":",")+") ";return this.stateMutability&&"nonpayable"!==this.stateMutability&&(t+=this.stateMutability+" "),t.trim()}static from(e){return"string"==typeof e?fe.fromString(e):fe.fromObject(e)}static fromObject(e){if(fe.isConstructorFragment(e))return e;"constructor"!==e.type&&Z.throwArgumentError("invalid constructor object","value",e);let t=he(e);t.constant&&Z.throwArgumentError("constructor cannot be constant","value",e);const r={name:null,type:e.type,inputs:e.inputs?e.inputs.map(oe.fromObject):[],payable:t.payable,stateMutability:t.stateMutability,gas:e.gas?w.from(e.gas):null};return new fe(X,r)}static fromString(e){let t={type:"constructor"},r=(e=ce(e,t)).match(we);return r&&"constructor"===r[1].trim()||Z.throwArgumentError("invalid constructor string","value",e),t.inputs=se(r[2].trim(),!1),le(r[3].trim(),t),fe.fromObject(t)}static isConstructorFragment(e){return e&&e._isFragment&&"constructor"===e.type}}class de extends fe{format(e){if(e||(e=ne.sighash),ne[e]||Z.throwArgumentError("invalid format type","format",e),e===ne.json)return JSON.stringify({type:"function",name:this.name,constant:this.constant,stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:void 0,payable:this.payable,gas:this.gas?this.gas.toNumber():void 0,inputs:this.inputs.map((t=>JSON.parse(t.format(e)))),outputs:this.outputs.map((t=>JSON.parse(t.format(e))))});let t="";return e!==ne.sighash&&(t+="function "),t+=this.name+"("+this.inputs.map((t=>t.format(e))).join(e===ne.full?", ":",")+") ",e!==ne.sighash&&(this.stateMutability?"nonpayable"!==this.stateMutability&&(t+=this.stateMutability+" "):this.constant&&(t+="view "),this.outputs&&this.outputs.length&&(t+="returns ("+this.outputs.map((t=>t.format(e))).join(", ")+") "),null!=this.gas&&(t+="@"+this.gas.toString()+" ")),t.trim()}static from(e){return"string"==typeof e?de.fromString(e):de.fromObject(e)}static fromObject(e){if(de.isFunctionFragment(e))return e;"function"!==e.type&&Z.throwArgumentError("invalid function object","value",e);let t=he(e);const r={type:e.type,name:ve(e.name),constant:t.constant,inputs:e.inputs?e.inputs.map(oe.fromObject):[],outputs:e.outputs?e.outputs.map(oe.fromObject):[],payable:t.payable,stateMutability:t.stateMutability,gas:e.gas?w.from(e.gas):null};return new de(X,r)}static fromString(e){let t={type:"function"},r=(e=ce(e,t)).split(" returns ");r.length>2&&Z.throwArgumentError("invalid function string","value",e);let n=r[0].match(we);if(n||Z.throwArgumentError("invalid function signature","value",e),t.name=n[1].trim(),t.name&&ve(t.name),t.inputs=se(n[2],!1),le(n[3].trim(),t),r.length>1){let n=r[1].match(we);""==n[1].trim()&&""==n[3].trim()||Z.throwArgumentError("unexpected tokens","value",e),t.outputs=se(n[2],!1)}else t.outputs=[];return de.fromObject(t)}static isFunctionFragment(e){return e&&e._isFragment&&"function"===e.type}}function pe(e){const t=e.format();return"Error(string)"!==t&&"Panic(uint256)"!==t||Z.throwArgumentError(`cannot specify user defined ${t} error`,"fragment",e),e}class ge extends ae{format(e){if(e||(e=ne.sighash),ne[e]||Z.throwArgumentError("invalid format type","format",e),e===ne.json)return JSON.stringify({type:"error",name:this.name,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});let t="";return e!==ne.sighash&&(t+="error "),t+=this.name+"("+this.inputs.map((t=>t.format(e))).join(e===ne.full?", ":",")+") ",t.trim()}static from(e){return"string"==typeof e?ge.fromString(e):ge.fromObject(e)}static fromObject(e){if(ge.isErrorFragment(e))return e;"error"!==e.type&&Z.throwArgumentError("invalid error object","value",e);const t={type:e.type,name:ve(e.name),inputs:e.inputs?e.inputs.map(oe.fromObject):[]};return pe(new ge(X,t))}static fromString(e){let t={type:"error"},r=e.match(we);return r||Z.throwArgumentError("invalid error signature","value",e),t.name=r[1].trim(),t.name&&ve(t.name),t.inputs=se(r[2],!1),pe(ge.fromObject(t))}static isErrorFragment(e){return e&&e._isFragment&&"error"===e.type}}function me(e){return e.match(/^uint($|[^1-9])/)?e="uint256"+e.substring(4):e.match(/^int($|[^1-9])/)&&(e="int256"+e.substring(3)),e}const ye=new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");function ve(e){return e&&e.match(ye)||Z.throwArgumentError(`invalid identifier "${e}"`,"value",e),e}const we=new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");l=o("3Yhqu"),h=o("2rINa"),l=o("3Yhqu");const be=new(0,(h=o("2rINa")).Logger)(Q);function Ae(e){const t=[],r=function(e,n){if(Array.isArray(n))for(let i in n){const o=e.slice();o.push(i);try{r(o,n[i])}catch(e){t.push({path:o,error:e})}}};return r([],e),t}class Ee{_throwError(e,t){be.throwArgumentError(e,this.localName,t)}constructor(e,t,r,n){this.name=e,this.type=t,this.localName=r,this.dynamic=n}}class xe{get data(){return(0,l.hexConcat)(this._data)}get length(){return this._dataLength}_writeData(e){return this._data.push(e),this._dataLength+=e.length,e.length}appendWriter(e){return this._writeData((0,l.concat)(e._data))}writeBytes(e){let t=(0,l.arrayify)(e);const r=t.length%this.wordSize;return r&&(t=(0,l.concat)([t,this._padding.slice(r)])),this._writeData(t)}_getValue(e){let t=(0,l.arrayify)(w.from(e));return t.length>this.wordSize&&be.throwError("value out-of-bounds",h.Logger.errors.BUFFER_OVERRUN,{length:this.wordSize,offset:t.length}),t.length%this.wordSize&&(t=(0,l.concat)([this._padding.slice(t.length%this.wordSize),t])),t}writeValue(e){return this._writeData(this._getValue(e))}writeUpdatableValue(){const e=this._data.length;return this._data.push(this._padding),this._dataLength+=this.wordSize,t=>{this._data[e]=this._getValue(t)}}constructor(e){(0,L.defineReadOnly)(this,"wordSize",e||32),this._data=[],this._dataLength=0,this._padding=new Uint8Array(e)}}class Se{get data(){return(0,l.hexlify)(this._data)}get consumed(){return this._offset}static coerce(e,t){let r=e.match("^u?int([0-9]+)$");return r&&parseInt(r[1])<=48&&(t=t.toNumber()),t}coerce(e,t){return this._coerceFunc?this._coerceFunc(e,t):Se.coerce(e,t)}_peekBytes(e,t,r){let n=Math.ceil(t/this.wordSize)*this.wordSize;return this._offset+n>this._data.length&&(this.allowLoose&&r&&this._offset+t<=this._data.length?n=t:be.throwError("data out-of-bounds",h.Logger.errors.BUFFER_OVERRUN,{length:this._data.length,offset:this._offset+n})),this._data.slice(this._offset,this._offset+n)}subReader(e){return new Se(this._data.slice(this._offset+e),this.wordSize,this._coerceFunc,this.allowLoose)}readBytes(e,t){let r=this._peekBytes(0,e,!!t);return this._offset+=r.length,r.slice(0,e)}readValue(){return w.from(this.readBytes(this.wordSize))}constructor(e,t,r,n){(0,L.defineReadOnly)(this,"_data",(0,l.arrayify)(e)),(0,L.defineReadOnly)(this,"wordSize",t||32),(0,L.defineReadOnly)(this,"_coerceFunc",r),(0,L.defineReadOnly)(this,"allowLoose",n),this._offset=0}}l=o("3Yhqu");var Ce={},ke=o("d5Ya9");
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */!function(){"use strict";var e="input is invalid type",r="object"==typeof window,n=r?window:{};n.JS_SHA3_NO_WINDOW&&(r=!1);var i=!r&&"object"==typeof self;!n.JS_SHA3_NO_NODE_JS&&"object"==typeof ke&&ke.versions&&ke.versions.node?n=t:i&&(n=self);var o=!n.JS_SHA3_NO_COMMON_JS&&Ce,s="function"==typeof define&&define.amd,a=!n.JS_SHA3_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,u="0123456789abcdef".split(""),c=[4,1024,262144,67108864],l=[0,8,16,24],h=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],f=[224,256,384,512],d=[128,256],p=["hex","buffer","arrayBuffer","array","digest"],g={128:168,256:136};!n.JS_SHA3_NO_NODE_JS&&Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),!a||!n.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(e){return"object"==typeof e&&e.buffer&&e.buffer.constructor===ArrayBuffer});for(var m=function(e,t,r){return function(n){return new N(e,t,e).update(n)[r]()}},y=function(e,t,r){return function(n,i){return new N(e,t,i).update(n)[r]()}},v=function(e,t,r){return function(t,n,i,o){return x["cshake"+e].update(t,n,i,o)[r]()}},w=function(e,t,r){return function(t,n,i,o){return x["kmac"+e].update(t,n,i,o)[r]()}},b=function(e,t,r,n){for(var i=0;i<p.length;++i){var o=p[i];e[o]=t(r,n,o)}return e},A=function(e,t){var r=m(e,t,"hex");return r.create=function(){return new N(e,t,e)},r.update=function(e){return r.create().update(e)},b(r,m,e,t)},E=[{name:"keccak",padding:[1,256,65536,16777216],bits:f,createMethod:A},{name:"sha3",padding:[6,1536,393216,100663296],bits:f,createMethod:A},{name:"shake",padding:[31,7936,2031616,520093696],bits:d,createMethod:function(e,t){var r=y(e,t,"hex");return r.create=function(r){return new N(e,t,r)},r.update=function(e,t){return r.create(t).update(e)},b(r,y,e,t)}},{name:"cshake",padding:c,bits:d,createMethod:function(e,t){var r=g[e],n=v(e,0,"hex");return n.create=function(n,i,o){return i||o?new N(e,t,n).bytepad([i,o],r):x["shake"+e].create(n)},n.update=function(e,t,r,i){return n.create(t,r,i).update(e)},b(n,v,e,t)}},{name:"kmac",padding:c,bits:d,createMethod:function(e,t){var r=g[e],n=w(e,0,"hex");return n.create=function(n,i,o){return new I(e,t,i).bytepad(["KMAC",o],r).bytepad([n],r)},n.update=function(e,t,r,i){return n.create(e,r,i).update(t)},b(n,w,e,t)}}],x={},S=[],C=0;C<E.length;++C)for(var k=E[C],_=k.bits,P=0;P<_.length;++P){var R=k.name+"_"+_[P];if(S.push(R),x[R]=k.createMethod(_[P],k.padding),"sha3"!==k.name){var O=k.name+_[P];S.push(O),x[O]=x[R]}}function N(e,t,r){this.blocks=[],this.s=[],this.padding=t,this.outputBits=r,this.reset=!0,this.finalized=!1,this.block=0,this.start=0,this.blockCount=1600-(e<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=r>>5,this.extraBytes=(31&r)>>3;for(var n=0;n<50;++n)this.s[n]=0}function I(e,t,r){N.call(this,e,t,r)}N.prototype.update=function(t){if(this.finalized)throw new Error("finalize already called");var r,n=typeof t;if("string"!==n){if("object"!==n)throw new Error(e);if(null===t)throw new Error(e);if(a&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||a&&ArrayBuffer.isView(t)))throw new Error(e);r=!0}for(var i,o,s=this.blocks,u=this.byteCount,c=t.length,h=this.blockCount,f=0,d=this.s;f<c;){if(this.reset)for(this.reset=!1,s[0]=this.block,i=1;i<h+1;++i)s[i]=0;if(r)for(i=this.start;f<c&&i<u;++f)s[i>>2]|=t[f]<<l[3&i++];else for(i=this.start;f<c&&i<u;++f)(o=t.charCodeAt(f))<128?s[i>>2]|=o<<l[3&i++]:o<2048?(s[i>>2]|=(192|o>>6)<<l[3&i++],s[i>>2]|=(128|63&o)<<l[3&i++]):o<55296||o>=57344?(s[i>>2]|=(224|o>>12)<<l[3&i++],s[i>>2]|=(128|o>>6&63)<<l[3&i++],s[i>>2]|=(128|63&o)<<l[3&i++]):(o=65536+((1023&o)<<10|1023&t.charCodeAt(++f)),s[i>>2]|=(240|o>>18)<<l[3&i++],s[i>>2]|=(128|o>>12&63)<<l[3&i++],s[i>>2]|=(128|o>>6&63)<<l[3&i++],s[i>>2]|=(128|63&o)<<l[3&i++]);if(this.lastByteIndex=i,i>=u){for(this.start=i-u,this.block=s[h],i=0;i<h;++i)d[i]^=s[i];T(d),this.reset=!0}else this.start=i}return this},N.prototype.encode=function(e,t){var r=255&e,n=1,i=[r];for(r=255&(e>>=8);r>0;)i.unshift(r),r=255&(e>>=8),++n;return t?i.push(n):i.unshift(n),this.update(i),i.length},N.prototype.encodeString=function(t){var r,n=typeof t;if("string"!==n){if("object"!==n)throw new Error(e);if(null===t)throw new Error(e);if(a&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||a&&ArrayBuffer.isView(t)))throw new Error(e);r=!0}var i=0,o=t.length;if(r)i=o;else for(var s=0;s<t.length;++s){var u=t.charCodeAt(s);u<128?i+=1:u<2048?i+=2:u<55296||u>=57344?i+=3:(u=65536+((1023&u)<<10|1023&t.charCodeAt(++s)),i+=4)}return i+=this.encode(8*i),this.update(t),i},N.prototype.bytepad=function(e,t){for(var r=this.encode(t),n=0;n<e.length;++n)r+=this.encodeString(e[n]);var i=t-r%t,o=[];return o.length=i,this.update(o),this},N.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var e=this.blocks,t=this.lastByteIndex,r=this.blockCount,n=this.s;if(e[t>>2]|=this.padding[3&t],this.lastByteIndex===this.byteCount)for(e[0]=e[r],t=1;t<r+1;++t)e[t]=0;for(e[r-1]|=2147483648,t=0;t<r;++t)n[t]^=e[t];T(n)}},N.prototype.toString=N.prototype.hex=function(){this.finalize();for(var e,t=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,o=0,s=0,a="";s<n;){for(o=0;o<t&&s<n;++o,++s)e=r[o],a+=u[e>>4&15]+u[15&e]+u[e>>12&15]+u[e>>8&15]+u[e>>20&15]+u[e>>16&15]+u[e>>28&15]+u[e>>24&15];s%t==0&&(T(r),o=0)}return i&&(e=r[o],a+=u[e>>4&15]+u[15&e],i>1&&(a+=u[e>>12&15]+u[e>>8&15]),i>2&&(a+=u[e>>20&15]+u[e>>16&15])),a},N.prototype.arrayBuffer=function(){this.finalize();var e,t=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,o=0,s=0,a=this.outputBits>>3;e=i?new ArrayBuffer(n+1<<2):new ArrayBuffer(a);for(var u=new Uint32Array(e);s<n;){for(o=0;o<t&&s<n;++o,++s)u[s]=r[o];s%t==0&&T(r)}return i&&(u[o]=r[o],e=e.slice(0,a)),e},N.prototype.buffer=N.prototype.arrayBuffer,N.prototype.digest=N.prototype.array=function(){this.finalize();for(var e,t,r=this.blockCount,n=this.s,i=this.outputBlocks,o=this.extraBytes,s=0,a=0,u=[];a<i;){for(s=0;s<r&&a<i;++s,++a)e=a<<2,t=n[s],u[e]=255&t,u[e+1]=t>>8&255,u[e+2]=t>>16&255,u[e+3]=t>>24&255;a%r==0&&T(n)}return o&&(e=a<<2,t=n[s],u[e]=255&t,o>1&&(u[e+1]=t>>8&255),o>2&&(u[e+2]=t>>16&255)),u},I.prototype=new N,I.prototype.finalize=function(){return this.encode(this.outputBits,!0),N.prototype.finalize.call(this)};var T=function(e){var t,r,n,i,o,s,a,u,c,l,f,d,p,g,m,y,v,w,b,A,E,x,S,C,k,_,P,R,O,N,I,T,M,B,F,L,D,j,U,z,q,K,G,W,H,J,V,Y,Q,Z,X,$,ee,te,re,ne,ie,oe,se,ae,ue,ce,le;for(n=0;n<48;n+=2)i=e[0]^e[10]^e[20]^e[30]^e[40],o=e[1]^e[11]^e[21]^e[31]^e[41],s=e[2]^e[12]^e[22]^e[32]^e[42],a=e[3]^e[13]^e[23]^e[33]^e[43],u=e[4]^e[14]^e[24]^e[34]^e[44],c=e[5]^e[15]^e[25]^e[35]^e[45],l=e[6]^e[16]^e[26]^e[36]^e[46],f=e[7]^e[17]^e[27]^e[37]^e[47],t=(d=e[8]^e[18]^e[28]^e[38]^e[48])^(s<<1|a>>>31),r=(p=e[9]^e[19]^e[29]^e[39]^e[49])^(a<<1|s>>>31),e[0]^=t,e[1]^=r,e[10]^=t,e[11]^=r,e[20]^=t,e[21]^=r,e[30]^=t,e[31]^=r,e[40]^=t,e[41]^=r,t=i^(u<<1|c>>>31),r=o^(c<<1|u>>>31),e[2]^=t,e[3]^=r,e[12]^=t,e[13]^=r,e[22]^=t,e[23]^=r,e[32]^=t,e[33]^=r,e[42]^=t,e[43]^=r,t=s^(l<<1|f>>>31),r=a^(f<<1|l>>>31),e[4]^=t,e[5]^=r,e[14]^=t,e[15]^=r,e[24]^=t,e[25]^=r,e[34]^=t,e[35]^=r,e[44]^=t,e[45]^=r,t=u^(d<<1|p>>>31),r=c^(p<<1|d>>>31),e[6]^=t,e[7]^=r,e[16]^=t,e[17]^=r,e[26]^=t,e[27]^=r,e[36]^=t,e[37]^=r,e[46]^=t,e[47]^=r,t=l^(i<<1|o>>>31),r=f^(o<<1|i>>>31),e[8]^=t,e[9]^=r,e[18]^=t,e[19]^=r,e[28]^=t,e[29]^=r,e[38]^=t,e[39]^=r,e[48]^=t,e[49]^=r,g=e[0],m=e[1],J=e[11]<<4|e[10]>>>28,V=e[10]<<4|e[11]>>>28,R=e[20]<<3|e[21]>>>29,O=e[21]<<3|e[20]>>>29,ae=e[31]<<9|e[30]>>>23,ue=e[30]<<9|e[31]>>>23,K=e[40]<<18|e[41]>>>14,G=e[41]<<18|e[40]>>>14,B=e[2]<<1|e[3]>>>31,F=e[3]<<1|e[2]>>>31,y=e[13]<<12|e[12]>>>20,v=e[12]<<12|e[13]>>>20,Y=e[22]<<10|e[23]>>>22,Q=e[23]<<10|e[22]>>>22,N=e[33]<<13|e[32]>>>19,I=e[32]<<13|e[33]>>>19,ce=e[42]<<2|e[43]>>>30,le=e[43]<<2|e[42]>>>30,te=e[5]<<30|e[4]>>>2,re=e[4]<<30|e[5]>>>2,L=e[14]<<6|e[15]>>>26,D=e[15]<<6|e[14]>>>26,w=e[25]<<11|e[24]>>>21,b=e[24]<<11|e[25]>>>21,Z=e[34]<<15|e[35]>>>17,X=e[35]<<15|e[34]>>>17,T=e[45]<<29|e[44]>>>3,M=e[44]<<29|e[45]>>>3,C=e[6]<<28|e[7]>>>4,k=e[7]<<28|e[6]>>>4,ne=e[17]<<23|e[16]>>>9,ie=e[16]<<23|e[17]>>>9,j=e[26]<<25|e[27]>>>7,U=e[27]<<25|e[26]>>>7,A=e[36]<<21|e[37]>>>11,E=e[37]<<21|e[36]>>>11,$=e[47]<<24|e[46]>>>8,ee=e[46]<<24|e[47]>>>8,W=e[8]<<27|e[9]>>>5,H=e[9]<<27|e[8]>>>5,_=e[18]<<20|e[19]>>>12,P=e[19]<<20|e[18]>>>12,oe=e[29]<<7|e[28]>>>25,se=e[28]<<7|e[29]>>>25,z=e[38]<<8|e[39]>>>24,q=e[39]<<8|e[38]>>>24,x=e[48]<<14|e[49]>>>18,S=e[49]<<14|e[48]>>>18,e[0]=g^~y&w,e[1]=m^~v&b,e[10]=C^~_&R,e[11]=k^~P&O,e[20]=B^~L&j,e[21]=F^~D&U,e[30]=W^~J&Y,e[31]=H^~V&Q,e[40]=te^~ne&oe,e[41]=re^~ie&se,e[2]=y^~w&A,e[3]=v^~b&E,e[12]=_^~R&N,e[13]=P^~O&I,e[22]=L^~j&z,e[23]=D^~U&q,e[32]=J^~Y&Z,e[33]=V^~Q&X,e[42]=ne^~oe&ae,e[43]=ie^~se&ue,e[4]=w^~A&x,e[5]=b^~E&S,e[14]=R^~N&T,e[15]=O^~I&M,e[24]=j^~z&K,e[25]=U^~q&G,e[34]=Y^~Z&$,e[35]=Q^~X&ee,e[44]=oe^~ae&ce,e[45]=se^~ue&le,e[6]=A^~x&g,e[7]=E^~S&m,e[16]=N^~T&C,e[17]=I^~M&k,e[26]=z^~K&B,e[27]=q^~G&F,e[36]=Z^~$&W,e[37]=X^~ee&H,e[46]=ae^~ce&te,e[47]=ue^~le&re,e[8]=x^~g&y,e[9]=S^~m&v,e[18]=T^~C&_,e[19]=M^~k&P,e[28]=K^~B&L,e[29]=G^~F&D,e[38]=$^~W&J,e[39]=ee^~H&V,e[48]=ce^~te&ne,e[49]=le^~re&ie,e[0]^=h[n],e[1]^=h[n+1]};if(o)Ce=x;else{for(C=0;C<S.length;++C)n[S[C]]=x[S[C]];s&&define((function(){return x}))}}();l=o("3Yhqu");function _e(e){return"0x"+r(Ce).keccak_256((0,l.arrayify)(e))}var Pe=o("7ZdUu");const Re=new(0,(h=o("2rINa")).Logger)("address/5.7.0");function Oe(e){(0,l.isHexString)(e,20)||Re.throwArgumentError("invalid address","address",e);const t=(e=e.toLowerCase()).substring(2).split(""),r=new Uint8Array(40);for(let e=0;e<40;e++)r[e]=t[e].charCodeAt(0);const n=(0,l.arrayify)(_e(r));for(let e=0;e<40;e+=2)n[e>>1]>>4>=8&&(t[e]=t[e].toUpperCase()),(15&n[e>>1])>=8&&(t[e+1]=t[e+1].toUpperCase());return"0x"+t.join("")}const Ne={};for(let e=0;e<10;e++)Ne[String(e)]=String(e);for(let e=0;e<26;e++)Ne[String.fromCharCode(65+e)]=String(10+e);const Ie=Math.floor((Te=9007199254740991,Math.log10?Math.log10(Te):Math.log(Te)/Math.LN10));var Te;function Me(e){let t=(e=(e=e.toUpperCase()).substring(4)+e.substring(0,2)+"00").split("").map((e=>Ne[e])).join("");for(;t.length>=Ie;){let e=t.substring(0,Ie);t=parseInt(e,10)%97+t.substring(e.length)}let r=String(98-parseInt(t,10)%97);for(;r.length<2;)r="0"+r;return r}function Be(e){let t=null;if("string"!=typeof e&&Re.throwArgumentError("invalid address","address",e),e.match(/^(0x)?[0-9a-fA-F]{40}$/))"0x"!==e.substring(0,2)&&(e="0x"+e),t=Oe(e),e.match(/([A-F].*[a-f])|([a-f].*[A-F])/)&&t!==e&&Re.throwArgumentError("bad address checksum","address",e);else if(e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){for(e.substring(2,4)!==Me(e)&&Re.throwArgumentError("bad icap checksum","address",e),r=e.substring(4),t=new d(r,36).toString(16);t.length<40;)t="0"+t;t=Oe("0x"+t)}else Re.throwArgumentError("invalid address","address",e);var r;return t}function Fe(e){try{return Be(e),!0}catch(e){}return!1}function Le(e){let t=(r=Be(e).substring(2),new d(r,16).toString(36)).toUpperCase();for(var r;t.length<30;)t="0"+t;return"XE"+Me("XE00"+t)+t}function De(e){let t=null;try{t=Be(e.from)}catch(t){Re.throwArgumentError("missing from address","transaction",e)}const r=(0,l.stripZeros)((0,l.arrayify)(w.from(e.nonce).toHexString()));return Be((0,l.hexDataSlice)(_e((0,Pe.encode)([t,r])),12))}function je(e,t,r){return 32!==(0,l.hexDataLength)(t)&&Re.throwArgumentError("salt must be 32 bytes","salt",t),32!==(0,l.hexDataLength)(r)&&Re.throwArgumentError("initCodeHash must be 32 bytes","initCodeHash",r),Be((0,l.hexDataSlice)(_e((0,l.concat)(["0xff",Be(e),t,r])),12))}l=o("3Yhqu");class Ue extends Ee{defaultValue(){return"0x0000000000000000000000000000000000000000"}encode(e,t){try{t=Be(t)}catch(e){this._throwError(e.message,t)}return e.writeValue(t)}decode(e){return Be((0,l.hexZeroPad)(e.readValue().toHexString(),20))}constructor(e){super("address","address",e,!1)}}h=o("2rINa");class ze extends Ee{defaultValue(){return this.coder.defaultValue()}encode(e,t){return this.coder.encode(e,t)}decode(e){return this.coder.decode(e)}constructor(e){super(e.name,e.type,void 0,e.dynamic),this.coder=e}}const qe=new(0,h.Logger)(Q);function Ke(e,t,r){let n=null;if(Array.isArray(r))n=r;else if(r&&"object"==typeof r){let e={};n=t.map((t=>{const n=t.localName;return n||qe.throwError("cannot encode object for signature with missing names",h.Logger.errors.INVALID_ARGUMENT,{argument:"values",coder:t,value:r}),e[n]&&qe.throwError("cannot encode object for signature with duplicate names",h.Logger.errors.INVALID_ARGUMENT,{argument:"values",coder:t,value:r}),e[n]=!0,r[n]}))}else qe.throwArgumentError("invalid tuple value","tuple",r);t.length!==n.length&&qe.throwArgumentError("types/value length mismatch","tuple",r);let i=new xe(e.wordSize),o=new xe(e.wordSize),s=[];t.forEach(((e,t)=>{let r=n[t];if(e.dynamic){let t=o.length;e.encode(o,r);let n=i.writeUpdatableValue();s.push((e=>{n(e+t)}))}else e.encode(i,r)})),s.forEach((e=>{e(i.length)}));let a=e.appendWriter(i);return a+=e.appendWriter(o),a}function Ge(e,t){let r=[],n=e.subReader(0);t.forEach((t=>{let i=null;if(t.dynamic){let r=e.readValue(),o=n.subReader(r.toNumber());try{i=t.decode(o)}catch(e){if(e.code===h.Logger.errors.BUFFER_OVERRUN)throw e;i=e,i.baseType=t.name,i.name=t.localName,i.type=t.type}}else try{i=t.decode(e)}catch(e){if(e.code===h.Logger.errors.BUFFER_OVERRUN)throw e;i=e,i.baseType=t.name,i.name=t.localName,i.type=t.type}null!=i&&r.push(i)}));const i=t.reduce(((e,t)=>{const r=t.localName;return r&&(e[r]||(e[r]=0),e[r]++),e}),{});t.forEach(((e,t)=>{let n=e.localName;if(!n||1!==i[n])return;if("length"===n&&(n="_length"),null!=r[n])return;const o=r[t];o instanceof Error?Object.defineProperty(r,n,{enumerable:!0,get:()=>{throw o}}):r[n]=o}));for(let e=0;e<r.length;e++){const t=r[e];t instanceof Error&&Object.defineProperty(r,e,{enumerable:!0,get:()=>{throw t}})}return Object.freeze(r)}class We extends Ee{defaultValue(){const e=this.coder.defaultValue(),t=[];for(let r=0;r<this.length;r++)t.push(e);return t}encode(e,t){Array.isArray(t)||this._throwError("expected array value",t);let r=this.length;-1===r&&(r=t.length,e.writeValue(t.length)),qe.checkArgumentCount(t.length,r,"coder array"+(this.localName?" "+this.localName:""));let n=[];for(let e=0;e<t.length;e++)n.push(this.coder);return Ke(e,n,t)}decode(e){let t=this.length;-1===t&&(t=e.readValue().toNumber(),32*t>e._data.length&&qe.throwError("insufficient data length",h.Logger.errors.BUFFER_OVERRUN,{length:e._data.length,count:t}));let r=[];for(let e=0;e<t;e++)r.push(new ze(this.coder));return e.coerce(this.name,Ge(e,r))}constructor(e,t,r){super("array",e.type+"["+(t>=0?t:"")+"]",r,-1===t||e.dynamic),this.coder=e,this.length=t}}class He extends Ee{defaultValue(){return!1}encode(e,t){return e.writeValue(t?1:0)}decode(e){return e.coerce(this.type,!e.readValue().isZero())}constructor(e){super("bool","bool",e,!1)}}l=o("3Yhqu");class Je extends Ee{defaultValue(){return"0x"}encode(e,t){t=(0,l.arrayify)(t);let r=e.writeValue(t.length);return r+=e.writeBytes(t),r}decode(e){return e.readBytes(e.readValue().toNumber(),!0)}constructor(e,t){super(e,e,t,!0)}}class Ve extends Je{decode(e){return e.coerce(this.name,(0,l.hexlify)(super.decode(e)))}constructor(e){super("bytes",e)}}l=o("3Yhqu");class Ye extends Ee{defaultValue(){return"0x0000000000000000000000000000000000000000000000000000000000000000".substring(0,2+2*this.size)}encode(e,t){let r=(0,l.arrayify)(t);return r.length!==this.size&&this._throwError("incorrect data length",t),e.writeBytes(r)}decode(e){return e.coerce(this.name,(0,l.hexlify)(e.readBytes(this.size)))}constructor(e,t){let r="bytes"+String(e);super(r,r,t,!1),this.size=e}}class Qe extends Ee{defaultValue(){return null}encode(e,t){return null!=t&&this._throwError("not null",t),e.writeBytes([])}decode(e){return e.readBytes(0),e.coerce(this.name,null)}constructor(e){super("null","",e,!1)}}var Ze={};e(Ze,"AddressZero",(function(){return Xe})),e(Ze,"NegativeOne",(function(){return $e})),e(Ze,"Zero",(function(){return et})),e(Ze,"One",(function(){return tt})),e(Ze,"Two",(function(){return rt})),e(Ze,"WeiPerEther",(function(){return nt})),e(Ze,"MaxUint256",(function(){return it})),e(Ze,"MinInt256",(function(){return ot})),e(Ze,"MaxInt256",(function(){return st})),e(Ze,"HashZero",(function(){return at})),e(Ze,"EtherSymbol",(function(){return ut}));const Xe="0x0000000000000000000000000000000000000000",$e=w.from(-1),et=w.from(0),tt=w.from(1),rt=w.from(2),nt=w.from("1000000000000000000"),it=w.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),ot=w.from("-0x8000000000000000000000000000000000000000000000000000000000000000"),st=w.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),at="0x0000000000000000000000000000000000000000000000000000000000000000",ut="Ξ";class ct extends Ee{defaultValue(){return 0}encode(e,t){let r=w.from(t),n=it.mask(8*e.wordSize);if(this.signed){let e=n.mask(8*this.size-1);(r.gt(e)||r.lt(e.add(tt).mul($e)))&&this._throwError("value out-of-bounds",t)}else(r.lt(et)||r.gt(n.mask(8*this.size)))&&this._throwError("value out-of-bounds",t);return r=r.toTwos(8*this.size).mask(8*this.size),this.signed&&(r=r.fromTwos(8*this.size).toTwos(8*e.wordSize)),e.writeValue(r)}decode(e){let t=e.readValue().mask(8*this.size);return this.signed&&(t=t.fromTwos(8*this.size)),e.coerce(this.name,t)}constructor(e,t,r){const n=(t?"int":"uint")+8*e;super(n,n,r,!1),this.size=e,this.signed=t}}l=o("3Yhqu"),l=o("3Yhqu");const lt=new(0,(h=o("2rINa")).Logger)("strings/5.7.0");var ht,ft,dt,pt;function gt(e,t,r,n,i){if(e===dt.BAD_PREFIX||e===dt.UNEXPECTED_CONTINUE){let e=0;for(let n=t+1;n<r.length&&r[n]>>6==2;n++)e++;return e}return e===dt.OVERRUN?r.length-t-1:0}(ft=ht||(ht={})).current="",ft.NFC="NFC",ft.NFD="NFD",ft.NFKC="NFKC",ft.NFKD="NFKD",(pt=dt||(dt={})).UNEXPECTED_CONTINUE="unexpected continuation byte",pt.BAD_PREFIX="bad codepoint prefix",pt.OVERRUN="string overrun",pt.MISSING_CONTINUE="missing continuation byte",pt.OUT_OF_RANGE="out of UTF-8 range",pt.UTF16_SURROGATE="UTF-16 surrogate",pt.OVERLONG="overlong representation";const mt=Object.freeze({error:function(e,t,r,n,i){return lt.throwArgumentError(`invalid codepoint at offset ${t}; ${e}`,"bytes",r)},ignore:gt,replace:function(e,t,r,n,i){return e===dt.OVERLONG?(n.push(i),0):(n.push(65533),gt(e,t,r))}});function yt(e,t){null==t&&(t=mt.error),e=(0,l.arrayify)(e);const r=[];let n=0;for(;n<e.length;){const i=e[n++];if(i>>7==0){r.push(i);continue}let o=null,s=null;if(192==(224&i))o=1,s=127;else if(224==(240&i))o=2,s=2047;else{if(240!=(248&i)){n+=t(128==(192&i)?dt.UNEXPECTED_CONTINUE:dt.BAD_PREFIX,n-1,e,r);continue}o=3,s=65535}if(n-1+o>=e.length){n+=t(dt.OVERRUN,n-1,e,r);continue}let a=i&(1<<8-o-1)-1;for(let i=0;i<o;i++){let i=e[n];if(128!=(192&i)){n+=t(dt.MISSING_CONTINUE,n,e,r),a=null;break}a=a<<6|63&i,n++}null!==a&&(a>1114111?n+=t(dt.OUT_OF_RANGE,n-1-o,e,r,a):a>=55296&&a<=57343?n+=t(dt.UTF16_SURROGATE,n-1-o,e,r,a):a<=s?n+=t(dt.OVERLONG,n-1-o,e,r,a):r.push(a))}return r}function vt(e,t=ht.current){t!=ht.current&&(lt.checkNormalize(),e=e.normalize(t));let r=[];for(let t=0;t<e.length;t++){const n=e.charCodeAt(t);if(n<128)r.push(n);else if(n<2048)r.push(n>>6|192),r.push(63&n|128);else if(55296==(64512&n)){t++;const i=e.charCodeAt(t);if(t>=e.length||56320!=(64512&i))throw new Error("invalid utf-8 string");const o=65536+((1023&n)<<10)+(1023&i);r.push(o>>18|240),r.push(o>>12&63|128),r.push(o>>6&63|128),r.push(63&o|128)}else r.push(n>>12|224),r.push(n>>6&63|128),r.push(63&n|128)}return(0,l.arrayify)(r)}function wt(e){const t="0000"+e.toString(16);return"\\u"+t.substring(t.length-4)}function bt(e,t){return'"'+yt(e,t).map((e=>{if(e<256){switch(e){case 8:return"\\b";case 9:return"\\t";case 10:return"\\n";case 13:return"\\r";case 34:return'\\"';case 92:return"\\\\"}if(e>=32&&e<127)return String.fromCharCode(e)}return e<=65535?wt(e):wt(55296+((e-=65536)>>10&1023))+wt(56320+(1023&e))})).join("")+'"'}function At(e){return e.map((e=>e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(55296+(e>>10&1023),56320+(1023&e))))).join("")}function Et(e,t){return At(yt(e,t))}function xt(e,t=ht.current){return yt(vt(e,t))}function St(e){const t=vt(e);if(t.length>31)throw new Error("bytes32 string must be less than 32 bytes");return(0,l.hexlify)((0,l.concat)([t,at]).slice(0,32))}function Ct(e){const t=(0,l.arrayify)(e);if(32!==t.length)throw new Error("invalid bytes32 - not 32 bytes long");if(0!==t[31])throw new Error("invalid bytes32 string - no null terminator");let r=31;for(;0===t[r-1];)r--;return Et(t.slice(0,r))}function kt(e,t){t||(t=function(e){return[parseInt(e,16)]});let r=0,n={};return e.split(",").forEach((e=>{let i=e.split(":");r+=parseInt(i[0],16),n[r]=t(i[1])})),n}function _t(e){let t=0;return e.split(",").map((e=>{let r=e.split("-");1===r.length?r[1]="0":""===r[1]&&(r[1]="1");let n=t+parseInt(r[0],16);return t=parseInt(r[1],16),{l:n,h:t}}))}function Pt(e,t){let r=0;for(let n=0;n<t.length;n++){let i=t[n];if(r+=i.l,e>=r&&e<=r+i.h&&(e-r)%(i.d||1)==0){if(i.e&&-1!==i.e.indexOf(e-r))continue;return i}}return null}const Rt=_t("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d"),Ot="ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((e=>parseInt(e,16))),Nt=[{h:25,s:32,l:65},{h:30,s:32,e:[23],l:127},{h:54,s:1,e:[48],l:64,d:2},{h:14,s:1,l:57,d:2},{h:44,s:1,l:17,d:2},{h:10,s:1,e:[2,6,8],l:61,d:2},{h:16,s:1,l:68,d:2},{h:84,s:1,e:[18,24,66],l:19,d:2},{h:26,s:32,e:[17],l:435},{h:22,s:1,l:71,d:2},{h:15,s:80,l:40},{h:31,s:32,l:16},{h:32,s:1,l:80,d:2},{h:52,s:1,l:42,d:2},{h:12,s:1,l:55,d:2},{h:40,s:1,e:[38],l:15,d:2},{h:14,s:1,l:48,d:2},{h:37,s:48,l:49},{h:148,s:1,l:6351,d:2},{h:88,s:1,l:160,d:2},{h:15,s:16,l:704},{h:25,s:26,l:854},{h:25,s:32,l:55915},{h:37,s:40,l:1247},{h:25,s:-119711,l:53248},{h:25,s:-119763,l:52},{h:25,s:-119815,l:52},{h:25,s:-119867,e:[1,4,5,7,8,11,12,17],l:52},{h:25,s:-119919,l:52},{h:24,s:-119971,e:[2,7,8,17],l:52},{h:24,s:-120023,e:[2,7,13,15,16,17],l:52},{h:25,s:-120075,l:52},{h:25,s:-120127,l:52},{h:25,s:-120179,l:52},{h:25,s:-120231,l:52},{h:25,s:-120283,l:52},{h:25,s:-120335,l:52},{h:24,s:-119543,e:[17],l:56},{h:24,s:-119601,e:[17],l:58},{h:24,s:-119659,e:[17],l:58},{h:24,s:-119717,e:[17],l:58},{h:24,s:-119775,e:[17],l:58}],It=kt("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3"),Tt=kt("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7"),Mt=kt("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D",(function(e){if(e.length%4!=0)throw new Error("bad data");let t=[];for(let r=0;r<e.length;r+=4)t.push(parseInt(e.substring(r,r+4),16));return t})),Bt=_t("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");function Ft(e){if(e.match(/^[a-z0-9-]*$/i)&&e.length<=59)return e.toLowerCase();let t=xt(e);var r;r=t.map((e=>{if(Ot.indexOf(e)>=0)return[];if(e>=65024&&e<=65039)return[];let t=function(e){let t=Pt(e,Nt);if(t)return[e+t.s];let r=It[e];if(r)return r;let n=Tt[e];return n?[e+n[0]]:Mt[e]||null}(e);return t||[e]})),t=r.reduce(((e,t)=>(t.forEach((t=>{e.push(t)})),e)),[]),t=xt(At(t),ht.NFKC),t.forEach((e=>{if(Pt(e,Bt))throw new Error("STRINGPREP_CONTAINS_PROHIBITED")})),t.forEach((e=>{if(Pt(e,Rt))throw new Error("STRINGPREP_CONTAINS_UNASSIGNED")}));let n=At(t);if("-"===n.substring(0,1)||"--"===n.substring(2,4)||"-"===n.substring(n.length-1))throw new Error("invalid hyphen");return n}class Lt extends Je{defaultValue(){return""}encode(e,t){return super.encode(e,vt(t))}decode(e){return Et(super.decode(e))}constructor(e){super("string",e)}}class Dt extends Ee{defaultValue(){const e=[];this.coders.forEach((t=>{e.push(t.defaultValue())}));const t=this.coders.reduce(((e,t)=>{const r=t.localName;return r&&(e[r]||(e[r]=0),e[r]++),e}),{});return this.coders.forEach(((r,n)=>{let i=r.localName;i&&1===t[i]&&("length"===i&&(i="_length"),null==e[i]&&(e[i]=e[n]))})),Object.freeze(e)}encode(e,t){return Ke(e,this.coders,t)}decode(e){return e.coerce(this.name,Ge(e,this.coders))}constructor(e,t){let r=!1;const n=[];e.forEach((e=>{e.dynamic&&(r=!0),n.push(e.type)}));super("tuple","tuple("+n.join(",")+")",t,r),this.coders=e}}const jt=new(0,h.Logger)(Q),Ut=new RegExp(/^bytes([0-9]*)$/),zt=new RegExp(/^(u?int)([0-9]*)$/);class qt{_getCoder(e){switch(e.baseType){case"address":return new Ue(e.name);case"bool":return new He(e.name);case"string":return new Lt(e.name);case"bytes":return new Ve(e.name);case"array":return new We(this._getCoder(e.arrayChildren),e.arrayLength,e.name);case"tuple":return new Dt((e.components||[]).map((e=>this._getCoder(e))),e.name);case"":return new Qe(e.name)}let t=e.type.match(zt);if(t){let r=parseInt(t[2]||"256");return(0===r||r>256||r%8!=0)&&jt.throwArgumentError("invalid "+t[1]+" bit length","param",e),new ct(r/8,"int"===t[1],e.name)}if(t=e.type.match(Ut),t){let r=parseInt(t[1]);return(0===r||r>32)&&jt.throwArgumentError("invalid bytes length","param",e),new Ye(r,e.name)}return jt.throwArgumentError("invalid type","type",e.type)}_getWordSize(){return 32}_getReader(e,t){return new Se(e,this._getWordSize(),this.coerceFunc,t)}_getWriter(){return new xe(this._getWordSize())}getDefaultValue(e){const t=e.map((e=>this._getCoder(oe.from(e))));return new Dt(t,"_").defaultValue()}encode(e,t){e.length!==t.length&&jt.throwError("types/values length mismatch",h.Logger.errors.INVALID_ARGUMENT,{count:{types:e.length,values:t.length},value:{types:e,values:t}});const r=e.map((e=>this._getCoder(oe.from(e)))),n=new Dt(r,"_"),i=this._getWriter();return n.encode(i,t),i.data}decode(e,t,r){const n=e.map((e=>this._getCoder(oe.from(e))));return new Dt(n,"_").decode(this._getReader((0,l.arrayify)(t),r))}constructor(e){(0,L.defineReadOnly)(this,"coerceFunc",e||null)}}const Kt=new qt;l=o("3Yhqu");function Gt(e){return _e(vt(e))}l=o("3Yhqu"),h=o("2rINa");const Wt="hash/5.7.0";function Ht(e,t){null==t&&(t=1);const r=[],n=r.forEach,i=function(e,t){n.call(e,(function(e){t>0&&Array.isArray(e)?i(e,t-1):r.push(e)}))};return i(e,t),r}function Jt(e){return function(e){let t=0;return()=>e[t++]}(function(e){let t=0;function r(){return e[t++]<<8|e[t++]}let n=r(),i=1,o=[0,1];for(let e=1;e<n;e++)o.push(i+=r());let s=r(),a=t;t+=s;let u=0,c=0;function l(){return 0==u&&(c=c<<8|e[t++],u=8),c>>--u&1}const h=Math.pow(2,31),f=h>>>1,d=f>>1,p=h-1;let g=0;for(let e=0;e<31;e++)g=g<<1|l();let m=[],y=0,v=h;for(;;){let e=Math.floor(((g-y+1)*i-1)/v),t=0,r=n;for(;r-t>1;){let n=t+r>>>1;e<o[n]?r=n:t=n}if(0==t)break;m.push(t);let s=y+Math.floor(v*o[t]/i),a=y+Math.floor(v*o[t+1]/i)-1;for(;0==((s^a)&f);)g=g<<1&p|l(),s=s<<1&p,a=a<<1&p|1;for(;s&~a&d;)g=g&f|g<<1&p>>>1|l(),s=s<<1^f,a=(a^f)<<1|f|1;y=s,v=1+a-s}let w=n-4;return m.map((t=>{switch(t-w){case 3:return w+65792+(e[a++]<<16|e[a++]<<8|e[a++]);case 2:return w+256+(e[a++]<<8|e[a++]);case 1:return w+e[a++];default:return t-1}}))}(e))}function Vt(e){return 1&e?~e>>1:e>>1}function Yt(e,t){let r=Array(e);for(let n=0,i=-1;n<e;n++)r[n]=i+=1+t();return r}function Qt(e,t){let r=Array(e);for(let n=0,i=0;n<e;n++)r[n]=i+=Vt(t());return r}function Zt(e,t){let r=Yt(e(),e),n=e(),i=Yt(n,e),o=function(e,t){let r=Array(e);for(let n=0;n<e;n++)r[n]=1+t();return r}(n,e);for(let e=0;e<n;e++)for(let t=0;t<o[e];t++)r.push(i[e]+t);return t?r.map((e=>t[e])):r}function Xt(e,t,r){let n=Array(e).fill(void 0).map((()=>[]));for(let i=0;i<t;i++)Qt(e,r).forEach(((e,t)=>n[t].push(e)));return n}function $t(e,t){let r=1+t(),n=t(),i=function(e){let t=[];for(;;){let r=e();if(0==r)break;t.push(r)}return t}(t);return Ht(Xt(i.length,1+e,t).map(((e,t)=>{const o=e[0],s=e.slice(1);return Array(i[t]).fill(void 0).map(((e,t)=>{let i=t*n;return[o+t*r,s.map((e=>e+i))]}))})))}function er(e,t){return Xt(1+t(),1+e,t).map((e=>[e[0],e.slice(1)]))}o("G6hN9");const tr=Jt((0,(rs=o("9fE0x")).decode)("")),rr=new Set(Zt(tr)),nr=new Set(Zt(tr)),ir=function(e){let t=[];for(;;){let r=e();if(0==r)break;t.push($t(r,e))}for(;;){let r=e()-1;if(r<0)break;t.push(er(r,e))}return function(e){const t={};for(let r=0;r<e.length;r++){const n=e[r];t[n[0]]=n[1]}return t}(Ht(t))}(tr),or=function(e){let t=Zt(e).sort(((e,t)=>e-t));return function r(){let n=[];for(;;){let i=Zt(e,t);if(0==i.length)break;n.push({set:new Set(i),node:r()})}n.sort(((e,t)=>t.set.size-e.set.size));let i=e(),o=i%3;i=i/3|0;let s=!!(1&i);return i>>=1,{branches:n,valid:o,fe0f:s,save:1==i,check:2==i}}()}(tr);function sr(e){return xt(e)}function ar(e){return e.filter((e=>65039!=e))}function ur(e){for(let t of e.split(".")){let e=sr(t);try{for(let t=e.lastIndexOf(95)-1;t>=0;t--)if(95!==e[t])throw new Error("underscore only allowed at start");if(e.length>=4&&e.every((e=>e<128))&&45===e[2]&&45===e[3])throw new Error("invalid label extension")}catch(e){throw new Error(`Invalid label "${t}": ${e.message}`)}}return e}function cr(e){return ur(function(e,t){let r=sr(e).reverse(),n=[];for(;r.length;){let e=lr(r);if(e){n.push(...t(e));continue}let i=r.pop();if(rr.has(i)){n.push(i);continue}if(nr.has(i))continue;let o=ir[i];if(!o)throw new Error(`Disallowed codepoint: 0x${i.toString(16).toUpperCase()}`);n.push(...o)}return ur((i=String.fromCodePoint(...n),i.normalize("NFC")));var i}(e,ar))}function lr(e,t){var r;let n,i,o=or,s=[],a=e.length;for(t&&(t.length=0);a;){let u=e[--a];if(o=null===(r=o.branches.find((e=>e.set.has(u))))||void 0===r?void 0:r.node,!o)break;if(o.save)i=u;else if(o.check&&u===i)break;s.push(u),o.fe0f&&(s.push(65039),a>0&&65039==e[a-1]&&a--),o.valid&&(n=s.slice(),2==o.valid&&n.splice(1,1),t&&t.push(...e.slice(a).reverse()),e.length=a)}return n}const hr=new(0,h.Logger)(Wt),fr=new Uint8Array(32);function dr(e){if(0===e.length)throw new Error("invalid ENS name; empty component");return e}function pr(e){const t=vt(cr(e)),r=[];if(0===e.length)return r;let n=0;for(let e=0;e<t.length;e++){46===t[e]&&(r.push(dr(t.slice(n,e))),n=e+1)}if(n>=t.length)throw new Error("invalid ENS name; empty component");return r.push(dr(t.slice(n))),r}function gr(e){try{return 0!==pr(e).length}catch(e){}return!1}function mr(e){"string"!=typeof e&&hr.throwArgumentError("invalid ENS name; not a string","name",e);let t=fr;const r=pr(e);for(;r.length;)t=_e((0,l.concat)([t,_e(r.pop())]));return(0,l.hexlify)(t)}function yr(e){return(0,l.hexlify)((0,l.concat)(pr(e).map((e=>{if(e.length>63)throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");const t=new Uint8Array(e.length+1);return t.set(e,1),t[0]=t.length-1,t}))))+"00"}fr.fill(0);l=o("3Yhqu");function vr(e){return"string"==typeof e&&(e=vt(e)),_e((0,l.concat)([vt("Ethereum Signed Message:\n"),vt(String(e.length)),e]))}var wr={};e(wr,"TypedDataEncoder",(function(){return Br}),(function(e){return Br=e}));l=o("3Yhqu"),h=o("2rINa");var br=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))};const Ar=new(0,h.Logger)(Wt),Er=new Uint8Array(32);Er.fill(0);const xr=w.from(-1),Sr=w.from(0),Cr=w.from(1),kr=w.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");const _r=(0,l.hexZeroPad)(Cr.toHexString(),32),Pr=(0,l.hexZeroPad)(Sr.toHexString(),32),Rr={name:"string",version:"string",chainId:"uint256",verifyingContract:"address",salt:"bytes32"},Or=["name","version","chainId","verifyingContract","salt"];function Nr(e){return function(t){return"string"!=typeof t&&Ar.throwArgumentError(`invalid domain value for ${JSON.stringify(e)}`,`domain.${e}`,t),t}}const Ir={name:Nr("name"),version:Nr("version"),chainId:function(e){try{return w.from(e).toString()}catch(e){}return Ar.throwArgumentError('invalid domain value for "chainId"',"domain.chainId",e)},verifyingContract:function(e){try{return Be(e).toLowerCase()}catch(e){}return Ar.throwArgumentError('invalid domain value "verifyingContract"',"domain.verifyingContract",e)},salt:function(e){try{const t=(0,l.arrayify)(e);if(32!==t.length)throw new Error("bad length");return(0,l.hexlify)(t)}catch(e){}return Ar.throwArgumentError('invalid domain value "salt"',"domain.salt",e)}};function Tr(e){{const t=e.match(/^(u?)int(\d*)$/);if(t){const r=""===t[1],n=parseInt(t[2]||"256");(n%8!=0||n>256||t[2]&&t[2]!==String(n))&&Ar.throwArgumentError("invalid numeric width","type",e);const i=kr.mask(r?n-1:n),o=r?i.add(Cr).mul(xr):Sr;return function(t){const r=w.from(t);return(r.lt(o)||r.gt(i))&&Ar.throwArgumentError(`value out-of-bounds for ${e}`,"value",t),(0,l.hexZeroPad)(r.toTwos(256).toHexString(),32)}}}{const t=e.match(/^bytes(\d+)$/);if(t){const r=parseInt(t[1]);return(0===r||r>32||t[1]!==String(r))&&Ar.throwArgumentError("invalid bytes width","type",e),function(t){return(0,l.arrayify)(t).length!==r&&Ar.throwArgumentError(`invalid length for ${e}`,"value",t),function(e){const t=(0,l.arrayify)(e),r=t.length%32;return r?(0,l.hexConcat)([t,Er.slice(r)]):(0,l.hexlify)(t)}(t)}}}switch(e){case"address":return function(e){return(0,l.hexZeroPad)(Be(e),32)};case"bool":return function(e){return e?_r:Pr};case"bytes":return function(e){return _e(e)};case"string":return function(e){return Gt(e)}}return null}function Mr(e,t){return`${e}(${t.map((({name:e,type:t})=>t+" "+e)).join(",")})`}class Br{getEncoder(e){let t=this._encoderCache[e];return t||(t=this._encoderCache[e]=this._getEncoder(e)),t}_getEncoder(e){{const t=Tr(e);if(t)return t}const t=e.match(/^(.*)(\x5b(\d*)\x5d)$/);if(t){const e=t[1],r=this.getEncoder(e),n=parseInt(t[3]);return t=>{n>=0&&t.length!==n&&Ar.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",t);let i=t.map(r);return this._types[e]&&(i=i.map(_e)),_e((0,l.hexConcat)(i))}}const r=this.types[e];if(r){const t=Gt(this._types[e]);return e=>{const n=r.map((({name:t,type:r})=>{const n=this.getEncoder(r)(e[t]);return this._types[r]?_e(n):n}));return n.unshift(t),(0,l.hexConcat)(n)}}return Ar.throwArgumentError(`unknown type: ${e}`,"type",e)}encodeType(e){const t=this._types[e];return t||Ar.throwArgumentError(`unknown type: ${JSON.stringify(e)}`,"name",e),t}encodeData(e,t){return this.getEncoder(e)(t)}hashStruct(e,t){return _e(this.encodeData(e,t))}encode(e){return this.encodeData(this.primaryType,e)}hash(e){return this.hashStruct(this.primaryType,e)}_visit(e,t,r){if(Tr(e))return r(e,t);const n=e.match(/^(.*)(\x5b(\d*)\x5d)$/);if(n){const e=n[1],i=parseInt(n[3]);return i>=0&&t.length!==i&&Ar.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",t),t.map((t=>this._visit(e,t,r)))}const i=this.types[e];return i?i.reduce(((e,{name:n,type:i})=>(e[n]=this._visit(i,t[n],r),e)),{}):Ar.throwArgumentError(`unknown type: ${e}`,"type",e)}visit(e,t){return this._visit(this.primaryType,e,t)}static from(e){return new Br(e)}static getPrimaryType(e){return Br.from(e).primaryType}static hashStruct(e,t,r){return Br.from(t).hashStruct(e,r)}static hashDomain(e){const t=[];for(const r in e){const n=Rr[r];n||Ar.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(r)}`,"domain",e),t.push({name:r,type:n})}return t.sort(((e,t)=>Or.indexOf(e.name)-Or.indexOf(t.name))),Br.hashStruct("EIP712Domain",{EIP712Domain:t},e)}static encode(e,t,r){return(0,l.hexConcat)(["0x1901",Br.hashDomain(e),Br.from(t).hash(r)])}static hash(e,t,r){return _e(Br.encode(e,t,r))}static resolveNames(e,t,r,n){return br(this,void 0,void 0,(function*(){e=(0,L.shallowCopy)(e);const i={};e.verifyingContract&&!(0,l.isHexString)(e.verifyingContract,20)&&(i[e.verifyingContract]="0x");const o=Br.from(t);o.visit(r,((e,t)=>("address"!==e||(0,l.isHexString)(t,20)||(i[t]="0x"),t)));for(const e in i)i[e]=yield n(e);return e.verifyingContract&&i[e.verifyingContract]&&(e.verifyingContract=i[e.verifyingContract]),r=o.visit(r,((e,t)=>"address"===e&&i[t]?i[t]:t)),{domain:e,value:r}}))}static getPayload(e,t,r){Br.hashDomain(e);const n={},i=[];Or.forEach((t=>{const r=e[t];null!=r&&(n[t]=Ir[t](r),i.push({name:t,type:Rr[t]}))}));const o=Br.from(t),s=(0,L.shallowCopy)(t);return s.EIP712Domain?Ar.throwArgumentError("types must not contain EIP712Domain type","types.EIP712Domain",t):s.EIP712Domain=i,o.encode(r),{types:s,domain:n,primaryType:o.primaryType,message:o.visit(r,((e,t)=>{if(e.match(/^bytes(\d*)/))return(0,l.hexlify)((0,l.arrayify)(t));if(e.match(/^u?int/))return w.from(t).toString();switch(e){case"address":return t.toLowerCase();case"bool":return!!t;case"string":return"string"!=typeof t&&Ar.throwArgumentError("invalid string","value",t),t}return Ar.throwArgumentError("unsupported type","type",e)}))}}constructor(e){(0,L.defineReadOnly)(this,"types",Object.freeze((0,L.deepCopy)(e))),(0,L.defineReadOnly)(this,"_encoderCache",{}),(0,L.defineReadOnly)(this,"_types",{});const t={},r={},n={};Object.keys(e).forEach((e=>{t[e]={},r[e]=[],n[e]={}}));for(const n in e){const i={};e[n].forEach((o=>{i[o.name]&&Ar.throwArgumentError(`duplicate variable name ${JSON.stringify(o.name)} in ${JSON.stringify(n)}`,"types",e),i[o.name]=!0;const s=o.type.match(/^([^\x5b]*)(\x5b|$)/)[1];s===n&&Ar.throwArgumentError(`circular type reference to ${JSON.stringify(s)}`,"types",e);Tr(s)||(r[s]||Ar.throwArgumentError(`unknown type ${JSON.stringify(s)}`,"types",e),r[s].push(n),t[n][s]=!0)}))}const i=Object.keys(r).filter((e=>0===r[e].length));0===i.length?Ar.throwArgumentError("missing primary type","types",e):i.length>1&&Ar.throwArgumentError(`ambiguous primary types or unused types: ${i.map((e=>JSON.stringify(e))).join(", ")}`,"types",e),(0,L.defineReadOnly)(this,"primaryType",i[0]),function i(o,s){s[o]&&Ar.throwArgumentError(`circular type reference to ${JSON.stringify(o)}`,"types",e),s[o]=!0,Object.keys(t[o]).forEach((e=>{r[e]&&(i(e,s),Object.keys(s).forEach((t=>{n[t][e]=!0})))})),delete s[o]}(this.primaryType,{});for(const t in n){const r=Object.keys(n[t]);r.sort(),this._types[t]=Mr(t,e[t])+r.map((t=>Mr(t,e[t]))).join("")}}}const Fr=new(0,(h=o("2rINa")).Logger)(Q);class Lr extends L.Description{}class Dr extends L.Description{}class jr extends L.Description{}class Ur extends L.Description{static isIndexed(e){return!(!e||!e._isIndexed)}}const zr={"0x08c379a0":{signature:"Error(string)",name:"Error",inputs:["string"],reason:!0},"0x4e487b71":{signature:"Panic(uint256)",name:"Panic",inputs:["uint256"]}};function qr(e,t){const r=new Error(`deferred error during ABI decoding triggered accessing ${e}`);return r.error=t,r}class Kr{format(e){e||(e=ne.full),e===ne.sighash&&Fr.throwArgumentError("interface does not support formatting sighash","format",e);const t=this.fragments.map((t=>t.format(e)));return e===ne.json?JSON.stringify(t.map((e=>JSON.parse(e)))):t}static getAbiCoder(){return Kt}static getAddress(e){return Be(e)}static getSighash(e){return(0,l.hexDataSlice)(Gt(e.format()),0,4)}static getEventTopic(e){return Gt(e.format())}getFunction(e){if((0,l.isHexString)(e)){for(const t in this.functions)if(e===this.getSighash(t))return this.functions[t];Fr.throwArgumentError("no matching function","sighash",e)}if(-1===e.indexOf("(")){const t=e.trim(),r=Object.keys(this.functions).filter((e=>e.split("(")[0]===t));return 0===r.length?Fr.throwArgumentError("no matching function","name",t):r.length>1&&Fr.throwArgumentError("multiple matching functions","name",t),this.functions[r[0]]}const t=this.functions[de.fromString(e).format()];return t||Fr.throwArgumentError("no matching function","signature",e),t}getEvent(e){if((0,l.isHexString)(e)){const t=e.toLowerCase();for(const e in this.events)if(t===this.getEventTopic(e))return this.events[e];Fr.throwArgumentError("no matching event","topichash",t)}if(-1===e.indexOf("(")){const t=e.trim(),r=Object.keys(this.events).filter((e=>e.split("(")[0]===t));return 0===r.length?Fr.throwArgumentError("no matching event","name",t):r.length>1&&Fr.throwArgumentError("multiple matching events","name",t),this.events[r[0]]}const t=this.events[ue.fromString(e).format()];return t||Fr.throwArgumentError("no matching event","signature",e),t}getError(e){if((0,l.isHexString)(e)){const t=(0,L.getStatic)(this.constructor,"getSighash");for(const r in this.errors){if(e===t(this.errors[r]))return this.errors[r]}Fr.throwArgumentError("no matching error","sighash",e)}if(-1===e.indexOf("(")){const t=e.trim(),r=Object.keys(this.errors).filter((e=>e.split("(")[0]===t));return 0===r.length?Fr.throwArgumentError("no matching error","name",t):r.length>1&&Fr.throwArgumentError("multiple matching errors","name",t),this.errors[r[0]]}const t=this.errors[de.fromString(e).format()];return t||Fr.throwArgumentError("no matching error","signature",e),t}getSighash(e){if("string"==typeof e)try{e=this.getFunction(e)}catch(t){try{e=this.getError(e)}catch(e){throw t}}return(0,L.getStatic)(this.constructor,"getSighash")(e)}getEventTopic(e){return"string"==typeof e&&(e=this.getEvent(e)),(0,L.getStatic)(this.constructor,"getEventTopic")(e)}_decodeParams(e,t){return this._abiCoder.decode(e,t)}_encodeParams(e,t){return this._abiCoder.encode(e,t)}encodeDeploy(e){return this._encodeParams(this.deploy.inputs,e||[])}decodeErrorResult(e,t){"string"==typeof e&&(e=this.getError(e));const r=(0,l.arrayify)(t);return(0,l.hexlify)(r.slice(0,4))!==this.getSighash(e)&&Fr.throwArgumentError(`data signature does not match error ${e.name}.`,"data",(0,l.hexlify)(r)),this._decodeParams(e.inputs,r.slice(4))}encodeErrorResult(e,t){return"string"==typeof e&&(e=this.getError(e)),(0,l.hexlify)((0,l.concat)([this.getSighash(e),this._encodeParams(e.inputs,t||[])]))}decodeFunctionData(e,t){"string"==typeof e&&(e=this.getFunction(e));const r=(0,l.arrayify)(t);return(0,l.hexlify)(r.slice(0,4))!==this.getSighash(e)&&Fr.throwArgumentError(`data signature does not match function ${e.name}.`,"data",(0,l.hexlify)(r)),this._decodeParams(e.inputs,r.slice(4))}encodeFunctionData(e,t){return"string"==typeof e&&(e=this.getFunction(e)),(0,l.hexlify)((0,l.concat)([this.getSighash(e),this._encodeParams(e.inputs,t||[])]))}decodeFunctionResult(e,t){"string"==typeof e&&(e=this.getFunction(e));let r=(0,l.arrayify)(t),n=null,i="",o=null,s=null,a=null;switch(r.length%this._abiCoder._getWordSize()){case 0:try{return this._abiCoder.decode(e.outputs,r)}catch(e){}break;case 4:{const e=(0,l.hexlify)(r.slice(0,4)),t=zr[e];if(t)o=this._abiCoder.decode(t.inputs,r.slice(4)),s=t.name,a=t.signature,t.reason&&(n=o[0]),"Error"===s?i=`; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(o[0])}`:"Panic"===s&&(i=`; VM Exception while processing transaction: reverted with panic code ${o[0]}`);else try{const t=this.getError(e);o=this._abiCoder.decode(t.inputs,r.slice(4)),s=t.name,a=t.format()}catch(e){}break}}return Fr.throwError("call revert exception"+i,h.Logger.errors.CALL_EXCEPTION,{method:e.format(),data:(0,l.hexlify)(t),errorArgs:o,errorName:s,errorSignature:a,reason:n})}encodeFunctionResult(e,t){return"string"==typeof e&&(e=this.getFunction(e)),(0,l.hexlify)(this._abiCoder.encode(e.outputs,t||[]))}encodeFilterTopics(e,t){"string"==typeof e&&(e=this.getEvent(e)),t.length>e.inputs.length&&Fr.throwError("too many arguments for "+e.format(),h.Logger.errors.UNEXPECTED_ARGUMENT,{argument:"values",value:t});let r=[];e.anonymous||r.push(this.getEventTopic(e));const n=(e,t)=>"string"===e.type?Gt(t):"bytes"===e.type?_e((0,l.hexlify)(t)):("bool"===e.type&&"boolean"==typeof t&&(t=t?"0x01":"0x00"),e.type.match(/^u?int/)&&(t=w.from(t).toHexString()),"address"===e.type&&this._abiCoder.encode(["address"],[t]),(0,l.hexZeroPad)((0,l.hexlify)(t),32));for(t.forEach(((t,i)=>{let o=e.inputs[i];o.indexed?null==t?r.push(null):"array"===o.baseType||"tuple"===o.baseType?Fr.throwArgumentError("filtering with tuples or arrays not supported","contract."+o.name,t):Array.isArray(t)?r.push(t.map((e=>n(o,e)))):r.push(n(o,t)):null!=t&&Fr.throwArgumentError("cannot filter non-indexed parameters; must be null","contract."+o.name,t)}));r.length&&null===r[r.length-1];)r.pop();return r}encodeEventLog(e,t){"string"==typeof e&&(e=this.getEvent(e));const r=[],n=[],i=[];return e.anonymous||r.push(this.getEventTopic(e)),t.length!==e.inputs.length&&Fr.throwArgumentError("event arguments/values mismatch","values",t),e.inputs.forEach(((e,o)=>{const s=t[o];if(e.indexed)if("string"===e.type)r.push(Gt(s));else if("bytes"===e.type)r.push(_e(s));else{if("tuple"===e.baseType||"array"===e.baseType)throw new Error("not implemented");r.push(this._abiCoder.encode([e.type],[s]))}else n.push(e),i.push(s)})),{data:this._abiCoder.encode(n,i),topics:r}}decodeEventLog(e,t,r){if("string"==typeof e&&(e=this.getEvent(e)),null!=r&&!e.anonymous){let t=this.getEventTopic(e);(0,l.isHexString)(r[0],32)&&r[0].toLowerCase()===t||Fr.throwError("fragment/topic mismatch",h.Logger.errors.INVALID_ARGUMENT,{argument:"topics[0]",expected:t,value:r[0]}),r=r.slice(1)}let n=[],i=[],o=[];e.inputs.forEach(((e,t)=>{e.indexed?"string"===e.type||"bytes"===e.type||"tuple"===e.baseType||"array"===e.baseType?(n.push(oe.fromObject({type:"bytes32",name:e.name})),o.push(!0)):(n.push(e),o.push(!1)):(i.push(e),o.push(!1))}));let s=null!=r?this._abiCoder.decode(n,(0,l.concat)(r)):null,a=this._abiCoder.decode(i,t,!0),u=[],c=0,f=0;e.inputs.forEach(((e,t)=>{if(e.indexed)if(null==s)u[t]=new Ur({_isIndexed:!0,hash:null});else if(o[t])u[t]=new Ur({_isIndexed:!0,hash:s[f++]});else try{u[t]=s[f++]}catch(e){u[t]=e}else try{u[t]=a[c++]}catch(e){u[t]=e}if(e.name&&null==u[e.name]){const r=u[t];r instanceof Error?Object.defineProperty(u,e.name,{enumerable:!0,get:()=>{throw qr(`property ${JSON.stringify(e.name)}`,r)}}):u[e.name]=r}}));for(let e=0;e<u.length;e++){const t=u[e];t instanceof Error&&Object.defineProperty(u,e,{enumerable:!0,get:()=>{throw qr(`index ${e}`,t)}})}return Object.freeze(u)}parseTransaction(e){let t=this.getFunction(e.data.substring(0,10).toLowerCase());return t?new Dr({args:this._abiCoder.decode(t.inputs,"0x"+e.data.substring(10)),functionFragment:t,name:t.name,signature:t.format(),sighash:this.getSighash(t),value:w.from(e.value||"0")}):null}parseLog(e){let t=this.getEvent(e.topics[0]);return!t||t.anonymous?null:new Lr({eventFragment:t,name:t.name,signature:t.format(),topic:this.getEventTopic(t),args:this.decodeEventLog(t,e.data,e.topics)})}parseError(e){const t=(0,l.hexlify)(e);let r=this.getError(t.substring(0,10).toLowerCase());return r?new jr({args:this._abiCoder.decode(r.inputs,"0x"+t.substring(10)),errorFragment:r,name:r.name,signature:r.format(),sighash:this.getSighash(r)}):null}static isInterface(e){return!(!e||!e._isInterface)}constructor(e){let t=[];t="string"==typeof e?JSON.parse(e):e,(0,L.defineReadOnly)(this,"fragments",t.map((e=>ae.from(e))).filter((e=>null!=e))),(0,L.defineReadOnly)(this,"_abiCoder",(0,L.getStatic)(new.target,"getAbiCoder")()),(0,L.defineReadOnly)(this,"functions",{}),(0,L.defineReadOnly)(this,"errors",{}),(0,L.defineReadOnly)(this,"events",{}),(0,L.defineReadOnly)(this,"structs",{}),this.fragments.forEach((e=>{let t=null;switch(e.type){case"constructor":return this.deploy?void Fr.warn("duplicate definition - constructor"):void(0,L.defineReadOnly)(this,"deploy",e);case"function":t=this.functions;break;case"event":t=this.events;break;case"error":t=this.errors;break;default:return}let r=e.format();t[r]?Fr.warn("duplicate definition - "+r):t[r]=e})),this.deploy||(0,L.defineReadOnly)(this,"deploy",fe.from({payable:!1,type:"constructor"})),(0,L.defineReadOnly)(this,"_isInterface",!0)}}var Gr={};e(Gr,"ForkEvent",(function(){return Jr}),(function(e){return Jr=e})),e(Gr,"Provider",(function(){return Vr}),(function(e){return Vr=e}));l=o("3Yhqu"),h=o("2rINa");var Wr=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))};const Hr=new(0,h.Logger)("abstract-provider/5.7.0");class Jr extends L.Description{static isForkEvent(e){return!(!e||!e._isForkEvent)}}class Vr{getFeeData(){return Wr(this,void 0,void 0,(function*(){const{block:e,gasPrice:t}=yield(0,L.resolveProperties)({block:this.getBlock("latest"),gasPrice:this.getGasPrice().catch((e=>null))});let r=null,n=null,i=null;return e&&e.baseFeePerGas&&(r=e.baseFeePerGas,i=w.from("1500000000"),n=e.baseFeePerGas.mul(2).add(i)),{lastBaseFeePerGas:r,maxFeePerGas:n,maxPriorityFeePerGas:i,gasPrice:t}}))}addListener(e,t){return this.on(e,t)}removeListener(e,t){return this.off(e,t)}static isProvider(e){return!(!e||!e._isProvider)}constructor(){Hr.checkAbstract(new.target,Vr),(0,L.defineReadOnly)(this,"_isProvider",!0)}}var Yr={};e(Yr,"Signer",(function(){return en}),(function(e){return en=e})),e(Yr,"VoidSigner",(function(){return tn}),(function(e){return tn=e}));h=o("2rINa");var Qr=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))};const Zr=new(0,h.Logger)("abstract-signer/5.7.0"),Xr=["accessList","ccipReadEnabled","chainId","customData","data","from","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","type","value"],$r=[h.Logger.errors.INSUFFICIENT_FUNDS,h.Logger.errors.NONCE_EXPIRED,h.Logger.errors.REPLACEMENT_UNDERPRICED];class en{getBalance(e){return Qr(this,void 0,void 0,(function*(){return this._checkProvider("getBalance"),yield this.provider.getBalance(this.getAddress(),e)}))}getTransactionCount(e){return Qr(this,void 0,void 0,(function*(){return this._checkProvider("getTransactionCount"),yield this.provider.getTransactionCount(this.getAddress(),e)}))}estimateGas(e){return Qr(this,void 0,void 0,(function*(){this._checkProvider("estimateGas");const t=yield(0,L.resolveProperties)(this.checkTransaction(e));return yield this.provider.estimateGas(t)}))}call(e,t){return Qr(this,void 0,void 0,(function*(){this._checkProvider("call");const r=yield(0,L.resolveProperties)(this.checkTransaction(e));return yield this.provider.call(r,t)}))}sendTransaction(e){return Qr(this,void 0,void 0,(function*(){this._checkProvider("sendTransaction");const t=yield this.populateTransaction(e),r=yield this.signTransaction(t);return yield this.provider.sendTransaction(r)}))}getChainId(){return Qr(this,void 0,void 0,(function*(){this._checkProvider("getChainId");return(yield this.provider.getNetwork()).chainId}))}getGasPrice(){return Qr(this,void 0,void 0,(function*(){return this._checkProvider("getGasPrice"),yield this.provider.getGasPrice()}))}getFeeData(){return Qr(this,void 0,void 0,(function*(){return this._checkProvider("getFeeData"),yield this.provider.getFeeData()}))}resolveName(e){return Qr(this,void 0,void 0,(function*(){return this._checkProvider("resolveName"),yield this.provider.resolveName(e)}))}checkTransaction(e){for(const t in e)-1===Xr.indexOf(t)&&Zr.throwArgumentError("invalid transaction key: "+t,"transaction",e);const t=(0,L.shallowCopy)(e);return null==t.from?t.from=this.getAddress():t.from=Promise.all([Promise.resolve(t.from),this.getAddress()]).then((t=>(t[0].toLowerCase()!==t[1].toLowerCase()&&Zr.throwArgumentError("from address mismatch","transaction",e),t[0]))),t}populateTransaction(e){return Qr(this,void 0,void 0,(function*(){const t=yield(0,L.resolveProperties)(this.checkTransaction(e));null!=t.to&&(t.to=Promise.resolve(t.to).then((e=>Qr(this,void 0,void 0,(function*(){if(null==e)return null;const t=yield this.resolveName(e);return null==t&&Zr.throwArgumentError("provided ENS name resolves to null","tx.to",e),t})))),t.to.catch((e=>{})));const r=null!=t.maxFeePerGas||null!=t.maxPriorityFeePerGas;if(null==t.gasPrice||2!==t.type&&!r?0!==t.type&&1!==t.type||!r||Zr.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas","transaction",e):Zr.throwArgumentError("eip-1559 transaction do not support gasPrice","transaction",e),2!==t.type&&null!=t.type||null==t.maxFeePerGas||null==t.maxPriorityFeePerGas)if(0===t.type||1===t.type)null==t.gasPrice&&(t.gasPrice=this.getGasPrice());else{const e=yield this.getFeeData();if(null==t.type)if(null!=e.maxFeePerGas&&null!=e.maxPriorityFeePerGas)if(t.type=2,null!=t.gasPrice){const e=t.gasPrice;delete t.gasPrice,t.maxFeePerGas=e,t.maxPriorityFeePerGas=e}else null==t.maxFeePerGas&&(t.maxFeePerGas=e.maxFeePerGas),null==t.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=e.maxPriorityFeePerGas);else null!=e.gasPrice?(r&&Zr.throwError("network does not support EIP-1559",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"populateTransaction"}),null==t.gasPrice&&(t.gasPrice=e.gasPrice),t.type=0):Zr.throwError("failed to get consistent fee data",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"signer.getFeeData"});else 2===t.type&&(null==t.maxFeePerGas&&(t.maxFeePerGas=e.maxFeePerGas),null==t.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=e.maxPriorityFeePerGas))}else t.type=2;return null==t.nonce&&(t.nonce=this.getTransactionCount("pending")),null==t.gasLimit&&(t.gasLimit=this.estimateGas(t).catch((e=>{if($r.indexOf(e.code)>=0)throw e;return Zr.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",h.Logger.errors.UNPREDICTABLE_GAS_LIMIT,{error:e,tx:t})}))),null==t.chainId?t.chainId=this.getChainId():t.chainId=Promise.all([Promise.resolve(t.chainId),this.getChainId()]).then((t=>(0!==t[1]&&t[0]!==t[1]&&Zr.throwArgumentError("chainId address mismatch","transaction",e),t[0]))),yield(0,L.resolveProperties)(t)}))}_checkProvider(e){this.provider||Zr.throwError("missing provider",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:e||"_checkProvider"})}static isSigner(e){return!(!e||!e._isSigner)}constructor(){Zr.checkAbstract(new.target,en),(0,L.defineReadOnly)(this,"_isSigner",!0)}}class tn extends en{getAddress(){return Promise.resolve(this.address)}_fail(e,t){return Promise.resolve().then((()=>{Zr.throwError(e,h.Logger.errors.UNSUPPORTED_OPERATION,{operation:t})}))}signMessage(e){return this._fail("VoidSigner cannot sign messages","signMessage")}signTransaction(e){return this._fail("VoidSigner cannot sign transactions","signTransaction")}_signTypedData(e,t,r){return this._fail("VoidSigner cannot sign typed data","signTypedData")}connect(e){return new tn(this.address,e)}constructor(e,t){super(),(0,L.defineReadOnly)(this,"address",e),(0,L.defineReadOnly)(this,"provider",t||null)}}l=o("3Yhqu"),l=o("3Yhqu"),Pe=o("7ZdUu"),c=o("jc6J8");var rn={},nn=rn;nn.utils=o("b38NR"),nn.common=o("dx0A1"),nn.sha=o("783N8"),nn.ripemd=o("j1ZCa"),nn.hmac=o("L28J4"),nn.sha1=nn.sha.sha1,nn.sha256=nn.sha.sha256,nn.sha224=nn.sha.sha224,nn.sha384=nn.sha.sha384,nn.sha512=nn.sha.sha512,nn.ripemd160=nn.ripemd.ripemd160;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t||"undefined"!=typeof self&&self;function on(e,t,r){return e(r={path:t,exports:{},require:function(e,t){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==t&&r.path)}},r.exports),r.exports}var sn=an;function an(e,t){if(!e)throw new Error(t||"Assertion failed")}an.equal=function(e,t,r){if(e!=t)throw new Error(r||"Assertion failed: "+e+" != "+t)};var un=on((function(e,t){"use strict";var r=t;function n(e){return 1===e.length?"0"+e:e}function i(e){for(var t="",r=0;r<e.length;r++)t+=n(e[r].toString(16));return t}r.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"!=typeof e){for(var n=0;n<e.length;n++)r[n]=0|e[n];return r}if("hex"===t){(e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e);for(n=0;n<e.length;n+=2)r.push(parseInt(e[n]+e[n+1],16))}else for(n=0;n<e.length;n++){var i=e.charCodeAt(n),o=i>>8,s=255&i;o?r.push(o,s):r.push(s)}return r},r.zero2=n,r.toHex=i,r.encode=function(e,t){return"hex"===t?i(e):e}})),cn=on((function(e,t){"use strict";var n=t;n.assert=sn,n.toArray=un.toArray,n.zero2=un.zero2,n.toHex=un.toHex,n.encode=un.encode,n.getNAF=function(e,t,r){var n=new Array(Math.max(e.bitLength(),r)+1);n.fill(0);for(var i=1<<t+1,o=e.clone(),s=0;s<n.length;s++){var a,u=o.andln(i-1);o.isOdd()?(a=u>(i>>1)-1?(i>>1)-u:u,o.isubn(a)):a=0,n[s]=a,o.iushrn(1)}return n},n.getJSF=function(e,t){var r=[[],[]];e=e.clone(),t=t.clone();for(var n,i=0,o=0;e.cmpn(-i)>0||t.cmpn(-o)>0;){var s,a,u=e.andln(3)+i&3,c=t.andln(3)+o&3;3===u&&(u=-1),3===c&&(c=-1),s=0==(1&u)?0:3!==(n=e.andln(7)+i&7)&&5!==n||2!==c?u:-u,r[0].push(s),a=0==(1&c)?0:3!==(n=t.andln(7)+o&7)&&5!==n||2!==u?c:-c,r[1].push(a),2*i===s+1&&(i=1-i),2*o===a+1&&(o=1-o),e.iushrn(1),t.iushrn(1)}return r},n.cachedProperty=function(e,t,r){var n="_"+t;e.prototype[t]=function(){return void 0!==this[n]?this[n]:this[n]=r.call(this)}},n.parseBytes=function(e){return"string"==typeof e?n.toArray(e,"hex"):e},n.intFromLE=function(e){return new(r(c))(e,"hex","le")}})),ln=cn.getNAF,hn=cn.getJSF,fn=cn.assert;function dn(e,t){this.type=e,this.p=new(r(c))(t.p,16),this.red=t.prime?r(c).red(t.prime):r(c).mont(this.p),this.zero=new(r(c))(0).toRed(this.red),this.one=new(r(c))(1).toRed(this.red),this.two=new(r(c))(2).toRed(this.red),this.n=t.n&&new(r(c))(t.n,16),this.g=t.g&&this.pointFromJSON(t.g,t.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4),this._bitLength=this.n?this.n.bitLength():0;var n=this.n&&this.p.div(this.n);!n||n.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}var pn=dn;function gn(e,t){this.curve=e,this.type=t,this.precomputed=null}dn.prototype.point=function(){throw new Error("Not implemented")},dn.prototype.validate=function(){throw new Error("Not implemented")},dn.prototype._fixedNafMul=function(e,t){fn(e.precomputed);var r=e._getDoubles(),n=ln(t,1,this._bitLength),i=(1<<r.step+1)-(r.step%2==0?2:1);i/=3;var o,s,a=[];for(o=0;o<n.length;o+=r.step){s=0;for(var u=o+r.step-1;u>=o;u--)s=(s<<1)+n[u];a.push(s)}for(var c=this.jpoint(null,null,null),l=this.jpoint(null,null,null),h=i;h>0;h--){for(o=0;o<a.length;o++)(s=a[o])===h?l=l.mixedAdd(r.points[o]):s===-h&&(l=l.mixedAdd(r.points[o].neg()));c=c.add(l)}return c.toP()},dn.prototype._wnafMul=function(e,t){var r=4,n=e._getNAFPoints(r);r=n.wnd;for(var i=n.points,o=ln(t,r,this._bitLength),s=this.jpoint(null,null,null),a=o.length-1;a>=0;a--){for(var u=0;a>=0&&0===o[a];a--)u++;if(a>=0&&u++,s=s.dblp(u),a<0)break;var c=o[a];fn(0!==c),s="affine"===e.type?c>0?s.mixedAdd(i[c-1>>1]):s.mixedAdd(i[-c-1>>1].neg()):c>0?s.add(i[c-1>>1]):s.add(i[-c-1>>1].neg())}return"affine"===e.type?s.toP():s},dn.prototype._wnafMulAdd=function(e,t,r,n,i){var o,s,a,u=this._wnafT1,c=this._wnafT2,l=this._wnafT3,h=0;for(o=0;o<n;o++){var f=(a=t[o])._getNAFPoints(e);u[o]=f.wnd,c[o]=f.points}for(o=n-1;o>=1;o-=2){var d=o-1,p=o;if(1===u[d]&&1===u[p]){var g=[t[d],null,null,t[p]];0===t[d].y.cmp(t[p].y)?(g[1]=t[d].add(t[p]),g[2]=t[d].toJ().mixedAdd(t[p].neg())):0===t[d].y.cmp(t[p].y.redNeg())?(g[1]=t[d].toJ().mixedAdd(t[p]),g[2]=t[d].add(t[p].neg())):(g[1]=t[d].toJ().mixedAdd(t[p]),g[2]=t[d].toJ().mixedAdd(t[p].neg()));var m=[-3,-1,-5,-7,0,7,5,1,3],y=hn(r[d],r[p]);for(h=Math.max(y[0].length,h),l[d]=new Array(h),l[p]=new Array(h),s=0;s<h;s++){var v=0|y[0][s],w=0|y[1][s];l[d][s]=m[3*(v+1)+(w+1)],l[p][s]=0,c[d]=g}}else l[d]=ln(r[d],u[d],this._bitLength),l[p]=ln(r[p],u[p],this._bitLength),h=Math.max(l[d].length,h),h=Math.max(l[p].length,h)}var b=this.jpoint(null,null,null),A=this._wnafT4;for(o=h;o>=0;o--){for(var E=0;o>=0;){var x=!0;for(s=0;s<n;s++)A[s]=0|l[s][o],0!==A[s]&&(x=!1);if(!x)break;E++,o--}if(o>=0&&E++,b=b.dblp(E),o<0)break;for(s=0;s<n;s++){var S=A[s];0!==S&&(S>0?a=c[s][S-1>>1]:S<0&&(a=c[s][-S-1>>1].neg()),b="affine"===a.type?b.mixedAdd(a):b.add(a))}}for(o=0;o<n;o++)c[o]=null;return i?b:b.toP()},dn.BasePoint=gn,gn.prototype.eq=function(){throw new Error("Not implemented")},gn.prototype.validate=function(){return this.curve.validate(this)},dn.prototype.decodePoint=function(e,t){e=cn.toArray(e,t);var r=this.p.byteLength();if((4===e[0]||6===e[0]||7===e[0])&&e.length-1==2*r)return 6===e[0]?fn(e[e.length-1]%2==0):7===e[0]&&fn(e[e.length-1]%2==1),this.point(e.slice(1,1+r),e.slice(1+r,1+2*r));if((2===e[0]||3===e[0])&&e.length-1===r)return this.pointFromX(e.slice(1,1+r),3===e[0]);throw new Error("Unknown point format")},gn.prototype.encodeCompressed=function(e){return this.encode(e,!0)},gn.prototype._encode=function(e){var t=this.curve.p.byteLength(),r=this.getX().toArray("be",t);return e?[this.getY().isEven()?2:3].concat(r):[4].concat(r,this.getY().toArray("be",t))},gn.prototype.encode=function(e,t){return cn.encode(this._encode(t),e)},gn.prototype.precompute=function(e){if(this.precomputed)return this;var t={doubles:null,naf:null,beta:null};return t.naf=this._getNAFPoints(8),t.doubles=this._getDoubles(4,e),t.beta=this._getBeta(),this.precomputed=t,this},gn.prototype._hasDoubles=function(e){if(!this.precomputed)return!1;var t=this.precomputed.doubles;return!!t&&t.points.length>=Math.ceil((e.bitLength()+1)/t.step)},gn.prototype._getDoubles=function(e,t){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var r=[this],n=this,i=0;i<t;i+=e){for(var o=0;o<e;o++)n=n.dbl();r.push(n)}return{step:e,points:r}},gn.prototype._getNAFPoints=function(e){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var t=[this],r=(1<<e)-1,n=1===r?null:this.dbl(),i=1;i<r;i++)t[i]=t[i-1].add(n);return{wnd:e,points:t}},gn.prototype._getBeta=function(){return null},gn.prototype.dblp=function(e){for(var t=this,r=0;r<e;r++)t=t.dbl();return t};var mn=on((function(e){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}})),yn=cn.assert;function vn(e){pn.call(this,"short",e),this.a=new(r(c))(e.a,16).toRed(this.red),this.b=new(r(c))(e.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(e),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}mn(vn,pn);var wn=vn;function bn(e,t,n,i){pn.BasePoint.call(this,e,"affine"),null===t&&null===n?(this.x=null,this.y=null,this.inf=!0):(this.x=new(r(c))(t,16),this.y=new(r(c))(n,16),i&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function An(e,t,n,i){pn.BasePoint.call(this,e,"jacobian"),null===t&&null===n&&null===i?(this.x=this.curve.one,this.y=this.curve.one,this.z=new(r(c))(0)):(this.x=new(r(c))(t,16),this.y=new(r(c))(n,16),this.z=new(r(c))(i,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}vn.prototype._getEndomorphism=function(e){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var t,n;if(e.beta)t=new(r(c))(e.beta,16).toRed(this.red);else{var i=this._getEndoRoots(this.p);t=(t=i[0].cmp(i[1])<0?i[0]:i[1]).toRed(this.red)}if(e.lambda)n=new(r(c))(e.lambda,16);else{var o=this._getEndoRoots(this.n);0===this.g.mul(o[0]).x.cmp(this.g.x.redMul(t))?n=o[0]:(n=o[1],yn(0===this.g.mul(n).x.cmp(this.g.x.redMul(t))))}return{beta:t,lambda:n,basis:e.basis?e.basis.map((function(e){return{a:new(r(c))(e.a,16),b:new(r(c))(e.b,16)}})):this._getEndoBasis(n)}}},vn.prototype._getEndoRoots=function(e){var t=e===this.p?this.red:r(c).mont(e),n=new(r(c))(2).toRed(t).redInvm(),i=n.redNeg(),o=new(r(c))(3).toRed(t).redNeg().redSqrt().redMul(n);return[i.redAdd(o).fromRed(),i.redSub(o).fromRed()]},vn.prototype._getEndoBasis=function(e){for(var t,n,i,o,s,a,u,l,h,f=this.n.ushrn(Math.floor(this.n.bitLength()/2)),d=e,p=this.n.clone(),g=new(r(c))(1),m=new(r(c))(0),y=new(r(c))(0),v=new(r(c))(1),w=0;0!==d.cmpn(0);){var b=p.div(d);l=p.sub(b.mul(d)),h=y.sub(b.mul(g));var A=v.sub(b.mul(m));if(!i&&l.cmp(f)<0)t=u.neg(),n=g,i=l.neg(),o=h;else if(i&&2==++w)break;u=l,p=d,d=l,y=g,g=h,v=m,m=A}s=l.neg(),a=h;var E=i.sqr().add(o.sqr());return s.sqr().add(a.sqr()).cmp(E)>=0&&(s=t,a=n),i.negative&&(i=i.neg(),o=o.neg()),s.negative&&(s=s.neg(),a=a.neg()),[{a:i,b:o},{a:s,b:a}]},vn.prototype._endoSplit=function(e){var t=this.endo.basis,r=t[0],n=t[1],i=n.b.mul(e).divRound(this.n),o=r.b.neg().mul(e).divRound(this.n),s=i.mul(r.a),a=o.mul(n.a),u=i.mul(r.b),c=o.mul(n.b);return{k1:e.sub(s).sub(a),k2:u.add(c).neg()}},vn.prototype.pointFromX=function(e,t){(e=new(r(c))(e,16)).red||(e=e.toRed(this.red));var n=e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),i=n.redSqrt();if(0!==i.redSqr().redSub(n).cmp(this.zero))throw new Error("invalid point");var o=i.fromRed().isOdd();return(t&&!o||!t&&o)&&(i=i.redNeg()),this.point(e,i)},vn.prototype.validate=function(e){if(e.inf)return!0;var t=e.x,r=e.y,n=this.a.redMul(t),i=t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);return 0===r.redSqr().redISub(i).cmpn(0)},vn.prototype._endoWnafMulAdd=function(e,t,r){for(var n=this._endoWnafT1,i=this._endoWnafT2,o=0;o<e.length;o++){var s=this._endoSplit(t[o]),a=e[o],u=a._getBeta();s.k1.negative&&(s.k1.ineg(),a=a.neg(!0)),s.k2.negative&&(s.k2.ineg(),u=u.neg(!0)),n[2*o]=a,n[2*o+1]=u,i[2*o]=s.k1,i[2*o+1]=s.k2}for(var c=this._wnafMulAdd(1,n,i,2*o,r),l=0;l<2*o;l++)n[l]=null,i[l]=null;return c},mn(bn,pn.BasePoint),vn.prototype.point=function(e,t,r){return new bn(this,e,t,r)},vn.prototype.pointFromJSON=function(e,t){return bn.fromJSON(this,e,t)},bn.prototype._getBeta=function(){if(this.curve.endo){var e=this.precomputed;if(e&&e.beta)return e.beta;var t=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(e){var r=this.curve,n=function(e){return r.point(e.x.redMul(r.endo.beta),e.y)};e.beta=t,t.precomputed={beta:null,naf:e.naf&&{wnd:e.naf.wnd,points:e.naf.points.map(n)},doubles:e.doubles&&{step:e.doubles.step,points:e.doubles.points.map(n)}}}return t}},bn.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},bn.fromJSON=function(e,t,r){"string"==typeof t&&(t=JSON.parse(t));var n=e.point(t[0],t[1],r);if(!t[2])return n;function i(t){return e.point(t[0],t[1],r)}var o=t[2];return n.precomputed={beta:null,doubles:o.doubles&&{step:o.doubles.step,points:[n].concat(o.doubles.points.map(i))},naf:o.naf&&{wnd:o.naf.wnd,points:[n].concat(o.naf.points.map(i))}},n},bn.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},bn.prototype.isInfinity=function(){return this.inf},bn.prototype.add=function(e){if(this.inf)return e;if(e.inf)return this;if(this.eq(e))return this.dbl();if(this.neg().eq(e))return this.curve.point(null,null);if(0===this.x.cmp(e.x))return this.curve.point(null,null);var t=this.y.redSub(e.y);0!==t.cmpn(0)&&(t=t.redMul(this.x.redSub(e.x).redInvm()));var r=t.redSqr().redISub(this.x).redISub(e.x),n=t.redMul(this.x.redSub(r)).redISub(this.y);return this.curve.point(r,n)},bn.prototype.dbl=function(){if(this.inf)return this;var e=this.y.redAdd(this.y);if(0===e.cmpn(0))return this.curve.point(null,null);var t=this.curve.a,r=this.x.redSqr(),n=e.redInvm(),i=r.redAdd(r).redIAdd(r).redIAdd(t).redMul(n),o=i.redSqr().redISub(this.x.redAdd(this.x)),s=i.redMul(this.x.redSub(o)).redISub(this.y);return this.curve.point(o,s)},bn.prototype.getX=function(){return this.x.fromRed()},bn.prototype.getY=function(){return this.y.fromRed()},bn.prototype.mul=function(e){return e=new(r(c))(e,16),this.isInfinity()?this:this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve.endo?this.curve._endoWnafMulAdd([this],[e]):this.curve._wnafMul(this,e)},bn.prototype.mulAdd=function(e,t,r){var n=[this,t],i=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i):this.curve._wnafMulAdd(1,n,i,2)},bn.prototype.jmulAdd=function(e,t,r){var n=[this,t],i=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i,!0):this.curve._wnafMulAdd(1,n,i,2,!0)},bn.prototype.eq=function(e){return this===e||this.inf===e.inf&&(this.inf||0===this.x.cmp(e.x)&&0===this.y.cmp(e.y))},bn.prototype.neg=function(e){if(this.inf)return this;var t=this.curve.point(this.x,this.y.redNeg());if(e&&this.precomputed){var r=this.precomputed,n=function(e){return e.neg()};t.precomputed={naf:r.naf&&{wnd:r.naf.wnd,points:r.naf.points.map(n)},doubles:r.doubles&&{step:r.doubles.step,points:r.doubles.points.map(n)}}}return t},bn.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},mn(An,pn.BasePoint),vn.prototype.jpoint=function(e,t,r){return new An(this,e,t,r)},An.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var e=this.z.redInvm(),t=e.redSqr(),r=this.x.redMul(t),n=this.y.redMul(t).redMul(e);return this.curve.point(r,n)},An.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},An.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var t=e.z.redSqr(),r=this.z.redSqr(),n=this.x.redMul(t),i=e.x.redMul(r),o=this.y.redMul(t.redMul(e.z)),s=e.y.redMul(r.redMul(this.z)),a=n.redSub(i),u=o.redSub(s);if(0===a.cmpn(0))return 0!==u.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var c=a.redSqr(),l=c.redMul(a),h=n.redMul(c),f=u.redSqr().redIAdd(l).redISub(h).redISub(h),d=u.redMul(h.redISub(f)).redISub(o.redMul(l)),p=this.z.redMul(e.z).redMul(a);return this.curve.jpoint(f,d,p)},An.prototype.mixedAdd=function(e){if(this.isInfinity())return e.toJ();if(e.isInfinity())return this;var t=this.z.redSqr(),r=this.x,n=e.x.redMul(t),i=this.y,o=e.y.redMul(t).redMul(this.z),s=r.redSub(n),a=i.redSub(o);if(0===s.cmpn(0))return 0!==a.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var u=s.redSqr(),c=u.redMul(s),l=r.redMul(u),h=a.redSqr().redIAdd(c).redISub(l).redISub(l),f=a.redMul(l.redISub(h)).redISub(i.redMul(c)),d=this.z.redMul(s);return this.curve.jpoint(h,f,d)},An.prototype.dblp=function(e){if(0===e)return this;if(this.isInfinity())return this;if(!e)return this.dbl();var t;if(this.curve.zeroA||this.curve.threeA){var r=this;for(t=0;t<e;t++)r=r.dbl();return r}var n=this.curve.a,i=this.curve.tinv,o=this.x,s=this.y,a=this.z,u=a.redSqr().redSqr(),c=s.redAdd(s);for(t=0;t<e;t++){var l=o.redSqr(),h=c.redSqr(),f=h.redSqr(),d=l.redAdd(l).redIAdd(l).redIAdd(n.redMul(u)),p=o.redMul(h),g=d.redSqr().redISub(p.redAdd(p)),m=p.redISub(g),y=d.redMul(m);y=y.redIAdd(y).redISub(f);var v=c.redMul(a);t+1<e&&(u=u.redMul(f)),o=g,a=v,c=y}return this.curve.jpoint(o,c.redMul(i),a)},An.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},An.prototype._zeroDbl=function(){var e,t,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),s=this.x.redAdd(i).redSqr().redISub(n).redISub(o);s=s.redIAdd(s);var a=n.redAdd(n).redIAdd(n),u=a.redSqr().redISub(s).redISub(s),c=o.redIAdd(o);c=(c=c.redIAdd(c)).redIAdd(c),e=u,t=a.redMul(s.redISub(u)).redISub(c),r=this.y.redAdd(this.y)}else{var l=this.x.redSqr(),h=this.y.redSqr(),f=h.redSqr(),d=this.x.redAdd(h).redSqr().redISub(l).redISub(f);d=d.redIAdd(d);var p=l.redAdd(l).redIAdd(l),g=p.redSqr(),m=f.redIAdd(f);m=(m=m.redIAdd(m)).redIAdd(m),e=g.redISub(d).redISub(d),t=p.redMul(d.redISub(e)).redISub(m),r=(r=this.y.redMul(this.z)).redIAdd(r)}return this.curve.jpoint(e,t,r)},An.prototype._threeDbl=function(){var e,t,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),s=this.x.redAdd(i).redSqr().redISub(n).redISub(o);s=s.redIAdd(s);var a=n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),u=a.redSqr().redISub(s).redISub(s);e=u;var c=o.redIAdd(o);c=(c=c.redIAdd(c)).redIAdd(c),t=a.redMul(s.redISub(u)).redISub(c),r=this.y.redAdd(this.y)}else{var l=this.z.redSqr(),h=this.y.redSqr(),f=this.x.redMul(h),d=this.x.redSub(l).redMul(this.x.redAdd(l));d=d.redAdd(d).redIAdd(d);var p=f.redIAdd(f),g=(p=p.redIAdd(p)).redAdd(p);e=d.redSqr().redISub(g),r=this.y.redAdd(this.z).redSqr().redISub(h).redISub(l);var m=h.redSqr();m=(m=(m=m.redIAdd(m)).redIAdd(m)).redIAdd(m),t=d.redMul(p.redISub(e)).redISub(m)}return this.curve.jpoint(e,t,r)},An.prototype._dbl=function(){var e=this.curve.a,t=this.x,r=this.y,n=this.z,i=n.redSqr().redSqr(),o=t.redSqr(),s=r.redSqr(),a=o.redAdd(o).redIAdd(o).redIAdd(e.redMul(i)),u=t.redAdd(t),c=(u=u.redIAdd(u)).redMul(s),l=a.redSqr().redISub(c.redAdd(c)),h=c.redISub(l),f=s.redSqr();f=(f=(f=f.redIAdd(f)).redIAdd(f)).redIAdd(f);var d=a.redMul(h).redISub(f),p=r.redAdd(r).redMul(n);return this.curve.jpoint(l,d,p)},An.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var e=this.x.redSqr(),t=this.y.redSqr(),r=this.z.redSqr(),n=t.redSqr(),i=e.redAdd(e).redIAdd(e),o=i.redSqr(),s=this.x.redAdd(t).redSqr().redISub(e).redISub(n),a=(s=(s=(s=s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(o)).redSqr(),u=n.redIAdd(n);u=(u=(u=u.redIAdd(u)).redIAdd(u)).redIAdd(u);var c=i.redIAdd(s).redSqr().redISub(o).redISub(a).redISub(u),l=t.redMul(c);l=(l=l.redIAdd(l)).redIAdd(l);var h=this.x.redMul(a).redISub(l);h=(h=h.redIAdd(h)).redIAdd(h);var f=this.y.redMul(c.redMul(u.redISub(c)).redISub(s.redMul(a)));f=(f=(f=f.redIAdd(f)).redIAdd(f)).redIAdd(f);var d=this.z.redAdd(s).redSqr().redISub(r).redISub(a);return this.curve.jpoint(h,f,d)},An.prototype.mul=function(e,t){return e=new(r(c))(e,t),this.curve._wnafMul(this,e)},An.prototype.eq=function(e){if("affine"===e.type)return this.eq(e.toJ());if(this===e)return!0;var t=this.z.redSqr(),r=e.z.redSqr();if(0!==this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0))return!1;var n=t.redMul(this.z),i=r.redMul(e.z);return 0===this.y.redMul(i).redISub(e.y.redMul(n)).cmpn(0)},An.prototype.eqXToP=function(e){var t=this.z.redSqr(),r=e.toRed(this.curve.red).redMul(t);if(0===this.x.cmp(r))return!0;for(var n=e.clone(),i=this.curve.redN.redMul(t);;){if(n.iadd(this.curve.n),n.cmp(this.curve.p)>=0)return!1;if(r.redIAdd(i),0===this.x.cmp(r))return!0}},An.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},An.prototype.isInfinity=function(){return 0===this.z.cmpn(0)};var En=on((function(e,t){"use strict";var r=t;r.base=pn,r.short=wn,r.mont=null,r.edwards=null})),xn=on((function(e,t){"use strict";var n,i=t,o=cn.assert;function s(e){"short"===e.type?this.curve=new En.short(e):"edwards"===e.type?this.curve=new En.edwards(e):this.curve=new En.mont(e),this.g=this.curve.g,this.n=this.curve.n,this.hash=e.hash,o(this.g.validate(),"Invalid curve"),o(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function a(e,t){Object.defineProperty(i,e,{configurable:!0,enumerable:!0,get:function(){var r=new s(t);return Object.defineProperty(i,e,{configurable:!0,enumerable:!0,value:r}),r}})}i.PresetCurve=s,a("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:r(rn).sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),a("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:r(rn).sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),a("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:r(rn).sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),a("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:r(rn).sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),a("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:r(rn).sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),a("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:r(rn).sha256,gRed:!1,g:["9"]}),a("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:r(rn).sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{n=null.crash()}catch(e){n=void 0}a("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:r(rn).sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",n]})}));function Sn(e){if(!(this instanceof Sn))return new Sn(e);this.hash=e.hash,this.predResist=!!e.predResist,this.outLen=this.hash.outSize,this.minEntropy=e.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var t=un.toArray(e.entropy,e.entropyEnc||"hex"),r=un.toArray(e.nonce,e.nonceEnc||"hex"),n=un.toArray(e.pers,e.persEnc||"hex");sn(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(t,r,n)}var Cn=Sn;Sn.prototype._init=function(e,t,r){var n=e.concat(t).concat(r);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var i=0;i<this.V.length;i++)this.K[i]=0,this.V[i]=1;this._update(n),this._reseed=1,this.reseedInterval=281474976710656},Sn.prototype._hmac=function(){return new(r(rn).hmac)(this.hash,this.K)},Sn.prototype._update=function(e){var t=this._hmac().update(this.V).update([0]);e&&(t=t.update(e)),this.K=t.digest(),this.V=this._hmac().update(this.V).digest(),e&&(this.K=this._hmac().update(this.V).update([1]).update(e).digest(),this.V=this._hmac().update(this.V).digest())},Sn.prototype.reseed=function(e,t,r,n){"string"!=typeof t&&(n=r,r=t,t=null),e=un.toArray(e,t),r=un.toArray(r,n),sn(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(e.concat(r||[])),this._reseed=1},Sn.prototype.generate=function(e,t,r,n){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof t&&(n=r,r=t,t=null),r&&(r=un.toArray(r,n||"hex"),this._update(r));for(var i=[];i.length<e;)this.V=this._hmac().update(this.V).digest(),i=i.concat(this.V);var o=i.slice(0,e);return this._update(r),this._reseed++,un.encode(o,t)};var kn=cn.assert;function _n(e,t){this.ec=e,this.priv=null,this.pub=null,t.priv&&this._importPrivate(t.priv,t.privEnc),t.pub&&this._importPublic(t.pub,t.pubEnc)}var Pn=_n;_n.fromPublic=function(e,t,r){return t instanceof _n?t:new _n(e,{pub:t,pubEnc:r})},_n.fromPrivate=function(e,t,r){return t instanceof _n?t:new _n(e,{priv:t,privEnc:r})},_n.prototype.validate=function(){var e=this.getPublic();return e.isInfinity()?{result:!1,reason:"Invalid public key"}:e.validate()?e.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},_n.prototype.getPublic=function(e,t){return"string"==typeof e&&(t=e,e=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),t?this.pub.encode(t,e):this.pub},_n.prototype.getPrivate=function(e){return"hex"===e?this.priv.toString(16,2):this.priv},_n.prototype._importPrivate=function(e,t){this.priv=new(r(c))(e,t||16),this.priv=this.priv.umod(this.ec.curve.n)},_n.prototype._importPublic=function(e,t){if(e.x||e.y)return"mont"===this.ec.curve.type?kn(e.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||kn(e.x&&e.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(e.x,e.y));this.pub=this.ec.curve.decodePoint(e,t)},_n.prototype.derive=function(e){return e.validate()||kn(e.validate(),"public point not validated"),e.mul(this.priv).getX()},_n.prototype.sign=function(e,t,r){return this.ec.sign(e,this,t,r)},_n.prototype.verify=function(e,t){return this.ec.verify(e,t,this)},_n.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"};var Rn=cn.assert;function On(e,t){if(e instanceof On)return e;this._importDER(e,t)||(Rn(e.r&&e.s,"Signature without r or s"),this.r=new(r(c))(e.r,16),this.s=new(r(c))(e.s,16),void 0===e.recoveryParam?this.recoveryParam=null:this.recoveryParam=e.recoveryParam)}var Nn=On;function In(){this.place=0}function Tn(e,t){var r=e[t.place++];if(!(128&r))return r;var n=15&r;if(0===n||n>4)return!1;for(var i=0,o=0,s=t.place;o<n;o++,s++)i<<=8,i|=e[s],i>>>=0;return!(i<=127)&&(t.place=s,i)}function Mn(e){for(var t=0,r=e.length-1;!e[t]&&!(128&e[t+1])&&t<r;)t++;return 0===t?e:e.slice(t)}function Bn(e,t){if(t<128)e.push(t);else{var r=1+(Math.log(t)/Math.LN2>>>3);for(e.push(128|r);--r;)e.push(t>>>(r<<3)&255);e.push(t)}}On.prototype._importDER=function(e,t){e=cn.toArray(e,t);var n=new In;if(48!==e[n.place++])return!1;var i=Tn(e,n);if(!1===i)return!1;if(i+n.place!==e.length)return!1;if(2!==e[n.place++])return!1;var o=Tn(e,n);if(!1===o)return!1;var s=e.slice(n.place,o+n.place);if(n.place+=o,2!==e[n.place++])return!1;var a=Tn(e,n);if(!1===a)return!1;if(e.length!==a+n.place)return!1;var u=e.slice(n.place,a+n.place);if(0===s[0]){if(!(128&s[1]))return!1;s=s.slice(1)}if(0===u[0]){if(!(128&u[1]))return!1;u=u.slice(1)}return this.r=new(r(c))(s),this.s=new(r(c))(u),this.recoveryParam=null,!0},On.prototype.toDER=function(e){var t=this.r.toArray(),r=this.s.toArray();for(128&t[0]&&(t=[0].concat(t)),128&r[0]&&(r=[0].concat(r)),t=Mn(t),r=Mn(r);!(r[0]||128&r[1]);)r=r.slice(1);var n=[2];Bn(n,t.length),(n=n.concat(t)).push(2),Bn(n,r.length);var i=n.concat(r),o=[48];return Bn(o,i.length),o=o.concat(i),cn.encode(o,e)};var Fn=function(){throw new Error("unsupported")},Ln=cn.assert;function Dn(e){if(!(this instanceof Dn))return new Dn(e);"string"==typeof e&&(Ln(Object.prototype.hasOwnProperty.call(xn,e),"Unknown curve "+e),e=xn[e]),e instanceof xn.PresetCurve&&(e={curve:e}),this.curve=e.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=e.curve.g,this.g.precompute(e.curve.n.bitLength()+1),this.hash=e.hash||e.curve.hash}var jn=Dn;Dn.prototype.keyPair=function(e){return new Pn(this,e)},Dn.prototype.keyFromPrivate=function(e,t){return Pn.fromPrivate(this,e,t)},Dn.prototype.keyFromPublic=function(e,t){return Pn.fromPublic(this,e,t)},Dn.prototype.genKeyPair=function(e){e||(e={});for(var t=new Cn({hash:this.hash,pers:e.pers,persEnc:e.persEnc||"utf8",entropy:e.entropy||Fn(this.hash.hmacStrength),entropyEnc:e.entropy&&e.entropyEnc||"utf8",nonce:this.n.toArray()}),n=this.n.byteLength(),i=this.n.sub(new(r(c))(2));;){var o=new(r(c))(t.generate(n));if(!(o.cmp(i)>0))return o.iaddn(1),this.keyFromPrivate(o)}},Dn.prototype._truncateToN=function(e,t){var r=8*e.byteLength()-this.n.bitLength();return r>0&&(e=e.ushrn(r)),!t&&e.cmp(this.n)>=0?e.sub(this.n):e},Dn.prototype.sign=function(e,t,n,i){"object"==typeof n&&(i=n,n=null),i||(i={}),t=this.keyFromPrivate(t,n),e=this._truncateToN(new(r(c))(e,16));for(var o=this.n.byteLength(),s=t.getPrivate().toArray("be",o),a=e.toArray("be",o),u=new Cn({hash:this.hash,entropy:s,nonce:a,pers:i.pers,persEnc:i.persEnc||"utf8"}),l=this.n.sub(new(r(c))(1)),h=0;;h++){var f=i.k?i.k(h):new(r(c))(u.generate(this.n.byteLength()));if(!((f=this._truncateToN(f,!0)).cmpn(1)<=0||f.cmp(l)>=0)){var d=this.g.mul(f);if(!d.isInfinity()){var p=d.getX(),g=p.umod(this.n);if(0!==g.cmpn(0)){var m=f.invm(this.n).mul(g.mul(t.getPrivate()).iadd(e));if(0!==(m=m.umod(this.n)).cmpn(0)){var y=(d.getY().isOdd()?1:0)|(0!==p.cmp(g)?2:0);return i.canonical&&m.cmp(this.nh)>0&&(m=this.n.sub(m),y^=1),new Nn({r:g,s:m,recoveryParam:y})}}}}}},Dn.prototype.verify=function(e,t,n,i){e=this._truncateToN(new(r(c))(e,16)),n=this.keyFromPublic(n,i);var o=(t=new Nn(t,"hex")).r,s=t.s;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;if(s.cmpn(1)<0||s.cmp(this.n)>=0)return!1;var a,u=s.invm(this.n),l=u.mul(e).umod(this.n),h=u.mul(o).umod(this.n);return this.curve._maxwellTrick?!(a=this.g.jmulAdd(l,n.getPublic(),h)).isInfinity()&&a.eqXToP(o):!(a=this.g.mulAdd(l,n.getPublic(),h)).isInfinity()&&0===a.getX().umod(this.n).cmp(o)},Dn.prototype.recoverPubKey=function(e,t,n,i){Ln((3&n)===n,"The recovery param is more than two bits"),t=new Nn(t,i);var o=this.n,s=new(r(c))(e),a=t.r,u=t.s,l=1&n,h=n>>1;if(a.cmp(this.curve.p.umod(this.curve.n))>=0&&h)throw new Error("Unable to find sencond key candinate");a=h?this.curve.pointFromX(a.add(this.curve.n),l):this.curve.pointFromX(a,l);var f=t.r.invm(o),d=o.sub(s).mul(f).umod(o),p=u.mul(f).umod(o);return this.g.mulAdd(d,a,p)},Dn.prototype.getKeyRecoveryParam=function(e,t,r,n){if(null!==(t=new Nn(t,n)).recoveryParam)return t.recoveryParam;for(var i=0;i<4;i++){var o;try{o=this.recoverPubKey(e,t,i)}catch(e){continue}if(o.eq(r))return i}throw new Error("Unable to find valid recovery factor")};var Un=on((function(e,t){"use strict";var r=t;r.version="6.5.4",r.utils=cn,r.rand=function(){throw new Error("unsupported")},r.curve=En,r.curves=xn,r.ec=jn,r.eddsa=null})).ec;l=o("3Yhqu");const zn=new(0,(h=o("2rINa")).Logger)("signing-key/5.7.0");let qn=null;function Kn(){return qn||(qn=new Un("secp256k1")),qn}class Gn{_addPoint(e){const t=Kn().keyFromPublic((0,l.arrayify)(this.publicKey)),r=Kn().keyFromPublic((0,l.arrayify)(e));return"0x"+t.pub.add(r.pub).encodeCompressed("hex")}signDigest(e){const t=Kn().keyFromPrivate((0,l.arrayify)(this.privateKey)),r=(0,l.arrayify)(e);32!==r.length&&zn.throwArgumentError("bad digest length","digest",e);const n=t.sign(r,{canonical:!0});return(0,l.splitSignature)({recoveryParam:n.recoveryParam,r:(0,l.hexZeroPad)("0x"+n.r.toString(16),32),s:(0,l.hexZeroPad)("0x"+n.s.toString(16),32)})}computeSharedSecret(e){const t=Kn().keyFromPrivate((0,l.arrayify)(this.privateKey)),r=Kn().keyFromPublic((0,l.arrayify)(Hn(e)));return(0,l.hexZeroPad)("0x"+t.derive(r.getPublic()).toString(16),32)}static isSigningKey(e){return!(!e||!e._isSigningKey)}constructor(e){(0,L.defineReadOnly)(this,"curve","secp256k1"),(0,L.defineReadOnly)(this,"privateKey",(0,l.hexlify)(e)),32!==(0,l.hexDataLength)(this.privateKey)&&zn.throwArgumentError("invalid private key","privateKey","[[ REDACTED ]]");const t=Kn().keyFromPrivate((0,l.arrayify)(this.privateKey));(0,L.defineReadOnly)(this,"publicKey","0x"+t.getPublic(!1,"hex")),(0,L.defineReadOnly)(this,"compressedPublicKey","0x"+t.getPublic(!0,"hex")),(0,L.defineReadOnly)(this,"_isSigningKey",!0)}}function Wn(e,t){const r=(0,l.splitSignature)(t),n={r:(0,l.arrayify)(r.r),s:(0,l.arrayify)(r.s)};return"0x"+Kn().recoverPubKey((0,l.arrayify)(e),n,r.recoveryParam).encode("hex",!1)}function Hn(e,t){const r=(0,l.arrayify)(e);if(32===r.length){const e=new Gn(r);return t?"0x"+Kn().keyFromPrivate(r).getPublic(!0,"hex"):e.publicKey}return 33===r.length?t?(0,l.hexlify)(r):"0x"+Kn().keyFromPublic(r).getPublic(!1,"hex"):65===r.length?t?"0x"+Kn().keyFromPublic(r).getPublic(!0,"hex"):(0,l.hexlify)(r):zn.throwArgumentError("invalid public or private key","key","[REDACTED]")}const Jn=new(0,(h=o("2rINa")).Logger)("transactions/5.7.0");var Vn,Yn;function Qn(e){return"0x"===e?null:Be(e)}function Zn(e){return"0x"===e?et:w.from(e)}(Yn=Vn||(Vn={}))[Yn.legacy=0]="legacy",Yn[Yn.eip2930=1]="eip2930",Yn[Yn.eip1559=2]="eip1559";const Xn=[{name:"nonce",maxLength:32,numeric:!0},{name:"gasPrice",maxLength:32,numeric:!0},{name:"gasLimit",maxLength:32,numeric:!0},{name:"to",length:20},{name:"value",maxLength:32,numeric:!0},{name:"data"}],$n={chainId:!0,data:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,type:!0,value:!0};function ei(e){const t=Hn(e);return Be((0,l.hexDataSlice)(_e((0,l.hexDataSlice)(t,1)),12))}function ti(e,t){return ei(Wn((0,l.arrayify)(e),t))}function ri(e,t){const r=(0,l.stripZeros)(w.from(e).toHexString());return r.length>32&&Jn.throwArgumentError("invalid length for "+t,"transaction:"+t,e),r}function ni(e,t){return{address:Be(e),storageKeys:(t||[]).map(((t,r)=>(32!==(0,l.hexDataLength)(t)&&Jn.throwArgumentError("invalid access list storageKey",`accessList[${e}:${r}]`,t),t.toLowerCase())))}}function ii(e){if(Array.isArray(e))return e.map(((e,t)=>Array.isArray(e)?(e.length>2&&Jn.throwArgumentError("access list expected to be [ address, storageKeys[] ]",`value[${t}]`,e),ni(e[0],e[1])):ni(e.address,e.storageKeys)));const t=Object.keys(e).map((t=>{const r=e[t].reduce(((e,t)=>(e[t]=!0,e)),{});return ni(t,Object.keys(r).sort())}));return t.sort(((e,t)=>e.address.localeCompare(t.address))),t}function oi(e){return ii(e).map((e=>[e.address,e.storageKeys]))}function si(e,t){if(null!=e.gasPrice){const t=w.from(e.gasPrice),r=w.from(e.maxFeePerGas||0);t.eq(r)||Jn.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas","tx",{gasPrice:t,maxFeePerGas:r})}const r=[ri(e.chainId||0,"chainId"),ri(e.nonce||0,"nonce"),ri(e.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),ri(e.maxFeePerGas||0,"maxFeePerGas"),ri(e.gasLimit||0,"gasLimit"),null!=e.to?Be(e.to):"0x",ri(e.value||0,"value"),e.data||"0x",oi(e.accessList||[])];if(t){const e=(0,l.splitSignature)(t);r.push(ri(e.recoveryParam,"recoveryParam")),r.push((0,l.stripZeros)(e.r)),r.push((0,l.stripZeros)(e.s))}return(0,l.hexConcat)(["0x02",Pe.encode(r)])}function ai(e,t){const r=[ri(e.chainId||0,"chainId"),ri(e.nonce||0,"nonce"),ri(e.gasPrice||0,"gasPrice"),ri(e.gasLimit||0,"gasLimit"),null!=e.to?Be(e.to):"0x",ri(e.value||0,"value"),e.data||"0x",oi(e.accessList||[])];if(t){const e=(0,l.splitSignature)(t);r.push(ri(e.recoveryParam,"recoveryParam")),r.push((0,l.stripZeros)(e.r)),r.push((0,l.stripZeros)(e.s))}return(0,l.hexConcat)(["0x01",Pe.encode(r)])}function ui(e,t){if(null==e.type||0===e.type)return null!=e.accessList&&Jn.throwArgumentError("untyped transactions do not support accessList; include type: 1","transaction",e),function(e,t){(0,L.checkProperties)(e,$n);const r=[];Xn.forEach((function(t){let n=e[t.name]||[];const i={};t.numeric&&(i.hexPad="left"),n=(0,l.arrayify)((0,l.hexlify)(n,i)),t.length&&n.length!==t.length&&n.length>0&&Jn.throwArgumentError("invalid length for "+t.name,"transaction:"+t.name,n),t.maxLength&&(n=(0,l.stripZeros)(n),n.length>t.maxLength&&Jn.throwArgumentError("invalid length for "+t.name,"transaction:"+t.name,n)),r.push((0,l.hexlify)(n))}));let n=0;if(null!=e.chainId?(n=e.chainId,"number"!=typeof n&&Jn.throwArgumentError("invalid transaction.chainId","transaction",e)):t&&!(0,l.isBytesLike)(t)&&t.v>28&&(n=Math.floor((t.v-35)/2)),0!==n&&(r.push((0,l.hexlify)(n)),r.push("0x"),r.push("0x")),!t)return Pe.encode(r);const i=(0,l.splitSignature)(t);let o=27+i.recoveryParam;return 0!==n?(r.pop(),r.pop(),r.pop(),o+=2*n+8,i.v>28&&i.v!==o&&Jn.throwArgumentError("transaction.chainId/signature.v mismatch","signature",t)):i.v!==o&&Jn.throwArgumentError("transaction.chainId/signature.v mismatch","signature",t),r.push((0,l.hexlify)(o)),r.push((0,l.stripZeros)((0,l.arrayify)(i.r))),r.push((0,l.stripZeros)((0,l.arrayify)(i.s))),Pe.encode(r)}(e,t);switch(e.type){case 1:return ai(e,t);case 2:return si(e,t)}return Jn.throwError(`unsupported transaction type: ${e.type}`,h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"serializeTransaction",transactionType:e.type})}function ci(e,t,r){try{const r=Zn(t[0]).toNumber();if(0!==r&&1!==r)throw new Error("bad recid");e.v=r}catch(e){Jn.throwArgumentError("invalid v for transaction type: 1","v",t[0])}e.r=(0,l.hexZeroPad)(t[1],32),e.s=(0,l.hexZeroPad)(t[2],32);try{const t=_e(r(e));e.from=ti(t,{r:e.r,s:e.s,recoveryParam:e.v})}catch(e){}}function li(e){const t=(0,l.arrayify)(e);if(t[0]>127)return function(e){const t=Pe.decode(e);9!==t.length&&6!==t.length&&Jn.throwArgumentError("invalid raw transaction","rawTransaction",e);const r={nonce:Zn(t[0]).toNumber(),gasPrice:Zn(t[1]),gasLimit:Zn(t[2]),to:Qn(t[3]),value:Zn(t[4]),data:t[5],chainId:0};if(6===t.length)return r;try{r.v=w.from(t[6]).toNumber()}catch(e){return r}if(r.r=(0,l.hexZeroPad)(t[7],32),r.s=(0,l.hexZeroPad)(t[8],32),w.from(r.r).isZero()&&w.from(r.s).isZero())r.chainId=r.v,r.v=0;else{r.chainId=Math.floor((r.v-35)/2),r.chainId<0&&(r.chainId=0);let n=r.v-27;const i=t.slice(0,6);0!==r.chainId&&(i.push((0,l.hexlify)(r.chainId)),i.push("0x"),i.push("0x"),n-=2*r.chainId+8);const o=_e(Pe.encode(i));try{r.from=ti(o,{r:(0,l.hexlify)(r.r),s:(0,l.hexlify)(r.s),recoveryParam:n})}catch(e){}r.hash=_e(e)}return r.type=null,r}(t);switch(t[0]){case 1:return function(e){const t=Pe.decode(e.slice(1));8!==t.length&&11!==t.length&&Jn.throwArgumentError("invalid component count for transaction type: 1","payload",(0,l.hexlify)(e));const r={type:1,chainId:Zn(t[0]).toNumber(),nonce:Zn(t[1]).toNumber(),gasPrice:Zn(t[2]),gasLimit:Zn(t[3]),to:Qn(t[4]),value:Zn(t[5]),data:t[6],accessList:ii(t[7])};return 8===t.length||(r.hash=_e(e),ci(r,t.slice(8),ai)),r}(t);case 2:return function(e){const t=Pe.decode(e.slice(1));9!==t.length&&12!==t.length&&Jn.throwArgumentError("invalid component count for transaction type: 2","payload",(0,l.hexlify)(e));const r=Zn(t[2]),n=Zn(t[3]),i={type:2,chainId:Zn(t[0]).toNumber(),nonce:Zn(t[1]).toNumber(),maxPriorityFeePerGas:r,maxFeePerGas:n,gasPrice:null,gasLimit:Zn(t[4]),to:Qn(t[5]),value:Zn(t[6]),data:t[7],accessList:ii(t[8])};return 9===t.length||(i.hash=_e(e),ci(i,t.slice(9),si)),i}(t)}return Jn.throwError(`unsupported transaction type: ${t[0]}`,h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"parseTransaction",transactionType:t[0]})}h=o("2rINa");var hi=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))};const fi=new(0,h.Logger)("contracts/5.7.0"),di={chainId:!0,data:!0,from:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,value:!0,type:!0,accessList:!0,maxFeePerGas:!0,maxPriorityFeePerGas:!0,customData:!0,ccipReadEnabled:!0};function pi(e,t){return hi(this,void 0,void 0,(function*(){const r=yield t;"string"!=typeof r&&fi.throwArgumentError("invalid address or ENS name","name",r);try{return Be(r)}catch(e){}e||fi.throwError("a provider or signer is needed to resolve ENS names",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"resolveName"});const n=yield e.resolveName(r);return null==n&&fi.throwArgumentError("resolver or addr is not configured for ENS name","name",r),n}))}function gi(e,t,r){return hi(this,void 0,void 0,(function*(){return Array.isArray(r)?yield Promise.all(r.map(((r,n)=>gi(e,Array.isArray(t)?t[n]:t[r.name],r)))):"address"===r.type?yield pi(e,t):"tuple"===r.type?yield gi(e,t,r.components):"array"===r.baseType?Array.isArray(t)?yield Promise.all(t.map((t=>gi(e,t,r.arrayChildren)))):Promise.reject(fi.makeError("invalid value for array",h.Logger.errors.INVALID_ARGUMENT,{argument:"value",value:t})):t}))}function mi(e,t,r){return hi(this,void 0,void 0,(function*(){let n={};r.length===t.inputs.length+1&&"object"==typeof r[r.length-1]&&(n=(0,L.shallowCopy)(r.pop())),fi.checkArgumentCount(r.length,t.inputs.length,"passed to contract"),e.signer?n.from?n.from=(0,L.resolveProperties)({override:pi(e.signer,n.from),signer:e.signer.getAddress()}).then((e=>hi(this,void 0,void 0,(function*(){return Be(e.signer)!==e.override&&fi.throwError("Contract with a Signer cannot override from",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"overrides.from"}),e.override})))):n.from=e.signer.getAddress():n.from&&(n.from=pi(e.provider,n.from));const i=yield(0,L.resolveProperties)({args:gi(e.signer||e.provider,r,t.inputs),address:e.resolvedAddress,overrides:(0,L.resolveProperties)(n)||{}}),o=e.interface.encodeFunctionData(t,i.args),s={data:o,to:i.address},a=i.overrides;if(null!=a.nonce&&(s.nonce=w.from(a.nonce).toNumber()),null!=a.gasLimit&&(s.gasLimit=w.from(a.gasLimit)),null!=a.gasPrice&&(s.gasPrice=w.from(a.gasPrice)),null!=a.maxFeePerGas&&(s.maxFeePerGas=w.from(a.maxFeePerGas)),null!=a.maxPriorityFeePerGas&&(s.maxPriorityFeePerGas=w.from(a.maxPriorityFeePerGas)),null!=a.from&&(s.from=a.from),null!=a.type&&(s.type=a.type),null!=a.accessList&&(s.accessList=ii(a.accessList)),null==s.gasLimit&&null!=t.gas){let e=21e3;const r=(0,l.arrayify)(o);for(let t=0;t<r.length;t++)e+=4,r[t]&&(e+=64);s.gasLimit=w.from(t.gas).add(e)}if(a.value){const e=w.from(a.value);e.isZero()||t.payable||fi.throwError("non-payable method cannot override value",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"overrides.value",value:n.value}),s.value=e}a.customData&&(s.customData=(0,L.shallowCopy)(a.customData)),a.ccipReadEnabled&&(s.ccipReadEnabled=!!a.ccipReadEnabled),delete n.nonce,delete n.gasLimit,delete n.gasPrice,delete n.from,delete n.value,delete n.type,delete n.accessList,delete n.maxFeePerGas,delete n.maxPriorityFeePerGas,delete n.customData,delete n.ccipReadEnabled;const u=Object.keys(n).filter((e=>null!=n[e]));return u.length&&fi.throwError(`cannot override ${u.map((e=>JSON.stringify(e))).join(",")}`,h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"overrides",overrides:u}),s}))}function yi(e,t){const r=t.wait.bind(t);t.wait=t=>r(t).then((t=>(t.events=t.logs.map((r=>{let n=(0,L.deepCopy)(r),i=null;try{i=e.interface.parseLog(r)}catch(e){}return i&&(n.args=i.args,n.decode=(t,r)=>e.interface.decodeEventLog(i.eventFragment,t,r),n.event=i.name,n.eventSignature=i.signature),n.removeListener=()=>e.provider,n.getBlock=()=>e.provider.getBlock(t.blockHash),n.getTransaction=()=>e.provider.getTransaction(t.transactionHash),n.getTransactionReceipt=()=>Promise.resolve(t),n})),t)))}function vi(e,t,r){const n=e.signer||e.provider;return function(...i){return hi(this,void 0,void 0,(function*(){let o;if(i.length===t.inputs.length+1&&"object"==typeof i[i.length-1]){const e=(0,L.shallowCopy)(i.pop());null!=e.blockTag&&(o=yield e.blockTag),delete e.blockTag,i.push(e)}null!=e.deployTransaction&&(yield e._deployed(o));const s=yield mi(e,t,i),a=yield n.call(s,o);try{let n=e.interface.decodeFunctionResult(t,a);return r&&1===t.outputs.length&&(n=n[0]),n}catch(t){throw t.code===h.Logger.errors.CALL_EXCEPTION&&(t.address=e.address,t.args=i,t.transaction=s),t}}))}}function wi(e,t,r){return t.constant?vi(e,t,r):function(e,t){return function(...r){return hi(this,void 0,void 0,(function*(){e.signer||fi.throwError("sending a transaction requires a signer",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"sendTransaction"}),null!=e.deployTransaction&&(yield e._deployed());const n=yield mi(e,t,r),i=yield e.signer.sendTransaction(n);return yi(e,i),i}))}}(e,t)}function bi(e){return!e.address||null!=e.topics&&0!==e.topics.length?(e.address||"*")+"@"+(e.topics?e.topics.map((e=>Array.isArray(e)?e.join("|"):e)).join(":"):""):"*"}class Ai{addListener(e,t){this._listeners.push({listener:e,once:t})}removeListener(e){let t=!1;this._listeners=this._listeners.filter((r=>!(!t&&r.listener===e)||(t=!0,!1)))}removeAllListeners(){this._listeners=[]}listeners(){return this._listeners.map((e=>e.listener))}listenerCount(){return this._listeners.length}run(e){const t=this.listenerCount();return this._listeners=this._listeners.filter((t=>{const r=e.slice();return setTimeout((()=>{t.listener.apply(this,r)}),0),!t.once})),t}prepareEvent(e){}getEmit(e){return[e]}constructor(e,t){(0,L.defineReadOnly)(this,"tag",e),(0,L.defineReadOnly)(this,"filter",t),this._listeners=[]}}class Ei extends Ai{constructor(){super("error",null)}}class xi extends Ai{prepareEvent(e){super.prepareEvent(e),e.event=this.fragment.name,e.eventSignature=this.fragment.format(),e.decode=(e,t)=>this.interface.decodeEventLog(this.fragment,e,t);try{e.args=this.interface.decodeEventLog(this.fragment,e.data,e.topics)}catch(t){e.args=null,e.decodeError=t}}getEmit(e){const t=Ae(e.args);if(t.length)throw t[0].error;const r=(e.args||[]).slice();return r.push(e),r}constructor(e,t,r,n){const i={address:e};let o=t.getEventTopic(r);n?(o!==n[0]&&fi.throwArgumentError("topic mismatch","topics",n),i.topics=n.slice()):i.topics=[o],super(bi(i),i),(0,L.defineReadOnly)(this,"address",e),(0,L.defineReadOnly)(this,"interface",t),(0,L.defineReadOnly)(this,"fragment",r)}}class Si extends Ai{prepareEvent(e){super.prepareEvent(e);try{const t=this.interface.parseLog(e);e.event=t.name,e.eventSignature=t.signature,e.decode=(e,r)=>this.interface.decodeEventLog(t.eventFragment,e,r),e.args=t.args}catch(e){}}constructor(e,t){super("*",{address:e}),(0,L.defineReadOnly)(this,"address",e),(0,L.defineReadOnly)(this,"interface",t)}}class Ci{static getContractAddress(e){return De(e)}static getInterface(e){return Kr.isInterface(e)?e:new Kr(e)}deployed(){return this._deployed()}_deployed(e){return this._deployedPromise||(this.deployTransaction?this._deployedPromise=this.deployTransaction.wait().then((()=>this)):this._deployedPromise=this.provider.getCode(this.address,e).then((e=>("0x"===e&&fi.throwError("contract not deployed",h.Logger.errors.UNSUPPORTED_OPERATION,{contractAddress:this.address,operation:"getDeployed"}),this)))),this._deployedPromise}fallback(e){this.signer||fi.throwError("sending a transactions require a signer",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"sendTransaction(fallback)"});const t=(0,L.shallowCopy)(e||{});return["from","to"].forEach((function(e){null!=t[e]&&fi.throwError("cannot override "+e,h.Logger.errors.UNSUPPORTED_OPERATION,{operation:e})})),t.to=this.resolvedAddress,this.deployed().then((()=>this.signer.sendTransaction(t)))}connect(e){"string"==typeof e&&(e=new(0,Yr.VoidSigner)(e,this.provider));const t=new this.constructor(this.address,this.interface,e);return this.deployTransaction&&(0,L.defineReadOnly)(t,"deployTransaction",this.deployTransaction),t}attach(e){return new this.constructor(e,this.interface,this.signer||this.provider)}static isIndexed(e){return Ur.isIndexed(e)}_normalizeRunningEvent(e){return this._runningEvents[e.tag]?this._runningEvents[e.tag]:e}_getRunningEvent(e){if("string"==typeof e){if("error"===e)return this._normalizeRunningEvent(new Ei);if("event"===e)return this._normalizeRunningEvent(new Ai("event",null));if("*"===e)return this._normalizeRunningEvent(new Si(this.address,this.interface));const t=this.interface.getEvent(e);return this._normalizeRunningEvent(new xi(this.address,this.interface,t))}if(e.topics&&e.topics.length>0){try{const t=e.topics[0];if("string"!=typeof t)throw new Error("invalid topic");const r=this.interface.getEvent(t);return this._normalizeRunningEvent(new xi(this.address,this.interface,r,e.topics))}catch(e){}const t={address:this.address,topics:e.topics};return this._normalizeRunningEvent(new Ai(bi(t),t))}return this._normalizeRunningEvent(new Si(this.address,this.interface))}_checkRunningEvents(e){if(0===e.listenerCount()){delete this._runningEvents[e.tag];const t=this._wrappedEmits[e.tag];t&&e.filter&&(this.provider.off(e.filter,t),delete this._wrappedEmits[e.tag])}}_wrapEvent(e,t,r){const n=(0,L.deepCopy)(t);return n.removeListener=()=>{r&&(e.removeListener(r),this._checkRunningEvents(e))},n.getBlock=()=>this.provider.getBlock(t.blockHash),n.getTransaction=()=>this.provider.getTransaction(t.transactionHash),n.getTransactionReceipt=()=>this.provider.getTransactionReceipt(t.transactionHash),e.prepareEvent(n),n}_addEventListener(e,t,r){if(this.provider||fi.throwError("events require a provider or a signer with a provider",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"once"}),e.addListener(t,r),this._runningEvents[e.tag]=e,!this._wrappedEmits[e.tag]){const r=r=>{let n=this._wrapEvent(e,r,t);if(null==n.decodeError)try{const t=e.getEmit(n);this.emit(e.filter,...t)}catch(e){n.decodeError=e.error}null!=e.filter&&this.emit("event",n),null!=n.decodeError&&this.emit("error",n.decodeError,n)};this._wrappedEmits[e.tag]=r,null!=e.filter&&this.provider.on(e.filter,r)}}queryFilter(e,t,r){const n=this._getRunningEvent(e),i=(0,L.shallowCopy)(n.filter);return"string"==typeof t&&(0,l.isHexString)(t,32)?(null!=r&&fi.throwArgumentError("cannot specify toBlock with blockhash","toBlock",r),i.blockHash=t):(i.fromBlock=null!=t?t:0,i.toBlock=null!=r?r:"latest"),this.provider.getLogs(i).then((e=>e.map((e=>this._wrapEvent(n,e,null)))))}on(e,t){return this._addEventListener(this._getRunningEvent(e),t,!1),this}once(e,t){return this._addEventListener(this._getRunningEvent(e),t,!0),this}emit(e,...t){if(!this.provider)return!1;const r=this._getRunningEvent(e),n=r.run(t)>0;return this._checkRunningEvents(r),n}listenerCount(e){return this.provider?null==e?Object.keys(this._runningEvents).reduce(((e,t)=>e+this._runningEvents[t].listenerCount()),0):this._getRunningEvent(e).listenerCount():0}listeners(e){if(!this.provider)return[];if(null==e){const e=[];for(let t in this._runningEvents)this._runningEvents[t].listeners().forEach((t=>{e.push(t)}));return e}return this._getRunningEvent(e).listeners()}removeAllListeners(e){if(!this.provider)return this;if(null==e){for(const e in this._runningEvents){const t=this._runningEvents[e];t.removeAllListeners(),this._checkRunningEvents(t)}return this}const t=this._getRunningEvent(e);return t.removeAllListeners(),this._checkRunningEvents(t),this}off(e,t){if(!this.provider)return this;const r=this._getRunningEvent(e);return r.removeListener(t),this._checkRunningEvents(r),this}removeListener(e,t){return this.off(e,t)}constructor(e,t,r){(0,L.defineReadOnly)(this,"interface",(0,L.getStatic)(new.target,"getInterface")(t)),null==r?((0,L.defineReadOnly)(this,"provider",null),(0,L.defineReadOnly)(this,"signer",null)):Yr.Signer.isSigner(r)?((0,L.defineReadOnly)(this,"provider",r.provider||null),(0,L.defineReadOnly)(this,"signer",r)):Gr.Provider.isProvider(r)?((0,L.defineReadOnly)(this,"provider",r),(0,L.defineReadOnly)(this,"signer",null)):fi.throwArgumentError("invalid signer or provider","signerOrProvider",r),(0,L.defineReadOnly)(this,"callStatic",{}),(0,L.defineReadOnly)(this,"estimateGas",{}),(0,L.defineReadOnly)(this,"functions",{}),(0,L.defineReadOnly)(this,"populateTransaction",{}),(0,L.defineReadOnly)(this,"filters",{});{const e={};Object.keys(this.interface.events).forEach((t=>{const r=this.interface.events[t];(0,L.defineReadOnly)(this.filters,t,((...e)=>({address:this.address,topics:this.interface.encodeFilterTopics(r,e)}))),e[r.name]||(e[r.name]=[]),e[r.name].push(t)})),Object.keys(e).forEach((t=>{const r=e[t];1===r.length?(0,L.defineReadOnly)(this.filters,t,this.filters[r[0]]):fi.warn(`Duplicate definition of ${t} (${r.join(", ")})`)}))}if((0,L.defineReadOnly)(this,"_runningEvents",{}),(0,L.defineReadOnly)(this,"_wrappedEmits",{}),null==e&&fi.throwArgumentError("invalid contract address or ENS name","addressOrName",e),(0,L.defineReadOnly)(this,"address",e),this.provider)(0,L.defineReadOnly)(this,"resolvedAddress",pi(this.provider,e));else try{(0,L.defineReadOnly)(this,"resolvedAddress",Promise.resolve(Be(e)))}catch(e){fi.throwError("provider is required to use ENS name as contract address",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new Contract"})}this.resolvedAddress.catch((e=>{}));const n={},i={};Object.keys(this.interface.functions).forEach((e=>{const t=this.interface.functions[e];if(i[e])fi.warn(`Duplicate ABI entry for ${JSON.stringify(e)}`);else{i[e]=!0;{const r=t.name;n[`%${r}`]||(n[`%${r}`]=[]),n[`%${r}`].push(e)}null==this[e]&&(0,L.defineReadOnly)(this,e,wi(this,t,!0)),null==this.functions[e]&&(0,L.defineReadOnly)(this.functions,e,wi(this,t,!1)),null==this.callStatic[e]&&(0,L.defineReadOnly)(this.callStatic,e,vi(this,t,!0)),null==this.populateTransaction[e]&&(0,L.defineReadOnly)(this.populateTransaction,e,function(e,t){return function(...r){return mi(e,t,r)}}(this,t)),null==this.estimateGas[e]&&(0,L.defineReadOnly)(this.estimateGas,e,function(e,t){const r=e.signer||e.provider;return function(...n){return hi(this,void 0,void 0,(function*(){r||fi.throwError("estimate require a provider or signer",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"estimateGas"});const i=yield mi(e,t,n);return yield r.estimateGas(i)}))}}(this,t))}})),Object.keys(n).forEach((e=>{const t=n[e];if(t.length>1)return;e=e.substring(1);const r=t[0];try{null==this[e]&&(0,L.defineReadOnly)(this,e,this[r])}catch(e){}null==this.functions[e]&&(0,L.defineReadOnly)(this.functions,e,this.functions[r]),null==this.callStatic[e]&&(0,L.defineReadOnly)(this.callStatic,e,this.callStatic[r]),null==this.populateTransaction[e]&&(0,L.defineReadOnly)(this.populateTransaction,e,this.populateTransaction[r]),null==this.estimateGas[e]&&(0,L.defineReadOnly)(this.estimateGas,e,this.estimateGas[r])}))}}class ki extends Ci{}class _i{getDeployTransaction(...e){let t={};if(e.length===this.interface.deploy.inputs.length+1&&"object"==typeof e[e.length-1]){t=(0,L.shallowCopy)(e.pop());for(const e in t)if(!di[e])throw new Error("unknown transaction override "+e)}if(["data","from","to"].forEach((e=>{null!=t[e]&&fi.throwError("cannot override "+e,h.Logger.errors.UNSUPPORTED_OPERATION,{operation:e})})),t.value){w.from(t.value).isZero()||this.interface.deploy.payable||fi.throwError("non-payable constructor cannot override value",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"overrides.value",value:t.value})}return fi.checkArgumentCount(e.length,this.interface.deploy.inputs.length," in Contract constructor"),t.data=(0,l.hexlify)((0,l.concat)([this.bytecode,this.interface.encodeDeploy(e)])),t}deploy(...e){return hi(this,void 0,void 0,(function*(){let t={};e.length===this.interface.deploy.inputs.length+1&&(t=e.pop()),fi.checkArgumentCount(e.length,this.interface.deploy.inputs.length," in Contract constructor");const r=yield gi(this.signer,e,this.interface.deploy.inputs);r.push(t);const n=this.getDeployTransaction(...r),i=yield this.signer.sendTransaction(n),o=(0,L.getStatic)(this.constructor,"getContractAddress")(i),s=(0,L.getStatic)(this.constructor,"getContract")(o,this.interface,this.signer);return yi(s,i),(0,L.defineReadOnly)(s,"deployTransaction",i),s}))}attach(e){return this.constructor.getContract(e,this.interface,this.signer)}connect(e){return new this.constructor(this.interface,this.bytecode,e)}static fromSolidity(e,t){null==e&&fi.throwError("missing compiler output",h.Logger.errors.MISSING_ARGUMENT,{argument:"compilerOutput"}),"string"==typeof e&&(e=JSON.parse(e));const r=e.abi;let n=null;return e.bytecode?n=e.bytecode:e.evm&&e.evm.bytecode&&(n=e.evm.bytecode),new this(r,n,t)}static getInterface(e){return ki.getInterface(e)}static getContractAddress(e){return De(e)}static getContract(e,t,r){return new ki(e,t,r)}constructor(e,t,r){let n=null;n="string"==typeof t?t:(0,l.isBytes)(t)?(0,l.hexlify)(t):t&&"string"==typeof t.object?t.object:"!","0x"!==n.substring(0,2)&&(n="0x"+n),(!(0,l.isHexString)(n)||n.length%2)&&fi.throwArgumentError("invalid bytecode","bytecode",t),r&&!Yr.Signer.isSigner(r)&&fi.throwArgumentError("invalid signer","signer",r),(0,L.defineReadOnly)(this,"bytecode",n),(0,L.defineReadOnly)(this,"interface",(0,L.getStatic)(new.target,"getInterface")(e)),(0,L.defineReadOnly)(this,"signer",r||null)}}var Pi={};e(Pi,"Wallet",(function(){return Ko}),(function(e){return Ko=e})),e(Pi,"verifyMessage",(function(){return Go}),(function(e){return Go=e})),e(Pi,"verifyTypedData",(function(){return Wo}),(function(e){return Wo=e}));l=o("3Yhqu"),l=o("3Yhqu");class Ri{encode(e){let t=(0,l.arrayify)(e);if(0===t.length)return"";let r=[0];for(let e=0;e<t.length;++e){let n=t[e];for(let e=0;e<r.length;++e)n+=r[e]<<8,r[e]=n%this.base,n=n/this.base|0;for(;n>0;)r.push(n%this.base),n=n/this.base|0}let n="";for(let e=0;0===t[e]&&e<t.length-1;++e)n+=this._leader;for(let e=r.length-1;e>=0;--e)n+=this.alphabet[r[e]];return n}decode(e){if("string"!=typeof e)throw new TypeError("Expected String");let t=[];if(0===e.length)return new Uint8Array(t);t.push(0);for(let r=0;r<e.length;r++){let n=this._alphabetMap[e[r]];if(void 0===n)throw new Error("Non-base"+this.base+" character");let i=n;for(let e=0;e<t.length;++e)i+=t[e]*this.base,t[e]=255&i,i>>=8;for(;i>0;)t.push(255&i),i>>=8}for(let r=0;e[r]===this._leader&&r<e.length-1;++r)t.push(0);return(0,l.arrayify)(new Uint8Array(t.reverse()))}constructor(e){(0,L.defineReadOnly)(this,"alphabet",e),(0,L.defineReadOnly)(this,"base",e.length),(0,L.defineReadOnly)(this,"_alphabetMap",{}),(0,L.defineReadOnly)(this,"_leader",e.charAt(0));for(let t=0;t<e.length;t++)this._alphabetMap[e.charAt(t)]=t}}new Ri("abcdefghijklmnopqrstuvwxyz234567");const Oi=new Ri("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");var Ni,Ii;l=o("3Yhqu"),l=o("3Yhqu"),l=o("3Yhqu");(Ii=Ni||(Ni={})).sha256="sha256",Ii.sha512="sha512";const Ti=new(0,(h=o("2rINa")).Logger)("sha2/5.7.0");function Mi(e){return"0x"+r(rn).ripemd160().update((0,l.arrayify)(e)).digest("hex")}function Bi(e){return"0x"+r(rn).sha256().update((0,l.arrayify)(e)).digest("hex")}function Fi(e){return"0x"+r(rn).sha512().update((0,l.arrayify)(e)).digest("hex")}function Li(e,t,n){return Ni[e]||Ti.throwError("unsupported algorithm "+e,h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"hmac",algorithm:e}),"0x"+r(rn).hmac(r(rn)[e],(0,l.arrayify)(t)).update((0,l.arrayify)(n)).digest("hex")}function Di(e,t,r,n,i){let o;e=(0,l.arrayify)(e),t=(0,l.arrayify)(t);let s=1;const a=new Uint8Array(n),u=new Uint8Array(t.length+4);let c,h;u.set(t);for(let f=1;f<=s;f++){u[t.length]=f>>24&255,u[t.length+1]=f>>16&255,u[t.length+2]=f>>8&255,u[t.length+3]=255&f;let d=(0,l.arrayify)(Li(i,e,u));o||(o=d.length,h=new Uint8Array(o),s=Math.ceil(n/o),c=n-(s-1)*o),h.set(d);for(let t=1;t<r;t++){d=(0,l.arrayify)(Li(i,e,d));for(let e=0;e<o;e++)h[e]^=d[e]}const p=(f-1)*o,g=f===s?c:o;a.set((0,l.arrayify)(h).slice(0,g),p)}return(0,l.hexlify)(a)}h=o("2rINa");const ji=new(0,h.Logger)("wordlists/5.7.0");class Ui{split(e){return e.toLowerCase().split(/ +/g)}join(e){return e.join(" ")}static check(e){const t=[];for(let r=0;r<2048;r++){const n=e.getWord(r);if(r!==e.getWordIndex(n))return"0x";t.push(n)}return Gt(t.join("\n")+"\n")}static register(e,t){t||(t=e.locale)}constructor(e){ji.checkAbstract(new.target,Ui),(0,L.defineReadOnly)(this,"locale",e)}}let zi=null;function qi(e){if(null==zi&&(zi="AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo".replace(/([A-Z])/g," $1").toLowerCase().substring(1).split(" "),"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60"!==Ui.check(e)))throw zi=null,new Error("BIP39 Wordlist for en (English) FAILED")}const Ki=new class extends Ui{getWord(e){return qi(this),zi[e]}getWordIndex(e){return qi(this),zi.indexOf(e)}constructor(){super("en")}};Ui.register(Ki);const Gi={en:Ki};const Wi=new(0,(h=o("2rINa")).Logger)("hdnode/5.7.0"),Hi=w.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),Ji=vt("Bitcoin seed"),Vi=2147483648;function Yi(e){return(1<<e)-1<<8-e}function Qi(e){return(0,l.hexZeroPad)((0,l.hexlify)(e),32)}function Zi(e){return Oi.encode((0,l.concat)([e,(0,l.hexDataSlice)(Bi(Bi(e)),0,4)]))}function Xi(e){if(null==e)return Gi.en;if("string"==typeof e){const t=Gi[e];return null==t&&Wi.throwArgumentError("unknown locale","wordlist",e),t}return e}const $i={},eo="m/44'/60'/0'/0/0";class to{get extendedKey(){if(this.depth>=256)throw new Error("Depth too large!");return Zi((0,l.concat)([null!=this.privateKey?"0x0488ADE4":"0x0488B21E",(0,l.hexlify)(this.depth),this.parentFingerprint,(0,l.hexZeroPad)((0,l.hexlify)(this.index),4),this.chainCode,null!=this.privateKey?(0,l.concat)(["0x00",this.privateKey]):this.publicKey]))}neuter(){return new to($i,null,this.publicKey,this.parentFingerprint,this.chainCode,this.index,this.depth,this.path)}_derive(e){if(e>4294967295)throw new Error("invalid index - "+String(e));let t=this.path;t&&(t+="/"+(2147483647&e));const r=new Uint8Array(37);if(e&Vi){if(!this.privateKey)throw new Error("cannot derive child of neutered node");r.set((0,l.arrayify)(this.privateKey),1),t&&(t+="'")}else r.set((0,l.arrayify)(this.publicKey));for(let t=24;t>=0;t-=8)r[33+(t>>3)]=e>>24-t&255;const n=(0,l.arrayify)(Li(Ni.sha512,this.chainCode,r)),i=n.slice(0,32),o=n.slice(32);let s=null,a=null;if(this.privateKey)s=Qi(w.from(i).add(this.privateKey).mod(Hi));else{a=new Gn((0,l.hexlify)(i))._addPoint(this.publicKey)}let u=t;const c=this.mnemonic;return c&&(u=Object.freeze({phrase:c.phrase,path:t,locale:c.locale||"en"})),new to($i,s,a,this.fingerprint,Qi(o),e,this.depth+1,u)}derivePath(e){const t=e.split("/");if(0===t.length||"m"===t[0]&&0!==this.depth)throw new Error("invalid path - "+e);"m"===t[0]&&t.shift();let r=this;for(let e=0;e<t.length;e++){const n=t[e];if(n.match(/^[0-9]+'$/)){const e=parseInt(n.substring(0,n.length-1));if(e>=Vi)throw new Error("invalid path index - "+n);r=r._derive(Vi+e)}else{if(!n.match(/^[0-9]+$/))throw new Error("invalid path component - "+n);{const e=parseInt(n);if(e>=Vi)throw new Error("invalid path index - "+n);r=r._derive(e)}}}return r}static _fromSeed(e,t){const r=(0,l.arrayify)(e);if(r.length<16||r.length>64)throw new Error("invalid seed");const n=(0,l.arrayify)(Li(Ni.sha512,Ji,r));return new to($i,Qi(n.slice(0,32)),null,"0x00000000",Qi(n.slice(32)),0,0,t)}static fromMnemonic(e,t,r){return e=io(no(e,r=Xi(r)),r),to._fromSeed(ro(e,t),{phrase:e,path:"m",locale:r.locale})}static fromSeed(e){return to._fromSeed(e,null)}static fromExtendedKey(e){const t=Oi.decode(e);82===t.length&&Zi(t.slice(0,78))===e||Wi.throwArgumentError("invalid extended key","extendedKey","[REDACTED]");const r=t[4],n=(0,l.hexlify)(t.slice(5,9)),i=parseInt((0,l.hexlify)(t.slice(9,13)).substring(2),16),o=(0,l.hexlify)(t.slice(13,45)),s=t.slice(45,78);switch((0,l.hexlify)(t.slice(0,4))){case"0x0488b21e":case"0x043587cf":return new to($i,null,(0,l.hexlify)(s),n,o,i,r,null);case"0x0488ade4":case"0x04358394 ":if(0!==s[0])break;return new to($i,(0,l.hexlify)(s.slice(1)),null,n,o,i,r,null)}return Wi.throwArgumentError("invalid extended key","extendedKey","[REDACTED]")}constructor(e,t,r,n,i,o,s,a){if(e!==$i)throw new Error("HDNode constructor cannot be called directly");if(t){const e=new Gn(t);(0,L.defineReadOnly)(this,"privateKey",e.privateKey),(0,L.defineReadOnly)(this,"publicKey",e.compressedPublicKey)}else(0,L.defineReadOnly)(this,"privateKey",null),(0,L.defineReadOnly)(this,"publicKey",(0,l.hexlify)(r));(0,L.defineReadOnly)(this,"parentFingerprint",n),(0,L.defineReadOnly)(this,"fingerprint",(0,l.hexDataSlice)(Mi(Bi(this.publicKey)),0,4)),(0,L.defineReadOnly)(this,"address",ei(this.publicKey)),(0,L.defineReadOnly)(this,"chainCode",i),(0,L.defineReadOnly)(this,"index",o),(0,L.defineReadOnly)(this,"depth",s),null==a?((0,L.defineReadOnly)(this,"mnemonic",null),(0,L.defineReadOnly)(this,"path",null)):"string"==typeof a?((0,L.defineReadOnly)(this,"mnemonic",null),(0,L.defineReadOnly)(this,"path",a)):((0,L.defineReadOnly)(this,"mnemonic",a),(0,L.defineReadOnly)(this,"path",a.path))}}function ro(e,t){t||(t="");const r=vt("mnemonic"+t,ht.NFKD);return Di(vt(e,ht.NFKD),r,2048,64,"sha512")}function no(e,t){t=Xi(t),Wi.checkNormalize();const r=t.split(e);if(r.length%3!=0)throw new Error("invalid mnemonic");const n=(0,l.arrayify)(new Uint8Array(Math.ceil(11*r.length/8)));let i=0;for(let e=0;e<r.length;e++){let o=t.getWordIndex(r[e].normalize("NFKD"));if(-1===o)throw new Error("invalid mnemonic");for(let e=0;e<11;e++)o&1<<10-e&&(n[i>>3]|=1<<7-i%8),i++}const o=32*r.length/3,s=Yi(r.length/3);if(((0,l.arrayify)(Bi(n.slice(0,o/8)))[0]&s)!==(n[n.length-1]&s))throw new Error("invalid checksum");return(0,l.hexlify)(n.slice(0,o/8))}function io(e,t){if(t=Xi(t),(e=(0,l.arrayify)(e)).length%4!=0||e.length<16||e.length>32)throw new Error("invalid entropy");const r=[0];let n=11;for(let t=0;t<e.length;t++)n>8?(r[r.length-1]<<=8,r[r.length-1]|=e[t],n-=8):(r[r.length-1]<<=n,r[r.length-1]|=e[t]>>8-n,r.push(e[t]&(1<<8-n)-1),n+=3);const i=e.length/4,o=(0,l.arrayify)(Bi(e))[0]&Yi(i);return r[r.length-1]<<=i,r[r.length-1]|=o>>8-i,t.join(r.map((e=>t.getWord(e))))}function oo(e,t){try{return no(e,t),!0}catch(e){}return!1}function so(e){return("number"!=typeof e||e<0||e>=Vi||e%1)&&Wi.throwArgumentError("invalid account index","index",e),`m/44'/60'/${e}'/0/0`}l=o("3Yhqu");const ao=new(0,(h=o("2rINa")).Logger)("random/5.7.0");const uo=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==t)return t;throw new Error("unable to locate global object")}();let co=uo.crypto||uo.msCrypto;function lo(e){(e<=0||e>1024||e%1||e!=e)&&ao.throwArgumentError("invalid length","length",e);const t=new Uint8Array(e);return co.getRandomValues(t),(0,l.arrayify)(t)}function ho(e){for(let t=(e=e.slice()).length-1;t>0;t--){const r=Math.floor(Math.random()*(t+1)),n=e[t];e[t]=e[r],e[r]=n}return e}co&&co.getRandomValues||(ao.warn("WARNING: Missing strong random number source"),co={getRandomValues:function(e){return ao.throwError("no secure random source avaialble",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"crypto.getRandomValues"})}});var fo={};!function(e){function t(e){return parseInt(e)===e}function r(e){if(!t(e.length))return!1;for(var r=0;r<e.length;r++)if(!t(e[r])||e[r]<0||e[r]>255)return!1;return!0}function n(e,n){if(e.buffer&&ArrayBuffer.isView(e)&&"Uint8Array"===e.name)return n&&(e=e.slice?e.slice():Array.prototype.slice.call(e)),e;if(Array.isArray(e)){if(!r(e))throw new Error("Array contains invalid value: "+e);return new Uint8Array(e)}if(t(e.length)&&r(e))return new Uint8Array(e);throw new Error("unsupported array-like object")}function i(e){return new Uint8Array(e)}function o(e,t,r,n,i){null==n&&null==i||(e=e.slice?e.slice(n,i):Array.prototype.slice.call(e,n,i)),t.set(e,r)}var s,a={toBytes:function(e){var t=[],r=0;for(e=encodeURI(e);r<e.length;){var i=e.charCodeAt(r++);37===i?(t.push(parseInt(e.substr(r,2),16)),r+=2):t.push(i)}return n(t)},fromBytes:function(e){for(var t=[],r=0;r<e.length;){var n=e[r];n<128?(t.push(String.fromCharCode(n)),r++):n>191&&n<224?(t.push(String.fromCharCode((31&n)<<6|63&e[r+1])),r+=2):(t.push(String.fromCharCode((15&n)<<12|(63&e[r+1])<<6|63&e[r+2])),r+=3)}return t.join("")}},u=(s="0123456789abcdef",{toBytes:function(e){for(var t=[],r=0;r<e.length;r+=2)t.push(parseInt(e.substr(r,2),16));return t},fromBytes:function(e){for(var t=[],r=0;r<e.length;r++){var n=e[r];t.push(s[(240&n)>>4]+s[15&n])}return t.join("")}}),c={16:10,24:12,32:14},l=[1,2,4,8,16,32,64,128,27,54,108,216,171,77,154,47,94,188,99,198,151,53,106,212,179,125,250,239,197,145],h=[99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22],f=[82,9,106,213,48,54,165,56,191,64,163,158,129,243,215,251,124,227,57,130,155,47,255,135,52,142,67,68,196,222,233,203,84,123,148,50,166,194,35,61,238,76,149,11,66,250,195,78,8,46,161,102,40,217,36,178,118,91,162,73,109,139,209,37,114,248,246,100,134,104,152,22,212,164,92,204,93,101,182,146,108,112,72,80,253,237,185,218,94,21,70,87,167,141,157,132,144,216,171,0,140,188,211,10,247,228,88,5,184,179,69,6,208,44,30,143,202,63,15,2,193,175,189,3,1,19,138,107,58,145,17,65,79,103,220,234,151,242,207,206,240,180,230,115,150,172,116,34,231,173,53,133,226,249,55,232,28,117,223,110,71,241,26,113,29,41,197,137,111,183,98,14,170,24,190,27,252,86,62,75,198,210,121,32,154,219,192,254,120,205,90,244,31,221,168,51,136,7,199,49,177,18,16,89,39,128,236,95,96,81,127,169,25,181,74,13,45,229,122,159,147,201,156,239,160,224,59,77,174,42,245,176,200,235,187,60,131,83,153,97,23,43,4,126,186,119,214,38,225,105,20,99,85,33,12,125],d=[3328402341,4168907908,4000806809,4135287693,4294111757,3597364157,3731845041,2445657428,1613770832,33620227,3462883241,1445669757,3892248089,3050821474,1303096294,3967186586,2412431941,528646813,2311702848,4202528135,4026202645,2992200171,2387036105,4226871307,1101901292,3017069671,1604494077,1169141738,597466303,1403299063,3832705686,2613100635,1974974402,3791519004,1033081774,1277568618,1815492186,2118074177,4126668546,2211236943,1748251740,1369810420,3521504564,4193382664,3799085459,2883115123,1647391059,706024767,134480908,2512897874,1176707941,2646852446,806885416,932615841,168101135,798661301,235341577,605164086,461406363,3756188221,3454790438,1311188841,2142417613,3933566367,302582043,495158174,1479289972,874125870,907746093,3698224818,3025820398,1537253627,2756858614,1983593293,3084310113,2108928974,1378429307,3722699582,1580150641,327451799,2790478837,3117535592,0,3253595436,1075847264,3825007647,2041688520,3059440621,3563743934,2378943302,1740553945,1916352843,2487896798,2555137236,2958579944,2244988746,3151024235,3320835882,1336584933,3992714006,2252555205,2588757463,1714631509,293963156,2319795663,3925473552,67240454,4269768577,2689618160,2017213508,631218106,1269344483,2723238387,1571005438,2151694528,93294474,1066570413,563977660,1882732616,4059428100,1673313503,2008463041,2950355573,1109467491,537923632,3858759450,4260623118,3218264685,2177748300,403442708,638784309,3287084079,3193921505,899127202,2286175436,773265209,2479146071,1437050866,4236148354,2050833735,3362022572,3126681063,840505643,3866325909,3227541664,427917720,2655997905,2749160575,1143087718,1412049534,999329963,193497219,2353415882,3354324521,1807268051,672404540,2816401017,3160301282,369822493,2916866934,3688947771,1681011286,1949973070,336202270,2454276571,201721354,1210328172,3093060836,2680341085,3184776046,1135389935,3294782118,965841320,831886756,3554993207,4068047243,3588745010,2345191491,1849112409,3664604599,26054028,2983581028,2622377682,1235855840,3630984372,2891339514,4092916743,3488279077,3395642799,4101667470,1202630377,268961816,1874508501,4034427016,1243948399,1546530418,941366308,1470539505,1941222599,2546386513,3421038627,2715671932,3899946140,1042226977,2521517021,1639824860,227249030,260737669,3765465232,2084453954,1907733956,3429263018,2420656344,100860677,4160157185,470683154,3261161891,1781871967,2924959737,1773779408,394692241,2579611992,974986535,664706745,3655459128,3958962195,731420851,571543859,3530123707,2849626480,126783113,865375399,765172662,1008606754,361203602,3387549984,2278477385,2857719295,1344809080,2782912378,59542671,1503764984,160008576,437062935,1707065306,3622233649,2218934982,3496503480,2185314755,697932208,1512910199,504303377,2075177163,2824099068,1841019862,739644986],p=[2781242211,2230877308,2582542199,2381740923,234877682,3184946027,2984144751,1418839493,1348481072,50462977,2848876391,2102799147,434634494,1656084439,3863849899,2599188086,1167051466,2636087938,1082771913,2281340285,368048890,3954334041,3381544775,201060592,3963727277,1739838676,4250903202,3930435503,3206782108,4149453988,2531553906,1536934080,3262494647,484572669,2923271059,1783375398,1517041206,1098792767,49674231,1334037708,1550332980,4098991525,886171109,150598129,2481090929,1940642008,1398944049,1059722517,201851908,1385547719,1699095331,1587397571,674240536,2704774806,252314885,3039795866,151914247,908333586,2602270848,1038082786,651029483,1766729511,3447698098,2682942837,454166793,2652734339,1951935532,775166490,758520603,3000790638,4004797018,4217086112,4137964114,1299594043,1639438038,3464344499,2068982057,1054729187,1901997871,2534638724,4121318227,1757008337,0,750906861,1614815264,535035132,3363418545,3988151131,3201591914,1183697867,3647454910,1265776953,3734260298,3566750796,3903871064,1250283471,1807470800,717615087,3847203498,384695291,3313910595,3617213773,1432761139,2484176261,3481945413,283769337,100925954,2180939647,4037038160,1148730428,3123027871,3813386408,4087501137,4267549603,3229630528,2315620239,2906624658,3156319645,1215313976,82966005,3747855548,3245848246,1974459098,1665278241,807407632,451280895,251524083,1841287890,1283575245,337120268,891687699,801369324,3787349855,2721421207,3431482436,959321879,1469301956,4065699751,2197585534,1199193405,2898814052,3887750493,724703513,2514908019,2696962144,2551808385,3516813135,2141445340,1715741218,2119445034,2872807568,2198571144,3398190662,700968686,3547052216,1009259540,2041044702,3803995742,487983883,1991105499,1004265696,1449407026,1316239930,504629770,3683797321,168560134,1816667172,3837287516,1570751170,1857934291,4014189740,2797888098,2822345105,2754712981,936633572,2347923833,852879335,1133234376,1500395319,3084545389,2348912013,1689376213,3533459022,3762923945,3034082412,4205598294,133428468,634383082,2949277029,2398386810,3913789102,403703816,3580869306,2297460856,1867130149,1918643758,607656988,4049053350,3346248884,1368901318,600565992,2090982877,2632479860,557719327,3717614411,3697393085,2249034635,2232388234,2430627952,1115438654,3295786421,2865522278,3633334344,84280067,33027830,303828494,2747425121,1600795957,4188952407,3496589753,2434238086,1486471617,658119965,3106381470,953803233,334231800,3005978776,857870609,3151128937,1890179545,2298973838,2805175444,3056442267,574365214,2450884487,550103529,1233637070,4289353045,2018519080,2057691103,2399374476,4166623649,2148108681,387583245,3664101311,836232934,3330556482,3100665960,3280093505,2955516313,2002398509,287182607,3413881008,4238890068,3597515707,975967766],g=[1671808611,2089089148,2006576759,2072901243,4061003762,1807603307,1873927791,3310653893,810573872,16974337,1739181671,729634347,4263110654,3613570519,2883997099,1989864566,3393556426,2191335298,3376449993,2106063485,4195741690,1508618841,1204391495,4027317232,2917941677,3563566036,2734514082,2951366063,2629772188,2767672228,1922491506,3227229120,3082974647,4246528509,2477669779,644500518,911895606,1061256767,4144166391,3427763148,878471220,2784252325,3845444069,4043897329,1905517169,3631459288,827548209,356461077,67897348,3344078279,593839651,3277757891,405286936,2527147926,84871685,2595565466,118033927,305538066,2157648768,3795705826,3945188843,661212711,2999812018,1973414517,152769033,2208177539,745822252,439235610,455947803,1857215598,1525593178,2700827552,1391895634,994932283,3596728278,3016654259,695947817,3812548067,795958831,2224493444,1408607827,3513301457,0,3979133421,543178784,4229948412,2982705585,1542305371,1790891114,3410398667,3201918910,961245753,1256100938,1289001036,1491644504,3477767631,3496721360,4012557807,2867154858,4212583931,1137018435,1305975373,861234739,2241073541,1171229253,4178635257,33948674,2139225727,1357946960,1011120188,2679776671,2833468328,1374921297,2751356323,1086357568,2408187279,2460827538,2646352285,944271416,4110742005,3168756668,3066132406,3665145818,560153121,271589392,4279952895,4077846003,3530407890,3444343245,202643468,322250259,3962553324,1608629855,2543990167,1154254916,389623319,3294073796,2817676711,2122513534,1028094525,1689045092,1575467613,422261273,1939203699,1621147744,2174228865,1339137615,3699352540,577127458,712922154,2427141008,2290289544,1187679302,3995715566,3100863416,339486740,3732514782,1591917662,186455563,3681988059,3762019296,844522546,978220090,169743370,1239126601,101321734,611076132,1558493276,3260915650,3547250131,2901361580,1655096418,2443721105,2510565781,3828863972,2039214713,3878868455,3359869896,928607799,1840765549,2374762893,3580146133,1322425422,2850048425,1823791212,1459268694,4094161908,3928346602,1706019429,2056189050,2934523822,135794696,3134549946,2022240376,628050469,779246638,472135708,2800834470,3032970164,3327236038,3894660072,3715932637,1956440180,522272287,1272813131,3185336765,2340818315,2323976074,1888542832,1044544574,3049550261,1722469478,1222152264,50660867,4127324150,236067854,1638122081,895445557,1475980887,3117443513,2257655686,3243809217,489110045,2662934430,3778599393,4162055160,2561878936,288563729,1773916777,3648039385,2391345038,2493985684,2612407707,505560094,2274497927,3911240169,3460925390,1442818645,678973480,3749357023,2358182796,2717407649,2306869641,219617805,3218761151,3862026214,1120306242,1756942440,1103331905,2578459033,762796589,252780047,2966125488,1425844308,3151392187,372911126],m=[1667474886,2088535288,2004326894,2071694838,4075949567,1802223062,1869591006,3318043793,808472672,16843522,1734846926,724270422,4278065639,3621216949,2880169549,1987484396,3402253711,2189597983,3385409673,2105378810,4210693615,1499065266,1195886990,4042263547,2913856577,3570689971,2728590687,2947541573,2627518243,2762274643,1920112356,3233831835,3082273397,4261223649,2475929149,640051788,909531756,1061110142,4160160501,3435941763,875846760,2779116625,3857003729,4059105529,1903268834,3638064043,825316194,353713962,67374088,3351728789,589522246,3284360861,404236336,2526454071,84217610,2593830191,117901582,303183396,2155911963,3806477791,3958056653,656894286,2998062463,1970642922,151591698,2206440989,741110872,437923380,454765878,1852748508,1515908788,2694904667,1381168804,993742198,3604373943,3014905469,690584402,3823320797,791638366,2223281939,1398011302,3520161977,0,3991743681,538992704,4244381667,2981218425,1532751286,1785380564,3419096717,3200178535,960056178,1246420628,1280103576,1482221744,3486468741,3503319995,4025428677,2863326543,4227536621,1128514950,1296947098,859002214,2240123921,1162203018,4193849577,33687044,2139062782,1347481760,1010582648,2678045221,2829640523,1364325282,2745433693,1077985408,2408548869,2459086143,2644360225,943212656,4126475505,3166494563,3065430391,3671750063,555836226,269496352,4294908645,4092792573,3537006015,3452783745,202118168,320025894,3974901699,1600119230,2543297077,1145359496,387397934,3301201811,2812801621,2122220284,1027426170,1684319432,1566435258,421079858,1936954854,1616945344,2172753945,1330631070,3705438115,572679748,707427924,2425400123,2290647819,1179044492,4008585671,3099120491,336870440,3739122087,1583276732,185277718,3688593069,3772791771,842159716,976899700,168435220,1229577106,101059084,606366792,1549591736,3267517855,3553849021,2897014595,1650632388,2442242105,2509612081,3840161747,2038008818,3890688725,3368567691,926374254,1835907034,2374863873,3587531953,1313788572,2846482505,1819063512,1448540844,4109633523,3941213647,1701162954,2054852340,2930698567,134748176,3132806511,2021165296,623210314,774795868,471606328,2795958615,3031746419,3334885783,3907527627,3722280097,1953799400,522133822,1263263126,3183336545,2341176845,2324333839,1886425312,1044267644,3048588401,1718004428,1212733584,50529542,4143317495,235803164,1633788866,892690282,1465383342,3115962473,2256965911,3250673817,488449850,2661202215,3789633753,4177007595,2560144171,286339874,1768537042,3654906025,2391705863,2492770099,2610673197,505291324,2273808917,3924369609,3469625735,1431699370,673740880,3755965093,2358021891,2711746649,2307489801,218961690,3217021541,3873845719,1111672452,1751693520,1094828930,2576986153,757954394,252645662,2964376443,1414855848,3149649517,370555436],y=[1374988112,2118214995,437757123,975658646,1001089995,530400753,2902087851,1273168787,540080725,2910219766,2295101073,4110568485,1340463100,3307916247,641025152,3043140495,3736164937,632953703,1172967064,1576976609,3274667266,2169303058,2370213795,1809054150,59727847,361929877,3211623147,2505202138,3569255213,1484005843,1239443753,2395588676,1975683434,4102977912,2572697195,666464733,3202437046,4035489047,3374361702,2110667444,1675577880,3843699074,2538681184,1649639237,2976151520,3144396420,4269907996,4178062228,1883793496,2403728665,2497604743,1383856311,2876494627,1917518562,3810496343,1716890410,3001755655,800440835,2261089178,3543599269,807962610,599762354,33778362,3977675356,2328828971,2809771154,4077384432,1315562145,1708848333,101039829,3509871135,3299278474,875451293,2733856160,92987698,2767645557,193195065,1080094634,1584504582,3178106961,1042385657,2531067453,3711829422,1306967366,2438237621,1908694277,67556463,1615861247,429456164,3602770327,2302690252,1742315127,2968011453,126454664,3877198648,2043211483,2709260871,2084704233,4169408201,0,159417987,841739592,504459436,1817866830,4245618683,260388950,1034867998,908933415,168810852,1750902305,2606453969,607530554,202008497,2472011535,3035535058,463180190,2160117071,1641816226,1517767529,470948374,3801332234,3231722213,1008918595,303765277,235474187,4069246893,766945465,337553864,1475418501,2943682380,4003061179,2743034109,4144047775,1551037884,1147550661,1543208500,2336434550,3408119516,3069049960,3102011747,3610369226,1113818384,328671808,2227573024,2236228733,3535486456,2935566865,3341394285,496906059,3702665459,226906860,2009195472,733156972,2842737049,294930682,1206477858,2835123396,2700099354,1451044056,573804783,2269728455,3644379585,2362090238,2564033334,2801107407,2776292904,3669462566,1068351396,742039012,1350078989,1784663195,1417561698,4136440770,2430122216,775550814,2193862645,2673705150,1775276924,1876241833,3475313331,3366754619,270040487,3902563182,3678124923,3441850377,1851332852,3969562369,2203032232,3868552805,2868897406,566021896,4011190502,3135740889,1248802510,3936291284,699432150,832877231,708780849,3332740144,899835584,1951317047,4236429990,3767586992,866637845,4043610186,1106041591,2144161806,395441711,1984812685,1139781709,3433712980,3835036895,2664543715,1282050075,3240894392,1181045119,2640243204,25965917,4203181171,4211818798,3009879386,2463879762,3910161971,1842759443,2597806476,933301370,1509430414,3943906441,3467192302,3076639029,3776767469,2051518780,2631065433,1441952575,404016761,1942435775,1408749034,1610459739,3745345300,2017778566,3400528769,3110650942,941896748,3265478751,371049330,3168937228,675039627,4279080257,967311729,135050206,3635733660,1683407248,2076935265,3576870512,1215061108,3501741890],v=[1347548327,1400783205,3273267108,2520393566,3409685355,4045380933,2880240216,2471224067,1428173050,4138563181,2441661558,636813900,4233094615,3620022987,2149987652,2411029155,1239331162,1730525723,2554718734,3781033664,46346101,310463728,2743944855,3328955385,3875770207,2501218972,3955191162,3667219033,768917123,3545789473,692707433,1150208456,1786102409,2029293177,1805211710,3710368113,3065962831,401639597,1724457132,3028143674,409198410,2196052529,1620529459,1164071807,3769721975,2226875310,486441376,2499348523,1483753576,428819965,2274680428,3075636216,598438867,3799141122,1474502543,711349675,129166120,53458370,2592523643,2782082824,4063242375,2988687269,3120694122,1559041666,730517276,2460449204,4042459122,2706270690,3446004468,3573941694,533804130,2328143614,2637442643,2695033685,839224033,1973745387,957055980,2856345839,106852767,1371368976,4181598602,1033297158,2933734917,1179510461,3046200461,91341917,1862534868,4284502037,605657339,2547432937,3431546947,2003294622,3182487618,2282195339,954669403,3682191598,1201765386,3917234703,3388507166,0,2198438022,1211247597,2887651696,1315723890,4227665663,1443857720,507358933,657861945,1678381017,560487590,3516619604,975451694,2970356327,261314535,3535072918,2652609425,1333838021,2724322336,1767536459,370938394,182621114,3854606378,1128014560,487725847,185469197,2918353863,3106780840,3356761769,2237133081,1286567175,3152976349,4255350624,2683765030,3160175349,3309594171,878443390,1988838185,3704300486,1756818940,1673061617,3403100636,272786309,1075025698,545572369,2105887268,4174560061,296679730,1841768865,1260232239,4091327024,3960309330,3497509347,1814803222,2578018489,4195456072,575138148,3299409036,446754879,3629546796,4011996048,3347532110,3252238545,4270639778,915985419,3483825537,681933534,651868046,2755636671,3828103837,223377554,2607439820,1649704518,3270937875,3901806776,1580087799,4118987695,3198115200,2087309459,2842678573,3016697106,1003007129,2802849917,1860738147,2077965243,164439672,4100872472,32283319,2827177882,1709610350,2125135846,136428751,3874428392,3652904859,3460984630,3572145929,3593056380,2939266226,824852259,818324884,3224740454,930369212,2801566410,2967507152,355706840,1257309336,4148292826,243256656,790073846,2373340630,1296297904,1422699085,3756299780,3818836405,457992840,3099667487,2135319889,77422314,1560382517,1945798516,788204353,1521706781,1385356242,870912086,325965383,2358957921,2050466060,2388260884,2313884476,4006521127,901210569,3990953189,1014646705,1503449823,1062597235,2031621326,3212035895,3931371469,1533017514,350174575,2256028891,2177544179,1052338372,741876788,1606591296,1914052035,213705253,2334669897,1107234197,1899603969,3725069491,2631447780,2422494913,1635502980,1893020342,1950903388,1120974935],w=[2807058932,1699970625,2764249623,1586903591,1808481195,1173430173,1487645946,59984867,4199882800,1844882806,1989249228,1277555970,3623636965,3419915562,1149249077,2744104290,1514790577,459744698,244860394,3235995134,1963115311,4027744588,2544078150,4190530515,1608975247,2627016082,2062270317,1507497298,2200818878,567498868,1764313568,3359936201,2305455554,2037970062,1047239e3,1910319033,1337376481,2904027272,2892417312,984907214,1243112415,830661914,861968209,2135253587,2011214180,2927934315,2686254721,731183368,1750626376,4246310725,1820824798,4172763771,3542330227,48394827,2404901663,2871682645,671593195,3254988725,2073724613,145085239,2280796200,2779915199,1790575107,2187128086,472615631,3029510009,4075877127,3802222185,4107101658,3201631749,1646252340,4270507174,1402811438,1436590835,3778151818,3950355702,3963161475,4020912224,2667994737,273792366,2331590177,104699613,95345982,3175501286,2377486676,1560637892,3564045318,369057872,4213447064,3919042237,1137477952,2658625497,1119727848,2340947849,1530455833,4007360968,172466556,266959938,516552836,0,2256734592,3980931627,1890328081,1917742170,4294704398,945164165,3575528878,958871085,3647212047,2787207260,1423022939,775562294,1739656202,3876557655,2530391278,2443058075,3310321856,547512796,1265195639,437656594,3121275539,719700128,3762502690,387781147,218828297,3350065803,2830708150,2848461854,428169201,122466165,3720081049,1627235199,648017665,4122762354,1002783846,2117360635,695634755,3336358691,4234721005,4049844452,3704280881,2232435299,574624663,287343814,612205898,1039717051,840019705,2708326185,793451934,821288114,1391201670,3822090177,376187827,3113855344,1224348052,1679968233,2361698556,1058709744,752375421,2431590963,1321699145,3519142200,2734591178,188127444,2177869557,3727205754,2384911031,3215212461,2648976442,2450346104,3432737375,1180849278,331544205,3102249176,4150144569,2952102595,2159976285,2474404304,766078933,313773861,2570832044,2108100632,1668212892,3145456443,2013908262,418672217,3070356634,2594734927,1852171925,3867060991,3473416636,3907448597,2614737639,919489135,164948639,2094410160,2997825956,590424639,2486224549,1723872674,3157750862,3399941250,3501252752,3625268135,2555048196,3673637356,1343127501,4130281361,3599595085,2957853679,1297403050,81781910,3051593425,2283490410,532201772,1367295589,3926170974,895287692,1953757831,1093597963,492483431,3528626907,1446242576,1192455638,1636604631,209336225,344873464,1015671571,669961897,3375740769,3857572124,2973530695,3747192018,1933530610,3464042516,935293895,3454686199,2858115069,1863638845,3683022916,4085369519,3292445032,875313188,1080017571,3279033885,621591778,1233856572,2504130317,24197544,3017672716,3835484340,3247465558,2220981195,3060847922,1551124588,1463996600],b=[4104605777,1097159550,396673818,660510266,2875968315,2638606623,4200115116,3808662347,821712160,1986918061,3430322568,38544885,3856137295,718002117,893681702,1654886325,2975484382,3122358053,3926825029,4274053469,796197571,1290801793,1184342925,3556361835,2405426947,2459735317,1836772287,1381620373,3196267988,1948373848,3764988233,3385345166,3263785589,2390325492,1480485785,3111247143,3780097726,2293045232,548169417,3459953789,3746175075,439452389,1362321559,1400849762,1685577905,1806599355,2174754046,137073913,1214797936,1174215055,3731654548,2079897426,1943217067,1258480242,529487843,1437280870,3945269170,3049390895,3313212038,923313619,679998e3,3215307299,57326082,377642221,3474729866,2041877159,133361907,1776460110,3673476453,96392454,878845905,2801699524,777231668,4082475170,2330014213,4142626212,2213296395,1626319424,1906247262,1846563261,562755902,3708173718,1040559837,3871163981,1418573201,3294430577,114585348,1343618912,2566595609,3186202582,1078185097,3651041127,3896688048,2307622919,425408743,3371096953,2081048481,1108339068,2216610296,0,2156299017,736970802,292596766,1517440620,251657213,2235061775,2933202493,758720310,265905162,1554391400,1532285339,908999204,174567692,1474760595,4002861748,2610011675,3234156416,3693126241,2001430874,303699484,2478443234,2687165888,585122620,454499602,151849742,2345119218,3064510765,514443284,4044981591,1963412655,2581445614,2137062819,19308535,1928707164,1715193156,4219352155,1126790795,600235211,3992742070,3841024952,836553431,1669664834,2535604243,3323011204,1243905413,3141400786,4180808110,698445255,2653899549,2989552604,2253581325,3252932727,3004591147,1891211689,2487810577,3915653703,4237083816,4030667424,2100090966,865136418,1229899655,953270745,3399679628,3557504664,4118925222,2061379749,3079546586,2915017791,983426092,2022837584,1607244650,2118541908,2366882550,3635996816,972512814,3283088770,1568718495,3499326569,3576539503,621982671,2895723464,410887952,2623762152,1002142683,645401037,1494807662,2595684844,1335535747,2507040230,4293295786,3167684641,367585007,3885750714,1865862730,2668221674,2960971305,2763173681,1059270954,2777952454,2724642869,1320957812,2194319100,2429595872,2815956275,77089521,3973773121,3444575871,2448830231,1305906550,4021308739,2857194700,2516901860,3518358430,1787304780,740276417,1699839814,1592394909,2352307457,2272556026,188821243,1729977011,3687994002,274084841,3594982253,3613494426,2701949495,4162096729,322734571,2837966542,1640576439,484830689,1202797690,3537852828,4067639125,349075736,3342319475,4157467219,4255800159,1030690015,1155237496,2951971274,1757691577,607398968,2738905026,499347990,3794078908,1011452712,227885567,2818666809,213114376,3034881240,1455525988,3414450555,850817237,1817998408,3092726480],A=[0,235474187,470948374,303765277,941896748,908933415,607530554,708780849,1883793496,2118214995,1817866830,1649639237,1215061108,1181045119,1417561698,1517767529,3767586992,4003061179,4236429990,4069246893,3635733660,3602770327,3299278474,3400528769,2430122216,2664543715,2362090238,2193862645,2835123396,2801107407,3035535058,3135740889,3678124923,3576870512,3341394285,3374361702,3810496343,3977675356,4279080257,4043610186,2876494627,2776292904,3076639029,3110650942,2472011535,2640243204,2403728665,2169303058,1001089995,899835584,666464733,699432150,59727847,226906860,530400753,294930682,1273168787,1172967064,1475418501,1509430414,1942435775,2110667444,1876241833,1641816226,2910219766,2743034109,2976151520,3211623147,2505202138,2606453969,2302690252,2269728455,3711829422,3543599269,3240894392,3475313331,3843699074,3943906441,4178062228,4144047775,1306967366,1139781709,1374988112,1610459739,1975683434,2076935265,1775276924,1742315127,1034867998,866637845,566021896,800440835,92987698,193195065,429456164,395441711,1984812685,2017778566,1784663195,1683407248,1315562145,1080094634,1383856311,1551037884,101039829,135050206,437757123,337553864,1042385657,807962610,573804783,742039012,2531067453,2564033334,2328828971,2227573024,2935566865,2700099354,3001755655,3168937228,3868552805,3902563182,4203181171,4102977912,3736164937,3501741890,3265478751,3433712980,1106041591,1340463100,1576976609,1408749034,2043211483,2009195472,1708848333,1809054150,832877231,1068351396,766945465,599762354,159417987,126454664,361929877,463180190,2709260871,2943682380,3178106961,3009879386,2572697195,2538681184,2236228733,2336434550,3509871135,3745345300,3441850377,3274667266,3910161971,3877198648,4110568485,4211818798,2597806476,2497604743,2261089178,2295101073,2733856160,2902087851,3202437046,2968011453,3936291284,3835036895,4136440770,4169408201,3535486456,3702665459,3467192302,3231722213,2051518780,1951317047,1716890410,1750902305,1113818384,1282050075,1584504582,1350078989,168810852,67556463,371049330,404016761,841739592,1008918595,775550814,540080725,3969562369,3801332234,4035489047,4269907996,3569255213,3669462566,3366754619,3332740144,2631065433,2463879762,2160117071,2395588676,2767645557,2868897406,3102011747,3069049960,202008497,33778362,270040487,504459436,875451293,975658646,675039627,641025152,2084704233,1917518562,1615861247,1851332852,1147550661,1248802510,1484005843,1451044056,933301370,967311729,733156972,632953703,260388950,25965917,328671808,496906059,1206477858,1239443753,1543208500,1441952575,2144161806,1908694277,1675577880,1842759443,3610369226,3644379585,3408119516,3307916247,4011190502,3776767469,4077384432,4245618683,2809771154,2842737049,3144396420,3043140495,2673705150,2438237621,2203032232,2370213795],E=[0,185469197,370938394,487725847,741876788,657861945,975451694,824852259,1483753576,1400783205,1315723890,1164071807,1950903388,2135319889,1649704518,1767536459,2967507152,3152976349,2801566410,2918353863,2631447780,2547432937,2328143614,2177544179,3901806776,3818836405,4270639778,4118987695,3299409036,3483825537,3535072918,3652904859,2077965243,1893020342,1841768865,1724457132,1474502543,1559041666,1107234197,1257309336,598438867,681933534,901210569,1052338372,261314535,77422314,428819965,310463728,3409685355,3224740454,3710368113,3593056380,3875770207,3960309330,4045380933,4195456072,2471224067,2554718734,2237133081,2388260884,3212035895,3028143674,2842678573,2724322336,4138563181,4255350624,3769721975,3955191162,3667219033,3516619604,3431546947,3347532110,2933734917,2782082824,3099667487,3016697106,2196052529,2313884476,2499348523,2683765030,1179510461,1296297904,1347548327,1533017514,1786102409,1635502980,2087309459,2003294622,507358933,355706840,136428751,53458370,839224033,957055980,605657339,790073846,2373340630,2256028891,2607439820,2422494913,2706270690,2856345839,3075636216,3160175349,3573941694,3725069491,3273267108,3356761769,4181598602,4063242375,4011996048,3828103837,1033297158,915985419,730517276,545572369,296679730,446754879,129166120,213705253,1709610350,1860738147,1945798516,2029293177,1239331162,1120974935,1606591296,1422699085,4148292826,4233094615,3781033664,3931371469,3682191598,3497509347,3446004468,3328955385,2939266226,2755636671,3106780840,2988687269,2198438022,2282195339,2501218972,2652609425,1201765386,1286567175,1371368976,1521706781,1805211710,1620529459,2105887268,1988838185,533804130,350174575,164439672,46346101,870912086,954669403,636813900,788204353,2358957921,2274680428,2592523643,2441661558,2695033685,2880240216,3065962831,3182487618,3572145929,3756299780,3270937875,3388507166,4174560061,4091327024,4006521127,3854606378,1014646705,930369212,711349675,560487590,272786309,457992840,106852767,223377554,1678381017,1862534868,1914052035,2031621326,1211247597,1128014560,1580087799,1428173050,32283319,182621114,401639597,486441376,768917123,651868046,1003007129,818324884,1503449823,1385356242,1333838021,1150208456,1973745387,2125135846,1673061617,1756818940,2970356327,3120694122,2802849917,2887651696,2637442643,2520393566,2334669897,2149987652,3917234703,3799141122,4284502037,4100872472,3309594171,3460984630,3545789473,3629546796,2050466060,1899603969,1814803222,1730525723,1443857720,1560382517,1075025698,1260232239,575138148,692707433,878443390,1062597235,243256656,91341917,409198410,325965383,3403100636,3252238545,3704300486,3620022987,3874428392,3990953189,4042459122,4227665663,2460449204,2578018489,2226875310,2411029155,3198115200,3046200461,2827177882,2743944855],x=[0,218828297,437656594,387781147,875313188,958871085,775562294,590424639,1750626376,1699970625,1917742170,2135253587,1551124588,1367295589,1180849278,1265195639,3501252752,3720081049,3399941250,3350065803,3835484340,3919042237,4270507174,4085369519,3102249176,3051593425,2734591178,2952102595,2361698556,2177869557,2530391278,2614737639,3145456443,3060847922,2708326185,2892417312,2404901663,2187128086,2504130317,2555048196,3542330227,3727205754,3375740769,3292445032,3876557655,3926170974,4246310725,4027744588,1808481195,1723872674,1910319033,2094410160,1608975247,1391201670,1173430173,1224348052,59984867,244860394,428169201,344873464,935293895,984907214,766078933,547512796,1844882806,1627235199,2011214180,2062270317,1507497298,1423022939,1137477952,1321699145,95345982,145085239,532201772,313773861,830661914,1015671571,731183368,648017665,3175501286,2957853679,2807058932,2858115069,2305455554,2220981195,2474404304,2658625497,3575528878,3625268135,3473416636,3254988725,3778151818,3963161475,4213447064,4130281361,3599595085,3683022916,3432737375,3247465558,3802222185,4020912224,4172763771,4122762354,3201631749,3017672716,2764249623,2848461854,2331590177,2280796200,2431590963,2648976442,104699613,188127444,472615631,287343814,840019705,1058709744,671593195,621591778,1852171925,1668212892,1953757831,2037970062,1514790577,1463996600,1080017571,1297403050,3673637356,3623636965,3235995134,3454686199,4007360968,3822090177,4107101658,4190530515,2997825956,3215212461,2830708150,2779915199,2256734592,2340947849,2627016082,2443058075,172466556,122466165,273792366,492483431,1047239e3,861968209,612205898,695634755,1646252340,1863638845,2013908262,1963115311,1446242576,1530455833,1277555970,1093597963,1636604631,1820824798,2073724613,1989249228,1436590835,1487645946,1337376481,1119727848,164948639,81781910,331544205,516552836,1039717051,821288114,669961897,719700128,2973530695,3157750862,2871682645,2787207260,2232435299,2283490410,2667994737,2450346104,3647212047,3564045318,3279033885,3464042516,3980931627,3762502690,4150144569,4199882800,3070356634,3121275539,2904027272,2686254721,2200818878,2384911031,2570832044,2486224549,3747192018,3528626907,3310321856,3359936201,3950355702,3867060991,4049844452,4234721005,1739656202,1790575107,2108100632,1890328081,1402811438,1586903591,1233856572,1149249077,266959938,48394827,369057872,418672217,1002783846,919489135,567498868,752375421,209336225,24197544,376187827,459744698,945164165,895287692,574624663,793451934,1679968233,1764313568,2117360635,1933530610,1343127501,1560637892,1243112415,1192455638,3704280881,3519142200,3336358691,3419915562,3907448597,3857572124,4075877127,4294704398,3029510009,3113855344,2927934315,2744104290,2159976285,2377486676,2594734927,2544078150],S=[0,151849742,303699484,454499602,607398968,758720310,908999204,1059270954,1214797936,1097159550,1517440620,1400849762,1817998408,1699839814,2118541908,2001430874,2429595872,2581445614,2194319100,2345119218,3034881240,3186202582,2801699524,2951971274,3635996816,3518358430,3399679628,3283088770,4237083816,4118925222,4002861748,3885750714,1002142683,850817237,698445255,548169417,529487843,377642221,227885567,77089521,1943217067,2061379749,1640576439,1757691577,1474760595,1592394909,1174215055,1290801793,2875968315,2724642869,3111247143,2960971305,2405426947,2253581325,2638606623,2487810577,3808662347,3926825029,4044981591,4162096729,3342319475,3459953789,3576539503,3693126241,1986918061,2137062819,1685577905,1836772287,1381620373,1532285339,1078185097,1229899655,1040559837,923313619,740276417,621982671,439452389,322734571,137073913,19308535,3871163981,4021308739,4104605777,4255800159,3263785589,3414450555,3499326569,3651041127,2933202493,2815956275,3167684641,3049390895,2330014213,2213296395,2566595609,2448830231,1305906550,1155237496,1607244650,1455525988,1776460110,1626319424,2079897426,1928707164,96392454,213114376,396673818,514443284,562755902,679998e3,865136418,983426092,3708173718,3557504664,3474729866,3323011204,4180808110,4030667424,3945269170,3794078908,2507040230,2623762152,2272556026,2390325492,2975484382,3092726480,2738905026,2857194700,3973773121,3856137295,4274053469,4157467219,3371096953,3252932727,3673476453,3556361835,2763173681,2915017791,3064510765,3215307299,2156299017,2307622919,2459735317,2610011675,2081048481,1963412655,1846563261,1729977011,1480485785,1362321559,1243905413,1126790795,878845905,1030690015,645401037,796197571,274084841,425408743,38544885,188821243,3613494426,3731654548,3313212038,3430322568,4082475170,4200115116,3780097726,3896688048,2668221674,2516901860,2366882550,2216610296,3141400786,2989552604,2837966542,2687165888,1202797690,1320957812,1437280870,1554391400,1669664834,1787304780,1906247262,2022837584,265905162,114585348,499347990,349075736,736970802,585122620,972512814,821712160,2595684844,2478443234,2293045232,2174754046,3196267988,3079546586,2895723464,2777952454,3537852828,3687994002,3234156416,3385345166,4142626212,4293295786,3841024952,3992742070,174567692,57326082,410887952,292596766,777231668,660510266,1011452712,893681702,1108339068,1258480242,1343618912,1494807662,1715193156,1865862730,1948373848,2100090966,2701949495,2818666809,3004591147,3122358053,2235061775,2352307457,2535604243,2653899549,3915653703,3764988233,4219352155,4067639125,3444575871,3294430577,3746175075,3594982253,836553431,953270745,600235211,718002117,367585007,484830689,133361907,251657213,2041877159,1891211689,1806599355,1654886325,1568718495,1418573201,1335535747,1184342925];function C(e){for(var t=[],r=0;r<e.length;r+=4)t.push(e[r]<<24|e[r+1]<<16|e[r+2]<<8|e[r+3]);return t}var k=function(e){if(!(this instanceof k))throw Error("AES must be instanitated with `new`");Object.defineProperty(this,"key",{value:n(e,!0)}),this._prepare()};k.prototype._prepare=function(){var e=c[this.key.length];if(null==e)throw new Error("invalid key size (must be 16, 24 or 32 bytes)");this._Ke=[],this._Kd=[];for(var t=0;t<=e;t++)this._Ke.push([0,0,0,0]),this._Kd.push([0,0,0,0]);var r,n=4*(e+1),i=this.key.length/4,o=C(this.key);for(t=0;t<i;t++)r=t>>2,this._Ke[r][t%4]=o[t],this._Kd[e-r][t%4]=o[t];for(var s,a=0,u=i;u<n;){if(s=o[i-1],o[0]^=h[s>>16&255]<<24^h[s>>8&255]<<16^h[255&s]<<8^h[s>>24&255]^l[a]<<24,a+=1,8!=i)for(t=1;t<i;t++)o[t]^=o[t-1];else{for(t=1;t<i/2;t++)o[t]^=o[t-1];s=o[i/2-1],o[i/2]^=h[255&s]^h[s>>8&255]<<8^h[s>>16&255]<<16^h[s>>24&255]<<24;for(t=i/2+1;t<i;t++)o[t]^=o[t-1]}for(t=0;t<i&&u<n;)f=u>>2,d=u%4,this._Ke[f][d]=o[t],this._Kd[e-f][d]=o[t++],u++}for(var f=1;f<e;f++)for(var d=0;d<4;d++)s=this._Kd[f][d],this._Kd[f][d]=A[s>>24&255]^E[s>>16&255]^x[s>>8&255]^S[255&s]},k.prototype.encrypt=function(e){if(16!=e.length)throw new Error("invalid plaintext size (must be 16 bytes)");for(var t=this._Ke.length-1,r=[0,0,0,0],n=C(e),o=0;o<4;o++)n[o]^=this._Ke[0][o];for(var s=1;s<t;s++){for(o=0;o<4;o++)r[o]=d[n[o]>>24&255]^p[n[(o+1)%4]>>16&255]^g[n[(o+2)%4]>>8&255]^m[255&n[(o+3)%4]]^this._Ke[s][o];n=r.slice()}var a,u=i(16);for(o=0;o<4;o++)a=this._Ke[t][o],u[4*o]=255&(h[n[o]>>24&255]^a>>24),u[4*o+1]=255&(h[n[(o+1)%4]>>16&255]^a>>16),u[4*o+2]=255&(h[n[(o+2)%4]>>8&255]^a>>8),u[4*o+3]=255&(h[255&n[(o+3)%4]]^a);return u},k.prototype.decrypt=function(e){if(16!=e.length)throw new Error("invalid ciphertext size (must be 16 bytes)");for(var t=this._Kd.length-1,r=[0,0,0,0],n=C(e),o=0;o<4;o++)n[o]^=this._Kd[0][o];for(var s=1;s<t;s++){for(o=0;o<4;o++)r[o]=y[n[o]>>24&255]^v[n[(o+3)%4]>>16&255]^w[n[(o+2)%4]>>8&255]^b[255&n[(o+1)%4]]^this._Kd[s][o];n=r.slice()}var a,u=i(16);for(o=0;o<4;o++)a=this._Kd[t][o],u[4*o]=255&(f[n[o]>>24&255]^a>>24),u[4*o+1]=255&(f[n[(o+3)%4]>>16&255]^a>>16),u[4*o+2]=255&(f[n[(o+2)%4]>>8&255]^a>>8),u[4*o+3]=255&(f[255&n[(o+1)%4]]^a);return u};var _=function(e){if(!(this instanceof _))throw Error("AES must be instanitated with `new`");this.description="Electronic Code Block",this.name="ecb",this._aes=new k(e)};_.prototype.encrypt=function(e){if((e=n(e)).length%16!=0)throw new Error("invalid plaintext size (must be multiple of 16 bytes)");for(var t=i(e.length),r=i(16),s=0;s<e.length;s+=16)o(e,r,0,s,s+16),o(r=this._aes.encrypt(r),t,s);return t},_.prototype.decrypt=function(e){if((e=n(e)).length%16!=0)throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");for(var t=i(e.length),r=i(16),s=0;s<e.length;s+=16)o(e,r,0,s,s+16),o(r=this._aes.decrypt(r),t,s);return t};var P=function(e,t){if(!(this instanceof P))throw Error("AES must be instanitated with `new`");if(this.description="Cipher Block Chaining",this.name="cbc",t){if(16!=t.length)throw new Error("invalid initialation vector size (must be 16 bytes)")}else t=i(16);this._lastCipherblock=n(t,!0),this._aes=new k(e)};P.prototype.encrypt=function(e){if((e=n(e)).length%16!=0)throw new Error("invalid plaintext size (must be multiple of 16 bytes)");for(var t=i(e.length),r=i(16),s=0;s<e.length;s+=16){o(e,r,0,s,s+16);for(var a=0;a<16;a++)r[a]^=this._lastCipherblock[a];this._lastCipherblock=this._aes.encrypt(r),o(this._lastCipherblock,t,s)}return t},P.prototype.decrypt=function(e){if((e=n(e)).length%16!=0)throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");for(var t=i(e.length),r=i(16),s=0;s<e.length;s+=16){o(e,r,0,s,s+16),r=this._aes.decrypt(r);for(var a=0;a<16;a++)t[s+a]=r[a]^this._lastCipherblock[a];o(e,this._lastCipherblock,0,s,s+16)}return t};var R=function(e,t,r){if(!(this instanceof R))throw Error("AES must be instanitated with `new`");if(this.description="Cipher Feedback",this.name="cfb",t){if(16!=t.length)throw new Error("invalid initialation vector size (must be 16 size)")}else t=i(16);r||(r=1),this.segmentSize=r,this._shiftRegister=n(t,!0),this._aes=new k(e)};R.prototype.encrypt=function(e){if(e.length%this.segmentSize!=0)throw new Error("invalid plaintext size (must be segmentSize bytes)");for(var t,r=n(e,!0),i=0;i<r.length;i+=this.segmentSize){t=this._aes.encrypt(this._shiftRegister);for(var s=0;s<this.segmentSize;s++)r[i+s]^=t[s];o(this._shiftRegister,this._shiftRegister,0,this.segmentSize),o(r,this._shiftRegister,16-this.segmentSize,i,i+this.segmentSize)}return r},R.prototype.decrypt=function(e){if(e.length%this.segmentSize!=0)throw new Error("invalid ciphertext size (must be segmentSize bytes)");for(var t,r=n(e,!0),i=0;i<r.length;i+=this.segmentSize){t=this._aes.encrypt(this._shiftRegister);for(var s=0;s<this.segmentSize;s++)r[i+s]^=t[s];o(this._shiftRegister,this._shiftRegister,0,this.segmentSize),o(e,this._shiftRegister,16-this.segmentSize,i,i+this.segmentSize)}return r};var O=function(e,t){if(!(this instanceof O))throw Error("AES must be instanitated with `new`");if(this.description="Output Feedback",this.name="ofb",t){if(16!=t.length)throw new Error("invalid initialation vector size (must be 16 bytes)")}else t=i(16);this._lastPrecipher=n(t,!0),this._lastPrecipherIndex=16,this._aes=new k(e)};O.prototype.encrypt=function(e){for(var t=n(e,!0),r=0;r<t.length;r++)16===this._lastPrecipherIndex&&(this._lastPrecipher=this._aes.encrypt(this._lastPrecipher),this._lastPrecipherIndex=0),t[r]^=this._lastPrecipher[this._lastPrecipherIndex++];return t},O.prototype.decrypt=O.prototype.encrypt;var N=function(e){if(!(this instanceof N))throw Error("Counter must be instanitated with `new`");0===e||e||(e=1),"number"==typeof e?(this._counter=i(16),this.setValue(e)):this.setBytes(e)};N.prototype.setValue=function(e){if("number"!=typeof e||parseInt(e)!=e)throw new Error("invalid counter value (must be an integer)");for(var t=15;t>=0;--t)this._counter[t]=e%256,e>>=8},N.prototype.setBytes=function(e){if(16!=(e=n(e,!0)).length)throw new Error("invalid counter bytes size (must be 16 bytes)");this._counter=e},N.prototype.increment=function(){for(var e=15;e>=0;e--){if(255!==this._counter[e]){this._counter[e]++;break}this._counter[e]=0}};var I=function(e,t){if(!(this instanceof I))throw Error("AES must be instanitated with `new`");this.description="Counter",this.name="ctr",t instanceof N||(t=new N(t)),this._counter=t,this._remainingCounter=null,this._remainingCounterIndex=16,this._aes=new k(e)};I.prototype.encrypt=function(e){for(var t=n(e,!0),r=0;r<t.length;r++)16===this._remainingCounterIndex&&(this._remainingCounter=this._aes.encrypt(this._counter._counter),this._remainingCounterIndex=0,this._counter.increment()),t[r]^=this._remainingCounter[this._remainingCounterIndex++];return t},I.prototype.decrypt=I.prototype.encrypt,fo={AES:k,Counter:N,ModeOfOperation:{ecb:_,cbc:P,cfb:R,ofb:O,ctr:I},utils:{hex:u,utf8:a},padding:{pkcs7:{pad:function(e){var t=16-(e=n(e,!0)).length%16,r=i(e.length+t);o(e,r);for(var s=e.length;s<r.length;s++)r[s]=t;return r},strip:function(e){if((e=n(e,!0)).length<16)throw new Error("PKCS#7 invalid length");var t=e[e.length-1];if(t>16)throw new Error("PKCS#7 padding byte out of range");for(var r=e.length-t,s=0;s<t;s++)if(e[r+s]!==t)throw new Error("PKCS#7 invalid padding byte");var a=i(r);return o(e,a,0,0,r),a}}},_arrayTest:{coerceArray:n,createArray:i,copyArray:o}}}();l=o("3Yhqu"),h=o("2rINa");const po="json-wallets/5.7.0";l=o("3Yhqu");function go(e){return"string"==typeof e&&"0x"!==e.substring(0,2)&&(e="0x"+e),(0,l.arrayify)(e)}function mo(e,t){for(e=String(e);e.length<t;)e="0"+e;return e}function yo(e){return"string"==typeof e?vt(e,ht.NFKC):(0,l.arrayify)(e)}function vo(e,t){let r=e;const n=t.toLowerCase().split("/");for(let e=0;e<n.length;e++){let t=null;for(const i in r)if(i.toLowerCase()===n[e]){t=r[i];break}if(null===t)return null;r=t}return r}function wo(e){const t=(0,l.arrayify)(e);t[6]=15&t[6]|64,t[8]=63&t[8]|128;const r=(0,l.hexlify)(t);return[r.substring(2,10),r.substring(10,14),r.substring(14,18),r.substring(18,22),r.substring(22,34)].join("-")}const bo=new(0,h.Logger)(po);class Ao extends L.Description{isCrowdsaleAccount(e){return!(!e||!e._isCrowdsaleAccount)}}function Eo(e,t){const n=JSON.parse(e);t=yo(t);const i=Be(vo(n,"ethaddr")),o=go(vo(n,"encseed"));o&&o.length%16==0||bo.throwArgumentError("invalid encseed","json",e);const s=(0,l.arrayify)(Di(t,t,2e3,32,"sha256")).slice(0,16),a=o.slice(0,16),u=o.slice(16),c=new(r(fo).ModeOfOperation.cbc)(s,a),h=r(fo).padding.pkcs7.strip((0,l.arrayify)(c.decrypt(u)));let f="";for(let e=0;e<h.length;e++)f+=String.fromCharCode(h[e]);const d=_e(vt(f));return new Ao({_isCrowdsaleAccount:!0,address:i,privateKey:d})}function xo(e){let t=null;try{t=JSON.parse(e)}catch(e){return!1}return t.encseed&&t.ethaddr}function So(e){let t=null;try{t=JSON.parse(e)}catch(e){return!1}return!(!t.version||parseInt(t.version)!==t.version||3!==parseInt(t.version))}function Co(e){if(xo(e))try{return Be(JSON.parse(e).ethaddr)}catch(e){return null}if(So(e))try{return Be(JSON.parse(e).address)}catch(e){return null}return null}var ko={};e(ko,"decryptSync",(function(){return Fo}),(function(e){return Fo=e})),e(ko,"decrypt",(function(){return Lo}),(function(e){return Lo=e})),e(ko,"encrypt",(function(){return Do}),(function(e){return Do=e}));var _o={};!function(e){const t=2147483647;function r(e){const t=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]);let r=1779033703,n=3144134277,i=1013904242,o=2773480762,s=1359893119,a=2600822924,u=528734635,c=1541459225;const l=new Uint32Array(64);function h(e){let h=0,f=e.length;for(;f>=64;){let d,p,g,m,y,v=r,w=n,b=i,A=o,E=s,x=a,S=u,C=c;for(p=0;p<16;p++)g=h+4*p,l[p]=(255&e[g])<<24|(255&e[g+1])<<16|(255&e[g+2])<<8|255&e[g+3];for(p=16;p<64;p++)d=l[p-2],m=(d>>>17|d<<15)^(d>>>19|d<<13)^d>>>10,d=l[p-15],y=(d>>>7|d<<25)^(d>>>18|d<<14)^d>>>3,l[p]=(m+l[p-7]|0)+(y+l[p-16]|0)|0;for(p=0;p<64;p++)m=(((E>>>6|E<<26)^(E>>>11|E<<21)^(E>>>25|E<<7))+(E&x^~E&S)|0)+(C+(t[p]+l[p]|0)|0)|0,y=((v>>>2|v<<30)^(v>>>13|v<<19)^(v>>>22|v<<10))+(v&w^v&b^w&b)|0,C=S,S=x,x=E,E=A+m|0,A=b,b=w,w=v,v=m+y|0;r=r+v|0,n=n+w|0,i=i+b|0,o=o+A|0,s=s+E|0,a=a+x|0,u=u+S|0,c=c+C|0,h+=64,f-=64}}h(e);let f,d=e.length%64,p=e.length/536870912|0,g=e.length<<3,m=d<56?56:120,y=e.slice(e.length-d,e.length);for(y.push(128),f=d+1;f<m;f++)y.push(0);return y.push(p>>>24&255),y.push(p>>>16&255),y.push(p>>>8&255),y.push(p>>>0&255),y.push(g>>>24&255),y.push(g>>>16&255),y.push(g>>>8&255),y.push(g>>>0&255),h(y),[r>>>24&255,r>>>16&255,r>>>8&255,r>>>0&255,n>>>24&255,n>>>16&255,n>>>8&255,n>>>0&255,i>>>24&255,i>>>16&255,i>>>8&255,i>>>0&255,o>>>24&255,o>>>16&255,o>>>8&255,o>>>0&255,s>>>24&255,s>>>16&255,s>>>8&255,s>>>0&255,a>>>24&255,a>>>16&255,a>>>8&255,a>>>0&255,u>>>24&255,u>>>16&255,u>>>8&255,u>>>0&255,c>>>24&255,c>>>16&255,c>>>8&255,c>>>0&255]}function n(e,t,n){e=e.length<=64?e:r(e);const i=64+t.length+4,o=new Array(i),s=new Array(64);let a,u=[];for(a=0;a<64;a++)o[a]=54;for(a=0;a<e.length;a++)o[a]^=e[a];for(a=0;a<t.length;a++)o[64+a]=t[a];for(a=i-4;a<i;a++)o[a]=0;for(a=0;a<64;a++)s[a]=92;for(a=0;a<e.length;a++)s[a]^=e[a];function c(){for(let e=i-1;e>=i-4;e--){if(o[e]++,o[e]<=255)return;o[e]=0}}for(;n>=32;)c(),u=u.concat(r(s.concat(r(o)))),n-=32;return n>0&&(c(),u=u.concat(r(s.concat(r(o))).slice(0,n))),u}function i(e,t,r,n,i){let o;for(u(e,16*(2*r-1),i,0,16),o=0;o<2*r;o++)a(e,16*o,i,16),s(i,n),u(i,0,e,t+16*o,16);for(o=0;o<r;o++)u(e,t+32*o,e,16*o,16);for(o=0;o<r;o++)u(e,t+16*(2*o+1),e,16*(o+r),16)}function o(e,t){return e<<t|e>>>32-t}function s(e,t){u(e,0,t,0,16);for(let e=8;e>0;e-=2)t[4]^=o(t[0]+t[12],7),t[8]^=o(t[4]+t[0],9),t[12]^=o(t[8]+t[4],13),t[0]^=o(t[12]+t[8],18),t[9]^=o(t[5]+t[1],7),t[13]^=o(t[9]+t[5],9),t[1]^=o(t[13]+t[9],13),t[5]^=o(t[1]+t[13],18),t[14]^=o(t[10]+t[6],7),t[2]^=o(t[14]+t[10],9),t[6]^=o(t[2]+t[14],13),t[10]^=o(t[6]+t[2],18),t[3]^=o(t[15]+t[11],7),t[7]^=o(t[3]+t[15],9),t[11]^=o(t[7]+t[3],13),t[15]^=o(t[11]+t[7],18),t[1]^=o(t[0]+t[3],7),t[2]^=o(t[1]+t[0],9),t[3]^=o(t[2]+t[1],13),t[0]^=o(t[3]+t[2],18),t[6]^=o(t[5]+t[4],7),t[7]^=o(t[6]+t[5],9),t[4]^=o(t[7]+t[6],13),t[5]^=o(t[4]+t[7],18),t[11]^=o(t[10]+t[9],7),t[8]^=o(t[11]+t[10],9),t[9]^=o(t[8]+t[11],13),t[10]^=o(t[9]+t[8],18),t[12]^=o(t[15]+t[14],7),t[13]^=o(t[12]+t[15],9),t[14]^=o(t[13]+t[12],13),t[15]^=o(t[14]+t[13],18);for(let r=0;r<16;++r)e[r]+=t[r]}function a(e,t,r,n){for(let i=0;i<n;i++)r[i]^=e[t+i]}function u(e,t,r,n,i){for(;i--;)r[n++]=e[t++]}function c(e){if(!e||"number"!=typeof e.length)return!1;for(let t=0;t<e.length;t++){const r=e[t];if("number"!=typeof r||r%1||r<0||r>=256)return!1}return!0}function l(e,t){if("number"!=typeof e||e%1)throw new Error("invalid "+t);return e}function h(e,r,o,s,h,f,d){if(o=l(o,"N"),s=l(s,"r"),h=l(h,"p"),f=l(f,"dkLen"),0===o||0!=(o&o-1))throw new Error("N must be power of 2");if(o>t/128/s)throw new Error("N too large");if(s>t/128/h)throw new Error("r too large");if(!c(e))throw new Error("password must be an array or buffer");if(e=Array.prototype.slice.call(e),!c(r))throw new Error("salt must be an array or buffer");r=Array.prototype.slice.call(r);let p=n(e,r,128*h*s);const g=new Uint32Array(32*h*s);for(let e=0;e<g.length;e++){const t=4*e;g[e]=(255&p[t+3])<<24|(255&p[t+2])<<16|(255&p[t+1])<<8|(255&p[t+0])<<0}const m=new Uint32Array(64*s),y=new Uint32Array(32*s*o),v=32*s,w=new Uint32Array(16),b=new Uint32Array(16),A=h*o*2;let E,x,S=0,C=null,k=!1,_=0,P=0;const R=d?parseInt(1e3/s):4294967295,O="undefined"!=typeof setImmediate?setImmediate:setTimeout,N=function(){if(k)return d(new Error("cancelled"),S/A);let t;switch(_){case 0:x=32*P*s,u(g,x,m,0,v),_=1,E=0;case 1:t=o-E,t>R&&(t=R);for(let e=0;e<t;e++)u(m,0,y,(E+e)*v,v),i(m,v,s,w,b);if(E+=t,S+=t,d){const e=parseInt(1e3*S/A);if(e!==C){if(k=d(null,S/A),k)break;C=e}}if(E<o)break;E=0,_=2;case 2:t=o-E,t>R&&(t=R);for(let e=0;e<t;e++){const e=m[16*(2*s-1)]&o-1;a(y,e*v,m,v),i(m,v,s,w,b)}if(E+=t,S+=t,d){const e=parseInt(1e3*S/A);if(e!==C){if(k=d(null,S/A),k)break;C=e}}if(E<o)break;if(u(m,0,g,x,v),P++,P<h){_=0;break}p=[];for(let e=0;e<g.length;e++)p.push(g[e]>>0&255),p.push(g[e]>>8&255),p.push(g[e]>>16&255),p.push(g[e]>>24&255);const r=n(e,p,f);return d&&d(null,1,r),r}d&&O(N)};if(!d)for(;;){const e=N();if(null!=e)return e}N()}const f={scrypt:function(e,t,r,n,i,o,s){return new Promise((function(a,u){let c=0;s&&s(0),h(e,t,r,n,i,o,(function(e,t,r){if(e)u(e);else if(r)s&&1!==c&&s(1),a(new Uint8Array(r));else if(s&&t!==c)return c=t,s(t)}))}))},syncScrypt:function(e,t,r,n,i,o){return new Uint8Array(h(e,t,r,n,i,o))}};void 0!==_o?_o=f:"function"==typeof define&&define.amd?define(f):e&&(e.scrypt&&(e._scrypt=e.scrypt),e.scrypt=f)}(_o);l=o("3Yhqu"),h=o("2rINa");var Po=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))};const Ro=new(0,h.Logger)(po);function Oo(e){return null!=e&&e.mnemonic&&e.mnemonic.phrase}class No extends L.Description{isKeystoreAccount(e){return!(!e||!e._isKeystoreAccount)}}function Io(e,t){const n=go(vo(e,"crypto/ciphertext"));if((0,l.hexlify)(_e((0,l.concat)([t.slice(16,32),n]))).substring(2)!==vo(e,"crypto/mac").toLowerCase())throw new Error("invalid password");const i=function(e,t,n){if("aes-128-ctr"===vo(e,"crypto/cipher")){const i=go(vo(e,"crypto/cipherparams/iv")),o=new(r(fo).Counter)(i),s=new(r(fo).ModeOfOperation.ctr)(t,o);return(0,l.arrayify)(s.decrypt(n))}return null}(e,t.slice(0,16),n);i||Ro.throwError("unsupported cipher",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"decrypt"});const o=t.slice(32,64),s=ei(i);if(e.address){let t=e.address.toLowerCase();if("0x"!==t.substring(0,2)&&(t="0x"+t),Be(t)!==s)throw new Error("address mismatch")}const a={_isKeystoreAccount:!0,address:s,privateKey:(0,l.hexlify)(i)};if("0.1"===vo(e,"x-ethers/version")){const t=go(vo(e,"x-ethers/mnemonicCiphertext")),n=go(vo(e,"x-ethers/mnemonicCounter")),i=new(r(fo).Counter)(n),s=new(r(fo).ModeOfOperation.ctr)(o,i),u=vo(e,"x-ethers/path")||eo,c=vo(e,"x-ethers/locale")||"en",f=(0,l.arrayify)(s.decrypt(t));try{const e=io(f,c),t=to.fromMnemonic(e,null,c).derivePath(u);if(t.privateKey!=a.privateKey)throw new Error("mnemonic mismatch");a.mnemonic=t.mnemonic}catch(e){if(e.code!==h.Logger.errors.INVALID_ARGUMENT||"wordlist"!==e.argument)throw e}}return new No(a)}function To(e,t,r,n,i){return(0,l.arrayify)(Di(e,t,r,n,i))}function Mo(e,t,r,n,i){return Promise.resolve(To(e,t,r,n,i))}function Bo(e,t,r,n,i){const o=yo(t),s=vo(e,"crypto/kdf");if(s&&"string"==typeof s){const t=function(e,t){return Ro.throwArgumentError("invalid key-derivation function parameters",e,t)};if("scrypt"===s.toLowerCase()){const r=go(vo(e,"crypto/kdfparams/salt")),a=parseInt(vo(e,"crypto/kdfparams/n")),u=parseInt(vo(e,"crypto/kdfparams/r")),c=parseInt(vo(e,"crypto/kdfparams/p"));a&&u&&c||t("kdf",s),0!=(a&a-1)&&t("N",a);const l=parseInt(vo(e,"crypto/kdfparams/dklen"));return 32!==l&&t("dklen",l),n(o,r,a,u,c,64,i)}if("pbkdf2"===s.toLowerCase()){const n=go(vo(e,"crypto/kdfparams/salt"));let i=null;const s=vo(e,"crypto/kdfparams/prf");"hmac-sha256"===s?i="sha256":"hmac-sha512"===s?i="sha512":t("prf",s);const a=parseInt(vo(e,"crypto/kdfparams/c")),u=parseInt(vo(e,"crypto/kdfparams/dklen"));return 32!==u&&t("dklen",u),r(o,n,a,u,i)}}return Ro.throwArgumentError("unsupported key-derivation function","kdf",s)}function Fo(e,t){const n=JSON.parse(e);return Io(n,Bo(n,t,To,r(_o).syncScrypt))}function Lo(e,t,n){return Po(this,void 0,void 0,(function*(){const i=JSON.parse(e);return Io(i,yield Bo(i,t,Mo,r(_o).scrypt,n))}))}function Do(e,t,n,i){try{if(Be(e.address)!==ei(e.privateKey))throw new Error("address/privateKey mismatch");if(Oo(e)){const t=e.mnemonic;if(to.fromMnemonic(t.phrase,null,t.locale).derivePath(t.path||eo).privateKey!=e.privateKey)throw new Error("mnemonic mismatch")}}catch(e){return Promise.reject(e)}"function"!=typeof n||i||(i=n,n={}),n||(n={});const o=(0,l.arrayify)(e.privateKey),s=yo(t);let a=null,u=null,c=null;if(Oo(e)){const t=e.mnemonic;a=(0,l.arrayify)(no(t.phrase,t.locale||"en")),u=t.path||eo,c=t.locale||"en"}let h=n.client;h||(h="ethers.js");let f=null;f=n.salt?(0,l.arrayify)(n.salt):lo(32);let d=null;if(n.iv){if(d=(0,l.arrayify)(n.iv),16!==d.length)throw new Error("invalid iv")}else d=lo(16);let p=null;if(n.uuid){if(p=(0,l.arrayify)(n.uuid),16!==p.length)throw new Error("invalid uuid")}else p=lo(16);let g=131072,m=8,y=1;return n.scrypt&&(n.scrypt.N&&(g=n.scrypt.N),n.scrypt.r&&(m=n.scrypt.r),n.scrypt.p&&(y=n.scrypt.p)),r(_o).scrypt(s,f,g,m,y,64,i).then((t=>{const n=(t=(0,l.arrayify)(t)).slice(0,16),i=t.slice(16,32),s=t.slice(32,64),v=new(r(fo).Counter)(d),w=new(r(fo).ModeOfOperation.ctr)(n,v),b=(0,l.arrayify)(w.encrypt(o)),A=_e((0,l.concat)([i,b])),E={address:e.address.substring(2).toLowerCase(),id:wo(p),version:3,crypto:{cipher:"aes-128-ctr",cipherparams:{iv:(0,l.hexlify)(d).substring(2)},ciphertext:(0,l.hexlify)(b).substring(2),kdf:"scrypt",kdfparams:{salt:(0,l.hexlify)(f).substring(2),n:g,dklen:32,p:y,r:m},mac:A.substring(2)}};if(a){const e=lo(16),t=new(r(fo).Counter)(e),n=new(r(fo).ModeOfOperation.ctr)(s,t),i=(0,l.arrayify)(n.encrypt(a)),o=new Date,f=o.getUTCFullYear()+"-"+mo(o.getUTCMonth()+1,2)+"-"+mo(o.getUTCDate(),2)+"T"+mo(o.getUTCHours(),2)+"-"+mo(o.getUTCMinutes(),2)+"-"+mo(o.getUTCSeconds(),2)+".0Z";E["x-ethers"]={client:h,gethFilename:"UTC--"+f+"--"+E.address,mnemonicCounter:(0,l.hexlify)(e).substring(2),mnemonicCiphertext:(0,l.hexlify)(i).substring(2),path:u,locale:c,version:"0.1"}}return JSON.stringify(E)}))}function jo(e,t,r){if(xo(e)){r&&r(0);const n=Eo(e,t);return r&&r(1),Promise.resolve(n)}return So(e)?(0,ko.decrypt)(e,t,r):Promise.reject(new Error("invalid JSON wallet"))}function Uo(e,t){if(xo(e))return Eo(e,t);if(So(e))return(0,ko.decryptSync)(e,t);throw new Error("invalid JSON wallet")}h=o("2rINa");var zo=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))};const qo=new(0,h.Logger)("wallet/5.7.0");class Ko extends Yr.Signer{get mnemonic(){return this._mnemonic()}get privateKey(){return this._signingKey().privateKey}get publicKey(){return this._signingKey().publicKey}getAddress(){return Promise.resolve(this.address)}connect(e){return new Ko(this,e)}signTransaction(e){return(0,L.resolveProperties)(e).then((t=>{null!=t.from&&(Be(t.from)!==this.address&&qo.throwArgumentError("transaction from address mismatch","transaction.from",e.from),delete t.from);const r=this._signingKey().signDigest(_e(ui(t)));return ui(t,r)}))}signMessage(e){return zo(this,void 0,void 0,(function*(){return(0,l.joinSignature)(this._signingKey().signDigest(vr(e)))}))}_signTypedData(e,t,r){return zo(this,void 0,void 0,(function*(){const n=yield wr.TypedDataEncoder.resolveNames(e,t,r,(e=>(null==this.provider&&qo.throwError("cannot resolve ENS names without a provider",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"resolveName",value:e}),this.provider.resolveName(e))));return(0,l.joinSignature)(this._signingKey().signDigest(wr.TypedDataEncoder.hash(n.domain,t,n.value)))}))}encrypt(e,t,r){if("function"!=typeof t||r||(r=t,t={}),r&&"function"!=typeof r)throw new Error("invalid callback");return t||(t={}),(0,ko.encrypt)(this,e,t,r)}static createRandom(e){let t=lo(16);e||(e={}),e.extraEntropy&&(t=(0,l.arrayify)((0,l.hexDataSlice)(_e((0,l.concat)([t,e.extraEntropy])),0,16)));const r=io(t,e.locale);return Ko.fromMnemonic(r,e.path,e.locale)}static fromEncryptedJson(e,t,r){return jo(e,t,r).then((e=>new Ko(e)))}static fromEncryptedJsonSync(e,t){return new Ko(Uo(e,t))}static fromMnemonic(e,t,r){return t||(t=eo),new Ko(to.fromMnemonic(e,null,r).derivePath(t))}constructor(e,t){if(super(),null!=(r=e)&&(0,l.isHexString)(r.privateKey,32)&&null!=r.address){const t=new Gn(e.privateKey);if((0,L.defineReadOnly)(this,"_signingKey",(()=>t)),(0,L.defineReadOnly)(this,"address",ei(this.publicKey)),this.address!==Be(e.address)&&qo.throwArgumentError("privateKey/address mismatch","privateKey","[REDACTED]"),function(e){const t=e.mnemonic;return t&&t.phrase}(e)){const t=e.mnemonic;(0,L.defineReadOnly)(this,"_mnemonic",(()=>({phrase:t.phrase,path:t.path||eo,locale:t.locale||"en"})));const r=this.mnemonic;ei(to.fromMnemonic(r.phrase,null,r.locale).derivePath(r.path).privateKey)!==this.address&&qo.throwArgumentError("mnemonic/address mismatch","privateKey","[REDACTED]")}else(0,L.defineReadOnly)(this,"_mnemonic",(()=>null))}else{if(Gn.isSigningKey(e))"secp256k1"!==e.curve&&qo.throwArgumentError("unsupported curve; must be secp256k1","privateKey","[REDACTED]"),(0,L.defineReadOnly)(this,"_signingKey",(()=>e));else{"string"==typeof e&&e.match(/^[0-9a-f]*$/i)&&64===e.length&&(e="0x"+e);const t=new Gn(e);(0,L.defineReadOnly)(this,"_signingKey",(()=>t))}(0,L.defineReadOnly)(this,"_mnemonic",(()=>null)),(0,L.defineReadOnly)(this,"address",ei(this.publicKey))}var r;t&&!Gr.Provider.isProvider(t)&&qo.throwArgumentError("invalid provider","provider",t),(0,L.defineReadOnly)(this,"provider",t||null)}}function Go(e,t){return ti(vr(e),t)}function Wo(e,t,r,n){return ti(wr.TypedDataEncoder.hash(e,t,r),n)}var Ho={};e(Ho,"getDefaultProvider",(function(){return Su})),e(Ho,"Provider",(function(){return Gr.Provider})),e(Ho,"BaseProvider",(function(){return ts.BaseProvider})),e(Ho,"Resolver",(function(){return ts.Resolver})),e(Ho,"UrlJsonRpcProvider",(function(){return ba.UrlJsonRpcProvider})),e(Ho,"FallbackProvider",(function(){return Ha.FallbackProvider})),e(Ho,"AlchemyProvider",(function(){return Pa})),e(Ho,"AlchemyWebSocketProvider",(function(){return _a})),e(Ho,"AnkrProvider",(function(){return Ia})),e(Ho,"CloudflareProvider",(function(){return Ta.CloudflareProvider})),e(Ho,"EtherscanProvider",(function(){return La.EtherscanProvider})),e(Ho,"InfuraProvider",(function(){return fu})),e(Ho,"InfuraWebSocketProvider",(function(){return hu})),e(Ho,"JsonRpcProvider",(function(){return ta.JsonRpcProvider})),e(Ho,"JsonRpcBatchProvider",(function(){return du})),e(Ho,"NodesmithProvider",(function(){return gu})),e(Ho,"PocketProvider",(function(){return vu})),e(Ho,"StaticJsonRpcProvider",(function(){return ba.StaticJsonRpcProvider})),e(Ho,"Web3Provider",(function(){return Eu})),e(Ho,"WebSocketProvider",(function(){return ea.WebSocketProvider})),e(Ho,"IpcProvider",(function(){return uu})),e(Ho,"JsonRpcSigner",(function(){return ta.JsonRpcSigner})),e(Ho,"getNetwork",(function(){return es})),e(Ho,"isCommunityResource",(function(){return _s})),e(Ho,"isCommunityResourcable",(function(){return ks})),e(Ho,"showThrottleMessage",(function(){return Rs})),e(Ho,"Formatter",(function(){return Cs}));const Jo=new(0,(h=o("2rINa")).Logger)("networks/5.7.0");function Vo(e){const t=function(t,r){null==r&&(r={});const n=[];if(t.InfuraProvider&&"-"!==r.infura)try{n.push(new t.InfuraProvider(e,r.infura))}catch(e){}if(t.EtherscanProvider&&"-"!==r.etherscan)try{n.push(new t.EtherscanProvider(e,r.etherscan))}catch(e){}if(t.AlchemyProvider&&"-"!==r.alchemy)try{n.push(new t.AlchemyProvider(e,r.alchemy))}catch(e){}if(t.PocketProvider&&"-"!==r.pocket){const i=["goerli","ropsten","rinkeby"];try{const o=new t.PocketProvider(e,r.pocket);o.network&&-1===i.indexOf(o.network.name)&&n.push(o)}catch(e){}}if(t.CloudflareProvider&&"-"!==r.cloudflare)try{n.push(new t.CloudflareProvider(e))}catch(e){}if(t.AnkrProvider&&"-"!==r.ankr)try{const i=["ropsten"],o=new t.AnkrProvider(e,r.ankr);o.network&&-1===i.indexOf(o.network.name)&&n.push(o)}catch(e){}if(0===n.length)return null;if(t.FallbackProvider){let i=1;return null!=r.quorum?i=r.quorum:"homestead"===e&&(i=2),new t.FallbackProvider(n,i)}return n[0]};return t.renetwork=function(e){return Vo(e)},t}function Yo(e,t){const r=function(r,n){return r.JsonRpcProvider?new r.JsonRpcProvider(e,t):null};return r.renetwork=function(t){return Yo(e,t)},r}const Qo={chainId:1,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"homestead",_defaultProvider:Vo("homestead")},Zo={chainId:3,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"ropsten",_defaultProvider:Vo("ropsten")},Xo={chainId:63,name:"classicMordor",_defaultProvider:Yo("https://www.ethercluster.com/mordor","classicMordor")},$o={unspecified:{chainId:0,name:"unspecified"},homestead:Qo,mainnet:Qo,morden:{chainId:2,name:"morden"},ropsten:Zo,testnet:Zo,rinkeby:{chainId:4,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"rinkeby",_defaultProvider:Vo("rinkeby")},kovan:{chainId:42,name:"kovan",_defaultProvider:Vo("kovan")},goerli:{chainId:5,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"goerli",_defaultProvider:Vo("goerli")},kintsugi:{chainId:1337702,name:"kintsugi"},classic:{chainId:61,name:"classic",_defaultProvider:Yo("https://www.ethercluster.com/etc","classic")},classicMorden:{chainId:62,name:"classicMorden"},classicMordor:Xo,classicTestnet:Xo,classicKotti:{chainId:6,name:"classicKotti",_defaultProvider:Yo("https://www.ethercluster.com/kotti","classicKotti")},xdai:{chainId:100,name:"xdai"},matic:{chainId:137,name:"matic",_defaultProvider:Vo("matic")},maticmum:{chainId:80001,name:"maticmum"},optimism:{chainId:10,name:"optimism",_defaultProvider:Vo("optimism")},"optimism-kovan":{chainId:69,name:"optimism-kovan"},"optimism-goerli":{chainId:420,name:"optimism-goerli"},arbitrum:{chainId:42161,name:"arbitrum"},"arbitrum-rinkeby":{chainId:421611,name:"arbitrum-rinkeby"},"arbitrum-goerli":{chainId:421613,name:"arbitrum-goerli"},bnb:{chainId:56,name:"bnb"},bnbt:{chainId:97,name:"bnbt"}};function es(e){if(null==e)return null;if("number"==typeof e){for(const t in $o){const r=$o[t];if(r.chainId===e)return{name:r.name,chainId:r.chainId,ensAddress:r.ensAddress||null,_defaultProvider:r._defaultProvider||null}}return{chainId:e,name:"unknown"}}if("string"==typeof e){const t=$o[e];return null==t?null:{name:t.name,chainId:t.chainId,ensAddress:t.ensAddress,_defaultProvider:t._defaultProvider||null}}const t=$o[e.name];if(!t)return"number"!=typeof e.chainId&&Jo.throwArgumentError("invalid network chainId","network",e),e;0!==e.chainId&&e.chainId!==t.chainId&&Jo.throwArgumentError("network chainId mismatch","network",e);let r=e._defaultProvider||null;var n;return null==r&&t._defaultProvider&&(r=(n=t._defaultProvider)&&"function"==typeof n.renetwork?t._defaultProvider.renetwork(e):t._defaultProvider),{name:e.name,chainId:t.chainId,ensAddress:e.ensAddress||t.ensAddress||null,_defaultProvider:r}}var ts={};e(ts,"Resolver",(function(){return Qs}),(function(e){return Qs=e})),e(ts,"BaseProvider",(function(){return $s}),(function(e){return $s=e})),o("G6hN9");var rs=o("9fE0x"),ns=(l=o("3Yhqu"),{});e(ns,"_fetchData",(function(){return hs}),(function(e){return hs=e})),e(ns,"fetchJson",(function(){return fs}),(function(e){return fs=e})),e(ns,"poll",(function(){return ds}),(function(e){return ds=e})),o("G6hN9");rs=o("9fE0x"),l=o("3Yhqu"),h=o("2rINa");var is={};e(is,"getUrl",(function(){return ss}),(function(e){return ss=e}));l=o("3Yhqu");var os=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))};function ss(e,t){return os(this,void 0,void 0,(function*(){null==t&&(t={});const r={method:t.method||"GET",headers:t.headers||{},body:t.body||void 0};if(!0!==t.skipFetchSetup&&(r.mode="cors",r.cache="no-cache",r.credentials="same-origin",r.redirect="follow",r.referrer="client"),null!=t.fetchOptions){const e=t.fetchOptions;e.mode&&(r.mode=e.mode),e.cache&&(r.cache=e.cache),e.credentials&&(r.credentials=e.credentials),e.redirect&&(r.redirect=e.redirect),e.referrer&&(r.referrer=e.referrer)}const n=yield fetch(e,r),i=yield n.arrayBuffer(),o={};return n.headers.forEach?n.headers.forEach(((e,t)=>{o[t.toLowerCase()]=e})):n.headers.keys().forEach((e=>{o[e.toLowerCase()]=n.headers.get(e)})),{headers:o,statusCode:n.status,statusMessage:n.statusText,body:(0,l.arrayify)(new Uint8Array(i))}}))}var as=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))};const us=new(0,h.Logger)("web/5.7.0");function cs(e){return new Promise((t=>{setTimeout(t,e)}))}function ls(e,t){if(null==e)return null;if("string"==typeof e)return e;if((0,l.isBytesLike)(e)){if(t&&("text"===t.split("/")[0]||"application/json"===t.split(";")[0].trim()))try{return Et(e)}catch(e){}return(0,l.hexlify)(e)}return e}function hs(e,t,r){const n="object"==typeof e&&null!=e.throttleLimit?e.throttleLimit:12;us.assertArgument(n>0&&n%1==0,"invalid connection throttle limit","connection.throttleLimit",n);const i="object"==typeof e?e.throttleCallback:null,o="object"==typeof e&&"number"==typeof e.throttleSlotInterval?e.throttleSlotInterval:100;us.assertArgument(o>0&&o%1==0,"invalid connection throttle slot interval","connection.throttleSlotInterval",o);const s="object"==typeof e&&!!e.errorPassThrough,a={};let u=null;const c={method:"GET"};let l=!1,f=12e4;if("string"==typeof e)u=e;else if("object"==typeof e){if(null!=e&&null!=e.url||us.throwArgumentError("missing URL","connection.url",e),u=e.url,"number"==typeof e.timeout&&e.timeout>0&&(f=e.timeout),e.headers)for(const t in e.headers)a[t.toLowerCase()]={key:t,value:String(e.headers[t])},["if-none-match","if-modified-since"].indexOf(t.toLowerCase())>=0&&(l=!0);if(c.allowGzip=!!e.allowGzip,null!=e.user&&null!=e.password){"https:"!==u.substring(0,6)&&!0!==e.allowInsecureAuthentication&&us.throwError("basic authentication requires a secure https url",h.Logger.errors.INVALID_ARGUMENT,{argument:"url",url:u,user:e.user,password:"[REDACTED]"});const t=e.user+":"+e.password;a.authorization={key:"Authorization",value:"Basic "+(0,rs.encode)(vt(t))}}null!=e.skipFetchSetup&&(c.skipFetchSetup=!!e.skipFetchSetup),null!=e.fetchOptions&&(c.fetchOptions=(0,L.shallowCopy)(e.fetchOptions))}const d=new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$","i"),p=u?u.match(d):null;if(p)try{const e={statusCode:200,statusMessage:"OK",headers:{"content-type":p[1]},body:(0,rs.decode)(p[2])};let t=e.body;return r&&(t=r(e.body,e)),Promise.resolve(t)}catch(e){us.throwError("processing response error",h.Logger.errors.SERVER_ERROR,{body:ls(p[1],p[2]),error:e,requestBody:null,requestMethod:"GET",url:u})}t&&(c.method="POST",c.body=t,null==a["content-type"]&&(a["content-type"]={key:"Content-Type",value:"application/octet-stream"}),null==a["content-length"]&&(a["content-length"]={key:"Content-Length",value:String(t.length)}));const g={};Object.keys(a).forEach((e=>{const t=a[e];g[t.key]=t.value})),c.headers=g;const m=function(){let e=null;return{promise:new Promise((function(t,r){f&&(e=setTimeout((()=>{null!=e&&(e=null,r(us.makeError("timeout",h.Logger.errors.TIMEOUT,{requestBody:ls(c.body,g["content-type"]),requestMethod:c.method,timeout:f,url:u})))}),f))})),cancel:function(){null!=e&&(clearTimeout(e),e=null)}}}(),y=function(){return as(this,void 0,void 0,(function*(){for(let e=0;e<n;e++){let t=null;try{if(t=yield(0,is.getUrl)(u,c),e<n)if(301===t.statusCode||302===t.statusCode){const e=t.headers.location||"";if("GET"===c.method&&e.match(/^https:/)){u=t.headers.location;continue}}else if(429===t.statusCode){let r=!0;if(i&&(r=yield i(e,u)),r){let r=0;const n=t.headers["retry-after"];r="string"==typeof n&&n.match(/^[1-9][0-9]*$/)?1e3*parseInt(n):o*parseInt(String(Math.random()*Math.pow(2,e))),yield cs(r);continue}}}catch(e){t=e.response,null==t&&(m.cancel(),us.throwError("missing response",h.Logger.errors.SERVER_ERROR,{requestBody:ls(c.body,g["content-type"]),requestMethod:c.method,serverError:e,url:u}))}let a=t.body;if(l&&304===t.statusCode?a=null:!s&&(t.statusCode<200||t.statusCode>=300)&&(m.cancel(),us.throwError("bad response",h.Logger.errors.SERVER_ERROR,{status:t.statusCode,headers:t.headers,body:ls(a,t.headers?t.headers["content-type"]:null),requestBody:ls(c.body,g["content-type"]),requestMethod:c.method,url:u})),r)try{const e=yield r(a,t);return m.cancel(),e}catch(r){if(r.throttleRetry&&e<n){let t=!0;if(i&&(t=yield i(e,u)),t){const t=o*parseInt(String(Math.random()*Math.pow(2,e)));yield cs(t);continue}}m.cancel(),us.throwError("processing response error",h.Logger.errors.SERVER_ERROR,{body:ls(a,t.headers?t.headers["content-type"]:null),error:r,requestBody:ls(c.body,g["content-type"]),requestMethod:c.method,url:u})}return m.cancel(),a}return us.throwError("failed response",h.Logger.errors.SERVER_ERROR,{requestBody:ls(c.body,g["content-type"]),requestMethod:c.method,url:u})}))}();return Promise.race([m.promise,y])}function fs(e,t,r){let n=null;if(null!=t){n=vt(t);const r="string"==typeof e?{url:e}:(0,L.shallowCopy)(e);if(r.headers){0!==Object.keys(r.headers).filter((e=>"content-type"===e.toLowerCase())).length||(r.headers=(0,L.shallowCopy)(r.headers),r.headers["content-type"]="application/json")}else r.headers={"content-type":"application/json"};e=r}return hs(e,n,((e,t)=>{let n=null;if(null!=e)try{n=JSON.parse(Et(e))}catch(t){us.throwError("invalid JSON",h.Logger.errors.SERVER_ERROR,{body:e,error:t})}return r&&(n=r(n,t)),n}))}function ds(e,t){return t||(t={}),null==(t=(0,L.shallowCopy)(t)).floor&&(t.floor=0),null==t.ceiling&&(t.ceiling=1e4),null==t.interval&&(t.interval=250),new Promise((function(r,n){let i=null,o=!1;const s=()=>!o&&(o=!0,i&&clearTimeout(i),!0);t.timeout&&(i=setTimeout((()=>{s()&&n(new Error("timeout"))}),t.timeout));const a=t.retryLimit;let u=0;!function i(){return e().then((function(e){if(void 0!==e)s()&&r(e);else if(t.oncePoll)t.oncePoll.once("poll",i);else if(t.onceBlock)t.onceBlock.once("block",i);else if(!o){if(u++,u>a)return void(s()&&n(new Error("retry limit reached")));let e=t.interval*parseInt(String(Math.random()*Math.pow(2,u)));e<t.floor&&(e=t.floor),e>t.ceiling&&(e=t.ceiling),setTimeout(i,e)}return null}),(function(e){s()&&n(e)}))}()}))}for(var ps,gs="qpzry9x8gf2tvdw0s3jn54khce6mua7l",ms={},ys=0;ys<gs.length;ys++){var vs=gs.charAt(ys);if(void 0!==ms[vs])throw new TypeError(vs+" is ambiguous");ms[vs]=ys}function ws(e){var t=e>>25;return(33554431&e)<<5^996825010&-(t>>0&1)^642813549&-(t>>1&1)^513874426&-(t>>2&1)^1027748829&-(t>>3&1)^705979059&-(t>>4&1)}function bs(e){for(var t=1,r=0;r<e.length;++r){var n=e.charCodeAt(r);if(n<33||n>126)return"Invalid prefix ("+e+")";t=ws(t)^n>>5}for(t=ws(t),r=0;r<e.length;++r){var i=e.charCodeAt(r);t=ws(t)^31&i}return t}function As(e,t){if(t=t||90,e.length<8)return e+" too short";if(e.length>t)return"Exceeds length limit";var r=e.toLowerCase(),n=e.toUpperCase();if(e!==r&&e!==n)return"Mixed-case string "+e;var i=(e=r).lastIndexOf("1");if(-1===i)return"No separator character for "+e;if(0===i)return"Missing prefix for "+e;var o=e.slice(0,i),s=e.slice(i+1);if(s.length<6)return"Data too short";var a=bs(o);if("string"==typeof a)return a;for(var u=[],c=0;c<s.length;++c){var l=s.charAt(c),h=ms[l];if(void 0===h)return"Unknown character "+l;a=ws(a)^h,c+6>=s.length||u.push(h)}return 1!==a?"Invalid checksum for "+e:{prefix:o,words:u}}function Es(e,t,r,n){for(var i=0,o=0,s=(1<<r)-1,a=[],u=0;u<e.length;++u)for(i=i<<t|e[u],o+=t;o>=r;)o-=r,a.push(i>>o&s);if(n)o>0&&a.push(i<<r-o&s);else{if(o>=t)return"Excess padding";if(i<<r-o&s)return"Non-zero padding"}return a}ps={decodeUnsafe:function(){var e=As.apply(null,arguments);if("object"==typeof e)return e},decode:function(e){var t=As.apply(null,arguments);if("object"==typeof t)return t;throw new Error(t)},encode:function(e,t,r){if(r=r||90,e.length+7+t.length>r)throw new TypeError("Exceeds length limit");var n=bs(e=e.toLowerCase());if("string"==typeof n)throw new Error(n);for(var i=e+"1",o=0;o<t.length;++o){var s=t[o];if(s>>5!=0)throw new Error("Non 5-bit word");n=ws(n)^s,i+=gs.charAt(s)}for(o=0;o<6;++o)n=ws(n);for(n^=1,o=0;o<6;++o){i+=gs.charAt(n>>5*(5-o)&31)}return i},toWordsUnsafe:function(e){var t=Es(e,8,5,!0);if(Array.isArray(t))return t},toWords:function(e){var t=Es(e,8,5,!0);if(Array.isArray(t))return t;throw new Error(t)},fromWordsUnsafe:function(e){var t=Es(e,5,8,!1);if(Array.isArray(t))return t},fromWords:function(e){var t=Es(e,5,8,!1);if(Array.isArray(t))return t;throw new Error(t)}};h=o("2rINa");const xs="providers/5.7.0";l=o("3Yhqu");const Ss=new(0,(h=o("2rINa")).Logger)(xs);class Cs{getDefaultFormats(){const e={},t=this.address.bind(this),r=this.bigNumber.bind(this),n=this.blockTag.bind(this),i=this.data.bind(this),o=this.hash.bind(this),s=this.hex.bind(this),a=this.number.bind(this),u=this.type.bind(this);return e.transaction={hash:o,type:u,accessList:Cs.allowNull(this.accessList.bind(this),null),blockHash:Cs.allowNull(o,null),blockNumber:Cs.allowNull(a,null),transactionIndex:Cs.allowNull(a,null),confirmations:Cs.allowNull(a,null),from:t,gasPrice:Cs.allowNull(r),maxPriorityFeePerGas:Cs.allowNull(r),maxFeePerGas:Cs.allowNull(r),gasLimit:r,to:Cs.allowNull(t,null),value:r,nonce:a,data:i,r:Cs.allowNull(this.uint256),s:Cs.allowNull(this.uint256),v:Cs.allowNull(a),creates:Cs.allowNull(t,null),raw:Cs.allowNull(i)},e.transactionRequest={from:Cs.allowNull(t),nonce:Cs.allowNull(a),gasLimit:Cs.allowNull(r),gasPrice:Cs.allowNull(r),maxPriorityFeePerGas:Cs.allowNull(r),maxFeePerGas:Cs.allowNull(r),to:Cs.allowNull(t),value:Cs.allowNull(r),data:Cs.allowNull((e=>this.data(e,!0))),type:Cs.allowNull(a),accessList:Cs.allowNull(this.accessList.bind(this),null)},e.receiptLog={transactionIndex:a,blockNumber:a,transactionHash:o,address:t,topics:Cs.arrayOf(o),data:i,logIndex:a,blockHash:o},e.receipt={to:Cs.allowNull(this.address,null),from:Cs.allowNull(this.address,null),contractAddress:Cs.allowNull(t,null),transactionIndex:a,root:Cs.allowNull(s),gasUsed:r,logsBloom:Cs.allowNull(i),blockHash:o,transactionHash:o,logs:Cs.arrayOf(this.receiptLog.bind(this)),blockNumber:a,confirmations:Cs.allowNull(a,null),cumulativeGasUsed:r,effectiveGasPrice:Cs.allowNull(r),status:Cs.allowNull(a),type:u},e.block={hash:Cs.allowNull(o),parentHash:o,number:a,timestamp:a,nonce:Cs.allowNull(s),difficulty:this.difficulty.bind(this),gasLimit:r,gasUsed:r,miner:Cs.allowNull(t),extraData:i,transactions:Cs.allowNull(Cs.arrayOf(o)),baseFeePerGas:Cs.allowNull(r)},e.blockWithTransactions=(0,L.shallowCopy)(e.block),e.blockWithTransactions.transactions=Cs.allowNull(Cs.arrayOf(this.transactionResponse.bind(this))),e.filter={fromBlock:Cs.allowNull(n,void 0),toBlock:Cs.allowNull(n,void 0),blockHash:Cs.allowNull(o,void 0),address:Cs.allowNull(t,void 0),topics:Cs.allowNull(this.topics.bind(this),void 0)},e.filterLog={blockNumber:Cs.allowNull(a),blockHash:Cs.allowNull(o),transactionIndex:a,removed:Cs.allowNull(this.boolean.bind(this)),address:t,data:Cs.allowFalsish(i,"0x"),topics:Cs.arrayOf(o),transactionHash:o,logIndex:a},e}accessList(e){return ii(e||[])}number(e){return"0x"===e?0:w.from(e).toNumber()}type(e){return"0x"===e||null==e?0:w.from(e).toNumber()}bigNumber(e){return w.from(e)}boolean(e){if("boolean"==typeof e)return e;if("string"==typeof e){if("true"===(e=e.toLowerCase()))return!0;if("false"===e)return!1}throw new Error("invalid boolean - "+e)}hex(e,t){return"string"==typeof e&&(t||"0x"===e.substring(0,2)||(e="0x"+e),(0,l.isHexString)(e))?e.toLowerCase():Ss.throwArgumentError("invalid hash","value",e)}data(e,t){const r=this.hex(e,t);if(r.length%2!=0)throw new Error("invalid data; odd-length - "+e);return r}address(e){return Be(e)}callAddress(e){if(!(0,l.isHexString)(e,32))return null;const t=Be((0,l.hexDataSlice)(e,12));return t===Xe?null:t}contractAddress(e){return De(e)}blockTag(e){if(null==e)return"latest";if("earliest"===e)return"0x0";switch(e){case"earliest":return"0x0";case"latest":case"pending":case"safe":case"finalized":return e}if("number"==typeof e||(0,l.isHexString)(e))return(0,l.hexValue)(e);throw new Error("invalid blockTag")}hash(e,t){const r=this.hex(e,t);return 32!==(0,l.hexDataLength)(r)?Ss.throwArgumentError("invalid hash","value",e):r}difficulty(e){if(null==e)return null;const t=w.from(e);try{return t.toNumber()}catch(e){}return null}uint256(e){if(!(0,l.isHexString)(e))throw new Error("invalid uint256");return(0,l.hexZeroPad)(e,32)}_block(e,t){null!=e.author&&null==e.miner&&(e.miner=e.author);const r=null!=e._difficulty?e._difficulty:e.difficulty,n=Cs.check(t,e);return n._difficulty=null==r?null:w.from(r),n}block(e){return this._block(e,this.formats.block)}blockWithTransactions(e){return this._block(e,this.formats.blockWithTransactions)}transactionRequest(e){return Cs.check(this.formats.transactionRequest,e)}transactionResponse(e){null!=e.gas&&null==e.gasLimit&&(e.gasLimit=e.gas),e.to&&w.from(e.to).isZero()&&(e.to="0x0000000000000000000000000000000000000000"),null!=e.input&&null==e.data&&(e.data=e.input),null==e.to&&null==e.creates&&(e.creates=this.contractAddress(e)),1!==e.type&&2!==e.type||null!=e.accessList||(e.accessList=[]);const t=Cs.check(this.formats.transaction,e);if(null!=e.chainId){let r=e.chainId;(0,l.isHexString)(r)&&(r=w.from(r).toNumber()),t.chainId=r}else{let r=e.networkId;null==r&&null==t.v&&(r=e.chainId),(0,l.isHexString)(r)&&(r=w.from(r).toNumber()),"number"!=typeof r&&null!=t.v&&(r=(t.v-35)/2,r<0&&(r=0),r=parseInt(r)),"number"!=typeof r&&(r=0),t.chainId=r}return t.blockHash&&"x"===t.blockHash.replace(/0/g,"")&&(t.blockHash=null),t}transaction(e){return li(e)}receiptLog(e){return Cs.check(this.formats.receiptLog,e)}receipt(e){const t=Cs.check(this.formats.receipt,e);if(null!=t.root)if(t.root.length<=4){const e=w.from(t.root).toNumber();0===e||1===e?(null!=t.status&&t.status!==e&&Ss.throwArgumentError("alt-root-status/status mismatch","value",{root:t.root,status:t.status}),t.status=e,delete t.root):Ss.throwArgumentError("invalid alt-root-status","value.root",t.root)}else 66!==t.root.length&&Ss.throwArgumentError("invalid root hash","value.root",t.root);return null!=t.status&&(t.byzantium=!0),t}topics(e){return Array.isArray(e)?e.map((e=>this.topics(e))):null!=e?this.hash(e,!0):null}filter(e){return Cs.check(this.formats.filter,e)}filterLog(e){return Cs.check(this.formats.filterLog,e)}static check(e,t){const r={};for(const n in e)try{const i=e[n](t[n]);void 0!==i&&(r[n]=i)}catch(e){throw e.checkKey=n,e.checkValue=t[n],e}return r}static allowNull(e,t){return function(r){return null==r?t:e(r)}}static allowFalsish(e,t){return function(r){return r?e(r):t}}static arrayOf(e){return function(t){if(!Array.isArray(t))throw new Error("not an array");const r=[];return t.forEach((function(t){r.push(e(t))})),r}}constructor(){this.formats=this.getDefaultFormats()}}function ks(e){return e&&"function"==typeof e.isCommunityResource}function _s(e){return ks(e)&&e.isCommunityResource()}let Ps=!1;function Rs(){Ps||(Ps=!0,console.log("========= NOTICE ========="),console.log("Request-Rate Exceeded  (this message will not be repeated)"),console.log(""),console.log("The default API keys for each service are provided as a highly-throttled,"),console.log("community resource for low-traffic projects and early prototyping."),console.log(""),console.log("While your application will continue to function, we highly recommended"),console.log("signing up for your own API keys to improve performance, increase your"),console.log("request rate/limit and enable other perks, such as metrics and advanced APIs."),console.log(""),console.log("For more details: https://docs.ethers.io/api-keys/"),console.log("=========================="))}var Os=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))};const Ns=new(0,h.Logger)(xs);function Is(e){return null==e?"null":(32!==(0,l.hexDataLength)(e)&&Ns.throwArgumentError("invalid topic","topic",e),e.toLowerCase())}function Ts(e){for(e=e.slice();e.length>0&&null==e[e.length-1];)e.pop();return e.map((e=>{if(Array.isArray(e)){const t={};e.forEach((e=>{t[Is(e)]=!0}));const r=Object.keys(t);return r.sort(),r.join("|")}return Is(e)})).join("&")}function Ms(e){if("string"==typeof e){if(e=e.toLowerCase(),32===(0,l.hexDataLength)(e))return"tx:"+e;if(-1===e.indexOf(":"))return e}else{if(Array.isArray(e))return"filter:*:"+Ts(e);if(Gr.ForkEvent.isForkEvent(e))throw Ns.warn("not implemented"),new Error("not implemented");if(e&&"object"==typeof e)return"filter:"+(e.address||"*")+":"+Ts(e.topics||[])}throw new Error("invalid event - "+e)}function Bs(){return(new Date).getTime()}function Fs(e){return new Promise((t=>{setTimeout(t,e)}))}const Ls=["block","network","pending","poll"];class Ds{get event(){switch(this.type){case"tx":return this.hash;case"filter":return this.filter}return this.tag}get type(){return this.tag.split(":")[0]}get hash(){const e=this.tag.split(":");return"tx"!==e[0]?null:e[1]}get filter(){const e=this.tag.split(":");if("filter"!==e[0])return null;const t=e[1],r=""===(n=e[2])?[]:n.split(/&/g).map((e=>{if(""===e)return[];const t=e.split("|").map((e=>"null"===e?null:e));return 1===t.length?t[0]:t}));var n;const i={};return r.length>0&&(i.topics=r),t&&"*"!==t&&(i.address=t),i}pollable(){return this.tag.indexOf(":")>=0||Ls.indexOf(this.tag)>=0}constructor(e,t,r){(0,L.defineReadOnly)(this,"tag",e),(0,L.defineReadOnly)(this,"listener",t),(0,L.defineReadOnly)(this,"once",r),this._lastBlockNumber=-2,this._inflight=!1}}const js={0:{symbol:"btc",p2pkh:0,p2sh:5,prefix:"bc"},2:{symbol:"ltc",p2pkh:48,p2sh:50,prefix:"ltc"},3:{symbol:"doge",p2pkh:30,p2sh:22},60:{symbol:"eth",ilk:"eth"},61:{symbol:"etc",ilk:"eth"},700:{symbol:"xdai",ilk:"eth"}};function Us(e){return(0,l.hexZeroPad)(w.from(e).toHexString(),32)}function zs(e){return Oi.encode((0,l.concat)([e,(0,l.hexDataSlice)(Bi(Bi(e)),0,4)]))}const qs=new RegExp("^(ipfs)://(.*)$","i"),Ks=[new RegExp("^(https)://(.*)$","i"),new RegExp("^(data):(.*)$","i"),qs,new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$","i")];function Gs(e,t){try{return Et(Ws(e,t))}catch(e){}return null}function Ws(e,t){if("0x"===e)return null;const r=w.from((0,l.hexDataSlice)(e,t,t+32)).toNumber(),n=w.from((0,l.hexDataSlice)(e,r,r+32)).toNumber();return(0,l.hexDataSlice)(e,r+32,r+32+n)}function Hs(e){return e.match(/^ipfs:\/\/ipfs\//i)?e=e.substring(12):e.match(/^ipfs:\/\//i)?e=e.substring(7):Ns.throwArgumentError("unsupported IPFS format","link",e),`https://gateway.ipfs.io/ipfs/${e}`}function Js(e){const t=(0,l.arrayify)(e);if(t.length>32)throw new Error("internal; should not happen");const r=new Uint8Array(32);return r.set(t,32-t.length),r}function Vs(e){if(e.length%32==0)return e;const t=new Uint8Array(32*Math.ceil(e.length/32));return t.set(e),t}function Ys(e){const t=[];let r=0;for(let n=0;n<e.length;n++)t.push(null),r+=32;for(let n=0;n<e.length;n++){const i=(0,l.arrayify)(e[n]);t[n]=Js(r),t.push(Js(i.length)),t.push(Vs(i)),r+=32+32*Math.ceil(i.length/32)}return(0,l.hexConcat)(t)}class Qs{supportsWildcard(){return this._supportsEip2544||(this._supportsEip2544=this.provider.call({to:this.address,data:"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"}).then((e=>w.from(e).eq(1))).catch((e=>{if(e.code===h.Logger.errors.CALL_EXCEPTION)return!1;throw this._supportsEip2544=null,e}))),this._supportsEip2544}_fetch(e,t){return Os(this,void 0,void 0,(function*(){const r={to:this.address,ccipReadEnabled:!0,data:(0,l.hexConcat)([e,mr(this.name),t||"0x"])};let n=!1;(yield this.supportsWildcard())&&(n=!0,r.data=(0,l.hexConcat)(["0x9061b923",Ys([yr(this.name),r.data])]));try{let e=yield this.provider.call(r);return(0,l.arrayify)(e).length%32==4&&Ns.throwError("resolver threw error",h.Logger.errors.CALL_EXCEPTION,{transaction:r,data:e}),n&&(e=Ws(e,0)),e}catch(e){if(e.code===h.Logger.errors.CALL_EXCEPTION)return null;throw e}}))}_fetchBytes(e,t){return Os(this,void 0,void 0,(function*(){const r=yield this._fetch(e,t);return null!=r?Ws(r,0):null}))}_getAddress(e,t){const n=js[String(e)];if(null==n&&Ns.throwError(`unsupported coin type: ${e}`,h.Logger.errors.UNSUPPORTED_OPERATION,{operation:`getAddress(${e})`}),"eth"===n.ilk)return this.provider.formatter.address(t);const i=(0,l.arrayify)(t);if(null!=n.p2pkh){const e=t.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);if(e){const t=parseInt(e[1],16);if(e[2].length===2*t&&t>=1&&t<=75)return zs((0,l.concat)([[n.p2pkh],"0x"+e[2]]))}}if(null!=n.p2sh){const e=t.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);if(e){const t=parseInt(e[1],16);if(e[2].length===2*t&&t>=1&&t<=75)return zs((0,l.concat)([[n.p2sh],"0x"+e[2]]))}}if(null!=n.prefix){const e=i[1];let t=i[0];if(0===t?20!==e&&32!==e&&(t=-1):t=-1,t>=0&&i.length===2+e&&e>=1&&e<=75){const e=r(ps).toWords(i.slice(2));return e.unshift(t),r(ps).encode(n.prefix,e)}}return null}getAddress(e){return Os(this,void 0,void 0,(function*(){if(null==e&&(e=60),60===e)try{const e=yield this._fetch("0x3b3b57de");return"0x"===e||e===at?null:this.provider.formatter.callAddress(e)}catch(e){if(e.code===h.Logger.errors.CALL_EXCEPTION)return null;throw e}const t=yield this._fetchBytes("0xf1cb7e06",Us(e));if(null==t||"0x"===t)return null;const r=this._getAddress(e,t);return null==r&&Ns.throwError("invalid or unsupported coin data",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:`getAddress(${e})`,coinType:e,data:t}),r}))}getAvatar(){return Os(this,void 0,void 0,(function*(){const e=[{type:"name",content:this.name}];try{const t=yield this.getText("avatar");if(null==t)return null;for(let r=0;r<Ks.length;r++){const n=t.match(Ks[r]);if(null==n)continue;const i=n[1].toLowerCase();switch(i){case"https":return e.push({type:"url",content:t}),{linkage:e,url:t};case"data":return e.push({type:"data",content:t}),{linkage:e,url:t};case"ipfs":return e.push({type:"ipfs",content:t}),{linkage:e,url:Hs(t)};case"erc721":case"erc1155":{const r="erc721"===i?"0xc87b56dd":"0x0e89341c";e.push({type:i,content:t});const o=this._resolvedAddress||(yield this.getAddress()),s=(n[2]||"").split("/");if(2!==s.length)return null;const a=yield this.provider.formatter.address(s[0]),u=(0,l.hexZeroPad)(w.from(s[1]).toHexString(),32);if("erc721"===i){const t=this.provider.formatter.callAddress(yield this.provider.call({to:a,data:(0,l.hexConcat)(["0x6352211e",u])}));if(o!==t)return null;e.push({type:"owner",content:t})}else if("erc1155"===i){const t=w.from(yield this.provider.call({to:a,data:(0,l.hexConcat)(["0x00fdd58e",(0,l.hexZeroPad)(o,32),u])}));if(t.isZero())return null;e.push({type:"balance",content:t.toString()})}const c={to:this.provider.formatter.address(s[0]),data:(0,l.hexConcat)([r,u])};let h=Gs(yield this.provider.call(c),0);if(null==h)return null;e.push({type:"metadata-url-base",content:h}),"erc1155"===i&&(h=h.replace("{id}",u.substring(2)),e.push({type:"metadata-url-expanded",content:h})),h.match(/^ipfs:/i)&&(h=Hs(h)),e.push({type:"metadata-url",content:h});const f=yield(0,ns.fetchJson)(h);if(!f)return null;e.push({type:"metadata",content:JSON.stringify(f)});let d=f.image;if("string"!=typeof d)return null;if(d.match(/^(https:\/\/|data:)/i));else{if(null==d.match(qs))return null;e.push({type:"url-ipfs",content:d}),d=Hs(d)}return e.push({type:"url",content:d}),{linkage:e,url:d}}}}}catch(e){}return null}))}getContentHash(){return Os(this,void 0,void 0,(function*(){const e=yield this._fetchBytes("0xbc1c58d1");if(null==e||"0x"===e)return null;const t=e.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(t){const e=parseInt(t[3],16);if(t[4].length===2*e)return"ipfs://"+Oi.encode("0x"+t[1])}const r=e.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(r){const e=parseInt(r[3],16);if(r[4].length===2*e)return"ipns://"+Oi.encode("0x"+r[1])}const n=e.match(/^0xe40101fa011b20([0-9a-f]*)$/);if(n&&64===n[1].length)return"bzz://"+n[1];const i=e.match(/^0x90b2c605([0-9a-f]*)$/);if(i&&68===i[1].length){const e={"=":"","+":"-","/":"_"};return"sia://"+(0,rs.encode)("0x"+i[1]).replace(/[=+\/]/g,(t=>e[t]))}return Ns.throwError("invalid or unsupported content hash data",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"getContentHash()",data:e})}))}getText(e){return Os(this,void 0,void 0,(function*(){let t=vt(e);t=(0,l.concat)([Us(64),Us(t.length),t]),t.length%32!=0&&(t=(0,l.concat)([t,(0,l.hexZeroPad)("0x",32-e.length%32)]));const r=yield this._fetchBytes("0x59d1d43c",(0,l.hexlify)(t));return null==r||"0x"===r?null:Et(r)}))}constructor(e,t,r,n){(0,L.defineReadOnly)(this,"provider",e),(0,L.defineReadOnly)(this,"name",r),(0,L.defineReadOnly)(this,"address",e.formatter.address(t)),(0,L.defineReadOnly)(this,"_resolvedAddress",n)}}let Zs=null,Xs=1;class $s extends Gr.Provider{_ready(){return Os(this,void 0,void 0,(function*(){if(null==this._network){let e=null;if(this._networkPromise)try{e=yield this._networkPromise}catch(e){}null==e&&(e=yield this.detectNetwork()),e||Ns.throwError("no network detected",h.Logger.errors.UNKNOWN_ERROR,{}),null==this._network&&(this.anyNetwork?this._network=e:(0,L.defineReadOnly)(this,"_network",e),this.emit("network",e,null))}return this._network}))}get ready(){return(0,ns.poll)((()=>this._ready().then((e=>e),(e=>{if(e.code!==h.Logger.errors.NETWORK_ERROR||"noNetwork"!==e.event)throw e}))))}static getFormatter(){return null==Zs&&(Zs=new Cs),Zs}static getNetwork(e){return es(null==e?"homestead":e)}ccipReadFetch(e,t,r){return Os(this,void 0,void 0,(function*(){if(this.disableCcipRead||0===r.length)return null;const n=e.to.toLowerCase(),i=t.toLowerCase(),o=[];for(let e=0;e<r.length;e++){const t=r[e],s=t.replace("{sender}",n).replace("{data}",i),a=t.indexOf("{data}")>=0?null:JSON.stringify({data:i,sender:n}),u=yield(0,ns.fetchJson)({url:s,errorPassThrough:!0},a,((e,t)=>(e.status=t.statusCode,e)));if(u.data)return u.data;const c=u.message||"unknown error";if(u.status>=400&&u.status<500)return Ns.throwError(`response not found during CCIP fetch: ${c}`,h.Logger.errors.SERVER_ERROR,{url:t,errorMessage:c});o.push(c)}return Ns.throwError(`error encountered during CCIP fetch: ${o.map((e=>JSON.stringify(e))).join(", ")}`,h.Logger.errors.SERVER_ERROR,{urls:r,errorMessages:o})}))}_getInternalBlockNumber(e){return Os(this,void 0,void 0,(function*(){if(yield this._ready(),e>0)for(;this._internalBlockNumber;){const t=this._internalBlockNumber;try{const r=yield t;if(Bs()-r.respTime<=e)return r.blockNumber;break}catch(e){if(this._internalBlockNumber===t)break}}const t=Bs(),r=(0,L.resolveProperties)({blockNumber:this.perform("getBlockNumber",{}),networkError:this.getNetwork().then((e=>null),(e=>e))}).then((({blockNumber:e,networkError:n})=>{if(n)throw this._internalBlockNumber===r&&(this._internalBlockNumber=null),n;const i=Bs();return(e=w.from(e).toNumber())<this._maxInternalBlockNumber&&(e=this._maxInternalBlockNumber),this._maxInternalBlockNumber=e,this._setFastBlockNumber(e),{blockNumber:e,reqTime:t,respTime:i}}));return this._internalBlockNumber=r,r.catch((e=>{this._internalBlockNumber===r&&(this._internalBlockNumber=null)})),(yield r).blockNumber}))}poll(){return Os(this,void 0,void 0,(function*(){const e=Xs++,t=[];let r=null;try{r=yield this._getInternalBlockNumber(100+this.pollingInterval/2)}catch(e){return void this.emit("error",e)}if(this._setFastBlockNumber(r),this.emit("poll",e,r),r!==this._lastBlockNumber){if(-2===this._emitted.block&&(this._emitted.block=r-1),Math.abs(this._emitted.block-r)>1e3)Ns.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${r})`),this.emit("error",Ns.makeError("network block skew detected",h.Logger.errors.NETWORK_ERROR,{blockNumber:r,event:"blockSkew",previousBlockNumber:this._emitted.block})),this.emit("block",r);else for(let e=this._emitted.block+1;e<=r;e++)this.emit("block",e);this._emitted.block!==r&&(this._emitted.block=r,Object.keys(this._emitted).forEach((e=>{if("block"===e)return;const t=this._emitted[e];"pending"!==t&&r-t>12&&delete this._emitted[e]}))),-2===this._lastBlockNumber&&(this._lastBlockNumber=r-1),this._events.forEach((e=>{switch(e.type){case"tx":{const r=e.hash;let n=this.getTransactionReceipt(r).then((e=>e&&null!=e.blockNumber?(this._emitted["t:"+r]=e.blockNumber,this.emit(r,e),null):null)).catch((e=>{this.emit("error",e)}));t.push(n);break}case"filter":if(!e._inflight){e._inflight=!0,-2===e._lastBlockNumber&&(e._lastBlockNumber=r-1);const n=e.filter;n.fromBlock=e._lastBlockNumber+1,n.toBlock=r;const i=n.toBlock-this._maxFilterBlockRange;i>n.fromBlock&&(n.fromBlock=i),n.fromBlock<0&&(n.fromBlock=0);const o=this.getLogs(n).then((t=>{e._inflight=!1,0!==t.length&&t.forEach((t=>{t.blockNumber>e._lastBlockNumber&&(e._lastBlockNumber=t.blockNumber),this._emitted["b:"+t.blockHash]=t.blockNumber,this._emitted["t:"+t.transactionHash]=t.blockNumber,this.emit(n,t)}))})).catch((t=>{this.emit("error",t),e._inflight=!1}));t.push(o)}}})),this._lastBlockNumber=r,Promise.all(t).then((()=>{this.emit("didPoll",e)})).catch((e=>{this.emit("error",e)}))}else this.emit("didPoll",e)}))}resetEventsBlock(e){this._lastBlockNumber=e-1,this.polling&&this.poll()}get network(){return this._network}detectNetwork(){return Os(this,void 0,void 0,(function*(){return Ns.throwError("provider does not support network detection",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"provider.detectNetwork"})}))}getNetwork(){return Os(this,void 0,void 0,(function*(){const e=yield this._ready(),t=yield this.detectNetwork();if(e.chainId!==t.chainId){if(this.anyNetwork)return this._network=t,this._lastBlockNumber=-2,this._fastBlockNumber=null,this._fastBlockNumberPromise=null,this._fastQueryDate=0,this._emitted.block=-2,this._maxInternalBlockNumber=-1024,this._internalBlockNumber=null,this.emit("network",t,e),yield Fs(0),this._network;const r=Ns.makeError("underlying network changed",h.Logger.errors.NETWORK_ERROR,{event:"changed",network:e,detectedNetwork:t});throw this.emit("error",r),r}return e}))}get blockNumber(){return this._getInternalBlockNumber(100+this.pollingInterval/2).then((e=>{this._setFastBlockNumber(e)}),(e=>{})),null!=this._fastBlockNumber?this._fastBlockNumber:-1}get polling(){return null!=this._poller}set polling(e){e&&!this._poller?(this._poller=setInterval((()=>{this.poll()}),this.pollingInterval),this._bootstrapPoll||(this._bootstrapPoll=setTimeout((()=>{this.poll(),this._bootstrapPoll=setTimeout((()=>{this._poller||this.poll(),this._bootstrapPoll=null}),this.pollingInterval)}),0))):!e&&this._poller&&(clearInterval(this._poller),this._poller=null)}get pollingInterval(){return this._pollingInterval}set pollingInterval(e){if("number"!=typeof e||e<=0||parseInt(String(e))!=e)throw new Error("invalid polling interval");this._pollingInterval=e,this._poller&&(clearInterval(this._poller),this._poller=setInterval((()=>{this.poll()}),this._pollingInterval))}_getFastBlockNumber(){const e=Bs();return e-this._fastQueryDate>2*this._pollingInterval&&(this._fastQueryDate=e,this._fastBlockNumberPromise=this.getBlockNumber().then((e=>((null==this._fastBlockNumber||e>this._fastBlockNumber)&&(this._fastBlockNumber=e),this._fastBlockNumber)))),this._fastBlockNumberPromise}_setFastBlockNumber(e){null!=this._fastBlockNumber&&e<this._fastBlockNumber||(this._fastQueryDate=Bs(),(null==this._fastBlockNumber||e>this._fastBlockNumber)&&(this._fastBlockNumber=e,this._fastBlockNumberPromise=Promise.resolve(e)))}waitForTransaction(e,t,r){return Os(this,void 0,void 0,(function*(){return this._waitForTransaction(e,null==t?1:t,r||0,null)}))}_waitForTransaction(e,t,r,n){return Os(this,void 0,void 0,(function*(){const i=yield this.getTransactionReceipt(e);return(i?i.confirmations:0)>=t?i:new Promise(((i,o)=>{const s=[];let a=!1;const u=function(){return!!a||(a=!0,s.forEach((e=>{e()})),!1)},c=e=>{e.confirmations<t||u()||i(e)};if(this.on(e,c),s.push((()=>{this.removeListener(e,c)})),n){let r=n.startBlock,i=null;const c=s=>Os(this,void 0,void 0,(function*(){a||(yield Fs(1e3),this.getTransactionCount(n.from).then((l=>Os(this,void 0,void 0,(function*(){if(!a){if(l<=n.nonce)r=s;else{{const t=yield this.getTransaction(e);if(t&&null!=t.blockNumber)return}for(null==i&&(i=r-3,i<n.startBlock&&(i=n.startBlock));i<=s;){if(a)return;const r=yield this.getBlockWithTransactions(i);for(let i=0;i<r.transactions.length;i++){const s=r.transactions[i];if(s.hash===e)return;if(s.from===n.from&&s.nonce===n.nonce){if(a)return;const r=yield this.waitForTransaction(s.hash,t);if(u())return;let i="replaced";return s.data===n.data&&s.to===n.to&&s.value.eq(n.value)?i="repriced":"0x"===s.data&&s.from===s.to&&s.value.isZero()&&(i="cancelled"),void o(Ns.makeError("transaction was replaced",h.Logger.errors.TRANSACTION_REPLACED,{cancelled:"replaced"===i||"cancelled"===i,reason:i,replacement:this._wrapTransaction(s),hash:e,receipt:r}))}}i++}}a||this.once("block",c)}}))),(e=>{a||this.once("block",c)})))}));if(a)return;this.once("block",c),s.push((()=>{this.removeListener("block",c)}))}if("number"==typeof r&&r>0){const e=setTimeout((()=>{u()||o(Ns.makeError("timeout exceeded",h.Logger.errors.TIMEOUT,{timeout:r}))}),r);e.unref&&e.unref(),s.push((()=>{clearTimeout(e)}))}}))}))}getBlockNumber(){return Os(this,void 0,void 0,(function*(){return this._getInternalBlockNumber(0)}))}getGasPrice(){return Os(this,void 0,void 0,(function*(){yield this.getNetwork();const e=yield this.perform("getGasPrice",{});try{return w.from(e)}catch(t){return Ns.throwError("bad result from backend",h.Logger.errors.SERVER_ERROR,{method:"getGasPrice",result:e,error:t})}}))}getBalance(e,t){return Os(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield(0,L.resolveProperties)({address:this._getAddress(e),blockTag:this._getBlockTag(t)}),n=yield this.perform("getBalance",r);try{return w.from(n)}catch(e){return Ns.throwError("bad result from backend",h.Logger.errors.SERVER_ERROR,{method:"getBalance",params:r,result:n,error:e})}}))}getTransactionCount(e,t){return Os(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield(0,L.resolveProperties)({address:this._getAddress(e),blockTag:this._getBlockTag(t)}),n=yield this.perform("getTransactionCount",r);try{return w.from(n).toNumber()}catch(e){return Ns.throwError("bad result from backend",h.Logger.errors.SERVER_ERROR,{method:"getTransactionCount",params:r,result:n,error:e})}}))}getCode(e,t){return Os(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield(0,L.resolveProperties)({address:this._getAddress(e),blockTag:this._getBlockTag(t)}),n=yield this.perform("getCode",r);try{return(0,l.hexlify)(n)}catch(e){return Ns.throwError("bad result from backend",h.Logger.errors.SERVER_ERROR,{method:"getCode",params:r,result:n,error:e})}}))}getStorageAt(e,t,r){return Os(this,void 0,void 0,(function*(){yield this.getNetwork();const n=yield(0,L.resolveProperties)({address:this._getAddress(e),blockTag:this._getBlockTag(r),position:Promise.resolve(t).then((e=>(0,l.hexValue)(e)))}),i=yield this.perform("getStorageAt",n);try{return(0,l.hexlify)(i)}catch(e){return Ns.throwError("bad result from backend",h.Logger.errors.SERVER_ERROR,{method:"getStorageAt",params:n,result:i,error:e})}}))}_wrapTransaction(e,t,r){if(null!=t&&32!==(0,l.hexDataLength)(t))throw new Error("invalid response - sendTransaction");const n=e;return null!=t&&e.hash!==t&&Ns.throwError("Transaction hash mismatch from Provider.sendTransaction.",h.Logger.errors.UNKNOWN_ERROR,{expectedHash:e.hash,returnedHash:t}),n.wait=(t,n)=>Os(this,void 0,void 0,(function*(){let i;null==t&&(t=1),null==n&&(n=0),0!==t&&null!=r&&(i={data:e.data,from:e.from,nonce:e.nonce,to:e.to,value:e.value,startBlock:r});const o=yield this._waitForTransaction(e.hash,t,n,i);return null==o&&0===t?null:(this._emitted["t:"+e.hash]=o.blockNumber,0===o.status&&Ns.throwError("transaction failed",h.Logger.errors.CALL_EXCEPTION,{transactionHash:e.hash,transaction:e,receipt:o}),o)})),n}sendTransaction(e){return Os(this,void 0,void 0,(function*(){yield this.getNetwork();const t=yield Promise.resolve(e).then((e=>(0,l.hexlify)(e))),r=this.formatter.transaction(e);null==r.confirmations&&(r.confirmations=0);const n=yield this._getInternalBlockNumber(100+2*this.pollingInterval);try{const e=yield this.perform("sendTransaction",{signedTransaction:t});return this._wrapTransaction(r,e,n)}catch(e){throw e.transaction=r,e.transactionHash=r.hash,e}}))}_getTransactionRequest(e){return Os(this,void 0,void 0,(function*(){const t=yield e,r={};return["from","to"].forEach((e=>{null!=t[e]&&(r[e]=Promise.resolve(t[e]).then((e=>e?this._getAddress(e):null)))})),["gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","value"].forEach((e=>{null!=t[e]&&(r[e]=Promise.resolve(t[e]).then((e=>e?w.from(e):null)))})),["type"].forEach((e=>{null!=t[e]&&(r[e]=Promise.resolve(t[e]).then((e=>null!=e?e:null)))})),t.accessList&&(r.accessList=this.formatter.accessList(t.accessList)),["data"].forEach((e=>{null!=t[e]&&(r[e]=Promise.resolve(t[e]).then((e=>e?(0,l.hexlify)(e):null)))})),this.formatter.transactionRequest(yield(0,L.resolveProperties)(r))}))}_getFilter(e){return Os(this,void 0,void 0,(function*(){e=yield e;const t={};return null!=e.address&&(t.address=this._getAddress(e.address)),["blockHash","topics"].forEach((r=>{null!=e[r]&&(t[r]=e[r])})),["fromBlock","toBlock"].forEach((r=>{null!=e[r]&&(t[r]=this._getBlockTag(e[r]))})),this.formatter.filter(yield(0,L.resolveProperties)(t))}))}_call(e,t,r){return Os(this,void 0,void 0,(function*(){r>=10&&Ns.throwError("CCIP read exceeded maximum redirections",h.Logger.errors.SERVER_ERROR,{redirects:r,transaction:e});const n=e.to,i=yield this.perform("call",{transaction:e,blockTag:t});if(r>=0&&"latest"===t&&null!=n&&"0x556f1830"===i.substring(0,10)&&(0,l.hexDataLength)(i)%32==4)try{const o=(0,l.hexDataSlice)(i,4),s=(0,l.hexDataSlice)(o,0,32);w.from(s).eq(n)||Ns.throwError("CCIP Read sender did not match",h.Logger.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:e,data:i});const a=[],u=w.from((0,l.hexDataSlice)(o,32,64)).toNumber(),c=w.from((0,l.hexDataSlice)(o,u,u+32)).toNumber(),f=(0,l.hexDataSlice)(o,u+32);for(let t=0;t<c;t++){const r=Gs(f,32*t);null==r&&Ns.throwError("CCIP Read contained corrupt URL string",h.Logger.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:e,data:i}),a.push(r)}const d=Ws(o,64);w.from((0,l.hexDataSlice)(o,100,128)).isZero()||Ns.throwError("CCIP Read callback selector included junk",h.Logger.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:e,data:i});const p=(0,l.hexDataSlice)(o,96,100),g=Ws(o,128),m=yield this.ccipReadFetch(e,d,a);null==m&&Ns.throwError("CCIP Read disabled or provided no URLs",h.Logger.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:e,data:i});const y={to:n,data:(0,l.hexConcat)([p,Ys([m,g])])};return this._call(y,t,r+1)}catch(e){if(e.code===h.Logger.errors.SERVER_ERROR)throw e}try{return(0,l.hexlify)(i)}catch(r){return Ns.throwError("bad result from backend",h.Logger.errors.SERVER_ERROR,{method:"call",params:{transaction:e,blockTag:t},result:i,error:r})}}))}call(e,t){return Os(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield(0,L.resolveProperties)({transaction:this._getTransactionRequest(e),blockTag:this._getBlockTag(t),ccipReadEnabled:Promise.resolve(e.ccipReadEnabled)});return this._call(r.transaction,r.blockTag,r.ccipReadEnabled?0:-1)}))}estimateGas(e){return Os(this,void 0,void 0,(function*(){yield this.getNetwork();const t=yield(0,L.resolveProperties)({transaction:this._getTransactionRequest(e)}),r=yield this.perform("estimateGas",t);try{return w.from(r)}catch(e){return Ns.throwError("bad result from backend",h.Logger.errors.SERVER_ERROR,{method:"estimateGas",params:t,result:r,error:e})}}))}_getAddress(e){return Os(this,void 0,void 0,(function*(){"string"!=typeof(e=yield e)&&Ns.throwArgumentError("invalid address or ENS name","name",e);const t=yield this.resolveName(e);return null==t&&Ns.throwError("ENS name not configured",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:`resolveName(${JSON.stringify(e)})`}),t}))}_getBlock(e,t){return Os(this,void 0,void 0,(function*(){yield this.getNetwork(),e=yield e;let r=-128;const n={includeTransactions:!!t};if((0,l.isHexString)(e,32))n.blockHash=e;else try{n.blockTag=yield this._getBlockTag(e),(0,l.isHexString)(n.blockTag)&&(r=parseInt(n.blockTag.substring(2),16))}catch(t){Ns.throwArgumentError("invalid block hash or block tag","blockHashOrBlockTag",e)}return(0,ns.poll)((()=>Os(this,void 0,void 0,(function*(){const e=yield this.perform("getBlock",n);if(null==e)return null!=n.blockHash&&null==this._emitted["b:"+n.blockHash]||null!=n.blockTag&&r>this._emitted.block?null:void 0;if(t){let t=null;for(let r=0;r<e.transactions.length;r++){const n=e.transactions[r];if(null==n.blockNumber)n.confirmations=0;else if(null==n.confirmations){null==t&&(t=yield this._getInternalBlockNumber(100+2*this.pollingInterval));let e=t-n.blockNumber+1;e<=0&&(e=1),n.confirmations=e}}const r=this.formatter.blockWithTransactions(e);return r.transactions=r.transactions.map((e=>this._wrapTransaction(e))),r}return this.formatter.block(e)}))),{oncePoll:this})}))}getBlock(e){return this._getBlock(e,!1)}getBlockWithTransactions(e){return this._getBlock(e,!0)}getTransaction(e){return Os(this,void 0,void 0,(function*(){yield this.getNetwork(),e=yield e;const t={transactionHash:this.formatter.hash(e,!0)};return(0,ns.poll)((()=>Os(this,void 0,void 0,(function*(){const r=yield this.perform("getTransaction",t);if(null==r)return null==this._emitted["t:"+e]?null:void 0;const n=this.formatter.transactionResponse(r);if(null==n.blockNumber)n.confirmations=0;else if(null==n.confirmations){let e=(yield this._getInternalBlockNumber(100+2*this.pollingInterval))-n.blockNumber+1;e<=0&&(e=1),n.confirmations=e}return this._wrapTransaction(n)}))),{oncePoll:this})}))}getTransactionReceipt(e){return Os(this,void 0,void 0,(function*(){yield this.getNetwork(),e=yield e;const t={transactionHash:this.formatter.hash(e,!0)};return(0,ns.poll)((()=>Os(this,void 0,void 0,(function*(){const r=yield this.perform("getTransactionReceipt",t);if(null==r)return null==this._emitted["t:"+e]?null:void 0;if(null==r.blockHash)return;const n=this.formatter.receipt(r);if(null==n.blockNumber)n.confirmations=0;else if(null==n.confirmations){let e=(yield this._getInternalBlockNumber(100+2*this.pollingInterval))-n.blockNumber+1;e<=0&&(e=1),n.confirmations=e}return n}))),{oncePoll:this})}))}getLogs(e){return Os(this,void 0,void 0,(function*(){yield this.getNetwork();const t=yield(0,L.resolveProperties)({filter:this._getFilter(e)}),r=yield this.perform("getLogs",t);return r.forEach((e=>{null==e.removed&&(e.removed=!1)})),Cs.arrayOf(this.formatter.filterLog.bind(this.formatter))(r)}))}getEtherPrice(){return Os(this,void 0,void 0,(function*(){return yield this.getNetwork(),this.perform("getEtherPrice",{})}))}_getBlockTag(e){return Os(this,void 0,void 0,(function*(){if("number"==typeof(e=yield e)&&e<0){e%1&&Ns.throwArgumentError("invalid BlockTag","blockTag",e);let t=yield this._getInternalBlockNumber(100+2*this.pollingInterval);return t+=e,t<0&&(t=0),this.formatter.blockTag(t)}return this.formatter.blockTag(e)}))}getResolver(e){return Os(this,void 0,void 0,(function*(){let t=e;for(;;){if(""===t||"."===t)return null;if("eth"!==e&&"eth"===t)return null;const r=yield this._getResolver(t,"getResolver");if(null!=r){const n=new Qs(this,r,e);return t===e||(yield n.supportsWildcard())?n:null}t=t.split(".").slice(1).join(".")}}))}_getResolver(e,t){return Os(this,void 0,void 0,(function*(){null==t&&(t="ENS");const r=yield this.getNetwork();r.ensAddress||Ns.throwError("network does not support ENS",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:t,network:r.name});try{const t=yield this.call({to:r.ensAddress,data:"0x0178b8bf"+mr(e).substring(2)});return this.formatter.callAddress(t)}catch(e){}return null}))}resolveName(e){return Os(this,void 0,void 0,(function*(){e=yield e;try{return Promise.resolve(this.formatter.address(e))}catch(t){if((0,l.isHexString)(e))throw t}"string"!=typeof e&&Ns.throwArgumentError("invalid ENS name","name",e);const t=yield this.getResolver(e);return t?yield t.getAddress():null}))}lookupAddress(e){return Os(this,void 0,void 0,(function*(){e=yield e;const t=(e=this.formatter.address(e)).substring(2).toLowerCase()+".addr.reverse",r=yield this._getResolver(t,"lookupAddress");if(null==r)return null;const n=Gs(yield this.call({to:r,data:"0x691f3431"+mr(t).substring(2)}),0);return(yield this.resolveName(n))!=e?null:n}))}getAvatar(e){return Os(this,void 0,void 0,(function*(){let t=null;if((0,l.isHexString)(e)){const r=this.formatter.address(e).substring(2).toLowerCase()+".addr.reverse",n=yield this._getResolver(r,"getAvatar");if(!n)return null;t=new Qs(this,n,r);try{const e=yield t.getAvatar();if(e)return e.url}catch(e){if(e.code!==h.Logger.errors.CALL_EXCEPTION)throw e}try{const e=Gs(yield this.call({to:n,data:"0x691f3431"+mr(r).substring(2)}),0);t=yield this.getResolver(e)}catch(e){if(e.code!==h.Logger.errors.CALL_EXCEPTION)throw e;return null}}else if(t=yield this.getResolver(e),!t)return null;const r=yield t.getAvatar();return null==r?null:r.url}))}perform(e,t){return Ns.throwError(e+" not implemented",h.Logger.errors.NOT_IMPLEMENTED,{operation:e})}_startEvent(e){this.polling=this._events.filter((e=>e.pollable())).length>0}_stopEvent(e){this.polling=this._events.filter((e=>e.pollable())).length>0}_addEventListener(e,t,r){const n=new Ds(Ms(e),t,r);return this._events.push(n),this._startEvent(n),this}on(e,t){return this._addEventListener(e,t,!1)}once(e,t){return this._addEventListener(e,t,!0)}emit(e,...t){let r=!1,n=[],i=Ms(e);return this._events=this._events.filter((e=>e.tag!==i||(setTimeout((()=>{e.listener.apply(this,t)}),0),r=!0,!e.once||(n.push(e),!1)))),n.forEach((e=>{this._stopEvent(e)})),r}listenerCount(e){if(!e)return this._events.length;let t=Ms(e);return this._events.filter((e=>e.tag===t)).length}listeners(e){if(null==e)return this._events.map((e=>e.listener));let t=Ms(e);return this._events.filter((e=>e.tag===t)).map((e=>e.listener))}off(e,t){if(null==t)return this.removeAllListeners(e);const r=[];let n=!1,i=Ms(e);return this._events=this._events.filter((e=>e.tag!==i||e.listener!=t||(!!n||(n=!0,r.push(e),!1)))),r.forEach((e=>{this._stopEvent(e)})),this}removeAllListeners(e){let t=[];if(null==e)t=this._events,this._events=[];else{const r=Ms(e);this._events=this._events.filter((e=>e.tag!==r||(t.push(e),!1)))}return t.forEach((e=>{this._stopEvent(e)})),this}constructor(e){if(super(),this._events=[],this._emitted={block:-2},this.disableCcipRead=!1,this.formatter=new.target.getFormatter(),(0,L.defineReadOnly)(this,"anyNetwork","any"===e),this.anyNetwork&&(e=this.detectNetwork()),e instanceof Promise)this._networkPromise=e,e.catch((e=>{})),this._ready().catch((e=>{}));else{const t=(0,L.getStatic)(new.target,"getNetwork")(e);t?((0,L.defineReadOnly)(this,"_network",t),this.emit("network",t,null)):Ns.throwArgumentError("invalid network","network",e)}this._maxInternalBlockNumber=-1024,this._lastBlockNumber=-2,this._maxFilterBlockRange=10,this._pollingInterval=4e3,this._fastQueryDate=0}}var ea={};e(ea,"WebSocketProvider",(function(){return wa}),(function(e){return wa=e}));var ta={};e(ta,"JsonRpcSigner",(function(){return ha}),(function(e){return ha=e})),e(ta,"JsonRpcProvider",(function(){return pa}),(function(e){return pa=e}));l=o("3Yhqu"),h=o("2rINa");var ra=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))};const na=new(0,h.Logger)(xs),ia=["call","estimateGas"];function oa(e,t){if(null==e)return null;if("string"==typeof e.message&&e.message.match("reverted")){const r=(0,l.isHexString)(e.data)?e.data:null;if(!t||r)return{message:e.message,data:r}}if("object"==typeof e){for(const r in e){const n=oa(e[r],t);if(n)return n}return null}if("string"==typeof e)try{return oa(JSON.parse(e),t)}catch(e){}return null}function sa(e,t,r){const n=r.transaction||r.signedTransaction;if("call"===e){const e=oa(t,!0);if(e)return e.data;na.throwError("missing revert data in call exception; Transaction reverted without a reason string",h.Logger.errors.CALL_EXCEPTION,{data:"0x",transaction:n,error:t})}if("estimateGas"===e){let r=oa(t.body,!1);null==r&&(r=oa(t,!1)),r&&na.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",h.Logger.errors.UNPREDICTABLE_GAS_LIMIT,{reason:r.message,method:e,transaction:n,error:t})}let i=t.message;throw t.code===h.Logger.errors.SERVER_ERROR&&t.error&&"string"==typeof t.error.message?i=t.error.message:"string"==typeof t.body?i=t.body:"string"==typeof t.responseText&&(i=t.responseText),i=(i||"").toLowerCase(),i.match(/insufficient funds|base fee exceeds gas limit/i)&&na.throwError("insufficient funds for intrinsic transaction cost",h.Logger.errors.INSUFFICIENT_FUNDS,{error:t,method:e,transaction:n}),i.match(/nonce (is )?too low/i)&&na.throwError("nonce has already been used",h.Logger.errors.NONCE_EXPIRED,{error:t,method:e,transaction:n}),i.match(/replacement transaction underpriced|transaction gas price.*too low/i)&&na.throwError("replacement fee too low",h.Logger.errors.REPLACEMENT_UNDERPRICED,{error:t,method:e,transaction:n}),i.match(/only replay-protected/i)&&na.throwError("legacy pre-eip-155 transactions not supported",h.Logger.errors.UNSUPPORTED_OPERATION,{error:t,method:e,transaction:n}),ia.indexOf(e)>=0&&i.match(/gas required exceeds allowance|always failing transaction|execution reverted/)&&na.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",h.Logger.errors.UNPREDICTABLE_GAS_LIMIT,{error:t,method:e,transaction:n}),t}function aa(e){return new Promise((function(t){setTimeout(t,e)}))}function ua(e){if(e.error){const t=new Error(e.error.message);throw t.code=e.error.code,t.data=e.error.data,t}return e.result}function ca(e){return e?e.toLowerCase():e}const la={};class ha extends Yr.Signer{connect(e){return na.throwError("cannot alter JSON-RPC Signer connection",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"connect"})}connectUnchecked(){return new fa(la,this.provider,this._address||this._index)}getAddress(){return this._address?Promise.resolve(this._address):this.provider.send("eth_accounts",[]).then((e=>(e.length<=this._index&&na.throwError("unknown account #"+this._index,h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"getAddress"}),this.provider.formatter.address(e[this._index]))))}sendUncheckedTransaction(e){e=(0,L.shallowCopy)(e);const t=this.getAddress().then((e=>(e&&(e=e.toLowerCase()),e)));if(null==e.gasLimit){const r=(0,L.shallowCopy)(e);r.from=t,e.gasLimit=this.provider.estimateGas(r)}return null!=e.to&&(e.to=Promise.resolve(e.to).then((e=>ra(this,void 0,void 0,(function*(){if(null==e)return null;const t=yield this.provider.resolveName(e);return null==t&&na.throwArgumentError("provided ENS name resolves to null","tx.to",e),t}))))),(0,L.resolveProperties)({tx:(0,L.resolveProperties)(e),sender:t}).then((({tx:t,sender:r})=>{null!=t.from?t.from.toLowerCase()!==r&&na.throwArgumentError("from address mismatch","transaction",e):t.from=r;const n=this.provider.constructor.hexlifyTransaction(t,{from:!0});return this.provider.send("eth_sendTransaction",[n]).then((e=>e),(e=>("string"==typeof e.message&&e.message.match(/user denied/i)&&na.throwError("user rejected transaction",h.Logger.errors.ACTION_REJECTED,{action:"sendTransaction",transaction:t}),sa("sendTransaction",e,n))))}))}signTransaction(e){return na.throwError("signing transactions is unsupported",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"signTransaction"})}sendTransaction(e){return ra(this,void 0,void 0,(function*(){const t=yield this.provider._getInternalBlockNumber(100+2*this.provider.pollingInterval),r=yield this.sendUncheckedTransaction(e);try{return yield(0,ns.poll)((()=>ra(this,void 0,void 0,(function*(){const e=yield this.provider.getTransaction(r);if(null!==e)return this.provider._wrapTransaction(e,r,t)}))),{oncePoll:this.provider})}catch(e){throw e.transactionHash=r,e}}))}signMessage(e){return ra(this,void 0,void 0,(function*(){const t="string"==typeof e?vt(e):e,r=yield this.getAddress();try{return yield this.provider.send("personal_sign",[(0,l.hexlify)(t),r.toLowerCase()])}catch(e){throw"string"==typeof e.message&&e.message.match(/user denied/i)&&na.throwError("user rejected signing",h.Logger.errors.ACTION_REJECTED,{action:"signMessage",from:r,message:t}),e}}))}_legacySignMessage(e){return ra(this,void 0,void 0,(function*(){const t="string"==typeof e?vt(e):e,r=yield this.getAddress();try{return yield this.provider.send("eth_sign",[r.toLowerCase(),(0,l.hexlify)(t)])}catch(e){throw"string"==typeof e.message&&e.message.match(/user denied/i)&&na.throwError("user rejected signing",h.Logger.errors.ACTION_REJECTED,{action:"_legacySignMessage",from:r,message:t}),e}}))}_signTypedData(e,t,r){return ra(this,void 0,void 0,(function*(){const n=yield wr.TypedDataEncoder.resolveNames(e,t,r,(e=>this.provider.resolveName(e))),i=yield this.getAddress();try{return yield this.provider.send("eth_signTypedData_v4",[i.toLowerCase(),JSON.stringify(wr.TypedDataEncoder.getPayload(n.domain,t,n.value))])}catch(e){throw"string"==typeof e.message&&e.message.match(/user denied/i)&&na.throwError("user rejected signing",h.Logger.errors.ACTION_REJECTED,{action:"_signTypedData",from:i,message:{domain:n.domain,types:t,value:n.value}}),e}}))}unlock(e){return ra(this,void 0,void 0,(function*(){const t=this.provider,r=yield this.getAddress();return t.send("personal_unlockAccount",[r.toLowerCase(),e,null])}))}constructor(e,t,r){if(super(),e!==la)throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");(0,L.defineReadOnly)(this,"provider",t),null==r&&(r=0),"string"==typeof r?((0,L.defineReadOnly)(this,"_address",this.provider.formatter.address(r)),(0,L.defineReadOnly)(this,"_index",null)):"number"==typeof r?((0,L.defineReadOnly)(this,"_index",r),(0,L.defineReadOnly)(this,"_address",null)):na.throwArgumentError("invalid address or index","addressOrIndex",r)}}class fa extends ha{sendTransaction(e){return this.sendUncheckedTransaction(e).then((e=>({hash:e,nonce:null,gasLimit:null,gasPrice:null,data:null,value:null,chainId:null,confirmations:0,from:null,wait:t=>this.provider.waitForTransaction(e,t)})))}}const da={chainId:!0,data:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,value:!0,type:!0,accessList:!0,maxFeePerGas:!0,maxPriorityFeePerGas:!0};class pa extends ts.BaseProvider{get _cache(){return null==this._eventLoopCache&&(this._eventLoopCache={}),this._eventLoopCache}static defaultUrl(){return"http://localhost:8545"}detectNetwork(){return this._cache.detectNetwork||(this._cache.detectNetwork=this._uncachedDetectNetwork(),setTimeout((()=>{this._cache.detectNetwork=null}),0)),this._cache.detectNetwork}_uncachedDetectNetwork(){return ra(this,void 0,void 0,(function*(){yield aa(0);let e=null;try{e=yield this.send("eth_chainId",[])}catch(t){try{e=yield this.send("net_version",[])}catch(e){}}if(null!=e){const t=(0,L.getStatic)(this.constructor,"getNetwork");try{return t(w.from(e).toNumber())}catch(t){return na.throwError("could not detect network",h.Logger.errors.NETWORK_ERROR,{chainId:e,event:"invalidNetwork",serverError:t})}}return na.throwError("could not detect network",h.Logger.errors.NETWORK_ERROR,{event:"noNetwork"})}))}getSigner(e){return new ha(la,this,e)}getUncheckedSigner(e){return this.getSigner(e).connectUnchecked()}listAccounts(){return this.send("eth_accounts",[]).then((e=>e.map((e=>this.formatter.address(e)))))}send(e,t){const r={method:e,params:t,id:this._nextId++,jsonrpc:"2.0"};this.emit("debug",{action:"request",request:(0,L.deepCopy)(r),provider:this});const n=["eth_chainId","eth_blockNumber"].indexOf(e)>=0;if(n&&this._cache[e])return this._cache[e];const i=(0,ns.fetchJson)(this.connection,JSON.stringify(r),ua).then((e=>(this.emit("debug",{action:"response",request:r,response:e,provider:this}),e)),(e=>{throw this.emit("debug",{action:"response",error:e,request:r,provider:this}),e}));return n&&(this._cache[e]=i,setTimeout((()=>{this._cache[e]=null}),0)),i}prepareRequest(e,t){switch(e){case"getBlockNumber":return["eth_blockNumber",[]];case"getGasPrice":return["eth_gasPrice",[]];case"getBalance":return["eth_getBalance",[ca(t.address),t.blockTag]];case"getTransactionCount":return["eth_getTransactionCount",[ca(t.address),t.blockTag]];case"getCode":return["eth_getCode",[ca(t.address),t.blockTag]];case"getStorageAt":return["eth_getStorageAt",[ca(t.address),(0,l.hexZeroPad)(t.position,32),t.blockTag]];case"sendTransaction":return["eth_sendRawTransaction",[t.signedTransaction]];case"getBlock":return t.blockTag?["eth_getBlockByNumber",[t.blockTag,!!t.includeTransactions]]:t.blockHash?["eth_getBlockByHash",[t.blockHash,!!t.includeTransactions]]:null;case"getTransaction":return["eth_getTransactionByHash",[t.transactionHash]];case"getTransactionReceipt":return["eth_getTransactionReceipt",[t.transactionHash]];case"call":return["eth_call",[(0,L.getStatic)(this.constructor,"hexlifyTransaction")(t.transaction,{from:!0}),t.blockTag]];case"estimateGas":return["eth_estimateGas",[(0,L.getStatic)(this.constructor,"hexlifyTransaction")(t.transaction,{from:!0})]];case"getLogs":return t.filter&&null!=t.filter.address&&(t.filter.address=ca(t.filter.address)),["eth_getLogs",[t.filter]]}return null}perform(e,t){return ra(this,void 0,void 0,(function*(){if("call"===e||"estimateGas"===e){const e=t.transaction;if(e&&null!=e.type&&w.from(e.type).isZero()&&null==e.maxFeePerGas&&null==e.maxPriorityFeePerGas){const r=yield this.getFeeData();null==r.maxFeePerGas&&null==r.maxPriorityFeePerGas&&((t=(0,L.shallowCopy)(t)).transaction=(0,L.shallowCopy)(e),delete t.transaction.type)}}const r=this.prepareRequest(e,t);null==r&&na.throwError(e+" not implemented",h.Logger.errors.NOT_IMPLEMENTED,{operation:e});try{return yield this.send(r[0],r[1])}catch(r){return sa(e,r,t)}}))}_startEvent(e){"pending"===e.tag&&this._startPending(),super._startEvent(e)}_startPending(){if(null!=this._pendingFilter)return;const e=this,t=this.send("eth_newPendingTransactionFilter",[]);this._pendingFilter=t,t.then((function(r){return function n(){e.send("eth_getFilterChanges",[r]).then((function(r){if(e._pendingFilter!=t)return null;let n=Promise.resolve();return r.forEach((function(t){e._emitted["t:"+t.toLowerCase()]="pending",n=n.then((function(){return e.getTransaction(t).then((function(t){return e.emit("pending",t),null}))}))})),n.then((function(){return aa(1e3)}))})).then((function(){if(e._pendingFilter==t)return setTimeout((function(){n()}),0),null;e.send("eth_uninstallFilter",[r])})).catch((e=>{}))}(),r})).catch((e=>{}))}_stopEvent(e){"pending"===e.tag&&0===this.listenerCount("pending")&&(this._pendingFilter=null),super._stopEvent(e)}static hexlifyTransaction(e,t){const r=(0,L.shallowCopy)(da);if(t)for(const e in t)t[e]&&(r[e]=!0);(0,L.checkProperties)(e,r);const n={};return["chainId","gasLimit","gasPrice","type","maxFeePerGas","maxPriorityFeePerGas","nonce","value"].forEach((function(t){if(null==e[t])return;const r=(0,l.hexValue)(w.from(e[t]));"gasLimit"===t&&(t="gas"),n[t]=r})),["from","to","data"].forEach((function(t){null!=e[t]&&(n[t]=(0,l.hexlify)(e[t]))})),e.accessList&&(n.accessList=ii(e.accessList)),n}constructor(e,t){let r=t;null==r&&(r=new Promise(((e,t)=>{setTimeout((()=>{this.detectNetwork().then((t=>{e(t)}),(e=>{t(e)}))}),0)}))),super(r),e||(e=(0,L.getStatic)(this.constructor,"defaultUrl")()),(0,L.defineReadOnly)(this,"connection","string"==typeof e?Object.freeze({url:e}):Object.freeze((0,L.shallowCopy)(e))),this._nextId=42}}h=o("2rINa");let ga=null;try{if(ga=WebSocket,null==ga)throw new Error("inject please")}catch(e){const t=new(0,h.Logger)(xs);ga=function(){t.throwError("WebSockets not supported in this environment",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new WebSocket()"})}}h=o("2rINa");var ma=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))};const ya=new(0,h.Logger)(xs);let va=1;class wa extends ta.JsonRpcProvider{get websocket(){return this._websocket}detectNetwork(){return this._detectNetwork}get pollingInterval(){return 0}resetEventsBlock(e){ya.throwError("cannot reset events block on WebSocketProvider",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"resetEventBlock"})}set pollingInterval(e){ya.throwError("cannot set polling interval on WebSocketProvider",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"setPollingInterval"})}poll(){return ma(this,void 0,void 0,(function*(){return null}))}set polling(e){e&&ya.throwError("cannot set polling on WebSocketProvider",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"setPolling"})}send(e,t){const r=va++;return new Promise(((n,i)=>{const o=JSON.stringify({method:e,params:t,id:r,jsonrpc:"2.0"});this.emit("debug",{action:"request",request:JSON.parse(o),provider:this}),this._requests[String(r)]={callback:function(e,t){return e?i(e):n(t)},payload:o},this._wsReady&&this.websocket.send(o)}))}static defaultUrl(){return"ws://localhost:8546"}_subscribe(e,t,r){return ma(this,void 0,void 0,(function*(){let n=this._subIds[e];null==n&&(n=Promise.all(t).then((e=>this.send("eth_subscribe",e))),this._subIds[e]=n);const i=yield n;this._subs[i]={tag:e,processFunc:r}}))}_startEvent(e){switch(e.type){case"block":this._subscribe("block",["newHeads"],(e=>{const t=w.from(e.number).toNumber();this._emitted.block=t,this.emit("block",t)}));break;case"pending":this._subscribe("pending",["newPendingTransactions"],(e=>{this.emit("pending",e)}));break;case"filter":this._subscribe(e.tag,["logs",this._getFilter(e.filter)],(t=>{null==t.removed&&(t.removed=!1),this.emit(e.filter,this.formatter.filterLog(t))}));break;case"tx":{const t=e=>{const t=e.hash;this.getTransactionReceipt(t).then((e=>{e&&this.emit(t,e)}))};t(e),this._subscribe("tx",["newHeads"],(e=>{this._events.filter((e=>"tx"===e.type)).forEach(t)}));break}case"debug":case"poll":case"willPoll":case"didPoll":case"error":break;default:console.log("unhandled:",e)}}_stopEvent(e){let t=e.tag;if("tx"===e.type){if(this._events.filter((e=>"tx"===e.type)).length)return;t="tx"}else if(this.listenerCount(e.event))return;const r=this._subIds[t];r&&(delete this._subIds[t],r.then((e=>{this._subs[e]&&(delete this._subs[e],this.send("eth_unsubscribe",[e]))})))}destroy(){return ma(this,void 0,void 0,(function*(){this.websocket.readyState===ga.CONNECTING&&(yield new Promise((e=>{this.websocket.onopen=function(){e(!0)},this.websocket.onerror=function(){e(!1)}}))),this.websocket.close(1e3)}))}constructor(e,t){"any"===t&&ya.throwError("WebSocketProvider does not support 'any' network yet",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"network:any"}),super("string"==typeof e?e:"_websocket",t),this._pollingInterval=-1,this._wsReady=!1,(0,L.defineReadOnly)(this,"_websocket","string"==typeof e?new ga(this.connection.url):e),(0,L.defineReadOnly)(this,"_requests",{}),(0,L.defineReadOnly)(this,"_subs",{}),(0,L.defineReadOnly)(this,"_subIds",{}),(0,L.defineReadOnly)(this,"_detectNetwork",super.detectNetwork()),this.websocket.onopen=()=>{this._wsReady=!0,Object.keys(this._requests).forEach((e=>{this.websocket.send(this._requests[e].payload)}))},this.websocket.onmessage=e=>{const t=e.data,r=JSON.parse(t);if(null!=r.id){const e=String(r.id),n=this._requests[e];if(delete this._requests[e],void 0!==r.result)n.callback(null,r.result),this.emit("debug",{action:"response",request:JSON.parse(n.payload),response:r.result,provider:this});else{let e=null;r.error?(e=new Error(r.error.message||"unknown error"),(0,L.defineReadOnly)(e,"code",r.error.code||null),(0,L.defineReadOnly)(e,"response",t)):e=new Error("unknown error"),n.callback(e,void 0),this.emit("debug",{action:"response",error:e,request:JSON.parse(n.payload),provider:this})}}else if("eth_subscription"===r.method){const e=this._subs[r.params.subscription];e&&e.processFunc(r.params.result)}else console.warn("this should not happen")};const r=setInterval((()=>{this.emit("poll")}),1e3);r.unref&&r.unref()}}h=o("2rINa");var ba={};e(ba,"StaticJsonRpcProvider",(function(){return xa}),(function(e){return xa=e})),e(ba,"UrlJsonRpcProvider",(function(){return Sa}),(function(e){return Sa=e}));h=o("2rINa");var Aa=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))};const Ea=new(0,h.Logger)(xs);class xa extends ta.JsonRpcProvider{detectNetwork(){const e=Object.create(null,{detectNetwork:{get:()=>super.detectNetwork}});return Aa(this,void 0,void 0,(function*(){let t=this.network;return null==t&&(t=yield e.detectNetwork.call(this),t||Ea.throwError("no network detected",h.Logger.errors.UNKNOWN_ERROR,{}),null==this._network&&((0,L.defineReadOnly)(this,"_network",t),this.emit("network",t,null))),t}))}}class Sa extends xa{_startPending(){Ea.warn("WARNING: API provider does not support pending filters")}isCommunityResource(){return!1}getSigner(e){return Ea.throwError("API provider does not support signing",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"getSigner"})}listAccounts(){return Promise.resolve([])}static getApiKey(e){return e}static getUrl(e,t){return Ea.throwError("not implemented; sub-classes must override getUrl",h.Logger.errors.NOT_IMPLEMENTED,{operation:"getUrl"})}constructor(e,t){Ea.checkAbstract(new.target,Sa),e=(0,L.getStatic)(new.target,"getNetwork")(e),t=(0,L.getStatic)(new.target,"getApiKey")(t);super((0,L.getStatic)(new.target,"getUrl")(e,t),e),"string"==typeof t?(0,L.defineReadOnly)(this,"apiKey",t):null!=t&&Object.keys(t).forEach((e=>{(0,L.defineReadOnly)(this,e,t[e])}))}}const Ca=new(0,h.Logger)(xs),ka="_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";class _a extends ea.WebSocketProvider{isCommunityResource(){return this.apiKey===ka}constructor(e,t){const r=new Pa(e,t);super(r.connection.url.replace(/^http/i,"ws").replace(".alchemyapi.",".ws.alchemyapi."),r.network),(0,L.defineReadOnly)(this,"apiKey",r.apiKey)}}class Pa extends ba.UrlJsonRpcProvider{static getWebSocketProvider(e,t){return new _a(e,t)}static getApiKey(e){return null==e?ka:(e&&"string"!=typeof e&&Ca.throwArgumentError("invalid apiKey","apiKey",e),e)}static getUrl(e,t){let r=null;switch(e.name){case"homestead":r="eth-mainnet.alchemyapi.io/v2/";break;case"ropsten":r="eth-ropsten.alchemyapi.io/v2/";break;case"rinkeby":r="eth-rinkeby.alchemyapi.io/v2/";break;case"goerli":r="eth-goerli.alchemyapi.io/v2/";break;case"kovan":r="eth-kovan.alchemyapi.io/v2/";break;case"matic":r="polygon-mainnet.g.alchemy.com/v2/";break;case"maticmum":r="polygon-mumbai.g.alchemy.com/v2/";break;case"arbitrum":r="arb-mainnet.g.alchemy.com/v2/";break;case"arbitrum-rinkeby":r="arb-rinkeby.g.alchemy.com/v2/";break;case"arbitrum-goerli":r="arb-goerli.g.alchemy.com/v2/";break;case"optimism":r="opt-mainnet.g.alchemy.com/v2/";break;case"optimism-kovan":r="opt-kovan.g.alchemy.com/v2/";break;case"optimism-goerli":r="opt-goerli.g.alchemy.com/v2/";break;default:Ca.throwArgumentError("unsupported network","network",arguments[0])}return{allowGzip:!0,url:"https://"+r+t,throttleCallback:(e,r)=>(t===ka&&Rs(),Promise.resolve(!0))}}isCommunityResource(){return this.apiKey===ka}}const Ra=new(0,(h=o("2rINa")).Logger)(xs),Oa="9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";function Na(e){switch(e){case"homestead":return"rpc.ankr.com/eth/";case"ropsten":return"rpc.ankr.com/eth_ropsten/";case"rinkeby":return"rpc.ankr.com/eth_rinkeby/";case"goerli":return"rpc.ankr.com/eth_goerli/";case"matic":return"rpc.ankr.com/polygon/";case"arbitrum":return"rpc.ankr.com/arbitrum/"}return Ra.throwArgumentError("unsupported network","name",e)}class Ia extends ba.UrlJsonRpcProvider{isCommunityResource(){return this.apiKey===Oa}static getApiKey(e){return null==e?Oa:e}static getUrl(e,t){null==t&&(t=Oa);const r={allowGzip:!0,url:"https://"+Na(e.name)+t,throttleCallback:(e,r)=>(t.apiKey===Oa&&Rs(),Promise.resolve(!0))};return null!=t.projectSecret&&(r.user="",r.password=t.projectSecret),r}}var Ta={};e(Ta,"CloudflareProvider",(function(){return Fa}),(function(e){return Fa=e}));h=o("2rINa");var Ma=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))};const Ba=new(0,h.Logger)(xs);class Fa extends ba.UrlJsonRpcProvider{static getApiKey(e){return null!=e&&Ba.throwArgumentError("apiKey not supported for cloudflare","apiKey",e),null}static getUrl(e,t){let r=null;if("homestead"===e.name)r="https://cloudflare-eth.com/";else Ba.throwArgumentError("unsupported network","network",arguments[0]);return r}perform(e,t){const r=Object.create(null,{perform:{get:()=>super.perform}});return Ma(this,void 0,void 0,(function*(){if("getBlockNumber"===e){return(yield r.perform.call(this,"getBlock",{blockTag:"latest"})).number}return r.perform.call(this,e,t)}))}}var La={};e(La,"EtherscanProvider",(function(){return Wa}),(function(e){return Wa=e}));l=o("3Yhqu"),h=o("2rINa");var Da=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))};const ja=new(0,h.Logger)(xs);function Ua(e){const t={};for(let r in e){if(null==e[r])continue;let n=e[r];"type"===r&&0===n||(n={type:!0,gasLimit:!0,gasPrice:!0,maxFeePerGs:!0,maxPriorityFeePerGas:!0,nonce:!0,value:!0}[r]?(0,l.hexValue)((0,l.hexlify)(n)):"accessList"===r?"["+ii(n).map((e=>`{address:"${e.address}",storageKeys:["${e.storageKeys.join('","')}"]}`)).join(",")+"]":(0,l.hexlify)(n),t[r]=n)}return t}function za(e){if(0==e.status&&("No records found"===e.message||"No transactions found"===e.message))return e.result;if(1!=e.status||"string"!=typeof e.message||!e.message.match(/^OK/)){const t=new Error("invalid response");throw t.result=JSON.stringify(e),(e.result||"").toLowerCase().indexOf("rate limit")>=0&&(t.throttleRetry=!0),t}return e.result}function qa(e){if(e&&0==e.status&&"NOTOK"==e.message&&(e.result||"").toLowerCase().indexOf("rate limit")>=0){const t=new Error("throttled response");throw t.result=JSON.stringify(e),t.throttleRetry=!0,t}if("2.0"!=e.jsonrpc){const t=new Error("invalid response");throw t.result=JSON.stringify(e),t}if(e.error){const t=new Error(e.error.message||"unknown error");throw e.error.code&&(t.code=e.error.code),e.error.data&&(t.data=e.error.data),t}return e.result}function Ka(e){if("pending"===e)throw new Error("pending not supported");return"latest"===e?e:parseInt(e.substring(2),16)}function Ga(e,t,r){if("call"===e&&t.code===h.Logger.errors.SERVER_ERROR){const e=t.error;if(e&&(e.message.match(/reverted/i)||e.message.match(/VM execution error/i))){let r=e.data;if(r&&(r="0x"+r.replace(/^.*0x/i,"")),(0,l.isHexString)(r))return r;ja.throwError("missing revert data in call exception",h.Logger.errors.CALL_EXCEPTION,{error:t,data:"0x"})}}let n=t.message;throw t.code===h.Logger.errors.SERVER_ERROR&&(t.error&&"string"==typeof t.error.message?n=t.error.message:"string"==typeof t.body?n=t.body:"string"==typeof t.responseText&&(n=t.responseText)),n=(n||"").toLowerCase(),n.match(/insufficient funds/)&&ja.throwError("insufficient funds for intrinsic transaction cost",h.Logger.errors.INSUFFICIENT_FUNDS,{error:t,method:e,transaction:r}),n.match(/same hash was already imported|transaction nonce is too low|nonce too low/)&&ja.throwError("nonce has already been used",h.Logger.errors.NONCE_EXPIRED,{error:t,method:e,transaction:r}),n.match(/another transaction with same nonce/)&&ja.throwError("replacement fee too low",h.Logger.errors.REPLACEMENT_UNDERPRICED,{error:t,method:e,transaction:r}),n.match(/execution failed due to an exception|execution reverted/)&&ja.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",h.Logger.errors.UNPREDICTABLE_GAS_LIMIT,{error:t,method:e,transaction:r}),t}class Wa extends ts.BaseProvider{getBaseUrl(){switch(this.network?this.network.name:"invalid"){case"homestead":return"https://api.etherscan.io";case"ropsten":return"https://api-ropsten.etherscan.io";case"rinkeby":return"https://api-rinkeby.etherscan.io";case"kovan":return"https://api-kovan.etherscan.io";case"goerli":return"https://api-goerli.etherscan.io";case"optimism":return"https://api-optimistic.etherscan.io";case"optimism-kovan":return"https://api-kovan-optimistic.etherscan.io"}return ja.throwArgumentError("unsupported network","network",this.network.name)}getUrl(e,t){const r=Object.keys(t).reduce(((e,r)=>{const n=t[r];return null!=n&&(e+=`&${r}=${n}`),e}),""),n=this.apiKey?`&apikey=${this.apiKey}`:"";return`${this.baseUrl}/api?module=${e}${r}${n}`}getPostUrl(){return`${this.baseUrl}/api`}getPostData(e,t){return t.module=e,t.apikey=this.apiKey,t}fetch(e,t,r){return Da(this,void 0,void 0,(function*(){const n=r?this.getPostUrl():this.getUrl(e,t),i=r?this.getPostData(e,t):null,o="proxy"===e?qa:za;this.emit("debug",{action:"request",request:n,provider:this});const s={url:n,throttleSlotInterval:1e3,throttleCallback:(e,t)=>(this.isCommunityResource()&&Rs(),Promise.resolve(!0))};let a=null;i&&(s.headers={"content-type":"application/x-www-form-urlencoded; charset=UTF-8"},a=Object.keys(i).map((e=>`${e}=${i[e]}`)).join("&"));const u=yield(0,ns.fetchJson)(s,a,o||qa);return this.emit("debug",{action:"response",request:n,response:(0,L.deepCopy)(u),provider:this}),u}))}detectNetwork(){return Da(this,void 0,void 0,(function*(){return this.network}))}perform(e,t){const r=Object.create(null,{perform:{get:()=>super.perform}});return Da(this,void 0,void 0,(function*(){switch(e){case"getBlockNumber":return this.fetch("proxy",{action:"eth_blockNumber"});case"getGasPrice":return this.fetch("proxy",{action:"eth_gasPrice"});case"getBalance":return this.fetch("account",{action:"balance",address:t.address,tag:t.blockTag});case"getTransactionCount":return this.fetch("proxy",{action:"eth_getTransactionCount",address:t.address,tag:t.blockTag});case"getCode":return this.fetch("proxy",{action:"eth_getCode",address:t.address,tag:t.blockTag});case"getStorageAt":return this.fetch("proxy",{action:"eth_getStorageAt",address:t.address,position:t.position,tag:t.blockTag});case"sendTransaction":return this.fetch("proxy",{action:"eth_sendRawTransaction",hex:t.signedTransaction},!0).catch((e=>Ga("sendTransaction",e,t.signedTransaction)));case"getBlock":if(t.blockTag)return this.fetch("proxy",{action:"eth_getBlockByNumber",tag:t.blockTag,boolean:t.includeTransactions?"true":"false"});throw new Error("getBlock by blockHash not implemented");case"getTransaction":return this.fetch("proxy",{action:"eth_getTransactionByHash",txhash:t.transactionHash});case"getTransactionReceipt":return this.fetch("proxy",{action:"eth_getTransactionReceipt",txhash:t.transactionHash});case"call":{if("latest"!==t.blockTag)throw new Error("EtherscanProvider does not support blockTag for call");const e=Ua(t.transaction);e.module="proxy",e.action="eth_call";try{return yield this.fetch("proxy",e,!0)}catch(e){return Ga("call",e,t.transaction)}}case"estimateGas":{const e=Ua(t.transaction);e.module="proxy",e.action="eth_estimateGas";try{return yield this.fetch("proxy",e,!0)}catch(e){return Ga("estimateGas",e,t.transaction)}}case"getLogs":{const e={action:"getLogs"};if(t.filter.fromBlock&&(e.fromBlock=Ka(t.filter.fromBlock)),t.filter.toBlock&&(e.toBlock=Ka(t.filter.toBlock)),t.filter.address&&(e.address=t.filter.address),t.filter.topics&&t.filter.topics.length>0&&(t.filter.topics.length>1&&ja.throwError("unsupported topic count",h.Logger.errors.UNSUPPORTED_OPERATION,{topics:t.filter.topics}),1===t.filter.topics.length)){const r=t.filter.topics[0];"string"==typeof r&&66===r.length||ja.throwError("unsupported topic format",h.Logger.errors.UNSUPPORTED_OPERATION,{topic0:r}),e.topic0=r}const r=yield this.fetch("logs",e);let n={};for(let e=0;e<r.length;e++){const t=r[e];if(null==t.blockHash){if(null==n[t.blockNumber]){const e=yield this.getBlock(t.blockNumber);e&&(n[t.blockNumber]=e.hash)}t.blockHash=n[t.blockNumber]}}return r}case"getEtherPrice":return"homestead"!==this.network.name?0:parseFloat((yield this.fetch("stats",{action:"ethprice"})).ethusd)}return r.perform.call(this,e,t)}))}getHistory(e,t,r){return Da(this,void 0,void 0,(function*(){const n={action:"txlist",address:yield this.resolveName(e),startblock:null==t?0:t,endblock:null==r?99999999:r,sort:"asc"};return(yield this.fetch("account",n)).map((e=>{["contractAddress","to"].forEach((function(t){""==e[t]&&delete e[t]})),null==e.creates&&null!=e.contractAddress&&(e.creates=e.contractAddress);const t=this.formatter.transactionResponse(e);return e.timeStamp&&(t.timestamp=parseInt(e.timeStamp)),t}))}))}isCommunityResource(){return null==this.apiKey}constructor(e,t){super(e),(0,L.defineReadOnly)(this,"baseUrl",this.getBaseUrl()),(0,L.defineReadOnly)(this,"apiKey",t||null)}}var Ha={};e(Ha,"FallbackProvider",(function(){return au}),(function(e){return au=e}));l=o("3Yhqu"),h=o("2rINa");var Ja=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{u(n.next(e))}catch(e){o(e)}}function a(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))};const Va=new(0,h.Logger)(xs);function Ya(){return(new Date).getTime()}function Qa(e){let t=null;for(let r=0;r<e.length;r++){const n=e[r];if(null==n)return null;t?t.name===n.name&&t.chainId===n.chainId&&(t.ensAddress===n.ensAddress||null==t.ensAddress&&null==n.ensAddress)||Va.throwArgumentError("provider mismatch","networks",e):t=n}return t}function Za(e,t){e=e.slice().sort();const r=Math.floor(e.length/2);if(e.length%2)return e[r];const n=e[r-1],i=e[r];return null!=t&&Math.abs(n-i)>t?null:(n+i)/2}function Xa(e){if(null===e)return"null";if("number"==typeof e||"boolean"==typeof e)return JSON.stringify(e);if("string"==typeof e)return e;if(w.isBigNumber(e))return e.toString();if(Array.isArray(e))return JSON.stringify(e.map((e=>Xa(e))));if("object"==typeof e){const t=Object.keys(e);return t.sort(),"{"+t.map((t=>{let r=e[t];return r="function"==typeof r?"[function]":Xa(r),JSON.stringify(t)+":"+r})).join(",")+"}"}throw new Error("unknown value type: "+typeof e)}let $a=1;function eu(e){let t=null,r=null,n=new Promise((n=>{t=function(){r&&(clearTimeout(r),r=null),n()},r=setTimeout(t,e)}));return{cancel:t,getPromise:function(){return n},wait:e=>(n=n.then(e),n)}}const tu=[h.Logger.errors.CALL_EXCEPTION,h.Logger.errors.INSUFFICIENT_FUNDS,h.Logger.errors.NONCE_EXPIRED,h.Logger.errors.REPLACEMENT_UNDERPRICED,h.Logger.errors.UNPREDICTABLE_GAS_LIMIT],ru=["address","args","errorArgs","errorSignature","method","transaction"];function nu(e,t){const r={weight:e.weight};return Object.defineProperty(r,"provider",{get:()=>e.provider}),e.start&&(r.start=e.start),t&&(r.duration=t-e.start),e.done&&(e.error?r.error=e.error:r.result=e.result||null),r}function iu(e,t,r){let n=Xa;switch(t){case"getBlockNumber":return function(t){const r=t.map((e=>e.result));let n=Za(t.map((e=>e.result)),2);if(null!=n)return n=Math.ceil(n),r.indexOf(n+1)>=0&&n++,n>=e._highestBlockNumber&&(e._highestBlockNumber=n),e._highestBlockNumber};case"getGasPrice":return function(e){const t=e.map((e=>e.result));return t.sort(),t[Math.floor(t.length/2)]};case"getEtherPrice":return function(e){return Za(e.map((e=>e.result)))};case"getBalance":case"getTransactionCount":case"getCode":case"getStorageAt":case"call":case"estimateGas":case"getLogs":break;case"getTransaction":case"getTransactionReceipt":n=function(e){return null==e?null:((e=(0,L.shallowCopy)(e)).confirmations=-1,Xa(e))};break;case"getBlock":n=r.includeTransactions?function(e){return null==e?null:((e=(0,L.shallowCopy)(e)).transactions=e.transactions.map((e=>((e=(0,L.shallowCopy)(e)).confirmations=-1,e))),Xa(e))}:function(e){return null==e?null:Xa(e)};break;default:throw new Error("unknown method: "+t)}return function(e,t){return function(r){const n={};r.forEach((t=>{const r=e(t.result);n[r]||(n[r]={count:0,result:t.result}),n[r].count++}));const i=Object.keys(n);for(let e=0;e<i.length;e++){const r=n[i[e]];if(r.count>=t)return r.result}}}(n,e.quorum)}function ou(e,t){return Ja(this,void 0,void 0,(function*(){const r=e.provider;return null!=r.blockNumber&&r.blockNumber>=t||-1===t?r:(0,ns.poll)((()=>new Promise(((n,i)=>{setTimeout((function(){return r.blockNumber>=t?n(r):e.cancelled?n(null):n(void 0)}),0)}))),{oncePoll:r})}))}function su(e,t,r,n){return Ja(this,void 0,void 0,(function*(){let i=e.provider;switch(r){case"getBlockNumber":case"getGasPrice":return i[r]();case"getEtherPrice":if(i.getEtherPrice)return i.getEtherPrice();break;case"getBalance":case"getTransactionCount":case"getCode":return n.blockTag&&(0,l.isHexString)(n.blockTag)&&(i=yield ou(e,t)),i[r](n.address,n.blockTag||"latest");case"getStorageAt":return n.blockTag&&(0,l.isHexString)(n.blockTag)&&(i=yield ou(e,t)),i.getStorageAt(n.address,n.position,n.blockTag||"latest");case"getBlock":return n.blockTag&&(0,l.isHexString)(n.blockTag)&&(i=yield ou(e,t)),i[n.includeTransactions?"getBlockWithTransactions":"getBlock"](n.blockTag||n.blockHash);case"call":case"estimateGas":return n.blockTag&&(0,l.isHexString)(n.blockTag)&&(i=yield ou(e,t)),"call"===r&&n.blockTag?i[r](n.transaction,n.blockTag):i[r](n.transaction);case"getTransaction":case"getTransactionReceipt":return i[r](n.transactionHash);case"getLogs":{let r=n.filter;return(r.fromBlock&&(0,l.isHexString)(r.fromBlock)||r.toBlock&&(0,l.isHexString)(r.toBlock))&&(i=yield ou(e,t)),i.getLogs(r)}}return Va.throwError("unknown method error",h.Logger.errors.UNKNOWN_ERROR,{method:r,params:n})}))}class au extends ts.BaseProvider{detectNetwork(){return Ja(this,void 0,void 0,(function*(){return Qa(yield Promise.all(this.providerConfigs.map((e=>e.provider.getNetwork()))))}))}perform(e,t){return Ja(this,void 0,void 0,(function*(){if("sendTransaction"===e){const e=yield Promise.all(this.providerConfigs.map((e=>e.provider.sendTransaction(t.signedTransaction).then((e=>e.hash),(e=>e)))));for(let t=0;t<e.length;t++){const r=e[t];if("string"==typeof r)return r}throw e[0]}-1===this._highestBlockNumber&&"getBlockNumber"!==e&&(yield this.getBlockNumber());const r=iu(this,e,t),n=ho(this.providerConfigs.map(L.shallowCopy));n.sort(((e,t)=>e.priority-t.priority));const i=this._highestBlockNumber;let o=0,s=!0;for(;;){const a=Ya();let u=n.filter((e=>e.runner&&a-e.start<e.stallTimeout)).reduce(((e,t)=>e+t.weight),0);for(;u<this.quorum&&o<n.length;){const r=n[o++],s=$a++;r.start=Ya(),r.staller=eu(r.stallTimeout),r.staller.wait((()=>{r.staller=null})),r.runner=su(r,i,e,t).then((n=>{r.done=!0,r.result=n,this.listenerCount("debug")&&this.emit("debug",{action:"request",rid:s,backend:nu(r,Ya()),request:{method:e,params:(0,L.deepCopy)(t)},provider:this})}),(n=>{r.done=!0,r.error=n,this.listenerCount("debug")&&this.emit("debug",{action:"request",rid:s,backend:nu(r,Ya()),request:{method:e,params:(0,L.deepCopy)(t)},provider:this})})),this.listenerCount("debug")&&this.emit("debug",{action:"request",rid:s,backend:nu(r,null),request:{method:e,params:(0,L.deepCopy)(t)},provider:this}),u+=r.weight}const c=[];n.forEach((e=>{!e.done&&e.runner&&(c.push(e.runner),e.staller&&c.push(e.staller.getPromise()))})),c.length&&(yield Promise.race(c));const l=n.filter((e=>e.done&&null==e.error));if(l.length>=this.quorum){const e=r(l);if(void 0!==e)return n.forEach((e=>{e.staller&&e.staller.cancel(),e.cancelled=!0})),e;s||(yield eu(100).getPromise()),s=!1}const h=n.reduce(((e,t)=>{if(!t.done||null==t.error)return e;const r=t.error.code;return tu.indexOf(r)>=0&&(e[r]||(e[r]={error:t.error,weight:0}),e[r].weight+=t.weight),e}),{});if(Object.keys(h).forEach((e=>{const t=h[e];if(t.weight<this.quorum)return;n.forEach((e=>{e.staller&&e.staller.cancel(),e.cancelled=!0}));const r=t.error,i={};ru.forEach((e=>{null!=r[e]&&(i[e]=r[e])})),Va.throwError(r.reason||r.message,e,i)})),0===n.filter((e=>!e.done)).length)break}return n.forEach((e=>{e.staller&&e.staller.cancel(),e.cancelled=!0})),Va.throwError("failed to meet quorum",h.Logger.errors.SERVER_ERROR,{method:e,params:t,results:n.map((e=>nu(e))),provider:this})}))}constructor(e,t){0===e.length&&Va.throwArgumentError("missing providers","providers",e);const r=e.map(((e,t)=>{if(Gr.Provider.isProvider(e)){const t=_s(e)?2e3:750,r=1;return Object.freeze({provider:e,weight:1,stallTimeout:t,priority:r})}const r=(0,L.shallowCopy)(e);null==r.priority&&(r.priority=1),null==r.stallTimeout&&(r.stallTimeout=_s(e)?2e3:750),null==r.weight&&(r.weight=1);const n=r.weight;return(n%1||n>512||n<1)&&Va.throwArgumentError("invalid weight; must be integer in [1, 512]",`providers[${t}].weight`,n),Object.freeze(r)})),n=r.reduce(((e,t)=>e+t.weight),0);null==t?t=n/2:t>n&&Va.throwArgumentError("quorum will always fail; larger than total weight","quorum",t);let i=Qa(r.map((e=>e.provider.network)));null==i&&(i=new Promise(((e,t)=>{setTimeout((()=>{this.detectNetwork().then(e,t)}),0)}))),super(i),(0,L.defineReadOnly)(this,"providerConfigs",Object.freeze(r)),(0,L.defineReadOnly)(this,"quorum",t),this._highestBlockNumber=-1}}const uu=null;const cu=new(0,(h=o("2rINa")).Logger)(xs),lu="84842078b09946638c03157f83405213";class hu extends ea.WebSocketProvider{isCommunityResource(){return this.projectId===lu}constructor(e,t){const r=new fu(e,t),n=r.connection;n.password&&cu.throwError("INFURA WebSocket project secrets unsupported",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"InfuraProvider.getWebSocketProvider()"});super(n.url.replace(/^http/i,"ws").replace("/v3/","/ws/v3/"),e),(0,L.defineReadOnly)(this,"apiKey",r.projectId),(0,L.defineReadOnly)(this,"projectId",r.projectId),(0,L.defineReadOnly)(this,"projectSecret",r.projectSecret)}}class fu extends ba.UrlJsonRpcProvider{static getWebSocketProvider(e,t){return new hu(e,t)}static getApiKey(e){const t={apiKey:lu,projectId:lu,projectSecret:null};return null==e||("string"==typeof e?t.projectId=e:null!=e.projectSecret?(cu.assertArgument("string"==typeof e.projectId,"projectSecret requires a projectId","projectId",e.projectId),cu.assertArgument("string"==typeof e.projectSecret,"invalid projectSecret","projectSecret","[REDACTED]"),t.projectId=e.projectId,t.projectSecret=e.projectSecret):e.projectId&&(t.projectId=e.projectId),t.apiKey=t.projectId),t}static getUrl(e,t){let r=null;switch(e?e.name:"unknown"){case"homestead":r="mainnet.infura.io";break;case"ropsten":r="ropsten.infura.io";break;case"rinkeby":r="rinkeby.infura.io";break;case"kovan":r="kovan.infura.io";break;case"goerli":r="goerli.infura.io";break;case"matic":r="polygon-mainnet.infura.io";break;case"maticmum":r="polygon-mumbai.infura.io";break;case"optimism":r="optimism-mainnet.infura.io";break;case"optimism-kovan":r="optimism-kovan.infura.io";break;case"arbitrum":r="arbitrum-mainnet.infura.io";break;case"arbitrum-rinkeby":r="arbitrum-rinkeby.infura.io";break;default:cu.throwError("unsupported network",h.Logger.errors.INVALID_ARGUMENT,{argument:"network",value:e})}const n={allowGzip:!0,url:"https://"+r+"/v3/"+t.projectId,throttleCallback:(e,r)=>(t.projectId===lu&&Rs(),Promise.resolve(!0))};return null!=t.projectSecret&&(n.user="",n.password=t.projectSecret),n}isCommunityResource(){return this.projectId===lu}}class du extends ta.JsonRpcProvider{send(e,t){const r={method:e,params:t,id:this._nextId++,jsonrpc:"2.0"};null==this._pendingBatch&&(this._pendingBatch=[]);const n={request:r,resolve:null,reject:null},i=new Promise(((e,t)=>{n.resolve=e,n.reject=t}));return this._pendingBatch.push(n),this._pendingBatchAggregator||(this._pendingBatchAggregator=setTimeout((()=>{const e=this._pendingBatch;this._pendingBatch=null,this._pendingBatchAggregator=null;const t=e.map((e=>e.request));return this.emit("debug",{action:"requestBatch",request:(0,L.deepCopy)(t),provider:this}),(0,ns.fetchJson)(this.connection,JSON.stringify(t)).then((r=>{this.emit("debug",{action:"response",request:t,response:r,provider:this}),e.forEach(((e,t)=>{const n=r[t];if(n.error){const t=new Error(n.error.message);t.code=n.error.code,t.data=n.error.data,e.reject(t)}else e.resolve(n.result)}))}),(r=>{this.emit("debug",{action:"response",error:r,request:t,provider:this}),e.forEach((e=>{e.reject(r)}))}))}),10)),i}}const pu=new(0,(h=o("2rINa")).Logger)(xs);class gu extends ba.UrlJsonRpcProvider{static getApiKey(e){return e&&"string"!=typeof e&&pu.throwArgumentError("invalid apiKey","apiKey",e),e||"ETHERS_JS_SHARED"}static getUrl(e,t){pu.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");let r=null;switch(e.name){case"homestead":r="https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";break;case"ropsten":r="https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";break;case"rinkeby":r="https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";break;case"goerli":r="https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";break;case"kovan":r="https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";break;default:pu.throwArgumentError("unsupported network","network",arguments[0])}return r+"?apiKey="+t}}const mu=new(0,(h=o("2rINa")).Logger)(xs),yu="62e1ad51b37b8e00394bda3b";class vu extends ba.UrlJsonRpcProvider{static getApiKey(e){const t={applicationId:null,loadBalancer:!0,applicationSecretKey:null};return null==e?t.applicationId=yu:"string"==typeof e?t.applicationId=e:null!=e.applicationSecretKey?(t.applicationId=e.applicationId,t.applicationSecretKey=e.applicationSecretKey):e.applicationId?t.applicationId=e.applicationId:mu.throwArgumentError("unsupported PocketProvider apiKey","apiKey",e),t}static getUrl(e,t){let r=null;switch(e?e.name:"unknown"){case"goerli":r="eth-goerli.gateway.pokt.network";break;case"homestead":r="eth-mainnet.gateway.pokt.network";break;case"kovan":r="poa-kovan.gateway.pokt.network";break;case"matic":r="poly-mainnet.gateway.pokt.network";break;case"maticmum":r="polygon-mumbai-rpc.gateway.pokt.network";break;case"rinkeby":r="eth-rinkeby.gateway.pokt.network";break;case"ropsten":r="eth-ropsten.gateway.pokt.network";break;default:mu.throwError("unsupported network",h.Logger.errors.INVALID_ARGUMENT,{argument:"network",value:e})}const n={headers:{},url:`https://${r}/v1/lb/${t.applicationId}`};return null!=t.applicationSecretKey&&(n.user="",n.password=t.applicationSecretKey),n}isCommunityResource(){return this.applicationId===yu}}const wu=new(0,(h=o("2rINa")).Logger)(xs);let bu=1;function Au(e,t){const r="Web3LegacyFetcher";return function(e,n){const i={method:e,params:n,id:bu++,jsonrpc:"2.0"};return new Promise(((e,n)=>{this.emit("debug",{action:"request",fetcher:r,request:(0,L.deepCopy)(i),provider:this}),t(i,((t,o)=>{if(t)return this.emit("debug",{action:"response",fetcher:r,error:t,request:i,provider:this}),n(t);if(this.emit("debug",{action:"response",fetcher:r,request:i,response:o,provider:this}),o.error){const e=new Error(o.error.message);return e.code=o.error.code,e.data=o.error.data,n(e)}e(o.result)}))}))}}class Eu extends ta.JsonRpcProvider{send(e,t){return this.jsonRpcFetchFunc(e,t)}constructor(e,t){null==e&&wu.throwArgumentError("missing provider","provider",e);let r=null,n=null,i=null;"function"==typeof e?(r="unknown:",n=e):(r=e.host||e.path||"",!r&&e.isMetaMask&&(r="metamask"),i=e,e.request?(""===r&&(r="eip-1193:"),n=function(e){return function(t,r){null==r&&(r=[]);const n={method:t,params:r};return this.emit("debug",{action:"request",fetcher:"Eip1193Fetcher",request:(0,L.deepCopy)(n),provider:this}),e.request(n).then((e=>(this.emit("debug",{action:"response",fetcher:"Eip1193Fetcher",request:n,response:e,provider:this}),e)),(e=>{throw this.emit("debug",{action:"response",fetcher:"Eip1193Fetcher",request:n,error:e,provider:this}),e}))}}(e)):e.sendAsync?n=Au(0,e.sendAsync.bind(e)):e.send?n=Au(0,e.send.bind(e)):wu.throwArgumentError("unsupported provider","provider",e),r||(r="unknown:")),super(r,t),(0,L.defineReadOnly)(this,"jsonRpcFetchFunc",n),(0,L.defineReadOnly)(this,"provider",i)}}const xu=new(0,(h=o("2rINa")).Logger)(xs);function Su(e,t){if(null==e&&(e="homestead"),"string"==typeof e){const t=e.match(/^(ws|http)s?:/i);if(t)switch(t[1].toLowerCase()){case"http":case"https":return new(0,ta.JsonRpcProvider)(e);case"ws":case"wss":return new(0,ea.WebSocketProvider)(e);default:xu.throwArgumentError("unsupported URL scheme","network",e)}}const r=es(e);return r&&r._defaultProvider||xu.throwError("unsupported getDefaultProvider network",h.Logger.errors.NETWORK_ERROR,{operation:"getDefaultProvider",network:e}),r._defaultProvider({FallbackProvider:Ha.FallbackProvider,AlchemyProvider:Pa,AnkrProvider:Ia,CloudflareProvider:Ta.CloudflareProvider,EtherscanProvider:La.EtherscanProvider,InfuraProvider:fu,JsonRpcProvider:ta.JsonRpcProvider,NodesmithProvider:gu,PocketProvider:vu,Web3Provider:Eu,IpcProvider:uu},t)}var Cu={};e(Cu,"AbiCoder",(function(){return qt})),e(Cu,"defaultAbiCoder",(function(){return Kt})),e(Cu,"Fragment",(function(){return ae})),e(Cu,"ConstructorFragment",(function(){return fe})),e(Cu,"ErrorFragment",(function(){return ge})),e(Cu,"EventFragment",(function(){return ue})),e(Cu,"FunctionFragment",(function(){return de})),e(Cu,"ParamType",(function(){return oe})),e(Cu,"FormatTypes",(function(){return ne})),e(Cu,"checkResultErrors",(function(){return Ae})),e(Cu,"Logger",(function(){return o("2rINa").Logger})),e(Cu,"RLP",(function(){return o("7ZdUu")})),e(Cu,"_fetchData",(function(){return ns._fetchData})),e(Cu,"fetchJson",(function(){return ns.fetchJson})),e(Cu,"poll",(function(){return ns.poll})),e(Cu,"checkProperties",(function(){return L.checkProperties})),e(Cu,"deepCopy",(function(){return L.deepCopy})),e(Cu,"defineReadOnly",(function(){return L.defineReadOnly})),e(Cu,"getStatic",(function(){return L.getStatic})),e(Cu,"resolveProperties",(function(){return L.resolveProperties})),e(Cu,"shallowCopy",(function(){return L.shallowCopy})),e(Cu,"arrayify",(function(){return o("3Yhqu").arrayify})),e(Cu,"concat",(function(){return o("3Yhqu").concat})),e(Cu,"stripZeros",(function(){return o("3Yhqu").stripZeros})),e(Cu,"zeroPad",(function(){return o("3Yhqu").zeroPad})),e(Cu,"isBytes",(function(){return o("3Yhqu").isBytes})),e(Cu,"isBytesLike",(function(){return o("3Yhqu").isBytesLike})),e(Cu,"defaultPath",(function(){return eo})),e(Cu,"HDNode",(function(){return to})),e(Cu,"SigningKey",(function(){return Gn})),e(Cu,"Interface",(function(){return Kr})),e(Cu,"LogDescription",(function(){return Lr})),e(Cu,"TransactionDescription",(function(){return Dr})),e(Cu,"base58",(function(){return Oi})),e(Cu,"base64",(function(){return o("G6hN9")})),e(Cu,"hexlify",(function(){return o("3Yhqu").hexlify})),e(Cu,"isHexString",(function(){return o("3Yhqu").isHexString})),e(Cu,"hexConcat",(function(){return o("3Yhqu").hexConcat})),e(Cu,"hexStripZeros",(function(){return o("3Yhqu").hexStripZeros})),e(Cu,"hexValue",(function(){return o("3Yhqu").hexValue})),e(Cu,"hexZeroPad",(function(){return o("3Yhqu").hexZeroPad})),e(Cu,"hexDataLength",(function(){return o("3Yhqu").hexDataLength})),e(Cu,"hexDataSlice",(function(){return o("3Yhqu").hexDataSlice})),e(Cu,"nameprep",(function(){return Ft})),e(Cu,"_toEscapedUtf8String",(function(){return bt})),e(Cu,"toUtf8Bytes",(function(){return vt})),e(Cu,"toUtf8CodePoints",(function(){return xt})),e(Cu,"toUtf8String",(function(){return Et})),e(Cu,"Utf8ErrorFuncs",(function(){return mt})),e(Cu,"formatBytes32String",(function(){return St})),e(Cu,"parseBytes32String",(function(){return Ct})),e(Cu,"dnsEncode",(function(){return yr})),e(Cu,"hashMessage",(function(){return vr})),e(Cu,"namehash",(function(){return mr})),e(Cu,"isValidName",(function(){return gr})),e(Cu,"id",(function(){return Gt})),e(Cu,"_TypedDataEncoder",(function(){return wr.TypedDataEncoder})),e(Cu,"getAddress",(function(){return Be})),e(Cu,"getIcapAddress",(function(){return Le})),e(Cu,"getContractAddress",(function(){return De})),e(Cu,"getCreate2Address",(function(){return je})),e(Cu,"isAddress",(function(){return Fe})),e(Cu,"formatEther",(function(){return ju})),e(Cu,"parseEther",(function(){return Uu})),e(Cu,"formatUnits",(function(){return Lu})),e(Cu,"parseUnits",(function(){return Du})),e(Cu,"commify",(function(){return Fu})),e(Cu,"computeHmac",(function(){return Li})),e(Cu,"keccak256",(function(){return _e})),e(Cu,"ripemd160",(function(){return Mi})),e(Cu,"sha256",(function(){return Bi})),e(Cu,"sha512",(function(){return Fi})),e(Cu,"randomBytes",(function(){return lo})),e(Cu,"shuffled",(function(){return ho})),e(Cu,"solidityPack",(function(){return Nu})),e(Cu,"solidityKeccak256",(function(){return Iu})),e(Cu,"soliditySha256",(function(){return Tu})),e(Cu,"splitSignature",(function(){return o("3Yhqu").splitSignature})),e(Cu,"joinSignature",(function(){return o("3Yhqu").joinSignature})),e(Cu,"accessListify",(function(){return ii})),e(Cu,"parseTransaction",(function(){return li})),e(Cu,"serializeTransaction",(function(){return ui})),e(Cu,"TransactionTypes",(function(){return Vn})),e(Cu,"getJsonWalletAddress",(function(){return Co})),e(Cu,"computeAddress",(function(){return ei})),e(Cu,"recoverAddress",(function(){return ti})),e(Cu,"computePublicKey",(function(){return Hn})),e(Cu,"recoverPublicKey",(function(){return Wn})),e(Cu,"verifyMessage",(function(){return Pi.verifyMessage})),e(Cu,"verifyTypedData",(function(){return Pi.verifyTypedData})),e(Cu,"getAccountPath",(function(){return so})),e(Cu,"mnemonicToEntropy",(function(){return no})),e(Cu,"entropyToMnemonic",(function(){return io})),e(Cu,"isValidMnemonic",(function(){return oo})),e(Cu,"mnemonicToSeed",(function(){return ro})),e(Cu,"SupportedAlgorithm",(function(){return Ni})),e(Cu,"UnicodeNormalizationForm",(function(){return ht})),e(Cu,"Utf8ErrorReason",(function(){return dt})),e(Cu,"Indexed",(function(){return Ur}));o("G6hN9"),l=o("3Yhqu"),h=o("2rINa"),l=o("3Yhqu"),h=o("2rINa");const ku=new RegExp("^bytes([0-9]+)$"),_u=new RegExp("^(u?int)([0-9]*)$"),Pu=new RegExp("^(.*)\\[([0-9]*)\\]$"),Ru=new(0,h.Logger)("solidity/5.7.0");function Ou(e,t,r){switch(e){case"address":return r?(0,l.zeroPad)(t,32):(0,l.arrayify)(t);case"string":return vt(t);case"bytes":return(0,l.arrayify)(t);case"bool":return t=t?"0x01":"0x00",r?(0,l.zeroPad)(t,32):(0,l.arrayify)(t)}let n=e.match(_u);if(n){let i=parseInt(n[2]||"256");return(n[2]&&String(i)!==n[2]||i%8!=0||0===i||i>256)&&Ru.throwArgumentError("invalid number type","type",e),r&&(i=256),t=w.from(t).toTwos(i),(0,l.zeroPad)(t,i/8)}if(n=e.match(ku),n){const i=parseInt(n[1]);return(String(i)!==n[1]||0===i||i>32)&&Ru.throwArgumentError("invalid bytes type","type",e),(0,l.arrayify)(t).byteLength!==i&&Ru.throwArgumentError(`invalid value for ${e}`,"value",t),r?(0,l.arrayify)((t+"0000000000000000000000000000000000000000000000000000000000000000").substring(0,66)):t}if(n=e.match(Pu),n&&Array.isArray(t)){const r=n[1];parseInt(n[2]||String(t.length))!=t.length&&Ru.throwArgumentError(`invalid array length for ${e}`,"value",t);const i=[];return t.forEach((function(e){i.push(Ou(r,e,!0))})),(0,l.concat)(i)}return Ru.throwArgumentError("invalid type","type",e)}function Nu(e,t){e.length!=t.length&&Ru.throwArgumentError("wrong number of values; expected ${ types.length }","values",t);const r=[];return e.forEach((function(e,n){r.push(Ou(e,t[n]))})),(0,l.hexlify)((0,l.concat)(r))}function Iu(e,t){return _e(Nu(e,t))}function Tu(e,t){return Bi(Nu(e,t))}Pe=o("7ZdUu");const Mu=new(0,(h=o("2rINa")).Logger)("units/5.7.0"),Bu=["wei","kwei","mwei","gwei","szabo","finney","ether"];function Fu(e){const t=String(e).split(".");(t.length>2||!t[0].match(/^-?[0-9]*$/)||t[1]&&!t[1].match(/^[0-9]*$/)||"."===e||"-."===e)&&Mu.throwArgumentError("invalid value","value",e);let r=t[0],n="";for("-"===r.substring(0,1)&&(n="-",r=r.substring(1));"0"===r.substring(0,1);)r=r.substring(1);""===r&&(r="0");let i="";for(2===t.length&&(i="."+(t[1]||"0"));i.length>2&&"0"===i[i.length-1];)i=i.substring(0,i.length-1);const o=[];for(;r.length;){if(r.length<=3){o.unshift(r);break}{const e=r.length-3;o.unshift(r.substring(e)),r=r.substring(0,e)}}return n+o.join(",")+i}function Lu(e,t){if("string"==typeof t){const e=Bu.indexOf(t);-1!==e&&(t=3*e)}return N(e,null!=t?t:18)}function Du(e,t){if("string"!=typeof e&&Mu.throwArgumentError("value must be a string","value",e),"string"==typeof t){const e=Bu.indexOf(t);-1!==e&&(t=3*e)}return I(e,null!=t?t:18)}function ju(e){return Lu(e,18)}function Uu(e){return Du(e,18)}h=o("2rINa");const zu="ethers/5.7.0",qu=new(0,h.Logger)(zu);h=o("2rINa"),h=o("2rINa");try{const e=window;null==e._ethers&&(e._ethers=a)}catch(e){}var Ku={};Object.defineProperty(Ku,"__esModule",{value:!0}),Ku.default=function(e,t,r){t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r;return e};let Gu=()=>({events:{},emit(e,...t){(this.events[e]||[]).forEach((e=>e(...t)))},on(e,t){return(this.events[e]=this.events[e]||[]).push(t),()=>this.events[e]=(this.events[e]||[]).filter((e=>e!==t))}});var Wu=function(){function e(e){this.state=void 0,this.emitter=void 0,this.state=e,this.emitter=Gu()}var t=e.prototype;return t.on=function(e,t){return this.emitter.on(e,t)},t.getState=function(){return this.state},t.setState=function(e){var t;if((t="function"==typeof e?e(this.state):e)!==this.state){var r=this.state;this.state=t,this.emitter.emit("change",this.state,r)}},t.setStateSilent=function(e){this.state=e},e}();function Hu(e){return null!=e}function Ju(e){return e.charAt(0).toUpperCase()+e.slice(1)}var Vu,Yu,Qu,Zu={},Xu={},$u={},ec={},tc={},rc={},nc={},ic={};Qu=(Jc=o("303DT")).Symbol;var oc={},sc=Object.prototype,ac=sc.hasOwnProperty,uc=sc.toString,cc=Qu?Qu.toStringTag:void 0;oc=function(e){var t=ac.call(e,cc),r=e[cc];try{e[cc]=void 0;var n=!0}catch(e){}var i=uc.call(e);return n&&(t?e[cc]=r:delete e[cc]),i};var lc={},hc=Object.prototype.toString;lc=function(e){return hc.call(e)};var fc=Qu?Qu.toStringTag:void 0;ic=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":fc&&fc in Object(e)?oc(e):lc(e)};var dc={};dc=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)};nc=function(e){if(!dc(e))return!1;var t=ic(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t};var pc,gc,mc={},yc=(Jc=o("303DT"))["__core-js_shared__"],vc=(gc=/[^.]+$/.exec((pc=yc)&&pc.keys&&pc.keys.IE_PROTO||""))?"Symbol(src)_1."+gc:"";mc=function(e){return!!vc&&vc in e};var wc={},bc=Function.prototype.toString;wc=function(e){if(null!=e){try{return bc.call(e)}catch(e){}try{return e+""}catch(e){}}return""};var Ac=/^\[object .+?Constructor\]$/,Ec=Function.prototype,xc=Object.prototype,Sc=Ec.toString,Cc=xc.hasOwnProperty,kc=RegExp("^"+Sc.call(Cc).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");rc=function(e){return!(!dc(e)||mc(e))&&(nc(e)?kc:Ac).test(wc(e))};var _c={};_c=function(e,t){return null==e?void 0:e[t]};var Pc=(tc=function(e,t){var r=_c(e,t);return rc(r)?r:void 0})(Object,"create");ec=Pc,Yu=function(){this.__data__=ec?ec(null):{},this.size=0};var Rc;Rc=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t};var Oc,Nc=Object.prototype.hasOwnProperty;Oc=function(e){var t=this.__data__;if(ec){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return Nc.call(t,e)?t[e]:void 0};var Ic,Tc=Object.prototype.hasOwnProperty;Ic=function(e){var t=this.__data__;return ec?void 0!==t[e]:Tc.call(t,e)};var Mc;function Bc(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}Mc=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=ec&&void 0===t?"__lodash_hash_undefined__":t,this},Bc.prototype.clear=Yu,Bc.prototype.delete=Rc,Bc.prototype.get=Oc,Bc.prototype.has=Ic,Bc.prototype.set=Mc,$u=Bc;var Fc,Lc={};Fc=function(){this.__data__=[],this.size=0};var Dc,jc={},Uc={};Uc=function(e,t){return e===t||e!=e&&t!=t},jc=function(e,t){for(var r=e.length;r--;)if(Uc(e[r][0],t))return r;return-1};var zc=Array.prototype.splice;Dc=function(e){var t=this.__data__,r=jc(t,e);return!(r<0)&&(r==t.length-1?t.pop():zc.call(t,r,1),--this.size,!0)};var qc;qc=function(e){var t=this.__data__,r=jc(t,e);return r<0?void 0:t[r][1]};var Kc;Kc=function(e){return jc(this.__data__,e)>-1};var Gc;function Wc(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}Gc=function(e,t){var r=this.__data__,n=jc(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this},Wc.prototype.clear=Fc,Wc.prototype.delete=Dc,Wc.prototype.get=qc,Wc.prototype.has=Kc,Wc.prototype.set=Gc,Lc=Wc;var Hc={},Jc=o("303DT"),Vc=tc(Jc,"Map");Hc=Vc,Vu=function(){this.size=0,this.__data__={hash:new $u,map:new(Hc||Lc),string:new $u}};var Yc,Qc={},Zc={};Zc=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e},Qc=function(e,t){var r=e.__data__;return Zc(t)?r["string"==typeof t?"string":"hash"]:r.map},Yc=function(e){var t=Qc(this,e).delete(e);return this.size-=t?1:0,t};var Xc;Xc=function(e){return Qc(this,e).get(e)};var $c;$c=function(e){return Qc(this,e).has(e)};var el;function tl(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}el=function(e,t){var r=Qc(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this},tl.prototype.clear=Vu,tl.prototype.delete=Yc,tl.prototype.get=Xc,tl.prototype.has=$c,tl.prototype.set=el,Xu=tl;function rl(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var n=arguments,i=t?t.apply(this,n):n[0],o=r.cache;if(o.has(i))return o.get(i);var s=e.apply(this,n);return r.cache=o.set(i,s)||o,s};return r.cache=new(rl.Cache||Xu),r}rl.Cache=Xu,Zu=rl;class nl{toString(){return this.value}constructor(e){this.value=e}}const il=r(Zu)((e=>new nl(e))),ol="wss://api-v4.zerion.io/",sl="Zerion.0JOY6zZTTw6yl5Cvz9sdmXc7d5AhzVMG",al={ARBITRUM_INFURA_API_KEY:"e2e40a30dc83445e8b4d5d7c88f85276",AURORA_API_KEY:"2ZaW4eTLoH9wrr3N5jMfSkyGXA9PLJDRb5jZdHV591mr",ETHEREUM_ALCHEMY_API_KEY:"RKg5wIwcuh32powb0blKdPh0UwSsgmFI",OPTIMISM_INFURA_API_KEY:"e2e40a30dc83445e8b4d5d7c88f85276",POLYGON_INFURA_API_KEY:"e2e40a30dc83445e8b4d5d7c88f85276",SOLANA_API_KEY:""};function ul(e,t){let r=e;for(const e in t)r=r.replace(`{${e}}`,t[e]);return r}function cl({asset:e,chain:t}){var r;return null==e||null===(r=e.implementations)||void 0===r?void 0:r[String(t)]}const ll=({asset:e,chain:t})=>{const r=cl({asset:e,chain:t});return r?r.address:void 0};function hl(e,t,r){const n={};for(const i of e)n[t(i)]=r(i);return n}class fl{static getName(e){return e.name||Ju(e.chain)}toId(e){return this.nameToId[e.toString()]}getNetworks(){return this.networks}getChainId(e){return this.toId(e)}getNativeAssetIdsForTrading(){return this.networks.filter((e=>e.supports_trading&&e.native_asset)).map((e=>{var t;return null===(t=e.native_asset)||void 0===t?void 0:t.id})).filter(Hu)}getChainName(e){var t;return(null===(t=this.collection[this.toId(e)])||void 0===t?void 0:t.name)||Ju(String(e))}getNetworkById(e){const t=this.collection[e];if(!t)throw new Error(`Unsupported network id: ${e}`);return t}getNetworkByName(e){return this.collection[this.toId(e)]}getChainById(e){const t=this.getNetworkById(e);return il(t.chain)}getChainNameById(e){const t=this.getNetworkById(e);return this.getChainName(il(t.chain))}getExplorerHomeUrlByName(e){var t;return null===(t=this.collection[this.toId(e)])||void 0===t?void 0:t.explorer_home_url}getExplorerTxUrl(e,t){var r;return null==e||null===(r=e.explorer_tx_url)||void 0===r?void 0:r.replace("{HASH}",t)}getExplorerTxUrlById(e,t){return this.getExplorerTxUrl(this.collection[e],t)}getExplorerTxUrlByName(e,t){return this.getExplorerTxUrl(this.collection[this.toId(e)],t)}getExplorerTokenUrl(e,t){var r;return null==e||null===(r=e.explorer_token_url)||void 0===r?void 0:r.replace("{ADDRESS}",t)}getExplorerTokenUrlById(e,t){return this.getExplorerTokenUrl(this.collection[e],t)}getExplorerTokenUrlByName(e,t){return this.getExplorerTokenUrl(this.collection[this.toId(e)],t)}getExplorerNameById(e){var t;return null===(t=this.collection[e])||void 0===t?void 0:t.explorer_name}getEthereumChainParameter(e){const t=this.collection[e];if(!t||!t.rpc_url_public||!t.native_asset)throw new Error(`Unsupported network id: ${e}`);return{chainId:e,rpcUrls:t.rpc_url_public,chainName:t.name,nativeCurrency:{code:t.native_asset.address,name:t.native_asset.name,symbol:t.native_asset.symbol,decimals:t.native_asset.decimals},iconUrls:[t.icon_url],blockExplorerUrls:t.explorer_home_url?[t.explorer_home_url]:[]}}supports(e,t){const r=this.getNetworkByName(t);if(!r)return!1;return r[fl.purposeKeyMap[e]]}isNativeAsset(e,t){const r=this.getNetworkById(t);return!!r.native_asset&&ll({asset:e,chain:il(r.chain)})===r.native_asset.address}isNativeAddress(e,t){const r=this.getNetworkById(t);if(!r.native_asset)throw new Error(`Native asset is not defined for: ${t}`);return!!r.native_asset&&e===r.native_asset.address}getRpcUrlInternal(e){const t=this.getNetworkByName(e);if(!t)throw new Error(`Cannot find network: ${e}`);if(!t.rpc_url_internal)throw new Error(`Network url missing: ${e}`);return ul(t.rpc_url_internal,this.keys)}constructor({networks:e,keys:t=al}){this.networks=e.sort(((e,t)=>function(e,t,r){if(r){if(e===r)return-1;if(t===r)return 1}return e.localeCompare(t)}(e.name,t.name,"Ethereum"))),this.keys=t,this.collection=hl(this.networks,(e=>e.external_id),(e=>e)),this.nameToId=hl(this.networks,(e=>e.chain),(e=>e.external_id))}}r(Ku)(fl,"purposeKeyMap",{sending:"supports_sending",trading:"supports_trading",bridge:"supports_bridge"});var dl,pl=o("lif7x");function gl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==r)return;var n,i,o=[],s=!0,a=!1;try{for(r=r.call(e);!(s=(n=r.next()).done)&&(o.push(n.value),!t||o.length!==t);s=!0);}catch(e){a=!0,i=e}finally{try{s||null==r.return||r.return()}finally{if(a)throw i}}return o}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return ml(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return ml(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ml(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function yl(e){return new Promise((function(t,r){e.oncomplete=e.onsuccess=function(){return t(e.result)},e.onabort=e.onerror=function(){return r(e.error)}}))}function vl(){return dl||(dl=function(e,t){var r=indexedDB.open(e);r.onupgradeneeded=function(){return r.result.createObjectStore(t)};var n=yl(r);return function(e,r){return n.then((function(n){return r(n.transaction(t,e).objectStore(t))}))}}("keyval-store","keyval")),dl}function wl(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:vl();return r("readwrite",(function(r){return r.put(t,e),yl(r.transaction)}))}function bl(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:vl();return t("readwrite",(function(t){return t.delete(e),yl(t.transaction)}))}function Al(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:vl();return e("readwrite",(function(e){return e.clear(),yl(e.transaction)}))}function El(e,t){return e.openCursor().onsuccess=function(){this.result&&(t(this.result),this.result.continue())},yl(e.transaction)}function xl(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:vl();return e("readonly",(function(t){if(t.getAll&&t.getAllKeys)return Promise.all([yl(t.getAllKeys()),yl(t.getAll())]).then((function(e){var t=gl(e,2),r=t[0],n=t[1];return r.map((function(e,t){return[e,n[t]]}))}));var r=[];return e("readonly",(function(e){return El(e,(function(e){return r.push([e.key,e.value])})).then((function(){return r}))}))}))}var Sl;ke=o("d5Ya9");const Cl="object"==typeof performance&&performance&&"function"==typeof performance.now?performance:Date,kl="function"==typeof AbortController?AbortController:class{abort(){this.signal.dispatchEvent("abort")}constructor(){this.signal=new Rl}},_l="function"==typeof AbortSignal,Pl="function"==typeof kl.AbortSignal,Rl=_l?AbortSignal:Pl?kl.AbortController:class{dispatchEvent(e){if("abort"===e){this.aborted=!0;const t={type:e,target:this};this.onabort(t),this._listeners.forEach((e=>e(t)),this)}}onabort(){}addEventListener(e,t){"abort"===e&&this._listeners.push(t)}removeEventListener(e,t){"abort"===e&&(this._listeners=this._listeners.filter((e=>e!==t)))}constructor(){this.aborted=!1,this._listeners=[]}},Ol=new Set,Nl=(e,t)=>{const r=`LRU_CACHE_OPTION_${e}`;Ml(r)&&Bl(r,`${e} option`,`options.${t}`,zl)},Il=(e,t)=>{const r=`LRU_CACHE_METHOD_${e}`;if(Ml(r)){const{prototype:n}=zl,{get:i}=Object.getOwnPropertyDescriptor(n,e);Bl(r,`${e} method`,`cache.${t}()`,i)}},Tl=(...e)=>{"object"==typeof ke&&ke&&"function"==typeof ke.emitWarning?ke.emitWarning(...e):console.error(...e)},Ml=e=>!Ol.has(e),Bl=(e,t,r,n)=>{Ol.add(e);Tl(`The ${t} is deprecated. Please use ${r} instead.`,"DeprecationWarning",e,n)},Fl=e=>e&&e===Math.floor(e)&&e>0&&isFinite(e),Ll=e=>Fl(e)?e<=Math.pow(2,8)?Uint8Array:e<=Math.pow(2,16)?Uint16Array:e<=Math.pow(2,32)?Uint32Array:e<=Number.MAX_SAFE_INTEGER?Dl:null:null;class Dl extends Array{constructor(e){super(e),this.fill(0)}}class jl{push(e){this.heap[this.length++]=e}pop(){return this.heap[--this.length]}constructor(e){if(0===e)return[];const t=Ll(e);this.heap=new t(e),this.length=0}}let Ul=Symbol.iterator;class zl{getRemainingTTL(e){return this.has(e,{updateAgeOnHas:!1})?1/0:0}initializeTTLTracking(){this.ttls=new Dl(this.max),this.starts=new Dl(this.max),this.setItemTTL=(e,t,r=Cl.now())=>{if(this.starts[e]=0!==t?r:0,this.ttls[e]=t,0!==t&&this.ttlAutopurge){const r=setTimeout((()=>{this.isStale(e)&&this.delete(this.keyList[e])}),t+1);r.unref&&r.unref()}},this.updateItemAge=e=>{this.starts[e]=0!==this.ttls[e]?Cl.now():0};let e=0;const t=()=>{const t=Cl.now();if(this.ttlResolution>0){e=t;const r=setTimeout((()=>e=0),this.ttlResolution);r.unref&&r.unref()}return t};this.getRemainingTTL=r=>{const n=this.keyMap.get(r);return void 0===n?0:0===this.ttls[n]||0===this.starts[n]?1/0:this.starts[n]+this.ttls[n]-(e||t())},this.isStale=r=>0!==this.ttls[r]&&0!==this.starts[r]&&(e||t())-this.starts[r]>this.ttls[r]}updateItemAge(e){}setItemTTL(e,t,r){}isStale(e){return!1}initializeSizeTracking(){this.calculatedSize=0,this.sizes=new Dl(this.max),this.removeItemSize=e=>{this.calculatedSize-=this.sizes[e],this.sizes[e]=0},this.requireSize=(e,t,r,n)=>{if(!Fl(r)){if(!n)throw new TypeError("invalid size value (must be positive integer)");if("function"!=typeof n)throw new TypeError("sizeCalculation must be a function");if(r=n(t,e),!Fl(r))throw new TypeError("sizeCalculation return invalid (expect positive integer)")}return r},this.addItemSize=(e,t)=>{this.sizes[e]=t;const r=this.maxSize-this.sizes[e];for(;this.calculatedSize>r;)this.evict(!0);this.calculatedSize+=this.sizes[e]}}removeItemSize(e){}addItemSize(e,t){}requireSize(e,t,r,n){if(r||n)throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache")}*indexes({allowStale:e=this.allowStale}={}){if(this.size)for(let t=this.tail;this.isValidIndex(t)&&(!e&&this.isStale(t)||(yield t),t!==this.head);)t=this.prev[t]}*rindexes({allowStale:e=this.allowStale}={}){if(this.size)for(let t=this.head;this.isValidIndex(t)&&(!e&&this.isStale(t)||(yield t),t!==this.tail);)t=this.next[t]}isValidIndex(e){return this.keyMap.get(this.keyList[e])===e}*entries(){for(const e of this.indexes())yield[this.keyList[e],this.valList[e]]}*rentries(){for(const e of this.rindexes())yield[this.keyList[e],this.valList[e]]}*keys(){for(const e of this.indexes())yield this.keyList[e]}*rkeys(){for(const e of this.rindexes())yield this.keyList[e]}*values(){for(const e of this.indexes())yield this.valList[e]}*rvalues(){for(const e of this.rindexes())yield this.valList[e]}[Ul](){return this.entries()}find(e,t={}){for(const r of this.indexes())if(e(this.valList[r],this.keyList[r],this))return this.get(this.keyList[r],t)}forEach(e,t=this){for(const r of this.indexes())e.call(t,this.valList[r],this.keyList[r],this)}rforEach(e,t=this){for(const r of this.rindexes())e.call(t,this.valList[r],this.keyList[r],this)}get prune(){return Il("prune","purgeStale"),this.purgeStale}purgeStale(){let e=!1;for(const t of this.rindexes({allowStale:!0}))this.isStale(t)&&(this.delete(this.keyList[t]),e=!0);return e}dump(){const e=[];for(const t of this.indexes({allowStale:!0})){const r=this.keyList[t],n=this.valList[t],i={value:this.isBackgroundFetch(n)?n.__staleWhileFetching:n};if(this.ttls){i.ttl=this.ttls[t];const e=Cl.now()-this.starts[t];i.start=Math.floor(Date.now()-e)}this.sizes&&(i.size=this.sizes[t]),e.unshift([r,i])}return e}load(e){this.clear();for(const[t,r]of e){if(r.start){const e=Date.now()-r.start;r.start=Cl.now()-e}this.set(t,r.value,r)}}dispose(e,t,r){}set(e,t,{ttl:r=this.ttl,start:n,noDisposeOnSet:i=this.noDisposeOnSet,size:o=0,sizeCalculation:s=this.sizeCalculation,noUpdateTTL:a=this.noUpdateTTL}={}){if(o=this.requireSize(e,t,o,s),this.maxEntrySize&&o>this.maxEntrySize)return this;let u=0===this.size?void 0:this.keyMap.get(e);if(void 0===u)u=this.newIndex(),this.keyList[u]=e,this.valList[u]=t,this.keyMap.set(e,u),this.next[this.tail]=u,this.prev[u]=this.tail,this.tail=u,this.size++,this.addItemSize(u,o),a=!1;else{const r=this.valList[u];t!==r&&(this.isBackgroundFetch(r)?r.__abortController.abort():i||(this.dispose(r,e,"set"),this.disposeAfter&&this.disposed.push([r,e,"set"])),this.removeItemSize(u),this.valList[u]=t,this.addItemSize(u,o)),this.moveToTail(u)}if(0===r||0!==this.ttl||this.ttls||this.initializeTTLTracking(),a||this.setItemTTL(u,r,n),this.disposeAfter)for(;this.disposed.length;)this.disposeAfter(...this.disposed.shift());return this}newIndex(){return 0===this.size?this.tail:this.size===this.max&&0!==this.max?this.evict(!1):0!==this.free.length?this.free.pop():this.initialFill++}pop(){if(this.size){const e=this.valList[this.head];return this.evict(!0),e}}evict(e){const t=this.head,r=this.keyList[t],n=this.valList[t];return this.isBackgroundFetch(n)?n.__abortController.abort():(this.dispose(n,r,"evict"),this.disposeAfter&&this.disposed.push([n,r,"evict"])),this.removeItemSize(t),e&&(this.keyList[t]=null,this.valList[t]=null,this.free.push(t)),this.head=this.next[t],this.keyMap.delete(r),this.size--,t}has(e,{updateAgeOnHas:t=this.updateAgeOnHas}={}){const r=this.keyMap.get(e);return void 0!==r&&!this.isStale(r)&&(t&&this.updateItemAge(r),!0)}peek(e,{allowStale:t=this.allowStale}={}){const r=this.keyMap.get(e);if(void 0!==r&&(t||!this.isStale(r))){const e=this.valList[r];return this.isBackgroundFetch(e)?e.__staleWhileFetching:e}}backgroundFetch(e,t,r,n){const i=void 0===t?void 0:this.valList[t];if(this.isBackgroundFetch(i))return i;const o=new kl,s={signal:o.signal,options:r,context:n},a=new Promise((t=>t(this.fetchMethod(e,i,s)))).then((t=>(o.signal.aborted||this.set(e,t,s.options),t)),(n=>{if(this.valList[t]===a){!r.noDeleteOnFetchRejection||void 0===a.__staleWhileFetching?this.delete(e):this.valList[t]=a.__staleWhileFetching}if(a.__returned===a)throw n}));return a.__abortController=o,a.__staleWhileFetching=i,a.__returned=null,void 0===t?(this.set(e,a,s.options),t=this.keyMap.get(e)):this.valList[t]=a,a}isBackgroundFetch(e){return e&&"object"==typeof e&&"function"==typeof e.then&&Object.prototype.hasOwnProperty.call(e,"__staleWhileFetching")&&Object.prototype.hasOwnProperty.call(e,"__returned")&&(e.__returned===e||null===e.__returned)}async fetch(e,{allowStale:t=this.allowStale,updateAgeOnGet:r=this.updateAgeOnGet,noDeleteOnStaleGet:n=this.noDeleteOnStaleGet,ttl:i=this.ttl,noDisposeOnSet:o=this.noDisposeOnSet,size:s=0,sizeCalculation:a=this.sizeCalculation,noUpdateTTL:u=this.noUpdateTTL,noDeleteOnFetchRejection:c=this.noDeleteOnFetchRejection,fetchContext:l=this.fetchContext,forceRefresh:h=!1}={}){if(!this.fetchMethod)return this.get(e,{allowStale:t,updateAgeOnGet:r,noDeleteOnStaleGet:n});const f={allowStale:t,updateAgeOnGet:r,noDeleteOnStaleGet:n,ttl:i,noDisposeOnSet:o,size:s,sizeCalculation:a,noUpdateTTL:u,noDeleteOnFetchRejection:c};let d=this.keyMap.get(e);if(void 0===d){const t=this.backgroundFetch(e,d,f,l);return t.__returned=t}{const n=this.valList[d];if(this.isBackgroundFetch(n))return t&&void 0!==n.__staleWhileFetching?n.__staleWhileFetching:n.__returned=n;if(!h&&!this.isStale(d))return this.moveToTail(d),r&&this.updateItemAge(d),n;const i=this.backgroundFetch(e,d,f,l);return t&&void 0!==i.__staleWhileFetching?i.__staleWhileFetching:i.__returned=i}}get(e,{allowStale:t=this.allowStale,updateAgeOnGet:r=this.updateAgeOnGet,noDeleteOnStaleGet:n=this.noDeleteOnStaleGet}={}){const i=this.keyMap.get(e);if(void 0!==i){const o=this.valList[i],s=this.isBackgroundFetch(o);if(this.isStale(i))return s?t?o.__staleWhileFetching:void 0:(n||this.delete(e),t?o:void 0);if(s)return;return this.moveToTail(i),r&&this.updateItemAge(i),o}}connect(e,t){this.prev[t]=e,this.next[e]=t}moveToTail(e){e!==this.tail&&(e===this.head?this.head=this.next[e]:this.connect(this.prev[e],this.next[e]),this.connect(this.tail,e),this.tail=e)}get del(){return Il("del","delete"),this.delete}delete(e){let t=!1;if(0!==this.size){const r=this.keyMap.get(e);if(void 0!==r)if(t=!0,1===this.size)this.clear();else{this.removeItemSize(r);const t=this.valList[r];this.isBackgroundFetch(t)?t.__abortController.abort():(this.dispose(t,e,"delete"),this.disposeAfter&&this.disposed.push([t,e,"delete"])),this.keyMap.delete(e),this.keyList[r]=null,this.valList[r]=null,r===this.tail?this.tail=this.prev[r]:r===this.head?this.head=this.next[r]:(this.next[this.prev[r]]=this.next[r],this.prev[this.next[r]]=this.prev[r]),this.size--,this.free.push(r)}}if(this.disposed)for(;this.disposed.length;)this.disposeAfter(...this.disposed.shift());return t}clear(){for(const e of this.rindexes({allowStale:!0})){const t=this.valList[e];if(this.isBackgroundFetch(t))t.__abortController.abort();else{const r=this.keyList[e];this.dispose(t,r,"delete"),this.disposeAfter&&this.disposed.push([t,r,"delete"])}}if(this.keyMap.clear(),this.valList.fill(null),this.keyList.fill(null),this.ttls&&(this.ttls.fill(0),this.starts.fill(0)),this.sizes&&this.sizes.fill(0),this.head=0,this.tail=0,this.initialFill=1,this.free.length=0,this.calculatedSize=0,this.size=0,this.disposed)for(;this.disposed.length;)this.disposeAfter(...this.disposed.shift())}get reset(){return Il("reset","clear"),this.clear}get length(){return((e,t)=>{const r=`LRU_CACHE_PROPERTY_${e}`;if(Ml(r)){const{prototype:n}=zl,{get:i}=Object.getOwnPropertyDescriptor(n,e);Bl(r,`${e} property`,`cache.${t}`,i)}})("length","size"),this.size}static get AbortController(){return kl}static get AbortSignal(){return Rl}constructor(e={}){const{max:t=0,ttl:r,ttlResolution:n=1,ttlAutopurge:i,updateAgeOnGet:o,updateAgeOnHas:s,allowStale:a,dispose:u,disposeAfter:c,noDisposeOnSet:l,noUpdateTTL:h,maxSize:f=0,maxEntrySize:d=0,sizeCalculation:p,fetchMethod:g,fetchContext:m,noDeleteOnFetchRejection:y,noDeleteOnStaleGet:v}=e,{length:w,maxAge:b,stale:A}=e instanceof zl?{}:e;if(0!==t&&!Fl(t))throw new TypeError("max option must be a nonnegative integer");const E=t?Ll(t):Array;if(!E)throw new Error("invalid max value: "+t);if(this.max=t,this.maxSize=f,this.maxEntrySize=d||this.maxSize,this.sizeCalculation=p||w,this.sizeCalculation){if(!this.maxSize&&!this.maxEntrySize)throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");if("function"!=typeof this.sizeCalculation)throw new TypeError("sizeCalculation set to non-function")}if(this.fetchMethod=g||null,this.fetchMethod&&"function"!=typeof this.fetchMethod)throw new TypeError("fetchMethod must be a function if specified");if(this.fetchContext=m,!this.fetchMethod&&void 0!==m)throw new TypeError("cannot set fetchContext without fetchMethod");if(this.keyMap=new Map,this.keyList=new Array(t).fill(null),this.valList=new Array(t).fill(null),this.next=new E(t),this.prev=new E(t),this.head=0,this.tail=0,this.free=new jl(t),this.initialFill=1,this.size=0,"function"==typeof u&&(this.dispose=u),"function"==typeof c?(this.disposeAfter=c,this.disposed=[]):(this.disposeAfter=null,this.disposed=null),this.noDisposeOnSet=!!l,this.noUpdateTTL=!!h,this.noDeleteOnFetchRejection=!!y,0!==this.maxEntrySize){if(0!==this.maxSize&&!Fl(this.maxSize))throw new TypeError("maxSize must be a positive integer if specified");if(!Fl(this.maxEntrySize))throw new TypeError("maxEntrySize must be a positive integer if specified");this.initializeSizeTracking()}if(this.allowStale=!!a||!!A,this.noDeleteOnStaleGet=!!v,this.updateAgeOnGet=!!o,this.updateAgeOnHas=!!s,this.ttlResolution=Fl(n)||0===n?n:1,this.ttlAutopurge=!!i,this.ttl=r||b||0,this.ttl){if(!Fl(this.ttl))throw new TypeError("ttl must be a positive integer if specified");this.initializeTTLTracking()}if(0===this.max&&0===this.ttl&&0===this.maxSize)throw new TypeError("At least one of max, maxSize, or ttl is required");if(!this.ttlAutopurge&&!this.max&&!this.maxSize){const e="LRU_CACHE_UNBOUNDED";if(Ml(e)){Ol.add(e);Tl("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.","UnboundedCacheWarning",e,zl)}}A&&Nl("stale","allowStale"),b&&Nl("maxAge","ttl"),w&&Nl("length","sizeCalculation")}}Sl=zl;var ql;ql=o("3iiR7");var Kl,Gl,Wl;function Hl(){return Hl=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},Hl.apply(this,arguments)}function Jl(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,Vl(e,t)}function Vl(e,t){return(Vl=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Yl(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t.indexOf(r=o[n])>=0||(i[r]=e[r]);return i}function Ql(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Zl(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(r)return(r=r.call(e)).next.bind(r);if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return Ql(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Ql(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function Xl(e,t){return Object.keys(e.payload).every((function(r){var n=e.payload[r],i=t.meta[r];return"object"==typeof n?JSON.stringify(n)===JSON.stringify(i):i===n}))}function $l(e){return e===Gl.error||e===Gl.ok}function eh(e){return e===Gl.requested}function th(e){return e===Gl.requested||e===Gl.updating}Kl=function e(t,r){if(t===r)return!0;if(t&&r&&"object"==typeof t&&"object"==typeof r){if(t.constructor!==r.constructor)return!1;var n,i,o;if(Array.isArray(t)){if((n=t.length)!=r.length)return!1;for(i=n;0!=i--;)if(!e(t[i],r[i]))return!1;return!0}if(t.constructor===RegExp)return t.source===r.source&&t.flags===r.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===r.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===r.toString();if((n=(o=Object.keys(t)).length)!==Object.keys(r).length)return!1;for(i=n;0!=i--;)if(!Object.prototype.hasOwnProperty.call(r,o[i]))return!1;for(i=n;0!=i--;){var s=o[i];if(!e(t[s],r[s]))return!1}return!0}return t!=t&&r!=r},(Wl=Gl||(Gl={}))[Wl.noRequests=0]="noRequests",Wl[Wl.requested=1]="requested",Wl[Wl.updating=2]="updating",Wl[Wl.ok=3]="ok",Wl[Wl.error=4]="error";var rh=function(e){return{status:null!=e?e:Gl.noRequests,value:null,data:null,timestamp:0,meta:{},hasSubscribers:!1,isStale:!1,isLoading:eh(null!=e?e:Gl.noRequests),isFetching:th(null!=e?e:Gl.noRequests),isDone:!1}},nh=function(e){function t(t){var r;return(r=e.call(this,t)||this).apiSubscription=void 0,r.listenersCount=void 0,r.apiSubscription=null,r.listenersCount=0,r}Jl(t,e),t.fromStatus=function(e){return new t(rh(e))};var r=t.prototype;return r.setData=function(e){var t,r=e.value,n=e.meta,i=void 0===n?{}:n,o=e.status,s=e.isDone,a=((t={})[e.scopeName]=r,t);this.setState((function(e){return Hl({},e,{data:a,meta:i,value:r,timestamp:Date.now(),status:o,isStale:!1,isLoading:eh(o),isFetching:th(o),isDone:s})}))},r.makeSubscription=function(e){var t=e.unsubscribe;this.state.status=$l(this.state.status)?Gl.updating:Gl.requested,this.state.hasSubscribers=!0,this.apiSubscription={unsubscribe:t}},r.removeSubscription=function(){this.apiSubscription&&(this.apiSubscription.unsubscribe(),this.apiSubscription=null,this.state.hasSubscribers=!1),this.state.status===Gl.requested&&(this.state.status=Gl.noRequests)},r.addClientListener=function(t){var r=this,n=e.prototype.on.call(this,"change",t);return this.listenersCount+=1,function(){n(),r.listenersCount-=1,0===r.listenersCount&&r.removeSubscription()}},t}(Wu),ih=function(e){return"id"in e?e.id:e};function oh(e){if("received"===e.event)return e.newData;if("changed"===e.event)return function(e,t,r){void 0===r&&(r=ih);var n=e?Hl({},e):{};return t.forEach((function(e){var t=r(e);n[t]=e})),n}(e.prevData,e.newData,e.getId);throw new Error("Unexpected event: "+event)}function sh(e){return e.newData}function ah(e,t){var r={};return e.forEach((function(e){r[t(e)]=e})),r}function uh(e,t,r){void 0===r&&(r=ih);var n=!1;if(null===e)throw new Error('Cannot handle "change" event before "received"');var i=ah(t,r),o=e.map((function(e){var t=r(e);return t in i?(n=!0,i[t]):e}));return n?o:e}function ch(e,t,r){if(void 0===r&&(r=ih),null===e)throw new Error('Cannot handle "removed" event before "received"');var n=ah(t,r),i=e.filter((function(e){return!(r(e)in n)}));return i.length===e.length?e:i}function lh(e){if("received"===e.event)return e.newData;if("changed"===e.event)return uh(e.prevData,e.newData,e.getId);if("removed"===e.event)return ch(e.prevData,e.newData,e.getId);if("appended"===e.event)return function(e,t){if(null===e)throw new Error('Cannot handle "appended" event before "received"');return[].concat(e,t)}(e.prevData,e.newData);throw new Error("Unexpected event: "+e.event)}function hh(e,t){return"request_id"in t.meta&&e.payload.request_id===t.meta.request_id}function fh(e){switch(e){case"cache-and-network":case"cache-first":case"cache-only":return!0;case"network-only":return!1;default:throw new Error("Unsupported cache policy: "+e)}}var dh=function(){function e(){this.map=void 0,this.map=new Map}var t=e.prototype;return t.get=function(e,t){return this.map.get(e)||null},t.set=function(e,t){this.map.set(e,t)},t.remove=function(e){this.map.delete(e)},t.clear=function(){this.map.clear()},e}(),ph=new Map,gh=new Map;function mh(e,t,r){var n=r[1];if(n&&n.scope&&n.payload){var i=n.scope;ph.get(e).add(r),i.forEach((function(i){e.on("received "+t+" "+i,(function o(s){hh(n,s)&&(e.off("received "+t+" "+i,o),ph.get(e).delete(r))}))}))}}function yh(e,t){var r=t[0],n=t[1];n&&n.scope&&n.payload&&("subscribe"===r&&gh.get(e).set(n,t),"unsubscribe"===r&&gh.get(e).has(n)&&gh.get(e).delete(n))}var vh={};function wh(e){var t=e.namespace,r=e.scope,n=e.getId,i=e.mergeStrategy,o=e.verifyFn;return function(e,s){var a=s.client,u=Yl(s,["client"]),c=a||this;if(!c)throw new Error("Domain request must be called either as a method of Client or with a client parameter");return c.cachedSubscribe(Hl({},u,{onData:function(e){e.data&&u.onData(e.data)},namespace:t,getId:n||u.getId,mergeStrategy:i||u.mergeStrategy,verifyFn:o||u.verifyFn,body:{scope:[r],payload:e}}))}}var bh=function(e){return e.asset_code};function Ah(e,t){var r=t.meta,n=r.asset_codes,i=r.asset_code,o=e.payload,s=o.asset_codes;if(o.currency!==r.currency)return!1;if(i)return s.includes(i);if(s.length>n.length)return!1;var a=new Set(n);return s.every((function(e){return a.has(e)}))}var Eh=wh({namespace:"assets",scope:"prices",getId:bh,verifyFn:Ah}),xh=function(e){return e.asset.asset_code},Sh=lh,Ch=wh({namespace:"assets",scope:"info",getId:xh,mergeStrategy:Sh}),kh=lh,_h=wh({namespace:"address",scope:"loans",mergeStrategy:kh}),Ph=wh({namespace:"address",scope:"assets",getId:function(e){return e.asset.asset_code}}),Rh=wh({namespace:"address",scope:"positions"}),Oh=wh({namespace:"address",scope:"charts"}),Nh=wh({namespace:"assets",scope:"charts"}),Ih=sh,Th=wh({namespace:"assets",scope:"full-info",mergeStrategy:Ih}),Mh=wh({namespace:"address",scope:"portfolio"}),Bh="portfolio-decomposition",Fh=wh({namespace:"address",scope:Bh}),Lh=function(e){function t(t){var n,i=(void 0===t?{}:t).max,o=void 0===i?50:i;return(n=e.call(this,{usesStaleEntries:!1})||this).map=void 0,n.lruCache=void 0,n.staleEntries=void 0,n.map=new Map,n.lruCache=new(r(Sl))({max:o,dispose:function(e,t,r){"evict"===r&&bl(t)}}),n.staleEntries=new Set,n}Jl(t,e);var n=t.prototype;return n.getChangeHandler=function(e,t){var r=this;return function(){r.staleEntries.delete(t),setTimeout((function(){r.state.usesStaleEntries&&0===r.staleEntries.size&&r.setState({usesStaleEntries:!1})})),r.safeWriteEntry(e,t)}},n.safeWriteEntry=function(e,t){if(t.getState().status===Gl.ok){var r=t.getState();return this.lruCache.set(e,r),wl(e,r)}return Promise.resolve()},n.load=function(){try{var e=this;return Promise.resolve(xl().then((function(t){t.filter((function(e){var t=e[1];return null!=t.data&&t.status===Gl.ok})).forEach((function(t){var r=t[0],n=t[1];n.isStale=!0,n.hasSubscribers=!1;var i=new nh(n);i.on("change",e.getChangeHandler(r,i)),e.lruCache.set(r,i),e.map.set(r,i)}))})))}catch(e){return Promise.reject(e)}},n.get=function(e,t){var r=this,n=this.map.get(e)||null;return"cache-first"!==t&&"cache-only"!==t||null==n||!n.state.isStale?(null!=n&&n.state.isStale&&("network-only"!==t&&"cache-and-network"!==t||(this.staleEntries.add(n),setTimeout((function(){r.state.usesStaleEntries||r.setState({usesStaleEntries:!0})})))),n):null},n.set=function(e,t){this.map.set(e,t),t.on("change",this.getChangeHandler(e,t)),this.safeWriteEntry(e,t)},n.remove=function(e){this.map.delete(e)},n.clear=function(){try{return this.map.clear(),Promise.resolve(Al())}catch(e){return Promise.reject(e)}},t}(Wu),Dh=["received","appended","changed","removed","done"];function jh(e){var t=e.socketNamespace,r=e.method,n=void 0===r?"subscribe":r,i=e.body,o=e.onMessage,s=e.onAnyMessage,a=e.verifyFn,u=void 0===a?Xl:a,c=t.socket,l=t.namespace;if(!i.scope.length)throw new Error("Invalid scope argument: scope cannot be empty");var h=i.scope[0],f=[];return Dh.forEach((function(e){var t,r=(t=e,function(e){u(i,e)&&o(t,e),s&&s(t,e)});c.on(e+" "+l+" "+h,r),f.push((function(){return c.off(e+" "+l+" "+h,r)}))})),c.emit(n,i),function(){f.forEach((function(e){return e()})),"subscribe"===n&&c.emit("unsubscribe",i)}}function Uh(e){return JSON.stringify({namespace:e.socketNamespace.namespace,body:e.body})}var zh=0,qh={},Kh=function(e){return qh[e]||(qh[e]=++zh),qh[e]};function Gh(e,t){if("socketNamespace"in e)return e;if("namespace"in e)return Hl({},e,{socketNamespace:t(e.namespace)});throw new Error("Either socketNamespace or namespace must be provided")}var Wh={willSendRequest:function(e){return e}},Hh=function(){function e(e){this.url=void 0,this.apiToken=void 0,this.ioOptions=void 0,this.cache=void 0,this.hooks=void 0,this.customGetCacheKey=void 0,this.url=e?e.url:null,this.apiToken=e?e.apiToken:null,this.ioOptions=null==e?void 0:e.ioOptions,this.cache=(null==e?void 0:e.cache)||new dh,this.customGetCacheKey=null==e?void 0:e.getCacheKey,this.hooks=this.configureHooks(e),this.namespaceFactory=this.namespaceFactory.bind(this)}var t=e.prototype;return t.configureHooks=function(e){return e?Object.assign({},Wh,e.hooks):Wh},t.namespaceFactory=function(e){if(!this.url||!this.apiToken)throw new Error("Client must be configured with a url and a token. Call client.configure({ url, apiToken }) before calling this method");return function(e,t,n,i,o){if(void 0===i&&(i={}),void 0===o&&(o=n),!vh[n]){var s=i.query,a=void 0===s?{}:s,u=Yl(i,["query"]),c=function(e,t){ph.set(e,new Set),gh.set(e,new Map);var r=e.emit;Object.assign(e,{emit:function(n){var i=arguments;"get"===n?mh(e,t,i):"stream"!==n&&"subscribe"!==n&&"unsubscribe"!==n||yh(e,i),r.apply(e,arguments)}});var n=!1;return e.on("disconnect",(function(){n=!1})),e.on("reconnect",(function(){n||(n=!0,function(){for(var t,n=Zl(ph.get(e));!(t=n()).done;)r.apply(e,t.value);for(var i,o=Zl(gh.get(e).values());!(i=o()).done;)r.apply(e,i.value)}())})),e}(r(pl)(new URL(n,e).toString(),Hl({transports:["websocket"],timeout:6e4,query:Hl({api_token:t},a)},u)),e);(function(e){if("undefined"==typeof document)return function(){};var t,r=!1;document.addEventListener("visibilitychange",(function(){"hidden"===document.visibilityState&&(t=setTimeout((function(){e.disconnect(),r=!0}),window.WAIT_BEFORE_DISCONNECT||2e4)),"visible"===document.visibilityState&&(clearTimeout(t),r&&(e.on("connect",(function(){r=!1})),e.connect(),e.emit("reconnect")))}))})(c),vh[n]={socket:c,namespace:o}}return vh[n]}(this.url,this.apiToken,e,this.ioOptions)},t.configure=function(e){var t=e.apiToken,r=e.ioOptions;return this.url=e.url,this.apiToken=t,this.ioOptions=r,this.hooks=this.configureHooks(e),this.cache=e.cache||this.cache,this.customGetCacheKey=e.getCacheKey,this},t.subscribe=function(e){var t=e.verifyFn,r=void 0===t?hh:t,n=Gh(Yl(e,["verifyFn"]),this.namespaceFactory);this.hooks.willSendRequest(n.body,{namespace:n.socketNamespace.namespace});var i=Uh(n),o=Kh(i);return jh(Hl({},n,{verifyFn:r,body:Hl({},n.body,{payload:Hl({},n.body.payload,{request_id:o})})}))},t.getFromCache=function(e){if(!fh(e.cachePolicy||"cache-and-network"))return null;var t=Gh(e,this.namespaceFactory),r=Uh(t),n=Kh(r),i=this.getCacheKey(r,n),o=this.cache.get(i,t.cachePolicy||"cache-and-network");return o?o.getState():null},t.getCacheKey=function(e,t){return this.customGetCacheKey?this.customGetCacheKey({key:e,requestId:t}):this.cache instanceof Lh?e:t},t.cachedSubscribe=function(e){var t=e.cachePolicy,r=void 0===t?"cache-and-network":t,n=e.onData,i=e.getId,o=e.mergeStrategy,s=void 0===o?oh:o,a=e.verifyFn,u=void 0===a?hh:a,c=Yl(e,["cachePolicy","onData","getId","mergeStrategy","verifyFn"]),l=Gh(c,this.namespaceFactory),h=Uh(l),f=Kh(h),d=this.getCacheKey(h,f),p=l.socketNamespace.namespace,g=this.hooks.willSendRequest(Hl({},l.body,{payload:Hl({},l.body.payload,{request_id:f})}),{namespace:p}),m=this.cache.get(d,r),y=function(e,t){switch(e){case"cache-and-network":return!t||t.status===Gl.noRequests||t.status!==Gl.requested&&!t.hasSubscribers;case"cache-first":return!t||t.status===Gl.noRequests;case"network-only":return!t||t.status!==Gl.requested;case"cache-only":return!1;default:throw new Error("Unsupported cache policy: "+e)}}(r,m?m.getState():null),v=function(e,t,r,n){e.get(t,r)||e.set(t,nh.fromStatus(n));var i=e.get(t,r);if(i)return i;throw new Error("Unexpected internal error: newly created entry not found")}(this.cache,d,r,y?Gl.requested:void 0),w=v.getState(),b=v.addClientListener(n);if(y){var A=jh(Hl({},l,{body:g,verifyFn:u,onMessage:function(e,t){var r=t.payload,n=t.meta,o=l.body.scope.find((function(e){return e in r}));if(o){var a=v.getState();if("stream"!==c.method||"done"!==e){var u=s({event:e,prevData:a.data?a.data[o]:a.data,newData:r[o],getId:i}),h="stream"===c.method?$l(a.status)?Gl.updating:a.status:Gl.ok;v.setData({scopeName:o,value:u,meta:n,status:h,isDone:"stream"!==c.method})}else{var f;v.setData({scopeName:o,value:a.value,meta:Hl({},n,{next_cursor:null==(f=a.meta)?void 0:f.next_cursor}),status:Gl.ok,isDone:!0})}}}}));v.makeSubscription({unsubscribe:A})}return fh(r)&&n(w),{entryStore:v,unsubscribe:function(){return b()}}},e}(),Jh=function(e){function t(){for(var t,r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];return(t=e.call.apply(e,[this].concat(n))||this).addressAssets=Ph,t.addressLoans=_h,t.addressPositions=Rh,t.addressPortfolio=Mh,t.addressPortfolioDecomposition=Fh,t.addressCharts=Oh,t.assetsCharts=Nh,t.assetsPrices=Eh,t.assetsFullInfo=Th,t.assetsInfo=Ch,t}return Jl(t,e),t}(Hh),Vh=new Jh(null);function Yh(e){return e===Gl.ok||e===Gl.updating}var Qh=rh(),Zh=rh(Gl.requested);function Xh(e){var t=e.namespace,n=e.scope,i=e.getId,o=e.mergeStrategy,s=e.verifyFn;return function(e,a){void 0===a&&(a={});var u=(0,ql.useState)(e),c=u[0],l=u[1];return c!==e&&(r(Kl)(c,e)||l(e)),function(e){var t=e.keepStaleData,r=void 0!==t&&t,n=e.enabled,i=void 0===n||n,o=e.client,s=Yl(e,["keepStaleData","enabled","client"]),a=o||Vh,u=(0,ql.useState)(a.getFromCache(s)),c=u[0],l=u[1],h=(0,ql.useCallback)((function(e){l((function(t){if(!r)return e;if(!t)return e;var n=!!e&&Yh(e.status),i=Yh(t.status);return!n&&i?Hl({},t,{status:e?e.status:t.status,isDone:e?e.isDone:t.isDone,isFetching:e?e.isFetching:t.isFetching,isLoading:e?e.isLoading:t.isLoading}):e}))}),[r]),f=s.socketNamespace,d=s.namespace,p=(0,ql.useMemo)((function(){return Object.assign({method:s.method,cachePolicy:s.cachePolicy,body:s.body,getId:s.getId,mergeStrategy:s.mergeStrategy,onAnyMessage:s.onAnyMessage,verifyFn:s.verifyFn,onData:h},f?{socketNamespace:f}:null,d?{namespace:d}:null)}),[h,s.body,s.cachePolicy,s.getId,s.mergeStrategy,s.onAnyMessage,s.verifyFn,s.method,d,f]),g=(0,ql.useMemo)((function(){return a.getFromCache(s)}),[a,s]);g!==c&&fh(p.cachePolicy||"cache-and-network")&&(r||h(g)),(0,ql.useEffect)((function(){if(i)return h(a.getFromCache(p)),a.cachedSubscribe(p).unsubscribe}),[i,p,h,a]);var m=i&&"cache-only"!==p.cachePolicy;return!c||m&&(!c||c.status===Gl.noRequests&&!c.data)?m?Zh:Qh:c}(Hl({},a,{namespace:t,getId:i||a.getId,mergeStrategy:o||a.mergeStrategy,verifyFn:s||a.verifyFn,body:(0,ql.useMemo)((function(){return{scope:[n],payload:c}}),[c])}))}}Xh({namespace:"address",scope:"loans",mergeStrategy:kh}),Xh({namespace:"assets",scope:"info",getId:xh,mergeStrategy:Sh}),Xh({namespace:"assets",scope:"prices",getId:bh,verifyFn:Ah}),Xh({namespace:"assets",scope:"full-info",mergeStrategy:Ih}),Xh({namespace:"address",scope:"charts"}),Xh({namespace:"address",scope:"positions"}),Xh({namespace:"assets",scope:"charts"}),Xh({namespace:"address",scope:"portfolio"}),Xh({namespace:"address",scope:Bh});const $h=new class extends Wu{load(){return this.loaderPromise||(this.loaderPromise=new Promise((e=>{Vh.cachedSubscribe({namespace:"chains",body:{scope:["info"],payload:{}},onData:({value:t})=>{t&&e(t)}})})).then((e=>{const t=new fl({networks:e});return this.setState({networks:t}),t}))),this.loaderPromise}constructor(...e){super(...e),r(Ku)(this,"loaderPromise",null)}}({networks:null});s=o("iLNs9");var ef={};Object.defineProperty(ef,"__esModule",{value:!0});var tf=o("6MfS1");tf.__exportStar(o("jNpKs"),ef),tf.__exportStar(o("8lQgl"),ef),tf.__exportStar(o("hCYvh"),ef),tf.__exportStar(o("d54LR"),ef),tf.__exportStar(o("5phfX"),ef),tf.__exportStar(o("irQnp"),ef),tf.__exportStar(o("6K3B3"),ef);class rf{request(e,t,r){const n=(0,ef.formatJsonRpcRequest)(e,t,r);return this.port.postMessage(n),this.getPromise(n.id)}getPromise(e){return new Promise(((t,r)=>{const n=i=>{(0,ef.isJsonRpcPayload)(i)&&(0,ef.isJsonRpcResponse)(i)&&i.id===e&&((0,ef.isJsonRpcResult)(i)?t(i.result):r(i.error),this.port.onMessage.removeListener(n))};this.port.onMessage.addListener(n)}))}constructor({name:e}){this.port=chrome.runtime.connect({name:e})}}class nf extends Error{constructor(e){super(e),Object.defineProperty(this,"message",{value:e,enumerable:!0})}}class of extends nf{constructor(e=ef.STANDARD_ERROR_MAP.INVALID_PARAMS.message){super(e),r(Ku)(this,"code",ef.STANDARD_ERROR_MAP.INVALID_PARAMS.code)}}class sf extends nf{constructor(e="Origin Not Allowed: Try calling eth_requestAccounts first."){super(e),r(Ku)(this,"code",-32011)}}class af extends nf{constructor(e="Rejected by User"){super(e),r(Ku)(this,"code",-32010)}}class uf extends nf{constructor(e="Tx Signature: User denied transaction signature."){super(e),r(Ku)(this,"code",4001)}}class cf extends nf{constructor(e="Method not implemented"){super(e),r(Ku)(this,"code",-32601)}}class lf extends nf{constructor(e="Record not found"){super(e),r(Ku)(this,"code",-32602)}}class hf extends nf{constructor(e="Session expired"){super(e),r(Ku)(this,"code",2312103)}}const ff=new rf({name:`${r(s).runtime.id}/wallet`}),df=new rf({name:"accountPublicRPC"}),pf=new rf({name:"memoryCacheRPC"});new class extends rf{confirm(e,t){return this.port.postMessage({id:e,result:t})}reject(e){this.port.postMessage({id:e,error:new af})}}({name:"window"});Object.assign(window,{walletPort:ff,accountPublicRPCPort:df});new class{getChangeHandler(e,t){return()=>{this.safeWriteEntry(e,t)}}safeWriteEntry(e,t){return t.getState().status===Gl.ok&&pf.request("set",{key:e,value:t.getState()}),Promise.resolve()}get(e){return this.map.get(e)||null}set(e,t){this.map.set(e,t),t.on("change",this.getChangeHandler(e,t)),this.safeWriteEntry(e,t)}clear(){this.map=new Map}remove(){throw new Error("Not implemented")}async load(){pf.request("getAll").then((e=>{for(const t in e){const r=e[t];r.isStale=!0,r.hasSubscribers=!1;const n=new nh(r);n.on("change",this.getChangeHandler(t,n)),this.map.set(t,n)}}))}constructor(){this.map=new Map}};s=o("iLNs9"),s=o("iLNs9");async function gf(e){const t=await r(s).storage.local.get(e);return null==t?void 0:t[e]}async function mf(e,t){await r(s).storage.local.set({[e]:t})}async function yf(e){await r(s).storage.local.remove(e)}const vf=.2;async function wf(){const e=await gf("STORAGE_VERSION");return null!=e?e:"no-version"}const bf={"no-version":async()=>{await mf("STORAGE_VERSION","no-version")}};async function Af(){const e=Boolean(await gf("currentUser")),t=await wf();if(e)return t!==vf&&t in bf?bf[t]():"ok";mf("STORAGE_VERSION",vf)}var Ef,xf={},Sf="object"==typeof Reflect?Reflect:null,Cf=Sf&&"function"==typeof Sf.apply?Sf.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};Ef=Sf&&"function"==typeof Sf.ownKeys?Sf.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var kf=Number.isNaN||function(e){return e!=e};function _f(){_f.init.call(this)}(xf=_f).once=function(e,t){return new Promise((function(r,n){function i(r){e.removeListener(t,o),n(r)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),r([].slice.call(arguments))}Lf(e,t,o,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&Lf(e,"error",t,r)}(e,i,{once:!0})}))},_f.EventEmitter=_f,_f.prototype._events=void 0,_f.prototype._eventsCount=0,_f.prototype._maxListeners=void 0;var Pf=10;function Rf(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function Of(e){return void 0===e._maxListeners?_f.defaultMaxListeners:e._maxListeners}function Nf(e,t,r,n){var i,o,s,a;if(Rf(r),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),s=o[t]),void 0===s)s=o[t]=r,++e._eventsCount;else if("function"==typeof s?s=o[t]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),(i=Of(e))>0&&s.length>i&&!s.warned){s.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=s.length,a=u,console&&console.warn&&console.warn(a)}return e}function If(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function Tf(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=If.bind(n);return i.listener=r,n.wrapFn=i,i}function Mf(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):Ff(i,i.length)}function Bf(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function Ff(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function Lf(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){n.once&&e.removeEventListener(t,i),r(o)}))}}Object.defineProperty(_f,"defaultMaxListeners",{enumerable:!0,get:function(){return Pf},set:function(e){if("number"!=typeof e||e<0||kf(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");Pf=e}}),_f.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},_f.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||kf(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},_f.prototype.getMaxListeners=function(){return Of(this)},_f.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var s=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw s.context=o,s}var a=i[e];if(void 0===a)return!1;if("function"==typeof a)Cf(a,this,t);else{var u=a.length,c=Ff(a,u);for(r=0;r<u;++r)Cf(c[r],this,t)}return!0},_f.prototype.addListener=function(e,t){return Nf(this,e,t,!1)},_f.prototype.on=_f.prototype.addListener,_f.prototype.prependListener=function(e,t){return Nf(this,e,t,!0)},_f.prototype.once=function(e,t){return Rf(t),this.on(e,Tf(this,e,t)),this},_f.prototype.prependOnceListener=function(e,t){return Rf(t),this.prependListener(e,Tf(this,e,t)),this},_f.prototype.removeListener=function(e,t){var r,n,i,o,s;if(Rf(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){s=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,s||t)}return this},_f.prototype.off=_f.prototype.removeListener,_f.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},_f.prototype.listeners=function(e){return Mf(this,e,!0)},_f.prototype.rawListeners=function(e){return Mf(this,e,!1)},_f.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):Bf.call(e,t)},_f.prototype.listenerCount=Bf,_f.prototype.eventNames=function(){return this._eventsCount>0?Ef(this._events):[]};let Df=(e=21)=>crypto.getRandomValues(new Uint8Array(e)).reduce(((e,t)=>e+=(t&=63)<36?t.toString(36):t<62?(t-26).toString(36).toUpperCase():t>62?"-":"_"),"");function jf(e){return(new TextEncoder).encode(e)}function Uf(e){return(new TextDecoder).decode(e)}function zf(e){const t=window.atob(e),r=new Uint8Array(t.length);for(let e=0;e<r.length;e++)r[e]=t.charCodeAt(e);return r}function qf(e){return window.btoa(String.fromCharCode.apply(null,e))}function Kf(e){return qf(new Uint8Array(e))}function Gf(e){return zf(e).buffer}function Wf(e=32){return window.crypto.getRandomValues(new Uint8Array(e))}function Hf(e=32){return qf(Wf(e))}function Jf(){return Hf(32)}async function Vf(e,t){const r=await async function(e){const t=jf(e);return await window.crypto.subtle.importKey("raw",t,{name:"PBKDF2"},!1,["deriveBits","deriveKey"])}(e),n=await async function(e,t){const r=zf(t);return await window.crypto.subtle.deriveKey({name:"PBKDF2",salt:r,iterations:35e4,hash:"SHA-256"},e,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"])}(r,t);return n}async function Yf(e,t,r=Jf()){const n=jf(JSON.stringify(t)),i=Wf(16),o=await Vf(e,r),s=await window.crypto.subtle.encrypt({name:"AES-GCM",iv:i},o,n);return{iv:Kf(i),data:Kf(s),salt:r,version:1}}async function Qf(e,t,r=Jf()){const n=await Yf(e,t,r);return JSON.stringify(n)}async function Zf(e,t){return async function(e,t){const{iv:r,data:n,salt:i}=t,o=zf(n),s=Gf(r),a=await Vf(e,i),u=await window.crypto.subtle.decrypt({name:"AES-GCM",iv:s},a,o),c=Uf(new Uint8Array(u));return JSON.parse(c)}(e,JSON.parse(t))}function Xf(){return new Uint8Array(12)}async function $f(e,t){const r=await async function(e,t){const r=jf(JSON.stringify(t));return{data:Kf(await window.crypto.subtle.encrypt({name:"AES-GCM",iv:Xf()},e,r)),version:1}}(e,t);return JSON.stringify(r)}async function ed(e,t){const r=Gf(t.data),n=await window.crypto.subtle.decrypt({name:"AES-GCM",iv:Xf()},e,r),i=Uf(new Uint8Array(n));return JSON.parse(i)}async function td(e,t){return ed(e,JSON.parse(t))}async function rd(e){const t=jf(e),r=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(r)).map((e=>e.toString(16).padStart(2,"0"))).join("")}function nd({password:e}){return e.length<6?{valid:!1,message:"Password must have at least 6 characters"}:{valid:!0,message:""}}let id=()=>({events:{},emit(e,...t){let r=this.events[e]||[];for(let e=0,n=r.length;e<n;e++)r[e](...t)},on(e,t){var r;return(null===(r=this.events[e])||void 0===r?void 0:r.push(t))||(this.events[e]=[t]),()=>{var r;this.events[e]=null===(r=this.events[e])||void 0===r?void 0:r.filter((e=>t!==e))}}});s=o("iLNs9");const od=/windows/i.test(navigator.userAgent),sd=new(0,xf.EventEmitter);r(s).windows.onFocusChanged.addListener((e=>{sd.emit("windowFocusChange",e)})),r(s).windows.onRemoved.addListener((e=>{sd.emit("windowRemoved",e)}));const ad={width:400+(od?14:0),height:600};var ud;ud=o("9ev1f").getBundleURL("iV77h")+o("8wNGQ").resolve("2zmJU");const cd={openNotification:({route:e="",...t}={})=>{const n=new URL(ud);return e&&(n.hash=e),(async({url:e,...t})=>{const{top:n,left:i,width:o}=await r(s).windows.getCurrent({windowTypes:["normal"]}),a=(n||0)+80,u=(i||0)+(o||0)-ad.width,c=await r(s).windows.getCurrent();return(await r(s).windows.create({focused:!0,url:e,type:"popup",top:a,left:u,state:"fullscreen"===c.state?"fullscreen":void 0,...ad,...t})).id})({url:n.toString(),...t})},event:sd,remove:async e=>r(s).windows.remove(e)};const ld=new class extends(r(xf)){getWindowId(e){return this.idsMap.get(e)}getNewId(){return Df()}async open({route:e,search:t,onDismiss:r,onResolve:n}){null!=this.windowId&&cd.remove(this.windowId);const i=[],o=()=>{i.forEach((e=>e()))};let s=e;const a=this.getNewId(),u=new URLSearchParams(t);u.append("windowId",String(a)),s+=`?${u.toString()}`;const c=await cd.openNotification({route:s});c&&(this.idsMap.set(a,c),i.push((()=>this.idsMap.delete(a)))),this.windowId=c,i.push((()=>{null!=this.windowId&&(cd.remove(this.windowId),this.windowId=null)}));const l=(e,t)=>{e===this.windowId&&(r(t),o())},h=e=>{this.windowId===e&&(this.windowId=null),r(new af("Window Closed")),o()};cd.event.on("windowRemoved",h),i.push((()=>{cd.event.off("windowRemoved",h)}));const f=({id:e,result:t})=>{this.getWindowId(e)===c&&(n(t),o())},d=e=>{const t=this.getWindowId(e.id);null!=t&&l(t,e.error)};this.on("resolve",f),this.on("reject",d),i.push((()=>{this.off("resolve",f),this.off("reject",d)}))}closeCurrentWindow(){null!=this.windowId&&cd.remove(this.windowId)}constructor(){super(),r(Ku)(this,"windowId",null),this.id=Df(),this.idsMap=new Map}};Object.assign(window,{notificationWindow:ld});const hd=`chrome-extension://${chrome.runtime.id}`,fd=Symbol(),dd=["from","to","nonce","data","value","chainId","type","accessList","gasLimit","gasPrice","maxPriorityFeePerGas","maxFeePerGas"];function pd(e){const t={};for(const r of dd){const n=r;void 0!==e[n]&&(t[n]=e[n])}return e.gas&&(t.gasLimit=e.gas),e.chainId&&"string"==typeof e.chainId&&(t.chainId=parseInt(e.chainId)),t}function gd(e){return null!=e&&""!==e}function md(e){return function(e){return gd(e.maxFeePerGas)&&gd(e.maxPriorityFeePerGas)}(e)||function(e){return gd(e.gasPrice)}(e)}function yd(e,t){if(t.eip1559){const{eip1559:r}=t;return Object.assign(e,{maxFeePerGas:String(a.utils.hexValue(r.max_fee)),maxPriorityFeePerGas:String(a.utils.hexValue(r.priority_fee))})}if(null!=t.classic)return Object.assign(e,{gasPrice:String(t.classic)});throw new Error("gasPrice object must include either classic or eip1559 field")}const vd=new class{get(){return this.latestValue?Promise.resolve(this.latestValue):this.initialPromise?this.initialPromise:this.initiateRequest()}initiateRequest(){return this.initialPromise=new Promise((e=>{const{unsubscribe:t}=Vh.cachedSubscribe({namespace:"gas",body:{scope:["chain-prices"],payload:{}},onData:({value:t})=>{t&&(this.latestValue||e(t),this.latestValue=t)},mergeStrategy:sh});this.unsubscribe=t})),this.initialPromise}constructor(){r(Ku)(this,"latestValue",null),r(Ku)(this,"initialPromise",null),r(Ku)(this,"unsubscribe",null)}};async function wd(e){const t=await async function(e){const{chainId:t}=e;if(!t)throw new Error("Transaction object must have a chainId property");const[r,n]=await Promise.all([$h.load(),vd.get()]),i=r.getChainById(a.utils.hexValue(t)),o=n[i.toString()];if(!o)throw new Error(`Gas Price info for ${i.toString()} not found`);return o}(e),{eip1559:r,classic:n}=t.info;yd(e,{eip1559:null==r?void 0:r.fast,classic:null==n?void 0:n.fast})}var bd,Ad={};Ad=function(e,t){for(var r=-1,n=null==e?0:e.length,i=Array(n);++r<n;)i[r]=t(e[r],r,e);return i};var Ed,xd={},Sd={};Ed=function(){this.__data__=new Lc,this.size=0};var Cd;Cd=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r};var kd;kd=function(e){return this.__data__.get(e)};var _d;_d=function(e){return this.__data__.has(e)};var Pd;function Rd(e){var t=this.__data__=new Lc(e);this.size=t.size}Pd=function(e,t){var r=this.__data__;if(r instanceof Lc){var n=r.__data__;if(!Hc||n.length<199)return n.push([e,t]),this.size=++r.size,this;r=this.__data__=new Xu(n)}return r.set(e,t),this.size=r.size,this},Rd.prototype.clear=Ed,Rd.prototype.delete=Cd,Rd.prototype.get=kd,Rd.prototype.has=_d,Rd.prototype.set=Pd,Sd=Rd;var Od={};Od=function(e,t){for(var r=-1,n=null==e?0:e.length;++r<n&&!1!==t(e[r],r,e););return e};var Nd={},Id={},Td={},Md=function(){try{var e=tc(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();Td=Md,Id=function(e,t,r){"__proto__"==t&&Td?Td(e,t,{configurable:!0,enumerable:!0,value:r,writable:!0}):e[t]=r};var Bd=Object.prototype.hasOwnProperty;Nd=function(e,t,r){var n=e[t];Bd.call(e,t)&&Uc(n,r)&&(void 0!==r||t in e)||Id(e,t,r)};var Fd={},Ld={};Ld=function(e,t,r,n){var i=!r;r||(r={});for(var o=-1,s=t.length;++o<s;){var a=t[o],u=n?n(r[a],e[a],a,r,e):void 0;void 0===u&&(u=e[a]),i?Id(r,a,u):Nd(r,a,u)}return r};var Dd={},jd={},Ud={};Ud=function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n};var zd={},qd={},Kd={};Kd=function(e){return null!=e&&"object"==typeof e};qd=function(e){return Kd(e)&&"[object Arguments]"==ic(e)};var Gd=Object.prototype,Wd=Gd.hasOwnProperty,Hd=Gd.propertyIsEnumerable,Jd=qd(function(){return arguments}())?qd:function(e){return Kd(e)&&Wd.call(e,"callee")&&!Hd.call(e,"callee")};zd=Jd;var Vd={},Yd=Array.isArray;Vd=Yd;var Qd=o("2BQXy"),Zd={},Xd=/^(?:0|[1-9]\d*)$/;Zd=function(e,t){var r=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==r||"symbol"!=r&&Xd.test(e))&&e>-1&&e%1==0&&e<t};var $d,ep={},tp={};tp=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991};var rp={};rp["[object Float32Array]"]=rp["[object Float64Array]"]=rp["[object Int8Array]"]=rp["[object Int16Array]"]=rp["[object Int32Array]"]=rp["[object Uint8Array]"]=rp["[object Uint8ClampedArray]"]=rp["[object Uint16Array]"]=rp["[object Uint32Array]"]=!0,rp["[object Arguments]"]=rp["[object Array]"]=rp["[object ArrayBuffer]"]=rp["[object Boolean]"]=rp["[object DataView]"]=rp["[object Date]"]=rp["[object Error]"]=rp["[object Function]"]=rp["[object Map]"]=rp["[object Number]"]=rp["[object Object]"]=rp["[object RegExp]"]=rp["[object Set]"]=rp["[object String]"]=rp["[object WeakMap]"]=!1,$d=function(e){return Kd(e)&&tp(e.length)&&!!rp[ic(e)]};var np={};np=function(e){return function(t){return e(t)}};var ip=(Eg=o("dBwJu"))&&Eg.isTypedArray,op=ip?np(ip):$d;ep=op;var sp=Object.prototype.hasOwnProperty;jd=function(e,t){var r=Vd(e),n=!r&&zd(e),i=!r&&!n&&Qd(e),o=!r&&!n&&!i&&ep(e),s=r||n||i||o,a=s?Ud(e.length,String):[],u=a.length;for(var c in e)!t&&!sp.call(e,c)||s&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Zd(c,u))||a.push(c);return a};var ap={},up={},cp=Object.prototype;up=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||cp)};var lp={},hp={};var fp=(hp=function(e,t){return function(r){return e(t(r))}})(Object.keys,Object);lp=fp;var dp=Object.prototype.hasOwnProperty;ap=function(e){if(!up(e))return lp(e);var t=[];for(var r in Object(e))dp.call(e,r)&&"constructor"!=r&&t.push(r);return t};var pp={};pp=function(e){return null!=e&&tp(e.length)&&!nc(e)},Dd=function(e){return pp(e)?jd(e):ap(e)},Fd=function(e,t){return e&&Ld(t,Dd(t),e)};var gp={},mp={},yp={},vp={};vp=function(e){var t=[];if(null!=e)for(var r in Object(e))t.push(r);return t};var wp=Object.prototype.hasOwnProperty;yp=function(e){if(!dc(e))return vp(e);var t=up(e),r=[];for(var n in e)("constructor"!=n||!t&&wp.call(e,n))&&r.push(n);return r},mp=function(e){return pp(e)?jd(e,!0):yp(e)},gp=function(e,t){return e&&Ld(t,mp(t),e)};var bp=o("80fr4"),Ap={};Ap=function(e,t){var r=-1,n=e.length;for(t||(t=Array(n));++r<n;)t[r]=e[r];return t};var Ep={},xp={},Sp={};Sp=function(e,t){for(var r=-1,n=null==e?0:e.length,i=0,o=[];++r<n;){var s=e[r];t(s,r,e)&&(o[i++]=s)}return o};var Cp;Cp=function(){return[]};var kp=Object.prototype.propertyIsEnumerable,_p=Object.getOwnPropertySymbols;xp=_p?function(e){return null==e?[]:(e=Object(e),Sp(_p(e),(function(t){return kp.call(e,t)})))}:Cp,Ep=function(e,t){return Ld(e,xp(e),t)};var Pp={},Rp={},Op={};Op=function(e,t){for(var r=-1,n=t.length,i=e.length;++r<n;)e[i+r]=t[r];return e};var Np={},Ip=hp(Object.getPrototypeOf,Object);Np=Ip;var Tp=Object.getOwnPropertySymbols;Rp=Tp?function(e){for(var t=[];e;)Op(t,xp(e)),e=Np(e);return t}:Cp,Pp=function(e,t){return Ld(e,Rp(e),t)};var Mp,Bp={};Bp=function(e,t,r){var n=t(e);return Vd(e)?n:Op(n,r(e))},Mp=function(e){return Bp(e,Dd,xp)};var Fp={};Fp=function(e){return Bp(e,mp,Rp)};var Lp={},Dp={};Jc=o("303DT");Dp=tc(Jc,"DataView");var jp={};Jc=o("303DT");jp=tc(Jc,"Promise");var Up={};Jc=o("303DT");Up=tc(Jc,"Set");var zp={};Jc=o("303DT");zp=tc(Jc,"WeakMap");var qp="[object Map]",Kp="[object Promise]",Gp="[object Set]",Wp="[object WeakMap]",Hp="[object DataView]",Jp=wc(Dp),Vp=wc(Hc),Yp=wc(jp),Qp=wc(Up),Zp=wc(zp),Xp=ic;(Dp&&Xp(new Dp(new ArrayBuffer(1)))!=Hp||Hc&&Xp(new Hc)!=qp||jp&&Xp(jp.resolve())!=Kp||Up&&Xp(new Up)!=Gp||zp&&Xp(new zp)!=Wp)&&(Xp=function(e){var t=ic(e),r="[object Object]"==t?e.constructor:void 0,n=r?wc(r):"";if(n)switch(n){case Jp:return Hp;case Vp:return qp;case Yp:return Kp;case Qp:return Gp;case Zp:return Wp}return t}),Lp=Xp;var $p={},eg=Object.prototype.hasOwnProperty;$p=function(e){var t=e.length,r=new e.constructor(t);return t&&"string"==typeof e[0]&&eg.call(e,"index")&&(r.index=e.index,r.input=e.input),r};var tg={},rg={},ng={},ig=(Jc=o("303DT")).Uint8Array;ng=ig,rg=function(e){var t=new e.constructor(e.byteLength);return new ng(t).set(new ng(e)),t};var og={};og=function(e,t){var r=t?rg(e.buffer):e.buffer;return new e.constructor(r,e.byteOffset,e.byteLength)};var sg={},ag=/\w*$/;sg=function(e){var t=new e.constructor(e.source,ag.exec(e));return t.lastIndex=e.lastIndex,t};var ug={},cg=Qu?Qu.prototype:void 0,lg=cg?cg.valueOf:void 0;ug=function(e){return lg?Object(lg.call(e)):{}};var hg={};hg=function(e,t){var r=t?rg(e.buffer):e.buffer;return new e.constructor(r,e.byteOffset,e.length)};tg=function(e,t,r){var n=e.constructor;switch(t){case"[object ArrayBuffer]":return rg(e);case"[object Boolean]":case"[object Date]":return new n(+e);case"[object DataView]":return og(e,r);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return hg(e,r);case"[object Map]":case"[object Set]":return new n;case"[object Number]":case"[object String]":return new n(e);case"[object RegExp]":return sg(e);case"[object Symbol]":return ug(e)}};var fg={},dg={},pg=Object.create,gg=function(){function e(){}return function(t){if(!dc(t))return{};if(pg)return pg(t);e.prototype=t;var r=new e;return e.prototype=void 0,r}}();dg=gg,fg=function(e){return"function"!=typeof e.constructor||up(e)?{}:dg(Np(e))};Qd=o("2BQXy");var mg,yg={};mg=function(e){return Kd(e)&&"[object Map]"==Lp(e)};var vg=(Eg=o("dBwJu"))&&Eg.isMap,wg=vg?np(vg):mg;yg=wg;var bg,Ag={};bg=function(e){return Kd(e)&&"[object Set]"==Lp(e)};var Eg,xg=(Eg=o("dBwJu"))&&Eg.isSet,Sg=xg?np(xg):bg;Ag=Sg;var Cg="[object Arguments]",kg="[object Function]",_g="[object Object]",Pg={};Pg["[object Arguments]"]=Pg["[object Array]"]=Pg["[object ArrayBuffer]"]=Pg["[object DataView]"]=Pg["[object Boolean]"]=Pg["[object Date]"]=Pg["[object Float32Array]"]=Pg["[object Float64Array]"]=Pg["[object Int8Array]"]=Pg["[object Int16Array]"]=Pg["[object Int32Array]"]=Pg["[object Map]"]=Pg["[object Number]"]=Pg["[object Object]"]=Pg["[object RegExp]"]=Pg["[object Set]"]=Pg["[object String]"]=Pg["[object Symbol]"]=Pg["[object Uint8Array]"]=Pg["[object Uint8ClampedArray]"]=Pg["[object Uint16Array]"]=Pg["[object Uint32Array]"]=!0,Pg["[object Error]"]=Pg["[object Function]"]=Pg["[object WeakMap]"]=!1,xd=function e(t,r,n,i,o,s){var a,u=1&r,c=2&r,l=4&r;if(n&&(a=o?n(t,i,o,s):n(t)),void 0!==a)return a;if(!dc(t))return t;var h=Vd(t);if(h){if(a=$p(t),!u)return Ap(t,a)}else{var f=Lp(t),d=f==kg||"[object GeneratorFunction]"==f;if(Qd(t))return bp(t,u);if(f==_g||f==Cg||d&&!o){if(a=c||d?{}:fg(t),!u)return c?Pp(t,gp(a,t)):Ep(t,Fd(a,t))}else{if(!Pg[f])return o?t:{};a=tg(t,f,u)}}s||(s=new Sd);var p=s.get(t);if(p)return p;s.set(t,a),Ag(t)?t.forEach((function(i){a.add(e(i,r,n,i,t,s))})):yg(t)&&t.forEach((function(i,o){a.set(o,e(i,r,n,o,t,s))}));var g=h?void 0:(l?c?Fp:Mp:c?mp:Dd)(t);return Od(g||t,(function(i,o){g&&(i=t[o=i]),Nd(a,o,e(i,r,n,o,t,s))})),a};var Rg={},Og={},Ng={},Ig={};Ig=function(e){return"symbol"==typeof e||Kd(e)&&"[object Symbol]"==ic(e)};var Tg=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Mg=/^\w*$/;Ng=function(e,t){if(Vd(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!Ig(e))||(Mg.test(e)||!Tg.test(e)||null!=t&&e in Object(t))};var Bg={};var Fg=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Lg=/\\(\\)?/g,Dg=function(e){var t=Zu(e,(function(e){return 500===r.size&&r.clear(),e})),r=t.cache;return t}((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(Fg,(function(e,r,n,i){t.push(n?i.replace(Lg,"$1"):r||e)})),t}));Bg=Dg;var jg={},Ug={},zg=Qu?Qu.prototype:void 0,qg=zg?zg.toString:void 0;Ug=function e(t){if("string"==typeof t)return t;if(Vd(t))return Ad(t,e)+"";if(Ig(t))return qg?qg.call(t):"";var r=t+"";return"0"==r&&1/t==-Infinity?"-0":r},jg=function(e){return null==e?"":Ug(e)},Og=function(e,t){return Vd(e)?e:Ng(e,t)?[e]:Bg(jg(e))};var Kg={};Kg=function(e){var t=null==e?0:e.length;return t?e[t-1]:void 0};var Gg={},Wg={},Hg={};Hg=function(e){if("string"==typeof e||Ig(e))return e;var t=e+"";return"0"==t&&1/e==-Infinity?"-0":t},Wg=function(e,t){for(var r=0,n=(t=Og(t,e)).length;null!=e&&r<n;)e=e[Hg(t[r++])];return r&&r==n?e:void 0};var Jg={};Jg=function(e,t,r){var n=-1,i=e.length;t<0&&(t=-t>i?0:i+t),(r=r>i?i:r)<0&&(r+=i),i=t>r?0:r-t>>>0,t>>>=0;for(var o=Array(i);++n<i;)o[n]=e[n+t];return o},Gg=function(e,t){return t.length<2?e:Wg(e,Jg(t,0,-1))},Rg=function(e,t){return t=Og(t,e),null==(e=Gg(e,t))||delete e[Hg(Kg(t))]};var Vg,Yg={},Qg=Function.prototype,Zg=Object.prototype,Xg=Qg.toString,$g=Zg.hasOwnProperty,em=Xg.call(Object);Yg=function(e){if(!Kd(e)||"[object Object]"!=ic(e))return!1;var t=Np(e);if(null===t)return!0;var r=$g.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&Xg.call(r)==em},Vg=function(e){return Yg(e)?void 0:e};var tm,rm,nm={},im=Qu?Qu.isConcatSpreadable:void 0;rm=function(e){return Vd(e)||zd(e)||!!(im&&e&&e[im])},nm=function e(t,r,n,i,o){var s=-1,a=t.length;for(n||(n=rm),o||(o=[]);++s<a;){var u=t[s];r>0&&n(u)?r>1?e(u,r-1,n,i,o):Op(o,u):i||(o[o.length]=u)}return o},tm=function(e){return(null==e?0:e.length)?nm(e,1):[]};var om={},sm={};sm=function(e,t,r){switch(r.length){case 0:return e.call(t);case 1:return e.call(t,r[0]);case 2:return e.call(t,r[0],r[1]);case 3:return e.call(t,r[0],r[1],r[2])}return e.apply(t,r)};var am=Math.max;om=function(e,t,r){return t=am(void 0===t?e.length-1:t,0),function(){for(var n=arguments,i=-1,o=am(n.length-t,0),s=Array(o);++i<o;)s[i]=n[t+i];i=-1;for(var a=Array(t+1);++i<t;)a[i]=n[i];return a[t]=r(s),sm(e,this,a)}};var um,cm={},lm={};lm=function(e){return function(){return e}};um=Td?function(e,t){return Td(e,"toString",{configurable:!0,enumerable:!1,value:lm(t),writable:!0})}:function(e){return e};var hm={},fm=Date.now;hm=function(e){var t=0,r=0;return function(){var n=fm(),i=16-(n-r);if(r=n,i>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}};var dm=hm(um);cm=dm;var pm=function(e){return cm(om(e,void 0,tm),e+"")}((function(e,t){var r={};if(null==e)return r;var n=!1;t=Ad(t,(function(t){return t=Og(t,e),n||(n=t.length>1),t})),Ld(e,Fp(e),r),n&&(r=xd(r,7,Vg));for(var i=t.length;i--;)Rg(r,t[i]);return r}));function gm(e){if("string"!=typeof e){if(function(e){return Boolean(e.domain&&e.message&&e.types)}(e))return e;throw new Error("typedData input object is incomplete")}try{return JSON.parse(e)}catch(e){throw new Error("Failed to parse typedData input")}}function mm(e){const t=gm(e);return{...t,types:r(bd)(t.types,["EIP712Domain"])}}bd=pm;var ym={},vm=ym&&ym.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),wm=ym&&ym.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),bm=ym&&ym.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&vm(t,e,r);return wm(t,e),t};Object.defineProperty(ym,"__esModule",{value:!0}),ym.formatBytes32String=ym.Utf8ErrorFuncs=ym.toUtf8String=ym.toUtf8CodePoints=ym.toUtf8Bytes=ym._toEscapedUtf8String=ym.nameprep=ym.hexDataSlice=ym.hexDataLength=ym.hexZeroPad=ym.hexValue=ym.hexStripZeros=ym.hexConcat=ym.isHexString=ym.hexlify=ym.base64=ym.base58=ym.TransactionDescription=ym.LogDescription=ym.Interface=ym.SigningKey=ym.HDNode=ym.defaultPath=ym.isBytesLike=ym.isBytes=ym.zeroPad=ym.stripZeros=ym.concat=ym.arrayify=ym.shallowCopy=ym.resolveProperties=ym.getStatic=ym.defineReadOnly=ym.deepCopy=ym.checkProperties=ym.poll=ym.fetchJson=ym._fetchData=ym.RLP=ym.Logger=ym.checkResultErrors=ym.FormatTypes=ym.ParamType=ym.FunctionFragment=ym.EventFragment=ym.ErrorFragment=ym.ConstructorFragment=ym.Fragment=ym.defaultAbiCoder=ym.AbiCoder=void 0,ym.Indexed=ym.Utf8ErrorReason=ym.UnicodeNormalizationForm=ym.SupportedAlgorithm=ym.mnemonicToSeed=ym.isValidMnemonic=ym.entropyToMnemonic=ym.mnemonicToEntropy=ym.getAccountPath=ym.verifyTypedData=ym.verifyMessage=ym.recoverPublicKey=ym.computePublicKey=ym.recoverAddress=ym.computeAddress=ym.getJsonWalletAddress=ym.TransactionTypes=ym.serializeTransaction=ym.parseTransaction=ym.accessListify=ym.joinSignature=ym.splitSignature=ym.soliditySha256=ym.solidityKeccak256=ym.solidityPack=ym.shuffled=ym.randomBytes=ym.sha512=ym.sha256=ym.ripemd160=ym.keccak256=ym.computeHmac=ym.commify=ym.parseUnits=ym.formatUnits=ym.parseEther=ym.formatEther=ym.isAddress=ym.getCreate2Address=ym.getContractAddress=ym.getIcapAddress=ym.getAddress=ym._TypedDataEncoder=ym.id=ym.isValidName=ym.namehash=ym.hashMessage=ym.dnsEncode=ym.parseBytes32String=void 0,Object.defineProperty(ym,"AbiCoder",{enumerable:!0,get:function(){return qt}}),Object.defineProperty(ym,"checkResultErrors",{enumerable:!0,get:function(){return Ae}}),Object.defineProperty(ym,"ConstructorFragment",{enumerable:!0,get:function(){return fe}}),Object.defineProperty(ym,"defaultAbiCoder",{enumerable:!0,get:function(){return Kt}}),Object.defineProperty(ym,"ErrorFragment",{enumerable:!0,get:function(){return ge}}),Object.defineProperty(ym,"EventFragment",{enumerable:!0,get:function(){return ue}}),Object.defineProperty(ym,"FormatTypes",{enumerable:!0,get:function(){return ne}}),Object.defineProperty(ym,"Fragment",{enumerable:!0,get:function(){return ae}}),Object.defineProperty(ym,"FunctionFragment",{enumerable:!0,get:function(){return de}}),Object.defineProperty(ym,"Indexed",{enumerable:!0,get:function(){return Ur}}),Object.defineProperty(ym,"Interface",{enumerable:!0,get:function(){return Kr}}),Object.defineProperty(ym,"LogDescription",{enumerable:!0,get:function(){return Lr}}),Object.defineProperty(ym,"ParamType",{enumerable:!0,get:function(){return oe}}),Object.defineProperty(ym,"TransactionDescription",{enumerable:!0,get:function(){return Dr}}),Object.defineProperty(ym,"getAddress",{enumerable:!0,get:function(){return Be}}),Object.defineProperty(ym,"getCreate2Address",{enumerable:!0,get:function(){return je}}),Object.defineProperty(ym,"getContractAddress",{enumerable:!0,get:function(){return De}}),Object.defineProperty(ym,"getIcapAddress",{enumerable:!0,get:function(){return Le}}),Object.defineProperty(ym,"isAddress",{enumerable:!0,get:function(){return Fe}});var Am=bm(o("G6hN9"));ym.base64=Am,Object.defineProperty(ym,"base58",{enumerable:!0,get:function(){return Oi}});l=o("3Yhqu");Object.defineProperty(ym,"arrayify",{enumerable:!0,get:function(){return l.arrayify}}),Object.defineProperty(ym,"concat",{enumerable:!0,get:function(){return l.concat}}),Object.defineProperty(ym,"hexConcat",{enumerable:!0,get:function(){return l.hexConcat}}),Object.defineProperty(ym,"hexDataSlice",{enumerable:!0,get:function(){return l.hexDataSlice}}),Object.defineProperty(ym,"hexDataLength",{enumerable:!0,get:function(){return l.hexDataLength}}),Object.defineProperty(ym,"hexlify",{enumerable:!0,get:function(){return l.hexlify}}),Object.defineProperty(ym,"hexStripZeros",{enumerable:!0,get:function(){return l.hexStripZeros}}),Object.defineProperty(ym,"hexValue",{enumerable:!0,get:function(){return l.hexValue}}),Object.defineProperty(ym,"hexZeroPad",{enumerable:!0,get:function(){return l.hexZeroPad}}),Object.defineProperty(ym,"isBytes",{enumerable:!0,get:function(){return l.isBytes}}),Object.defineProperty(ym,"isBytesLike",{enumerable:!0,get:function(){return l.isBytesLike}}),Object.defineProperty(ym,"isHexString",{enumerable:!0,get:function(){return l.isHexString}}),Object.defineProperty(ym,"joinSignature",{enumerable:!0,get:function(){return l.joinSignature}}),Object.defineProperty(ym,"zeroPad",{enumerable:!0,get:function(){return l.zeroPad}}),Object.defineProperty(ym,"splitSignature",{enumerable:!0,get:function(){return l.splitSignature}}),Object.defineProperty(ym,"stripZeros",{enumerable:!0,get:function(){return l.stripZeros}}),Object.defineProperty(ym,"_TypedDataEncoder",{enumerable:!0,get:function(){return wr.TypedDataEncoder}}),Object.defineProperty(ym,"dnsEncode",{enumerable:!0,get:function(){return yr}}),Object.defineProperty(ym,"hashMessage",{enumerable:!0,get:function(){return vr}}),Object.defineProperty(ym,"id",{enumerable:!0,get:function(){return Gt}}),Object.defineProperty(ym,"isValidName",{enumerable:!0,get:function(){return gr}}),Object.defineProperty(ym,"namehash",{enumerable:!0,get:function(){return mr}}),Object.defineProperty(ym,"defaultPath",{enumerable:!0,get:function(){return eo}}),Object.defineProperty(ym,"entropyToMnemonic",{enumerable:!0,get:function(){return io}}),Object.defineProperty(ym,"getAccountPath",{enumerable:!0,get:function(){return so}}),Object.defineProperty(ym,"HDNode",{enumerable:!0,get:function(){return to}}),Object.defineProperty(ym,"isValidMnemonic",{enumerable:!0,get:function(){return oo}}),Object.defineProperty(ym,"mnemonicToEntropy",{enumerable:!0,get:function(){return no}}),Object.defineProperty(ym,"mnemonicToSeed",{enumerable:!0,get:function(){return ro}}),Object.defineProperty(ym,"getJsonWalletAddress",{enumerable:!0,get:function(){return Co}}),Object.defineProperty(ym,"keccak256",{enumerable:!0,get:function(){return _e}});h=o("2rINa");Object.defineProperty(ym,"Logger",{enumerable:!0,get:function(){return h.Logger}}),Object.defineProperty(ym,"computeHmac",{enumerable:!0,get:function(){return Li}}),Object.defineProperty(ym,"ripemd160",{enumerable:!0,get:function(){return Mi}}),Object.defineProperty(ym,"sha256",{enumerable:!0,get:function(){return Bi}}),Object.defineProperty(ym,"sha512",{enumerable:!0,get:function(){return Fi}}),Object.defineProperty(ym,"solidityKeccak256",{enumerable:!0,get:function(){return Iu}}),Object.defineProperty(ym,"solidityPack",{enumerable:!0,get:function(){return Nu}}),Object.defineProperty(ym,"soliditySha256",{enumerable:!0,get:function(){return Tu}}),Object.defineProperty(ym,"randomBytes",{enumerable:!0,get:function(){return lo}}),Object.defineProperty(ym,"shuffled",{enumerable:!0,get:function(){return ho}}),Object.defineProperty(ym,"checkProperties",{enumerable:!0,get:function(){return L.checkProperties}}),Object.defineProperty(ym,"deepCopy",{enumerable:!0,get:function(){return L.deepCopy}}),Object.defineProperty(ym,"defineReadOnly",{enumerable:!0,get:function(){return L.defineReadOnly}}),Object.defineProperty(ym,"getStatic",{enumerable:!0,get:function(){return L.getStatic}}),Object.defineProperty(ym,"resolveProperties",{enumerable:!0,get:function(){return L.resolveProperties}}),Object.defineProperty(ym,"shallowCopy",{enumerable:!0,get:function(){return L.shallowCopy}});var Em=bm(o("7ZdUu"));function xm(e){return e.startsWith("0x")?e.toLowerCase():e}function Sm(e){return e.chainId?a.utils.hexValue(e.chainId):null}ym.RLP=Em,Object.defineProperty(ym,"computePublicKey",{enumerable:!0,get:function(){return Hn}}),Object.defineProperty(ym,"recoverPublicKey",{enumerable:!0,get:function(){return Wn}}),Object.defineProperty(ym,"SigningKey",{enumerable:!0,get:function(){return Gn}}),Object.defineProperty(ym,"formatBytes32String",{enumerable:!0,get:function(){return St}}),Object.defineProperty(ym,"nameprep",{enumerable:!0,get:function(){return Ft}}),Object.defineProperty(ym,"parseBytes32String",{enumerable:!0,get:function(){return Ct}}),Object.defineProperty(ym,"_toEscapedUtf8String",{enumerable:!0,get:function(){return bt}}),Object.defineProperty(ym,"toUtf8Bytes",{enumerable:!0,get:function(){return vt}}),Object.defineProperty(ym,"toUtf8CodePoints",{enumerable:!0,get:function(){return xt}}),Object.defineProperty(ym,"toUtf8String",{enumerable:!0,get:function(){return Et}}),Object.defineProperty(ym,"Utf8ErrorFuncs",{enumerable:!0,get:function(){return mt}}),Object.defineProperty(ym,"accessListify",{enumerable:!0,get:function(){return ii}}),Object.defineProperty(ym,"computeAddress",{enumerable:!0,get:function(){return ei}}),Object.defineProperty(ym,"parseTransaction",{enumerable:!0,get:function(){return li}}),Object.defineProperty(ym,"recoverAddress",{enumerable:!0,get:function(){return ti}}),Object.defineProperty(ym,"serializeTransaction",{enumerable:!0,get:function(){return ui}}),Object.defineProperty(ym,"TransactionTypes",{enumerable:!0,get:function(){return Vn}}),Object.defineProperty(ym,"commify",{enumerable:!0,get:function(){return Fu}}),Object.defineProperty(ym,"formatEther",{enumerable:!0,get:function(){return ju}}),Object.defineProperty(ym,"parseEther",{enumerable:!0,get:function(){return Uu}}),Object.defineProperty(ym,"formatUnits",{enumerable:!0,get:function(){return Lu}}),Object.defineProperty(ym,"parseUnits",{enumerable:!0,get:function(){return Du}}),Object.defineProperty(ym,"verifyMessage",{enumerable:!0,get:function(){return Pi.verifyMessage}}),Object.defineProperty(ym,"verifyTypedData",{enumerable:!0,get:function(){return Pi.verifyTypedData}}),Object.defineProperty(ym,"_fetchData",{enumerable:!0,get:function(){return ns._fetchData}}),Object.defineProperty(ym,"fetchJson",{enumerable:!0,get:function(){return ns.fetchJson}}),Object.defineProperty(ym,"poll",{enumerable:!0,get:function(){return ns.poll}}),Object.defineProperty(ym,"SupportedAlgorithm",{enumerable:!0,get:function(){return Ni}}),Object.defineProperty(ym,"UnicodeNormalizationForm",{enumerable:!0,get:function(){return ht}}),Object.defineProperty(ym,"Utf8ErrorReason",{enumerable:!0,get:function(){return dt}});const Cm=id();function km(e){const{privateKey:t}=e;return new a.Wallet(t)}function _m(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];throw Error("[Immer] minified error nr: "+e+(r.length?" "+r.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function Pm(e){return!!e&&!!e[py]}function Rm(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var r=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return r===Object||"function"==typeof r&&Function.toString.call(r)===gy}(e)||Array.isArray(e)||!!e[dy]||!!e.constructor[dy]||Fm(e)||Lm(e))}function Om(e,t,r){void 0===r&&(r=!1),0===Nm(e)?(r?Object.keys:my)(e).forEach((function(n){r&&"symbol"==typeof n||t(n,e[n],e)})):e.forEach((function(r,n){return t(n,r,e)}))}function Nm(e){var t=e[py];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:Fm(e)?2:Lm(e)?3:0}function Im(e,t){return 2===Nm(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function Tm(e,t){return 2===Nm(e)?e.get(t):e[t]}function Mm(e,t,r){var n=Nm(e);2===n?e.set(t,r):3===n?(e.delete(t),e.add(r)):e[t]=r}function Bm(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function Fm(e){return cy&&e instanceof Map}function Lm(e){return ly&&e instanceof Set}function Dm(e){return e.o||e.t}function jm(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=yy(e);delete t[py];for(var r=my(t),n=0;n<r.length;n++){var i=r[n],o=t[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(t[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:e[i]})}return Object.create(Object.getPrototypeOf(e),t)}function Um(e,t){return void 0===t&&(t=!1),qm(e)||Pm(e)||!Rm(e)||(Nm(e)>1&&(e.set=e.add=e.clear=e.delete=zm),Object.freeze(e),t&&Om(e,(function(e,t){return Um(t,!0)}),!0)),e}function zm(){_m(2)}function qm(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function Km(e){var t=vy[e];return t||_m(18,e),t}function Gm(){return ay}function Wm(e,t){t&&(Km("Patches"),e.u=[],e.s=[],e.v=t)}function Hm(e){Jm(e),e.p.forEach(Ym),e.p=null}function Jm(e){e===ay&&(ay=e.l)}function Vm(e){return ay={p:[],l:ay,h:e,m:!0,_:0}}function Ym(e){var t=e[py];0===t.i||1===t.i?t.j():t.O=!0}function Qm(e,t){t._=t.p.length;var r=t.p[0],n=void 0!==e&&e!==r;return t.h.g||Km("ES5").S(t,e,n),n?(r[py].P&&(Hm(t),_m(4)),Rm(e)&&(e=Zm(t,e),t.l||$m(t,e)),t.u&&Km("Patches").M(r[py].t,e,t.u,t.s)):e=Zm(t,r,[]),Hm(t),t.u&&t.v(t.u,t.s),e!==fy?e:void 0}function Zm(e,t,r){if(qm(t))return t;var n=t[py];if(!n)return Om(t,(function(i,o){return Xm(e,n,t,i,o,r)}),!0),t;if(n.A!==e)return t;if(!n.P)return $m(e,n.t,!0),n.t;if(!n.I){n.I=!0,n.A._--;var i=4===n.i||5===n.i?n.o=jm(n.k):n.o;Om(3===n.i?new Set(i):i,(function(t,o){return Xm(e,n,i,t,o,r)})),$m(e,i,!1),r&&e.u&&Km("Patches").R(n,r,e.u,e.s)}return n.o}function Xm(e,t,r,n,i,o){if(Pm(i)){var s=Zm(e,i,o&&t&&3!==t.i&&!Im(t.D,n)?o.concat(n):void 0);if(Mm(r,n,s),!Pm(s))return;e.m=!1}if(Rm(i)&&!qm(i)){if(!e.h.F&&e._<1)return;Zm(e,i),t&&t.A.l||$m(e,i)}}function $m(e,t,r){void 0===r&&(r=!1),e.h.F&&e.m&&Um(t,r)}function ey(e,t){var r=e[py];return(r?Dm(r):e)[t]}function ty(e,t){if(t in e)for(var r=Object.getPrototypeOf(e);r;){var n=Object.getOwnPropertyDescriptor(r,t);if(n)return n;r=Object.getPrototypeOf(r)}}function ry(e){e.P||(e.P=!0,e.l&&ry(e.l))}function ny(e){e.o||(e.o=jm(e.t))}function iy(e,t,r){var n=Fm(t)?Km("MapSet").N(t,r):Lm(t)?Km("MapSet").T(t,r):e.g?function(e,t){var r=Array.isArray(e),n={i:r?1:0,A:t?t.A:Gm(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},i=n,o=wy;r&&(i=[n],o=by);var s=Proxy.revocable(i,o),a=s.revoke,u=s.proxy;return n.k=u,n.j=a,u}(t,r):Km("ES5").J(t,r);return(r?r.A:Gm()).p.push(n),n}function oy(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return jm(e)}Object.assign(window,{emitter:Cm});var sy,ay,uy="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),cy="undefined"!=typeof Map,ly="undefined"!=typeof Set,hy="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,fy=uy?Symbol.for("immer-nothing"):((sy={})["immer-nothing"]=!0,sy),dy=uy?Symbol.for("immer-draftable"):"__$immer_draftable",py=uy?Symbol.for("immer-state"):"__$immer_state",gy=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),my="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,yy=Object.getOwnPropertyDescriptors||function(e){var t={};return my(e).forEach((function(r){t[r]=Object.getOwnPropertyDescriptor(e,r)})),t},vy={},wy={get:function(e,t){if(t===py)return e;var r,n,i,o=Dm(e);if(!Im(o,t))return r=e,(i=ty(o,t))?"value"in i?i.value:null===(n=i.get)||void 0===n?void 0:n.call(r.k):void 0;var s=o[t];return e.I||!Rm(s)?s:s===ey(e.t,t)?(ny(e),e.o[t]=iy(e.A.h,s,e)):s},has:function(e,t){return t in Dm(e)},ownKeys:function(e){return Reflect.ownKeys(Dm(e))},set:function(e,t,r){var n=ty(Dm(e),t);if(null==n?void 0:n.set)return n.set.call(e.k,r),!0;if(!e.P){var i=ey(Dm(e),t),o=null==i?void 0:i[py];if(o&&o.t===r)return e.o[t]=r,e.D[t]=!1,!0;if(Bm(r,i)&&(void 0!==r||Im(e.t,t)))return!0;ny(e),ry(e)}return e.o[t]===r&&"number"!=typeof r&&(void 0!==r||t in e.o)||(e.o[t]=r,e.D[t]=!0,!0)},deleteProperty:function(e,t){return void 0!==ey(e.t,t)||t in e.t?(e.D[t]=!1,ny(e),ry(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var r=Dm(e),n=Reflect.getOwnPropertyDescriptor(r,t);return n?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:n.enumerable,value:r[t]}:n},defineProperty:function(){_m(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){_m(12)}},by={};Om(wy,(function(e,t){by[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),by.deleteProperty=function(e,t){return by.set.call(this,e,t,void 0)},by.set=function(e,t,r){return wy.set.call(this,e[0],t,r,e[0])};var Ay=function(){function e(e){var t=this;this.g=hy,this.F=!0,this.produce=function(e,r,n){if("function"==typeof e&&"function"!=typeof r){var i=r;r=e;var o=t;return function(e){var t=this;void 0===e&&(e=i);for(var n=arguments.length,s=Array(n>1?n-1:0),a=1;a<n;a++)s[a-1]=arguments[a];return o.produce(e,(function(e){var n;return(n=r).call.apply(n,[t,e].concat(s))}))}}var s;if("function"!=typeof r&&_m(6),void 0!==n&&"function"!=typeof n&&_m(7),Rm(e)){var a=Vm(t),u=iy(t,e,void 0),c=!0;try{s=r(u),c=!1}finally{c?Hm(a):Jm(a)}return"undefined"!=typeof Promise&&s instanceof Promise?s.then((function(e){return Wm(a,n),Qm(e,a)}),(function(e){throw Hm(a),e})):(Wm(a,n),Qm(s,a))}if(!e||"object"!=typeof e){if(void 0===(s=r(e))&&(s=e),s===fy&&(s=void 0),t.F&&Um(s,!0),n){var l=[],h=[];Km("Patches").M(e,s,l,h),n(l,h)}return s}_m(21,e)},this.produceWithPatches=function(e,r){if("function"==typeof e)return function(r){for(var n=arguments.length,i=Array(n>1?n-1:0),o=1;o<n;o++)i[o-1]=arguments[o];return t.produceWithPatches(r,(function(t){return e.apply(void 0,[t].concat(i))}))};var n,i,o=t.produce(e,r,(function(e,t){n=e,i=t}));return"undefined"!=typeof Promise&&o instanceof Promise?o.then((function(e){return[e,n,i]})):[o,n,i]},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){Rm(e)||_m(8),Pm(e)&&(e=function(e){return Pm(e)||_m(22,e),function e(t){if(!Rm(t))return t;var r,n=t[py],i=Nm(t);if(n){if(!n.P&&(n.i<4||!Km("ES5").K(n)))return n.t;n.I=!0,r=oy(t,i),n.I=!1}else r=oy(t,i);return Om(r,(function(t,i){n&&Tm(n.t,t)===i||Mm(r,t,e(i))})),3===i?new Set(r):r}(e)}(e));var t=Vm(this),r=iy(this,e,void 0);return r[py].C=!0,Jm(t),r},t.finishDraft=function(e,t){var r=(e&&e[py]).A;return Wm(r,t),Qm(void 0,r)},t.setAutoFreeze=function(e){this.F=e},t.setUseProxies=function(e){e&&!hy&&_m(20),this.g=e},t.applyPatches=function(e,t){var r;for(r=t.length-1;r>=0;r--){var n=t[r];if(0===n.path.length&&"replace"===n.op){e=n.value;break}}r>-1&&(t=t.slice(r+1));var i=Km("Patches").$;return Pm(e)?i(e,t):this.produce(e,(function(e){return i(e,t)}))},e}(),Ey=new Ay,xy=Ey.produce,Sy=(Ey.produceWithPatches.bind(Ey),Ey.setAutoFreeze.bind(Ey),Ey.setUseProxies.bind(Ey),Ey.applyPatches.bind(Ey),Ey.createDraft.bind(Ey),Ey.finishDraft.bind(Ey),xy);function Cy(e){return Sy(e,(e=>{var t;e.privateKey="<privateKey>",e.mnemonic=(t=e.mnemonic)?{phrase:"<phrase>",path:t.path}:null}))}function ky(e){return Sy(e,(e=>{e.walletContainer.wallets=e.walletContainer.wallets.map((e=>Cy(e)))}))}function _y(e){return e.map((e=>ky(e)))}let Py;var Ry;function Oy(e){return{mnemonic:e.mnemonic,privateKey:e.privateKey,address:e.address,name:e instanceof a.Wallet?null:e.name}}function Ny(e){return{mnemonic:e.mnemonic,privateKey:e.privateKey,address:e.address,name:null}}function Iy(e){const{address:t,privateKey:r,mnemonic:n,name:i}=e;if(t&&r)return{privateKey:r,address:t,mnemonic:n||null,name:i||null};if(r)return Ny(new a.Wallet(r));if(n){return Ny(a.Wallet.fromMnemonic(n.phrase,n.path))}return Ny(a.Wallet.createRandom())}(Ry=Py||(Py={}))[Ry.privateKey=0]="privateKey",Ry[Ry.mnemonic=1]="mnemonic";let Ty=dy;class My{getFirstWallet(){return this.wallets[0]}getMnemonic(){return this.seedType===Py.privateKey?null:this.getFirstWallet().mnemonic}addWallet(e){const t=this.getMnemonic();if(t&&(!e.mnemonic||e.mnemonic.phrase!==t.phrase))throw new Error("Added wallet must have the same mnemonic as other wallets in the WalletContainer");this.wallets.some((({address:t})=>t===e.address))||this.wallets.push(e)}removeWallet(e){const t=this.wallets.findIndex((t=>t.address.toLowerCase()===e.toLowerCase()));-1!==t&&this.wallets.splice(t,1)}getWalletByAddress(e){return this.wallets.find((t=>xm(t.address)===xm(e)))||null}toPlainObject(){return{...this,wallets:this.wallets.map((e=>Oy(e)))}}constructor(){r(Ku)(this,Ty,!0)}}class By extends My{static async create({wallets:e,encryptionKey:t}){const r=new By(e),{mnemonic:n}=r.getFirstWallet();if(n){const e=await $f(t,n.phrase);r.wallets.forEach((t=>{t.mnemonic&&(t.mnemonic.phrase=e)}))}return r}constructor(e){super(),r(Ku)(this,"seedType",Py.mnemonic),e&&e.length?this.wallets=e.map((e=>{if(!e.mnemonic)throw new Error("Mnemonic container is expected to have a wallet with a mnemonic");return Iy(e)})):this.wallets=[Iy({})]}}class Fy extends My{addWallet(e){throw new Error("PrivateKeyWalletContainer cannot have multiple wallets")}constructor(e){if(super(),r(Ku)(this,"seedType",Py.privateKey),!e||e.length>1)throw new Error(`Wallets array is expected to have exactly one element, instead got: ${null==e?void 0:e.length}`);this.wallets=e.map((e=>{if(!e.privateKey)throw new Error("PrivateKey container is expected to have a wallet with a privateKey");return Iy(e)}))}}function Ly(e){return a.utils.getAddress(e)}a.utils.defaultPath;function Dy(e){var t;const r=null===(t=e.match(/m\/44'\/60'\/0'\/0\/(\d+)/))||void 0===t?void 0:t[1];return r?Number(r):0}function jy(e){return"version"in e==!1}const Uy={1:e=>{if(!jy(e))throw new Error("Wrong entry version");return{...e,version:1,preferences:{}}},2:e=>{if(1!==(null==(t=e)?void 0:t.version))throw new Error("Wrong entry version");var t,r,n;return{...e,version:2,preferences:{},permissions:(r=e.permissions,n=([e,t])=>[e,{addresses:"string"==typeof t?[t]:t}],Object.fromEntries(Object.entries(r).map(n)))}}},zy=e=>(jy(e)?0:e.version)+1;function qy(e){let t=e,r=zy(t);for(;r in Uy;)t=Uy[r](t),r=zy(t);return t}function Ky(e,t){if(t.seedType===Py.privateKey)return"";const r=e=>`Wallet Group #${e}`;if(!e)return r(1);const n=e.walletManager.groups.filter((e=>e.walletContainer.seedType===Py.mnemonic));function i(e){return-1!==n.findIndex((t=>t.name===e))}let o=r(e.walletManager.internalMnemonicGroupCounter+1);for(;i(o);)o=`${o} (2)`;return o}function Gy({name:e,walletContainer:t}){return{id:Df(),walletContainer:t,lastBackedUp:null,name:e}}function Wy(e,{minLength:t=1}={}){return"string"!=typeof e?"Must be a string":e.length<t?"Must have at least one character":e.length>80?"Must be shorter than 80 characters":"debug-error-name"===e?"Debug: intentional debugging error":null}function Hy(e,t){for(let r=0;r<e.length;r++){const n=e[r];if(t(n))return[r,n]}return[-1,void 0]}class Jy{static verifyStateIntegrity(e){return Sy(e,(e=>{!function(e){const{currentAddress:t}=e.walletManager;if(t){var r;const n=xm(t);e.walletManager.groups.some((e=>e.walletContainer.wallets.some((e=>xm(e.address)===n))))||(e.walletManager.currentAddress=(null===(r=Jy.getFirstWallet(e))||void 0===r?void 0:r.address)||null)}}(e)}))}static getFirstWallet(e){var t;return null===(t=e.walletManager.groups[0])||void 0===t?void 0:t.walletContainer.getFirstWallet()}static getWalletByAddress(e,t){for(const r of e.walletManager.groups){const e=r.walletContainer.getWalletByAddress(t);if(e)return e}return null}static createOrUpdateRecord(e,t){if(!e){const r=t.walletContainer.seedType===Py.mnemonic;return{version:2,walletManager:{groups:[Gy({name:Ky(e,t.walletContainer),walletContainer:t.walletContainer})],currentAddress:t.walletContainer.getFirstWallet().address,internalMnemonicGroupCounter:r?1:0},transactions:[],permissions:{},preferences:{}}}return Sy(e,(r=>{const{walletContainer:n}=t,{seedType:i}=n;if(i===Py.privateKey){const{privateKey:t}=n.getFirstWallet();if(r.walletManager.groups.find((e=>e.walletContainer.getFirstWallet().privateKey===t)))return r;r.walletManager.internalMnemonicGroupCounter+=1,r.walletManager.groups.push(Gy({walletContainer:n,name:Ky(e,n)}))}else{if(i!==Py.mnemonic)throw new Error("Unknown SeedType");{const t=n.getMnemonic();if(!t)throw new Error("Mnemonic not found");const i=r.walletManager.groups.find((e=>{var r;return(null===(r=e.walletContainer.getMnemonic())||void 0===r?void 0:r.phrase)===t.phrase}));i?(n.wallets.forEach((e=>{i.walletContainer.addWallet(e)})),i.walletContainer.wallets.sort(((e,t)=>{var r,n;return Dy((null===(r=e.mnemonic)||void 0===r?void 0:r.path)||"")-Dy((null===(n=t.mnemonic)||void 0===n?void 0:n.path)||"")}))):(r.walletManager.internalMnemonicGroupCounter+=1,r.walletManager.groups.push(Gy({walletContainer:n,name:Ky(e,n)})))}}}))}static async encryptRecord(e,t){return Qf(e,function(e){return Sy(e,(e=>{e.walletManager.groups=e.walletManager.groups.map((e=>({...e,walletContainer:e.walletContainer.toPlainObject()})))}))}(t))}static async decryptRecord(e,t){return await Zf(e,t)}static async decryptAndRestoreRecord(e,t){const r=qy(await Zf(e,t));return r.walletManager.groups=r.walletManager.groups.map((e=>{const{seedType:t,wallets:r}=e.walletContainer;if(t===Py.mnemonic)e.walletContainer=new By(r);else{if(t!==Py.privateKey)throw new Error(`Unexpected SeedType: ${t}`);e.walletContainer=new Fy(r)}return e})),Jy.verifyStateIntegrity(r)}static async getRecoveryPhrase(e,{groupId:t,encryptionKey:r}){const n=e.walletManager.groups.find((e=>e.id===t));if(!n)throw new Error("Wallet Group not found");const i=n.walletContainer.getMnemonic();if(!i)throw new Error(`Missing mnemonic from wallet object for ${t}`);if(i.phrase.split(" ").length>3)return i;const o=await td(r,i.phrase);return{...i,phrase:o}}static async getPrivateKey(e,{address:t}){let r=null;for(const n of e.walletManager.groups){const e=n.walletContainer.getWalletByAddress(t);if(e){r=e;break}}if(!r)throw new Error("Wallet with given address not found");return r.privateKey}static setCurrentAddress(e,{address:t}){const r=Ly(t);return Sy(e,(e=>{e.walletManager.currentAddress=r}))}static renameWalletGroup(e,{groupId:t,name:r}){return Sy(e,(e=>{const n=e.walletManager.groups.find((e=>e.id===t));if(!n)throw new Error("Group not found");const i=Wy(r);if(i)throw new Error(i);n.name=r}))}static removeWalletGroup(e,{groupId:t}){return Sy(e,(e=>{const[r,n]=Hy(e.walletManager.groups,(e=>e.id===t));if(!n)throw new Error("Group not found");const{currentAddress:i}=e.walletManager,o=n.walletContainer.wallets.some((e=>e.address===i));if(e.walletManager.groups.splice(r,1),o){var s;const t=null===(s=e.walletManager.groups[0])||void 0===s?void 0:s.walletContainer.getFirstWallet().address;e.walletManager.currentAddress=t||null}}))}static removeAddress(e,{address:t}){return Sy(e,(e=>{const r=xm(t),[n,i]=Hy(e.walletManager.groups,(e=>e.walletContainer.wallets.some((e=>xm(e.address)===r))));if(!i)throw new Error("Group not found");const o=1===i.walletContainer.wallets.length;if(i.walletContainer.seedType===Py.mnemonic&&o)throw new Error("Removing last wallet from a wallet group is not allowed. You can remove the whole group");o?e.walletManager.groups.splice(n,1):i.walletContainer.removeWallet(t);const{currentAddress:s}=e.walletManager;var a;s&&r===xm(s)&&(e.walletManager.currentAddress=o?(null===(a=e.walletManager.groups[0])||void 0===a?void 0:a.walletContainer.getFirstWallet().address)||null:i.walletContainer.getFirstWallet().address)}))}static renameAddress(e,{address:t,name:r}){const n=Wy(r,{minLength:0});if(n)throw new Error(n);const i=xm(t);return Sy(e,(e=>{for(const t of e.walletManager.groups)for(const e of t.walletContainer.wallets)if(xm(e.address)===i)return void(e.name=r||null);throw new Error(`Wallet for ${t} not found`)}))}static addPermission(e,{address:t,origin:r}){return Sy(e,(e=>{var n;const i=null===(n=e.permissions[r])||void 0===n?void 0:n.addresses,o=new Set(i||[]);o.add(t);const s=Array.from(o);e.permissions[r]?e.permissions[r].addresses=s:e.permissions[r]={addresses:s}}))}static setChainForOrigin(e,{chain:t,origin:r}){return Sy(e,(e=>{if(!e.permissions[r])throw new Error(`Permission for ${r} not found`);e.permissions[r].chain=t.toString()}))}static getChainForOrigin(e,{origin:t}){var r;const n=null===(r=e.permissions[t])||void 0===r?void 0:r.chain;return il(n||"ethereum")}static removeAllOriginPermissions(e){return Sy(e,(e=>{e.permissions={}}))}static removePermission(e,{origin:t,address:r}){return Sy(e,(e=>{if(t in e.permissions==!1)throw new Error(`Record for ${t} not found`);const n=e.permissions[t],{addresses:i}=n;r&&i.length>1?function(e,t){const r=e.indexOf(t);-1!==r&&e.splice(r,1)}(i,r):n.chain?e.permissions[t].addresses=[]:delete e.permissions[t]}))}static getPreferences(e){const{preferences:t}=e;return{showNetworkSwitchShortcut:!0,...t}}static setPreference(e,{preferences:t}){return Sy(e,(e=>{Object.assign(e.preferences,t)}))}static setWalletNameFlag(e,{flag:t}){return Sy(e,(e=>{const{walletNameFlags:r}=e.preferences,n=new Set(r).add(t);e.preferences.walletNameFlags=Array.from(n)}))}static removeWalletNameFlag(e,{flag:t}){return Sy(e,(e=>{const{walletNameFlags:r}=e.preferences,n=new Set(r);n.delete(t),e.preferences.walletNameFlags=Array.from(n)}))}static updateLastBackedUp(e,{groupId:t,timestamp:r}){return Sy(e,(e=>{const n=e.walletManager.groups.find((e=>e.id===t));if(!n)throw new Error(`Group with id ${t} not found`);n.lastBackedUp=r}))}}class Vy extends Wu{async load(e){const t=await gf(e);this.isReady=!0,t&&this.setState(t),this.pendingReadyStateListeners.forEach((e=>e()))}async ready(){return new Promise((e=>{if(this.isReady)e();else{const t=()=>{!function(e,t){const r=e.indexOf(t);-1!==r&&e.splice(r,1)}(this.pendingReadyStateListeners,t),e()};this.pendingReadyStateListeners.push(t)}}))}async getSavedState(){return this.ready().then((()=>this.getState()))}constructor(e,t){super({...t}),this.load(e),this.isReady=!1,this.pendingReadyStateListeners=[],this.on("change",(t=>mf(e,t)))}}const Yy=new class extends Vy{async check(e,t){const r=this.getState()[e];if(!r)throw new Error(`Cannot read: record for ${e} not found`);return Jy.decryptRecord(t,r)}async read(e,t){const r=this.getState()[e];return r?await Jy.decryptAndRestoreRecord(t,r):null}async save(e,t,r){const n=await Jy.encryptRecord(t,r);this.setState((t=>Sy(t,(t=>{t[e]=n}))))}deleteMany(e){this.setState((t=>Sy(t,(t=>{for(const r of e)delete t[r]}))))}}("wallet",{});Object.assign(window,{walletStore:Yy});const Qy={origin:fd};class Zy{async syncWithWalletStore(){this.encryptionKey&&(await Yy.ready(),this.record=await Yy.read(this.id,this.encryptionKey),this.record&&this.emitter.emit("recordUpdated"))}async updateWalletStore(e){if(!this.encryptionKey)throw new Error("Cannot save pending wallet: encryptionKey is null");this.walletStore.save(this.id,this.encryptionKey,e)}async ready(){return this.walletStore.ready()}async getId(){return this.id}async userHeartbeat({context:e}){this.verifyInternalOrigin(e),Cm.emit("userActivity")}async verifyCredentials({params:{id:e,encryptionKey:t}}){await Yy.ready(),await Yy.check(e,t)}hasSeedPhraseEncryptionKey(){return Boolean(this.seedPhraseEncryptionKey)}removeSeedPhraseEncryptionKey(){this.seedPhraseEncryptionKey=null}setExpirationForSeedPhraseEncryptionKey(){clearTimeout(this.seedPhraseExpiryTimerId),this.seedPhraseExpiryTimerId=setTimeout((()=>{this&&this.removeSeedPhraseEncryptionKey()}),12e4)}async updateCredentials({params:{id:e,encryptionKey:t,seedPhraseEncryptionKey:r}}){this.id=e,this.encryptionKey=t,this.seedPhraseEncryptionKey=r,this.setExpirationForSeedPhraseEncryptionKey(),await Yy.ready(),await this.syncWithWalletStore()}async testMethod({params:e}){return new Promise((t=>setTimeout((()=>t(`Hello, curious developer. Your value is ${e}`)),1500)))}async uiGenerateMnemonic(){if(!this.seedPhraseEncryptionKey)throw new hf;return this.pendingWallet={groupId:null,walletContainer:await By.create({encryptionKey:this.seedPhraseEncryptionKey})},Cy(this.pendingWallet.walletContainer.getFirstWallet())}async uiImportPrivateKey({params:e}){return this.pendingWallet={groupId:null,walletContainer:new Fy([{privateKey:e}])},Cy(this.pendingWallet.walletContainer.getFirstWallet())}async uiImportSeedPhrase({params:e}){if(!this.seedPhraseEncryptionKey)throw new hf;return this.pendingWallet={groupId:null,walletContainer:await By.create({wallets:e.map((e=>({mnemonic:e}))),encryptionKey:this.seedPhraseEncryptionKey})},Cy(this.pendingWallet.walletContainer.getFirstWallet())}async getRecoveryPhrase({params:{groupId:e},context:t}){if(this.verifyInternalOrigin(t),this.ensureRecord(this.record),!this.seedPhraseEncryptionKey)throw new hf;return await Jy.getRecoveryPhrase(this.record,{groupId:e,encryptionKey:this.seedPhraseEncryptionKey})}async verifyRecoveryPhrase({params:{groupId:e,value:t},context:r}){if(this.verifyInternalOrigin(r),this.ensureRecord(this.record),!this.seedPhraseEncryptionKey)throw new hf;return(await Jy.getRecoveryPhrase(this.record,{groupId:e,encryptionKey:this.seedPhraseEncryptionKey})).phrase===t}async getPrivateKey({params:{address:e},context:t}){if(this.verifyInternalOrigin(t),this.ensureRecord(this.record),!this.seedPhraseEncryptionKey)throw new hf;return await Jy.getPrivateKey(this.record,{address:e})}async verifyPrivateKey({params:{address:e,value:t},context:r}){if(this.verifyInternalOrigin(r),this.ensureRecord(this.record),!this.seedPhraseEncryptionKey)throw new hf;return await Jy.getPrivateKey(this.record,{address:e})===t}async uiGetCurrentWallet({context:e}){if(this.verifyInternalOrigin(e),!this.id)return null;const t=this.readCurrentAddress();if(this.record&&t){const e=Jy.getWalletByAddress(this.record,t)||Jy.getFirstWallet(this.record);return e?Cy(e):null}return null}async uiGetWalletByAddress({context:e,params:{address:t}}){if(this.verifyInternalOrigin(e),!this.record)throw new lf;if(!t)throw new Error("Ilegal argument: address is required for this method");const r=Jy.getWalletByAddress(this.record,t);return r?Cy(r):null}async savePendingWallet(){if(!this.pendingWallet)throw new Error("Cannot save pending wallet: pendingWallet is null");if(!this.encryptionKey)throw new Error("Cannot save pending wallet: encryptionKey is null");this.record=Jy.createOrUpdateRecord(this.record,this.pendingWallet),this.pendingWallet=null,this.seedPhraseEncryptionKey=null,this.updateWalletStore(this.record)}async acceptOrigin(e,t){this.ensureRecord(this.record),this.record=Jy.addPermission(this.record,{address:t,origin:e}),this.updateWalletStore(this.record),this.emitter.emit("permissionsUpdated")}async removeAllOriginPermissions({context:e}){this.verifyInternalOrigin(e),this.ensureRecord(this.record),this.record=Jy.removeAllOriginPermissions(this.record),this.updateWalletStore(this.record),this.emitter.emit("permissionsUpdated")}async removePermission({context:e,params:{origin:t,address:r}}){this.verifyInternalOrigin(e),this.ensureRecord(this.record),this.record=Jy.removePermission(this.record,{origin:t,address:r}),this.updateWalletStore(this.record)}allowedOrigin(e,t){var r,n;if(!e||!e.origin)throw new Error("This method requires context");return e.origin===hd||((null===(n=null===(r=this.record)||void 0===r?void 0:r.permissions[e.origin])||void 0===n?void 0:n.addresses.includes(t))||!1)}async hasPermission({params:{address:e,origin:t},context:r}){var n,i;return this.verifyInternalOrigin(r),(null===(i=null===(n=this.record)||void 0===n?void 0:n.permissions[t])||void 0===i?void 0:i.addresses.includes(e))||!1}async getOriginPermissions({context:e}){return this.verifyInternalOrigin(e),this.ensureRecord(this.record),this.record.permissions}async setCurrentAddress({params:{address:e},context:t}){this.verifyInternalOrigin(t),this.ensureRecord(this.record),this.record=Jy.setCurrentAddress(this.record,{address:e}),this.updateWalletStore(this.record);const{currentAddress:r}=this.record.walletManager;this.emitter.emit("currentAddressChange",[r].filter(Hu))}readCurrentAddress(){var e;return(null===(e=this.record)||void 0===e?void 0:e.walletManager.currentAddress)||null}ensureCurrentAddress(){const e=this.readCurrentAddress();if(!e)throw new Error("Wallet is not initialized");return e}ensureRecord(e){if(!e)throw new lf}verifyInternalOrigin(e){if((null==e?void 0:e.origin)!==hd&&(null==e?void 0:e.origin)!==fd)throw new sf}ensureStringOrigin(e){if(this.verifyInternalOrigin(e),"string"!=typeof e.origin)throw new Error("Origin must be a string")}async getCurrentAddress({context:e}){return this.verifyInternalOrigin(e),this.readCurrentAddress()}async uiGetWalletGroups({context:e}){var t;this.verifyInternalOrigin(e);const r=null===(t=this.record)||void 0===t?void 0:t.walletManager.groups;return r?_y(r):null}async uiGetWalletGroup({params:{groupId:e},context:t}){var r;this.verifyInternalOrigin(t);const n=null===(r=this.record)||void 0===r?void 0:r.walletManager.groups.find((t=>t.id===e));return n?ky(n):null}async removeWalletGroup({params:{groupId:e},context:t}){if(this.verifyInternalOrigin(t),!this.record)throw new lf;this.record=Jy.removeWalletGroup(this.record,{groupId:e}),this.updateWalletStore(this.record)}async renameWalletGroup({params:{groupId:e,name:t},context:r}){if(this.verifyInternalOrigin(r),!this.record)throw new lf;this.record=Jy.renameWalletGroup(this.record,{groupId:e,name:t}),this.updateWalletStore(this.record)}async renameAddress({params:{address:e,name:t},context:r}){if(this.verifyInternalOrigin(r),!this.record)throw new lf;this.record=Jy.renameAddress(this.record,{address:e,name:t}),this.updateWalletStore(this.record)}async removeAddress({params:{address:e},context:t}){this.verifyInternalOrigin(t),this.ensureRecord(this.record),this.record=Jy.removeAddress(this.record,{address:e}),this.updateWalletStore(this.record)}async updateLastBackedUp({params:{groupId:e},context:t}){if(this.verifyInternalOrigin(t),this.ensureRecord(this.record),!e)throw new Error("Must provide groupId");this.record=Jy.updateLastBackedUp(this.record,{groupId:e,timestamp:Date.now()}),this.updateWalletStore(this.record)}async getNoBackupCount({context:e}){return this.verifyInternalOrigin(e),this.ensureRecord(this.record),this.record.walletManager.groups.filter((e=>e.walletContainer.seedType===Py.mnemonic)).filter((e=>null==e.lastBackedUp)).length}async setPreference({context:e,params:{preferences:t}}){this.verifyInternalOrigin(e),this.ensureRecord(this.record),this.record=Jy.setPreference(this.record,{preferences:t}),this.updateWalletStore(this.record)}async getPreferences({context:e}){return this.verifyInternalOrigin(e),this.record?Jy.getPreferences(this.record):{}}async wallet_setWalletNameFlag({context:e,params:{flag:t,checked:r}}){this.verifyInternalOrigin(e),this.ensureRecord(this.record),this.record=r?Jy.setWalletNameFlag(this.record,{flag:t}):Jy.removeWalletNameFlag(this.record,{flag:t}),this.updateWalletStore(this.record)}async switchChain({params:e,context:t}){throw this.verifyInternalOrigin(t),new Error("switchChain is deprecated")}async switchChainForOrigin({params:{chain:e,origin:t},context:r}){this.verifyInternalOrigin(r),this.ensureRecord(this.record),this.setChainForOrigin(il(e),t)}getChainId(){throw new Error("Wallet.getChainId is deprecated. Use Wallet.getChainIdForOrigin")}async requestChainId({context:e}){throw new Error("requestChainId is deprecated")}async getChainIdForOrigin({origin:e}){if(!this.record)return"0x1";const t=Jy.getChainForOrigin(this.record,{origin:e});return(await $h.load()).getChainId(t)}async requestChainForOrigin({params:{origin:e},context:t}){this.verifyInternalOrigin(t),this.ensureRecord(this.record);return Jy.getChainForOrigin(this.record,{origin:e}).toString()}setChainId(e){throw new Error("setChainId is deprecated. Use setChainForOrigin instead")}setChainForOrigin(e,t){this.ensureRecord(this.record),this.record=Jy.setChainForOrigin(this.record,{chain:e,origin:t}),this.updateWalletStore(this.record),this.emitter.emit("chainChanged",e,t)}async getProvider(e){const t=await $h.load(),r=t.getRpcUrlInternal(t.getChainById(e));return new a.providers.JsonRpcProvider(r)}async getSigner(e){const t=this.readCurrentAddress();if(!this.record)throw new lf;const r=t?Jy.getWalletByAddress(this.record,t):null;if(!r)throw new Error("Wallet is not initialized");const n=await this.getProvider(e);return km(r).connect(n)}async sendTransaction(e,{context:t,transactionOrigin:n}){if(this.verifyInternalOrigin(t),!e.from)throw new Error('"from" field is missing from the transaction object. Send from current address?');const i=this.ensureCurrentAddress();if(xm(e.from)!==xm(i))throw new Error('transaction "from" field is different from currently selected address');const o=await this.getChainIdForOrigin({origin:n}),s=Sm(e);if(s&&o!==s)throw new Error("chainId in transaction object is different from current chainId");null==s&&(console.warn("chainId field is missing from transaction object"),e.chainId=o);const a=pd(e);md(a)||await wd(a);const u=await this.getSigner(o),c=await u.sendTransaction({...a,type:a.type||void 0}),l=(h=c,r(bd)(h,["r","s","v"]));var h;return Cm.emit("pendingTransactionCreated",l),l}async signAndSendTransaction({params:e,context:t}){this.verifyInternalOrigin(t),this.ensureStringOrigin(t);const[r,{origin:n}]=e;if(!r)throw new of;return this.sendTransaction(r,{context:t,transactionOrigin:n})}async signTypedData_v4({params:{typedData:e},context:t}){if(this.verifyInternalOrigin(t),!e)throw new of;const{chainId:r}=this.store.getState(),n=await this.getSigner(r),i=mm(e);return await n._signTypedData(i.domain,i.types,i.message)}async personalSign({params:[e],context:t}){if(this.verifyInternalOrigin(t),null==e)throw new of;const{chainId:r}=this.store.getState(),n=await this.getSigner(r),i=(0,ym.toUtf8String)(e);return await n.signMessage(i)}async getPendingTransactions({context:e}){var t;return this.verifyInternalOrigin(e),(null===(t=this.record)||void 0===t?void 0:t.transactions)||[]}async logout(){chrome.storage.local.clear()}constructor(e,t){r(Ku)(this,"seedPhraseExpiryTimerId",0),r(Ku)(this,"pendingWallet",null),this.store=new Wu({chainId:"0x1"}),this.emitter=id(),this.id=e,this.walletStore=Yy,this.encryptionKey=t,this.seedPhraseEncryptionKey=null,this.record=null,this.walletStore.ready().then((()=>{this.syncWithWalletStore()})),Object.assign(window,{encrypt:Qf,decrypt:Zf}),this.publicEthereumController=new Xy(this)}}class Xy{async eth_accounts({context:e}){const t=this.wallet.readCurrentAddress();return t&&this.wallet.allowedOrigin(e,t)?[t]:[]}async eth_requestAccounts({context:e}){const t=this.wallet.readCurrentAddress();if(t&&this.wallet.allowedOrigin(e,t))return[t];if(!(null==e?void 0:e.origin))throw new Error("This method requires origin");const{origin:r}=e;return new Promise(((t,n)=>{ld.open({route:"/requestAccounts",search:`?origin=${r}`,onResolve:async({address:n})=>{if(!n)throw new Error("Confirmation resolved with invalid arguments");const i=this.wallet.ensureCurrentAddress();xm(n)!==xm(i)&&await this.wallet.setCurrentAddress({params:{address:n},context:Qy}),this.wallet.acceptOrigin(r,n);const o=await this.eth_accounts({context:e});t(o)},onDismiss:()=>{n(new af("User Rejected the Request"))}})}))}async eth_chainId({context:e}){if(!e||!e.origin)throw new Error("Unknown sender origin");return this.wallet.getChainIdForOrigin({origin:e.origin})}async net_version({context:e}){const t=await this.eth_chainId({context:e});return String(parseInt(t))}async eth_sendTransaction({params:e,context:t}){const r=this.wallet.ensureCurrentAddress();if(!this.wallet.allowedOrigin(t,r))throw new sf;const n=e[0];if(!n)throw new of;return Object.assign(window,{transactionToSend:n}),new Promise(((e,r)=>{ld.open({route:"/sendTransaction",search:`?${new URLSearchParams({origin:t.origin,transaction:JSON.stringify(n)})}`,onResolve:t=>{e(t)},onDismiss:()=>{r(new uf)}})}))}async eth_signTypedData_v4({context:e,params:[t,r]}){const n=this.wallet.ensureCurrentAddress();if(!this.wallet.allowedOrigin(e,n))throw new sf;if(xm(t)!==xm(n))throw new Error("Address parameter is different from currently selected address");const i="string"==typeof r?r:JSON.stringify(r);return new Promise(((t,r)=>{ld.open({route:"/signMessage",search:`?${new URLSearchParams({origin:e.origin,typedData:i,method:"eth_signTypedData_v4"})}`,onResolve:e=>{t(e)},onDismiss:()=>{r(new uf)}})}))}async eth_signTypedData({context:e}){throw new cf("eth_signTypedData: Not Implemented")}async eth_sign({context:e}){throw new cf("eth_sign: Not Implemented")}async personal_sign({params:e,context:t}){if(!e.length)throw new of;const[r,n,i]=e,o=this.wallet.ensureCurrentAddress();if(n&&xm(n)!==xm(o))throw new Error("Address parameter is different from currently selected address");if(!this.wallet.allowedOrigin(t,o))throw new sf;return new Promise(((e,n)=>{ld.open({route:"/signMessage",search:`?${new URLSearchParams({origin:t.origin,message:r,method:"personal_sign"})}`,onResolve:t=>{e(t)},onDismiss:()=>{n(new uf)}})}))}async wallet_switchEthereumChain({params:e,context:t}){const r=this.wallet.readCurrentAddress();if(!r)throw new Error("Wallet is not initialized");if(!this.wallet.allowedOrigin(t,r))throw new sf;const{origin:n}=t,{chainId:i}=e[0],o=a.utils.hexValue(i);if(o===await this.wallet.getChainIdForOrigin({origin:n}))return null;const s=(await $h.load()).getChainById(o);return this.wallet.setChainForOrigin(s,n),null}async wallet_getWalletNameFlags({context:e}){return(await this.wallet.getPreferences({context:Qy})).walletNameFlags||[]}generatePermissionResponse(e){if((null==e?void 0:e[0])&&"eth_accounts"in e[0])return[{parentCapability:"eth_accounts"}];throw new of}getIsAllowedOrigin({context:e}){const t=this.wallet.readCurrentAddress();return!!t&&this.wallet.allowedOrigin(e,t)}async wallet_requestPermissions({context:e,params:t}){return await this.eth_requestAccounts({context:e}),this.generatePermissionResponse(t)}async wallet_getPermissions({context:e}){return this.getIsAllowedOrigin({context:e})?[{parentCapability:"eth_accounts"}]:[]}constructor(e){this.wallet=e}}const $y="temporary";async function ev({password:e,salt:t}){return await rd(`${t}:${e}`)}class tv extends(r(xf)){static async writeCurrentUser(e){await mf("currentUser",e)}static async readCurrentUser(){return gf("currentUser")}static async removeCurrentUser(){await yf("currentUser")}static async ensureUserAndWallet(){const e=await tv.readCurrentUser(),t=await Yy.getSavedState();e&&!(null==t?void 0:t[e.id])&&await tv.removeCurrentUser()}static async createUser(e){const t=nd({password:e});if(!t.valid)throw new Error(t.message);return{id:Df(36),salt:Jf()}}reset(){this.user=null,this.encryptionKey=null,this.wallet=new Zy($y,null),this.emit("reset")}async verifyPassword(e,t){const r=await ev({password:t,salt:e.id});try{return await this.wallet.verifyCredentials({params:{id:e.id,encryptionKey:r}}),!0}catch(e){return!1}}async login(e,t){if(!await this.verifyPassword(e,t))throw new Error("Incorrect password");await this.setNewUser(e,t,{isNewUser:!1})}async setNewUser(e,t,{isNewUser:r=!1}={}){this.user=e,this.isPendingNewUser=r,this.encryptionKey=await ev({salt:e.id,password:t});const n=await Vf(t,e.salt);await this.wallet.updateCredentials({params:{id:e.id,encryptionKey:this.encryptionKey,seedPhraseEncryptionKey:n}}),this.emit("authenticated")}getEncryptionKey(){return this.encryptionKey}getUser(){return this.user}getCurrentWallet(){return this.wallet}hasActivePasswordSession(){return this.wallet.hasSeedPhraseEncryptionKey()}expirePasswordSession(){this.wallet.removeSeedPhraseEncryptionKey()}async saveUserAndWallet(){if(!this.user||!this.wallet||this.wallet.id===$y)throw new Error("Cannot persist: invalid session state");await tv.writeCurrentUser(this.user),await this.wallet.savePendingWallet(),this.isPendingNewUser=!1;const e=await Yy.getSavedState();if(this.user){const{id:t}=this.user;Yy.deleteMany(Object.keys(e).filter((e=>e!==t)))}}logout(){return this.reset()}constructor(){super(),this.user=null,this.isPendingNewUser=!1,this.encryptionKey=null,this.wallet=new Zy($y,null)}}Object.assign(window,{getSHA256HexDigest:rd,Account:tv});class rv{async isAuthenticated(){return null!=this.account.getUser()}async getExistingUser(){const e=await tv.readCurrentUser();return e?{id:e.id}:null}async login({params:{user:e,password:t}}){const r=await tv.readCurrentUser();if(!r||r.id!==e.id)throw new Error(`User ${e.id} not found`);if(await this.account.verifyPassword(r,t))return await this.account.login(r,t),e;throw new Error("Incorrect password")}async hasActivePasswordSession(){return this.account.hasActivePasswordSession()}async createUser({params:{password:e}}){const t=await tv.createUser(e);return await this.account.setNewUser(t,e,{isNewUser:!0}),{id:t.id}}async saveUserAndWallet(){return this.account.saveUserAndWallet()}async isPendingNewUser(){return this.account.isPendingNewUser}async logout(){return this.account.logout()}constructor(e){this.account=e}}function nv(e,t,r){const n=e.findIndex((e=>e[r]===t[r]));-1!==n?e.splice(n,1,t):e.push(t)}class iv extends Wu{constructor(e){super(e),this.on("change",(e=>{mf("transactions",e)}))}}const ov="0x123123";class sv{async initialize(){var e;const t=null!==(e=await gf("transactions"))&&void 0!==e?e:[];this.transactionsStore=new iv(t),this.addListeners()}addListeners(){Cm.on("pendingTransactionCreated",(e=>{const t={transaction:e,hash:e.hash,timestamp:Date.now()};this.waitForTransaction(t),this.transactionsStore.setState((e=>Sy(e,(e=>{e.push(t)}))))}))}async waitForTransaction(e){const t=await $h.load(),{hash:r,transaction:n}=e,{chainId:i}=n,o=a.utils.hexValue(i),s=t.getRpcUrlInternal(t.getChainById(o)),u=new a.providers.JsonRpcProvider(s),c=await async function(e,t){if(e===ov){const e={blockHash:"0xe485aa7e58d3338909fdc77fc7445da5f552e260dc23bdfe285a2adbe54b4f64",blockNumber:31658369,byzantium:!0,confirmations:1,contractAddress:"",cumulativeGasUsed:{},effectiveGasPrice:{},from:"0x42b9dF65B219B3dD36FF330A4dD8f327A6Ada990",gasUsed:{},logs:[],logsBloom:"0x002000...",status:1,to:"0xd7F1Dd5D49206349CaE8b585fcB0Ce3D96f1696F",transactionHash:ov,transactionIndex:6,type:2};return new Promise((t=>setTimeout((()=>t(e)),6e3)))}return t.waitForTransaction(e)}(r,u);Cm.emit("transactionMined",c),this.upsertTransaction({...e,receipt:c})}upsertTransaction(e){this.transactionsStore.setState((t=>Sy(t,(t=>{nv(t,e,"hash")}))))}constructor(){this.transactionsStore=new iv([])}}Object.assign(window,{testAddTransaction:function(){Cm.emit("pendingTransactionCreated",{accessList:[],chainId:137,confirmations:0,data:"0x83d13e0100000000000...",from:"0x42b9dF65B219B3dD36FF330A4dD8f327A6Ada990",gasLimit:{},gasPrice:null,hash:ov,maxFeePerGas:{},maxPriorityFeePerGas:{},nonce:239,to:"0xd7F1Dd5D49206349CaE8b585fcB0Ce3D96f1696F",type:2,value:{}})}});let av=!1;class uv extends(r(xf)){async send(e,t){if(!(0,ef.isJsonRpcRequest)(e))return console.log("not a request:",e),Promise.reject("not a request");const r=await $h.load(),n=this.walletGetter(),i=await n.publicEthereumController.eth_chainId({context:t}),o=r.getChainById(i),s=r.getRpcUrlInternal(o);return fetch(s,{method:"post",body:JSON.stringify(e)}).then((e=>e.json())).then((e=>(this.emit("payload",e),e)),(t=>{const r=(0,ef.formatJsonRpcError)(e.id,t.message);return this.emit("payload",r),r}))}constructor(e){super(),this.walletGetter=e}}class cv{addListener(e,t){if("disconnect"===e)return this.listeners.onDisconnect.add(t),()=>{this.listeners.onDisconnect.delete(t)};throw new Error("Unsupported event")}register(e){var t,r;t=this.ports,r=e,t.includes(r)||t.push(r),e.onMessage.addListener(this.listener);const n=()=>{e.onMessage.removeListener(this.listener);for(const t of this.listeners.onDisconnect)t(e);this.unregister(e),e.onDisconnect.removeListener(n)};e.onDisconnect.addListener(n)}unregister(e){!function(e,t){const r=e.indexOf(t);-1!==r&&e.splice(r,1)}(this.ports,e)}getActivePorts(){return this.ports}addMessageHandler(e){this.handlers.push(e)}postMessage({portName:e,message:t}){const r=this.ports.find((t=>t.name===e));r&&r.postMessage(t)}constructor(){this.ports=[],this.handlers=[],this.listener=(e,t)=>{for(const r of this.handlers){if(r(t,e))break}},this.listeners={onDisconnect:new Set}}}s=o("iLNs9");function lv(e,t){const r=Object.getPrototypeOf(e);return Object.prototype.hasOwnProperty.call(e,t)||Object.prototype.hasOwnProperty.call(r,t)}function hv(e,t){const r=(0,ef.formatJsonRpcResult)(e,t);return void 0===r.result&&(r.result=null),r}function fv(e,t){return t&&"string"!=typeof t?{id:e,jsonrpc:"2.0",error:t}:(0,ef.formatJsonRpcError)(e,t)}function dv(e,t,r,n){if((0,ef.isJsonRpcPayload)(t)&&(0,ef.isJsonRpcRequest)(t)){const{method:i,params:o,id:s}=t;if(!lv(r,i)||"function"!=typeof r[i])return void e.postMessage(fv(s,new of(i?`Unsupported method: ${i}`:void 0)));r[i].call(r,{params:o,context:n}).then((e=>hv(s,e)),(e=>fv(s,"code"in e?e:e.message))).then((t=>{e.postMessage(t)}))}}function pv(e){var t,r;if(function(e){return!!e&&"origin"in e}(e.sender))return null===(t=e.sender)||void 0===t?void 0:t.origin;if(null===(r=e.sender)||void 0===r?void 0:r.url){return new URL(e.sender.url).origin}}function gv(e){var t,r;return{origin:pv(e),tabId:null===(t=e.sender)||void 0===t||null===(r=t.tab)||void 0===r?void 0:r.id}}function mv({controller:e,check:t}){return function(r,n){if(!t(r))return;const i=gv(r);return dv(r,n,e,i),!0}}s=o("iLNs9");function yv(e){return function(t,n){if(t.name!==`${r(s).runtime.id}/ethereum`)return;const i=gv(t);return(0,ef.isJsonRpcPayload)(n)&&(0,ef.isJsonRpcRequest)(n)&&Boolean(n.method)?(e.send(n,i).then((e=>{t.postMessage(e)})),!0):void 0}}function vv({account:e}){const t=[];function r(e){t.push(e.emitter.on("recordUpdated",(()=>{Cm.emit("accountsChanged")})),e.emitter.on("currentAddressChange",(()=>{Cm.emit("accountsChanged")})),e.emitter.on("permissionsUpdated",(()=>{Cm.emit("accountsChanged")})),e.emitter.on("chainChanged",(()=>{Cm.emit("chainChanged")})))}r(e.getCurrentWallet()),e.on("authenticated",(async()=>{Cm.emit("accountsChanged"),Cm.emit("chainChanged")})),e.on("reset",(()=>{t.forEach((e=>e())),t.length=0,r(e.getCurrentWallet()),Cm.emit("accountsChanged")}))}s=o("iLNs9");class wv{cleanup(){this.disposers.forEach((e=>e())),this.disposers=[]}getClientPorts(){return this.getActivePorts().filter((e=>e.name===`${r(s).runtime.id}/ethereum`))}startListening(){this.disposers.push(Cm.on("accountsChanged",(()=>{this.getClientPorts().forEach((async e=>{const t=this.account.getCurrentWallet(),r=await t.publicEthereumController.eth_accounts({context:gv(e)});e.postMessage({type:"ethereumEvent",event:"accountsChanged",value:r})}))}))),this.disposers.push(Cm.on("chainChanged",(async()=>{this.getClientPorts().forEach((async e=>{const t=this.account.getCurrentWallet(),r=await t.publicEthereumController.eth_chainId({context:gv(e)});e.postMessage({type:"ethereumEvent",event:"chainChanged",value:r})}))})))}stopListening(){var e;null===(e=this.cleanup)||void 0===e||e.call(this)}constructor({account:e,getActivePorts:t}){this.account=e,this.getActivePorts=t,this.disposers=[]}}class bv{async set({params:{key:e,value:t}}){this.map.set(e,t)}async get({params:{key:e}}){return this.map.get(e)}async getAll(){return Object.fromEntries(this.map)}constructor(){this.map=new Map}}function Av(e){let t;Cm.on("userActivity",(()=>{clearTimeout(t),t=setTimeout((()=>{e()}),864e5)}))}var Ev=o("1j0oY");t.Buffer=t.Buffer||r(Ev).Buffer,Object.assign(window,{ethers:a}),Vh.configure({url:ol,apiToken:sl}),$h.load(),async function(){if(av)throw new Error("Initialize function should be run only once");av=!0,await Af(),await tv.ensureUserAndWallet();const e=new tv,t=new rv(e),r=new sv;return await r.initialize(),Object.assign(window,{account:e,Account:tv,accountPublicRPC:t,transactionService:r}),{account:e,accountPublicRPC:t,transactionService:r}}().then((({account:e,accountPublicRPC:t})=>{const n=new uv((()=>e.getCurrentWallet())),i=new bv,o=new cv;var a;o.addMessageHandler((a=()=>e.getCurrentWallet(),function(e,t){if(!(0,ef.isJsonRpcPayload)(t)||!(0,ef.isJsonRpcRequest)(t))return!1;const n=gv(e),{method:i}=t;function o(r){return!(!lv(r,i)||"function"!=typeof r[i]||(dv(e,t,r,n),0))}return e.name===`${r(s).runtime.id}/ethereum`?o(a().publicEthereumController):e.name===`${r(s).runtime.id}/wallet`&&o(a())})),o.addMessageHandler(mv({check:e=>"accountPublicRPC"===e.name,controller:t})),o.addMessageHandler(mv({check:e=>"memoryCacheRPC"===e.name,controller:i})),o.addMessageHandler((function(e,t){if("window"===e.name){if(null!=(r=t)&&"id"in r&&"result"in r)ld.emit("resolve",t);else if(function(e){return null!=e&&"id"in e&&"error"in e}(t))ld.emit("reject",t);else{if(!function(e){return null!=e&&"id"in e&&"method"in e}(t))return!1;"closeCurrentWindow"===t.method&&ld.closeCurrentWindow()}var r;return!0}})),o.addMessageHandler(yv(n)),vv({account:e});new wv({account:e,getActivePorts:()=>o.getActivePorts()}).startListening(),chrome.runtime.onConnect.addListener((e=>{(function(e){var t;return"chrome-extension:"===((null===(t=e.sender)||void 0===t?void 0:t.url)?new URL(e.sender.url).protocol:null)||e.name===`${r(s).runtime.id}/ethereum`})(e)&&o.register(e)})),o.addListener("disconnect",(t=>{t.name===`${r(s).runtime.id}/wallet`&&e.expirePasswordSession()})),e.on("reset",(()=>{o.postMessage({portName:`${chrome.runtime.id}/wallet`,message:"session-logout"})})),Av((()=>{e.logout()}))}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQ25ELEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQ2xELEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQ2xELEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLElBR2hERCxFQUFJLENBQ04sR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFDckQsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FDcEQsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFDckQsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDcEQsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FHbkRFLEVBQUssQ0FDUCxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUNyRCxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdB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LElBQU0sR0FBTSxHQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLEtBR3RMQyxFQUFJLENBQUMsR0FBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sRUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxHQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sRUFBTSxJQUFNLEdBQU0sSUFBTSxHQUFNLElBQU0sRUFBTSxJQUFNLEVBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sSUFBTSxFQUFNLElBQU0sR0FBTSxHQUFNLEdBQU0sSUFBTSxHQUFNLElBQU0sR0FBTSxHQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sR0FBTSxJQUFNLEdBQU0sSUFBTSxFQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLEdBQU0sSUFBTSxFQUFNLElBQU0sR0FBTSxHQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxHQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxHQUFNLElBQU0sR0FBTSxJQUFNLEdBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sR0FBTSxHQUFNLElBQU0sR0FBTSxJQUFNLEdBQU0sSUFBTSxHQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxHQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sRUFBTSxHQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLEVBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sRUFBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxHQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sR0FBTSxJQUFNLEdBQU0sSUFBTSxHQUFNLEdBQU0sSUFBTSxHQUFNLElBQU0sSUFDLy9DQyxFQUFJLENBQUMsR0FBTSxFQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sSUFBTSxHQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sR0FBTSxJQUFNLEdBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxJQUFNLEdBQU0sSUFBTSxHQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sRUFBTSxHQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sR0FBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxHQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sRUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sSUFBTSxHQUFNLEVBQU0sSUFBTSxJQUFNLEdBQU0sRUFBTSxJQUFNLEdBQU0sR0FBTSxJQUFNLElBQU0sR0FBTSxHQUFNLEVBQU0sSUFBTSxJQUFNLElBQU0sRUFBTSxFQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sR0FBTSxJQUFNLEdBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxJQUFNLEdBQU0sR0FBTSxJQUFNLEdBQU0sSUFBTSxHQUFNLElBQU0sR0FBTSxHQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sR0FBTSxJQUFNLElBQU0sR0FBTSxJQUFNLEVBQU0sSUFBTSxHQUFNLElBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQU0sR0FBTSxHQUFNLEdBQU0sSUFBTSxJQUFNLEdBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sSUFBTSxHQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sR0FBTSxJQUFNLEdBQU0sR0FBTSxHQUFNLEVBQU0sSUFBTSxJQUFNLElBQU0sSUFBTSxHQUFNLElBQU0sSUFBTSxHQUFNLEdBQU0sR0FBTSxHQUFNLEdBQU0sS0FHLy9DeDdFLEVBQUssQ0FBQyxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxTQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLEVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFNBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFNBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxTQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFVBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxTQUFZLFdBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUMxL0ZDLEVBQUssQ0FBQyxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxTQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksU0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLEVBQVksVUFBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksU0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxTQUFZLFNBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUMxL0Z3N0UsRUFBSyxDQUFDLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFNBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFNBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFNBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFVBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksRUFBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksU0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksVUFBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFNBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQzEvRkMsRUFBSyxDQUFDLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFNBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFNBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFNBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFVBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksRUFBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksU0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksVUFBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFNBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBRzEvRkMsRUFBSyxDQUFDLFdBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFNBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxTQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxTQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxTQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLEVBQVksVUFBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFVBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksU0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFVBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFlBQzEvRkMsRUFBSyxDQUFDLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxTQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFNBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksU0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLEVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFVBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFNBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFNBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFlBQzEvRkMsRUFBSyxDQUFDLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksU0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxTQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFVBQVksU0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxVQUFZLEVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFVBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksU0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxTQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFlBQzEvRkMsRUFBSyxDQUFDLFdBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxTQUFZLFdBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFNBQVksV0FBWSxTQUFZLFVBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFNBQVksVUFBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLEVBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFNBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFNBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFlBRzEvRkMsRUFBSyxDQUFDLEVBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFVBQVksU0FBWSxVQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksVUFBWSxTQUFZLFVBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFdBQVksVUFBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxXQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxTQUFZLFVBQVksVUFBWSxVQUFZLFdBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxTQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksU0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFlBQzEvRkMsRUFBSyxDQUFDLEVBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFVBQVksV0FBWSxVQUFZLFNBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFVBQVksU0FBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFVBQVksVUFBWSxTQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFNBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFdBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFVBQVksV0FBWSxVQUFZLFNBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFlBQzEvRkMsRUFBSyxDQUFDLEVBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxTQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFNBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxXQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFdBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksU0FBWSxVQUFZLFVBQVksV0FBWSxVQUFZLFVBQVksVUFBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksU0FBWSxVQUFZLFVBQVksV0FBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFNBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFlBQzEvRkMsRUFBSyxDQUFDLEVBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFNBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksU0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxTQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksU0FBWSxVQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxVQUFZLFdBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxTQUFZLFVBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksVUFBWSxVQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksV0FBWSxXQUFZLFdBQVksVUFBWSxTQUFZLFVBQVksVUFBWSxVQUFZLFVBQVksV0FBWSxVQUFZLFdBQVksV0FBWSxXQUFZ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SSxHQUMxQkEsRUFBRSxLQUFPZ2dHLEVBQUVoZ0csRUFBRyxHQUFLQSxFQUFHLEdBQUksR0FDMUJBLEVBQUcsSUFBTWdnRyxFQUFFaGdHLEVBQUUsSUFBTUEsRUFBRyxHQUFJLElBQzFCQSxFQUFHLElBQU1nZ0csRUFBRWhnRyxFQUFHLEdBQUtBLEVBQUUsSUFBSyxJQUMxQkEsRUFBRSxLQUFPZ2dHLEVBQUVoZ0csRUFBRSxJQUFNQSxFQUFHLEdBQUksR0FDMUJBLEVBQUcsSUFBTWdnRyxFQUFFaGdHLEVBQUUsSUFBTUEsRUFBRSxJQUFLLEdBQzFCQSxFQUFHLElBQU1nZ0csRUFBRWhnRyxFQUFHLEdBQUtBLEVBQUUsSUFBSyxJQUMxQkEsRUFBRSxLQUFPZ2dHLEVBQUVoZ0csRUFBRyxHQUFLQSxFQUFHLEdBQUksSUFDMUJBLEVBQUcsSUFBTWdnRyxFQUFFaGdHLEVBQUUsSUFBTUEsRUFBRSxJQUFLLEdBQzFCQSxFQUFHLElBQU1nZ0csRUFBRWhnRyxFQUFHLEdBQUtBLEVBQUUsSUFBSyxHQUMxQkEsRUFBRSxLQUFPZ2dHLEVBQUVoZ0csRUFBRyxHQUFLQSxFQUFHLEdBQUksSUFDMUJBLEVBQUUsS0FBT2dnRyxFQUFFaGdHLEVBQUUsSUFBTUEsRUFBRyxHQUFJLElBQzFCQSxFQUFHLElBQU1nZ0csRUFBRWhnRyxFQUFHLEdBQUtBLEVBQUcsR0FBSSxHQUMxQkEsRUFBRyxJQUFNZ2dHLEVBQUVoZ0csRUFBRyxHQUFLQSxFQUFHLEdBQUksR0FDMUJBLEVBQUcsSUFBTWdnRyxFQUFFaGdHLEVBQUcsR0FBS0EsRUFBRyxHQUFJLElBQzFCQSxFQUFHLElBQU1nZ0csRUFBRWhnRyxFQUFHLEdBQUtBLEVBQUcsR0FBSSxJQUMxQkEsRUFBRyxJQUFNZ2dHLEVBQUVoZ0csRUFBRyxHQUFLQSxFQUFHLEdBQUksR0FDMUJBLEVBQUcsSUFBTWdnRyxFQUFFaGdHLEVBQUcsR0FBS0EsRUFBRyxHQUFJLEdBQzFCQSxFQUFHLElBQU1nZ0csRUFBRWhnRyxFQUFHLEdBQUtBLEVBQUcsR0FBSSxJQUMxQkEsRUFBRyxJQUFN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LE1BQWlCLHdCQURXLFFBQVhBLEVBQUEvOEIsRUFBS2wyQixjQUFNLElBQVhpekQsT0FBQSxFQUFBQSxFQUFheHVDLEtBQU0sSUFBSTB4SCxJQUFJamdILEVBQUtsMkIsT0FBT3lrQixLQUFLNFEsU0FBVyxPQU0vRGEsRUFBSzEzQixPQUFTLEdBQUcyL0QsRUFBQUosR0FBUTVxRSxRQUFRTixhLEVBcUNwQ28ySyxDQUFXL3lJLElBQ2I0eUksRUFBYWhyRyxTQUFTNW5DLEVBQUssSUFJL0I0eUksRUFBYXZwSyxZQUFZLGNBQWUyMkIsSUFDbENBLEVBQUsxM0IsT0FBUyxHQUFHMi9ELEVBQUFKLEdBQVE1cUUsUUFBUU4sYUFFbkNvZ0gsRUFBUTJ4RCx1QkFBdUIsSUFJbkMzeEQsRUFBUXY0RSxHQUFHLFNBQVMsS0FDbEJvdUksRUFBYXJ2QixZQUFZLENBQ3ZCc3RCLFNBQVUsR0FBRzd6SyxPQUFPQyxRQUFRTixZQUM1QmtLLFFBQVMsa0JBQ1QsSUFHSnVySyxJQUFlLEtBQ2JyMUQsRUFBUTh4RCxRQUFRLEdBQ2hCLEciLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AcGFyY2VsL3J1bnRpbWUtanMvbGliL2hlbHBlcnMvYnVuZGxlLW1hbmlmZXN0LmpzIiwibm9kZV9tb2R1bGVzL3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC9kaXN0L2Jyb3dzZXItcG9seWZpbGwuanMiLCJub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3JscC9zcmMudHMvaW5kZXgudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYnl0ZXMvc3JjLnRzL2luZGV4LnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2xvZ2dlci9zcmMudHMvaW5kZXgudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvbG9nZ2VyL3NyYy50cy9fdmVyc2lvbi50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9ieXRlcy9zcmMudHMvX3ZlcnNpb24udHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcmxwL3NyYy50cy9fdmVyc2lvbi50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9iYXNlNjQvc3JjLnRzL2luZGV4LnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2Jhc2U2NC9zcmMudHMvYnJvd3Nlci1iYXNlNjQudHMiLCJub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9taW5pbWFsaXN0aWMtYXNzZXJ0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9jb21tb24uanMiLCJub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEuanMiLCJub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMS5qcyIsIm5vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS9jb21tb24uanMiLCJub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMjI0LmpzIiwibm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzI1Ni5qcyIsIm5vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8zODQuanMiLCJub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvNTEyLmpzIiwibm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvcmlwZW1kLmpzIiwibm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvaG1hYy5qcyIsIm5vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi91cmwuanMiLCJub2RlX21vZHVsZXMvcGFyc2V1cmkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIm5vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIm5vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2JpbmFyeS5qcyIsIm5vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvaXMtYnVmZmVyLmpzIiwibm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9tYW5hZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3NvY2tldC5qcyIsIm5vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3htbGh0dHByZXF1ZXN0LmpzIiwibm9kZV9tb2R1bGVzL2hhcy1jb3JzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL2dsb2JhbFRoaXMuYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcteGhyLmpzIiwibm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy5qcyIsIm5vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnQuanMiLCJub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2hhcy1iaW5hcnkyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2FycmF5YnVmZmVyLnNsaWNlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2FmdGVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL3V0ZjguanMiLCJub2RlX21vZHVsZXMvYmFzZTY0LWFycmF5YnVmZmVyL2xpYi9iYXNlNjQtYXJyYXlidWZmZXIuanMiLCJub2RlX21vZHVsZXMvYmxvYi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9wYXJzZXFzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NvbXBvbmVudC1pbmhlcml0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3llYXN0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIm5vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmctanNvbnAuanMiLCJub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy93ZWJzb2NrZXQuanMiLCJub2RlX21vZHVsZXMvaW5kZXhvZi9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9zb2NrZXQuanMiLCJub2RlX21vZHVsZXMvdG8tYXJyYXkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvb24uanMiLCJub2RlX21vZHVsZXMvY29tcG9uZW50LWJpbmQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYmFja28yL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIm5vZGVfbW9kdWxlcy9AanNvbi1ycGMtdG9vbHMvdXRpbHMvc3JjL2NvbnN0YW50cy50cyIsIm5vZGVfbW9kdWxlcy9AanNvbi1ycGMtdG9vbHMvdXRpbHMvc3JjL2Vycm9yLnRzIiwibm9kZV9tb2R1bGVzL0Bqc29uLXJwYy10b29scy91dGlscy9zcmMvZW52LnRzIiwibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm5vZGVfbW9kdWxlcy9AcGVkcm91aWQvZW52aXJvbm1lbnQvc3JjL2luZGV4LnRzIiwibm9kZV9tb2R1bGVzL0BwZWRyb3VpZC9lbnZpcm9ubWVudC9zcmMvY3J5cHRvLnRzIiwibm9kZV9tb2R1bGVzL0BwZWRyb3VpZC9lbnZpcm9ubWVudC9zcmMvZW52LnRzIiwibm9kZV9tb2R1bGVzL0Bqc29uLXJwYy10b29scy91dGlscy9zcmMvZm9ybWF0LnRzIiwibm9kZV9tb2R1bGVzL0Bqc29uLXJwYy10b29scy91dGlscy9zcmMvcm91dGluZy50cyIsIm5vZGVfbW9kdWxlcy9AanNvbi1ycGMtdG9vbHMvdXRpbHMvc3JjL3R5cGVzLnRzIiwibm9kZV9tb2R1bGVzL0Bqc29uLXJwYy10b29scy90eXBlcy9zcmMvaW5kZXgudHMiLCJub2RlX21vZHVsZXMvQGpzb24tcnBjLXRvb2xzL3R5cGVzL3NyYy9ibG9ja2NoYWluLnRzIiwibm9kZV9tb2R1bGVzL0Bqc29uLXJwYy10b29scy90eXBlcy9zcmMvbWlzYy50cyIsIm5vZGVfbW9kdWxlcy9AanNvbi1ycGMtdG9vbHMvdHlwZXMvc3JjL3Byb3ZpZGVyLnRzIiwibm9kZV9tb2R1bGVzL0Bqc29uLXJwYy10b29scy90eXBlcy9zcmMvbXVsdGkudHMiLCJub2RlX21vZHVsZXMvQGpzb24tcnBjLXRvb2xzL3R5cGVzL3NyYy9yb3V0ZXIudHMiLCJub2RlX21vZHVsZXMvQGpzb24tcnBjLXRvb2xzL3R5cGVzL3NyYy92YWxpZGF0b3IudHMiLCJub2RlX21vZHVsZXMvQGpzb24tcnBjLXRvb2xzL3V0aWxzL3NyYy92YWxpZGF0b3JzLnRzIiwibm9kZV9tb2R1bGVzL0BwYXJjZWwvcnVudGltZS1qcy9saWIvaGVscGVycy9idW5kbGUtdXJsLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9pc0J1ZmZlci5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19ub2RlVXRpbC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lQnVmZmVyLmpzIiwibm9kZV9tb2R1bGVzL0BwYXJjZWwvcnVudGltZS1qcy9saWIvcnVudGltZS05ZTA3YTkzOTYwZWY5YzdhLmpzIiwic3JjL2JhY2tncm91bmQvaW5kZXgudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYmlnbnVtYmVyL3NyYy50cy9iaWdudW1iZXIudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYmlnbnVtYmVyL3NyYy50cy9fdmVyc2lvbi50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9iaWdudW1iZXIvc3JjLnRzL2ZpeGVkbnVtYmVyLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXMvc3JjLnRzL2luZGV4LnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXMvc3JjLnRzL192ZXJzaW9uLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9zcmMudHMvX3ZlcnNpb24udHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL3NyYy50cy9mcmFnbWVudHMudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL3NyYy50cy9hYmktY29kZXIudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL3NyYy50cy9jb2RlcnMvYWJzdHJhY3QtY29kZXIudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWRkcmVzcy9zcmMudHMvaW5kZXgudHMiLCJub2RlX21vZHVsZXMvanMtc2hhMy9zcmMvc2hhMy5qcyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9rZWNjYWsyNTYvc3JjLnRzL2luZGV4LnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FkZHJlc3Mvc3JjLnRzL192ZXJzaW9uLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9zcmMudHMvY29kZXJzL2FkZHJlc3MudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL3NyYy50cy9jb2RlcnMvYXJyYXkudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL3NyYy50cy9jb2RlcnMvYW5vbnltb3VzLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9zcmMudHMvY29kZXJzL2Jvb2xlYW4udHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL3NyYy50cy9jb2RlcnMvYnl0ZXMudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL3NyYy50cy9jb2RlcnMvZml4ZWQtYnl0ZXMudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL3NyYy50cy9jb2RlcnMvbnVsbC50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9jb25zdGFudHMvc3JjLnRzL2FkZHJlc3Nlcy50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9jb25zdGFudHMvc3JjLnRzL2JpZ251bWJlcnMudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvY29uc3RhbnRzL3NyYy50cy9oYXNoZXMudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvY29uc3RhbnRzL3NyYy50cy9zdHJpbmdzLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2FiaS9zcmMudHMvY29kZXJzL251bWJlci50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zdHJpbmdzL3NyYy50cy91dGY4LnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3N0cmluZ3Mvc3JjLnRzL192ZXJzaW9uLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3N0cmluZ3Mvc3JjLnRzL2J5dGVzMzIudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvc3RyaW5ncy9zcmMudHMvaWRuYS50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYmkvc3JjLnRzL2NvZGVycy9zdHJpbmcudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL3NyYy50cy9jb2RlcnMvdHVwbGUudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvaGFzaC9zcmMudHMvaWQudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvaGFzaC9zcmMudHMvbmFtZWhhc2gudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvaGFzaC9zcmMudHMvX3ZlcnNpb24udHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvaGFzaC9zcmMudHMvZW5zLW5vcm1hbGl6ZS9kZWNvZGVyLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2hhc2gvc3JjLnRzL2Vucy1ub3JtYWxpemUvbGliLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2hhc2gvc3JjLnRzL2Vucy1ub3JtYWxpemUvaW5jbHVkZS50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9oYXNoL3NyYy50cy9tZXNzYWdlLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2hhc2gvc3JjLnRzL3R5cGVkLWRhdGEudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJpL3NyYy50cy9pbnRlcmZhY2UudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYWJzdHJhY3QtcHJvdmlkZXIvc3JjLnRzL2luZGV4LnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2Fic3RyYWN0LXByb3ZpZGVyL3NyYy50cy9fdmVyc2lvbi50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1zaWduZXIvc3JjLnRzL2luZGV4LnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2Fic3RyYWN0LXNpZ25lci9zcmMudHMvX3ZlcnNpb24udHMiLCJub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC5qcyIsIm5vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvbWluaW1hbGlzdGljLWFzc2VydC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvbWluaW1hbGlzdGljLWNyeXB0by11dGlscy9saWIvdXRpbHMuanMiLCJub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL2Jhc2UuanMiLCJub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9zaG9ydC5qcyIsIm5vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmVzLmpzIiwibm9kZV9tb2R1bGVzL25vZGVfbW9kdWxlcy9obWFjLWRyYmcvbGliL2htYWMtZHJiZy5qcyIsIm5vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL2tleS5qcyIsIm5vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL3NpZ25hdHVyZS5qcyIsIm5vZGVfbW9kdWxlcy9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VjL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3NpZ25pbmcta2V5L2xpYi5lc20vZWxsaXB0aWMuanMiLCJub2RlX21vZHVsZXMvbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy5qcyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9zaWduaW5nLWtleS9zcmMudHMvX3ZlcnNpb24udHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvc2lnbmluZy1rZXkvc3JjLnRzL2luZGV4LnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3RyYW5zYWN0aW9ucy9zcmMudHMvX3ZlcnNpb24udHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvdHJhbnNhY3Rpb25zL3NyYy50cy9pbmRleC50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9jb250cmFjdHMvc3JjLnRzL2luZGV4LnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2NvbnRyYWN0cy9zcmMudHMvX3ZlcnNpb24udHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvYmFzZXgvc3JjLnRzL2luZGV4LnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3NoYTIvc3JjLnRzL3R5cGVzLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Bia2RmMi9zcmMudHMvYnJvd3Nlci1wYmtkZjIudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvc2hhMi9zcmMudHMvX3ZlcnNpb24udHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvc2hhMi9zcmMudHMvYnJvd3Nlci1zaGEyLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3dvcmRsaXN0cy9zcmMudHMvX3ZlcnNpb24udHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvd29yZGxpc3RzL3NyYy50cy93b3JkbGlzdC50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC93b3JkbGlzdHMvc3JjLnRzL2xhbmctZW4udHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvd29yZGxpc3RzL3NyYy50cy9icm93c2VyLXdvcmRsaXN0cy50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9oZG5vZGUvc3JjLnRzL192ZXJzaW9uLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2hkbm9kZS9zcmMudHMvaW5kZXgudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcmFuZG9tL3NyYy50cy9icm93c2VyLXJhbmRvbS50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9yYW5kb20vc3JjLnRzL192ZXJzaW9uLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3JhbmRvbS9zcmMudHMvc2h1ZmZsZS50cyIsIm5vZGVfbW9kdWxlcy9hZXMtanMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvanNvbi13YWxsZXRzL3NyYy50cy9fdmVyc2lvbi50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9qc29uLXdhbGxldHMvc3JjLnRzL3V0aWxzLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2pzb24td2FsbGV0cy9zcmMudHMvY3Jvd2RzYWxlLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2pzb24td2FsbGV0cy9zcmMudHMvaW5zcGVjdC50cyIsIm5vZGVfbW9kdWxlcy9zY3J5cHQtanMvc2NyeXB0LmpzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L2pzb24td2FsbGV0cy9zcmMudHMva2V5c3RvcmUudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvanNvbi13YWxsZXRzL3NyYy50cy9pbmRleC50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC93YWxsZXQvc3JjLnRzL2luZGV4LnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3dhbGxldC9zcmMudHMvX3ZlcnNpb24udHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvbmV0d29ya3Mvc3JjLnRzL192ZXJzaW9uLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L25ldHdvcmtzL3NyYy50cy9pbmRleC50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC93ZWIvc3JjLnRzL2luZGV4LnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3dlYi9zcmMudHMvYnJvd3Nlci1nZXR1cmwudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvd2ViL3NyYy50cy9fdmVyc2lvbi50cyIsIm5vZGVfbW9kdWxlcy9iZWNoMzIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJzL3NyYy50cy9fdmVyc2lvbi50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvc3JjLnRzL2Zvcm1hdHRlci50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvc3JjLnRzL2Jhc2UtcHJvdmlkZXIudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJzL3NyYy50cy9qc29uLXJwYy1wcm92aWRlci50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvc3JjLnRzL2Jyb3dzZXItd3MudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJzL3NyYy50cy93ZWJzb2NrZXQtcHJvdmlkZXIudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJzL3NyYy50cy91cmwtanNvbi1ycGMtcHJvdmlkZXIudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJzL3NyYy50cy9hbGNoZW15LXByb3ZpZGVyLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9zcmMudHMvYW5rci1wcm92aWRlci50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvc3JjLnRzL2Nsb3VkZmxhcmUtcHJvdmlkZXIudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJzL3NyYy50cy9ldGhlcnNjYW4tcHJvdmlkZXIudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJzL3NyYy50cy9mYWxsYmFjay1wcm92aWRlci50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC9wcm92aWRlcnMvc3JjLnRzL2Jyb3dzZXItaXBjLXByb3ZpZGVyLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9zcmMudHMvaW5mdXJhLXByb3ZpZGVyLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9zcmMudHMvanNvbi1ycGMtYmF0Y2gtcHJvdmlkZXIudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJzL3NyYy50cy9ub2Rlc21pdGgtcHJvdmlkZXIudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJzL3NyYy50cy9wb2NrZXQtcHJvdmlkZXIudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvcHJvdmlkZXJzL3NyYy50cy93ZWIzLXByb3ZpZGVyLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3Byb3ZpZGVycy9zcmMudHMvaW5kZXgudHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3Qvc29saWRpdHkvc3JjLnRzL192ZXJzaW9uLnRzIiwibm9kZV9tb2R1bGVzL0BldGhlcnNwcm9qZWN0L3NvbGlkaXR5L3NyYy50cy9pbmRleC50cyIsIm5vZGVfbW9kdWxlcy9AZXRoZXJzcHJvamVjdC91bml0cy9zcmMudHMvX3ZlcnNpb24udHMiLCJub2RlX21vZHVsZXMvQGV0aGVyc3Byb2plY3QvdW5pdHMvc3JjLnRzL2luZGV4LnRzIiwibm9kZV9tb2R1bGVzL2V0aGVycy9zcmMudHMvX3ZlcnNpb24udHMiLCJub2RlX21vZHVsZXMvZXRoZXJzL3NyYy50cy9ldGhlcnMudHMiLCJub2RlX21vZHVsZXMvZXRoZXJzL3NyYy50cy9pbmRleC50cyIsIm5vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvbGliL19kZWZpbmVfcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvc3RvcmUtdW5pdC9ub2RlX21vZHVsZXMvbmFub2V2ZW50cy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zdG9yZS11bml0L2luZGV4LnRzIiwibm9kZV9tb2R1bGVzL2lzLXRydXRoeS10cy9pbmRleC50cyIsIm5vZGVfbW9kdWxlcy9jYXBpdGFsaXplLXRzL2luZGV4LnRzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvaXNGdW5jdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzTWFza2VkLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fY29yZUpzRGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvU291cmNlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTmF0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VmFsdWUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVDcmVhdGUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19nZXROYXRpdmUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoQ2xlYXIuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoRGVsZXRlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEdldC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hIYXMuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19IYXNoLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaFNldC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUNsZWFyLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9lcS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZURlbGV0ZS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUhhcy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX0xpc3RDYWNoZS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZVNldC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleWFibGUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXBEYXRhLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVEZWxldGUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUdldC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlSGFzLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwQ2FjaGUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZVNldC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvbWVtb2l6ZS5qcyIsInNyYy9tb2R1bGVzL25ldHdvcmtzL0NoYWluLnRzIiwic3JjL2Vudi9jb25maWcudHMiLCJzcmMvbW9kdWxlcy9uZXR3b3Jrcy9rZXlzLnRzIiwic3JjL21vZHVsZXMvbmV0d29ya3MvYXNzZXQudHMiLCJzcmMvbW9kdWxlcy9uZXR3b3Jrcy9OZXR3b3Jrcy50cyIsIm5vZGVfbW9kdWxlcy9pZGIta2V5dmFsL2Rpc3QvY29tcGF0LmpzIiwibm9kZV9tb2R1bGVzL2xydS1jYWNoZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9kZWZpLXNkay9zcmMvY2FjaGUvRGF0YVN0YXR1cy50cyIsIm5vZGVfbW9kdWxlcy9kZWZpLXNkay9zcmMvcmVxdWVzdHMvdmVyaWZ5LnRzIiwibm9kZV9tb2R1bGVzL2RlZmktc2RrL3NyYy9jYWNoZS9FbnRyeS50cyIsIm5vZGVfbW9kdWxlcy9mYXN0LWRlZXAtZXF1YWwvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZGVmaS1zZGsvc3JjL3NoYXJlZC9tZXJnZVN0cmF0ZWdpZXMudHMiLCJub2RlX21vZHVsZXMvZGVmaS1zZGsvc3JjL3JlcXVlc3RzL3ZlcmlmeUJ5UmVxdWVzdElkLnRzIiwibm9kZV9tb2R1bGVzL2RlZmktc2RrL3NyYy9jYWNoZS9zaG91bGRSZXR1cm5DYWNoZWREYXRhLnRzIiwibm9kZV9tb2R1bGVzL2RlZmktc2RrL3NyYy9jYWNoZS9kZWZhdWx0Q2FjaGVQb2xpY3kudHMiLCJub2RlX21vZHVsZXMvZGVmaS1zZGsvc3JjL2NhY2hlL1JlcXVlc3RDYWNoZS50cyIsIm5vZGVfbW9kdWxlcy9kZWZpLXNkay9zcmMvc29ja2V0L3JlY29ubmVjdGlvbi1wcm94eS50cyIsIm5vZGVfbW9kdWxlcy9kZWZpLXNkay9zcmMvc29ja2V0L2NyZWF0ZVNvY2tldE5hbWVzcGFjZS50cyIsIm5vZGVfbW9kdWxlcy9kZWZpLXNkay9zcmMvZG9tYWlucy9jcmVhdGVEb21haW5SZXF1ZXN0LnRzIiwibm9kZV9tb2R1bGVzL2RlZmktc2RrL3NyYy9kb21haW5zL2Fzc2V0c1ByaWNlcy50cyIsIm5vZGVfbW9kdWxlcy9kZWZpLXNkay9zcmMvZG9tYWlucy9hc3NldHNJbmZvLnRzIiwibm9kZV9tb2R1bGVzL2RlZmktc2RrL3NyYy9kb21haW5zL2FkZHJlc3NMb2Fucy50cyIsIm5vZGVfbW9kdWxlcy9kZWZpLXNkay9zcmMvZG9tYWlucy9hZGRyZXNzQXNzZXRzLnRzIiwibm9kZV9tb2R1bGVzL2RlZmktc2RrL3NyYy9kb21haW5zL2FkZHJlc3NQb3NpdGlvbnMudHMiLCJub2RlX21vZHVsZXMvZGVmaS1zZGsvc3JjL2RvbWFpbnMvYWRkcmVzc0NoYXJ0cy50cyIsIm5vZGVfbW9kdWxlcy9kZWZpLXNkay9zcmMvZG9tYWlucy9hc3NldHNDaGFydHMudHMiLCJub2RlX21vZHVsZXMvZGVmaS1zZGsvc3JjL2RvbWFpbnMvYXNzZXRzRnVsbEluZm8udHMiLCJub2RlX21vZHVsZXMvZGVmaS1zZGsvc3JjL2RvbWFpbnMvYWRkcmVzc1BvcnRmb2xpby50cyIsIm5vZGVfbW9kdWxlcy9kZWZpLXNkay9zcmMvZG9tYWlucy9hZGRyZXNzUG9ydGZvbGlvRGVjb21wb3NpdGlvbi50cyIsIm5vZGVfbW9kdWxlcy9kZWZpLXNkay9zcmMvY2FjaGUvUGVyc2lzdGVudENhY2hlLnRzIiwibm9kZV9tb2R1bGVzL2RlZmktc2RrL3NyYy9jbGllbnQudHMiLCJub2RlX21vZHVsZXMvZGVmaS1zZGsvc3JjL3NvY2tldC9wYWdlLXZpc2liaWxpdHkudHMiLCJub2RlX21vZHVsZXMvZGVmaS1zZGsvc3JjL2NhY2hlL2lzUmVxdWVzdE5lZWRlZC50cyIsIm5vZGVfbW9kdWxlcy9kZWZpLXNkay9zcmMvY2FjaGUvaGFzRGF0YS50cyIsIm5vZGVfbW9kdWxlcy9kZWZpLXNkay9zcmMvcmVhY3QvdXNlU3Vic2NyaXB0aW9uLnRzIiwibm9kZV9tb2R1bGVzL2RlZmktc2RrL3NyYy9yZWFjdC9kb21haW5zL2NyZWF0ZURvbWFpbkhvb2sudHMiLCJub2RlX21vZHVsZXMvZGVmaS1zZGsvc3JjL3JlYWN0L2RvbWFpbnMvdXNlQWRkcmVzc0xvYW5zLnRzIiwibm9kZV9tb2R1bGVzL2RlZmktc2RrL3NyYy9yZWFjdC9kb21haW5zL3VzZUFzc2V0c0luZm8udHMiLCJub2RlX21vZHVsZXMvZGVmaS1zZGsvc3JjL3JlYWN0L2RvbWFpbnMvdXNlQXNzZXRzUHJpY2VzLnRzIiwibm9kZV9tb2R1bGVzL2RlZmktc2RrL3NyYy9yZWFjdC9kb21haW5zL3VzZUFzc2V0c0Z1bGxJbmZvLnRzIiwibm9kZV9tb2R1bGVzL2RlZmktc2RrL3NyYy9yZWFjdC9kb21haW5zL3VzZUFkZHJlc3NDaGFydHMudHMiLCJub2RlX21vZHVsZXMvZGVmaS1zZGsvc3JjL3JlYWN0L2RvbWFpbnMvdXNlQWRkcmVzc1Bvc2l0aW9ucy50cyIsIm5vZGVfbW9kdWxlcy9kZWZpLXNkay9zcmMvcmVhY3QvZG9tYWlucy91c2VBc3NldHNDaGFydHMudHMiLCJub2RlX21vZHVsZXMvZGVmaS1zZGsvc3JjL3JlYWN0L2RvbWFpbnMvdXNlQWRkcmVzc1BvcnRmb2xpby50cyIsIm5vZGVfbW9kdWxlcy9kZWZpLXNkay9zcmMvcmVhY3QvZG9tYWlucy91c2VBZGRyZXNzUG9ydGZvbGlvRGVjb21wb3NpdGlvbi50cyIsInNyYy9tb2R1bGVzL25ldHdvcmtzL25ldHdvcmtzLXN0b3JlLnRzIiwic3JjL21vZHVsZXMvbmV0d29ya3MvbmV0d29ya3MtYXBpLnRzIiwic3JjL3VpL3NoYXJlZC9jaGFubmVscy50cyIsIm5vZGVfbW9kdWxlcy9AanNvbi1ycGMtdG9vbHMvdXRpbHMvc3JjL2luZGV4LnRzIiwic3JjL3NoYXJlZC9Qb3J0TWVzc2FnZUNoYW5uZWwudHMiLCJzcmMvc2hhcmVkL2Vycm9ycy9lcnJvcnMudHMiLCJzcmMvbW9kdWxlcy9kZWZpLXNkay9pbmRleC50cyIsInNyYy9tb2R1bGVzL2RlZmktc2RrL0JhY2tncm91bmRNZW1vcnlDYWNoZS50cyIsInNyYy9zaGFyZWQvY29yZS92ZXJzaW9uLnRzIiwic3JjL2JhY2tncm91bmQvd2ViYXBpcy9zdG9yYWdlLnRzIiwibm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJub2RlX21vZHVsZXMvbmFub2lkL2luZGV4LmJyb3dzZXIuanMiLCJzcmMvbW9kdWxlcy9jcnlwdG8vY29udmVydC50cyIsInNyYy9tb2R1bGVzL2NyeXB0by9yYW5kb20udHMiLCJzcmMvbW9kdWxlcy9jcnlwdG8va2V5LnRzIiwic3JjL21vZHVsZXMvY3J5cHRvL2Flcy50cyIsInNyYy9tb2R1bGVzL2NyeXB0by9hZXNTdGFibGUudHMiLCJzcmMvbW9kdWxlcy9jcnlwdG8vZ2V0U0hBMjU2SGV4RGlnZXN0LnRzIiwic3JjL3NoYXJlZC92YWxpZGF0aW9uL3VzZXItaW5wdXQudHMiLCJub2RlX21vZHVsZXMvbmFub2V2ZW50cy9pbmRleC5qcyIsInNyYy9iYWNrZ3JvdW5kL3dlYmFwaXMvd2luZG93LnRzIiwibm9kZV9tb2R1bGVzL0BwYXJjZWwvcnVudGltZS1qcy9saWIvcnVudGltZS0yYTAxZjU3NTNiOWMzNzM0LmpzIiwic3JjL2JhY2tncm91bmQvTm90aWZpY2F0aW9uV2luZG93L05vdGlmaWNhdGlvbldpbmRvdy50cyIsInNyYy9iYWNrZ3JvdW5kL2NvbnN0YW50cy50cyIsInNyYy9tb2R1bGVzL2V0aGVyZXVtL3RyYW5zYWN0aW9ucy9wcmVwYXJlVHJhbnNhY3Rpb24udHMiLCJzcmMvbW9kdWxlcy9ldGhlcmV1bS90cmFuc2FjdGlvbnMvZ2FzUHJpY2VzL2hhc0dhc1ByaWNlLnRzIiwic3JjL21vZHVsZXMvZXRoZXJldW0vdHJhbnNhY3Rpb25zL2dhc1ByaWNlcy9hc3NpZ25HYXNQcmljZS50cyIsInNyYy9tb2R1bGVzL2V0aGVyZXVtL3RyYW5zYWN0aW9ucy9nYXNQcmljZXMvcmVxdWVzdHMudHMiLCJzcmMvbW9kdWxlcy9ldGhlcmV1bS90cmFuc2FjdGlvbnMvZmV0Y2hBbmRBc3NpZ25HYXNQcmljZS50cyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TWFwLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tDbGVhci5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrRGVsZXRlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tHZXQuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0hhcy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX1N0YWNrLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tTZXQuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUVhY2guanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19kZWZpbmVQcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VBc3NpZ25WYWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc2lnblZhbHVlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weU9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUaW1lcy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3RMaWtlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzQXJndW1lbnRzLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FyZ3VtZW50cy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzSW5kZXguanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL2lzTGVuZ3RoLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlMaWtlS2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlS2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJBcmcuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2UuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL2tleXMuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQXNzaWduLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlS2V5c0luLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUtleXNJbi5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gva2V5c0luLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUFzc2lnbkluLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weUFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlGaWx0ZXIuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJBcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFN5bWJvbHMuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5U3ltYm9scy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5UHVzaC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFByb3RvdHlwZS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFN5bWJvbHNJbi5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcHlTeW1ib2xzSW4uanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0QWxsS2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldEFsbEtleXMuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19nZXRBbGxLZXlzSW4uanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19EYXRhVmlldy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX1Byb21pc2UuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19TZXQuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19XZWFrTWFwLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VGFnLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9faW5pdENsb25lQXJyYXkuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19VaW50OEFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVBcnJheUJ1ZmZlci5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lRGF0YVZpZXcuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZVJlZ0V4cC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lU3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVUeXBlZEFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9faW5pdENsb25lQnlUYWcuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQ3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9faW5pdENsb25lT2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTWFwLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9pc01hcC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc1NldC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTZXQuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQ2xvbmUuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXkuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19zdHJpbmdUb1BhdGguanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19tZW1vaXplQ2FwcGVkLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRvU3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC90b1N0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nhc3RQYXRoLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9sYXN0LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9LZXkuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVNsaWNlLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fcGFyZW50LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVVuc2V0LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9pc1BsYWluT2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fY3VzdG9tT21pdENsb25lLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9faXNGbGF0dGVuYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGbGF0dGVuLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9mbGF0dGVuLmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fYXBwbHkuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyUmVzdC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvY29uc3RhbnQuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2V0VG9TdHJpbmcuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL2lkZW50aXR5LmpzIiwibm9kZV9tb2R1bGVzL2xvZGFzaC9fc2hvcnRPdXQuanMiLCJub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb1N0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvb21pdC5qcyIsIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZsYXRSZXN0LmpzIiwic3JjL21vZHVsZXMvZXRoZXJldW0vbWVzc2FnZS1zaWduaW5nL3ByZXBhcmVUeXBlZERhdGEudHMiLCJub2RlX21vZHVsZXMvZXRoZXJzL3NyYy50cy91dGlscy50cyIsInNyYy9zaGFyZWQvbm9ybWFsaXplQWRkcmVzcy50cyIsInNyYy9tb2R1bGVzL2V0aGVyZXVtL3RyYW5zYWN0aW9ucy9yZXNvbHZlQ2hhaW5Gb3JUeC50cyIsInNyYy9iYWNrZ3JvdW5kL2V2ZW50cy50cyIsInNyYy9iYWNrZ3JvdW5kL1dhbGxldC9oZWxwZXJzL3RvRXRoZXJzV2FsbGV0LnRzIiwibm9kZV9tb2R1bGVzL2ltbWVyL3NyYy91dGlscy9lcnJvcnMudHMiLCJub2RlX21vZHVsZXMvaW1tZXIvc3JjL3V0aWxzL2NvbW1vbi50cyIsIm5vZGVfbW9kdWxlcy9pbW1lci9zcmMvdXRpbHMvcGx1Z2lucy50cyIsIm5vZGVfbW9kdWxlcy9pbW1lci9zcmMvY29yZS9zY29wZS50cyIsIm5vZGVfbW9kdWxlcy9pbW1lci9zcmMvY29yZS9maW5hbGl6ZS50cyIsIm5vZGVfbW9kdWxlcy9pbW1lci9zcmMvY29yZS9wcm94eS50cyIsIm5vZGVfbW9kdWxlcy9pbW1lci9zcmMvY29yZS9pbW1lckNsYXNzLnRzIiwibm9kZV9tb2R1bGVzL2ltbWVyL3NyYy9jb3JlL2N1cnJlbnQudHMiLCJub2RlX21vZHVsZXMvaW1tZXIvc3JjL2ltbWVyLnRzIiwibm9kZV9tb2R1bGVzL2ltbWVyL3NyYy91dGlscy9lbnYudHMiLCJzcmMvYmFja2dyb3VuZC9XYWxsZXQvaGVscGVycy9tYXNrLnRzIiwic3JjL2JhY2tncm91bmQvV2FsbGV0L21vZGVsL1NlZWRUeXBlLnRzIiwic3JjL3NoYXJlZC93YWxsZXQvY3JlYXRlLnRzIiwic3JjL2JhY2tncm91bmQvV2FsbGV0L21vZGVsL1dhbGxldENvbnRhaW5lci50cyIsInNyYy9tb2R1bGVzL2V0aGVyZXVtL3RvQ2hlY2tzdW1BZGRyZXNzLnRzIiwic3JjL3NoYXJlZC93YWxsZXQvZ2V0TmV4dEFjY291bnRQYXRoLnRzIiwic3JjL2JhY2tncm91bmQvV2FsbGV0L21vZGVsL3ZlcnNpb25zLnRzIiwic3JjL2JhY2tncm91bmQvV2FsbGV0L1dhbGxldFJlY29yZC50cyIsInNyYy9zaGFyZWQvUGVyc2lzdGVudFN0b3JlLnRzIiwic3JjL2JhY2tncm91bmQvV2FsbGV0L3BlcnNpc3RlbmNlLnRzIiwic3JjL2JhY2tncm91bmQvV2FsbGV0L1dhbGxldC50cyIsInNyYy9tb2R1bGVzL2V0aGVyZXVtL3RyYW5zYWN0aW9ucy9yZW1vdmVTaWduYXR1cmUudHMiLCJzcmMvYmFja2dyb3VuZC9hY2NvdW50L0FjY291bnQudHMiLCJzcmMvc2hhcmVkL3Vwc2VydC50cyIsInNyYy9iYWNrZ3JvdW5kL3RyYW5zYWN0aW9ucy9UcmFuc2FjdGlvblNlcnZpY2UudHMiLCJzcmMvYmFja2dyb3VuZC9pbml0aWFsaXplLnRzIiwic3JjL2JhY2tncm91bmQvbWVzc2FnaW5nL0h0dHBDb25uZWN0aW9uLnRzIiwic3JjL2JhY2tncm91bmQvbWVzc2FnaW5nL1BvcnRSZWdpc3RyeS50cyIsInNyYy9iYWNrZ3JvdW5kL21lc3NhZ2luZy9wb3J0LW1lc3NhZ2UtaGFuZGxlcnMvY3JlYXRlV2FsbGV0TWVzc2FnZUhhbmRsZXIudHMiLCJzcmMvc2hhcmVkL2NvcmUvaXNDbGFzc1Byb3BlcnR5LnRzIiwic3JjL3NoYXJlZC9mb3JtYXRKc29uUnBjUmVzdWx0Rm9yUG9ydC50cyIsInNyYy9zaGFyZWQvZm9ybWF0SnNvblJwY1dhbGxldEVycm9yLnRzIiwic3JjL2JhY2tncm91bmQvbWVzc2FnaW5nL21hcFJQQ01lc3NhZ2VUb0NvbnRyb2xsZXIudHMiLCJzcmMvYmFja2dyb3VuZC9tZXNzYWdpbmcvZ2V0UG9ydENvbnRleHQudHMiLCJzcmMvYmFja2dyb3VuZC9tZXNzYWdpbmcvcG9ydC1tZXNzYWdlLWhhbmRsZXJzL2NyZWF0ZVBvcnRNZXNzYWdlSGFuZGxlci50cyIsInNyYy9iYWNrZ3JvdW5kL21lc3NhZ2luZy9wb3J0LW1lc3NhZ2UtaGFuZGxlcnMvY3JlYXRlSFRUUENvbm5lY3Rpb25NZXNzYWdlSGFuZGxlci50cyIsInNyYy9iYWNrZ3JvdW5kL21lc3NhZ2luZy9jb250cm9sbGVyLWV2ZW50LWhhbmRsZXJzL2FjY291bnQtZXZlbnRzLWhhbmRsZXIudHMiLCJzcmMvYmFja2dyb3VuZC9tZXNzYWdpbmcvY29udHJvbGxlci1ldmVudC1oYW5kbGVycy9ldGhlcmV1bS1wcm92aWRlci1ldmVudHMudHMiLCJzcmMvYmFja2dyb3VuZC9yZXNvdXJjZS9tZW1vcnlDYWNoZVJQQy50cyIsInNyYy9iYWNrZ3JvdW5kL2lkbGUtdGltZS1oYW5kbGVyLnRzIiwic3JjL2JhY2tncm91bmQvYnVmZmVyUG9seWZpbGwudHMiLCJzcmMvYmFja2dyb3VuZC9tZXNzYWdpbmcvcG9ydC1tZXNzYWdlLWhhbmRsZXJzL25vdGlmaWNhdGlvbldpbmRvd01lc3NhZ2VIYW5kbGVyLnRzIiwic3JjL3NoYXJlZC9jdXN0b20tcnBjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWFwcGluZyA9IHt9O1xuXG5mdW5jdGlvbiByZWdpc3RlcihwYWlycykge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHBhaXJzKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBtYXBwaW5nW2tleXNbaV1dID0gcGFpcnNba2V5c1tpXV07XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZShpZCkge1xuICB2YXIgcmVzb2x2ZWQgPSBtYXBwaW5nW2lkXTtcblxuICBpZiAocmVzb2x2ZWQgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IHJlc29sdmUgYnVuZGxlIHdpdGggaWQgJyArIGlkKTtcbiAgfVxuXG4gIHJldHVybiByZXNvbHZlZDtcbn1cblxubW9kdWxlLmV4cG9ydHMucmVnaXN0ZXIgPSByZWdpc3Rlcjtcbm1vZHVsZS5leHBvcnRzLnJlc29sdmUgPSByZXNvbHZlOyIsIi8qIHdlYmV4dGVuc2lvbi1wb2x5ZmlsbCAtIHYwLjEwLjAgLSBGcmkgQXVnIDEyIDIwMjIgMTk6NDI6NDQgKi9cbi8qIC0qLSBNb2RlOiBpbmRlbnQtdGFicy1tb2RlOiBuaWw7IGpzLWluZGVudC1sZXZlbDogMiAtKi0gKi9cbi8qIHZpbTogc2V0IHN0cz0yIHN3PTIgZXQgdHc9ODA6ICovXG4vKiBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4gKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gKiBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbmlmICghZ2xvYmFsVGhpcy5jaHJvbWU/LnJ1bnRpbWU/LmlkKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIlRoaXMgc2NyaXB0IHNob3VsZCBvbmx5IGJlIGxvYWRlZCBpbiBhIGJyb3dzZXIgZXh0ZW5zaW9uLlwiKTtcbn1cblxuaWYgKHR5cGVvZiBnbG9iYWxUaGlzLmJyb3dzZXIgPT09IFwidW5kZWZpbmVkXCIgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbFRoaXMuYnJvd3NlcikgIT09IE9iamVjdC5wcm90b3R5cGUpIHtcbiAgY29uc3QgQ0hST01FX1NFTkRfTUVTU0FHRV9DQUxMQkFDS19OT19SRVNQT05TRV9NRVNTQUdFID0gXCJUaGUgbWVzc2FnZSBwb3J0IGNsb3NlZCBiZWZvcmUgYSByZXNwb25zZSB3YXMgcmVjZWl2ZWQuXCI7XG5cbiAgLy8gV3JhcHBpbmcgdGhlIGJ1bGsgb2YgdGhpcyBwb2x5ZmlsbCBpbiBhIG9uZS10aW1lLXVzZSBmdW5jdGlvbiBpcyBhIG1pbm9yXG4gIC8vIG9wdGltaXphdGlvbiBmb3IgRmlyZWZveC4gU2luY2UgU3BpZGVybW9ua2V5IGRvZXMgbm90IGZ1bGx5IHBhcnNlIHRoZVxuICAvLyBjb250ZW50cyBvZiBhIGZ1bmN0aW9uIHVudGlsIHRoZSBmaXJzdCB0aW1lIGl0J3MgY2FsbGVkLCBhbmQgc2luY2UgaXQgd2lsbFxuICAvLyBuZXZlciBhY3R1YWxseSBuZWVkIHRvIGJlIGNhbGxlZCwgdGhpcyBhbGxvd3MgdGhlIHBvbHlmaWxsIHRvIGJlIGluY2x1ZGVkXG4gIC8vIGluIEZpcmVmb3ggbmVhcmx5IGZvciBmcmVlLlxuICBjb25zdCB3cmFwQVBJcyA9IGV4dGVuc2lvbkFQSXMgPT4ge1xuICAgIC8vIE5PVEU6IGFwaU1ldGFkYXRhIGlzIGFzc29jaWF0ZWQgdG8gdGhlIGNvbnRlbnQgb2YgdGhlIGFwaS1tZXRhZGF0YS5qc29uIGZpbGVcbiAgICAvLyBhdCBidWlsZCB0aW1lIGJ5IHJlcGxhY2luZyB0aGUgZm9sbG93aW5nIFwiaW5jbHVkZVwiIHdpdGggdGhlIGNvbnRlbnQgb2YgdGhlXG4gICAgLy8gSlNPTiBmaWxlLlxuICAgIGNvbnN0IGFwaU1ldGFkYXRhID0ge1xuICAgICAgXCJhbGFybXNcIjoge1xuICAgICAgICBcImNsZWFyXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9LFxuICAgICAgICBcImNsZWFyQWxsXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICB9LFxuICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImJvb2ttYXJrc1wiOiB7XG4gICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9LFxuICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZXRDaGlsZHJlblwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZXRSZWNlbnRcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2V0U3ViVHJlZVwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZXRUcmVlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICB9LFxuICAgICAgICBcIm1vdmVcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9LFxuICAgICAgICBcInJlbW92ZVRyZWVcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwic2VhcmNoXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9LFxuICAgICAgICBcInVwZGF0ZVwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYnJvd3NlckFjdGlvblwiOiB7XG4gICAgICAgIFwiZGlzYWJsZVwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwiZW5hYmxlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZXRCYWRnZUJhY2tncm91bmRDb2xvclwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZXRCYWRnZVRleHRcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2V0UG9wdXBcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2V0VGl0bGVcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwib3BlblBvcHVwXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICB9LFxuICAgICAgICBcInNldEJhZGdlQmFja2dyb3VuZENvbG9yXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZXRCYWRnZVRleHRcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcInNldEljb25cIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwic2V0UG9wdXBcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcInNldFRpdGxlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiYnJvd3NpbmdEYXRhXCI6IHtcbiAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVtb3ZlQ2FjaGVcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVtb3ZlQ29va2llc1wiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZW1vdmVEb3dubG9hZHNcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVtb3ZlRm9ybURhdGFcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVtb3ZlSGlzdG9yeVwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZW1vdmVMb2NhbFN0b3JhZ2VcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVtb3ZlUGFzc3dvcmRzXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9LFxuICAgICAgICBcInJlbW92ZVBsdWdpbkRhdGFcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwic2V0dGluZ3NcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImNvbW1hbmRzXCI6IHtcbiAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImNvbnRleHRNZW51c1wiOiB7XG4gICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9LFxuICAgICAgICBcInJlbW92ZUFsbFwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgfSxcbiAgICAgICAgXCJ1cGRhdGVcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImNvb2tpZXNcIjoge1xuICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2V0QWxsQ29va2llU3RvcmVzXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICB9LFxuICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZXRcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImRldnRvb2xzXCI6IHtcbiAgICAgICAgXCJpbnNwZWN0ZWRXaW5kb3dcIjoge1xuICAgICAgICAgIFwiZXZhbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJzaW5nbGVDYWxsYmFja0FyZ1wiOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJwYW5lbHNcIjoge1xuICAgICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAzLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDMsXG4gICAgICAgICAgICBcInNpbmdsZUNhbGxiYWNrQXJnXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZWxlbWVudHNcIjoge1xuICAgICAgICAgICAgXCJjcmVhdGVTaWRlYmFyUGFuZVwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiZG93bmxvYWRzXCI6IHtcbiAgICAgICAgXCJjYW5jZWxcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwiZG93bmxvYWRcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXJhc2VcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2V0RmlsZUljb25cIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgIH0sXG4gICAgICAgIFwib3BlblwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwicGF1c2VcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVtb3ZlRmlsZVwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZXN1bWVcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwic2VhcmNoXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9LFxuICAgICAgICBcInNob3dcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJleHRlbnNpb25cIjoge1xuICAgICAgICBcImlzQWxsb3dlZEZpbGVTY2hlbWVBY2Nlc3NcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgIH0sXG4gICAgICAgIFwiaXNBbGxvd2VkSW5jb2duaXRvQWNjZXNzXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJoaXN0b3J5XCI6IHtcbiAgICAgICAgXCJhZGRVcmxcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwiZGVsZXRlQWxsXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICB9LFxuICAgICAgICBcImRlbGV0ZVJhbmdlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9LFxuICAgICAgICBcImRlbGV0ZVVybFwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZXRWaXNpdHNcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwic2VhcmNoXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJpMThuXCI6IHtcbiAgICAgICAgXCJkZXRlY3RMYW5ndWFnZVwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZXRBY2NlcHRMYW5ndWFnZXNcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImlkZW50aXR5XCI6IHtcbiAgICAgICAgXCJsYXVuY2hXZWJBdXRoRmxvd1wiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiaWRsZVwiOiB7XG4gICAgICAgIFwicXVlcnlTdGF0ZVwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwibWFuYWdlbWVudFwiOiB7XG4gICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9LFxuICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZXRTZWxmXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICB9LFxuICAgICAgICBcInNldEVuYWJsZWRcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgIH0sXG4gICAgICAgIFwidW5pbnN0YWxsU2VsZlwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwibm90aWZpY2F0aW9uc1wiOiB7XG4gICAgICAgIFwiY2xlYXJcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICB9LFxuICAgICAgICBcImdldEFsbFwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZXRQZXJtaXNzaW9uTGV2ZWxcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgIH0sXG4gICAgICAgIFwidXBkYXRlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJwYWdlQWN0aW9uXCI6IHtcbiAgICAgICAgXCJnZXRQb3B1cFwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZXRUaXRsZVwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJoaWRlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZXRJY29uXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9LFxuICAgICAgICBcInNldFBvcHVwXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZXRUaXRsZVwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwic2hvd1wiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcInBlcm1pc3Npb25zXCI6IHtcbiAgICAgICAgXCJjb250YWluc1wiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9LFxuICAgICAgICBcInJlcXVlc3RcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcInJ1bnRpbWVcIjoge1xuICAgICAgICBcImdldEJhY2tncm91bmRQYWdlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICB9LFxuICAgICAgICBcImdldFBsYXRmb3JtSW5mb1wiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgfSxcbiAgICAgICAgXCJvcGVuT3B0aW9uc1BhZ2VcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVxdWVzdFVwZGF0ZUNoZWNrXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICB9LFxuICAgICAgICBcInNlbmRNZXNzYWdlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogM1xuICAgICAgICB9LFxuICAgICAgICBcInNlbmROYXRpdmVNZXNzYWdlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICB9LFxuICAgICAgICBcInNldFVuaW5zdGFsbFVSTFwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwic2Vzc2lvbnNcIjoge1xuICAgICAgICBcImdldERldmljZXNcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2V0UmVjZW50bHlDbG9zZWRcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVzdG9yZVwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwic3RvcmFnZVwiOiB7XG4gICAgICAgIFwibG9jYWxcIjoge1xuICAgICAgICAgIFwiY2xlYXJcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRCeXRlc0luVXNlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwibWFuYWdlZFwiOiB7XG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRCeXRlc0luVXNlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic3luY1wiOiB7XG4gICAgICAgICAgXCJjbGVhclwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEJ5dGVzSW5Vc2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwidGFic1wiOiB7XG4gICAgICAgIFwiY2FwdHVyZVZpc2libGVUYWJcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgIH0sXG4gICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9LFxuICAgICAgICBcImRldGVjdExhbmd1YWdlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9LFxuICAgICAgICBcImRpc2NhcmRcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwiZHVwbGljYXRlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9LFxuICAgICAgICBcImV4ZWN1dGVTY3JpcHRcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9LFxuICAgICAgICBcImdldEN1cnJlbnRcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2V0Wm9vbVwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZXRab29tU2V0dGluZ3NcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ29CYWNrXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9LFxuICAgICAgICBcImdvRm9yd2FyZFwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJoaWdobGlnaHRcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwiaW5zZXJ0Q1NTXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICB9LFxuICAgICAgICBcIm1vdmVcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgIH0sXG4gICAgICAgIFwicXVlcnlcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVsb2FkXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICB9LFxuICAgICAgICBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJyZW1vdmVDU1NcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgIH0sXG4gICAgICAgIFwic2VuZE1lc3NhZ2VcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAzXG4gICAgICAgIH0sXG4gICAgICAgIFwic2V0Wm9vbVwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgfSxcbiAgICAgICAgXCJzZXRab29tU2V0dGluZ3NcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgIH0sXG4gICAgICAgIFwidXBkYXRlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJ0b3BTaXRlc1wiOiB7XG4gICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCJ3ZWJOYXZpZ2F0aW9uXCI6IHtcbiAgICAgICAgXCJnZXRBbGxGcmFtZXNcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2V0RnJhbWVcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIndlYlJlcXVlc3RcIjoge1xuICAgICAgICBcImhhbmRsZXJCZWhhdmlvckNoYW5nZWRcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIndpbmRvd3NcIjoge1xuICAgICAgICBcImNyZWF0ZVwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2V0QWxsXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9LFxuICAgICAgICBcImdldEN1cnJlbnRcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwiZ2V0TGFzdEZvY3VzZWRcIjoge1xuICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgIH0sXG4gICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICB9LFxuICAgICAgICBcInVwZGF0ZVwiOiB7XG4gICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoYXBpTWV0YWRhdGEpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXBpLW1ldGFkYXRhLmpzb24gaGFzIG5vdCBiZWVuIGluY2x1ZGVkIGluIGJyb3dzZXItcG9seWZpbGxcIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBXZWFrTWFwIHN1YmNsYXNzIHdoaWNoIGNyZWF0ZXMgYW5kIHN0b3JlcyBhIHZhbHVlIGZvciBhbnkga2V5IHdoaWNoIGRvZXNcbiAgICAgKiBub3QgZXhpc3Qgd2hlbiBhY2Nlc3NlZCwgYnV0IGJlaGF2ZXMgZXhhY3RseSBhcyBhbiBvcmRpbmFyeSBXZWFrTWFwXG4gICAgICogb3RoZXJ3aXNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY3JlYXRlSXRlbVxuICAgICAqICAgICAgICBBIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgY2FsbGVkIGluIG9yZGVyIHRvIGNyZWF0ZSB0aGUgdmFsdWUgZm9yIGFueVxuICAgICAqICAgICAgICBrZXkgd2hpY2ggZG9lcyBub3QgZXhpc3QsIHRoZSBmaXJzdCB0aW1lIGl0IGlzIGFjY2Vzc2VkLiBUaGVcbiAgICAgKiAgICAgICAgZnVuY3Rpb24gcmVjZWl2ZXMsIGFzIGl0cyBvbmx5IGFyZ3VtZW50LCB0aGUga2V5IGJlaW5nIGNyZWF0ZWQuXG4gICAgICovXG4gICAgY2xhc3MgRGVmYXVsdFdlYWtNYXAgZXh0ZW5kcyBXZWFrTWFwIHtcbiAgICAgIGNvbnN0cnVjdG9yKGNyZWF0ZUl0ZW0sIGl0ZW1zID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN1cGVyKGl0ZW1zKTtcbiAgICAgICAgdGhpcy5jcmVhdGVJdGVtID0gY3JlYXRlSXRlbTtcbiAgICAgIH1cblxuICAgICAgZ2V0KGtleSkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgICB0aGlzLnNldChrZXksIHRoaXMuY3JlYXRlSXRlbShrZXkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdXBlci5nZXQoa2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG9iamVjdCBpcyBhbiBvYmplY3Qgd2l0aCBhIGB0aGVuYCBtZXRob2QsIGFuZCBjYW5cbiAgICAgKiB0aGVyZWZvcmUgYmUgYXNzdW1lZCB0byBiZWhhdmUgYXMgYSBQcm9taXNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdGVzdC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdGhlbmFibGUuXG4gICAgICovXG4gICAgY29uc3QgaXNUaGVuYWJsZSA9IHZhbHVlID0+IHtcbiAgICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09IFwiZnVuY3Rpb25cIjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoLCB3aGVuIGNhbGxlZCwgd2lsbCByZXNvbHZlIG9yIHJlamVjdFxuICAgICAqIHRoZSBnaXZlbiBwcm9taXNlIGJhc2VkIG9uIGhvdyBpdCBpcyBjYWxsZWQ6XG4gICAgICpcbiAgICAgKiAtIElmLCB3aGVuIGNhbGxlZCwgYGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcmAgY29udGFpbnMgYSBub24tbnVsbCBvYmplY3QsXG4gICAgICogICB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCB3aXRoIHRoYXQgdmFsdWUuXG4gICAgICogLSBJZiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggZXhhY3RseSBvbmUgYXJndW1lbnQsIHRoZSBwcm9taXNlIGlzXG4gICAgICogICByZXNvbHZlZCB0byB0aGF0IHZhbHVlLlxuICAgICAqIC0gT3RoZXJ3aXNlLCB0aGUgcHJvbWlzZSBpcyByZXNvbHZlZCB0byBhbiBhcnJheSBjb250YWluaW5nIGFsbCBvZiB0aGVcbiAgICAgKiAgIGZ1bmN0aW9uJ3MgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHByb21pc2VcbiAgICAgKiAgICAgICAgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJlc29sdXRpb24gYW5kIHJlamVjdGlvbiBmdW5jdGlvbnMgb2YgYVxuICAgICAqICAgICAgICBwcm9taXNlLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHByb21pc2UucmVzb2x2ZVxuICAgICAqICAgICAgICBUaGUgcHJvbWlzZSdzIHJlc29sdXRpb24gZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvbWlzZS5yZWplY3RcbiAgICAgKiAgICAgICAgVGhlIHByb21pc2UncyByZWplY3Rpb24gZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG1ldGFkYXRhXG4gICAgICogICAgICAgIE1ldGFkYXRhIGFib3V0IHRoZSB3cmFwcGVkIG1ldGhvZCB3aGljaCBoYXMgY3JlYXRlZCB0aGUgY2FsbGJhY2suXG4gICAgICogQHBhcmFtIHtib29sZWFufSBtZXRhZGF0YS5zaW5nbGVDYWxsYmFja0FyZ1xuICAgICAqICAgICAgICBXaGV0aGVyIG9yIG5vdCB0aGUgcHJvbWlzZSBpcyByZXNvbHZlZCB3aXRoIG9ubHkgdGhlIGZpcnN0XG4gICAgICogICAgICAgIGFyZ3VtZW50IG9mIHRoZSBjYWxsYmFjaywgYWx0ZXJuYXRpdmVseSBhbiBhcnJheSBvZiBhbGwgdGhlXG4gICAgICogICAgICAgIGNhbGxiYWNrIGFyZ3VtZW50cyBpcyByZXNvbHZlZC4gQnkgZGVmYXVsdCwgaWYgdGhlIGNhbGxiYWNrXG4gICAgICogICAgICAgIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCBvbmx5IGEgc2luZ2xlIGFyZ3VtZW50LCB0aGF0IHdpbGwgYmVcbiAgICAgKiAgICAgICAgcmVzb2x2ZWQgdG8gdGhlIHByb21pc2UsIHdoaWxlIGFsbCBhcmd1bWVudHMgd2lsbCBiZSByZXNvbHZlZCBhc1xuICAgICAqICAgICAgICBhbiBhcnJheSBpZiBtdWx0aXBsZSBhcmUgZ2l2ZW4uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gICAgICogICAgICAgIFRoZSBnZW5lcmF0ZWQgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICovXG4gICAgY29uc3QgbWFrZUNhbGxiYWNrID0gKHByb21pc2UsIG1ldGFkYXRhKSA9PiB7XG4gICAgICByZXR1cm4gKC4uLmNhbGxiYWNrQXJncykgPT4ge1xuICAgICAgICBpZiAoZXh0ZW5zaW9uQVBJcy5ydW50aW1lLmxhc3RFcnJvcikge1xuICAgICAgICAgIHByb21pc2UucmVqZWN0KG5ldyBFcnJvcihleHRlbnNpb25BUElzLnJ1bnRpbWUubGFzdEVycm9yLm1lc3NhZ2UpKTtcbiAgICAgICAgfSBlbHNlIGlmIChtZXRhZGF0YS5zaW5nbGVDYWxsYmFja0FyZyB8fFxuICAgICAgICAgICAgICAgICAgIChjYWxsYmFja0FyZ3MubGVuZ3RoIDw9IDEgJiYgbWV0YWRhdGEuc2luZ2xlQ2FsbGJhY2tBcmcgIT09IGZhbHNlKSkge1xuICAgICAgICAgIHByb21pc2UucmVzb2x2ZShjYWxsYmFja0FyZ3NbMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb21pc2UucmVzb2x2ZShjYWxsYmFja0FyZ3MpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBjb25zdCBwbHVyYWxpemVBcmd1bWVudHMgPSAobnVtQXJncykgPT4gbnVtQXJncyA9PSAxID8gXCJhcmd1bWVudFwiIDogXCJhcmd1bWVudHNcIjtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB3cmFwcGVyIGZ1bmN0aW9uIGZvciBhIG1ldGhvZCB3aXRoIHRoZSBnaXZlbiBuYW1lIGFuZCBtZXRhZGF0YS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICogICAgICAgIFRoZSBuYW1lIG9mIHRoZSBtZXRob2Qgd2hpY2ggaXMgYmVpbmcgd3JhcHBlZC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gbWV0YWRhdGFcbiAgICAgKiAgICAgICAgTWV0YWRhdGEgYWJvdXQgdGhlIG1ldGhvZCBiZWluZyB3cmFwcGVkLlxuICAgICAqIEBwYXJhbSB7aW50ZWdlcn0gbWV0YWRhdGEubWluQXJnc1xuICAgICAqICAgICAgICBUaGUgbWluaW11bSBudW1iZXIgb2YgYXJndW1lbnRzIHdoaWNoIG11c3QgYmUgcGFzc2VkIHRvIHRoZVxuICAgICAqICAgICAgICBmdW5jdGlvbi4gSWYgY2FsbGVkIHdpdGggZmV3ZXIgdGhhbiB0aGlzIG51bWJlciBvZiBhcmd1bWVudHMsIHRoZVxuICAgICAqICAgICAgICB3cmFwcGVyIHdpbGwgcmFpc2UgYW4gZXhjZXB0aW9uLlxuICAgICAqIEBwYXJhbSB7aW50ZWdlcn0gbWV0YWRhdGEubWF4QXJnc1xuICAgICAqICAgICAgICBUaGUgbWF4aW11bSBudW1iZXIgb2YgYXJndW1lbnRzIHdoaWNoIG1heSBiZSBwYXNzZWQgdG8gdGhlXG4gICAgICogICAgICAgIGZ1bmN0aW9uLiBJZiBjYWxsZWQgd2l0aCBtb3JlIHRoYW4gdGhpcyBudW1iZXIgb2YgYXJndW1lbnRzLCB0aGVcbiAgICAgKiAgICAgICAgd3JhcHBlciB3aWxsIHJhaXNlIGFuIGV4Y2VwdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IG1ldGFkYXRhLnNpbmdsZUNhbGxiYWNrQXJnXG4gICAgICogICAgICAgIFdoZXRoZXIgb3Igbm90IHRoZSBwcm9taXNlIGlzIHJlc29sdmVkIHdpdGggb25seSB0aGUgZmlyc3RcbiAgICAgKiAgICAgICAgYXJndW1lbnQgb2YgdGhlIGNhbGxiYWNrLCBhbHRlcm5hdGl2ZWx5IGFuIGFycmF5IG9mIGFsbCB0aGVcbiAgICAgKiAgICAgICAgY2FsbGJhY2sgYXJndW1lbnRzIGlzIHJlc29sdmVkLiBCeSBkZWZhdWx0LCBpZiB0aGUgY2FsbGJhY2tcbiAgICAgKiAgICAgICAgZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIG9ubHkgYSBzaW5nbGUgYXJndW1lbnQsIHRoYXQgd2lsbCBiZVxuICAgICAqICAgICAgICByZXNvbHZlZCB0byB0aGUgcHJvbWlzZSwgd2hpbGUgYWxsIGFyZ3VtZW50cyB3aWxsIGJlIHJlc29sdmVkIGFzXG4gICAgICogICAgICAgIGFuIGFycmF5IGlmIG11bHRpcGxlIGFyZSBnaXZlbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihvYmplY3QsIC4uLiopfVxuICAgICAqICAgICAgIFRoZSBnZW5lcmF0ZWQgd3JhcHBlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBjb25zdCB3cmFwQXN5bmNGdW5jdGlvbiA9IChuYW1lLCBtZXRhZGF0YSkgPT4ge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGFzeW5jRnVuY3Rpb25XcmFwcGVyKHRhcmdldCwgLi4uYXJncykge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPCBtZXRhZGF0YS5taW5BcmdzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhdCBsZWFzdCAke21ldGFkYXRhLm1pbkFyZ3N9ICR7cGx1cmFsaXplQXJndW1lbnRzKG1ldGFkYXRhLm1pbkFyZ3MpfSBmb3IgJHtuYW1lfSgpLCBnb3QgJHthcmdzLmxlbmd0aH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA+IG1ldGFkYXRhLm1heEFyZ3MpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGF0IG1vc3QgJHttZXRhZGF0YS5tYXhBcmdzfSAke3BsdXJhbGl6ZUFyZ3VtZW50cyhtZXRhZGF0YS5tYXhBcmdzKX0gZm9yICR7bmFtZX0oKSwgZ290ICR7YXJncy5sZW5ndGh9YCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIGlmIChtZXRhZGF0YS5mYWxsYmFja1RvTm9DYWxsYmFjaykge1xuICAgICAgICAgICAgLy8gVGhpcyBBUEkgbWV0aG9kIGhhcyBjdXJyZW50bHkgbm8gY2FsbGJhY2sgb24gQ2hyb21lLCBidXQgaXQgcmV0dXJuIGEgcHJvbWlzZSBvbiBGaXJlZm94LFxuICAgICAgICAgICAgLy8gYW5kIHNvIHRoZSBwb2x5ZmlsbCB3aWxsIHRyeSB0byBjYWxsIGl0IHdpdGggYSBjYWxsYmFjayBmaXJzdCwgYW5kIGl0IHdpbGwgZmFsbGJhY2tcbiAgICAgICAgICAgIC8vIHRvIG5vdCBwYXNzaW5nIHRoZSBjYWxsYmFjayBpZiB0aGUgZmlyc3QgY2FsbCBmYWlscy5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHRhcmdldFtuYW1lXSguLi5hcmdzLCBtYWtlQ2FsbGJhY2soe3Jlc29sdmUsIHJlamVjdH0sIG1ldGFkYXRhKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChjYkVycm9yKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHtuYW1lfSBBUEkgbWV0aG9kIGRvZXNuJ3Qgc2VlbSB0byBzdXBwb3J0IHRoZSBjYWxsYmFjayBwYXJhbWV0ZXIsIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmYWxsaW5nIGJhY2sgdG8gY2FsbCBpdCB3aXRob3V0IGEgY2FsbGJhY2s6IFwiLCBjYkVycm9yKTtcblxuICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0oLi4uYXJncyk7XG5cbiAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBBUEkgbWV0aG9kIG1ldGFkYXRhLCBzbyB0aGF0IHRoZSBuZXh0IEFQSSBjYWxscyB3aWxsIG5vdCB0cnkgdG9cbiAgICAgICAgICAgICAgLy8gdXNlIHRoZSB1bnN1cHBvcnRlZCBjYWxsYmFjayBhbnltb3JlLlxuICAgICAgICAgICAgICBtZXRhZGF0YS5mYWxsYmFja1RvTm9DYWxsYmFjayA9IGZhbHNlO1xuICAgICAgICAgICAgICBtZXRhZGF0YS5ub0NhbGxiYWNrID0gdHJ1ZTtcblxuICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChtZXRhZGF0YS5ub0NhbGxiYWNrKSB7XG4gICAgICAgICAgICB0YXJnZXRbbmFtZV0oLi4uYXJncyk7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldFtuYW1lXSguLi5hcmdzLCBtYWtlQ2FsbGJhY2soe3Jlc29sdmUsIHJlamVjdH0sIG1ldGFkYXRhKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFdyYXBzIGFuIGV4aXN0aW5nIG1ldGhvZCBvZiB0aGUgdGFyZ2V0IG9iamVjdCwgc28gdGhhdCBjYWxscyB0byBpdCBhcmVcbiAgICAgKiBpbnRlcmNlcHRlZCBieSB0aGUgZ2l2ZW4gd3JhcHBlciBmdW5jdGlvbi4gVGhlIHdyYXBwZXIgZnVuY3Rpb24gcmVjZWl2ZXMsXG4gICAgICogYXMgaXRzIGZpcnN0IGFyZ3VtZW50LCB0aGUgb3JpZ2luYWwgYHRhcmdldGAgb2JqZWN0LCBmb2xsb3dlZCBieSBlYWNoIG9mXG4gICAgICogdGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIG9yaWdpbmFsIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXRcbiAgICAgKiAgICAgICAgVGhlIG9yaWdpbmFsIHRhcmdldCBvYmplY3QgdGhhdCB0aGUgd3JhcHBlZCBtZXRob2QgYmVsb25ncyB0by5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZXRob2RcbiAgICAgKiAgICAgICAgVGhlIG1ldGhvZCBiZWluZyB3cmFwcGVkLiBUaGlzIGlzIHVzZWQgYXMgdGhlIHRhcmdldCBvZiB0aGUgUHJveHlcbiAgICAgKiAgICAgICAgb2JqZWN0IHdoaWNoIGlzIGNyZWF0ZWQgdG8gd3JhcCB0aGUgbWV0aG9kLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IHdyYXBwZXJcbiAgICAgKiAgICAgICAgVGhlIHdyYXBwZXIgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGluIHBsYWNlIG9mIGEgZGlyZWN0IGludm9jYXRpb25cbiAgICAgKiAgICAgICAgb2YgdGhlIHdyYXBwZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb3h5PGZ1bmN0aW9uPn1cbiAgICAgKiAgICAgICAgQSBQcm94eSBvYmplY3QgZm9yIHRoZSBnaXZlbiBtZXRob2QsIHdoaWNoIGludm9rZXMgdGhlIGdpdmVuIHdyYXBwZXJcbiAgICAgKiAgICAgICAgbWV0aG9kIGluIGl0cyBwbGFjZS5cbiAgICAgKi9cbiAgICBjb25zdCB3cmFwTWV0aG9kID0gKHRhcmdldCwgbWV0aG9kLCB3cmFwcGVyKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb3h5KG1ldGhvZCwge1xuICAgICAgICBhcHBseSh0YXJnZXRNZXRob2QsIHRoaXNPYmosIGFyZ3MpIHtcbiAgICAgICAgICByZXR1cm4gd3JhcHBlci5jYWxsKHRoaXNPYmosIHRhcmdldCwgLi4uYXJncyk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgbGV0IGhhc093blByb3BlcnR5ID0gRnVuY3Rpb24uY2FsbC5iaW5kKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuXG4gICAgLyoqXG4gICAgICogV3JhcHMgYW4gb2JqZWN0IGluIGEgUHJveHkgd2hpY2ggaW50ZXJjZXB0cyBhbmQgd3JhcHMgY2VydGFpbiBtZXRob2RzXG4gICAgICogYmFzZWQgb24gdGhlIGdpdmVuIGB3cmFwcGVyc2AgYW5kIGBtZXRhZGF0YWAgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXRcbiAgICAgKiAgICAgICAgVGhlIHRhcmdldCBvYmplY3QgdG8gd3JhcC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbd3JhcHBlcnMgPSB7fV1cbiAgICAgKiAgICAgICAgQW4gb2JqZWN0IHRyZWUgY29udGFpbmluZyB3cmFwcGVyIGZ1bmN0aW9ucyBmb3Igc3BlY2lhbCBjYXNlcy4gQW55XG4gICAgICogICAgICAgIGZ1bmN0aW9uIHByZXNlbnQgaW4gdGhpcyBvYmplY3QgdHJlZSBpcyBjYWxsZWQgaW4gcGxhY2Ugb2YgdGhlXG4gICAgICogICAgICAgIG1ldGhvZCBpbiB0aGUgc2FtZSBsb2NhdGlvbiBpbiB0aGUgYHRhcmdldGAgb2JqZWN0IHRyZWUuIFRoZXNlXG4gICAgICogICAgICAgIHdyYXBwZXIgbWV0aG9kcyBhcmUgaW52b2tlZCBhcyBkZXNjcmliZWQgaW4ge0BzZWUgd3JhcE1ldGhvZH0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW21ldGFkYXRhID0ge31dXG4gICAgICogICAgICAgIEFuIG9iamVjdCB0cmVlIGNvbnRhaW5pbmcgbWV0YWRhdGEgdXNlZCB0byBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlXG4gICAgICogICAgICAgIFByb21pc2UtYmFzZWQgd3JhcHBlciBmdW5jdGlvbnMgZm9yIGFzeW5jaHJvbm91cy4gQW55IGZ1bmN0aW9uIGluXG4gICAgICogICAgICAgIHRoZSBgdGFyZ2V0YCBvYmplY3QgdHJlZSB3aGljaCBoYXMgYSBjb3JyZXNwb25kaW5nIG1ldGFkYXRhIG9iamVjdFxuICAgICAqICAgICAgICBpbiB0aGUgc2FtZSBsb2NhdGlvbiBpbiB0aGUgYG1ldGFkYXRhYCB0cmVlIGlzIHJlcGxhY2VkIHdpdGggYW5cbiAgICAgKiAgICAgICAgYXV0b21hdGljYWxseS1nZW5lcmF0ZWQgd3JhcHBlciBmdW5jdGlvbiwgYXMgZGVzY3JpYmVkIGluXG4gICAgICogICAgICAgIHtAc2VlIHdyYXBBc3luY0Z1bmN0aW9ufVxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb3h5PG9iamVjdD59XG4gICAgICovXG4gICAgY29uc3Qgd3JhcE9iamVjdCA9ICh0YXJnZXQsIHdyYXBwZXJzID0ge30sIG1ldGFkYXRhID0ge30pID0+IHtcbiAgICAgIGxldCBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICBsZXQgaGFuZGxlcnMgPSB7XG4gICAgICAgIGhhcyhwcm94eVRhcmdldCwgcHJvcCkge1xuICAgICAgICAgIHJldHVybiBwcm9wIGluIHRhcmdldCB8fCBwcm9wIGluIGNhY2hlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldChwcm94eVRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICBpZiAocHJvcCBpbiBjYWNoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlW3Byb3BdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghKHByb3AgaW4gdGFyZ2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsZXQgdmFsdWUgPSB0YXJnZXRbcHJvcF07XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBtZXRob2Qgb24gdGhlIHVuZGVybHlpbmcgb2JqZWN0LiBDaGVjayBpZiB3ZSBuZWVkIHRvIGRvXG4gICAgICAgICAgICAvLyBhbnkgd3JhcHBpbmcuXG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd3JhcHBlcnNbcHJvcF0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAvLyBXZSBoYXZlIGEgc3BlY2lhbC1jYXNlIHdyYXBwZXIgZm9yIHRoaXMgbWV0aG9kLlxuICAgICAgICAgICAgICB2YWx1ZSA9IHdyYXBNZXRob2QodGFyZ2V0LCB0YXJnZXRbcHJvcF0sIHdyYXBwZXJzW3Byb3BdKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzT3duUHJvcGVydHkobWV0YWRhdGEsIHByb3ApKSB7XG4gICAgICAgICAgICAgIC8vIFRoaXMgaXMgYW4gYXN5bmMgbWV0aG9kIHRoYXQgd2UgaGF2ZSBtZXRhZGF0YSBmb3IuIENyZWF0ZSBhXG4gICAgICAgICAgICAgIC8vIFByb21pc2Ugd3JhcHBlciBmb3IgaXQuXG4gICAgICAgICAgICAgIGxldCB3cmFwcGVyID0gd3JhcEFzeW5jRnVuY3Rpb24ocHJvcCwgbWV0YWRhdGFbcHJvcF0pO1xuICAgICAgICAgICAgICB2YWx1ZSA9IHdyYXBNZXRob2QodGFyZ2V0LCB0YXJnZXRbcHJvcF0sIHdyYXBwZXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIG1ldGhvZCB0aGF0IHdlIGRvbid0IGtub3cgb3IgY2FyZSBhYm91dC4gUmV0dXJuIHRoZVxuICAgICAgICAgICAgICAvLyBvcmlnaW5hbCBtZXRob2QsIGJvdW5kIHRvIHRoZSB1bmRlcmx5aW5nIG9iamVjdC5cbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5iaW5kKHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgIChoYXNPd25Qcm9wZXJ0eSh3cmFwcGVycywgcHJvcCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICBoYXNPd25Qcm9wZXJ0eShtZXRhZGF0YSwgcHJvcCkpKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGlzIGFuIG9iamVjdCB0aGF0IHdlIG5lZWQgdG8gZG8gc29tZSB3cmFwcGluZyBmb3IgdGhlIGNoaWxkcmVuXG4gICAgICAgICAgICAvLyBvZi4gQ3JlYXRlIGEgc3ViLW9iamVjdCB3cmFwcGVyIGZvciBpdCB3aXRoIHRoZSBhcHByb3ByaWF0ZSBjaGlsZFxuICAgICAgICAgICAgLy8gbWV0YWRhdGEuXG4gICAgICAgICAgICB2YWx1ZSA9IHdyYXBPYmplY3QodmFsdWUsIHdyYXBwZXJzW3Byb3BdLCBtZXRhZGF0YVtwcm9wXSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNPd25Qcm9wZXJ0eShtZXRhZGF0YSwgXCIqXCIpKSB7XG4gICAgICAgICAgICAvLyBXcmFwIGFsbCBwcm9wZXJ0aWVzIGluICogbmFtZXNwYWNlLlxuICAgICAgICAgICAgdmFsdWUgPSB3cmFwT2JqZWN0KHZhbHVlLCB3cmFwcGVyc1twcm9wXSwgbWV0YWRhdGFbXCIqXCJdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBkbyBhbnkgd3JhcHBpbmcgZm9yIHRoaXMgcHJvcGVydHksXG4gICAgICAgICAgICAvLyBzbyBqdXN0IGZvcndhcmQgYWxsIGFjY2VzcyB0byB0aGUgdW5kZXJseWluZyBvYmplY3QuXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2FjaGUsIHByb3AsIHtcbiAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhY2hlW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldChwcm94eVRhcmdldCwgcHJvcCwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgICAgICAgaWYgKHByb3AgaW4gY2FjaGUpIHtcbiAgICAgICAgICAgIGNhY2hlW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICBkZWZpbmVQcm9wZXJ0eShwcm94eVRhcmdldCwgcHJvcCwgZGVzYykge1xuICAgICAgICAgIHJldHVybiBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGNhY2hlLCBwcm9wLCBkZXNjKTtcbiAgICAgICAgfSxcblxuICAgICAgICBkZWxldGVQcm9wZXJ0eShwcm94eVRhcmdldCwgcHJvcCkge1xuICAgICAgICAgIHJldHVybiBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KGNhY2hlLCBwcm9wKTtcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIC8vIFBlciBjb250cmFjdCBvZiB0aGUgUHJveHkgQVBJLCB0aGUgXCJnZXRcIiBwcm94eSBoYW5kbGVyIG11c3QgcmV0dXJuIHRoZVxuICAgICAgLy8gb3JpZ2luYWwgdmFsdWUgb2YgdGhlIHRhcmdldCBpZiB0aGF0IHZhbHVlIGlzIGRlY2xhcmVkIHJlYWQtb25seSBhbmRcbiAgICAgIC8vIG5vbi1jb25maWd1cmFibGUuIEZvciB0aGlzIHJlYXNvbiwgd2UgY3JlYXRlIGFuIG9iamVjdCB3aXRoIHRoZVxuICAgICAgLy8gcHJvdG90eXBlIHNldCB0byBgdGFyZ2V0YCBpbnN0ZWFkIG9mIHVzaW5nIGB0YXJnZXRgIGRpcmVjdGx5LlxuICAgICAgLy8gT3RoZXJ3aXNlIHdlIGNhbm5vdCByZXR1cm4gYSBjdXN0b20gb2JqZWN0IGZvciBBUElzIHRoYXRcbiAgICAgIC8vIGFyZSBkZWNsYXJlZCByZWFkLW9ubHkgYW5kIG5vbi1jb25maWd1cmFibGUsIHN1Y2ggYXMgYGNocm9tZS5kZXZ0b29sc2AuXG4gICAgICAvL1xuICAgICAgLy8gVGhlIHByb3h5IGhhbmRsZXJzIHRoZW1zZWx2ZXMgd2lsbCBzdGlsbCB1c2UgdGhlIG9yaWdpbmFsIGB0YXJnZXRgXG4gICAgICAvLyBpbnN0ZWFkIG9mIHRoZSBgcHJveHlUYXJnZXRgLCBzbyB0aGF0IHRoZSBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzIGFyZVxuICAgICAgLy8gZGVyZWZlcmVuY2VkIHZpYSB0aGUgb3JpZ2luYWwgdGFyZ2V0cy5cbiAgICAgIGxldCBwcm94eVRhcmdldCA9IE9iamVjdC5jcmVhdGUodGFyZ2V0KTtcbiAgICAgIHJldHVybiBuZXcgUHJveHkocHJveHlUYXJnZXQsIGhhbmRsZXJzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNldCBvZiB3cmFwcGVyIGZ1bmN0aW9ucyBmb3IgYW4gZXZlbnQgb2JqZWN0LCB3aGljaCBoYW5kbGVzXG4gICAgICogd3JhcHBpbmcgb2YgbGlzdGVuZXIgZnVuY3Rpb25zIHRoYXQgdGhvc2UgbWVzc2FnZXMgYXJlIHBhc3NlZC5cbiAgICAgKlxuICAgICAqIEEgc2luZ2xlIHdyYXBwZXIgaXMgY3JlYXRlZCBmb3IgZWFjaCBsaXN0ZW5lciBmdW5jdGlvbiwgYW5kIHN0b3JlZCBpbiBhXG4gICAgICogbWFwLiBTdWJzZXF1ZW50IGNhbGxzIHRvIGBhZGRMaXN0ZW5lcmAsIGBoYXNMaXN0ZW5lcmAsIG9yIGByZW1vdmVMaXN0ZW5lcmBcbiAgICAgKiByZXRyaWV2ZSB0aGUgb3JpZ2luYWwgd3JhcHBlciwgc28gdGhhdCAgYXR0ZW1wdHMgdG8gcmVtb3ZlIGFcbiAgICAgKiBwcmV2aW91c2x5LWFkZGVkIGxpc3RlbmVyIHdvcmsgYXMgZXhwZWN0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0RlZmF1bHRXZWFrTWFwPGZ1bmN0aW9uLCBmdW5jdGlvbj59IHdyYXBwZXJNYXBcbiAgICAgKiAgICAgICAgQSBEZWZhdWx0V2Vha01hcCBvYmplY3Qgd2hpY2ggd2lsbCBjcmVhdGUgdGhlIGFwcHJvcHJpYXRlIHdyYXBwZXJcbiAgICAgKiAgICAgICAgZm9yIGEgZ2l2ZW4gbGlzdGVuZXIgZnVuY3Rpb24gd2hlbiBvbmUgZG9lcyBub3QgZXhpc3QsIGFuZCByZXRyaWV2ZVxuICAgICAqICAgICAgICBhbiBleGlzdGluZyBvbmUgd2hlbiBpdCBkb2VzLlxuICAgICAqXG4gICAgICogQHJldHVybnMge29iamVjdH1cbiAgICAgKi9cbiAgICBjb25zdCB3cmFwRXZlbnQgPSB3cmFwcGVyTWFwID0+ICh7XG4gICAgICBhZGRMaXN0ZW5lcih0YXJnZXQsIGxpc3RlbmVyLCAuLi5hcmdzKSB7XG4gICAgICAgIHRhcmdldC5hZGRMaXN0ZW5lcih3cmFwcGVyTWFwLmdldChsaXN0ZW5lciksIC4uLmFyZ3MpO1xuICAgICAgfSxcblxuICAgICAgaGFzTGlzdGVuZXIodGFyZ2V0LCBsaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gdGFyZ2V0Lmhhc0xpc3RlbmVyKHdyYXBwZXJNYXAuZ2V0KGxpc3RlbmVyKSk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmVMaXN0ZW5lcih0YXJnZXQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRhcmdldC5yZW1vdmVMaXN0ZW5lcih3cmFwcGVyTWFwLmdldChsaXN0ZW5lcikpO1xuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGNvbnN0IG9uUmVxdWVzdEZpbmlzaGVkV3JhcHBlcnMgPSBuZXcgRGVmYXVsdFdlYWtNYXAobGlzdGVuZXIgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBsaXN0ZW5lcjtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBXcmFwcyBhbiBvblJlcXVlc3RGaW5pc2hlZCBsaXN0ZW5lciBmdW5jdGlvbiBzbyB0aGF0IGl0IHdpbGwgcmV0dXJuIGFcbiAgICAgICAqIGBnZXRDb250ZW50KClgIHByb3BlcnR5IHdoaWNoIHJldHVybnMgYSBgUHJvbWlzZWAgcmF0aGVyIHRoYW4gdXNpbmcgYVxuICAgICAgICogY2FsbGJhY2sgQVBJLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZXFcbiAgICAgICAqICAgICAgICBUaGUgSEFSIGVudHJ5IG9iamVjdCByZXByZXNlbnRpbmcgdGhlIG5ldHdvcmsgcmVxdWVzdC5cbiAgICAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG9uUmVxdWVzdEZpbmlzaGVkKHJlcSkge1xuICAgICAgICBjb25zdCB3cmFwcGVkUmVxID0gd3JhcE9iamVjdChyZXEsIHt9IC8qIHdyYXBwZXJzICovLCB7XG4gICAgICAgICAgZ2V0Q29udGVudDoge1xuICAgICAgICAgICAgbWluQXJnczogMCxcbiAgICAgICAgICAgIG1heEFyZ3M6IDAsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGxpc3RlbmVyKHdyYXBwZWRSZXEpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIGNvbnN0IG9uTWVzc2FnZVdyYXBwZXJzID0gbmV3IERlZmF1bHRXZWFrTWFwKGxpc3RlbmVyID0+IHtcbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gbGlzdGVuZXI7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogV3JhcHMgYSBtZXNzYWdlIGxpc3RlbmVyIGZ1bmN0aW9uIHNvIHRoYXQgaXQgbWF5IHNlbmQgcmVzcG9uc2VzIGJhc2VkIG9uXG4gICAgICAgKiBpdHMgcmV0dXJuIHZhbHVlLCByYXRoZXIgdGhhbiBieSByZXR1cm5pbmcgYSBzZW50aW5lbCB2YWx1ZSBhbmQgY2FsbGluZyBhXG4gICAgICAgKiBjYWxsYmFjay4gSWYgdGhlIGxpc3RlbmVyIGZ1bmN0aW9uIHJldHVybnMgYSBQcm9taXNlLCB0aGUgcmVzcG9uc2UgaXNcbiAgICAgICAqIHNlbnQgd2hlbiB0aGUgcHJvbWlzZSBlaXRoZXIgcmVzb2x2ZXMgb3IgcmVqZWN0cy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyp9IG1lc3NhZ2VcbiAgICAgICAqICAgICAgICBUaGUgbWVzc2FnZSBzZW50IGJ5IHRoZSBvdGhlciBlbmQgb2YgdGhlIGNoYW5uZWwuXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gc2VuZGVyXG4gICAgICAgKiAgICAgICAgRGV0YWlscyBhYm91dCB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbigqKX0gc2VuZFJlc3BvbnNlXG4gICAgICAgKiAgICAgICAgQSBjYWxsYmFjayB3aGljaCwgd2hlbiBjYWxsZWQgd2l0aCBhbiBhcmJpdHJhcnkgYXJndW1lbnQsIHNlbmRzXG4gICAgICAgKiAgICAgICAgdGhhdCB2YWx1ZSBhcyBhIHJlc3BvbnNlLlxuICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgKiAgICAgICAgVHJ1ZSBpZiB0aGUgd3JhcHBlZCBsaXN0ZW5lciByZXR1cm5lZCBhIFByb21pc2UsIHdoaWNoIHdpbGwgbGF0ZXJcbiAgICAgICAqICAgICAgICB5aWVsZCBhIHJlc3BvbnNlLiBGYWxzZSBvdGhlcndpc2UuXG4gICAgICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBvbk1lc3NhZ2UobWVzc2FnZSwgc2VuZGVyLCBzZW5kUmVzcG9uc2UpIHtcbiAgICAgICAgbGV0IGRpZENhbGxTZW5kUmVzcG9uc2UgPSBmYWxzZTtcblxuICAgICAgICBsZXQgd3JhcHBlZFNlbmRSZXNwb25zZTtcbiAgICAgICAgbGV0IHNlbmRSZXNwb25zZVByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICB3cmFwcGVkU2VuZFJlc3BvbnNlID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGRpZENhbGxTZW5kUmVzcG9uc2UgPSB0cnVlO1xuICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXN1bHQgPSBsaXN0ZW5lcihtZXNzYWdlLCBzZW5kZXIsIHdyYXBwZWRTZW5kUmVzcG9uc2UpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICByZXN1bHQgPSBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaXNSZXN1bHRUaGVuYWJsZSA9IHJlc3VsdCAhPT0gdHJ1ZSAmJiBpc1RoZW5hYmxlKHJlc3VsdCk7XG5cbiAgICAgICAgLy8gSWYgdGhlIGxpc3RlbmVyIGRpZG4ndCByZXR1cm5lZCB0cnVlIG9yIGEgUHJvbWlzZSwgb3IgY2FsbGVkXG4gICAgICAgIC8vIHdyYXBwZWRTZW5kUmVzcG9uc2Ugc3luY2hyb25vdXNseSwgd2UgY2FuIGV4aXQgZWFybGllclxuICAgICAgICAvLyBiZWNhdXNlIHRoZXJlIHdpbGwgYmUgbm8gcmVzcG9uc2Ugc2VudCBmcm9tIHRoaXMgbGlzdGVuZXIuXG4gICAgICAgIGlmIChyZXN1bHQgIT09IHRydWUgJiYgIWlzUmVzdWx0VGhlbmFibGUgJiYgIWRpZENhbGxTZW5kUmVzcG9uc2UpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBIHNtYWxsIGhlbHBlciB0byBzZW5kIHRoZSBtZXNzYWdlIGlmIHRoZSBwcm9taXNlIHJlc29sdmVzXG4gICAgICAgIC8vIGFuZCBhbiBlcnJvciBpZiB0aGUgcHJvbWlzZSByZWplY3RzIChhIHdyYXBwZWQgc2VuZE1lc3NhZ2UgaGFzXG4gICAgICAgIC8vIHRvIHRyYW5zbGF0ZSB0aGUgbWVzc2FnZSBpbnRvIGEgcmVzb2x2ZWQgcHJvbWlzZSBvciBhIHJlamVjdGVkXG4gICAgICAgIC8vIHByb21pc2UpLlxuICAgICAgICBjb25zdCBzZW5kUHJvbWlzZWRSZXN1bHQgPSAocHJvbWlzZSkgPT4ge1xuICAgICAgICAgIHByb21pc2UudGhlbihtc2cgPT4ge1xuICAgICAgICAgICAgLy8gc2VuZCB0aGUgbWVzc2FnZSB2YWx1ZS5cbiAgICAgICAgICAgIHNlbmRSZXNwb25zZShtc2cpO1xuICAgICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgIC8vIFNlbmQgYSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBlcnJvciBpZiB0aGUgcmVqZWN0ZWQgdmFsdWVcbiAgICAgICAgICAgIC8vIGlzIGFuIGluc3RhbmNlIG9mIGVycm9yLCBvciB0aGUgb2JqZWN0IGl0c2VsZiBvdGhlcndpc2UuXG4gICAgICAgICAgICBsZXQgbWVzc2FnZTtcbiAgICAgICAgICAgIGlmIChlcnJvciAmJiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciB8fFxuICAgICAgICAgICAgICAgIHR5cGVvZiBlcnJvci5tZXNzYWdlID09PSBcInN0cmluZ1wiKSkge1xuICAgICAgICAgICAgICBtZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWRcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHtcbiAgICAgICAgICAgICAgX19tb3pXZWJFeHRlbnNpb25Qb2x5ZmlsbFJlamVjdF9fOiB0cnVlLFxuICAgICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIC8vIFByaW50IGFuIGVycm9yIG9uIHRoZSBjb25zb2xlIGlmIHVuYWJsZSB0byBzZW5kIHRoZSByZXNwb25zZS5cbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gc2VuZCBvbk1lc3NhZ2UgcmVqZWN0ZWQgcmVwbHlcIiwgZXJyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJZiB0aGUgbGlzdGVuZXIgcmV0dXJuZWQgYSBQcm9taXNlLCBzZW5kIHRoZSByZXNvbHZlZCB2YWx1ZSBhcyBhXG4gICAgICAgIC8vIHJlc3VsdCwgb3RoZXJ3aXNlIHdhaXQgdGhlIHByb21pc2UgcmVsYXRlZCB0byB0aGUgd3JhcHBlZFNlbmRSZXNwb25zZVxuICAgICAgICAvLyBjYWxsYmFjayB0byByZXNvbHZlIGFuZCBzZW5kIGl0IGFzIGEgcmVzcG9uc2UuXG4gICAgICAgIGlmIChpc1Jlc3VsdFRoZW5hYmxlKSB7XG4gICAgICAgICAgc2VuZFByb21pc2VkUmVzdWx0KHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VuZFByb21pc2VkUmVzdWx0KHNlbmRSZXNwb25zZVByb21pc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTGV0IENocm9tZSBrbm93IHRoYXQgdGhlIGxpc3RlbmVyIGlzIHJlcGx5aW5nLlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBjb25zdCB3cmFwcGVkU2VuZE1lc3NhZ2VDYWxsYmFjayA9ICh7cmVqZWN0LCByZXNvbHZlfSwgcmVwbHkpID0+IHtcbiAgICAgIGlmIChleHRlbnNpb25BUElzLnJ1bnRpbWUubGFzdEVycm9yKSB7XG4gICAgICAgIC8vIERldGVjdCB3aGVuIG5vbmUgb2YgdGhlIGxpc3RlbmVycyByZXBsaWVkIHRvIHRoZSBzZW5kTWVzc2FnZSBjYWxsIGFuZCByZXNvbHZlXG4gICAgICAgIC8vIHRoZSBwcm9taXNlIHRvIHVuZGVmaW5lZCBhcyBpbiBGaXJlZm94LlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvd2ViZXh0ZW5zaW9uLXBvbHlmaWxsL2lzc3Vlcy8xMzBcbiAgICAgICAgaWYgKGV4dGVuc2lvbkFQSXMucnVudGltZS5sYXN0RXJyb3IubWVzc2FnZSA9PT0gQ0hST01FX1NFTkRfTUVTU0FHRV9DQUxMQkFDS19OT19SRVNQT05TRV9NRVNTQUdFKSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoZXh0ZW5zaW9uQVBJcy5ydW50aW1lLmxhc3RFcnJvci5tZXNzYWdlKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmVwbHkgJiYgcmVwbHkuX19tb3pXZWJFeHRlbnNpb25Qb2x5ZmlsbFJlamVjdF9fKSB7XG4gICAgICAgIC8vIENvbnZlcnQgYmFjayB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgZXJyb3IgaW50b1xuICAgICAgICAvLyBhbiBFcnJvciBpbnN0YW5jZS5cbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihyZXBseS5tZXNzYWdlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKHJlcGx5KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3Qgd3JhcHBlZFNlbmRNZXNzYWdlID0gKG5hbWUsIG1ldGFkYXRhLCBhcGlOYW1lc3BhY2VPYmosIC4uLmFyZ3MpID0+IHtcbiAgICAgIGlmIChhcmdzLmxlbmd0aCA8IG1ldGFkYXRhLm1pbkFyZ3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhdCBsZWFzdCAke21ldGFkYXRhLm1pbkFyZ3N9ICR7cGx1cmFsaXplQXJndW1lbnRzKG1ldGFkYXRhLm1pbkFyZ3MpfSBmb3IgJHtuYW1lfSgpLCBnb3QgJHthcmdzLmxlbmd0aH1gKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gbWV0YWRhdGEubWF4QXJncykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGF0IG1vc3QgJHttZXRhZGF0YS5tYXhBcmdzfSAke3BsdXJhbGl6ZUFyZ3VtZW50cyhtZXRhZGF0YS5tYXhBcmdzKX0gZm9yICR7bmFtZX0oKSwgZ290ICR7YXJncy5sZW5ndGh9YCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHdyYXBwZWRDYiA9IHdyYXBwZWRTZW5kTWVzc2FnZUNhbGxiYWNrLmJpbmQobnVsbCwge3Jlc29sdmUsIHJlamVjdH0pO1xuICAgICAgICBhcmdzLnB1c2god3JhcHBlZENiKTtcbiAgICAgICAgYXBpTmFtZXNwYWNlT2JqLnNlbmRNZXNzYWdlKC4uLmFyZ3MpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHN0YXRpY1dyYXBwZXJzID0ge1xuICAgICAgZGV2dG9vbHM6IHtcbiAgICAgICAgbmV0d29yazoge1xuICAgICAgICAgIG9uUmVxdWVzdEZpbmlzaGVkOiB3cmFwRXZlbnQob25SZXF1ZXN0RmluaXNoZWRXcmFwcGVycyksXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgcnVudGltZToge1xuICAgICAgICBvbk1lc3NhZ2U6IHdyYXBFdmVudChvbk1lc3NhZ2VXcmFwcGVycyksXG4gICAgICAgIG9uTWVzc2FnZUV4dGVybmFsOiB3cmFwRXZlbnQob25NZXNzYWdlV3JhcHBlcnMpLFxuICAgICAgICBzZW5kTWVzc2FnZTogd3JhcHBlZFNlbmRNZXNzYWdlLmJpbmQobnVsbCwgXCJzZW5kTWVzc2FnZVwiLCB7bWluQXJnczogMSwgbWF4QXJnczogM30pLFxuICAgICAgfSxcbiAgICAgIHRhYnM6IHtcbiAgICAgICAgc2VuZE1lc3NhZ2U6IHdyYXBwZWRTZW5kTWVzc2FnZS5iaW5kKG51bGwsIFwic2VuZE1lc3NhZ2VcIiwge21pbkFyZ3M6IDIsIG1heEFyZ3M6IDN9KSxcbiAgICAgIH0sXG4gICAgfTtcbiAgICBjb25zdCBzZXR0aW5nTWV0YWRhdGEgPSB7XG4gICAgICBjbGVhcjoge21pbkFyZ3M6IDEsIG1heEFyZ3M6IDF9LFxuICAgICAgZ2V0OiB7bWluQXJnczogMSwgbWF4QXJnczogMX0sXG4gICAgICBzZXQ6IHttaW5BcmdzOiAxLCBtYXhBcmdzOiAxfSxcbiAgICB9O1xuICAgIGFwaU1ldGFkYXRhLnByaXZhY3kgPSB7XG4gICAgICBuZXR3b3JrOiB7XCIqXCI6IHNldHRpbmdNZXRhZGF0YX0sXG4gICAgICBzZXJ2aWNlczoge1wiKlwiOiBzZXR0aW5nTWV0YWRhdGF9LFxuICAgICAgd2Vic2l0ZXM6IHtcIipcIjogc2V0dGluZ01ldGFkYXRhfSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHdyYXBPYmplY3QoZXh0ZW5zaW9uQVBJcywgc3RhdGljV3JhcHBlcnMsIGFwaU1ldGFkYXRhKTtcbiAgfTtcblxuICAvLyBUaGUgYnVpbGQgcHJvY2VzcyBhZGRzIGEgVU1EIHdyYXBwZXIgYXJvdW5kIHRoaXMgZmlsZSwgd2hpY2ggbWFrZXMgdGhlXG4gIC8vIGBtb2R1bGVgIHZhcmlhYmxlIGF2YWlsYWJsZS5cbiAgbW9kdWxlLmV4cG9ydHMgPSB3cmFwQVBJcyhjaHJvbWUpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxUaGlzLmJyb3dzZXI7XG59XG4iLCIoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVXRpbHNcbiAgZnVuY3Rpb24gYXNzZXJ0ICh2YWwsIG1zZykge1xuICAgIGlmICghdmFsKSB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG4gIH1cblxuICAvLyBDb3VsZCB1c2UgYGluaGVyaXRzYCBtb2R1bGUsIGJ1dCBkb24ndCB3YW50IHRvIG1vdmUgZnJvbSBzaW5nbGUgZmlsZVxuICAvLyBhcmNoaXRlY3R1cmUgeWV0LlxuICBmdW5jdGlvbiBpbmhlcml0cyAoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge307XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZTtcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpO1xuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcjtcbiAgfVxuXG4gIC8vIEJOXG5cbiAgZnVuY3Rpb24gQk4gKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKEJOLmlzQk4obnVtYmVyKSkge1xuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB0aGlzLndvcmRzID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgICAvLyBSZWR1Y3Rpb24gY29udGV4dFxuICAgIHRoaXMucmVkID0gbnVsbDtcblxuICAgIGlmIChudW1iZXIgIT09IG51bGwpIHtcbiAgICAgIGlmIChiYXNlID09PSAnbGUnIHx8IGJhc2UgPT09ICdiZScpIHtcbiAgICAgICAgZW5kaWFuID0gYmFzZTtcbiAgICAgICAgYmFzZSA9IDEwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbml0KG51bWJlciB8fCAwLCBiYXNlIHx8IDEwLCBlbmRpYW4gfHwgJ2JlJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gQk47XG4gIH0gZWxzZSB7XG4gICAgZXhwb3J0cy5CTiA9IEJOO1xuICB9XG5cbiAgQk4uQk4gPSBCTjtcbiAgQk4ud29yZFNpemUgPSAyNjtcblxuICB2YXIgQnVmZmVyO1xuICB0cnkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LkJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIEJ1ZmZlciA9IHdpbmRvdy5CdWZmZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuXG4gIEJOLmlzQk4gPSBmdW5jdGlvbiBpc0JOIChudW0pIHtcbiAgICBpZiAobnVtIGluc3RhbmNlb2YgQk4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBudW0gIT09IG51bGwgJiYgdHlwZW9mIG51bSA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG51bS5jb25zdHJ1Y3Rvci53b3JkU2l6ZSA9PT0gQk4ud29yZFNpemUgJiYgQXJyYXkuaXNBcnJheShudW0ud29yZHMpO1xuICB9O1xuXG4gIEJOLm1heCA9IGZ1bmN0aW9uIG1heCAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpID4gMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLm1pbiA9IGZ1bmN0aW9uIG1pbiAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpIDwgMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdE51bWJlcihudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIGJhc2UgPSAxNjtcbiAgICB9XG4gICAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpO1xuXG4gICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHN0YXJ0Kys7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnQgPCBudW1iZXIubGVuZ3RoKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gMTYpIHtcbiAgICAgICAgdGhpcy5fcGFyc2VIZXgobnVtYmVyLCBzdGFydCwgZW5kaWFuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3BhcnNlQmFzZShudW1iZXIsIGJhc2UsIHN0YXJ0KTtcbiAgICAgICAgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXROdW1iZXIgPSBmdW5jdGlvbiBfaW5pdE51bWJlciAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICBudW1iZXIgPSAtbnVtYmVyO1xuICAgIH1cbiAgICBpZiAobnVtYmVyIDwgMHg0MDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW251bWJlciAmIDB4M2ZmZmZmZl07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAweDEwMDAwMDAwMDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobnVtYmVyIDwgMHgyMDAwMDAwMDAwMDAwMCk7IC8vIDIgXiA1MyAodW5zYWZlKVxuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZixcbiAgICAgICAgMVxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMztcbiAgICB9XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICAvLyBSZXZlcnNlIHRoZSBieXRlc1xuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXRBcnJheSA9IGZ1bmN0aW9uIF9pbml0QXJyYXkgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgLy8gUGVyaGFwcyBhIFVpbnQ4QXJyYXlcbiAgICBhc3NlcnQodHlwZW9mIG51bWJlci5sZW5ndGggPT09ICdudW1iZXInKTtcbiAgICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWzBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwobnVtYmVyLmxlbmd0aCAvIDMpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGosIHc7XG4gICAgdmFyIG9mZiA9IDA7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDEsIGogPSAwOyBpID49IDA7IGkgLT0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpIC0gMV0gPDwgOCkgfCAobnVtYmVyW2kgLSAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSArIDFdIDw8IDgpIHwgKG51bWJlcltpICsgMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlSGV4NEJpdHMgKHN0cmluZywgaW5kZXgpIHtcbiAgICB2YXIgYyA9IHN0cmluZy5jaGFyQ29kZUF0KGluZGV4KTtcbiAgICAvLyAnMCcgLSAnOSdcbiAgICBpZiAoYyA+PSA0OCAmJiBjIDw9IDU3KSB7XG4gICAgICByZXR1cm4gYyAtIDQ4O1xuICAgIC8vICdBJyAtICdGJ1xuICAgIH0gZWxzZSBpZiAoYyA+PSA2NSAmJiBjIDw9IDcwKSB7XG4gICAgICByZXR1cm4gYyAtIDU1O1xuICAgIC8vICdhJyAtICdmJ1xuICAgIH0gZWxzZSBpZiAoYyA+PSA5NyAmJiBjIDw9IDEwMikge1xuICAgICAgcmV0dXJuIGMgLSA4NztcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnSW52YWxpZCBjaGFyYWN0ZXIgaW4gJyArIHN0cmluZyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VIZXhCeXRlIChzdHJpbmcsIGxvd2VyQm91bmQsIGluZGV4KSB7XG4gICAgdmFyIHIgPSBwYXJzZUhleDRCaXRzKHN0cmluZywgaW5kZXgpO1xuICAgIGlmIChpbmRleCAtIDEgPj0gbG93ZXJCb3VuZCkge1xuICAgICAgciB8PSBwYXJzZUhleDRCaXRzKHN0cmluZywgaW5kZXggLSAxKSA8PCA0O1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VIZXggPSBmdW5jdGlvbiBfcGFyc2VIZXggKG51bWJlciwgc3RhcnQsIGVuZGlhbikge1xuICAgIC8vIENyZWF0ZSBwb3NzaWJseSBiaWdnZXIgYXJyYXkgdG8gZW5zdXJlIHRoYXQgaXQgZml0cyB0aGUgbnVtYmVyXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwoKG51bWJlci5sZW5ndGggLSBzdGFydCkgLyA2KTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIC8vIDI0LWJpdHMgY2h1bmtzXG4gICAgdmFyIG9mZiA9IDA7XG4gICAgdmFyIGogPSAwO1xuXG4gICAgdmFyIHc7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDE7IGkgPj0gc3RhcnQ7IGkgLT0gMikge1xuICAgICAgICB3ID0gcGFyc2VIZXhCeXRlKG51bWJlciwgc3RhcnQsIGkpIDw8IG9mZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSB3ICYgMHgzZmZmZmZmO1xuICAgICAgICBpZiAob2ZmID49IDE4KSB7XG4gICAgICAgICAgb2ZmIC09IDE4O1xuICAgICAgICAgIGogKz0gMTtcbiAgICAgICAgICB0aGlzLndvcmRzW2pdIHw9IHcgPj4+IDI2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9mZiArPSA4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwYXJzZUxlbmd0aCA9IG51bWJlci5sZW5ndGggLSBzdGFydDtcbiAgICAgIGZvciAoaSA9IHBhcnNlTGVuZ3RoICUgMiA9PT0gMCA/IHN0YXJ0ICsgMSA6IHN0YXJ0OyBpIDwgbnVtYmVyLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIHcgPSBwYXJzZUhleEJ5dGUobnVtYmVyLCBzdGFydCwgaSkgPDwgb2ZmO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9IHcgJiAweDNmZmZmZmY7XG4gICAgICAgIGlmIChvZmYgPj0gMTgpIHtcbiAgICAgICAgICBvZmYgLT0gMTg7XG4gICAgICAgICAgaiArPSAxO1xuICAgICAgICAgIHRoaXMud29yZHNbal0gfD0gdyA+Pj4gMjY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2ZmICs9IDg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlQmFzZSAoc3RyLCBzdGFydCwgZW5kLCBtdWwpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgKj0gbXVsO1xuXG4gICAgICAvLyAnYSdcbiAgICAgIGlmIChjID49IDQ5KSB7XG4gICAgICAgIGIgPSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3KSB7XG4gICAgICAgIGIgPSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYiA9IGM7XG4gICAgICB9XG4gICAgICBhc3NlcnQoYyA+PSAwICYmIGIgPCBtdWwsICdJbnZhbGlkIGNoYXJhY3RlcicpO1xuICAgICAgciArPSBiO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VCYXNlID0gZnVuY3Rpb24gX3BhcnNlQmFzZSAobnVtYmVyLCBiYXNlLCBzdGFydCkge1xuICAgIC8vIEluaXRpYWxpemUgYXMgemVyb1xuICAgIHRoaXMud29yZHMgPSBbMF07XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuXG4gICAgLy8gRmluZCBsZW5ndGggb2YgbGltYiBpbiBiYXNlXG4gICAgZm9yICh2YXIgbGltYkxlbiA9IDAsIGxpbWJQb3cgPSAxOyBsaW1iUG93IDw9IDB4M2ZmZmZmZjsgbGltYlBvdyAqPSBiYXNlKSB7XG4gICAgICBsaW1iTGVuKys7XG4gICAgfVxuICAgIGxpbWJMZW4tLTtcbiAgICBsaW1iUG93ID0gKGxpbWJQb3cgLyBiYXNlKSB8IDA7XG5cbiAgICB2YXIgdG90YWwgPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIG1vZCA9IHRvdGFsICUgbGltYkxlbjtcbiAgICB2YXIgZW5kID0gTWF0aC5taW4odG90YWwsIHRvdGFsIC0gbW9kKSArIHN0YXJ0O1xuXG4gICAgdmFyIHdvcmQgPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBsaW1iTGVuKSB7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgaSArIGxpbWJMZW4sIGJhc2UpO1xuXG4gICAgICB0aGlzLmltdWxuKGxpbWJQb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2QgIT09IDApIHtcbiAgICAgIHZhciBwb3cgPSAxO1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIG51bWJlci5sZW5ndGgsIGJhc2UpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbW9kOyBpKyspIHtcbiAgICAgICAgcG93ICo9IGJhc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW11bG4ocG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZGVzdCkge1xuICAgIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgfVxuICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHRoaXMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbiAgfTtcblxuICBmdW5jdGlvbiBtb3ZlIChkZXN0LCBzcmMpIHtcbiAgICBkZXN0LndvcmRzID0gc3JjLndvcmRzO1xuICAgIGRlc3QubGVuZ3RoID0gc3JjLmxlbmd0aDtcbiAgICBkZXN0Lm5lZ2F0aXZlID0gc3JjLm5lZ2F0aXZlO1xuICAgIGRlc3QucmVkID0gc3JjLnJlZDtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fbW92ZSA9IGZ1bmN0aW9uIF9tb3ZlIChkZXN0KSB7XG4gICAgbW92ZShkZXN0LCB0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4obnVsbCk7XG4gICAgdGhpcy5jb3B5KHIpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZCAoc2l6ZSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBSZW1vdmUgbGVhZGluZyBgMGAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLl9zdHJpcCA9IGZ1bmN0aW9uIHN0cmlwICgpIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPiAxICYmIHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgdGhpcy5sZW5ndGgtLTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9ub3JtU2lnbiA9IGZ1bmN0aW9uIF9ub3JtU2lnbiAoKSB7XG4gICAgLy8gLTAgPSAwXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBDaGVjayBTeW1ib2wuZm9yIGJlY2F1c2Ugbm90IGV2ZXJ5d2hlcmUgd2hlcmUgU3ltYm9sIGRlZmluZWRcbiAgLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N5bWJvbCNCcm93c2VyX2NvbXBhdGliaWxpdHlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBTeW1ib2wuZm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIEJOLnByb3RvdHlwZVtTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpXSA9IGluc3BlY3Q7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBpbnNwZWN0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuaW5zcGVjdCA9IGluc3BlY3Q7XG4gIH1cblxuICBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICByZXR1cm4gKHRoaXMucmVkID8gJzxCTi1SOiAnIDogJzxCTjogJykgKyB0aGlzLnRvU3RyaW5nKDE2KSArICc+JztcbiAgfVxuXG4gIC8qXG5cbiAgdmFyIHplcm9zID0gW107XG4gIHZhciBncm91cFNpemVzID0gW107XG4gIHZhciBncm91cEJhc2VzID0gW107XG5cbiAgdmFyIHMgPSAnJztcbiAgdmFyIGkgPSAtMTtcbiAgd2hpbGUgKCsraSA8IEJOLndvcmRTaXplKSB7XG4gICAgemVyb3NbaV0gPSBzO1xuICAgIHMgKz0gJzAnO1xuICB9XG4gIGdyb3VwU2l6ZXNbMF0gPSAwO1xuICBncm91cFNpemVzWzFdID0gMDtcbiAgZ3JvdXBCYXNlc1swXSA9IDA7XG4gIGdyb3VwQmFzZXNbMV0gPSAwO1xuICB2YXIgYmFzZSA9IDIgLSAxO1xuICB3aGlsZSAoKytiYXNlIDwgMzYgKyAxKSB7XG4gICAgdmFyIGdyb3VwU2l6ZSA9IDA7XG4gICAgdmFyIGdyb3VwQmFzZSA9IDE7XG4gICAgd2hpbGUgKGdyb3VwQmFzZSA8ICgxIDw8IEJOLndvcmRTaXplKSAvIGJhc2UpIHtcbiAgICAgIGdyb3VwQmFzZSAqPSBiYXNlO1xuICAgICAgZ3JvdXBTaXplICs9IDE7XG4gICAgfVxuICAgIGdyb3VwU2l6ZXNbYmFzZV0gPSBncm91cFNpemU7XG4gICAgZ3JvdXBCYXNlc1tiYXNlXSA9IGdyb3VwQmFzZTtcbiAgfVxuXG4gICovXG5cbiAgdmFyIHplcm9zID0gW1xuICAgICcnLFxuICAgICcwJyxcbiAgICAnMDAnLFxuICAgICcwMDAnLFxuICAgICcwMDAwJyxcbiAgICAnMDAwMDAnLFxuICAgICcwMDAwMDAnLFxuICAgICcwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJ1xuICBdO1xuXG4gIHZhciBncm91cFNpemVzID0gW1xuICAgIDAsIDAsXG4gICAgMjUsIDE2LCAxMiwgMTEsIDEwLCA5LCA4LFxuICAgIDgsIDcsIDcsIDcsIDcsIDYsIDYsXG4gICAgNiwgNiwgNiwgNiwgNiwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDVcbiAgXTtcblxuICB2YXIgZ3JvdXBCYXNlcyA9IFtcbiAgICAwLCAwLFxuICAgIDMzNTU0NDMyLCA0MzA0NjcyMSwgMTY3NzcyMTYsIDQ4ODI4MTI1LCA2MDQ2NjE3NiwgNDAzNTM2MDcsIDE2Nzc3MjE2LFxuICAgIDQzMDQ2NzIxLCAxMDAwMDAwMCwgMTk0ODcxNzEsIDM1ODMxODA4LCA2Mjc0ODUxNywgNzUyOTUzNiwgMTEzOTA2MjUsXG4gICAgMTY3NzcyMTYsIDI0MTM3NTY5LCAzNDAxMjIyNCwgNDcwNDU4ODEsIDY0MDAwMDAwLCA0MDg0MTAxLCA1MTUzNjMyLFxuICAgIDY0MzYzNDMsIDc5NjI2MjQsIDk3NjU2MjUsIDExODgxMzc2LCAxNDM0ODkwNywgMTcyMTAzNjgsIDIwNTExMTQ5LFxuICAgIDI0MzAwMDAwLCAyODYyOTE1MSwgMzM1NTQ0MzIsIDM5MTM1MzkzLCA0NTQzNTQyNCwgNTI1MjE4NzUsIDYwNDY2MTc2XG4gIF07XG5cbiAgQk4ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKGJhc2UsIHBhZGRpbmcpIHtcbiAgICBiYXNlID0gYmFzZSB8fCAxMDtcbiAgICBwYWRkaW5nID0gcGFkZGluZyB8IDAgfHwgMTtcblxuICAgIHZhciBvdXQ7XG4gICAgaWYgKGJhc2UgPT09IDE2IHx8IGJhc2UgPT09ICdoZXgnKSB7XG4gICAgICBvdXQgPSAnJztcbiAgICAgIHZhciBvZmYgPSAwO1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV07XG4gICAgICAgIHZhciB3b3JkID0gKCgodyA8PCBvZmYpIHwgY2FycnkpICYgMHhmZmZmZmYpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgY2FycnkgPSAodyA+Pj4gKDI0IC0gb2ZmKSkgJiAweGZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYXJyeSAhPT0gMCB8fCBpICE9PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSB3b3JkICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgICAgb3V0ID0gY2FycnkudG9TdHJpbmcoMTYpICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpIHtcbiAgICAgIC8vIHZhciBncm91cFNpemUgPSBNYXRoLmZsb29yKEJOLndvcmRTaXplICogTWF0aC5MTjIgLyBNYXRoLmxvZyhiYXNlKSk7XG4gICAgICB2YXIgZ3JvdXBTaXplID0gZ3JvdXBTaXplc1tiYXNlXTtcbiAgICAgIC8vIHZhciBncm91cEJhc2UgPSBNYXRoLnBvdyhiYXNlLCBncm91cFNpemUpO1xuICAgICAgdmFyIGdyb3VwQmFzZSA9IGdyb3VwQmFzZXNbYmFzZV07XG4gICAgICBvdXQgPSAnJztcbiAgICAgIHZhciBjID0gdGhpcy5jbG9uZSgpO1xuICAgICAgYy5uZWdhdGl2ZSA9IDA7XG4gICAgICB3aGlsZSAoIWMuaXNaZXJvKCkpIHtcbiAgICAgICAgdmFyIHIgPSBjLm1vZHJuKGdyb3VwQmFzZSkudG9TdHJpbmcoYmFzZSk7XG4gICAgICAgIGMgPSBjLmlkaXZuKGdyb3VwQmFzZSk7XG5cbiAgICAgICAgaWYgKCFjLmlzWmVybygpKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSByICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIgKCkge1xuICAgIHZhciByZXQgPSB0aGlzLndvcmRzWzBdO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PT0gMyAmJiB0aGlzLndvcmRzWzJdID09PSAweDAxKSB7XG4gICAgICAvLyBOT1RFOiBhdCB0aGlzIHN0YWdlIGl0IGlzIGtub3duIHRoYXQgdGhlIHRvcCBiaXQgaXMgc2V0XG4gICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArICh0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzJyk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgPyAtcmV0IDogcmV0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2LCAyKTtcbiAgfTtcblxuICBpZiAoQnVmZmVyKSB7XG4gICAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVuZGlhbiwgbGVuZ3RoKTtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5IChlbmRpYW4sIGxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEFycmF5LCBlbmRpYW4sIGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gYWxsb2NhdGUgKEFycmF5VHlwZSwgc2l6ZSkge1xuICAgIGlmIChBcnJheVR5cGUuYWxsb2NVbnNhZmUpIHtcbiAgICAgIHJldHVybiBBcnJheVR5cGUuYWxsb2NVbnNhZmUoc2l6ZSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQXJyYXlUeXBlKHNpemUpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5TGlrZSA9IGZ1bmN0aW9uIHRvQXJyYXlMaWtlIChBcnJheVR5cGUsIGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgdGhpcy5fc3RyaXAoKTtcblxuICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoKCk7XG4gICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTtcbiAgICBhc3NlcnQoYnl0ZUxlbmd0aCA8PSByZXFMZW5ndGgsICdieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoJyk7XG4gICAgYXNzZXJ0KHJlcUxlbmd0aCA+IDAsICdSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDAnKTtcblxuICAgIHZhciByZXMgPSBhbGxvY2F0ZShBcnJheVR5cGUsIHJlcUxlbmd0aCk7XG4gICAgdmFyIHBvc3RmaXggPSBlbmRpYW4gPT09ICdsZScgPyAnTEUnIDogJ0JFJztcbiAgICB0aGlzWydfdG9BcnJheUxpa2UnICsgcG9zdGZpeF0ocmVzLCBieXRlTGVuZ3RoKTtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fdG9BcnJheUxpa2VMRSA9IGZ1bmN0aW9uIF90b0FycmF5TGlrZUxFIChyZXMsIGJ5dGVMZW5ndGgpIHtcbiAgICB2YXIgcG9zaXRpb24gPSAwO1xuICAgIHZhciBjYXJyeSA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgc2hpZnQgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHdvcmQgPSAodGhpcy53b3Jkc1tpXSA8PCBzaGlmdCkgfCBjYXJyeTtcblxuICAgICAgcmVzW3Bvc2l0aW9uKytdID0gd29yZCAmIDB4ZmY7XG4gICAgICBpZiAocG9zaXRpb24gPCByZXMubGVuZ3RoKSB7XG4gICAgICAgIHJlc1twb3NpdGlvbisrXSA9ICh3b3JkID4+IDgpICYgMHhmZjtcbiAgICAgIH1cbiAgICAgIGlmIChwb3NpdGlvbiA8IHJlcy5sZW5ndGgpIHtcbiAgICAgICAgcmVzW3Bvc2l0aW9uKytdID0gKHdvcmQgPj4gMTYpICYgMHhmZjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNoaWZ0ID09PSA2KSB7XG4gICAgICAgIGlmIChwb3NpdGlvbiA8IHJlcy5sZW5ndGgpIHtcbiAgICAgICAgICByZXNbcG9zaXRpb24rK10gPSAod29yZCA+PiAyNCkgJiAweGZmO1xuICAgICAgICB9XG4gICAgICAgIGNhcnJ5ID0gMDtcbiAgICAgICAgc2hpZnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3b3JkID4+PiAyNDtcbiAgICAgICAgc2hpZnQgKz0gMjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPCByZXMubGVuZ3RoKSB7XG4gICAgICByZXNbcG9zaXRpb24rK10gPSBjYXJyeTtcblxuICAgICAgd2hpbGUgKHBvc2l0aW9uIDwgcmVzLmxlbmd0aCkge1xuICAgICAgICByZXNbcG9zaXRpb24rK10gPSAwO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX3RvQXJyYXlMaWtlQkUgPSBmdW5jdGlvbiBfdG9BcnJheUxpa2VCRSAocmVzLCBieXRlTGVuZ3RoKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gcmVzLmxlbmd0aCAtIDE7XG4gICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwLCBzaGlmdCA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgd29yZCA9ICh0aGlzLndvcmRzW2ldIDw8IHNoaWZ0KSB8IGNhcnJ5O1xuXG4gICAgICByZXNbcG9zaXRpb24tLV0gPSB3b3JkICYgMHhmZjtcbiAgICAgIGlmIChwb3NpdGlvbiA+PSAwKSB7XG4gICAgICAgIHJlc1twb3NpdGlvbi0tXSA9ICh3b3JkID4+IDgpICYgMHhmZjtcbiAgICAgIH1cbiAgICAgIGlmIChwb3NpdGlvbiA+PSAwKSB7XG4gICAgICAgIHJlc1twb3NpdGlvbi0tXSA9ICh3b3JkID4+IDE2KSAmIDB4ZmY7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaGlmdCA9PT0gNikge1xuICAgICAgICBpZiAocG9zaXRpb24gPj0gMCkge1xuICAgICAgICAgIHJlc1twb3NpdGlvbi0tXSA9ICh3b3JkID4+IDI0KSAmIDB4ZmY7XG4gICAgICAgIH1cbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgICBzaGlmdCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHdvcmQgPj4+IDI0O1xuICAgICAgICBzaGlmdCArPSAyO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiA+PSAwKSB7XG4gICAgICByZXNbcG9zaXRpb24tLV0gPSBjYXJyeTtcblxuICAgICAgd2hpbGUgKHBvc2l0aW9uID49IDApIHtcbiAgICAgICAgcmVzW3Bvc2l0aW9uLS1dID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgaWYgKE1hdGguY2x6MzIpIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHJldHVybiAzMiAtIE1hdGguY2x6MzIodyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHZhciB0ID0gdztcbiAgICAgIHZhciByID0gMDtcbiAgICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgICByICs9IDEzO1xuICAgICAgICB0ID4+Pj0gMTM7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDQwKSB7XG4gICAgICAgIHIgKz0gNztcbiAgICAgICAgdCA+Pj49IDc7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDgpIHtcbiAgICAgICAgciArPSA0O1xuICAgICAgICB0ID4+Pj0gNDtcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgICAgciArPSAyO1xuICAgICAgICB0ID4+Pj0gMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByICsgdDtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl96ZXJvQml0cyA9IGZ1bmN0aW9uIF96ZXJvQml0cyAodykge1xuICAgIC8vIFNob3J0LWN1dFxuICAgIGlmICh3ID09PSAwKSByZXR1cm4gMjY7XG5cbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHtcbiAgICAgIHIgKz0gMTM7XG4gICAgICB0ID4+Pj0gMTM7XG4gICAgfVxuICAgIGlmICgodCAmIDB4N2YpID09PSAwKSB7XG4gICAgICByICs9IDc7XG4gICAgICB0ID4+Pj0gNztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MykgPT09IDApIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7XG4gICAgICByKys7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIC8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbiAgQk4ucHJvdG90eXBlLmJpdExlbmd0aCA9IGZ1bmN0aW9uIGJpdExlbmd0aCAoKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpO1xuICAgIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdG9CaXRBcnJheSAobnVtKSB7XG4gICAgdmFyIHcgPSBuZXcgQXJyYXkobnVtLmJpdExlbmd0aCgpKTtcblxuICAgIGZvciAodmFyIGJpdCA9IDA7IGJpdCA8IHcubGVuZ3RoOyBiaXQrKykge1xuICAgICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgICAgd1tiaXRdID0gKG51bS53b3Jkc1tvZmZdID4+PiB3Yml0KSAmIDB4MDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHc7XG4gIH1cblxuICAvLyBOdW1iZXIgb2YgdHJhaWxpbmcgemVybyBiaXRzXG4gIEJOLnByb3RvdHlwZS56ZXJvQml0cyA9IGZ1bmN0aW9uIHplcm9CaXRzICgpIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIDA7XG5cbiAgICB2YXIgciA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYiA9IHRoaXMuX3plcm9CaXRzKHRoaXMud29yZHNbaV0pO1xuICAgICAgciArPSBiO1xuICAgICAgaWYgKGIgIT09IDI2KSBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmJ5dGVMZW5ndGggPSBmdW5jdGlvbiBieXRlTGVuZ3RoICgpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuYml0TGVuZ3RoKCkgLyA4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9Ud29zID0gZnVuY3Rpb24gdG9Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5hYnMoKS5pbm90bih3aWR0aCkuaWFkZG4oMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZyb21Ud29zID0gZnVuY3Rpb24gZnJvbVR3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMudGVzdG4od2lkdGggLSAxKSkge1xuICAgICAgcmV0dXJuIHRoaXMubm90bih3aWR0aCkuaWFkZG4oMSkuaW5lZygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc05lZyA9IGZ1bmN0aW9uIGlzTmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5uZWdhdGl2ZSAhPT0gMDtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5lZygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbmVnID0gZnVuY3Rpb24gaW5lZyAoKSB7XG4gICAgaWYgKCF0aGlzLmlzWmVybygpKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gT3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1b3IgPSBmdW5jdGlvbiBpdW9yIChudW0pIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoKytdID0gMDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gfCBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVvcihudW0pO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVvciA9IGZ1bmN0aW9uIHVvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdWFuZCA9IGZ1bmN0aW9uIGl1YW5kIChudW0pIHtcbiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpXG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSAmIG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudWFuZCA9IGZ1bmN0aW9uIHVhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVhbmQodGhpcyk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yIChudW0pIHtcbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGE7XG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXSBeIGIud29yZHNbaV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMgIT09IGEpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLml4b3IgPSBmdW5jdGlvbiBpeG9yIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXhvcihudW0pO1xuICB9O1xuXG4gIC8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUueG9yID0gZnVuY3Rpb24geG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml4b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXhvcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXhvciA9IGZ1bmN0aW9uIHV4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXV4b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXV4b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gTm90IGBgdGhpc2BgIHdpdGggYGB3aWR0aGBgIGJpdHdpZHRoXG4gIEJOLnByb3RvdHlwZS5pbm90biA9IGZ1bmN0aW9uIGlub3RuICh3aWR0aCkge1xuICAgIGFzc2VydCh0eXBlb2Ygd2lkdGggPT09ICdudW1iZXInICYmIHdpZHRoID49IDApO1xuXG4gICAgdmFyIGJ5dGVzTmVlZGVkID0gTWF0aC5jZWlsKHdpZHRoIC8gMjYpIHwgMDtcbiAgICB2YXIgYml0c0xlZnQgPSB3aWR0aCAlIDI2O1xuXG4gICAgLy8gRXh0ZW5kIHRoZSBidWZmZXIgd2l0aCBsZWFkaW5nIHplcm9lc1xuICAgIHRoaXMuX2V4cGFuZChieXRlc05lZWRlZCk7XG5cbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICBieXRlc05lZWRlZC0tO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBjb21wbGV0ZSB3b3Jkc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXNOZWVkZWQ7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSB0aGUgcmVzaWR1ZVxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmICgweDNmZmZmZmYgPj4gKDI2IC0gYml0c0xlZnQpKTtcbiAgICB9XG5cbiAgICAvLyBBbmQgcmVtb3ZlIGxlYWRpbmcgemVyb2VzXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm5vdG4gPSBmdW5jdGlvbiBub3RuICh3aWR0aCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5vdG4od2lkdGgpO1xuICB9O1xuXG4gIC8vIFNldCBgYml0YCBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNldG4gPSBmdW5jdGlvbiBzZXRuIChiaXQsIHZhbCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG5cbiAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgIHRoaXMuX2V4cGFuZChvZmYgKyAxKTtcblxuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSB8ICgxIDw8IHdiaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKG51bSkge1xuICAgIHZhciByO1xuXG4gICAgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcblxuICAgIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKG51bSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCAmJiB0aGlzLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkKG51bSk7XG5cbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKG51bSkge1xuICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtXG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG5cbiAgICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZVxuICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uIC0gemVyb2lmeVxuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhID4gYlxuICAgIHZhciBhLCBiO1xuICAgIGlmIChjbXAgPiAwKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gQ29weSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpO1xuXG4gICAgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXN1YihudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNtYWxsTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgb3V0Lm5lZ2F0aXZlID0gbnVtLm5lZ2F0aXZlIF4gc2VsZi5uZWdhdGl2ZTtcbiAgICB2YXIgbGVuID0gKHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aCkgfCAwO1xuICAgIG91dC5sZW5ndGggPSBsZW47XG4gICAgbGVuID0gKGxlbiAtIDEpIHwgMDtcblxuICAgIC8vIFBlZWwgb25lIGl0ZXJhdGlvbiAoY29tcGlsZXIgY2FuJ3QgZG8gaXQsIGJlY2F1c2Ugb2YgY29kZSBjb21wbGV4aXR5KVxuICAgIHZhciBhID0gc2VsZi53b3Jkc1swXSB8IDA7XG4gICAgdmFyIGIgPSBudW0ud29yZHNbMF0gfCAwO1xuICAgIHZhciByID0gYSAqIGI7XG5cbiAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmO1xuICAgIHZhciBjYXJyeSA9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgb3V0LndvcmRzWzBdID0gbG87XG5cbiAgICBmb3IgKHZhciBrID0gMTsgayA8IGxlbjsgaysrKSB7XG4gICAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsXG4gICAgICAvLyBub3RlIHRoYXQgbmNhcnJ5IGNvdWxkIGJlID49IDB4M2ZmZmZmZlxuICAgICAgdmFyIG5jYXJyeSA9IGNhcnJ5ID4+PiAyNjtcbiAgICAgIHZhciByd29yZCA9IGNhcnJ5ICYgMHgzZmZmZmZmO1xuICAgICAgdmFyIG1heEogPSBNYXRoLm1pbihrLCBudW0ubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBqID0gTWF0aC5tYXgoMCwgayAtIHNlbGYubGVuZ3RoICsgMSk7IGogPD0gbWF4SjsgaisrKSB7XG4gICAgICAgIHZhciBpID0gKGsgLSBqKSB8IDA7XG4gICAgICAgIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHIgPSBhICogYiArIHJ3b3JkO1xuICAgICAgICBuY2FycnkgKz0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgICAgcndvcmQgPSByICYgMHgzZmZmZmZmO1xuICAgICAgfVxuICAgICAgb3V0LndvcmRzW2tdID0gcndvcmQgfCAwO1xuICAgICAgY2FycnkgPSBuY2FycnkgfCAwO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5IHwgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuX3N0cmlwKCk7XG4gIH1cblxuICAvLyBUT0RPKGluZHV0bnkpOiBpdCBtYXkgYmUgcmVhc29uYWJsZSB0byBvbWl0IGl0IGZvciB1c2VycyB3aG8gZG9uJ3QgbmVlZFxuICAvLyB0byB3b3JrIHdpdGggMjU2LWJpdCBudW1iZXJzLCBvdGhlcndpc2UgaXQgZ2l2ZXMgMjAlIGltcHJvdmVtZW50IGZvciAyNTYtYml0XG4gIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuXG4gIHZhciBjb21iMTBNdWxUbyA9IGZ1bmN0aW9uIGNvbWIxME11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBhID0gc2VsZi53b3JkcztcbiAgICB2YXIgYiA9IG51bS53b3JkcztcbiAgICB2YXIgbyA9IG91dC53b3JkcztcbiAgICB2YXIgYyA9IDA7XG4gICAgdmFyIGxvO1xuICAgIHZhciBtaWQ7XG4gICAgdmFyIGhpO1xuICAgIHZhciBhMCA9IGFbMF0gfCAwO1xuICAgIHZhciBhbDAgPSBhMCAmIDB4MWZmZjtcbiAgICB2YXIgYWgwID0gYTAgPj4+IDEzO1xuICAgIHZhciBhMSA9IGFbMV0gfCAwO1xuICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjtcbiAgICB2YXIgYWgxID0gYTEgPj4+IDEzO1xuICAgIHZhciBhMiA9IGFbMl0gfCAwO1xuICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjtcbiAgICB2YXIgYWgyID0gYTIgPj4+IDEzO1xuICAgIHZhciBhMyA9IGFbM10gfCAwO1xuICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjtcbiAgICB2YXIgYWgzID0gYTMgPj4+IDEzO1xuICAgIHZhciBhNCA9IGFbNF0gfCAwO1xuICAgIHZhciBhbDQgPSBhNCAmIDB4MWZmZjtcbiAgICB2YXIgYWg0ID0gYTQgPj4+IDEzO1xuICAgIHZhciBhNSA9IGFbNV0gfCAwO1xuICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjtcbiAgICB2YXIgYWg1ID0gYTUgPj4+IDEzO1xuICAgIHZhciBhNiA9IGFbNl0gfCAwO1xuICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjtcbiAgICB2YXIgYWg2ID0gYTYgPj4+IDEzO1xuICAgIHZhciBhNyA9IGFbN10gfCAwO1xuICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjtcbiAgICB2YXIgYWg3ID0gYTcgPj4+IDEzO1xuICAgIHZhciBhOCA9IGFbOF0gfCAwO1xuICAgIHZhciBhbDggPSBhOCAmIDB4MWZmZjtcbiAgICB2YXIgYWg4ID0gYTggPj4+IDEzO1xuICAgIHZhciBhOSA9IGFbOV0gfCAwO1xuICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjtcbiAgICB2YXIgYWg5ID0gYTkgPj4+IDEzO1xuICAgIHZhciBiMCA9IGJbMF0gfCAwO1xuICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjtcbiAgICB2YXIgYmgwID0gYjAgPj4+IDEzO1xuICAgIHZhciBiMSA9IGJbMV0gfCAwO1xuICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjtcbiAgICB2YXIgYmgxID0gYjEgPj4+IDEzO1xuICAgIHZhciBiMiA9IGJbMl0gfCAwO1xuICAgIHZhciBibDIgPSBiMiAmIDB4MWZmZjtcbiAgICB2YXIgYmgyID0gYjIgPj4+IDEzO1xuICAgIHZhciBiMyA9IGJbM10gfCAwO1xuICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjtcbiAgICB2YXIgYmgzID0gYjMgPj4+IDEzO1xuICAgIHZhciBiNCA9IGJbNF0gfCAwO1xuICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjtcbiAgICB2YXIgYmg0ID0gYjQgPj4+IDEzO1xuICAgIHZhciBiNSA9IGJbNV0gfCAwO1xuICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjtcbiAgICB2YXIgYmg1ID0gYjUgPj4+IDEzO1xuICAgIHZhciBiNiA9IGJbNl0gfCAwO1xuICAgIHZhciBibDYgPSBiNiAmIDB4MWZmZjtcbiAgICB2YXIgYmg2ID0gYjYgPj4+IDEzO1xuICAgIHZhciBiNyA9IGJbN10gfCAwO1xuICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjtcbiAgICB2YXIgYmg3ID0gYjcgPj4+IDEzO1xuICAgIHZhciBiOCA9IGJbOF0gfCAwO1xuICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjtcbiAgICB2YXIgYmg4ID0gYjggPj4+IDEzO1xuICAgIHZhciBiOSA9IGJbOV0gfCAwO1xuICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjtcbiAgICB2YXIgYmg5ID0gYjkgPj4+IDEzO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0gc2VsZi5uZWdhdGl2ZSBeIG51bS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gMTk7XG4gICAgLyogayA9IDAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMCwgYmgwKTtcbiAgICB2YXIgdzAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcwID4+PiAyNikpIHwgMDtcbiAgICB3MCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDEsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDEpKSB8IDA7XG4gICAgdmFyIHcxID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MSA+Pj4gMjYpKSB8IDA7XG4gICAgdzEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwyLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDIsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMikpIHwgMDtcbiAgICB2YXIgdzIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcyID4+PiAyNikpIHwgMDtcbiAgICB3MiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMykpIHwgMDtcbiAgICB2YXIgdzMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHczID4+PiAyNikpIHwgMDtcbiAgICB3MyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDQsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpKSB8IDA7XG4gICAgdmFyIHc0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NCA+Pj4gMjYpKSB8IDA7XG4gICAgdzQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw1LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDUsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNSkpIHwgMDtcbiAgICB2YXIgdzUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc1ID4+PiAyNikpIHwgMDtcbiAgICB3NSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNikpIHwgMDtcbiAgICB2YXIgdzYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc2ID4+PiAyNikpIHwgMDtcbiAgICB3NiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDcsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDcpKSB8IDA7XG4gICAgdmFyIHc3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NyA+Pj4gMjYpKSB8IDA7XG4gICAgdzcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw4LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDgsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOCkpIHwgMDtcbiAgICB2YXIgdzggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc4ID4+PiAyNikpIHwgMDtcbiAgICB3OCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDkgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzkgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc5ID4+PiAyNikpIHwgMDtcbiAgICB3OSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDEpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTAgPj4+IDI2KSkgfCAwO1xuICAgIHcxMCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDExICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDIpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMSA+Pj4gMjYpKSB8IDA7XG4gICAgdzExICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgzKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgzKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTIgPj4+IDI2KSkgfCAwO1xuICAgIHcxMiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDQpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEzID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTMgPj4+IDI2KSkgfCAwO1xuICAgIHcxMyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDUpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg2KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg2KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTUgPj4+IDI2KSkgfCAwO1xuICAgIHcxNSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDcpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTYgPj4+IDI2KSkgfCAwO1xuICAgIHcxNiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDgpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNyA+Pj4gMjYpKSB8IDA7XG4gICAgdzE3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg5KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg5KTtcbiAgICB2YXIgdzE4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTggPj4+IDI2KSkgfCAwO1xuICAgIHcxOCAmPSAweDNmZmZmZmY7XG4gICAgb1swXSA9IHcwO1xuICAgIG9bMV0gPSB3MTtcbiAgICBvWzJdID0gdzI7XG4gICAgb1szXSA9IHczO1xuICAgIG9bNF0gPSB3NDtcbiAgICBvWzVdID0gdzU7XG4gICAgb1s2XSA9IHc2O1xuICAgIG9bN10gPSB3NztcbiAgICBvWzhdID0gdzg7XG4gICAgb1s5XSA9IHc5O1xuICAgIG9bMTBdID0gdzEwO1xuICAgIG9bMTFdID0gdzExO1xuICAgIG9bMTJdID0gdzEyO1xuICAgIG9bMTNdID0gdzEzO1xuICAgIG9bMTRdID0gdzE0O1xuICAgIG9bMTVdID0gdzE1O1xuICAgIG9bMTZdID0gdzE2O1xuICAgIG9bMTddID0gdzE3O1xuICAgIG9bMThdID0gdzE4O1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICBvWzE5XSA9IGM7XG4gICAgICBvdXQubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgLy8gUG9seWZpbGwgY29tYlxuICBpZiAoIU1hdGguaW11bCkge1xuICAgIGNvbWIxME11bFRvID0gc21hbGxNdWxUbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpZ011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgdmFyIGhuY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5O1xuICAgICAgaG5jYXJyeSA9IDA7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgICB2YXIgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArICgociAvIDB4NDAwMDAwMCkgfCAwKSkgfCAwO1xuICAgICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAobG8gPj4+IDI2KSkgfCAwO1xuXG4gICAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgICAgbmNhcnJ5ICY9IDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgICAgY2FycnkgPSBuY2Fycnk7XG4gICAgICBuY2FycnkgPSBobmNhcnJ5O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5fc3RyaXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bWJvTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgLy8gVGVtcG9yYXJ5IGRpc2FibGUsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9ibi5qcy9pc3N1ZXMvMjExXG4gICAgLy8gdmFyIGZmdG0gPSBuZXcgRkZUTSgpO1xuICAgIC8vIHJldHVybiBmZnRtLm11bHAoc2VsZiwgbnVtLCBvdXQpO1xuICAgIHJldHVybiBiaWdNdWxUbyhzZWxmLCBudW0sIG91dCk7XG4gIH1cblxuICBCTi5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbiBtdWxUbyAobnVtLCBvdXQpIHtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxMCAmJiBudW0ubGVuZ3RoID09PSAxMCkge1xuICAgICAgcmVzID0gY29tYjEwTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgNjMpIHtcbiAgICAgIHJlcyA9IHNtYWxsTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgMTAyNCkge1xuICAgICAgcmVzID0gYmlnTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvb2xleS1UdWtleSBhbGdvcml0aG0gZm9yIEZGVFxuICAvLyBzbGlnaHRseSByZXZpc2l0ZWQgdG8gcmVseSBvbiBsb29waW5nIGluc3RlYWQgb2YgcmVjdXJzaW9uXG5cbiAgZnVuY3Rpb24gRkZUTSAoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIEZGVE0ucHJvdG90eXBlLm1ha2VSQlQgPSBmdW5jdGlvbiBtYWtlUkJUIChOKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGwgPSBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyhOKSAtIDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHRbaV0gPSB0aGlzLnJldkJpbihpLCBsLCBOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGJpbmFyeS1yZXZlcnNlZCByZXByZXNlbnRhdGlvbiBvZiBgeGBcbiAgRkZUTS5wcm90b3R5cGUucmV2QmluID0gZnVuY3Rpb24gcmV2QmluICh4LCBsLCBOKSB7XG4gICAgaWYgKHggPT09IDAgfHwgeCA9PT0gTiAtIDEpIHJldHVybiB4O1xuXG4gICAgdmFyIHJiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcmIgfD0gKHggJiAxKSA8PCAobCAtIGkgLSAxKTtcbiAgICAgIHggPj49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJiO1xuICB9O1xuXG4gIC8vIFBlcmZvcm1zIFwidHdlZWRsaW5nXCIgcGhhc2UsIHRoZXJlZm9yZSAnZW11bGF0aW5nJ1xuICAvLyBiZWhhdmlvdXIgb2YgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG1cbiAgRkZUTS5wcm90b3R5cGUucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUgKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcnR3c1tpXSA9IHJ3c1tyYnRbaV1dO1xuICAgICAgaXR3c1tpXSA9IGl3c1tyYnRbaV1dO1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0gKHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOLCByYnQpIHtcbiAgICB0aGlzLnBlcm11dGUocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTik7XG5cbiAgICBmb3IgKHZhciBzID0gMTsgcyA8IE47IHMgPDw9IDEpIHtcbiAgICAgIHZhciBsID0gcyA8PCAxO1xuXG4gICAgICB2YXIgcnR3ZGYgPSBNYXRoLmNvcygyICogTWF0aC5QSSAvIGwpO1xuICAgICAgdmFyIGl0d2RmID0gTWF0aC5zaW4oMiAqIE1hdGguUEkgLyBsKTtcblxuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBOOyBwICs9IGwpIHtcbiAgICAgICAgdmFyIHJ0d2RmXyA9IHJ0d2RmO1xuICAgICAgICB2YXIgaXR3ZGZfID0gaXR3ZGY7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzOyBqKyspIHtcbiAgICAgICAgICB2YXIgcmUgPSBydHdzW3AgKyBqXTtcbiAgICAgICAgICB2YXIgaWUgPSBpdHdzW3AgKyBqXTtcblxuICAgICAgICAgIHZhciBybyA9IHJ0d3NbcCArIGogKyBzXTtcbiAgICAgICAgICB2YXIgaW8gPSBpdHdzW3AgKyBqICsgc107XG5cbiAgICAgICAgICB2YXIgcnggPSBydHdkZl8gKiBybyAtIGl0d2RmXyAqIGlvO1xuXG4gICAgICAgICAgaW8gPSBydHdkZl8gKiBpbyArIGl0d2RmXyAqIHJvO1xuICAgICAgICAgIHJvID0gcng7XG5cbiAgICAgICAgICBydHdzW3AgKyBqXSA9IHJlICsgcm87XG4gICAgICAgICAgaXR3c1twICsgal0gPSBpZSArIGlvO1xuXG4gICAgICAgICAgcnR3c1twICsgaiArIHNdID0gcmUgLSBybztcbiAgICAgICAgICBpdHdzW3AgKyBqICsgc10gPSBpZSAtIGlvO1xuXG4gICAgICAgICAgLyoganNoaW50IG1heGRlcHRoIDogZmFsc2UgKi9cbiAgICAgICAgICBpZiAoaiAhPT0gbCkge1xuICAgICAgICAgICAgcnggPSBydHdkZiAqIHJ0d2RmXyAtIGl0d2RmICogaXR3ZGZfO1xuXG4gICAgICAgICAgICBpdHdkZl8gPSBydHdkZiAqIGl0d2RmXyArIGl0d2RmICogcnR3ZGZfO1xuICAgICAgICAgICAgcnR3ZGZfID0gcng7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiID0gZnVuY3Rpb24gZ3Vlc3NMZW4xM2IgKG4sIG0pIHtcbiAgICB2YXIgTiA9IE1hdGgubWF4KG0sIG4pIHwgMTtcbiAgICB2YXIgb2RkID0gTiAmIDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoTiA9IE4gLyAyIHwgMDsgTjsgTiA9IE4gPj4+IDEpIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gMSA8PCBpICsgMSArIG9kZDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbiBjb25qdWdhdGUgKHJ3cywgaXdzLCBOKSB7XG4gICAgaWYgKE4gPD0gMSkgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHJ3c1tpXTtcblxuICAgICAgcndzW2ldID0gcndzW04gLSBpIC0gMV07XG4gICAgICByd3NbTiAtIGkgLSAxXSA9IHQ7XG5cbiAgICAgIHQgPSBpd3NbaV07XG5cbiAgICAgIGl3c1tpXSA9IC1pd3NbTiAtIGkgLSAxXTtcbiAgICAgIGl3c1tOIC0gaSAtIDFdID0gLXQ7XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm5vcm1hbGl6ZTEzYiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZTEzYiAod3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHcgPSBNYXRoLnJvdW5kKHdzWzIgKiBpICsgMV0gLyBOKSAqIDB4MjAwMCArXG4gICAgICAgIE1hdGgucm91bmQod3NbMiAqIGldIC8gTikgK1xuICAgICAgICBjYXJyeTtcblxuICAgICAgd3NbaV0gPSB3ICYgMHgzZmZmZmZmO1xuXG4gICAgICBpZiAodyA8IDB4NDAwMDAwMCkge1xuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHcgLyAweDQwMDAwMDAgfCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cztcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb252ZXJ0MTNiID0gZnVuY3Rpb24gY29udmVydDEzYiAod3MsIGxlbiwgcndzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYXJyeSA9IGNhcnJ5ICsgKHdzW2ldIHwgMCk7XG5cbiAgICAgIHJ3c1syICogaV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgICByd3NbMiAqIGkgKyAxXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICB9XG5cbiAgICAvLyBQYWQgd2l0aCB6ZXJvZXNcbiAgICBmb3IgKGkgPSAyICogbGVuOyBpIDwgTjsgKytpKSB7XG4gICAgICByd3NbaV0gPSAwO1xuICAgIH1cblxuICAgIGFzc2VydChjYXJyeSA9PT0gMCk7XG4gICAgYXNzZXJ0KChjYXJyeSAmIH4weDFmZmYpID09PSAwKTtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5zdHViID0gZnVuY3Rpb24gc3R1YiAoTikge1xuICAgIHZhciBwaCA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcGhbaV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBwaDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5tdWxwID0gZnVuY3Rpb24gbXVscCAoeCwgeSwgb3V0KSB7XG4gICAgdmFyIE4gPSAyICogdGhpcy5ndWVzc0xlbjEzYih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuXG4gICAgdmFyIHJidCA9IHRoaXMubWFrZVJCVChOKTtcblxuICAgIHZhciBfID0gdGhpcy5zdHViKE4pO1xuXG4gICAgdmFyIHJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgcndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBucndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBucndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbml3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgcm13cyA9IG91dC53b3JkcztcbiAgICBybXdzLmxlbmd0aCA9IE47XG5cbiAgICB0aGlzLmNvbnZlcnQxM2IoeC53b3JkcywgeC5sZW5ndGgsIHJ3cywgTik7XG4gICAgdGhpcy5jb252ZXJ0MTNiKHkud29yZHMsIHkubGVuZ3RoLCBucndzLCBOKTtcblxuICAgIHRoaXMudHJhbnNmb3JtKHJ3cywgXywgcndzdCwgaXdzdCwgTiwgcmJ0KTtcbiAgICB0aGlzLnRyYW5zZm9ybShucndzLCBfLCBucndzdCwgbml3c3QsIE4sIHJidCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdmFyIHJ4ID0gcndzdFtpXSAqIG5yd3N0W2ldIC0gaXdzdFtpXSAqIG5pd3N0W2ldO1xuICAgICAgaXdzdFtpXSA9IHJ3c3RbaV0gKiBuaXdzdFtpXSArIGl3c3RbaV0gKiBucndzdFtpXTtcbiAgICAgIHJ3c3RbaV0gPSByeDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmp1Z2F0ZShyd3N0LCBpd3N0LCBOKTtcbiAgICB0aGlzLnRyYW5zZm9ybShyd3N0LCBpd3N0LCBybXdzLCBfLCBOLCByYnQpO1xuICAgIHRoaXMuY29uanVnYXRlKHJtd3MsIF8sIE4pO1xuICAgIHRoaXMubm9ybWFsaXplMTNiKHJtd3MsIE4pO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0geC5uZWdhdGl2ZSBeIHkubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHgubGVuZ3RoICsgeS5sZW5ndGg7XG4gICAgcmV0dXJuIG91dC5fc3RyaXAoKTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWBcbiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVFxuICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uXG4gIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbXVsbiA9IGZ1bmN0aW9uIGltdWxuIChudW0pIHtcbiAgICB2YXIgaXNOZWdOdW0gPSBudW0gPCAwO1xuICAgIGlmIChpc05lZ051bSkgbnVtID0gLW51bTtcblxuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG5cbiAgICAvLyBDYXJyeVxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKiBudW07XG4gICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpO1xuICAgICAgY2FycnkgPj49IDI2O1xuICAgICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIC8vIE5PVEU6IGxvIGlzIDI3Yml0IG1heGltdW1cbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzTmVnTnVtID8gdGhpcy5pbmVnKCkgOiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbXVsbihudW0pO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpO1xuICB9O1xuXG4gIC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApXG4gIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKG51bSkge1xuICAgIHZhciB3ID0gdG9CaXRBcnJheShudW0pO1xuICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTtcblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgICB2YXIgcmVzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkge1xuICAgICAgaWYgKHdbaV0gIT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7XG4gICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSByZXMubXVsKHEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuICAgIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgICAgdmFyIGMgPSAoKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5KSA8PCByO1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYyB8IGNhcnJ5O1xuICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5KSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocyAhPT0gMCkge1xuICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoICs9IHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzaGxuID0gZnVuY3Rpb24gaXNobG4gKGJpdHMpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0IGluLXBsYWNlXG4gIC8vIE5PVEU6IGBoaW50YCBpcyBhIGxvd2VzdCBiaXQgYmVmb3JlIHRyYWlsaW5nIHplcm9lc1xuICAvLyBOT1RFOiBpZiBgZXh0ZW5kZWRgIGlzIHByZXNlbnQgLSBpdCB3aWxsIGJlIGZpbGxlZCB3aXRoIGRlc3Ryb3llZCBiaXRzXG4gIEJOLnByb3RvdHlwZS5pdXNocm4gPSBmdW5jdGlvbiBpdXNocm4gKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciBoO1xuICAgIGlmIChoaW50KSB7XG4gICAgICBoID0gKGhpbnQgLSAoaGludCAlIDI2KSkgLyAyNjtcbiAgICB9IGVsc2Uge1xuICAgICAgaCA9IDA7XG4gICAgfVxuXG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSBNYXRoLm1pbigoYml0cyAtIHIpIC8gMjYsIHRoaXMubGVuZ3RoKTtcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmZiBeICgoMHgzZmZmZmZmID4+PiByKSA8PCByKTtcbiAgICB2YXIgbWFza2VkV29yZHMgPSBleHRlbmRlZDtcblxuICAgIGggLT0gcztcbiAgICBoID0gTWF0aC5tYXgoMCwgaCk7XG5cbiAgICAvLyBFeHRlbmRlZCBtb2RlLCBjb3B5IG1hc2tlZCBwYXJ0XG4gICAgaWYgKG1hc2tlZFdvcmRzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICBtYXNrZWRXb3Jkcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG4gICAgICBtYXNrZWRXb3Jkcy5sZW5ndGggPSBzO1xuICAgIH1cblxuICAgIGlmIChzID09PSAwKSB7XG4gICAgICAvLyBOby1vcCwgd2Ugc2hvdWxkIG5vdCBtb3ZlIGFueXRoaW5nIGF0IGFsbFxuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPiBzKSB7XG4gICAgICB0aGlzLmxlbmd0aCAtPSBzO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaSArIHNdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwICYmIChjYXJyeSAhPT0gMCB8fCBpID49IGgpOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKGNhcnJ5IDw8ICgyNiAtIHIpKSB8ICh3b3JkID4+PiByKTtcbiAgICAgIGNhcnJ5ID0gd29yZCAmIG1hc2s7XG4gICAgfVxuXG4gICAgLy8gUHVzaCBjYXJyaWVkIGJpdHMgYXMgYSBtYXNrXG4gICAgaWYgKG1hc2tlZFdvcmRzICYmIGNhcnJ5ICE9PSAwKSB7XG4gICAgICBtYXNrZWRXb3Jkcy53b3Jkc1ttYXNrZWRXb3Jkcy5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNocm4oYml0cywgaGludCwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnRcbiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNobG4gPSBmdW5jdGlvbiB1c2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0XG4gIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNocm4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaHJuID0gZnVuY3Rpb24gdXNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihiaXRzKTtcbiAgfTtcblxuICAvLyBUZXN0IGlmIG4gYml0IGlzIHNldFxuICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0biAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBiaXQgYW5kIHJldHVyblxuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICAgIHJldHVybiAhISh3ICYgcSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAnaW1hc2tuIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZSBudW1iZXJzJyk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHMrKztcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbiAgQk4ucHJvdG90eXBlLm1hc2tuID0gZnVuY3Rpb24gbWFza24gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKTtcbiAgfTtcblxuICAvLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaWFkZG4gPSBmdW5jdGlvbiBpYWRkbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaXN1Ym4oLW51bSk7XG5cbiAgICAvLyBQb3NzaWJsZSBzaWduIGNoYW5nZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgKHRoaXMud29yZHNbMF0gfCAwKSA8PSBudW0pIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSA9IG51bSAtICh0aGlzLndvcmRzWzBdIHwgMCk7XG4gICAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlzdWJuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRob3V0IGNoZWNrc1xuICAgIHJldHVybiB0aGlzLl9pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faWFkZG4gPSBmdW5jdGlvbiBfaWFkZG4gKG51bSkge1xuICAgIHRoaXMud29yZHNbMF0gKz0gbnVtO1xuXG4gICAgLy8gQ2FycnlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIHRoaXMud29yZHNbaV0gPj0gMHg0MDAwMDAwOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gLT0gMHg0MDAwMDAwO1xuICAgICAgaWYgKGkgPT09IHRoaXMubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSsrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoLCBpICsgMSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBwbGFpbiBudW1iZXIgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmlzdWJuID0gZnVuY3Rpb24gaXN1Ym4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG4gICAgaWYgKG51bSA8IDApIHJldHVybiB0aGlzLmlhZGRuKC1udW0pO1xuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkbihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLndvcmRzWzBdIC09IG51bTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdIDwgMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IC10aGlzLndvcmRzWzBdO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENhcnJ5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIHRoaXMud29yZHNbaV0gPCAwOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSArPSAweDQwMDAwMDA7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdIC09IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhYnMgPSBmdW5jdGlvbiBpYWJzICgpIHtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiBhYnMgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwgKG51bSwgbXVsLCBzaGlmdCkge1xuICAgIHZhciBsZW4gPSBudW0ubGVuZ3RoICsgc2hpZnQ7XG4gICAgdmFyIGk7XG5cbiAgICB0aGlzLl9leHBhbmQobGVuKTtcblxuICAgIHZhciB3O1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgdmFyIHJpZ2h0ID0gKG51bS53b3Jkc1tpXSB8IDApICogbXVsO1xuICAgICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKChyaWdodCAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgdGhpcy5sZW5ndGggLSBzaGlmdDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSA9PT0gMCkgcmV0dXJuIHRoaXMuX3N0cmlwKCk7XG5cbiAgICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICAgIGFzc2VydChjYXJyeSA9PT0gLTEpO1xuICAgIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9IC0odGhpcy53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcy5fc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX3dvcmREaXYgPSBmdW5jdGlvbiBfd29yZERpdiAobnVtLCBtb2RlKSB7XG4gICAgdmFyIHNoaWZ0ID0gdGhpcy5sZW5ndGggLSBudW0ubGVuZ3RoO1xuXG4gICAgdmFyIGEgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIGIgPSBudW07XG5cbiAgICAvLyBOb3JtYWxpemVcbiAgICB2YXIgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdIHwgMDtcbiAgICB2YXIgYmhpQml0cyA9IHRoaXMuX2NvdW50Qml0cyhiaGkpO1xuICAgIHNoaWZ0ID0gMjYgLSBiaGlCaXRzO1xuICAgIGlmIChzaGlmdCAhPT0gMCkge1xuICAgICAgYiA9IGIudXNobG4oc2hpZnQpO1xuICAgICAgYS5pdXNobG4oc2hpZnQpO1xuICAgICAgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdIHwgMDtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIHF1b3RpZW50XG4gICAgdmFyIG0gPSBhLmxlbmd0aCAtIGIubGVuZ3RoO1xuICAgIHZhciBxO1xuXG4gICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICBxID0gbmV3IEJOKG51bGwpO1xuICAgICAgcS5sZW5ndGggPSBtICsgMTtcbiAgICAgIHEud29yZHMgPSBuZXcgQXJyYXkocS5sZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHEud29yZHNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkaWZmID0gYS5jbG9uZSgpLl9pc2hsbnN1Ym11bChiLCAxLCBtKTtcbiAgICBpZiAoZGlmZi5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgYSA9IGRpZmY7XG4gICAgICBpZiAocSkge1xuICAgICAgICBxLndvcmRzW21dID0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBqID0gbSAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICB2YXIgcWogPSAoYS53b3Jkc1tiLmxlbmd0aCArIGpdIHwgMCkgKiAweDQwMDAwMDAgK1xuICAgICAgICAoYS53b3Jkc1tiLmxlbmd0aCArIGogLSAxXSB8IDApO1xuXG4gICAgICAvLyBOT1RFOiAocWogLyBiaGkpIGlzICgweDNmZmZmZmYgKiAweDQwMDAwMDAgKyAweDNmZmZmZmYpIC8gMHgyMDAwMDAwIG1heFxuICAgICAgLy8gKDB4N2ZmZmZmZilcbiAgICAgIHFqID0gTWF0aC5taW4oKHFqIC8gYmhpKSB8IDAsIDB4M2ZmZmZmZik7XG5cbiAgICAgIGEuX2lzaGxuc3VibXVsKGIsIHFqLCBqKTtcbiAgICAgIHdoaWxlIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIHFqLS07XG4gICAgICAgIGEubmVnYXRpdmUgPSAwO1xuICAgICAgICBhLl9pc2hsbnN1Ym11bChiLCAxLCBqKTtcbiAgICAgICAgaWYgKCFhLmlzWmVybygpKSB7XG4gICAgICAgICAgYS5uZWdhdGl2ZSBePSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocSkge1xuICAgICAgICBxLndvcmRzW2pdID0gcWo7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChxKSB7XG4gICAgICBxLl9zdHJpcCgpO1xuICAgIH1cbiAgICBhLl9zdHJpcCgpO1xuXG4gICAgLy8gRGVub3JtYWxpemVcbiAgICBpZiAobW9kZSAhPT0gJ2RpdicgJiYgc2hpZnQgIT09IDApIHtcbiAgICAgIGEuaXVzaHJuKHNoaWZ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiBxIHx8IG51bGwsXG4gICAgICBtb2Q6IGFcbiAgICB9O1xuICB9O1xuXG4gIC8vIE5PVEU6IDEpIGBtb2RlYCBjYW4gYmUgc2V0IHRvIGBtb2RgIHRvIHJlcXVlc3QgbW9kIG9ubHksXG4gIC8vICAgICAgIHRvIGBkaXZgIHRvIHJlcXVlc3QgZGl2IG9ubHksIG9yIGJlIGFic2VudCB0b1xuICAvLyAgICAgICByZXF1ZXN0IGJvdGggZGl2ICYgbW9kXG4gIC8vICAgICAgIDIpIGBwb3NpdGl2ZWAgaXMgdHJ1ZSBpZiB1bnNpZ25lZCBtb2QgaXMgcmVxdWVzdGVkXG4gIEJOLnByb3RvdHlwZS5kaXZtb2QgPSBmdW5jdGlvbiBkaXZtb2QgKG51bSwgbW9kZSwgcG9zaXRpdmUpIHtcbiAgICBhc3NlcnQoIW51bS5pc1plcm8oKSk7XG5cbiAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogbmV3IEJOKDApXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkaXYsIG1vZCwgcmVzO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlhZGQobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogcmVzLm1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMubmVnYXRpdmUgJiBudW0ubmVnYXRpdmUpICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pc3ViKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiByZXMuZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCb3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlIGF0IHRoaXMgcG9pbnRcblxuICAgIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICAgIGlmIChudW0ubGVuZ3RoID4gdGhpcy5sZW5ndGggfHwgdGhpcy5jbXAobnVtKSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IHRoaXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gVmVyeSBzaG9ydCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKG1vZGUgPT09ICdkaXYnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgICBtb2Q6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgPT09ICdtb2QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiBudWxsLFxuICAgICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kcm4obnVtLndvcmRzWzBdKSlcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RybihudW0ud29yZHNbMF0pKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgIC8gYG51bWBcbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgJSBgbnVtYFxuICBCTi5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7XG4gIH07XG5cbiAgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYClcbiAgQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQgKG51bSkge1xuICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgICAvLyBGYXN0IGNhc2UgLSBleGFjdCBkaXZpc2lvblxuICAgIGlmIChkbS5tb2QuaXNaZXJvKCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICB2YXIgbW9kID0gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICAgIHZhciBoYWxmID0gbnVtLnVzaHJuKDEpO1xuICAgIHZhciByMiA9IG51bS5hbmRsbigxKTtcbiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTtcblxuICAgIC8vIFJvdW5kIGRvd25cbiAgICBpZiAoY21wIDwgMCB8fCAocjIgPT09IDEgJiYgY21wID09PSAwKSkgcmV0dXJuIGRtLmRpdjtcblxuICAgIC8vIFJvdW5kIHVwXG4gICAgcmV0dXJuIGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLmRpdi5pc3VibigxKSA6IGRtLmRpdi5pYWRkbigxKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubW9kcm4gPSBmdW5jdGlvbiBtb2RybiAobnVtKSB7XG4gICAgdmFyIGlzTmVnTnVtID0gbnVtIDwgMDtcbiAgICBpZiAoaXNOZWdOdW0pIG51bSA9IC1udW07XG5cbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07XG5cbiAgICB2YXIgYWNjID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jkc1tpXSB8IDApKSAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNOZWdOdW0gPyAtYWNjIDogYWNjO1xuICB9O1xuXG4gIC8vIFdBUk5JTkc6IERFUFJFQ0FURURcbiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5tb2RybihudW0pO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIGRpdmlzaW9uIGJ5IG51bWJlclxuICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2biAobnVtKSB7XG4gICAgdmFyIGlzTmVnTnVtID0gbnVtIDwgMDtcbiAgICBpZiAoaXNOZWdOdW0pIG51bSA9IC1udW07XG5cbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeSAqIDB4NDAwMDAwMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAodyAvIG51bSkgfCAwO1xuICAgICAgY2FycnkgPSB3ICUgbnVtO1xuICAgIH1cblxuICAgIHRoaXMuX3N0cmlwKCk7XG4gICAgcmV0dXJuIGlzTmVnTnVtID8gdGhpcy5pbmVnKCkgOiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5kaXZuID0gZnVuY3Rpb24gZGl2biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHggPSB0aGlzO1xuICAgIHZhciB5ID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHggPSB4LnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8gQSAqIHggKyBCICogeSA9IHhcbiAgICB2YXIgQSA9IG5ldyBCTigxKTtcbiAgICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAgIC8vIEMgKiB4ICsgRCAqIHkgPSB5XG4gICAgdmFyIEMgPSBuZXcgQk4oMCk7XG4gICAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgICB2YXIgZyA9IDA7XG5cbiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7XG4gICAgICB4Lml1c2hybigxKTtcbiAgICAgIHkuaXVzaHJuKDEpO1xuICAgICAgKytnO1xuICAgIH1cblxuICAgIHZhciB5cCA9IHkuY2xvbmUoKTtcbiAgICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7ICh4LndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgeC5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEEuaWFkZCh5cCk7XG4gICAgICAgICAgICBCLmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEEuaXVzaHJuKDEpO1xuICAgICAgICAgIEIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgeS5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEMuaXNPZGQoKSB8fCBELmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEMuaWFkZCh5cCk7XG4gICAgICAgICAgICBELmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEMuaXVzaHJuKDEpO1xuICAgICAgICAgIEQuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7XG4gICAgICAgIHguaXN1Yih5KTtcbiAgICAgICAgQS5pc3ViKEMpO1xuICAgICAgICBCLmlzdWIoRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5LmlzdWIoeCk7XG4gICAgICAgIEMuaXN1YihBKTtcbiAgICAgICAgRC5pc3ViKEIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhOiBDLFxuICAgICAgYjogRCxcbiAgICAgIGdjZDogeS5pdXNobG4oZylcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQVxuICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbiAgLy8gX3ByaW1lXyBmaWVsZHMgRihwKSBhdCBhIG1heGltYWwgc3BlZWRcbiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIGEgPSB0aGlzO1xuICAgIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGEgPSBhLnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICAgIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICAgIHZhciBkZWx0YSA9IGIuY2xvbmUoKTtcblxuICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7IChhLndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYS5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgxLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoYi53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIGIuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7XG4gICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Mi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEuY21wKGIpID49IDApIHtcbiAgICAgICAgYS5pc3ViKGIpO1xuICAgICAgICB4MS5pc3ViKHgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIuaXN1YihhKTtcbiAgICAgICAgeDIuaXN1Yih4MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcztcbiAgICBpZiAoYS5jbXBuKDEpID09PSAwKSB7XG4gICAgICByZXMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geDI7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkIChudW0pIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIG51bS5hYnMoKTtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gdGhpcy5hYnMoKTtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtLmNsb25lKCk7XG4gICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgYi5uZWdhdGl2ZSA9IDA7XG5cbiAgICAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d29cbiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykge1xuICAgICAgYS5pdXNocm4oMSk7XG4gICAgICBiLml1c2hybigxKTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xuICAgICAgICBhLml1c2hybigxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICAgIGIuaXVzaHJuKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIC8vIFN3YXAgYGFgIGFuZCBgYmAgdG8gbWFrZSBgYWAgYWx3YXlzIGJpZ2dlciB0aGFuIGBiYFxuICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBiID0gdDtcbiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGEuaXN1YihiKTtcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIHJldHVybiBiLml1c2hsbihzaGlmdCk7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG4gIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4gKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTtcbiAgfTtcblxuICAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG4gIEJOLnByb3RvdHlwZS5hbmRsbiA9IGZ1bmN0aW9uIGFuZGxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTtcbiAgfTtcblxuICAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG4gIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicpO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7XG4gICAgICB0aGlzLndvcmRzW3NdIHw9IHE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICAgIHZhciBjYXJyeSA9IHE7XG4gICAgZm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdyArPSBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7XG4gICAgICB3ICY9IDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbXBuID0gZnVuY3Rpb24gY21wbiAobnVtKSB7XG4gICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG5lZ2F0aXZlKSByZXR1cm4gMTtcblxuICAgIHRoaXMuX3N0cmlwKCk7XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZWdhdGl2ZSkge1xuICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZiwgJ051bWJlciBpcyB0b28gYmlnJyk7XG5cbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1swXSB8IDA7XG4gICAgICByZXMgPSB3ID09PSBudW0gPyAwIDogdyA8IG51bSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbiAgLy8gMSAtIGlmIGB0aGlzYCA+IGBudW1gXG4gIC8vIDAgLSBpZiBgdGhpc2AgPT0gYG51bWBcbiAgLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gY21wIChudW0pIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHJldHVybiAxO1xuXG4gICAgdmFyIHJlcyA9IHRoaXMudWNtcChudW0pO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBVbnNpZ25lZCBjb21wYXJpc29uXG4gIEJOLnByb3RvdHlwZS51Y21wID0gZnVuY3Rpb24gdWNtcCAobnVtKSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgaGF2ZSB0aGUgc2FtZSBzaWduXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIDE7XG4gICAgaWYgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkgcmV0dXJuIC0xO1xuXG4gICAgdmFyIHJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB2YXIgYiA9IG51bS53b3Jkc1tpXSB8IDA7XG5cbiAgICAgIGlmIChhID09PSBiKSBjb250aW51ZTtcbiAgICAgIGlmIChhIDwgYikge1xuICAgICAgICByZXMgPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmVzID0gMTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndG4gPSBmdW5jdGlvbiBndG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3QgPSBmdW5jdGlvbiBndCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZW4gPSBmdW5jdGlvbiBndGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlID0gZnVuY3Rpb24gZ3RlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdG4gPSBmdW5jdGlvbiBsdG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gbHQgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlbiA9IGZ1bmN0aW9uIGx0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGUgPSBmdW5jdGlvbiBsdGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxbiA9IGZ1bmN0aW9uIGVxbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMDtcbiAgfTtcblxuICAvL1xuICAvLyBBIHJlZHVjZSBjb250ZXh0LCBjb3VsZCBiZSB1c2luZyBtb250Z29tZXJ5IG9yIHNvbWV0aGluZyBiZXR0ZXIsIGRlcGVuZGluZ1xuICAvLyBvbiB0aGUgYG1gIGl0c2VsZi5cbiAgLy9cbiAgQk4ucmVkID0gZnVuY3Rpb24gcmVkIChudW0pIHtcbiAgICByZXR1cm4gbmV3IFJlZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICByZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVJlZCA9IGZ1bmN0aW9uIGZyb21SZWQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ2Zyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuY29udmVydEZyb20odGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9mb3JjZVJlZCA9IGZ1bmN0aW9uIF9mb3JjZVJlZCAoY3R4KSB7XG4gICAgdGhpcy5yZWQgPSBjdHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZvcmNlUmVkID0gZnVuY3Rpb24gZm9yY2VSZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEFkZCA9IGZ1bmN0aW9uIHJlZEFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5hZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSUFkZCA9IGZ1bmN0aW9uIHJlZElBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlhZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3ViID0gZnVuY3Rpb24gcmVkU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3ViID0gZnVuY3Rpb24gcmVkSVN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTaGwgPSBmdW5jdGlvbiByZWRTaGwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc2hsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZE11bCA9IGZ1bmN0aW9uIHJlZE11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJTXVsID0gZnVuY3Rpb24gcmVkSU11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmltdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVNxciA9IGZ1bmN0aW9uIHJlZElTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG4gIH07XG5cbiAgLy8gU3F1YXJlIHJvb3Qgb3ZlciBwXG4gIEJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSW52bSA9IGZ1bmN0aW9uIHJlZEludm0gKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYCAlIGByZWQgbW9kdWxvYFxuICBCTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm5lZyh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkUG93ID0gZnVuY3Rpb24gcmVkUG93IChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQgJiYgIW51bS5yZWQsICdyZWRQb3cobm9ybWFsTnVtKScpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbiAgfTtcblxuICAvLyBQcmltZSBudW1iZXJzIHdpdGggZWZmaWNpZW50IHJlZHVjdGlvblxuICB2YXIgcHJpbWVzID0ge1xuICAgIGsyNTY6IG51bGwsXG4gICAgcDIyNDogbnVsbCxcbiAgICBwMTkyOiBudWxsLFxuICAgIHAyNTUxOTogbnVsbFxuICB9O1xuXG4gIC8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuICBmdW5jdGlvbiBNUHJpbWUgKG5hbWUsIHApIHtcbiAgICAvLyBQID0gMiBeIE4gLSBLXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICAgIHRoaXMubiA9IHRoaXMucC5iaXRMZW5ndGgoKTtcbiAgICB0aGlzLmsgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApO1xuXG4gICAgdGhpcy50bXAgPSB0aGlzLl90bXAoKTtcbiAgfVxuXG4gIE1QcmltZS5wcm90b3R5cGUuX3RtcCA9IGZ1bmN0aW9uIF90bXAgKCkge1xuICAgIHZhciB0bXAgPSBuZXcgQk4obnVsbCk7XG4gICAgdG1wLndvcmRzID0gbmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4gLyAxMykpO1xuICAgIHJldHVybiB0bXA7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pcmVkdWNlID0gZnVuY3Rpb24gaXJlZHVjZSAobnVtKSB7XG4gICAgLy8gQXNzdW1lcyB0aGF0IGBudW1gIGlzIGxlc3MgdGhhbiBgUF4yYFxuICAgIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgICB2YXIgciA9IG51bTtcbiAgICB2YXIgcmxlbjtcblxuICAgIGRvIHtcbiAgICAgIHRoaXMuc3BsaXQociwgdGhpcy50bXApO1xuICAgICAgciA9IHRoaXMuaW11bEsocik7XG4gICAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICAgIHJsZW4gPSByLmJpdExlbmd0aCgpO1xuICAgIH0gd2hpbGUgKHJsZW4gPiB0aGlzLm4pO1xuXG4gICAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHIud29yZHNbMF0gPSAwO1xuICAgICAgci5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgci5pc3ViKHRoaXMucCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChyLnN0cmlwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gciBpcyBhIEJOIHY0IGluc3RhbmNlXG4gICAgICAgIHIuc3RyaXAoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHIgaXMgYSBCTiB2NSBpbnN0YW5jZVxuICAgICAgICByLl9zdHJpcCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dCkge1xuICAgIGlucHV0Lml1c2hybih0aGlzLm4sIDAsIG91dCk7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICByZXR1cm4gbnVtLmltdWwodGhpcy5rKTtcbiAgfTtcblxuICBmdW5jdGlvbiBLMjU2ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnazI1NicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnKTtcbiAgfVxuICBpbmhlcml0cyhLMjU2LCBNUHJpbWUpO1xuXG4gIEsyNTYucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXRwdXQpIHtcbiAgICAvLyAyNTYgPSA5ICogMjYgKyAyMlxuICAgIHZhciBtYXNrID0gMHgzZmZmZmY7XG5cbiAgICB2YXIgb3V0TGVuID0gTWF0aC5taW4oaW5wdXQubGVuZ3RoLCA5KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dExlbjsgaSsrKSB7XG4gICAgICBvdXRwdXQud29yZHNbaV0gPSBpbnB1dC53b3Jkc1tpXTtcbiAgICB9XG4gICAgb3V0cHV0Lmxlbmd0aCA9IG91dExlbjtcblxuICAgIGlmIChpbnB1dC5sZW5ndGggPD0gOSkge1xuICAgICAgaW5wdXQud29yZHNbMF0gPSAwO1xuICAgICAgaW5wdXQubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTaGlmdCBieSA5IGxpbWJzXG4gICAgdmFyIHByZXYgPSBpbnB1dC53b3Jkc1s5XTtcbiAgICBvdXRwdXQud29yZHNbb3V0cHV0Lmxlbmd0aCsrXSA9IHByZXYgJiBtYXNrO1xuXG4gICAgZm9yIChpID0gMTA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5leHQgPSBpbnB1dC53b3Jkc1tpXSB8IDA7XG4gICAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gKChuZXh0ICYgbWFzaykgPDwgNCkgfCAocHJldiA+Pj4gMjIpO1xuICAgICAgcHJldiA9IG5leHQ7XG4gICAgfVxuICAgIHByZXYgPj4+PSAyMjtcbiAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gcHJldjtcbiAgICBpZiAocHJldiA9PT0gMCAmJiBpbnB1dC5sZW5ndGggPiAxMCkge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDEwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gOTtcbiAgICB9XG4gIH07XG5cbiAgSzI1Ni5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTAwMDAwM2QxID0gWyAweDQwLCAweDNkMSBdXG4gICAgbnVtLndvcmRzW251bS5sZW5ndGhdID0gMDtcbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aCArIDFdID0gMDtcbiAgICBudW0ubGVuZ3RoICs9IDI7XG5cbiAgICAvLyBib3VuZGVkIGF0OiAweDQwICogMHgzZmZmZmZmICsgMHgzZDAgPSAweDEwMDAwMDM5MFxuICAgIHZhciBsbyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gbnVtLndvcmRzW2ldIHwgMDtcbiAgICAgIGxvICs9IHcgKiAweDNkMTtcbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgbG8gPSB3ICogMHg0MCArICgobG8gLyAweDQwMDAwMDApIHwgMCk7XG4gICAgfVxuXG4gICAgLy8gRmFzdCBsZW5ndGggcmVkdWN0aW9uXG4gICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICBmdW5jdGlvbiBQMjI0ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDIyNCcsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnKTtcbiAgfVxuICBpbmhlcml0cyhQMjI0LCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAxOTIgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMTkyJyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicpO1xuICB9XG4gIGluaGVyaXRzKFAxOTIsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDI1NTE5ICgpIHtcbiAgICAvLyAyIF4gMjU1IC0gMTlcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnMjU1MTknLFxuICAgICAgJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnKTtcbiAgfVxuICBpbmhlcml0cyhQMjU1MTksIE1QcmltZSk7XG5cbiAgUDI1NTE5LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxM1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoaSA9IChudW0ud29yZHNbaV0gfCAwKSAqIDB4MTMgKyBjYXJyeTtcbiAgICAgIHZhciBsbyA9IGhpICYgMHgzZmZmZmZmO1xuICAgICAgaGkgPj4+PSAyNjtcblxuICAgICAgbnVtLndvcmRzW2ldID0gbG87XG4gICAgICBjYXJyeSA9IGhpO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgLy8gRXhwb3J0ZWQgbW9zdGx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB1c2UgcGxhaW4gbmFtZSBpbnN0ZWFkXG4gIEJOLl9wcmltZSA9IGZ1bmN0aW9uIHByaW1lIChuYW1lKSB7XG4gICAgLy8gQ2FjaGVkIHZlcnNpb24gb2YgcHJpbWVcbiAgICBpZiAocHJpbWVzW25hbWVdKSByZXR1cm4gcHJpbWVzW25hbWVdO1xuXG4gICAgdmFyIHByaW1lO1xuICAgIGlmIChuYW1lID09PSAnazI1NicpIHtcbiAgICAgIHByaW1lID0gbmV3IEsyNTYoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjI0Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDIyNCgpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AxOTInKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMTkyKCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDI1NTE5Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDI1NTE5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwcmltZSAnICsgbmFtZSk7XG4gICAgfVxuICAgIHByaW1lc1tuYW1lXSA9IHByaW1lO1xuXG4gICAgcmV0dXJuIHByaW1lO1xuICB9O1xuXG4gIC8vXG4gIC8vIEJhc2UgcmVkdWN0aW9uIGVuZ2luZVxuICAvL1xuICBmdW5jdGlvbiBSZWQgKG0pIHtcbiAgICBpZiAodHlwZW9mIG0gPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgcHJpbWUgPSBCTi5fcHJpbWUobSk7XG4gICAgICB0aGlzLm0gPSBwcmltZS5wO1xuICAgICAgdGhpcy5wcmltZSA9IHByaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobS5ndG4oMSksICdtb2R1bHVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIDEnKTtcbiAgICAgIHRoaXMubSA9IG07XG4gICAgICB0aGlzLnByaW1lID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkxID0gZnVuY3Rpb24gX3ZlcmlmeTEgKGEpIHtcbiAgICBhc3NlcnQoYS5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkLCAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTIgPSBmdW5jdGlvbiBfdmVyaWZ5MiAoYSwgYikge1xuICAgIGFzc2VydCgoYS5uZWdhdGl2ZSB8IGIubmVnYXRpdmUpID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQgJiYgYS5yZWQgPT09IGIucmVkLFxuICAgICAgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltb2QgPSBmdW5jdGlvbiBpbW9kIChhKSB7XG4gICAgaWYgKHRoaXMucHJpbWUpIHJldHVybiB0aGlzLnByaW1lLmlyZWR1Y2UoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuXG4gICAgbW92ZShhLCBhLnVtb2QodGhpcy5tKS5fZm9yY2VSZWQodGhpcykpO1xuICAgIHJldHVybiBhO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnIChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubS5zdWIoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaWFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaXN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc2hsID0gZnVuY3Rpb24gc2hsIChhLCBudW0pIHtcbiAgICB0aGlzLl92ZXJpZnkxKGEpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS51c2hsbihudW0pKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEuaW11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5tdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKGEsIGEuY2xvbmUoKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwoYSwgYSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXJ0ID0gZnVuY3Rpb24gc3FydCAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIG1vZDMgPSB0aGlzLm0uYW5kbG4oMyk7XG4gICAgYXNzZXJ0KG1vZDMgJSAyID09PSAxKTtcblxuICAgIC8vIEZhc3QgY2FzZVxuICAgIGlmIChtb2QzID09PSAzKSB7XG4gICAgICB2YXIgcG93ID0gdGhpcy5tLmFkZChuZXcgQk4oMSkpLml1c2hybigyKTtcbiAgICAgIHJldHVybiB0aGlzLnBvdyhhLCBwb3cpO1xuICAgIH1cblxuICAgIC8vIFRvbmVsbGktU2hhbmtzIGFsZ29yaXRobSAoVG90YWxseSB1bm9wdGltaXplZCBhbmQgc2xvdylcbiAgICAvL1xuICAgIC8vIEZpbmQgUSBhbmQgUywgdGhhdCBRICogMiBeIFMgPSAoUCAtIDEpXG4gICAgdmFyIHEgPSB0aGlzLm0uc3VibigxKTtcbiAgICB2YXIgcyA9IDA7XG4gICAgd2hpbGUgKCFxLmlzWmVybygpICYmIHEuYW5kbG4oMSkgPT09IDApIHtcbiAgICAgIHMrKztcbiAgICAgIHEuaXVzaHJuKDEpO1xuICAgIH1cbiAgICBhc3NlcnQoIXEuaXNaZXJvKCkpO1xuXG4gICAgdmFyIG9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB2YXIgbk9uZSA9IG9uZS5yZWROZWcoKTtcblxuICAgIC8vIEZpbmQgcXVhZHJhdGljIG5vbi1yZXNpZHVlXG4gICAgLy8gTk9URTogTWF4IGlzIHN1Y2ggYmVjYXVzZSBvZiBnZW5lcmFsaXplZCBSaWVtYW5uIGh5cG90aGVzaXMuXG4gICAgdmFyIGxwb3cgPSB0aGlzLm0uc3VibigxKS5pdXNocm4oMSk7XG4gICAgdmFyIHogPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgeiA9IG5ldyBCTigyICogeiAqIHopLnRvUmVkKHRoaXMpO1xuXG4gICAgd2hpbGUgKHRoaXMucG93KHosIGxwb3cpLmNtcChuT25lKSAhPT0gMCkge1xuICAgICAgei5yZWRJQWRkKG5PbmUpO1xuICAgIH1cblxuICAgIHZhciBjID0gdGhpcy5wb3coeiwgcSk7XG4gICAgdmFyIHIgPSB0aGlzLnBvdyhhLCBxLmFkZG4oMSkuaXVzaHJuKDEpKTtcbiAgICB2YXIgdCA9IHRoaXMucG93KGEsIHEpO1xuICAgIHZhciBtID0gcztcbiAgICB3aGlsZSAodC5jbXAob25lKSAhPT0gMCkge1xuICAgICAgdmFyIHRtcCA9IHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgdG1wLmNtcChvbmUpICE9PSAwOyBpKyspIHtcbiAgICAgICAgdG1wID0gdG1wLnJlZFNxcigpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KGkgPCBtKTtcbiAgICAgIHZhciBiID0gdGhpcy5wb3coYywgbmV3IEJOKDEpLml1c2hsbihtIC0gaSAtIDEpKTtcblxuICAgICAgciA9IHIucmVkTXVsKGIpO1xuICAgICAgYyA9IGIucmVkU3FyKCk7XG4gICAgICB0ID0gdC5yZWRNdWwoYyk7XG4gICAgICBtID0gaTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgdmFyIGludiA9IGEuX2ludm1wKHRoaXMubSk7XG4gICAgaWYgKGludi5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaW52Lm5lZ2F0aXZlID0gMDtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KS5yZWROZWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpO1xuICAgIH1cbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAoYSwgbnVtKSB7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICBpZiAobnVtLmNtcG4oMSkgPT09IDApIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgd2luZG93U2l6ZSA9IDQ7XG4gICAgdmFyIHduZCA9IG5ldyBBcnJheSgxIDw8IHdpbmRvd1NpemUpO1xuICAgIHduZFswXSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB3bmRbMV0gPSBhO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgd25kLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3bmRbaV0gPSB0aGlzLm11bCh3bmRbaSAtIDFdLCBhKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gd25kWzBdO1xuICAgIHZhciBjdXJyZW50ID0gMDtcbiAgICB2YXIgY3VycmVudExlbiA9IDA7XG4gICAgdmFyIHN0YXJ0ID0gbnVtLmJpdExlbmd0aCgpICUgMjY7XG4gICAgaWYgKHN0YXJ0ID09PSAwKSB7XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIGZvciAoaSA9IG51bS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSBudW0ud29yZHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gc3RhcnQgLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICB2YXIgYml0ID0gKHdvcmQgPj4gaikgJiAxO1xuICAgICAgICBpZiAocmVzICE9PSB3bmRbMF0pIHtcbiAgICAgICAgICByZXMgPSB0aGlzLnNxcihyZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJpdCA9PT0gMCAmJiBjdXJyZW50ID09PSAwKSB7XG4gICAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50IDw8PSAxO1xuICAgICAgICBjdXJyZW50IHw9IGJpdDtcbiAgICAgICAgY3VycmVudExlbisrO1xuICAgICAgICBpZiAoY3VycmVudExlbiAhPT0gd2luZG93U2l6ZSAmJiAoaSAhPT0gMCB8fCBqICE9PSAwKSkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gdGhpcy5tdWwocmVzLCB3bmRbY3VycmVudF0pO1xuICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgY3VycmVudCA9IDA7XG4gICAgICB9XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHZhciByID0gbnVtLnVtb2QodGhpcy5tKTtcblxuICAgIHJldHVybiByID09PSBudW0gPyByLmNsb25lKCkgOiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHJlcyA9IG51bS5jbG9uZSgpO1xuICAgIHJlcy5yZWQgPSBudWxsO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy9cbiAgLy8gTW9udGdvbWVyeSBtZXRob2QgZW5naW5lXG4gIC8vXG5cbiAgQk4ubW9udCA9IGZ1bmN0aW9uIG1vbnQgKG51bSkge1xuICAgIHJldHVybiBuZXcgTW9udChudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIE1vbnQgKG0pIHtcbiAgICBSZWQuY2FsbCh0aGlzLCBtKTtcblxuICAgIHRoaXMuc2hpZnQgPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgaWYgKHRoaXMuc2hpZnQgJSAyNiAhPT0gMCkge1xuICAgICAgdGhpcy5zaGlmdCArPSAyNiAtICh0aGlzLnNoaWZ0ICUgMjYpO1xuICAgIH1cblxuICAgIHRoaXMuciA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5zaGlmdCk7XG4gICAgdGhpcy5yMiA9IHRoaXMuaW1vZCh0aGlzLnIuc3FyKCkpO1xuICAgIHRoaXMucmludiA9IHRoaXMuci5faW52bXAodGhpcy5tKTtcblxuICAgIHRoaXMubWludiA9IHRoaXMucmludi5tdWwodGhpcy5yKS5pc3VibigxKS5kaXYodGhpcy5tKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLm1pbnYudW1vZCh0aGlzLnIpO1xuICAgIHRoaXMubWludiA9IHRoaXMuci5zdWIodGhpcy5taW52KTtcbiAgfVxuICBpbmhlcml0cyhNb250LCBSZWQpO1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChudW0udXNobG4odGhpcy5zaGlmdCkpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByID0gdGhpcy5pbW9kKG51bS5tdWwodGhpcy5yaW52KSk7XG4gICAgci5yZWQgPSBudWxsO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkge1xuICAgICAgYS53b3Jkc1swXSA9IDA7XG4gICAgICBhLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICB2YXIgdCA9IGEuaW11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcblxuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgICB2YXIgdCA9IGEubXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICAvLyAoQVIpXi0xICogUl4yID0gKEFeLTEgKiBSXi0xKSAqIFJeMiA9IEFeLTEgKiBSXG4gICAgdmFyIHJlcyA9IHRoaXMuaW1vZChhLl9pbnZtcCh0aGlzLm0pLm11bCh0aGlzLnIyKSk7XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG59KSh0eXBlb2YgbW9kdWxlID09PSAndW5kZWZpbmVkJyB8fCBtb2R1bGUsIHRoaXMpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vd2lraS93aWtpL1JMUFxuXG5pbXBvcnQgeyBhcnJheWlmeSwgQnl0ZXNMaWtlLCBoZXhsaWZ5LCBpc0J5dGVzTGlrZSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5cbmZ1bmN0aW9uIGFycmF5aWZ5SW50ZWdlcih2YWx1ZTogbnVtYmVyKTogQXJyYXk8bnVtYmVyPiB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgd2hpbGUgKHZhbHVlKSB7XG4gICAgICAgIHJlc3VsdC51bnNoaWZ0KHZhbHVlICYgMHhmZik7XG4gICAgICAgIHZhbHVlID4+PSA4O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiB1bmFycmF5aWZ5SW50ZWdlcihkYXRhOiBVaW50OEFycmF5LCBvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGxldCByZXN1bHQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCAqIDI1NikgKyBkYXRhW29mZnNldCArIGldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBfZW5jb2RlKG9iamVjdDogQXJyYXk8YW55PiB8IHN0cmluZyk6IEFycmF5PG51bWJlcj4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICAgICAgbGV0IHBheWxvYWQ6IEFycmF5PG51bWJlcj4gPSBbXTtcbiAgICAgICAgb2JqZWN0LmZvckVhY2goZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgICAgIHBheWxvYWQgPSBwYXlsb2FkLmNvbmNhdChfZW5jb2RlKGNoaWxkKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChwYXlsb2FkLmxlbmd0aCA8PSA1NSkge1xuICAgICAgICAgICAgcGF5bG9hZC51bnNoaWZ0KDB4YzAgKyBwYXlsb2FkLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXJyYXlpZnlJbnRlZ2VyKHBheWxvYWQubGVuZ3RoKTtcbiAgICAgICAgbGVuZ3RoLnVuc2hpZnQoMHhmNyArIGxlbmd0aC5sZW5ndGgpO1xuXG4gICAgICAgIHJldHVybiBsZW5ndGguY29uY2F0KHBheWxvYWQpO1xuXG4gICAgfVxuXG4gICAgaWYgKCFpc0J5dGVzTGlrZShvYmplY3QpKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJSTFAgb2JqZWN0IG11c3QgYmUgQnl0ZXNMaWtlXCIsIFwib2JqZWN0XCIsIG9iamVjdCk7XG4gICAgfVxuXG4gICAgY29uc3QgZGF0YTogQXJyYXk8bnVtYmVyPiA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycmF5aWZ5KG9iamVjdCkpO1xuXG4gICAgaWYgKGRhdGEubGVuZ3RoID09PSAxICYmIGRhdGFbMF0gPD0gMHg3Zikge1xuICAgICAgICByZXR1cm4gZGF0YTtcblxuICAgIH0gZWxzZSBpZiAoZGF0YS5sZW5ndGggPD0gNTUpIHtcbiAgICAgICAgZGF0YS51bnNoaWZ0KDB4ODAgKyBkYXRhLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5aWZ5SW50ZWdlcihkYXRhLmxlbmd0aCk7XG4gICAgbGVuZ3RoLnVuc2hpZnQoMHhiNyArIGxlbmd0aC5sZW5ndGgpO1xuXG4gICAgcmV0dXJuIGxlbmd0aC5jb25jYXQoZGF0YSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUob2JqZWN0OiBhbnkpOiBzdHJpbmcge1xuICAgIHJldHVybiBoZXhsaWZ5KF9lbmNvZGUob2JqZWN0KSk7XG59XG5cbnR5cGUgRGVjb2RlZCA9IHtcbiAgICByZXN1bHQ6IGFueTtcbiAgICBjb25zdW1lZDogbnVtYmVyO1xufTtcblxuZnVuY3Rpb24gX2RlY29kZUNoaWxkcmVuKGRhdGE6IFVpbnQ4QXJyYXksIG9mZnNldDogbnVtYmVyLCBjaGlsZE9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlcik6IERlY29kZWQge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKGNoaWxkT2Zmc2V0IDwgb2Zmc2V0ICsgMSArIGxlbmd0aCkge1xuICAgICAgICBjb25zdCBkZWNvZGVkID0gX2RlY29kZShkYXRhLCBjaGlsZE9mZnNldCk7XG5cbiAgICAgICAgcmVzdWx0LnB1c2goZGVjb2RlZC5yZXN1bHQpO1xuXG4gICAgICAgIGNoaWxkT2Zmc2V0ICs9IGRlY29kZWQuY29uc3VtZWQ7XG4gICAgICAgIGlmIChjaGlsZE9mZnNldCA+IG9mZnNldCArIDEgKyBsZW5ndGgpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiY2hpbGQgZGF0YSB0b28gc2hvcnRcIiwgTG9nZ2VyLmVycm9ycy5CVUZGRVJfT1ZFUlJVTiwgeyB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7Y29uc3VtZWQ6ICgxICsgbGVuZ3RoKSwgcmVzdWx0OiByZXN1bHR9O1xufVxuXG4vLyByZXR1cm5zIHsgY29uc3VtZWQ6IG51bWJlciwgcmVzdWx0OiBPYmplY3QgfVxuZnVuY3Rpb24gX2RlY29kZShkYXRhOiBVaW50OEFycmF5LCBvZmZzZXQ6IG51bWJlcik6IHsgY29uc3VtZWQ6IG51bWJlciwgcmVzdWx0OiBhbnkgfSB7XG4gICAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiZGF0YSB0b28gc2hvcnRcIiwgTG9nZ2VyLmVycm9ycy5CVUZGRVJfT1ZFUlJVTiwgeyB9KTtcbiAgICB9XG5cbiAgICAvLyBBcnJheSB3aXRoIGV4dHJhIGxlbmd0aCBwcmVmaXhcbiAgICBpZiAoZGF0YVtvZmZzZXRdID49IDB4ZjgpIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoTGVuZ3RoID0gZGF0YVtvZmZzZXRdIC0gMHhmNztcbiAgICAgICAgaWYgKG9mZnNldCArIDEgKyBsZW5ndGhMZW5ndGggPiBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJkYXRhIHNob3J0IHNlZ21lbnQgdG9vIHNob3J0XCIsIExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4sIHsgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsZW5ndGggPSB1bmFycmF5aWZ5SW50ZWdlcihkYXRhLCBvZmZzZXQgKyAxLCBsZW5ndGhMZW5ndGgpO1xuICAgICAgICBpZiAob2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCArIGxlbmd0aCA+IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImRhdGEgbG9uZyBzZWdtZW50IHRvbyBzaG9ydFwiLCBMb2dnZXIuZXJyb3JzLkJVRkZFUl9PVkVSUlVOLCB7IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9kZWNvZGVDaGlsZHJlbihkYXRhLCBvZmZzZXQsIG9mZnNldCArIDEgKyBsZW5ndGhMZW5ndGgsIGxlbmd0aExlbmd0aCArIGxlbmd0aCk7XG5cbiAgICB9IGVsc2UgaWYgKGRhdGFbb2Zmc2V0XSA+PSAweGMwKSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGRhdGFbb2Zmc2V0XSAtIDB4YzA7XG4gICAgICAgIGlmIChvZmZzZXQgKyAxICsgbGVuZ3RoID4gZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiZGF0YSBhcnJheSB0b28gc2hvcnRcIiwgTG9nZ2VyLmVycm9ycy5CVUZGRVJfT1ZFUlJVTiwgeyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfZGVjb2RlQ2hpbGRyZW4oZGF0YSwgb2Zmc2V0LCBvZmZzZXQgKyAxLCBsZW5ndGgpO1xuXG4gICAgfSBlbHNlIGlmIChkYXRhW29mZnNldF0gPj0gMHhiOCkge1xuICAgICAgICBjb25zdCBsZW5ndGhMZW5ndGggPSBkYXRhW29mZnNldF0gLSAweGI3O1xuICAgICAgICBpZiAob2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCA+IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImRhdGEgYXJyYXkgdG9vIHNob3J0XCIsIExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4sIHsgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsZW5ndGggPSB1bmFycmF5aWZ5SW50ZWdlcihkYXRhLCBvZmZzZXQgKyAxLCBsZW5ndGhMZW5ndGgpO1xuICAgICAgICBpZiAob2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCArIGxlbmd0aCA+IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImRhdGEgYXJyYXkgdG9vIHNob3J0XCIsIExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4sIHsgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXN1bHQgPSBoZXhsaWZ5KGRhdGEuc2xpY2Uob2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCwgb2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCArIGxlbmd0aCkpO1xuICAgICAgICByZXR1cm4geyBjb25zdW1lZDogKDEgKyBsZW5ndGhMZW5ndGggKyBsZW5ndGgpLCByZXN1bHQ6IHJlc3VsdCB9XG5cbiAgICB9IGVsc2UgaWYgKGRhdGFbb2Zmc2V0XSA+PSAweDgwKSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGRhdGFbb2Zmc2V0XSAtIDB4ODA7XG4gICAgICAgIGlmIChvZmZzZXQgKyAxICsgbGVuZ3RoID4gZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiZGF0YSB0b28gc2hvcnRcIiwgTG9nZ2VyLmVycm9ycy5CVUZGRVJfT1ZFUlJVTiwgeyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGhleGxpZnkoZGF0YS5zbGljZShvZmZzZXQgKyAxLCBvZmZzZXQgKyAxICsgbGVuZ3RoKSk7XG4gICAgICAgIHJldHVybiB7IGNvbnN1bWVkOiAoMSArIGxlbmd0aCksIHJlc3VsdDogcmVzdWx0IH1cbiAgICB9XG4gICAgcmV0dXJuIHsgY29uc3VtZWQ6IDEsIHJlc3VsdDogaGV4bGlmeShkYXRhW29mZnNldF0pIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUoZGF0YTogQnl0ZXNMaWtlKTogYW55IHtcbiAgICBjb25zdCBieXRlcyA9IGFycmF5aWZ5KGRhdGEpO1xuICAgIGNvbnN0IGRlY29kZWQgPSBfZGVjb2RlKGJ5dGVzLCAwKTtcbiAgICBpZiAoZGVjb2RlZC5jb25zdW1lZCAhPT0gYnl0ZXMubGVuZ3RoKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHJscCBkYXRhXCIsIFwiZGF0YVwiLCBkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlY29kZWQucmVzdWx0O1xufVxuXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBFeHBvcnRlZCBUeXBlc1xuXG5leHBvcnQgdHlwZSBCeXRlcyA9IEFycmF5TGlrZTxudW1iZXI+O1xuXG5leHBvcnQgdHlwZSBCeXRlc0xpa2UgPSBCeXRlcyB8IHN0cmluZztcblxuZXhwb3J0IHR5cGUgRGF0YU9wdGlvbnMgPSB7XG4gICAgYWxsb3dNaXNzaW5nUHJlZml4PzogYm9vbGVhbjtcbiAgICBoZXhQYWQ/OiBcImxlZnRcIiB8IFwicmlnaHRcIiB8IG51bGw7XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIEhleGFibGUge1xuICAgIHRvSGV4U3RyaW5nKCk6IHN0cmluZztcbn1cblxuXG4vKlxuZXhwb3J0IGludGVyZmFjZSBIZXhTdHJpbmcge1xuICAgIGxlbmd0aDogbnVtYmVyO1xuICAgIHN1YnN0cmluZzogKHN0YXJ0OiBudW1iZXIsIGVuZD86IG51bWJlcikgPT4gc3RyaW5nO1xuXG4gICAgW2luZGV4OiBudW1iZXJdOiBzdHJpbmc7XG59XG4qL1xuXG5leHBvcnQgdHlwZSBTaWduYXR1cmVMaWtlICA9IHtcbiAgICByOiBzdHJpbmc7XG4gICAgcz86IHN0cmluZztcbiAgICBfdnM/OiBzdHJpbmcsXG4gICAgcmVjb3ZlcnlQYXJhbT86IG51bWJlcjtcbiAgICB2PzogbnVtYmVyO1xufSB8IEJ5dGVzTGlrZTtcblxuZXhwb3J0IGludGVyZmFjZSBTaWduYXR1cmUge1xuICAgIHI6IHN0cmluZztcblxuICAgIHM6IHN0cmluZztcbiAgICBfdnM6IHN0cmluZyxcblxuICAgIHJlY292ZXJ5UGFyYW06IG51bWJlcjtcbiAgICB2OiBudW1iZXI7XG5cbiAgICB5UGFyaXR5QW5kUzogc3RyaW5nXG4gICAgY29tcGFjdDogc3RyaW5nO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuZnVuY3Rpb24gaXNIZXhhYmxlKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBIZXhhYmxlIHtcbiAgICByZXR1cm4gISEodmFsdWUudG9IZXhTdHJpbmcpO1xufVxuXG5mdW5jdGlvbiBhZGRTbGljZShhcnJheTogVWludDhBcnJheSk6IFVpbnQ4QXJyYXkge1xuICAgIGlmIChhcnJheS5zbGljZSkgeyByZXR1cm4gYXJyYXk7IH1cblxuICAgIGFycmF5LnNsaWNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gYWRkU2xpY2UobmV3IFVpbnQ4QXJyYXkoQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGFycmF5LCBhcmdzKSkpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQnl0ZXNMaWtlKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBCeXRlc0xpa2Uge1xuICAgIHJldHVybiAoKGlzSGV4U3RyaW5nKHZhbHVlKSAmJiAhKHZhbHVlLmxlbmd0aCAlIDIpKSB8fCBpc0J5dGVzKHZhbHVlKSk7XG59XG5cbmZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuICh0eXBlb2YodmFsdWUpID09PSBcIm51bWJlclwiICYmIHZhbHVlID09IHZhbHVlICYmICh2YWx1ZSAlIDEpID09PSAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQnl0ZXModmFsdWU6IGFueSk6IHZhbHVlIGlzIEJ5dGVzIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgIGlmICh2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gVWludDhBcnJheSkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgIGlmICh0eXBlb2YodmFsdWUpID09PSBcInN0cmluZ1wiKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIGlmICghaXNJbnRlZ2VyKHZhbHVlLmxlbmd0aCkgfHwgdmFsdWUubGVuZ3RoIDwgMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdiA9IHZhbHVlW2ldO1xuICAgICAgICBpZiAoIWlzSW50ZWdlcih2KSB8fCB2IDwgMCB8fCB2ID49IDI1NikgeyByZXR1cm4gZmFsc2U7IH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5aWZ5KHZhbHVlOiBCeXRlc0xpa2UgfCBIZXhhYmxlIHwgbnVtYmVyLCBvcHRpb25zPzogRGF0YU9wdGlvbnMpOiBVaW50OEFycmF5IHtcbiAgICBpZiAoIW9wdGlvbnMpIHsgb3B0aW9ucyA9IHsgfTsgfVxuXG4gICAgaWYgKHR5cGVvZih2YWx1ZSkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgbG9nZ2VyLmNoZWNrU2FmZVVpbnQ1Myh2YWx1ZSwgXCJpbnZhbGlkIGFycmF5aWZ5IHZhbHVlXCIpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICB3aGlsZSAodmFsdWUpIHtcbiAgICAgICAgICAgIHJlc3VsdC51bnNoaWZ0KHZhbHVlICYgMHhmZik7XG4gICAgICAgICAgICB2YWx1ZSA9IHBhcnNlSW50KFN0cmluZyh2YWx1ZSAvIDI1NikpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID09PSAwKSB7IHJlc3VsdC5wdXNoKDApOyB9XG5cbiAgICAgICAgcmV0dXJuIGFkZFNsaWNlKG5ldyBVaW50OEFycmF5KHJlc3VsdCkpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmFsbG93TWlzc2luZ1ByZWZpeCAmJiB0eXBlb2YodmFsdWUpID09PSBcInN0cmluZ1wiICYmIHZhbHVlLnN1YnN0cmluZygwLCAyKSAhPT0gXCIweFwiKSB7XG4gICAgICAgICB2YWx1ZSA9IFwiMHhcIiArIHZhbHVlO1xuICAgIH1cblxuICAgIGlmIChpc0hleGFibGUodmFsdWUpKSB7IHZhbHVlID0gdmFsdWUudG9IZXhTdHJpbmcoKTsgfVxuXG4gICAgaWYgKGlzSGV4U3RyaW5nKHZhbHVlKSkge1xuICAgICAgICBsZXQgaGV4ID0gKDxzdHJpbmc+dmFsdWUpLnN1YnN0cmluZygyKTtcbiAgICAgICAgaWYgKGhleC5sZW5ndGggJSAyKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5oZXhQYWQgPT09IFwibGVmdFwiKSB7XG4gICAgICAgICAgICAgICAgaGV4ID0gXCIwXCIgKyBoZXg7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuaGV4UGFkID09PSBcInJpZ2h0XCIpIHtcbiAgICAgICAgICAgICAgICBoZXggKz0gXCIwXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJoZXggZGF0YSBpcyBvZGQtbGVuZ3RoXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGV4Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChwYXJzZUludChoZXguc3Vic3RyaW5nKGksIGkgKyAyKSwgMTYpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhZGRTbGljZShuZXcgVWludDhBcnJheShyZXN1bHQpKTtcbiAgICB9XG5cbiAgICBpZiAoaXNCeXRlcyh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGFkZFNsaWNlKG5ldyBVaW50OEFycmF5KHZhbHVlKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGFycmF5aWZ5IHZhbHVlXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uY2F0KGl0ZW1zOiBSZWFkb25seUFycmF5PEJ5dGVzTGlrZT4pOiBVaW50OEFycmF5IHtcbiAgICBjb25zdCBvYmplY3RzID0gaXRlbXMubWFwKGl0ZW0gPT4gYXJyYXlpZnkoaXRlbSkpO1xuICAgIGNvbnN0IGxlbmd0aCA9IG9iamVjdHMucmVkdWNlKChhY2N1bSwgaXRlbSkgPT4gKGFjY3VtICsgaXRlbS5sZW5ndGgpLCAwKTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG5cbiAgICBvYmplY3RzLnJlZHVjZSgob2Zmc2V0LCBvYmplY3QpID0+IHtcbiAgICAgICAgcmVzdWx0LnNldChvYmplY3QsIG9mZnNldCk7XG4gICAgICAgIHJldHVybiBvZmZzZXQgKyBvYmplY3QubGVuZ3RoO1xuICAgIH0sIDApO1xuXG4gICAgcmV0dXJuIGFkZFNsaWNlKHJlc3VsdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcFplcm9zKHZhbHVlOiBCeXRlc0xpa2UpOiBVaW50OEFycmF5IHtcbiAgICBsZXQgcmVzdWx0OiBVaW50OEFycmF5ID0gYXJyYXlpZnkodmFsdWUpO1xuXG4gICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDApIHsgcmV0dXJuIHJlc3VsdDsgfVxuXG4gICAgLy8gRmluZCB0aGUgZmlyc3Qgbm9uLXplcm8gZW50cnlcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIHdoaWxlIChzdGFydCA8IHJlc3VsdC5sZW5ndGggJiYgcmVzdWx0W3N0YXJ0XSA9PT0gMCkgeyBzdGFydCsrIH1cblxuICAgIC8vIElmIHdlIHN0YXJ0ZWQgd2l0aCB6ZXJvcywgc3RyaXAgdGhlbVxuICAgIGlmIChzdGFydCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2Uoc3RhcnQpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB6ZXJvUGFkKHZhbHVlOiBCeXRlc0xpa2UsIGxlbmd0aDogbnVtYmVyKTogVWludDhBcnJheSB7XG4gICAgdmFsdWUgPSBhcnJheWlmeSh2YWx1ZSk7XG5cbiAgICBpZiAodmFsdWUubGVuZ3RoID4gbGVuZ3RoKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ2YWx1ZSBvdXQgb2YgcmFuZ2VcIiwgXCJ2YWx1ZVwiLCBhcmd1bWVudHNbMF0pO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgcmVzdWx0LnNldCh2YWx1ZSwgbGVuZ3RoIC0gdmFsdWUubGVuZ3RoKTtcbiAgICByZXR1cm4gYWRkU2xpY2UocmVzdWx0KTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gaXNIZXhTdHJpbmcodmFsdWU6IGFueSwgbGVuZ3RoPzogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgaWYgKHR5cGVvZih2YWx1ZSkgIT09IFwic3RyaW5nXCIgfHwgIXZhbHVlLm1hdGNoKC9eMHhbMC05QS1GYS1mXSokLykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChsZW5ndGggJiYgdmFsdWUubGVuZ3RoICE9PSAyICsgMiAqIGxlbmd0aCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuY29uc3QgSGV4Q2hhcmFjdGVyczogc3RyaW5nID0gXCIwMTIzNDU2Nzg5YWJjZGVmXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBoZXhsaWZ5KHZhbHVlOiBCeXRlc0xpa2UgfCBIZXhhYmxlIHwgbnVtYmVyIHwgYmlnaW50LCBvcHRpb25zPzogRGF0YU9wdGlvbnMpOiBzdHJpbmcge1xuICAgIGlmICghb3B0aW9ucykgeyBvcHRpb25zID0geyB9OyB9XG5cbiAgICBpZiAodHlwZW9mKHZhbHVlKSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBsb2dnZXIuY2hlY2tTYWZlVWludDUzKHZhbHVlLCBcImludmFsaWQgaGV4bGlmeSB2YWx1ZVwiKTtcblxuICAgICAgICBsZXQgaGV4ID0gXCJcIjtcbiAgICAgICAgd2hpbGUgKHZhbHVlKSB7XG4gICAgICAgICAgICBoZXggPSBIZXhDaGFyYWN0ZXJzW3ZhbHVlICYgMHhmXSArIGhleDtcbiAgICAgICAgICAgIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSAvIDE2KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoZXgubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGV4Lmxlbmd0aCAlIDIpIHsgaGV4ID0gXCIwXCIgKyBoZXg7IH1cbiAgICAgICAgICAgIHJldHVybiBcIjB4XCIgKyBoZXg7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gXCIweDAwXCI7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZih2YWx1ZSkgPT09IFwiYmlnaW50XCIpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygxNik7XG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggJSAyKSB7IHJldHVybiAoXCIweDBcIiArIHZhbHVlKTsgfVxuICAgICAgICByZXR1cm4gXCIweFwiICsgdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuYWxsb3dNaXNzaW5nUHJlZml4ICYmIHR5cGVvZih2YWx1ZSkgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUuc3Vic3RyaW5nKDAsIDIpICE9PSBcIjB4XCIpIHtcbiAgICAgICAgIHZhbHVlID0gXCIweFwiICsgdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKGlzSGV4YWJsZSh2YWx1ZSkpIHsgcmV0dXJuIHZhbHVlLnRvSGV4U3RyaW5nKCk7IH1cblxuICAgIGlmIChpc0hleFN0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCg8c3RyaW5nPnZhbHVlKS5sZW5ndGggJSAyKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5oZXhQYWQgPT09IFwibGVmdFwiKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBcIjB4MFwiICsgKDxzdHJpbmc+dmFsdWUpLnN1YnN0cmluZygyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5oZXhQYWQgPT09IFwicmlnaHRcIikge1xuICAgICAgICAgICAgICAgIHZhbHVlICs9IFwiMFwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaGV4IGRhdGEgaXMgb2RkLWxlbmd0aFwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKDxzdHJpbmc+dmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgaWYgKGlzQnl0ZXModmFsdWUpKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBcIjB4XCI7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICBsZXQgdiA9IHZhbHVlW2ldO1xuICAgICAgICAgICAgIHJlc3VsdCArPSBIZXhDaGFyYWN0ZXJzWyh2ICYgMHhmMCkgPj4gNF0gKyBIZXhDaGFyYWN0ZXJzW3YgJiAweDBmXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJldHVybiBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBoZXhsaWZ5IHZhbHVlXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xufVxuXG4vKlxuZnVuY3Rpb24gdW5vZGRpZnkodmFsdWU6IEJ5dGVzTGlrZSB8IEhleGFibGUgfCBudW1iZXIpOiBCeXRlc0xpa2UgfCBIZXhhYmxlIHwgbnVtYmVyIHtcbiAgICBpZiAodHlwZW9mKHZhbHVlKSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZS5sZW5ndGggJSAyICYmIHZhbHVlLnN1YnN0cmluZygwLCAyKSA9PT0gXCIweFwiKSB7XG4gICAgICAgIHJldHVybiBcIjB4MFwiICsgdmFsdWUuc3Vic3RyaW5nKDIpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGhleERhdGFMZW5ndGgoZGF0YTogQnl0ZXNMaWtlKSB7XG4gICAgaWYgKHR5cGVvZihkYXRhKSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBkYXRhID0gaGV4bGlmeShkYXRhKTtcbiAgICB9IGVsc2UgaWYgKCFpc0hleFN0cmluZyhkYXRhKSB8fCAoZGF0YS5sZW5ndGggJSAyKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gKGRhdGEubGVuZ3RoIC0gMikgLyAyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGV4RGF0YVNsaWNlKGRhdGE6IEJ5dGVzTGlrZSwgb2Zmc2V0OiBudW1iZXIsIGVuZE9mZnNldD86IG51bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZihkYXRhKSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBkYXRhID0gaGV4bGlmeShkYXRhKTtcbiAgICB9IGVsc2UgaWYgKCFpc0hleFN0cmluZyhkYXRhKSB8fCAoZGF0YS5sZW5ndGggJSAyKSkge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBoZXhEYXRhXCIsIFwidmFsdWVcIiwgZGF0YSApO1xuICAgIH1cblxuICAgIG9mZnNldCA9IDIgKyAyICogb2Zmc2V0O1xuXG4gICAgaWYgKGVuZE9mZnNldCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBcIjB4XCIgKyBkYXRhLnN1YnN0cmluZyhvZmZzZXQsIDIgKyAyICogZW5kT2Zmc2V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCIweFwiICsgZGF0YS5zdWJzdHJpbmcob2Zmc2V0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhleENvbmNhdChpdGVtczogUmVhZG9ubHlBcnJheTxCeXRlc0xpa2U+KTogc3RyaW5nIHtcbiAgICBsZXQgcmVzdWx0ID0gXCIweFwiO1xuICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgcmVzdWx0ICs9IGhleGxpZnkoaXRlbSkuc3Vic3RyaW5nKDIpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoZXhWYWx1ZSh2YWx1ZTogQnl0ZXNMaWtlIHwgSGV4YWJsZSB8IG51bWJlciB8IGJpZ2ludCk6IHN0cmluZyB7XG4gICAgY29uc3QgdHJpbW1lZCA9IGhleFN0cmlwWmVyb3MoaGV4bGlmeSh2YWx1ZSwgeyBoZXhQYWQ6IFwibGVmdFwiIH0pKTtcbiAgICBpZiAodHJpbW1lZCA9PT0gXCIweFwiKSB7IHJldHVybiBcIjB4MFwiOyB9XG4gICAgcmV0dXJuIHRyaW1tZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoZXhTdHJpcFplcm9zKHZhbHVlOiBCeXRlc0xpa2UpOiBzdHJpbmcge1xuICAgIGlmICh0eXBlb2YodmFsdWUpICE9PSBcInN0cmluZ1wiKSB7IHZhbHVlID0gaGV4bGlmeSh2YWx1ZSk7IH1cblxuICAgIGlmICghaXNIZXhTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGhleCBzdHJpbmdcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgfVxuICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDIpO1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIHdoaWxlIChvZmZzZXQgPCB2YWx1ZS5sZW5ndGggJiYgdmFsdWVbb2Zmc2V0XSA9PT0gXCIwXCIpIHsgb2Zmc2V0Kys7IH1cbiAgICByZXR1cm4gXCIweFwiICsgdmFsdWUuc3Vic3RyaW5nKG9mZnNldCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoZXhaZXJvUGFkKHZhbHVlOiBCeXRlc0xpa2UsIGxlbmd0aDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mKHZhbHVlKSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YWx1ZSA9IGhleGxpZnkodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoIWlzSGV4U3RyaW5nKHZhbHVlKSkge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBoZXggc3RyaW5nXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZS5sZW5ndGggPiAyICogbGVuZ3RoICsgMikge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidmFsdWUgb3V0IG9mIHJhbmdlXCIsIFwidmFsdWVcIiwgYXJndW1lbnRzWzFdKTtcbiAgICB9XG5cbiAgICB3aGlsZSAodmFsdWUubGVuZ3RoIDwgMiAqIGxlbmd0aCArIDIpIHtcbiAgICAgICAgdmFsdWUgPSBcIjB4MFwiICsgdmFsdWUuc3Vic3RyaW5nKDIpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0U2lnbmF0dXJlKHNpZ25hdHVyZTogU2lnbmF0dXJlTGlrZSk6IFNpZ25hdHVyZSB7XG5cbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgIHI6IFwiMHhcIixcbiAgICAgICAgczogXCIweFwiLFxuICAgICAgICBfdnM6IFwiMHhcIixcbiAgICAgICAgcmVjb3ZlcnlQYXJhbTogMCxcbiAgICAgICAgdjogMCxcbiAgICAgICAgeVBhcml0eUFuZFM6IFwiMHhcIixcbiAgICAgICAgY29tcGFjdDogXCIweFwiXG4gICAgfTtcblxuICAgIGlmIChpc0J5dGVzTGlrZShzaWduYXR1cmUpKSB7XG4gICAgICAgIGxldCBieXRlczogVWludDhBcnJheSA9IGFycmF5aWZ5KHNpZ25hdHVyZSk7XG5cbiAgICAgICAgLy8gR2V0IHRoZSByLCBzIGFuZCB2XG4gICAgICAgIGlmIChieXRlcy5sZW5ndGggPT09IDY0KSB7XG4gICAgICAgICAgICAvLyBFSVAtMjA5ODsgcHVsbCB0aGUgdiBmcm9tIHRoZSB0b3AgYml0IG9mIHMgYW5kIGNsZWFyIGl0XG4gICAgICAgICAgICByZXN1bHQudiA9IDI3ICsgKGJ5dGVzWzMyXSA+PiA3KTtcbiAgICAgICAgICAgIGJ5dGVzWzMyXSAmPSAweDdmO1xuXG4gICAgICAgICAgICByZXN1bHQuciA9IGhleGxpZnkoYnl0ZXMuc2xpY2UoMCwgMzIpKTtcbiAgICAgICAgICAgIHJlc3VsdC5zID0gaGV4bGlmeShieXRlcy5zbGljZSgzMiwgNjQpKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGJ5dGVzLmxlbmd0aCA9PT0gNjUpIHtcbiAgICAgICAgICAgIHJlc3VsdC5yID0gaGV4bGlmeShieXRlcy5zbGljZSgwLCAzMikpO1xuICAgICAgICAgICAgcmVzdWx0LnMgPSBoZXhsaWZ5KGJ5dGVzLnNsaWNlKDMyLCA2NCkpO1xuICAgICAgICAgICAgcmVzdWx0LnYgPSBieXRlc1s2NF07XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHNpZ25hdHVyZSBzdHJpbmdcIiwgXCJzaWduYXR1cmVcIiwgc2lnbmF0dXJlKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gQWxsb3cgYSByZWNpZCB0byBiZSB1c2VkIGFzIHRoZSB2XG4gICAgICAgIGlmIChyZXN1bHQudiA8IDI3KSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0LnYgPT09IDAgfHwgcmVzdWx0LnYgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQudiArPSAyNztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSBpbnZhbGlkIHYgYnl0ZVwiLCBcInNpZ25hdHVyZVwiLCBzaWduYXR1cmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29tcHV0ZSByZWNvdmVyeVBhcmFtIGZyb20gdlxuICAgICAgICByZXN1bHQucmVjb3ZlcnlQYXJhbSA9IDEgLSAocmVzdWx0LnYgJSAyKTtcblxuICAgICAgICAvLyBDb21wdXRlIF92cyBmcm9tIHJlY292ZXJ5UGFyYW0gYW5kIHNcbiAgICAgICAgaWYgKHJlc3VsdC5yZWNvdmVyeVBhcmFtKSB7IGJ5dGVzWzMyXSB8PSAweDgwOyB9XG4gICAgICAgIHJlc3VsdC5fdnMgPSBoZXhsaWZ5KGJ5dGVzLnNsaWNlKDMyLCA2NCkpXG5cbiAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQuciA9IHNpZ25hdHVyZS5yO1xuICAgICAgICByZXN1bHQucyA9IHNpZ25hdHVyZS5zO1xuICAgICAgICByZXN1bHQudiA9IHNpZ25hdHVyZS52O1xuICAgICAgICByZXN1bHQucmVjb3ZlcnlQYXJhbSA9IHNpZ25hdHVyZS5yZWNvdmVyeVBhcmFtO1xuICAgICAgICByZXN1bHQuX3ZzID0gc2lnbmF0dXJlLl92cztcblxuICAgICAgICAvLyBJZiB0aGUgX3ZzIGlzIGF2YWlsYWJsZSwgdXNlIGl0IHRvIHBvcHVsYXRlIG1pc3NpbmcgcywgdiBhbmQgcmVjb3ZlcnlQYXJhbVxuICAgICAgICAvLyBhbmQgdmVyaWZ5IG5vbi1taXNzaW5nIHMsIHYgYW5kIHJlY292ZXJ5UGFyYW1cbiAgICAgICAgaWYgKHJlc3VsdC5fdnMgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgdnMgPSB6ZXJvUGFkKGFycmF5aWZ5KHJlc3VsdC5fdnMpLCAzMik7XG4gICAgICAgICAgICByZXN1bHQuX3ZzID0gaGV4bGlmeSh2cyk7XG5cbiAgICAgICAgICAgIC8vIFNldCBvciBjaGVjayB0aGUgcmVjaWRcbiAgICAgICAgICAgIGNvbnN0IHJlY292ZXJ5UGFyYW0gPSAoKHZzWzBdID49IDEyOCkgPyAxOiAwKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQucmVjb3ZlcnlQYXJhbSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnJlY292ZXJ5UGFyYW0gPSByZWNvdmVyeVBhcmFtO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQucmVjb3ZlcnlQYXJhbSAhPT0gcmVjb3ZlcnlQYXJhbSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJzaWduYXR1cmUgcmVjb3ZlcnlQYXJhbSBtaXNtYXRjaCBfdnNcIiwgXCJzaWduYXR1cmVcIiwgc2lnbmF0dXJlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IG9yIGNoZWNrIHRoZSBzXG4gICAgICAgICAgICB2c1swXSAmPSAweDdmO1xuICAgICAgICAgICAgY29uc3QgcyA9IGhleGxpZnkodnMpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucyA9IHM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5zICE9PSBzKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSB2IG1pc21hdGNoIF92c1wiLCBcInNpZ25hdHVyZVwiLCBzaWduYXR1cmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXNlIHJlY2lkIGFuZCB2IHRvIHBvcHVsYXRlIGVhY2ggb3RoZXJcbiAgICAgICAgaWYgKHJlc3VsdC5yZWNvdmVyeVBhcmFtID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQudiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSBtaXNzaW5nIHYgYW5kIHJlY292ZXJ5UGFyYW1cIiwgXCJzaWduYXR1cmVcIiwgc2lnbmF0dXJlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LnYgPT09IDAgfHwgcmVzdWx0LnYgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucmVjb3ZlcnlQYXJhbSA9IHJlc3VsdC52O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucmVjb3ZlcnlQYXJhbSA9IDEgLSAocmVzdWx0LnYgJSAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQudiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnYgPSAyNyArIHJlc3VsdC5yZWNvdmVyeVBhcmFtO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWNJZCA9IChyZXN1bHQudiA9PT0gMCB8fCByZXN1bHQudiA9PT0gMSkgPyByZXN1bHQudiA6KDEgLSAocmVzdWx0LnYgJSAyKSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5yZWNvdmVyeVBhcmFtICE9PSByZWNJZCkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwic2lnbmF0dXJlIHJlY292ZXJ5UGFyYW0gbWlzbWF0Y2ggdlwiLCBcInNpZ25hdHVyZVwiLCBzaWduYXR1cmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXN1bHQuciA9PSBudWxsIHx8ICFpc0hleFN0cmluZyhyZXN1bHQucikpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJzaWduYXR1cmUgbWlzc2luZyBvciBpbnZhbGlkIHJcIiwgXCJzaWduYXR1cmVcIiwgc2lnbmF0dXJlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5yID0gaGV4WmVyb1BhZChyZXN1bHQuciwgMzIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc3VsdC5zID09IG51bGwgfHwgIWlzSGV4U3RyaW5nKHJlc3VsdC5zKSkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSBtaXNzaW5nIG9yIGludmFsaWQgc1wiLCBcInNpZ25hdHVyZVwiLCBzaWduYXR1cmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnMgPSBoZXhaZXJvUGFkKHJlc3VsdC5zLCAzMik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB2cyA9IGFycmF5aWZ5KHJlc3VsdC5zKTtcbiAgICAgICAgaWYgKHZzWzBdID49IDEyOCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSBzIG91dCBvZiByYW5nZVwiLCBcInNpZ25hdHVyZVwiLCBzaWduYXR1cmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQucmVjb3ZlcnlQYXJhbSkgeyB2c1swXSB8PSAweDgwOyB9XG4gICAgICAgIGNvbnN0IF92cyA9IGhleGxpZnkodnMpO1xuXG4gICAgICAgIGlmIChyZXN1bHQuX3ZzKSB7XG4gICAgICAgICAgICBpZiAoIWlzSGV4U3RyaW5nKHJlc3VsdC5fdnMpKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInNpZ25hdHVyZSBpbnZhbGlkIF92c1wiLCBcInNpZ25hdHVyZVwiLCBzaWduYXR1cmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0Ll92cyA9IGhleFplcm9QYWQocmVzdWx0Ll92cywgMzIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IG9yIGNoZWNrIHRoZSBfdnNcbiAgICAgICAgaWYgKHJlc3VsdC5fdnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0Ll92cyA9IF92cztcbiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuX3ZzICE9PSBfdnMpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJzaWduYXR1cmUgX3ZzIG1pc21hdGNoIHYgYW5kIHNcIiwgXCJzaWduYXR1cmVcIiwgc2lnbmF0dXJlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc3VsdC55UGFyaXR5QW5kUyA9IHJlc3VsdC5fdnM7XG4gICAgcmVzdWx0LmNvbXBhY3QgPSByZXN1bHQuciArIHJlc3VsdC55UGFyaXR5QW5kUy5zdWJzdHJpbmcoMik7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gam9pblNpZ25hdHVyZShzaWduYXR1cmU6IFNpZ25hdHVyZUxpa2UpOiBzdHJpbmcge1xuICAgIHNpZ25hdHVyZSA9IHNwbGl0U2lnbmF0dXJlKHNpZ25hdHVyZSk7XG5cbiAgICByZXR1cm4gaGV4bGlmeShjb25jYXQoW1xuICAgICAgICAgc2lnbmF0dXJlLnIsXG4gICAgICAgICBzaWduYXR1cmUucyxcbiAgICAgICAgIChzaWduYXR1cmUucmVjb3ZlcnlQYXJhbSA/IFwiMHgxY1wiOiBcIjB4MWJcIilcbiAgICBdKSk7XG59XG5cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5sZXQgX3Blcm1hbmVudENlbnNvckVycm9ycyA9IGZhbHNlO1xubGV0IF9jZW5zb3JFcnJvcnMgPSBmYWxzZTtcblxuY29uc3QgTG9nTGV2ZWxzOiB7IFsgbmFtZTogc3RyaW5nIF06IG51bWJlciB9ID0geyBkZWJ1ZzogMSwgXCJkZWZhdWx0XCI6IDIsIGluZm86IDIsIHdhcm5pbmc6IDMsIGVycm9yOiA0LCBvZmY6IDUgfTtcbmxldCBfbG9nTGV2ZWwgPSBMb2dMZXZlbHNbXCJkZWZhdWx0XCJdO1xuXG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcblxubGV0IF9nbG9iYWxMb2dnZXI6IExvZ2dlciA9IG51bGw7XG5cbmZ1bmN0aW9uIF9jaGVja05vcm1hbGl6ZSgpOiBzdHJpbmcge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG1pc3Npbmc6IEFycmF5PHN0cmluZz4gPSBbIF07XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlIGFsbCBmb3JtcyBvZiBub3JtYWxpemF0aW9uIGFyZSBzdXBwb3J0ZWRcbiAgICAgICAgW1wiTkZEXCIsIFwiTkZDXCIsIFwiTkZLRFwiLCBcIk5GS0NcIl0uZm9yRWFjaCgoZm9ybSkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoXCJ0ZXN0XCIubm9ybWFsaXplKGZvcm0pICE9PSBcInRlc3RcIikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJiYWQgbm9ybWFsaXplXCIpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgbWlzc2luZy5wdXNoKGZvcm0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobWlzc2luZy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1pc3NpbmcgXCIgKyBtaXNzaW5nLmpvaW4oXCIsIFwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoU3RyaW5nLmZyb21DaGFyQ29kZSgweGU5KS5ub3JtYWxpemUoXCJORkRcIikgIT09IFN0cmluZy5mcm9tQ2hhckNvZGUoMHg2NSwgMHgwMzAxKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYnJva2VuIGltcGxlbWVudGF0aW9uXCIpXG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gZXJyb3IubWVzc2FnZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuY29uc3QgX25vcm1hbGl6ZUVycm9yID0gX2NoZWNrTm9ybWFsaXplKCk7XG5cbmV4cG9ydCBlbnVtIExvZ0xldmVsIHtcbiAgICBERUJVRyAgICA9IFwiREVCVUdcIixcbiAgICBJTkZPICAgICA9IFwiSU5GT1wiLFxuICAgIFdBUk5JTkcgID0gXCJXQVJOSU5HXCIsXG4gICAgRVJST1IgICAgPSBcIkVSUk9SXCIsXG4gICAgT0ZGICAgICAgPSBcIk9GRlwiXG59XG5cblxuZXhwb3J0IGVudW0gRXJyb3JDb2RlIHtcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBHZW5lcmljIEVycm9yc1xuXG4gICAgLy8gVW5rbm93biBFcnJvclxuICAgIFVOS05PV05fRVJST1IgPSBcIlVOS05PV05fRVJST1JcIixcblxuICAgIC8vIE5vdCBJbXBsZW1lbnRlZFxuICAgIE5PVF9JTVBMRU1FTlRFRCA9IFwiTk9UX0lNUExFTUVOVEVEXCIsXG5cbiAgICAvLyBVbnN1cHBvcnRlZCBPcGVyYXRpb25cbiAgICAvLyAgIC0gb3BlcmF0aW9uXG4gICAgVU5TVVBQT1JURURfT1BFUkFUSU9OID0gXCJVTlNVUFBPUlRFRF9PUEVSQVRJT05cIixcblxuICAgIC8vIE5ldHdvcmsgRXJyb3IgKGkuZS4gRXRoZXJldW0gTmV0d29yaywgc3VjaCBhcyBhbiBpbnZhbGlkIGNoYWluIElEKVxuICAgIC8vICAgLSBldmVudCAoXCJub05ldHdvcmtcIiBpcyBub3QgcmUtdGhyb3duIGluIHByb3ZpZGVyLnJlYWR5OyBvdGhlcndpc2UgdGhyb3duKVxuICAgIE5FVFdPUktfRVJST1IgPSBcIk5FVFdPUktfRVJST1JcIixcblxuICAgIC8vIFNvbWUgc29ydCBvZiBiYWQgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyXG4gICAgU0VSVkVSX0VSUk9SID0gXCJTRVJWRVJfRVJST1JcIixcblxuICAgIC8vIFRpbWVvdXRcbiAgICBUSU1FT1VUID0gXCJUSU1FT1VUXCIsXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gT3BlcmF0aW9uYWwgIEVycm9yc1xuXG4gICAgLy8gQnVmZmVyIE92ZXJydW5cbiAgICBCVUZGRVJfT1ZFUlJVTiA9IFwiQlVGRkVSX09WRVJSVU5cIixcblxuICAgIC8vIE51bWVyaWMgRmF1bHRcbiAgICAvLyAgIC0gb3BlcmF0aW9uOiB0aGUgb3BlcmF0aW9uIGJlaW5nIGV4ZWN1dGVkXG4gICAgLy8gICAtIGZhdWx0OiB0aGUgcmVhc29uIHRoaXMgZmF1bHRlZFxuICAgIE5VTUVSSUNfRkFVTFQgPSBcIk5VTUVSSUNfRkFVTFRcIixcblxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIEFyZ3VtZW50IEVycm9yc1xuXG4gICAgLy8gTWlzc2luZyBuZXcgb3BlcmF0b3IgdG8gYW4gb2JqZWN0XG4gICAgLy8gIC0gbmFtZTogVGhlIG5hbWUgb2YgdGhlIGNsYXNzXG4gICAgTUlTU0lOR19ORVcgPSBcIk1JU1NJTkdfTkVXXCIsXG5cbiAgICAvLyBJbnZhbGlkIGFyZ3VtZW50IChlLmcuIHZhbHVlIGlzIGluY29tcGF0aWJsZSB3aXRoIHR5cGUpIHRvIGEgZnVuY3Rpb246XG4gICAgLy8gICAtIGFyZ3VtZW50OiBUaGUgYXJndW1lbnQgbmFtZSB0aGF0IHdhcyBpbnZhbGlkXG4gICAgLy8gICAtIHZhbHVlOiBUaGUgdmFsdWUgb2YgdGhlIGFyZ3VtZW50XG4gICAgSU5WQUxJRF9BUkdVTUVOVCA9IFwiSU5WQUxJRF9BUkdVTUVOVFwiLFxuXG4gICAgLy8gTWlzc2luZyBhcmd1bWVudCB0byBhIGZ1bmN0aW9uOlxuICAgIC8vICAgLSBjb3VudDogVGhlIG51bWJlciBvZiBhcmd1bWVudHMgcmVjZWl2ZWRcbiAgICAvLyAgIC0gZXhwZWN0ZWRDb3VudDogVGhlIG51bWJlciBvZiBhcmd1bWVudHMgZXhwZWN0ZWRcbiAgICBNSVNTSU5HX0FSR1VNRU5UID0gXCJNSVNTSU5HX0FSR1VNRU5UXCIsXG5cbiAgICAvLyBUb28gbWFueSBhcmd1bWVudHNcbiAgICAvLyAgIC0gY291bnQ6IFRoZSBudW1iZXIgb2YgYXJndW1lbnRzIHJlY2VpdmVkXG4gICAgLy8gICAtIGV4cGVjdGVkQ291bnQ6IFRoZSBudW1iZXIgb2YgYXJndW1lbnRzIGV4cGVjdGVkXG4gICAgVU5FWFBFQ1RFRF9BUkdVTUVOVCA9IFwiVU5FWFBFQ1RFRF9BUkdVTUVOVFwiLFxuXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gQmxvY2tjaGFpbiBFcnJvcnNcblxuICAgIC8vIENhbGwgZXhjZXB0aW9uXG4gICAgLy8gIC0gdHJhbnNhY3Rpb246IHRoZSB0cmFuc2FjdGlvblxuICAgIC8vICAtIGFkZHJlc3M/OiB0aGUgY29udHJhY3QgYWRkcmVzc1xuICAgIC8vICAtIGFyZ3M/OiBUaGUgYXJndW1lbnRzIHBhc3NlZCBpbnRvIHRoZSBmdW5jdGlvblxuICAgIC8vICAtIG1ldGhvZD86IFRoZSBTb2xpZGl0eSBtZXRob2Qgc2lnbmF0dXJlXG4gICAgLy8gIC0gZXJyb3JTaWduYXR1cmU/OiBUaGUgRUlQODQ4IGVycm9yIHNpZ25hdHVyZVxuICAgIC8vICAtIGVycm9yQXJncz86IFRoZSBFSVA4NDggZXJyb3IgcGFyYW1ldGVyc1xuICAgIC8vICAtIHJlYXNvbjogVGhlIHJlYXNvbiAob25seSBmb3IgRUlQODQ4IFwiRXJyb3Ioc3RyaW5nKVwiKVxuICAgIENBTExfRVhDRVBUSU9OID0gXCJDQUxMX0VYQ0VQVElPTlwiLFxuXG4gICAgLy8gSW5zdWZmaWNpZW50IGZ1bmRzICg8IHZhbHVlICsgZ2FzTGltaXQgKiBnYXNQcmljZSlcbiAgICAvLyAgIC0gdHJhbnNhY3Rpb246IHRoZSB0cmFuc2FjdGlvbiBhdHRlbXB0ZWRcbiAgICBJTlNVRkZJQ0lFTlRfRlVORFMgPSBcIklOU1VGRklDSUVOVF9GVU5EU1wiLFxuXG4gICAgLy8gTm9uY2UgaGFzIGFscmVhZHkgYmVlbiB1c2VkXG4gICAgLy8gICAtIHRyYW5zYWN0aW9uOiB0aGUgdHJhbnNhY3Rpb24gYXR0ZW1wdGVkXG4gICAgTk9OQ0VfRVhQSVJFRCA9IFwiTk9OQ0VfRVhQSVJFRFwiLFxuXG4gICAgLy8gVGhlIHJlcGxhY2VtZW50IGZlZSBmb3IgdGhlIHRyYW5zYWN0aW9uIGlzIHRvbyBsb3dcbiAgICAvLyAgIC0gdHJhbnNhY3Rpb246IHRoZSB0cmFuc2FjdGlvbiBhdHRlbXB0ZWRcbiAgICBSRVBMQUNFTUVOVF9VTkRFUlBSSUNFRCA9IFwiUkVQTEFDRU1FTlRfVU5ERVJQUklDRURcIixcblxuICAgIC8vIFRoZSBnYXMgbGltaXQgY291bGQgbm90IGJlIGVzdGltYXRlZFxuICAgIC8vICAgLSB0cmFuc2FjdGlvbjogdGhlIHRyYW5zYWN0aW9uIHBhc3NlZCB0byBlc3RpbWF0ZUdhc1xuICAgIFVOUFJFRElDVEFCTEVfR0FTX0xJTUlUID0gXCJVTlBSRURJQ1RBQkxFX0dBU19MSU1JVFwiLFxuXG4gICAgLy8gVGhlIHRyYW5zYWN0aW9uIHdhcyByZXBsYWNlZCBieSBvbmUgd2l0aCBhIGhpZ2hlciBnYXMgcHJpY2VcbiAgICAvLyAgIC0gcmVhc29uOiBcImNhbmNlbGxlZFwiLCBcInJlcGxhY2VkXCIgb3IgXCJyZXByaWNlZFwiXG4gICAgLy8gICAtIGNhbmNlbGxlZDogdHJ1ZSBpZiByZWFzb24gPT0gXCJjYW5jZWxsZWRcIiBvciByZWFzb24gPT0gXCJyZXBsYWNlZFwiKVxuICAgIC8vICAgLSBoYXNoOiBvcmlnaW5hbCB0cmFuc2FjdGlvbiBoYXNoXG4gICAgLy8gICAtIHJlcGxhY2VtZW50OiB0aGUgZnVsbCBUcmFuc2FjdGlvbnNSZXNwb25zZSBmb3IgdGhlIHJlcGxhY2VtZW50XG4gICAgLy8gICAtIHJlY2VpcHQ6IHRoZSByZWNlaXB0IG9mIHRoZSByZXBsYWNlbWVudFxuICAgIFRSQU5TQUNUSU9OX1JFUExBQ0VEID0gXCJUUkFOU0FDVElPTl9SRVBMQUNFRFwiLFxuXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gSW50ZXJhY3Rpb24gRXJyb3JzXG5cbiAgICAvLyBUaGUgdXNlciByZWplY3RlZCB0aGUgYWN0aW9uLCBzdWNoIGFzIHNpZ25pbmcgYSBtZXNzYWdlIG9yIHNlbmRpbmdcbiAgICAvLyBhIHRyYW5zYWN0aW9uXG4gICAgQUNUSU9OX1JFSkVDVEVEID0gXCJBQ1RJT05fUkVKRUNURURcIixcbn07XG5cbmNvbnN0IEhFWCA9IFwiMDEyMzQ1Njc4OWFiY2RlZlwiO1xuXG5leHBvcnQgY2xhc3MgTG9nZ2VyIHtcbiAgICByZWFkb25seSB2ZXJzaW9uOiBzdHJpbmc7XG5cbiAgICBzdGF0aWMgZXJyb3JzID0gRXJyb3JDb2RlO1xuXG4gICAgc3RhdGljIGxldmVscyA9IExvZ0xldmVsO1xuXG4gICAgY29uc3RydWN0b3IodmVyc2lvbjogc3RyaW5nKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInZlcnNpb25cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2ZXJzaW9uLFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9sb2cobG9nTGV2ZWw6IExvZ0xldmVsLCBhcmdzOiBBcnJheTxhbnk+KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGxldmVsID0gbG9nTGV2ZWwudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKExvZ0xldmVsc1tsZXZlbF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGxvZyBsZXZlbCBuYW1lXCIsIFwibG9nTGV2ZWxcIiwgbG9nTGV2ZWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfbG9nTGV2ZWwgPiBMb2dMZXZlbHNbbGV2ZWxdKSB7IHJldHVybjsgfVxuICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgICB9XG5cbiAgICBkZWJ1ZyguLi5hcmdzOiBBcnJheTxhbnk+KTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2xvZyhMb2dnZXIubGV2ZWxzLkRFQlVHLCBhcmdzKTtcbiAgICB9XG5cbiAgICBpbmZvKC4uLmFyZ3M6IEFycmF5PGFueT4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fbG9nKExvZ2dlci5sZXZlbHMuSU5GTywgYXJncyk7XG4gICAgfVxuXG4gICAgd2FybiguLi5hcmdzOiBBcnJheTxhbnk+KTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2xvZyhMb2dnZXIubGV2ZWxzLldBUk5JTkcsIGFyZ3MpO1xuICAgIH1cblxuICAgIG1ha2VFcnJvcihtZXNzYWdlOiBzdHJpbmcsIGNvZGU/OiBFcnJvckNvZGUsIHBhcmFtcz86IGFueSk6IEVycm9yIHtcbiAgICAgICAgLy8gRXJyb3JzIGFyZSBiZWluZyBjZW5zb3JlZFxuICAgICAgICBpZiAoX2NlbnNvckVycm9ycykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFrZUVycm9yKFwiY2Vuc29yZWQgZXJyb3JcIiwgY29kZSwgeyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY29kZSkgeyBjb2RlID0gTG9nZ2VyLmVycm9ycy5VTktOT1dOX0VSUk9SOyB9XG4gICAgICAgIGlmICghcGFyYW1zKSB7IHBhcmFtcyA9IHt9OyB9XG5cbiAgICAgICAgY29uc3QgbWVzc2FnZURldGFpbHM6IEFycmF5PHN0cmluZz4gPSBbXTtcbiAgICAgICAgT2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGhleCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICBoZXggKz0gSEVYW3ZhbHVlW2ldID4+IDRdO1xuICAgICAgICAgICAgICAgICAgICAgIGhleCArPSBIRVhbdmFsdWVbaV0gJiAweDBmXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlRGV0YWlscy5wdXNoKGtleSArIFwiPVVpbnQ4QXJyYXkoMHhcIiArIGhleCArIFwiKVwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlRGV0YWlscy5wdXNoKGtleSArIFwiPVwiICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VEZXRhaWxzLnB1c2goa2V5ICsgXCI9XCIgKyBKU09OLnN0cmluZ2lmeShwYXJhbXNba2V5XS50b1N0cmluZygpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBtZXNzYWdlRGV0YWlscy5wdXNoKGBjb2RlPSR7IGNvZGUgfWApO1xuICAgICAgICBtZXNzYWdlRGV0YWlscy5wdXNoKGB2ZXJzaW9uPSR7IHRoaXMudmVyc2lvbiB9YCk7XG5cbiAgICAgICAgY29uc3QgcmVhc29uID0gbWVzc2FnZTtcblxuICAgICAgICBsZXQgdXJsID0gXCJcIjtcblxuICAgICAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgICAgICAgIGNhc2UgRXJyb3JDb2RlLk5VTUVSSUNfRkFVTFQ6IHtcbiAgICAgICAgICAgICAgICB1cmwgPSBcIk5VTUVSSUNfRkFVTFRcIjtcbiAgICAgICAgICAgICAgICBjb25zdCBmYXVsdCA9IG1lc3NhZ2U7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJvdmVyZmxvd1wiOiBjYXNlIFwidW5kZXJmbG93XCI6IGNhc2UgXCJkaXZpc2lvbi1ieS16ZXJvXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgKz0gXCItXCIgKyBmYXVsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibmVnYXRpdmUtcG93ZXJcIjogY2FzZSBcIm5lZ2F0aXZlLXdpZHRoXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgKz0gXCItdW5zdXBwb3J0ZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidW5ib3VuZC1iaXR3aXNlLXJlc3VsdFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsICs9IFwiLXVuYm91bmQtcmVzdWx0XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEVycm9yQ29kZS5DQUxMX0VYQ0VQVElPTjpcbiAgICAgICAgICAgIGNhc2UgRXJyb3JDb2RlLklOU1VGRklDSUVOVF9GVU5EUzpcbiAgICAgICAgICAgIGNhc2UgRXJyb3JDb2RlLk1JU1NJTkdfTkVXOlxuICAgICAgICAgICAgY2FzZSBFcnJvckNvZGUuTk9OQ0VfRVhQSVJFRDpcbiAgICAgICAgICAgIGNhc2UgRXJyb3JDb2RlLlJFUExBQ0VNRU5UX1VOREVSUFJJQ0VEOlxuICAgICAgICAgICAgY2FzZSBFcnJvckNvZGUuVFJBTlNBQ1RJT05fUkVQTEFDRUQ6XG4gICAgICAgICAgICBjYXNlIEVycm9yQ29kZS5VTlBSRURJQ1RBQkxFX0dBU19MSU1JVDpcbiAgICAgICAgICAgICAgICB1cmwgPSBjb2RlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVybCkge1xuICAgICAgICAgICAgbWVzc2FnZSArPSBcIiBbIFNlZTogaHR0cHM6L1xcL2xpbmtzLmV0aGVycy5vcmcvdjUtZXJyb3JzLVwiICsgdXJsICsgXCIgXVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1lc3NhZ2VEZXRhaWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgbWVzc2FnZSArPSBcIiAoXCIgKyBtZXNzYWdlRGV0YWlscy5qb2luKFwiLCBcIikgKyBcIilcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEBUT0RPOiBBbnk/P1xuICAgICAgICBjb25zdCBlcnJvcjogYW55ID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgICBlcnJvci5yZWFzb24gPSByZWFzb247XG4gICAgICAgIGVycm9yLmNvZGUgPSBjb2RlXG5cbiAgICAgICAgT2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgZXJyb3Jba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgfVxuXG4gICAgdGhyb3dFcnJvcihtZXNzYWdlOiBzdHJpbmcsIGNvZGU/OiBFcnJvckNvZGUsIHBhcmFtcz86IGFueSk6IG5ldmVyIHtcbiAgICAgICAgdGhyb3cgdGhpcy5tYWtlRXJyb3IobWVzc2FnZSwgY29kZSwgcGFyYW1zKTtcbiAgICB9XG5cbiAgICB0aHJvd0FyZ3VtZW50RXJyb3IobWVzc2FnZTogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBuZXZlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnRocm93RXJyb3IobWVzc2FnZSwgTG9nZ2VyLmVycm9ycy5JTlZBTElEX0FSR1VNRU5ULCB7XG4gICAgICAgICAgICBhcmd1bWVudDogbmFtZSxcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3NlcnQoY29uZGl0aW9uOiBhbnksIG1lc3NhZ2U6IHN0cmluZywgY29kZT86IEVycm9yQ29kZSwgcGFyYW1zPzogYW55KTogdm9pZCB7XG4gICAgICAgIGlmICghIWNvbmRpdGlvbikgeyByZXR1cm47IH1cbiAgICAgICAgdGhpcy50aHJvd0Vycm9yKG1lc3NhZ2UsIGNvZGUsIHBhcmFtcyk7XG4gICAgfVxuXG4gICAgYXNzZXJ0QXJndW1lbnQoY29uZGl0aW9uOiBhbnksIG1lc3NhZ2U6IHN0cmluZywgbmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgICAgIGlmICghIWNvbmRpdGlvbikgeyByZXR1cm47IH1cbiAgICAgICAgdGhpcy50aHJvd0FyZ3VtZW50RXJyb3IobWVzc2FnZSwgbmFtZSwgdmFsdWUpO1xuICAgIH1cblxuICAgIGNoZWNrTm9ybWFsaXplKG1lc3NhZ2U/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UgPT0gbnVsbCkgeyBtZXNzYWdlID0gXCJwbGF0Zm9ybSBtaXNzaW5nIFN0cmluZy5wcm90b3R5cGUubm9ybWFsaXplXCI7IH1cbiAgICAgICAgaWYgKF9ub3JtYWxpemVFcnJvcikge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKFwicGxhdGZvcm0gbWlzc2luZyBTdHJpbmcucHJvdG90eXBlLm5vcm1hbGl6ZVwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJTdHJpbmcucHJvdG90eXBlLm5vcm1hbGl6ZVwiLCBmb3JtOiBfbm9ybWFsaXplRXJyb3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2hlY2tTYWZlVWludDUzKHZhbHVlOiBudW1iZXIsIG1lc3NhZ2U/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHR5cGVvZih2YWx1ZSkgIT09IFwibnVtYmVyXCIpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgaWYgKG1lc3NhZ2UgPT0gbnVsbCkgeyBtZXNzYWdlID0gXCJ2YWx1ZSBub3Qgc2FmZVwiOyB9XG5cbiAgICAgICAgaWYgKHZhbHVlIDwgMCB8fCB2YWx1ZSA+PSAweDFmZmZmZmZmZmZmZmZmKSB7XG4gICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZSwgTG9nZ2VyLmVycm9ycy5OVU1FUklDX0ZBVUxULCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcImNoZWNrU2FmZUludGVnZXJcIixcbiAgICAgICAgICAgICAgICBmYXVsdDogXCJvdXQtb2Ytc2FmZS1yYW5nZVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUgJSAxKSB7XG4gICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZSwgTG9nZ2VyLmVycm9ycy5OVU1FUklDX0ZBVUxULCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcImNoZWNrU2FmZUludGVnZXJcIixcbiAgICAgICAgICAgICAgICBmYXVsdDogXCJub24taW50ZWdlclwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVja0FyZ3VtZW50Q291bnQoY291bnQ6IG51bWJlciwgZXhwZWN0ZWRDb3VudDogbnVtYmVyLCBtZXNzYWdlPzogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmIChtZXNzYWdlKSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gXCI6IFwiICsgbWVzc2FnZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBcIlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvdW50IDwgZXhwZWN0ZWRDb3VudCkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKFwibWlzc2luZyBhcmd1bWVudFwiICsgbWVzc2FnZSwgTG9nZ2VyLmVycm9ycy5NSVNTSU5HX0FSR1VNRU5ULCB7XG4gICAgICAgICAgICAgICAgY291bnQ6IGNvdW50LFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkQ291bnQ6IGV4cGVjdGVkQ291bnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvdW50ID4gZXhwZWN0ZWRDb3VudCkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKFwidG9vIG1hbnkgYXJndW1lbnRzXCIgKyBtZXNzYWdlLCBMb2dnZXIuZXJyb3JzLlVORVhQRUNURURfQVJHVU1FTlQsIHtcbiAgICAgICAgICAgICAgICBjb3VudDogY291bnQsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWRDb3VudDogZXhwZWN0ZWRDb3VudFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVja05ldyh0YXJnZXQ6IGFueSwga2luZDogYW55KTogdm9pZCB7XG4gICAgICAgIGlmICh0YXJnZXQgPT09IE9iamVjdCB8fCB0YXJnZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKFwibWlzc2luZyBuZXdcIiwgTG9nZ2VyLmVycm9ycy5NSVNTSU5HX05FVywgeyBuYW1lOiBraW5kLm5hbWUgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVja0Fic3RyYWN0KHRhcmdldDogYW55LCBraW5kOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRhcmdldCA9PT0ga2luZCkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKFxuICAgICAgICAgICAgICAgIFwiY2Fubm90IGluc3RhbnRpYXRlIGFic3RyYWN0IGNsYXNzIFwiICsgSlNPTi5zdHJpbmdpZnkoa2luZC5uYW1lKSArIFwiIGRpcmVjdGx5OyB1c2UgYSBzdWItY2xhc3NcIixcbiAgICAgICAgICAgICAgICBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTixcbiAgICAgICAgICAgICAgICB7IG5hbWU6IHRhcmdldC5uYW1lLCBvcGVyYXRpb246IFwibmV3XCIgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgPT09IE9iamVjdCB8fCB0YXJnZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKFwibWlzc2luZyBuZXdcIiwgTG9nZ2VyLmVycm9ycy5NSVNTSU5HX05FVywgeyBuYW1lOiBraW5kLm5hbWUgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2xvYmFsTG9nZ2VyKCk6IExvZ2dlciB7XG4gICAgICAgIGlmICghX2dsb2JhbExvZ2dlcikgeyBfZ2xvYmFsTG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTsgfVxuICAgICAgICByZXR1cm4gX2dsb2JhbExvZ2dlcjtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0Q2Vuc29yc2hpcChjZW5zb3JzaGlwOiBib29sZWFuLCBwZXJtYW5lbnQ/OiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmICghY2Vuc29yc2hpcCAmJiBwZXJtYW5lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsTG9nZ2VyKCkudGhyb3dFcnJvcihcImNhbm5vdCBwZXJtYW5lbnRseSBkaXNhYmxlIGNlbnNvcnNoaXBcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwic2V0Q2Vuc29yc2hpcFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfcGVybWFuZW50Q2Vuc29yRXJyb3JzKSB7XG4gICAgICAgICAgICBpZiAoIWNlbnNvcnNoaXApIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICB0aGlzLmdsb2JhbExvZ2dlcigpLnRocm93RXJyb3IoXCJlcnJvciBjZW5zb3JzaGlwIHBlcm1hbmVudFwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJzZXRDZW5zb3JzaGlwXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgX2NlbnNvckVycm9ycyA9ICEhY2Vuc29yc2hpcDtcbiAgICAgICAgX3Blcm1hbmVudENlbnNvckVycm9ycyA9ICEhcGVybWFuZW50O1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXRMb2dMZXZlbChsb2dMZXZlbDogTG9nTGV2ZWwpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbGV2ZWwgPSBMb2dMZXZlbHNbbG9nTGV2ZWwudG9Mb3dlckNhc2UoKV07XG4gICAgICAgIGlmIChsZXZlbCA9PSBudWxsKSB7XG4gICAgICAgICAgICBMb2dnZXIuZ2xvYmFsTG9nZ2VyKCkud2FybihcImludmFsaWQgbG9nIGxldmVsIC0gXCIgKyBsb2dMZXZlbCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgX2xvZ0xldmVsID0gbGV2ZWw7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb20odmVyc2lvbjogc3RyaW5nKTogTG9nZ2VyIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMb2dnZXIodmVyc2lvbik7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcImxvZ2dlci81LjcuMFwiO1xuIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcImJ5dGVzLzUuNy4wXCI7XG4iLCJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwicmxwLzUuNy4wXCI7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IHsgZGVjb2RlLCBlbmNvZGUgfSBmcm9tIFwiLi9iYXNlNjRcIjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheWlmeSwgQnl0ZXNMaWtlIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUodGV4dERhdGE6IHN0cmluZyk6IFVpbnQ4QXJyYXkge1xuICAgIHRleHREYXRhID0gYXRvYih0ZXh0RGF0YSk7XG4gICAgY29uc3QgZGF0YSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZGF0YS5wdXNoKHRleHREYXRhLmNoYXJDb2RlQXQoaSkpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXlpZnkoZGF0YSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUoZGF0YTogQnl0ZXNMaWtlKTogc3RyaW5nIHtcbiAgICBkYXRhID0gYXJyYXlpZnkoZGF0YSk7XG4gICAgbGV0IHRleHREYXRhID0gXCJcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGV4dERhdGEgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShkYXRhW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ0b2EodGV4dERhdGEpO1xufVxuXG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuaW5oZXJpdHMgPSBpbmhlcml0cztcblxuZnVuY3Rpb24gaXNTdXJyb2dhdGVQYWlyKG1zZywgaSkge1xuICBpZiAoKG1zZy5jaGFyQ29kZUF0KGkpICYgMHhGQzAwKSAhPT0gMHhEODAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChpIDwgMCB8fCBpICsgMSA+PSBtc2cubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAobXNnLmNoYXJDb2RlQXQoaSArIDEpICYgMHhGQzAwKSA9PT0gMHhEQzAwO1xufVxuXG5mdW5jdGlvbiB0b0FycmF5KG1zZywgZW5jKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG1zZykpXG4gICAgcmV0dXJuIG1zZy5zbGljZSgpO1xuICBpZiAoIW1zZylcbiAgICByZXR1cm4gW107XG4gIHZhciByZXMgPSBbXTtcbiAgaWYgKHR5cGVvZiBtc2cgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCFlbmMpIHtcbiAgICAgIC8vIEluc3BpcmVkIGJ5IHN0cmluZ1RvVXRmOEJ5dGVBcnJheSgpIGluIGNsb3N1cmUtbGlicmFyeSBieSBHb29nbGVcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1saWJyYXJ5L2Jsb2IvODU5OGQ4NzI0MmFmNTlhYWMyMzMyNzA3NDJjODk4NGUyYjJiZGJlMC9jbG9zdXJlL2dvb2cvY3J5cHQvY3J5cHQuanMjTDExNy1MMTQzXG4gICAgICAvLyBBcGFjaGUgTGljZW5zZSAyLjBcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1saWJyYXJ5L2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjID0gbXNnLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjIDwgMTI4KSB7XG4gICAgICAgICAgcmVzW3ArK10gPSBjO1xuICAgICAgICB9IGVsc2UgaWYgKGMgPCAyMDQ4KSB7XG4gICAgICAgICAgcmVzW3ArK10gPSAoYyA+PiA2KSB8IDE5MjtcbiAgICAgICAgICByZXNbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgICAgICB9IGVsc2UgaWYgKGlzU3Vycm9nYXRlUGFpcihtc2csIGkpKSB7XG4gICAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgJiAweDAzRkYpIDw8IDEwKSArIChtc2cuY2hhckNvZGVBdCgrK2kpICYgMHgwM0ZGKTtcbiAgICAgICAgICByZXNbcCsrXSA9IChjID4+IDE4KSB8IDI0MDtcbiAgICAgICAgICByZXNbcCsrXSA9ICgoYyA+PiAxMikgJiA2MykgfCAxMjg7XG4gICAgICAgICAgcmVzW3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XG4gICAgICAgICAgcmVzW3ArK10gPSAoYyAmIDYzKSB8IDEyODtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcbiAgICAgICAgICByZXNbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcbiAgICAgICAgICByZXNbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbmMgPT09ICdoZXgnKSB7XG4gICAgICBtc2cgPSBtc2cucmVwbGFjZSgvW15hLXowLTldKy9pZywgJycpO1xuICAgICAgaWYgKG1zZy5sZW5ndGggJSAyICE9PSAwKVxuICAgICAgICBtc2cgPSAnMCcgKyBtc2c7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSAyKVxuICAgICAgICByZXMucHVzaChwYXJzZUludChtc2dbaV0gKyBtc2dbaSArIDFdLCAxNikpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKVxuICAgICAgcmVzW2ldID0gbXNnW2ldIHwgMDtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy50b0FycmF5ID0gdG9BcnJheTtcblxuZnVuY3Rpb24gdG9IZXgobXNnKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgcmVzICs9IHplcm8yKG1zZ1tpXS50b1N0cmluZygxNikpO1xuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy50b0hleCA9IHRvSGV4O1xuXG5mdW5jdGlvbiBodG9ubCh3KSB7XG4gIHZhciByZXMgPSAodyA+Pj4gMjQpIHxcbiAgICAgICAgICAgICgodyA+Pj4gOCkgJiAweGZmMDApIHxcbiAgICAgICAgICAgICgodyA8PCA4KSAmIDB4ZmYwMDAwKSB8XG4gICAgICAgICAgICAoKHcgJiAweGZmKSA8PCAyNCk7XG4gIHJldHVybiByZXMgPj4+IDA7XG59XG5leHBvcnRzLmh0b25sID0gaHRvbmw7XG5cbmZ1bmN0aW9uIHRvSGV4MzIobXNnLCBlbmRpYW4pIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB3ID0gbXNnW2ldO1xuICAgIGlmIChlbmRpYW4gPT09ICdsaXR0bGUnKVxuICAgICAgdyA9IGh0b25sKHcpO1xuICAgIHJlcyArPSB6ZXJvOCh3LnRvU3RyaW5nKDE2KSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMudG9IZXgzMiA9IHRvSGV4MzI7XG5cbmZ1bmN0aW9uIHplcm8yKHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG5leHBvcnRzLnplcm8yID0gemVybzI7XG5cbmZ1bmN0aW9uIHplcm84KHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSA3KVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNilcbiAgICByZXR1cm4gJzAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA1KVxuICAgIHJldHVybiAnMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA0KVxuICAgIHJldHVybiAnMDAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMylcbiAgICByZXR1cm4gJzAwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAyKVxuICAgIHJldHVybiAnMDAwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMDAwMDAwMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG5leHBvcnRzLnplcm84ID0gemVybzg7XG5cbmZ1bmN0aW9uIGpvaW4zMihtc2csIHN0YXJ0LCBlbmQsIGVuZGlhbikge1xuICB2YXIgbGVuID0gZW5kIC0gc3RhcnQ7XG4gIGFzc2VydChsZW4gJSA0ID09PSAwKTtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShsZW4gLyA0KTtcbiAgZm9yICh2YXIgaSA9IDAsIGsgPSBzdGFydDsgaSA8IHJlcy5sZW5ndGg7IGkrKywgayArPSA0KSB7XG4gICAgdmFyIHc7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JpZycpXG4gICAgICB3ID0gKG1zZ1trXSA8PCAyNCkgfCAobXNnW2sgKyAxXSA8PCAxNikgfCAobXNnW2sgKyAyXSA8PCA4KSB8IG1zZ1trICsgM107XG4gICAgZWxzZVxuICAgICAgdyA9IChtc2dbayArIDNdIDw8IDI0KSB8IChtc2dbayArIDJdIDw8IDE2KSB8IChtc2dbayArIDFdIDw8IDgpIHwgbXNnW2tdO1xuICAgIHJlc1tpXSA9IHcgPj4+IDA7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuam9pbjMyID0gam9pbjMyO1xuXG5mdW5jdGlvbiBzcGxpdDMyKG1zZywgZW5kaWFuKSB7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkobXNnLmxlbmd0aCAqIDQpO1xuICBmb3IgKHZhciBpID0gMCwgayA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyssIGsgKz0gNCkge1xuICAgIHZhciBtID0gbXNnW2ldO1xuICAgIGlmIChlbmRpYW4gPT09ICdiaWcnKSB7XG4gICAgICByZXNba10gPSBtID4+PiAyNDtcbiAgICAgIHJlc1trICsgMV0gPSAobSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgIHJlc1trICsgMl0gPSAobSA+Pj4gOCkgJiAweGZmO1xuICAgICAgcmVzW2sgKyAzXSA9IG0gJiAweGZmO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNbayArIDNdID0gbSA+Pj4gMjQ7XG4gICAgICByZXNbayArIDJdID0gKG0gPj4+IDE2KSAmIDB4ZmY7XG4gICAgICByZXNbayArIDFdID0gKG0gPj4+IDgpICYgMHhmZjtcbiAgICAgIHJlc1trXSA9IG0gJiAweGZmO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5zcGxpdDMyID0gc3BsaXQzMjtcblxuZnVuY3Rpb24gcm90cjMyKHcsIGIpIHtcbiAgcmV0dXJuICh3ID4+PiBiKSB8ICh3IDw8ICgzMiAtIGIpKTtcbn1cbmV4cG9ydHMucm90cjMyID0gcm90cjMyO1xuXG5mdW5jdGlvbiByb3RsMzIodywgYikge1xuICByZXR1cm4gKHcgPDwgYikgfCAodyA+Pj4gKDMyIC0gYikpO1xufVxuZXhwb3J0cy5yb3RsMzIgPSByb3RsMzI7XG5cbmZ1bmN0aW9uIHN1bTMyKGEsIGIpIHtcbiAgcmV0dXJuIChhICsgYikgPj4+IDA7XG59XG5leHBvcnRzLnN1bTMyID0gc3VtMzI7XG5cbmZ1bmN0aW9uIHN1bTMyXzMoYSwgYiwgYykge1xuICByZXR1cm4gKGEgKyBiICsgYykgPj4+IDA7XG59XG5leHBvcnRzLnN1bTMyXzMgPSBzdW0zMl8zO1xuXG5mdW5jdGlvbiBzdW0zMl80KGEsIGIsIGMsIGQpIHtcbiAgcmV0dXJuIChhICsgYiArIGMgKyBkKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzJfNCA9IHN1bTMyXzQ7XG5cbmZ1bmN0aW9uIHN1bTMyXzUoYSwgYiwgYywgZCwgZSkge1xuICByZXR1cm4gKGEgKyBiICsgYyArIGQgKyBlKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzJfNSA9IHN1bTMyXzU7XG5cbmZ1bmN0aW9uIHN1bTY0KGJ1ZiwgcG9zLCBhaCwgYWwpIHtcbiAgdmFyIGJoID0gYnVmW3Bvc107XG4gIHZhciBibCA9IGJ1Zltwb3MgKyAxXTtcblxuICB2YXIgbG8gPSAoYWwgKyBibCkgPj4+IDA7XG4gIHZhciBoaSA9IChsbyA8IGFsID8gMSA6IDApICsgYWggKyBiaDtcbiAgYnVmW3Bvc10gPSBoaSA+Pj4gMDtcbiAgYnVmW3BvcyArIDFdID0gbG87XG59XG5leHBvcnRzLnN1bTY0ID0gc3VtNjQ7XG5cbmZ1bmN0aW9uIHN1bTY0X2hpKGFoLCBhbCwgYmgsIGJsKSB7XG4gIHZhciBsbyA9IChhbCArIGJsKSA+Pj4gMDtcbiAgdmFyIGhpID0gKGxvIDwgYWwgPyAxIDogMCkgKyBhaCArIGJoO1xuICByZXR1cm4gaGkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0X2hpID0gc3VtNjRfaGk7XG5cbmZ1bmN0aW9uIHN1bTY0X2xvKGFoLCBhbCwgYmgsIGJsKSB7XG4gIHZhciBsbyA9IGFsICsgYmw7XG4gIHJldHVybiBsbyA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfbG8gPSBzdW02NF9sbztcblxuZnVuY3Rpb24gc3VtNjRfNF9oaShhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwpIHtcbiAgdmFyIGNhcnJ5ID0gMDtcbiAgdmFyIGxvID0gYWw7XG4gIGxvID0gKGxvICsgYmwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGFsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgY2wpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGNsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZGwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGRsID8gMSA6IDA7XG5cbiAgdmFyIGhpID0gYWggKyBiaCArIGNoICsgZGggKyBjYXJyeTtcbiAgcmV0dXJuIGhpID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF80X2hpID0gc3VtNjRfNF9oaTtcblxuZnVuY3Rpb24gc3VtNjRfNF9sbyhhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwpIHtcbiAgdmFyIGxvID0gYWwgKyBibCArIGNsICsgZGw7XG4gIHJldHVybiBsbyA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfNF9sbyA9IHN1bTY0XzRfbG87XG5cbmZ1bmN0aW9uIHN1bTY0XzVfaGkoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsLCBlaCwgZWwpIHtcbiAgdmFyIGNhcnJ5ID0gMDtcbiAgdmFyIGxvID0gYWw7XG4gIGxvID0gKGxvICsgYmwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGFsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgY2wpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGNsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZGwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGRsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZWwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGVsID8gMSA6IDA7XG5cbiAgdmFyIGhpID0gYWggKyBiaCArIGNoICsgZGggKyBlaCArIGNhcnJ5O1xuICByZXR1cm4gaGkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0XzVfaGkgPSBzdW02NF81X2hpO1xuXG5mdW5jdGlvbiBzdW02NF81X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCwgZWgsIGVsKSB7XG4gIHZhciBsbyA9IGFsICsgYmwgKyBjbCArIGRsICsgZWw7XG5cbiAgcmV0dXJuIGxvID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF81X2xvID0gc3VtNjRfNV9sbztcblxuZnVuY3Rpb24gcm90cjY0X2hpKGFoLCBhbCwgbnVtKSB7XG4gIHZhciByID0gKGFsIDw8ICgzMiAtIG51bSkpIHwgKGFoID4+PiBudW0pO1xuICByZXR1cm4gciA+Pj4gMDtcbn1cbmV4cG9ydHMucm90cjY0X2hpID0gcm90cjY0X2hpO1xuXG5mdW5jdGlvbiByb3RyNjRfbG8oYWgsIGFsLCBudW0pIHtcbiAgdmFyIHIgPSAoYWggPDwgKDMyIC0gbnVtKSkgfCAoYWwgPj4+IG51bSk7XG4gIHJldHVybiByID4+PiAwO1xufVxuZXhwb3J0cy5yb3RyNjRfbG8gPSByb3RyNjRfbG87XG5cbmZ1bmN0aW9uIHNocjY0X2hpKGFoLCBhbCwgbnVtKSB7XG4gIHJldHVybiBhaCA+Pj4gbnVtO1xufVxuZXhwb3J0cy5zaHI2NF9oaSA9IHNocjY0X2hpO1xuXG5mdW5jdGlvbiBzaHI2NF9sbyhhaCwgYWwsIG51bSkge1xuICB2YXIgciA9IChhaCA8PCAoMzIgLSBudW0pKSB8IChhbCA+Pj4gbnVtKTtcbiAgcmV0dXJuIHIgPj4+IDA7XG59XG5leHBvcnRzLnNocjY0X2xvID0gc2hyNjRfbG87XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGFzc2VydDtcblxuZnVuY3Rpb24gYXNzZXJ0KHZhbCwgbXNnKSB7XG4gIGlmICghdmFsKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbn1cblxuYXNzZXJ0LmVxdWFsID0gZnVuY3Rpb24gYXNzZXJ0RXF1YWwobCwgciwgbXNnKSB7XG4gIGlmIChsICE9IHIpXG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAoJ0Fzc2VydGlvbiBmYWlsZWQ6ICcgKyBsICsgJyAhPSAnICsgcikpO1xufTtcbiIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gQmxvY2tIYXNoKCkge1xuICB0aGlzLnBlbmRpbmcgPSBudWxsO1xuICB0aGlzLnBlbmRpbmdUb3RhbCA9IDA7XG4gIHRoaXMuYmxvY2tTaXplID0gdGhpcy5jb25zdHJ1Y3Rvci5ibG9ja1NpemU7XG4gIHRoaXMub3V0U2l6ZSA9IHRoaXMuY29uc3RydWN0b3Iub3V0U2l6ZTtcbiAgdGhpcy5obWFjU3RyZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLmhtYWNTdHJlbmd0aDtcbiAgdGhpcy5wYWRMZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLnBhZExlbmd0aCAvIDg7XG4gIHRoaXMuZW5kaWFuID0gJ2JpZyc7XG5cbiAgdGhpcy5fZGVsdGE4ID0gdGhpcy5ibG9ja1NpemUgLyA4O1xuICB0aGlzLl9kZWx0YTMyID0gdGhpcy5ibG9ja1NpemUgLyAzMjtcbn1cbmV4cG9ydHMuQmxvY2tIYXNoID0gQmxvY2tIYXNoO1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShtc2csIGVuYykge1xuICAvLyBDb252ZXJ0IG1lc3NhZ2UgdG8gYXJyYXksIHBhZCBpdCwgYW5kIGpvaW4gaW50byAzMmJpdCBibG9ja3NcbiAgbXNnID0gdXRpbHMudG9BcnJheShtc2csIGVuYyk7XG4gIGlmICghdGhpcy5wZW5kaW5nKVxuICAgIHRoaXMucGVuZGluZyA9IG1zZztcbiAgZWxzZVxuICAgIHRoaXMucGVuZGluZyA9IHRoaXMucGVuZGluZy5jb25jYXQobXNnKTtcbiAgdGhpcy5wZW5kaW5nVG90YWwgKz0gbXNnLmxlbmd0aDtcblxuICAvLyBFbm91Z2ggZGF0YSwgdHJ5IHVwZGF0aW5nXG4gIGlmICh0aGlzLnBlbmRpbmcubGVuZ3RoID49IHRoaXMuX2RlbHRhOCkge1xuICAgIG1zZyA9IHRoaXMucGVuZGluZztcblxuICAgIC8vIFByb2Nlc3MgcGVuZGluZyBkYXRhIGluIGJsb2Nrc1xuICAgIHZhciByID0gbXNnLmxlbmd0aCAlIHRoaXMuX2RlbHRhODtcbiAgICB0aGlzLnBlbmRpbmcgPSBtc2cuc2xpY2UobXNnLmxlbmd0aCAtIHIsIG1zZy5sZW5ndGgpO1xuICAgIGlmICh0aGlzLnBlbmRpbmcubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5wZW5kaW5nID0gbnVsbDtcblxuICAgIG1zZyA9IHV0aWxzLmpvaW4zMihtc2csIDAsIG1zZy5sZW5ndGggLSByLCB0aGlzLmVuZGlhbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IHRoaXMuX2RlbHRhMzIpXG4gICAgICB0aGlzLl91cGRhdGUobXNnLCBpLCBpICsgdGhpcy5fZGVsdGEzMik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkJsb2NrSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICB0aGlzLnVwZGF0ZSh0aGlzLl9wYWQoKSk7XG4gIGFzc2VydCh0aGlzLnBlbmRpbmcgPT09IG51bGwpO1xuXG4gIHJldHVybiB0aGlzLl9kaWdlc3QoZW5jKTtcbn07XG5cbkJsb2NrSGFzaC5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIHBhZCgpIHtcbiAgdmFyIGxlbiA9IHRoaXMucGVuZGluZ1RvdGFsO1xuICB2YXIgYnl0ZXMgPSB0aGlzLl9kZWx0YTg7XG4gIHZhciBrID0gYnl0ZXMgLSAoKGxlbiArIHRoaXMucGFkTGVuZ3RoKSAlIGJ5dGVzKTtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShrICsgdGhpcy5wYWRMZW5ndGgpO1xuICByZXNbMF0gPSAweDgwO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGs7IGkrKylcbiAgICByZXNbaV0gPSAwO1xuXG4gIC8vIEFwcGVuZCBsZW5ndGhcbiAgbGVuIDw8PSAzO1xuICBpZiAodGhpcy5lbmRpYW4gPT09ICdiaWcnKSB7XG4gICAgZm9yICh2YXIgdCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKVxuICAgICAgcmVzW2krK10gPSAwO1xuXG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMjQpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDE2KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiA4KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSBsZW4gJiAweGZmO1xuICB9IGVsc2Uge1xuICAgIHJlc1tpKytdID0gbGVuICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDgpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDE2KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAyNCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcblxuICAgIGZvciAodCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKVxuICAgICAgcmVzW2krK10gPSAwO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuc2hhMSA9IHJlcXVpcmUoJy4vc2hhLzEnKTtcbmV4cG9ydHMuc2hhMjI0ID0gcmVxdWlyZSgnLi9zaGEvMjI0Jyk7XG5leHBvcnRzLnNoYTI1NiA9IHJlcXVpcmUoJy4vc2hhLzI1NicpO1xuZXhwb3J0cy5zaGEzODQgPSByZXF1aXJlKCcuL3NoYS8zODQnKTtcbmV4cG9ydHMuc2hhNTEyID0gcmVxdWlyZSgnLi9zaGEvNTEyJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG52YXIgc2hhQ29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcblxudmFyIHJvdGwzMiA9IHV0aWxzLnJvdGwzMjtcbnZhciBzdW0zMiA9IHV0aWxzLnN1bTMyO1xudmFyIHN1bTMyXzUgPSB1dGlscy5zdW0zMl81O1xudmFyIGZ0XzEgPSBzaGFDb21tb24uZnRfMTtcbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG52YXIgc2hhMV9LID0gW1xuICAweDVBODI3OTk5LCAweDZFRDlFQkExLFxuICAweDhGMUJCQ0RDLCAweENBNjJDMUQ2XG5dO1xuXG5mdW5jdGlvbiBTSEExKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMSkpXG4gICAgcmV0dXJuIG5ldyBTSEExKCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweDY3NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLFxuICAgIDB4MTAzMjU0NzYsIDB4YzNkMmUxZjAgXTtcbiAgdGhpcy5XID0gbmV3IEFycmF5KDgwKTtcbn1cblxudXRpbHMuaW5oZXJpdHMoU0hBMSwgQmxvY2tIYXNoKTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMTtcblxuU0hBMS5ibG9ja1NpemUgPSA1MTI7XG5TSEExLm91dFNpemUgPSAxNjA7XG5TSEExLmhtYWNTdHJlbmd0aCA9IDgwO1xuU0hBMS5wYWRMZW5ndGggPSA2NDtcblxuU0hBMS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUobXNnLCBzdGFydCkge1xuICB2YXIgVyA9IHRoaXMuVztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspXG4gICAgV1tpXSA9IG1zZ1tzdGFydCArIGldO1xuXG4gIGZvcig7IGkgPCBXLmxlbmd0aDsgaSsrKVxuICAgIFdbaV0gPSByb3RsMzIoV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XSwgMSk7XG5cbiAgdmFyIGEgPSB0aGlzLmhbMF07XG4gIHZhciBiID0gdGhpcy5oWzFdO1xuICB2YXIgYyA9IHRoaXMuaFsyXTtcbiAgdmFyIGQgPSB0aGlzLmhbM107XG4gIHZhciBlID0gdGhpcy5oWzRdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBXLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHMgPSB+fihpIC8gMjApO1xuICAgIHZhciB0ID0gc3VtMzJfNShyb3RsMzIoYSwgNSksIGZ0XzEocywgYiwgYywgZCksIGUsIFdbaV0sIHNoYTFfS1tzXSk7XG4gICAgZSA9IGQ7XG4gICAgZCA9IGM7XG4gICAgYyA9IHJvdGwzMihiLCAzMCk7XG4gICAgYiA9IGE7XG4gICAgYSA9IHQ7XG4gIH1cblxuICB0aGlzLmhbMF0gPSBzdW0zMih0aGlzLmhbMF0sIGEpO1xuICB0aGlzLmhbMV0gPSBzdW0zMih0aGlzLmhbMV0sIGIpO1xuICB0aGlzLmhbMl0gPSBzdW0zMih0aGlzLmhbMl0sIGMpO1xuICB0aGlzLmhbM10gPSBzdW0zMih0aGlzLmhbM10sIGQpO1xuICB0aGlzLmhbNF0gPSBzdW0zMih0aGlzLmhbNF0sIGUpO1xufTtcblxuU0hBMS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdiaWcnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgcm90cjMyID0gdXRpbHMucm90cjMyO1xuXG5mdW5jdGlvbiBmdF8xKHMsIHgsIHksIHopIHtcbiAgaWYgKHMgPT09IDApXG4gICAgcmV0dXJuIGNoMzIoeCwgeSwgeik7XG4gIGlmIChzID09PSAxIHx8IHMgPT09IDMpXG4gICAgcmV0dXJuIHAzMih4LCB5LCB6KTtcbiAgaWYgKHMgPT09IDIpXG4gICAgcmV0dXJuIG1hajMyKHgsIHksIHopO1xufVxuZXhwb3J0cy5mdF8xID0gZnRfMTtcblxuZnVuY3Rpb24gY2gzMih4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIF4gKCh+eCkgJiB6KTtcbn1cbmV4cG9ydHMuY2gzMiA9IGNoMzI7XG5cbmZ1bmN0aW9uIG1hajMyKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgXiAoeCAmIHopIF4gKHkgJiB6KTtcbn1cbmV4cG9ydHMubWFqMzIgPSBtYWozMjtcblxuZnVuY3Rpb24gcDMyKHgsIHksIHopIHtcbiAgcmV0dXJuIHggXiB5IF4gejtcbn1cbmV4cG9ydHMucDMyID0gcDMyO1xuXG5mdW5jdGlvbiBzMF8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDIpIF4gcm90cjMyKHgsIDEzKSBeIHJvdHIzMih4LCAyMik7XG59XG5leHBvcnRzLnMwXzI1NiA9IHMwXzI1NjtcblxuZnVuY3Rpb24gczFfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCA2KSBeIHJvdHIzMih4LCAxMSkgXiByb3RyMzIoeCwgMjUpO1xufVxuZXhwb3J0cy5zMV8yNTYgPSBzMV8yNTY7XG5cbmZ1bmN0aW9uIGcwXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgNykgXiByb3RyMzIoeCwgMTgpIF4gKHggPj4+IDMpO1xufVxuZXhwb3J0cy5nMF8yNTYgPSBnMF8yNTY7XG5cbmZ1bmN0aW9uIGcxXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgMTcpIF4gcm90cjMyKHgsIDE5KSBeICh4ID4+PiAxMCk7XG59XG5leHBvcnRzLmcxXzI1NiA9IGcxXzI1NjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBTSEEyNTYgPSByZXF1aXJlKCcuLzI1NicpO1xuXG5mdW5jdGlvbiBTSEEyMjQoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEyMjQpKVxuICAgIHJldHVybiBuZXcgU0hBMjI0KCk7XG5cbiAgU0hBMjU2LmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweGMxMDU5ZWQ4LCAweDM2N2NkNTA3LCAweDMwNzBkZDE3LCAweGY3MGU1OTM5LFxuICAgIDB4ZmZjMDBiMzEsIDB4Njg1ODE1MTEsIDB4NjRmOThmYTcsIDB4YmVmYTRmYTQgXTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTIyNCwgU0hBMjU2KTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMjI0O1xuXG5TSEEyMjQuYmxvY2tTaXplID0gNTEyO1xuU0hBMjI0Lm91dFNpemUgPSAyMjQ7XG5TSEEyMjQuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMjI0LnBhZExlbmd0aCA9IDY0O1xuXG5TSEEyMjQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIC8vIEp1c3QgdHJ1bmNhdGUgb3V0cHV0XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCA3KSwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsIDcpLCAnYmlnJyk7XG59O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG52YXIgc2hhQ29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbnZhciBzdW0zMiA9IHV0aWxzLnN1bTMyO1xudmFyIHN1bTMyXzQgPSB1dGlscy5zdW0zMl80O1xudmFyIHN1bTMyXzUgPSB1dGlscy5zdW0zMl81O1xudmFyIGNoMzIgPSBzaGFDb21tb24uY2gzMjtcbnZhciBtYWozMiA9IHNoYUNvbW1vbi5tYWozMjtcbnZhciBzMF8yNTYgPSBzaGFDb21tb24uczBfMjU2O1xudmFyIHMxXzI1NiA9IHNoYUNvbW1vbi5zMV8yNTY7XG52YXIgZzBfMjU2ID0gc2hhQ29tbW9uLmcwXzI1NjtcbnZhciBnMV8yNTYgPSBzaGFDb21tb24uZzFfMjU2O1xuXG52YXIgQmxvY2tIYXNoID0gY29tbW9uLkJsb2NrSGFzaDtcblxudmFyIHNoYTI1Nl9LID0gW1xuICAweDQyOGEyZjk4LCAweDcxMzc0NDkxLCAweGI1YzBmYmNmLCAweGU5YjVkYmE1LFxuICAweDM5NTZjMjViLCAweDU5ZjExMWYxLCAweDkyM2Y4MmE0LCAweGFiMWM1ZWQ1LFxuICAweGQ4MDdhYTk4LCAweDEyODM1YjAxLCAweDI0MzE4NWJlLCAweDU1MGM3ZGMzLFxuICAweDcyYmU1ZDc0LCAweDgwZGViMWZlLCAweDliZGMwNmE3LCAweGMxOWJmMTc0LFxuICAweGU0OWI2OWMxLCAweGVmYmU0Nzg2LCAweDBmYzE5ZGM2LCAweDI0MGNhMWNjLFxuICAweDJkZTkyYzZmLCAweDRhNzQ4NGFhLCAweDVjYjBhOWRjLCAweDc2Zjk4OGRhLFxuICAweDk4M2U1MTUyLCAweGE4MzFjNjZkLCAweGIwMDMyN2M4LCAweGJmNTk3ZmM3LFxuICAweGM2ZTAwYmYzLCAweGQ1YTc5MTQ3LCAweDA2Y2E2MzUxLCAweDE0MjkyOTY3LFxuICAweDI3YjcwYTg1LCAweDJlMWIyMTM4LCAweDRkMmM2ZGZjLCAweDUzMzgwZDEzLFxuICAweDY1MGE3MzU0LCAweDc2NmEwYWJiLCAweDgxYzJjOTJlLCAweDkyNzIyYzg1LFxuICAweGEyYmZlOGExLCAweGE4MWE2NjRiLCAweGMyNGI4YjcwLCAweGM3NmM1MWEzLFxuICAweGQxOTJlODE5LCAweGQ2OTkwNjI0LCAweGY0MGUzNTg1LCAweDEwNmFhMDcwLFxuICAweDE5YTRjMTE2LCAweDFlMzc2YzA4LCAweDI3NDg3NzRjLCAweDM0YjBiY2I1LFxuICAweDM5MWMwY2IzLCAweDRlZDhhYTRhLCAweDViOWNjYTRmLCAweDY4MmU2ZmYzLFxuICAweDc0OGY4MmVlLCAweDc4YTU2MzZmLCAweDg0Yzg3ODE0LCAweDhjYzcwMjA4LFxuICAweDkwYmVmZmZhLCAweGE0NTA2Y2ViLCAweGJlZjlhM2Y3LCAweGM2NzE3OGYyXG5dO1xuXG5mdW5jdGlvbiBTSEEyNTYoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEyNTYpKVxuICAgIHJldHVybiBuZXcgU0hBMjU2KCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweDZhMDllNjY3LCAweGJiNjdhZTg1LCAweDNjNmVmMzcyLCAweGE1NGZmNTNhLFxuICAgIDB4NTEwZTUyN2YsIDB4OWIwNTY4OGMsIDB4MWY4M2Q5YWIsIDB4NWJlMGNkMTlcbiAgXTtcbiAgdGhpcy5rID0gc2hhMjU2X0s7XG4gIHRoaXMuVyA9IG5ldyBBcnJheSg2NCk7XG59XG51dGlscy5pbmhlcml0cyhTSEEyNTYsIEJsb2NrSGFzaCk7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTI1NjtcblxuU0hBMjU2LmJsb2NrU2l6ZSA9IDUxMjtcblNIQTI1Ni5vdXRTaXplID0gMjU2O1xuU0hBMjU2LmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTI1Ni5wYWRMZW5ndGggPSA2NDtcblxuU0hBMjU2LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBXID0gdGhpcy5XO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG4gIGZvciAoOyBpIDwgVy5sZW5ndGg7IGkrKylcbiAgICBXW2ldID0gc3VtMzJfNChnMV8yNTYoV1tpIC0gMl0pLCBXW2kgLSA3XSwgZzBfMjU2KFdbaSAtIDE1XSksIFdbaSAtIDE2XSk7XG5cbiAgdmFyIGEgPSB0aGlzLmhbMF07XG4gIHZhciBiID0gdGhpcy5oWzFdO1xuICB2YXIgYyA9IHRoaXMuaFsyXTtcbiAgdmFyIGQgPSB0aGlzLmhbM107XG4gIHZhciBlID0gdGhpcy5oWzRdO1xuICB2YXIgZiA9IHRoaXMuaFs1XTtcbiAgdmFyIGcgPSB0aGlzLmhbNl07XG4gIHZhciBoID0gdGhpcy5oWzddO1xuXG4gIGFzc2VydCh0aGlzLmsubGVuZ3RoID09PSBXLmxlbmd0aCk7XG4gIGZvciAoaSA9IDA7IGkgPCBXLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIFQxID0gc3VtMzJfNShoLCBzMV8yNTYoZSksIGNoMzIoZSwgZiwgZyksIHRoaXMua1tpXSwgV1tpXSk7XG4gICAgdmFyIFQyID0gc3VtMzIoczBfMjU2KGEpLCBtYWozMihhLCBiLCBjKSk7XG4gICAgaCA9IGc7XG4gICAgZyA9IGY7XG4gICAgZiA9IGU7XG4gICAgZSA9IHN1bTMyKGQsIFQxKTtcbiAgICBkID0gYztcbiAgICBjID0gYjtcbiAgICBiID0gYTtcbiAgICBhID0gc3VtMzIoVDEsIFQyKTtcbiAgfVxuXG4gIHRoaXMuaFswXSA9IHN1bTMyKHRoaXMuaFswXSwgYSk7XG4gIHRoaXMuaFsxXSA9IHN1bTMyKHRoaXMuaFsxXSwgYik7XG4gIHRoaXMuaFsyXSA9IHN1bTMyKHRoaXMuaFsyXSwgYyk7XG4gIHRoaXMuaFszXSA9IHN1bTMyKHRoaXMuaFszXSwgZCk7XG4gIHRoaXMuaFs0XSA9IHN1bTMyKHRoaXMuaFs0XSwgZSk7XG4gIHRoaXMuaFs1XSA9IHN1bTMyKHRoaXMuaFs1XSwgZik7XG4gIHRoaXMuaFs2XSA9IHN1bTMyKHRoaXMuaFs2XSwgZyk7XG4gIHRoaXMuaFs3XSA9IHN1bTMyKHRoaXMuaFs3XSwgaCk7XG59O1xuXG5TSEEyNTYucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnYmlnJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG52YXIgU0hBNTEyID0gcmVxdWlyZSgnLi81MTInKTtcblxuZnVuY3Rpb24gU0hBMzg0KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMzg0KSlcbiAgICByZXR1cm4gbmV3IFNIQTM4NCgpO1xuXG4gIFNIQTUxMi5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHhjYmJiOWQ1ZCwgMHhjMTA1OWVkOCxcbiAgICAweDYyOWEyOTJhLCAweDM2N2NkNTA3LFxuICAgIDB4OTE1OTAxNWEsIDB4MzA3MGRkMTcsXG4gICAgMHgxNTJmZWNkOCwgMHhmNzBlNTkzOSxcbiAgICAweDY3MzMyNjY3LCAweGZmYzAwYjMxLFxuICAgIDB4OGViNDRhODcsIDB4Njg1ODE1MTEsXG4gICAgMHhkYjBjMmUwZCwgMHg2NGY5OGZhNyxcbiAgICAweDQ3YjU0ODFkLCAweGJlZmE0ZmE0IF07XG59XG51dGlscy5pbmhlcml0cyhTSEEzODQsIFNIQTUxMik7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTM4NDtcblxuU0hBMzg0LmJsb2NrU2l6ZSA9IDEwMjQ7XG5TSEEzODQub3V0U2l6ZSA9IDM4NDtcblNIQTM4NC5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEzODQucGFkTGVuZ3RoID0gMTI4O1xuXG5TSEEzODQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG52YXIgcm90cjY0X2hpID0gdXRpbHMucm90cjY0X2hpO1xudmFyIHJvdHI2NF9sbyA9IHV0aWxzLnJvdHI2NF9sbztcbnZhciBzaHI2NF9oaSA9IHV0aWxzLnNocjY0X2hpO1xudmFyIHNocjY0X2xvID0gdXRpbHMuc2hyNjRfbG87XG52YXIgc3VtNjQgPSB1dGlscy5zdW02NDtcbnZhciBzdW02NF9oaSA9IHV0aWxzLnN1bTY0X2hpO1xudmFyIHN1bTY0X2xvID0gdXRpbHMuc3VtNjRfbG87XG52YXIgc3VtNjRfNF9oaSA9IHV0aWxzLnN1bTY0XzRfaGk7XG52YXIgc3VtNjRfNF9sbyA9IHV0aWxzLnN1bTY0XzRfbG87XG52YXIgc3VtNjRfNV9oaSA9IHV0aWxzLnN1bTY0XzVfaGk7XG52YXIgc3VtNjRfNV9sbyA9IHV0aWxzLnN1bTY0XzVfbG87XG5cbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG52YXIgc2hhNTEyX0sgPSBbXG4gIDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIsIDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QsXG4gIDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYsIDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMsXG4gIDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgsIDB4NTlmMTExZjEsIDB4YjYwNWQwMTksXG4gIDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIsIDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgsXG4gIDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIsIDB4MTI4MzViMDEsIDB4NDU3MDZmYmUsXG4gIDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMsIDB4NTUwYzdkYzMsIDB4ZDVmZmI0ZTIsXG4gIDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYsIDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEsXG4gIDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUsIDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQsXG4gIDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIsIDB4ZWZiZTQ3ODYsIDB4Mzg0ZjI1ZTMsXG4gIDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUsIDB4MjQwY2ExY2MsIDB4NzdhYzljNjUsXG4gIDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUsIDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMsXG4gIDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQsIDB4NzZmOTg4ZGEsIDB4ODMxMTUzYjUsXG4gIDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIsIDB4YTgzMWM2NmQsIDB4MmRiNDMyMTAsXG4gIDB4YjAwMzI3YzgsIDB4OThmYjIxM2YsIDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQsXG4gIDB4YzZlMDBiZjMsIDB4M2RhODhmYzIsIDB4ZDVhNzkxNDcsIDB4OTMwYWE3MjUsXG4gIDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYsIDB4MTQyOTI5NjcsIDB4MGEwZTZlNzAsXG4gIDB4MjdiNzBhODUsIDB4NDZkMjJmZmMsIDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYsXG4gIDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQsIDB4NTMzODBkMTMsIDB4OWQ5NWIzZGYsXG4gIDB4NjUwYTczNTQsIDB4OGJhZjYzZGUsIDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgsXG4gIDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYsIDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IsXG4gIDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQsIDB4YTgxYTY2NGIsIDB4YmM0MjMwMDEsXG4gIDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEsIDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzAsXG4gIDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgsIDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTAsXG4gIDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEsIDB4MTA2YWEwNzAsIDB4MzJiYmQxYjgsXG4gIDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgsIDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMsXG4gIDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTksIDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgsXG4gIDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMsIDB4NGVkOGFhNGEsIDB4ZTM0MThhY2IsXG4gIDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMsIDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMsXG4gIDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMsIDB4NzhhNTYzNmYsIDB4NDMxNzJmNjAsXG4gIDB4ODRjODc4MTQsIDB4YTFmMGFiNzIsIDB4OGNjNzAyMDgsIDB4MWE2NDM5ZWMsXG4gIDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgsIDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTksXG4gIDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUsIDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIsXG4gIDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMsIDB4ZDE4NmI4YzcsIDB4MjFjMGMyMDcsXG4gIDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUsIDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgsXG4gIDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEsIDB4MGE2MzdkYzUsIDB4YTJjODk4YTYsXG4gIDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUsIDB4MWI3MTBiMzUsIDB4MTMxYzQ3MWIsXG4gIDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQsIDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMsXG4gIDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMsIDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMsXG4gIDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYsIDB4NTk3ZjI5OWMsIDB4ZmM2NTdlMmEsXG4gIDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMsIDB4NmM0NDE5OGMsIDB4NGE0NzU4MTdcbl07XG5cbmZ1bmN0aW9uIFNIQTUxMigpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTUxMikpXG4gICAgcmV0dXJuIG5ldyBTSEE1MTIoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4NmEwOWU2NjcsIDB4ZjNiY2M5MDgsXG4gICAgMHhiYjY3YWU4NSwgMHg4NGNhYTczYixcbiAgICAweDNjNmVmMzcyLCAweGZlOTRmODJiLFxuICAgIDB4YTU0ZmY1M2EsIDB4NWYxZDM2ZjEsXG4gICAgMHg1MTBlNTI3ZiwgMHhhZGU2ODJkMSxcbiAgICAweDliMDU2ODhjLCAweDJiM2U2YzFmLFxuICAgIDB4MWY4M2Q5YWIsIDB4ZmI0MWJkNmIsXG4gICAgMHg1YmUwY2QxOSwgMHgxMzdlMjE3OSBdO1xuICB0aGlzLmsgPSBzaGE1MTJfSztcbiAgdGhpcy5XID0gbmV3IEFycmF5KDE2MCk7XG59XG51dGlscy5pbmhlcml0cyhTSEE1MTIsIEJsb2NrSGFzaCk7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTUxMjtcblxuU0hBNTEyLmJsb2NrU2l6ZSA9IDEwMjQ7XG5TSEE1MTIub3V0U2l6ZSA9IDUxMjtcblNIQTUxMi5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEE1MTIucGFkTGVuZ3RoID0gMTI4O1xuXG5TSEE1MTIucHJvdG90eXBlLl9wcmVwYXJlQmxvY2sgPSBmdW5jdGlvbiBfcHJlcGFyZUJsb2NrKG1zZywgc3RhcnQpIHtcbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgLy8gMzIgeCAzMmJpdCB3b3Jkc1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpKyspXG4gICAgV1tpXSA9IG1zZ1tzdGFydCArIGldO1xuICBmb3IgKDsgaSA8IFcubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIgYzBfaGkgPSBnMV81MTJfaGkoV1tpIC0gNF0sIFdbaSAtIDNdKTsgIC8vIGkgLSAyXG4gICAgdmFyIGMwX2xvID0gZzFfNTEyX2xvKFdbaSAtIDRdLCBXW2kgLSAzXSk7XG4gICAgdmFyIGMxX2hpID0gV1tpIC0gMTRdOyAgLy8gaSAtIDdcbiAgICB2YXIgYzFfbG8gPSBXW2kgLSAxM107XG4gICAgdmFyIGMyX2hpID0gZzBfNTEyX2hpKFdbaSAtIDMwXSwgV1tpIC0gMjldKTsgIC8vIGkgLSAxNVxuICAgIHZhciBjMl9sbyA9IGcwXzUxMl9sbyhXW2kgLSAzMF0sIFdbaSAtIDI5XSk7XG4gICAgdmFyIGMzX2hpID0gV1tpIC0gMzJdOyAgLy8gaSAtIDE2XG4gICAgdmFyIGMzX2xvID0gV1tpIC0gMzFdO1xuXG4gICAgV1tpXSA9IHN1bTY0XzRfaGkoXG4gICAgICBjMF9oaSwgYzBfbG8sXG4gICAgICBjMV9oaSwgYzFfbG8sXG4gICAgICBjMl9oaSwgYzJfbG8sXG4gICAgICBjM19oaSwgYzNfbG8pO1xuICAgIFdbaSArIDFdID0gc3VtNjRfNF9sbyhcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyk7XG4gIH1cbn07XG5cblNIQTUxMi5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUobXNnLCBzdGFydCkge1xuICB0aGlzLl9wcmVwYXJlQmxvY2sobXNnLCBzdGFydCk7XG5cbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgdmFyIGFoID0gdGhpcy5oWzBdO1xuICB2YXIgYWwgPSB0aGlzLmhbMV07XG4gIHZhciBiaCA9IHRoaXMuaFsyXTtcbiAgdmFyIGJsID0gdGhpcy5oWzNdO1xuICB2YXIgY2ggPSB0aGlzLmhbNF07XG4gIHZhciBjbCA9IHRoaXMuaFs1XTtcbiAgdmFyIGRoID0gdGhpcy5oWzZdO1xuICB2YXIgZGwgPSB0aGlzLmhbN107XG4gIHZhciBlaCA9IHRoaXMuaFs4XTtcbiAgdmFyIGVsID0gdGhpcy5oWzldO1xuICB2YXIgZmggPSB0aGlzLmhbMTBdO1xuICB2YXIgZmwgPSB0aGlzLmhbMTFdO1xuICB2YXIgZ2ggPSB0aGlzLmhbMTJdO1xuICB2YXIgZ2wgPSB0aGlzLmhbMTNdO1xuICB2YXIgaGggPSB0aGlzLmhbMTRdO1xuICB2YXIgaGwgPSB0aGlzLmhbMTVdO1xuXG4gIGFzc2VydCh0aGlzLmsubGVuZ3RoID09PSBXLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBjMF9oaSA9IGhoO1xuICAgIHZhciBjMF9sbyA9IGhsO1xuICAgIHZhciBjMV9oaSA9IHMxXzUxMl9oaShlaCwgZWwpO1xuICAgIHZhciBjMV9sbyA9IHMxXzUxMl9sbyhlaCwgZWwpO1xuICAgIHZhciBjMl9oaSA9IGNoNjRfaGkoZWgsIGVsLCBmaCwgZmwsIGdoLCBnbCk7XG4gICAgdmFyIGMyX2xvID0gY2g2NF9sbyhlaCwgZWwsIGZoLCBmbCwgZ2gsIGdsKTtcbiAgICB2YXIgYzNfaGkgPSB0aGlzLmtbaV07XG4gICAgdmFyIGMzX2xvID0gdGhpcy5rW2kgKyAxXTtcbiAgICB2YXIgYzRfaGkgPSBXW2ldO1xuICAgIHZhciBjNF9sbyA9IFdbaSArIDFdO1xuXG4gICAgdmFyIFQxX2hpID0gc3VtNjRfNV9oaShcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyxcbiAgICAgIGM0X2hpLCBjNF9sbyk7XG4gICAgdmFyIFQxX2xvID0gc3VtNjRfNV9sbyhcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyxcbiAgICAgIGM0X2hpLCBjNF9sbyk7XG5cbiAgICBjMF9oaSA9IHMwXzUxMl9oaShhaCwgYWwpO1xuICAgIGMwX2xvID0gczBfNTEyX2xvKGFoLCBhbCk7XG4gICAgYzFfaGkgPSBtYWo2NF9oaShhaCwgYWwsIGJoLCBibCwgY2gsIGNsKTtcbiAgICBjMV9sbyA9IG1hajY0X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wpO1xuXG4gICAgdmFyIFQyX2hpID0gc3VtNjRfaGkoYzBfaGksIGMwX2xvLCBjMV9oaSwgYzFfbG8pO1xuICAgIHZhciBUMl9sbyA9IHN1bTY0X2xvKGMwX2hpLCBjMF9sbywgYzFfaGksIGMxX2xvKTtcblxuICAgIGhoID0gZ2g7XG4gICAgaGwgPSBnbDtcblxuICAgIGdoID0gZmg7XG4gICAgZ2wgPSBmbDtcblxuICAgIGZoID0gZWg7XG4gICAgZmwgPSBlbDtcblxuICAgIGVoID0gc3VtNjRfaGkoZGgsIGRsLCBUMV9oaSwgVDFfbG8pO1xuICAgIGVsID0gc3VtNjRfbG8oZGwsIGRsLCBUMV9oaSwgVDFfbG8pO1xuXG4gICAgZGggPSBjaDtcbiAgICBkbCA9IGNsO1xuXG4gICAgY2ggPSBiaDtcbiAgICBjbCA9IGJsO1xuXG4gICAgYmggPSBhaDtcbiAgICBibCA9IGFsO1xuXG4gICAgYWggPSBzdW02NF9oaShUMV9oaSwgVDFfbG8sIFQyX2hpLCBUMl9sbyk7XG4gICAgYWwgPSBzdW02NF9sbyhUMV9oaSwgVDFfbG8sIFQyX2hpLCBUMl9sbyk7XG4gIH1cblxuICBzdW02NCh0aGlzLmgsIDAsIGFoLCBhbCk7XG4gIHN1bTY0KHRoaXMuaCwgMiwgYmgsIGJsKTtcbiAgc3VtNjQodGhpcy5oLCA0LCBjaCwgY2wpO1xuICBzdW02NCh0aGlzLmgsIDYsIGRoLCBkbCk7XG4gIHN1bTY0KHRoaXMuaCwgOCwgZWgsIGVsKTtcbiAgc3VtNjQodGhpcy5oLCAxMCwgZmgsIGZsKTtcbiAgc3VtNjQodGhpcy5oLCAxMiwgZ2gsIGdsKTtcbiAgc3VtNjQodGhpcy5oLCAxNCwgaGgsIGhsKTtcbn07XG5cblNIQTUxMi5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdiaWcnKTtcbn07XG5cbmZ1bmN0aW9uIGNoNjRfaGkoeGgsIHhsLCB5aCwgeWwsIHpoKSB7XG4gIHZhciByID0gKHhoICYgeWgpIF4gKCh+eGgpICYgemgpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGNoNjRfbG8oeGgsIHhsLCB5aCwgeWwsIHpoLCB6bCkge1xuICB2YXIgciA9ICh4bCAmIHlsKSBeICgofnhsKSAmIHpsKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYWo2NF9oaSh4aCwgeGwsIHloLCB5bCwgemgpIHtcbiAgdmFyIHIgPSAoeGggJiB5aCkgXiAoeGggJiB6aCkgXiAoeWggJiB6aCk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gbWFqNjRfbG8oeGgsIHhsLCB5aCwgeWwsIHpoLCB6bCkge1xuICB2YXIgciA9ICh4bCAmIHlsKSBeICh4bCAmIHpsKSBeICh5bCAmIHpsKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMF81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDI4KTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgMik7ICAvLyAzNFxuICB2YXIgYzJfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCA3KTsgIC8vIDM5XG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczBfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAyOCk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDIpOyAgLy8gMzRcbiAgdmFyIGMyX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgNyk7ICAvLyAzOVxuXG4gIHZhciByID0gYzBfbG8gXiBjMV9sbyBeIGMyX2xvO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMxXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMTQpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxOCk7XG4gIHZhciBjMl9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDkpOyAgLy8gNDFcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMV81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDE0KTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMTgpO1xuICB2YXIgYzJfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCA5KTsgIC8vIDQxXG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzBfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxKTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgOCk7XG4gIHZhciBjMl9oaSA9IHNocjY0X2hpKHhoLCB4bCwgNyk7XG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzBfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxKTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgOCk7XG4gIHZhciBjMl9sbyA9IHNocjY0X2xvKHhoLCB4bCwgNyk7XG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzFfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxOSk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDI5KTsgIC8vIDYxXG4gIHZhciBjMl9oaSA9IHNocjY0X2hpKHhoLCB4bCwgNik7XG5cbiAgdmFyIHIgPSBjMF9oaSBeIGMxX2hpIF4gYzJfaGk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZzFfNTEyX2xvKHhoLCB4bCkge1xuICB2YXIgYzBfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxOSk7XG4gIHZhciBjMV9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDI5KTsgIC8vIDYxXG4gIHZhciBjMl9sbyA9IHNocjY0X2xvKHhoLCB4bCwgNik7XG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5cbnZhciByb3RsMzIgPSB1dGlscy5yb3RsMzI7XG52YXIgc3VtMzIgPSB1dGlscy5zdW0zMjtcbnZhciBzdW0zMl8zID0gdXRpbHMuc3VtMzJfMztcbnZhciBzdW0zMl80ID0gdXRpbHMuc3VtMzJfNDtcbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG5mdW5jdGlvbiBSSVBFTUQxNjAoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSSVBFTUQxNjApKVxuICAgIHJldHVybiBuZXcgUklQRU1EMTYwKCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG5cbiAgdGhpcy5oID0gWyAweDY3NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLCAweDEwMzI1NDc2LCAweGMzZDJlMWYwIF07XG4gIHRoaXMuZW5kaWFuID0gJ2xpdHRsZSc7XG59XG51dGlscy5pbmhlcml0cyhSSVBFTUQxNjAsIEJsb2NrSGFzaCk7XG5leHBvcnRzLnJpcGVtZDE2MCA9IFJJUEVNRDE2MDtcblxuUklQRU1EMTYwLmJsb2NrU2l6ZSA9IDUxMjtcblJJUEVNRDE2MC5vdXRTaXplID0gMTYwO1xuUklQRU1EMTYwLmhtYWNTdHJlbmd0aCA9IDE5MjtcblJJUEVNRDE2MC5wYWRMZW5ndGggPSA2NDtcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdmFyIEEgPSB0aGlzLmhbMF07XG4gIHZhciBCID0gdGhpcy5oWzFdO1xuICB2YXIgQyA9IHRoaXMuaFsyXTtcbiAgdmFyIEQgPSB0aGlzLmhbM107XG4gIHZhciBFID0gdGhpcy5oWzRdO1xuICB2YXIgQWggPSBBO1xuICB2YXIgQmggPSBCO1xuICB2YXIgQ2ggPSBDO1xuICB2YXIgRGggPSBEO1xuICB2YXIgRWggPSBFO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyBqKyspIHtcbiAgICB2YXIgVCA9IHN1bTMyKFxuICAgICAgcm90bDMyKFxuICAgICAgICBzdW0zMl80KEEsIGYoaiwgQiwgQywgRCksIG1zZ1tyW2pdICsgc3RhcnRdLCBLKGopKSxcbiAgICAgICAgc1tqXSksXG4gICAgICBFKTtcbiAgICBBID0gRTtcbiAgICBFID0gRDtcbiAgICBEID0gcm90bDMyKEMsIDEwKTtcbiAgICBDID0gQjtcbiAgICBCID0gVDtcbiAgICBUID0gc3VtMzIoXG4gICAgICByb3RsMzIoXG4gICAgICAgIHN1bTMyXzQoQWgsIGYoNzkgLSBqLCBCaCwgQ2gsIERoKSwgbXNnW3JoW2pdICsgc3RhcnRdLCBLaChqKSksXG4gICAgICAgIHNoW2pdKSxcbiAgICAgIEVoKTtcbiAgICBBaCA9IEVoO1xuICAgIEVoID0gRGg7XG4gICAgRGggPSByb3RsMzIoQ2gsIDEwKTtcbiAgICBDaCA9IEJoO1xuICAgIEJoID0gVDtcbiAgfVxuICBUID0gc3VtMzJfMyh0aGlzLmhbMV0sIEMsIERoKTtcbiAgdGhpcy5oWzFdID0gc3VtMzJfMyh0aGlzLmhbMl0sIEQsIEVoKTtcbiAgdGhpcy5oWzJdID0gc3VtMzJfMyh0aGlzLmhbM10sIEUsIEFoKTtcbiAgdGhpcy5oWzNdID0gc3VtMzJfMyh0aGlzLmhbNF0sIEEsIEJoKTtcbiAgdGhpcy5oWzRdID0gc3VtMzJfMyh0aGlzLmhbMF0sIEIsIENoKTtcbiAgdGhpcy5oWzBdID0gVDtcbn07XG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnbGl0dGxlJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdsaXR0bGUnKTtcbn07XG5cbmZ1bmN0aW9uIGYoaiwgeCwgeSwgeikge1xuICBpZiAoaiA8PSAxNSlcbiAgICByZXR1cm4geCBeIHkgXiB6O1xuICBlbHNlIGlmIChqIDw9IDMxKVxuICAgIHJldHVybiAoeCAmIHkpIHwgKCh+eCkgJiB6KTtcbiAgZWxzZSBpZiAoaiA8PSA0NylcbiAgICByZXR1cm4gKHggfCAofnkpKSBeIHo7XG4gIGVsc2UgaWYgKGogPD0gNjMpXG4gICAgcmV0dXJuICh4ICYgeikgfCAoeSAmICh+eikpO1xuICBlbHNlXG4gICAgcmV0dXJuIHggXiAoeSB8ICh+eikpO1xufVxuXG5mdW5jdGlvbiBLKGopIHtcbiAgaWYgKGogPD0gMTUpXG4gICAgcmV0dXJuIDB4MDAwMDAwMDA7XG4gIGVsc2UgaWYgKGogPD0gMzEpXG4gICAgcmV0dXJuIDB4NWE4Mjc5OTk7XG4gIGVsc2UgaWYgKGogPD0gNDcpXG4gICAgcmV0dXJuIDB4NmVkOWViYTE7XG4gIGVsc2UgaWYgKGogPD0gNjMpXG4gICAgcmV0dXJuIDB4OGYxYmJjZGM7XG4gIGVsc2VcbiAgICByZXR1cm4gMHhhOTUzZmQ0ZTtcbn1cblxuZnVuY3Rpb24gS2goaikge1xuICBpZiAoaiA8PSAxNSlcbiAgICByZXR1cm4gMHg1MGEyOGJlNjtcbiAgZWxzZSBpZiAoaiA8PSAzMSlcbiAgICByZXR1cm4gMHg1YzRkZDEyNDtcbiAgZWxzZSBpZiAoaiA8PSA0NylcbiAgICByZXR1cm4gMHg2ZDcwM2VmMztcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gMHg3YTZkNzZlOTtcbiAgZWxzZVxuICAgIHJldHVybiAweDAwMDAwMDAwO1xufVxuXG52YXIgciA9IFtcbiAgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcbiAgNywgNCwgMTMsIDEsIDEwLCA2LCAxNSwgMywgMTIsIDAsIDksIDUsIDIsIDE0LCAxMSwgOCxcbiAgMywgMTAsIDE0LCA0LCA5LCAxNSwgOCwgMSwgMiwgNywgMCwgNiwgMTMsIDExLCA1LCAxMixcbiAgMSwgOSwgMTEsIDEwLCAwLCA4LCAxMiwgNCwgMTMsIDMsIDcsIDE1LCAxNCwgNSwgNiwgMixcbiAgNCwgMCwgNSwgOSwgNywgMTIsIDIsIDEwLCAxNCwgMSwgMywgOCwgMTEsIDYsIDE1LCAxM1xuXTtcblxudmFyIHJoID0gW1xuICA1LCAxNCwgNywgMCwgOSwgMiwgMTEsIDQsIDEzLCA2LCAxNSwgOCwgMSwgMTAsIDMsIDEyLFxuICA2LCAxMSwgMywgNywgMCwgMTMsIDUsIDEwLCAxNCwgMTUsIDgsIDEyLCA0LCA5LCAxLCAyLFxuICAxNSwgNSwgMSwgMywgNywgMTQsIDYsIDksIDExLCA4LCAxMiwgMiwgMTAsIDAsIDQsIDEzLFxuICA4LCA2LCA0LCAxLCAzLCAxMSwgMTUsIDAsIDUsIDEyLCAyLCAxMywgOSwgNywgMTAsIDE0LFxuICAxMiwgMTUsIDEwLCA0LCAxLCA1LCA4LCA3LCA2LCAyLCAxMywgMTQsIDAsIDMsIDksIDExXG5dO1xuXG52YXIgcyA9IFtcbiAgMTEsIDE0LCAxNSwgMTIsIDUsIDgsIDcsIDksIDExLCAxMywgMTQsIDE1LCA2LCA3LCA5LCA4LFxuICA3LCA2LCA4LCAxMywgMTEsIDksIDcsIDE1LCA3LCAxMiwgMTUsIDksIDExLCA3LCAxMywgMTIsXG4gIDExLCAxMywgNiwgNywgMTQsIDksIDEzLCAxNSwgMTQsIDgsIDEzLCA2LCA1LCAxMiwgNywgNSxcbiAgMTEsIDEyLCAxNCwgMTUsIDE0LCAxNSwgOSwgOCwgOSwgMTQsIDUsIDYsIDgsIDYsIDUsIDEyLFxuICA5LCAxNSwgNSwgMTEsIDYsIDgsIDEzLCAxMiwgNSwgMTIsIDEzLCAxNCwgMTEsIDgsIDUsIDZcbl07XG5cbnZhciBzaCA9IFtcbiAgOCwgOSwgOSwgMTEsIDEzLCAxNSwgMTUsIDUsIDcsIDcsIDgsIDExLCAxNCwgMTQsIDEyLCA2LFxuICA5LCAxMywgMTUsIDcsIDEyLCA4LCA5LCAxMSwgNywgNywgMTIsIDcsIDYsIDE1LCAxMywgMTEsXG4gIDksIDcsIDE1LCAxMSwgOCwgNiwgNiwgMTQsIDEyLCAxMywgNSwgMTQsIDEzLCAxMywgNywgNSxcbiAgMTUsIDUsIDgsIDExLCAxNCwgMTQsIDYsIDE0LCA2LCA5LCAxMiwgOSwgMTIsIDUsIDE1LCA4LFxuICA4LCA1LCAxMiwgOSwgMTIsIDUsIDE0LCA2LCA4LCAxMywgNiwgNSwgMTUsIDEzLCAxMSwgMTFcbl07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbmZ1bmN0aW9uIEhtYWMoaGFzaCwga2V5LCBlbmMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEhtYWMpKVxuICAgIHJldHVybiBuZXcgSG1hYyhoYXNoLCBrZXksIGVuYyk7XG4gIHRoaXMuSGFzaCA9IGhhc2g7XG4gIHRoaXMuYmxvY2tTaXplID0gaGFzaC5ibG9ja1NpemUgLyA4O1xuICB0aGlzLm91dFNpemUgPSBoYXNoLm91dFNpemUgLyA4O1xuICB0aGlzLmlubmVyID0gbnVsbDtcbiAgdGhpcy5vdXRlciA9IG51bGw7XG5cbiAgdGhpcy5faW5pdCh1dGlscy50b0FycmF5KGtleSwgZW5jKSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEhtYWM7XG5cbkhtYWMucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdChrZXkpIHtcbiAgLy8gU2hvcnRlbiBrZXksIGlmIG5lZWRlZFxuICBpZiAoa2V5Lmxlbmd0aCA+IHRoaXMuYmxvY2tTaXplKVxuICAgIGtleSA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KS5kaWdlc3QoKTtcbiAgYXNzZXJ0KGtleS5sZW5ndGggPD0gdGhpcy5ibG9ja1NpemUpO1xuXG4gIC8vIEFkZCBwYWRkaW5nIHRvIGtleVxuICBmb3IgKHZhciBpID0ga2V5Lmxlbmd0aDsgaSA8IHRoaXMuYmxvY2tTaXplOyBpKyspXG4gICAga2V5LnB1c2goMCk7XG5cbiAgZm9yIChpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKylcbiAgICBrZXlbaV0gXj0gMHgzNjtcbiAgdGhpcy5pbm5lciA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KTtcblxuICAvLyAweDM2IF4gMHg1YyA9IDB4NmFcbiAgZm9yIChpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKylcbiAgICBrZXlbaV0gXj0gMHg2YTtcbiAgdGhpcy5vdXRlciA9IG5ldyB0aGlzLkhhc2goKS51cGRhdGUoa2V5KTtcbn07XG5cbkhtYWMucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShtc2csIGVuYykge1xuICB0aGlzLmlubmVyLnVwZGF0ZShtc2csIGVuYyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuSG1hYy5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICB0aGlzLm91dGVyLnVwZGF0ZSh0aGlzLmlubmVyLmRpZ2VzdCgpKTtcbiAgcmV0dXJuIHRoaXMub3V0ZXIuZGlnZXN0KGVuYyk7XG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHVybCA9IHJlcXVpcmUoJy4vdXJsJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIE1hbmFnZXIgPSByZXF1aXJlKCcuL21hbmFnZXInKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBsb29rdXA7XG5cbi8qKlxuICogTWFuYWdlcnMgY2FjaGUuXG4gKi9cblxudmFyIGNhY2hlID0gZXhwb3J0cy5tYW5hZ2VycyA9IHt9O1xuXG4vKipcbiAqIExvb2tzIHVwIGFuIGV4aXN0aW5nIGBNYW5hZ2VyYCBmb3IgbXVsdGlwbGV4aW5nLlxuICogSWYgdGhlIHVzZXIgc3VtbW9uczpcbiAqXG4gKiAgIGBpbygnaHR0cDovL2xvY2FsaG9zdC9hJyk7YFxuICogICBgaW8oJ2h0dHA6Ly9sb2NhbGhvc3QvYicpO2BcbiAqXG4gKiBXZSByZXVzZSB0aGUgZXhpc3RpbmcgaW5zdGFuY2UgYmFzZWQgb24gc2FtZSBzY2hlbWUvcG9ydC9ob3N0LFxuICogYW5kIHdlIGluaXRpYWxpemUgc29ja2V0cyBmb3IgZWFjaCBuYW1lc3BhY2UuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBsb29rdXAgKHVyaSwgb3B0cykge1xuICBpZiAodHlwZW9mIHVyaSA9PT0gJ29iamVjdCcpIHtcbiAgICBvcHRzID0gdXJpO1xuICAgIHVyaSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG4gIHZhciBwYXJzZWQgPSB1cmwodXJpKTtcbiAgdmFyIHNvdXJjZSA9IHBhcnNlZC5zb3VyY2U7XG4gIHZhciBpZCA9IHBhcnNlZC5pZDtcbiAgdmFyIHBhdGggPSBwYXJzZWQucGF0aDtcbiAgdmFyIHNhbWVOYW1lc3BhY2UgPSBjYWNoZVtpZF0gJiYgcGF0aCBpbiBjYWNoZVtpZF0ubnNwcztcbiAgdmFyIG5ld0Nvbm5lY3Rpb24gPSBvcHRzLmZvcmNlTmV3IHx8IG9wdHNbJ2ZvcmNlIG5ldyBjb25uZWN0aW9uJ10gfHxcbiAgICAgICAgICAgICAgICAgICAgICBmYWxzZSA9PT0gb3B0cy5tdWx0aXBsZXggfHwgc2FtZU5hbWVzcGFjZTtcblxuICB2YXIgaW87XG5cbiAgaWYgKG5ld0Nvbm5lY3Rpb24pIHtcbiAgICBkZWJ1ZygnaWdub3Jpbmcgc29ja2V0IGNhY2hlIGZvciAlcycsIHNvdXJjZSk7XG4gICAgaW8gPSBNYW5hZ2VyKHNvdXJjZSwgb3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFjYWNoZVtpZF0pIHtcbiAgICAgIGRlYnVnKCduZXcgaW8gaW5zdGFuY2UgZm9yICVzJywgc291cmNlKTtcbiAgICAgIGNhY2hlW2lkXSA9IE1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgICB9XG4gICAgaW8gPSBjYWNoZVtpZF07XG4gIH1cbiAgaWYgKHBhcnNlZC5xdWVyeSAmJiAhb3B0cy5xdWVyeSkge1xuICAgIG9wdHMucXVlcnkgPSBwYXJzZWQucXVlcnk7XG4gIH1cbiAgcmV0dXJuIGlvLnNvY2tldChwYXJzZWQucGF0aCwgb3B0cyk7XG59XG5cbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMucHJvdG9jb2wgPSBwYXJzZXIucHJvdG9jb2w7XG5cbi8qKlxuICogYGNvbm5lY3RgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmlcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5jb25uZWN0ID0gbG9va3VwO1xuXG4vKipcbiAqIEV4cG9zZSBjb25zdHJ1Y3RvcnMgZm9yIHN0YW5kYWxvbmUgYnVpbGQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLk1hbmFnZXIgPSByZXF1aXJlKCcuL21hbmFnZXInKTtcbmV4cG9ydHMuU29ja2V0ID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXVyaSA9IHJlcXVpcmUoJ3BhcnNldXJpJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50OnVybCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gdXJsO1xuXG4vKipcbiAqIFVSTCBwYXJzZXIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICogQHBhcmFtIHtPYmplY3R9IEFuIG9iamVjdCBtZWFudCB0byBtaW1pYyB3aW5kb3cubG9jYXRpb24uXG4gKiAgICAgICAgICAgICAgICAgRGVmYXVsdHMgdG8gd2luZG93LmxvY2F0aW9uLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiB1cmwgKHVyaSwgbG9jKSB7XG4gIHZhciBvYmogPSB1cmk7XG5cbiAgLy8gZGVmYXVsdCB0byB3aW5kb3cubG9jYXRpb25cbiAgbG9jID0gbG9jIHx8ICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnICYmIGxvY2F0aW9uKTtcbiAgaWYgKG51bGwgPT0gdXJpKSB1cmkgPSBsb2MucHJvdG9jb2wgKyAnLy8nICsgbG9jLmhvc3Q7XG5cbiAgLy8gcmVsYXRpdmUgcGF0aCBzdXBwb3J0XG4gIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHVyaSkge1xuICAgIGlmICgnLycgPT09IHVyaS5jaGFyQXQoMCkpIHtcbiAgICAgIGlmICgnLycgPT09IHVyaS5jaGFyQXQoMSkpIHtcbiAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgdXJpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJpID0gbG9jLmhvc3QgKyB1cmk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCEvXihodHRwcz98d3NzPyk6XFwvXFwvLy50ZXN0KHVyaSkpIHtcbiAgICAgIGRlYnVnKCdwcm90b2NvbC1sZXNzIHVybCAlcycsIHVyaSk7XG4gICAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBsb2MpIHtcbiAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgJy8vJyArIHVyaTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVyaSA9ICdodHRwczovLycgKyB1cmk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcGFyc2VcbiAgICBkZWJ1ZygncGFyc2UgJXMnLCB1cmkpO1xuICAgIG9iaiA9IHBhcnNldXJpKHVyaSk7XG4gIH1cblxuICAvLyBtYWtlIHN1cmUgd2UgdHJlYXQgYGxvY2FsaG9zdDo4MGAgYW5kIGBsb2NhbGhvc3RgIGVxdWFsbHlcbiAgaWYgKCFvYmoucG9ydCkge1xuICAgIGlmICgvXihodHRwfHdzKSQvLnRlc3Qob2JqLnByb3RvY29sKSkge1xuICAgICAgb2JqLnBvcnQgPSAnODAnO1xuICAgIH0gZWxzZSBpZiAoL14oaHR0cHx3cylzJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICBvYmoucG9ydCA9ICc0NDMnO1xuICAgIH1cbiAgfVxuXG4gIG9iai5wYXRoID0gb2JqLnBhdGggfHwgJy8nO1xuXG4gIHZhciBpcHY2ID0gb2JqLmhvc3QuaW5kZXhPZignOicpICE9PSAtMTtcbiAgdmFyIGhvc3QgPSBpcHY2ID8gJ1snICsgb2JqLmhvc3QgKyAnXScgOiBvYmouaG9zdDtcblxuICAvLyBkZWZpbmUgdW5pcXVlIGlkXG4gIG9iai5pZCA9IG9iai5wcm90b2NvbCArICc6Ly8nICsgaG9zdCArICc6JyArIG9iai5wb3J0O1xuICAvLyBkZWZpbmUgaHJlZlxuICBvYmouaHJlZiA9IG9iai5wcm90b2NvbCArICc6Ly8nICsgaG9zdCArIChsb2MgJiYgbG9jLnBvcnQgPT09IG9iai5wb3J0ID8gJycgOiAoJzonICsgb2JqLnBvcnQpKTtcblxuICByZXR1cm4gb2JqO1xufVxuIiwiLyoqXG4gKiBQYXJzZXMgYW4gVVJJXG4gKlxuICogQGF1dGhvciBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT4gKE1JVCBsaWNlbnNlKVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxudmFyIHJlID0gL14oPzooPyFbXjpAXSs6W146QFxcL10qQCkoaHR0cHxodHRwc3x3c3x3c3MpOlxcL1xcLyk/KCg/OigoW146QF0qKSg/OjooW146QF0qKSk/KT9AKT8oKD86W2EtZjAtOV17MCw0fTopezIsN31bYS1mMC05XXswLDR9fFteOlxcLz8jXSopKD86OihcXGQqKSk/KSgoKFxcLyg/OltePyNdKD8hW14/I1xcL10qXFwuW14/I1xcLy5dKyg/Ols/I118JCkpKSpcXC8/KT8oW14/I1xcL10qKSkoPzpcXD8oW14jXSopKT8oPzojKC4qKSk/KS87XG5cbnZhciBwYXJ0cyA9IFtcbiAgICAnc291cmNlJywgJ3Byb3RvY29sJywgJ2F1dGhvcml0eScsICd1c2VySW5mbycsICd1c2VyJywgJ3Bhc3N3b3JkJywgJ2hvc3QnLCAncG9ydCcsICdyZWxhdGl2ZScsICdwYXRoJywgJ2RpcmVjdG9yeScsICdmaWxlJywgJ3F1ZXJ5JywgJ2FuY2hvcidcbl07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2V1cmkoc3RyKSB7XG4gICAgdmFyIHNyYyA9IHN0cixcbiAgICAgICAgYiA9IHN0ci5pbmRleE9mKCdbJyksXG4gICAgICAgIGUgPSBzdHIuaW5kZXhPZignXScpO1xuXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xuICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIGIpICsgc3RyLnN1YnN0cmluZyhiLCBlKS5yZXBsYWNlKC86L2csICc7JykgKyBzdHIuc3Vic3RyaW5nKGUsIHN0ci5sZW5ndGgpO1xuICAgIH1cblxuICAgIHZhciBtID0gcmUuZXhlYyhzdHIgfHwgJycpLFxuICAgICAgICB1cmkgPSB7fSxcbiAgICAgICAgaSA9IDE0O1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICB1cmlbcGFydHNbaV1dID0gbVtpXSB8fCAnJztcbiAgICB9XG5cbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XG4gICAgICAgIHVyaS5zb3VyY2UgPSBzcmM7XG4gICAgICAgIHVyaS5ob3N0ID0gdXJpLmhvc3Quc3Vic3RyaW5nKDEsIHVyaS5ob3N0Lmxlbmd0aCAtIDEpLnJlcGxhY2UoLzsvZywgJzonKTtcbiAgICAgICAgdXJpLmF1dGhvcml0eSA9IHVyaS5hdXRob3JpdHkucmVwbGFjZSgnWycsICcnKS5yZXBsYWNlKCddJywgJycpLnJlcGxhY2UoLzsvZywgJzonKTtcbiAgICAgICAgdXJpLmlwdjZ1cmkgPSB0cnVlO1xuICAgIH1cblxuICAgIHVyaS5wYXRoTmFtZXMgPSBwYXRoTmFtZXModXJpLCB1cmlbJ3BhdGgnXSk7XG4gICAgdXJpLnF1ZXJ5S2V5ID0gcXVlcnlLZXkodXJpLCB1cmlbJ3F1ZXJ5J10pO1xuXG4gICAgcmV0dXJuIHVyaTtcbn07XG5cbmZ1bmN0aW9uIHBhdGhOYW1lcyhvYmosIHBhdGgpIHtcbiAgICB2YXIgcmVneCA9IC9cXC97Miw5fS9nLFxuICAgICAgICBuYW1lcyA9IHBhdGgucmVwbGFjZShyZWd4LCBcIi9cIikuc3BsaXQoXCIvXCIpO1xuXG4gICAgaWYgKHBhdGguc3Vic3RyKDAsIDEpID09ICcvJyB8fCBwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBuYW1lcy5zcGxpY2UoMCwgMSk7XG4gICAgfVxuICAgIGlmIChwYXRoLnN1YnN0cihwYXRoLmxlbmd0aCAtIDEsIDEpID09ICcvJykge1xuICAgICAgICBuYW1lcy5zcGxpY2UobmFtZXMubGVuZ3RoIC0gMSwgMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hbWVzO1xufVxuXG5mdW5jdGlvbiBxdWVyeUtleSh1cmksIHF1ZXJ5KSB7XG4gICAgdmFyIGRhdGEgPSB7fTtcblxuICAgIHF1ZXJ5LnJlcGxhY2UoLyg/Ol58JikoW14mPV0qKT0/KFteJl0qKS9nLCBmdW5jdGlvbiAoJDAsICQxLCAkMikge1xuICAgICAgICBpZiAoJDEpIHtcbiAgICAgICAgICAgIGRhdGFbJDFdID0gJDI7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBkYXRhO1xufVxuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnIzAwMDBDQycsICcjMDAwMEZGJywgJyMwMDMzQ0MnLCAnIzAwMzNGRicsICcjMDA2NkNDJywgJyMwMDY2RkYnLCAnIzAwOTlDQycsXG4gICcjMDA5OUZGJywgJyMwMENDMDAnLCAnIzAwQ0MzMycsICcjMDBDQzY2JywgJyMwMENDOTknLCAnIzAwQ0NDQycsICcjMDBDQ0ZGJyxcbiAgJyMzMzAwQ0MnLCAnIzMzMDBGRicsICcjMzMzM0NDJywgJyMzMzMzRkYnLCAnIzMzNjZDQycsICcjMzM2NkZGJywgJyMzMzk5Q0MnLFxuICAnIzMzOTlGRicsICcjMzNDQzAwJywgJyMzM0NDMzMnLCAnIzMzQ0M2NicsICcjMzNDQzk5JywgJyMzM0NDQ0MnLCAnIzMzQ0NGRicsXG4gICcjNjYwMENDJywgJyM2NjAwRkYnLCAnIzY2MzNDQycsICcjNjYzM0ZGJywgJyM2NkNDMDAnLCAnIzY2Q0MzMycsICcjOTkwMENDJyxcbiAgJyM5OTAwRkYnLCAnIzk5MzNDQycsICcjOTkzM0ZGJywgJyM5OUNDMDAnLCAnIzk5Q0MzMycsICcjQ0MwMDAwJywgJyNDQzAwMzMnLFxuICAnI0NDMDA2NicsICcjQ0MwMDk5JywgJyNDQzAwQ0MnLCAnI0NDMDBGRicsICcjQ0MzMzAwJywgJyNDQzMzMzMnLCAnI0NDMzM2NicsXG4gICcjQ0MzMzk5JywgJyNDQzMzQ0MnLCAnI0NDMzNGRicsICcjQ0M2NjAwJywgJyNDQzY2MzMnLCAnI0NDOTkwMCcsICcjQ0M5OTMzJyxcbiAgJyNDQ0NDMDAnLCAnI0NDQ0MzMycsICcjRkYwMDAwJywgJyNGRjAwMzMnLCAnI0ZGMDA2NicsICcjRkYwMDk5JywgJyNGRjAwQ0MnLFxuICAnI0ZGMDBGRicsICcjRkYzMzAwJywgJyNGRjMzMzMnLCAnI0ZGMzM2NicsICcjRkYzMzk5JywgJyNGRjMzQ0MnLCAnI0ZGMzNGRicsXG4gICcjRkY2NjAwJywgJyNGRjY2MzMnLCAnI0ZGOTkwMCcsICcjRkY5OTMzJywgJyNGRkNDMDAnLCAnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Z1snZGVmYXVsdCddID0gY3JlYXRlRGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBBY3RpdmUgYGRlYnVnYCBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydHMuaW5zdGFuY2VzID0gW107XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG4gKi9cblxuZXhwb3J0cy5uYW1lcyA9IFtdO1xuZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4vKipcbiAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cbiAqXG4gKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogU2VsZWN0IGEgY29sb3IuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcbiAgdmFyIGhhc2ggPSAwLCBpO1xuXG4gIGZvciAoaSBpbiBuYW1lc3BhY2UpIHtcbiAgICBoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGV4cG9ydHMuY29sb3JzLmxlbmd0aF07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXG4gIHZhciBwcmV2VGltZTtcblxuICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAvLyBkaXNhYmxlZD9cbiAgICBpZiAoIWRlYnVnLmVuYWJsZWQpIHJldHVybjtcblxuICAgIHZhciBzZWxmID0gZGVidWc7XG5cbiAgICAvLyBzZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICBzZWxmLmRpZmYgPSBtcztcbiAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgIHByZXZUaW1lID0gY3VycjtcblxuICAgIC8vIHR1cm4gdGhlIGBhcmd1bWVudHNgIGludG8gYSBwcm9wZXIgQXJyYXlcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgIGFyZ3MudW5zaGlmdCgnJU8nKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcbiAgICBleHBvcnRzLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuICAgIHZhciBsb2dGbiA9IGRlYnVnLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG5cbiAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBkZWJ1Zy5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gIGRlYnVnLnVzZUNvbG9ycyA9IGV4cG9ydHMudXNlQ29sb3JzKCk7XG4gIGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcbiAgZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cbiAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmluaXQpIHtcbiAgICBleHBvcnRzLmluaXQoZGVidWcpO1xuICB9XG5cbiAgZXhwb3J0cy5pbnN0YW5jZXMucHVzaChkZWJ1Zyk7XG5cbiAgcmV0dXJuIGRlYnVnO1xufVxuXG5mdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgdmFyIGluZGV4ID0gZXhwb3J0cy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIGV4cG9ydHMuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgZXhwb3J0cy5uYW1lcyA9IFtdO1xuICBleHBvcnRzLnNraXBzID0gW107XG5cbiAgdmFyIGk7XG4gIHZhciBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKCFzcGxpdFtpXSkgY29udGludWU7IC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG4gICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgZXhwb3J0cy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBleHBvcnRzLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpbnN0YW5jZSA9IGV4cG9ydHMuaW5zdGFuY2VzW2ldO1xuICAgIGluc3RhbmNlLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgZXhwb3J0cy5lbmFibGUoJycpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gIGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpLCBsZW47XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENvZXJjZSBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG4gIHJldHVybiB2YWw7XG59XG4iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICBpZiAobXMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtcyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XG4gICAgcGx1cmFsKG1zLCBoLCAnaG91cicpIHx8XG4gICAgcGx1cmFsKG1zLCBtLCAnbWludXRlJykgfHxcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxuICAgIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG4gIGlmIChtcyA8IG4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICB9XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgYmluYXJ5ID0gcmVxdWlyZSgnLi9iaW5hcnknKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xudmFyIGlzQnVmID0gcmVxdWlyZSgnLi9pcy1idWZmZXInKTtcblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IDQ7XG5cbi8qKlxuICogUGFja2V0IHR5cGVzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy50eXBlcyA9IFtcbiAgJ0NPTk5FQ1QnLFxuICAnRElTQ09OTkVDVCcsXG4gICdFVkVOVCcsXG4gICdBQ0snLFxuICAnRVJST1InLFxuICAnQklOQVJZX0VWRU5UJyxcbiAgJ0JJTkFSWV9BQ0snXG5dO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBjb25uZWN0YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQ09OTkVDVCA9IDA7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGRpc2Nvbm5lY3RgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5ESVNDT05ORUNUID0gMTtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgZXZlbnRgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5FVkVOVCA9IDI7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGFja2AuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkFDSyA9IDM7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGVycm9yYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRVJST1IgPSA0O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlICdiaW5hcnkgZXZlbnQnXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkJJTkFSWV9FVkVOVCA9IDU7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGJpbmFyeSBhY2tgLiBGb3IgYWNrcyB3aXRoIGJpbmFyeSBhcmd1bWVudHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkJJTkFSWV9BQ0sgPSA2O1xuXG4vKipcbiAqIEVuY29kZXIgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkVuY29kZXIgPSBFbmNvZGVyO1xuXG4vKipcbiAqIERlY29kZXIgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkRlY29kZXIgPSBEZWNvZGVyO1xuXG4vKipcbiAqIEEgc29ja2V0LmlvIEVuY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEVuY29kZXIoKSB7fVxuXG52YXIgRVJST1JfUEFDS0VUID0gZXhwb3J0cy5FUlJPUiArICdcImVuY29kZSBlcnJvclwiJztcblxuLyoqXG4gKiBFbmNvZGUgYSBwYWNrZXQgYXMgYSBzaW5nbGUgc3RyaW5nIGlmIG5vbi1iaW5hcnksIG9yIGFzIGFcbiAqIGJ1ZmZlciBzZXF1ZW5jZSwgZGVwZW5kaW5nIG9uIHBhY2tldCB0eXBlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSBwYWNrZXQgb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGhhbmRsZSBlbmNvZGluZ3MgKGxpa2VseSBlbmdpbmUud3JpdGUpXG4gKiBAcmV0dXJuIENhbGxzIGNhbGxiYWNrIHdpdGggQXJyYXkgb2YgZW5jb2RpbmdzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2spe1xuICBkZWJ1ZygnZW5jb2RpbmcgcGFja2V0ICVqJywgb2JqKTtcblxuICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IG9iai50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gb2JqLnR5cGUpIHtcbiAgICBlbmNvZGVBc0JpbmFyeShvYmosIGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZW5jb2RpbmcgPSBlbmNvZGVBc1N0cmluZyhvYmopO1xuICAgIGNhbGxiYWNrKFtlbmNvZGluZ10pO1xuICB9XG59O1xuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgYXMgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge1N0cmluZ30gZW5jb2RlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXNTdHJpbmcob2JqKSB7XG5cbiAgLy8gZmlyc3QgaXMgdHlwZVxuICB2YXIgc3RyID0gJycgKyBvYmoudHlwZTtcblxuICAvLyBhdHRhY2htZW50cyBpZiB3ZSBoYXZlIHRoZW1cbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBvYmoudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IG9iai50eXBlKSB7XG4gICAgc3RyICs9IG9iai5hdHRhY2htZW50cyArICctJztcbiAgfVxuXG4gIC8vIGlmIHdlIGhhdmUgYSBuYW1lc3BhY2Ugb3RoZXIgdGhhbiBgL2BcbiAgLy8gd2UgYXBwZW5kIGl0IGZvbGxvd2VkIGJ5IGEgY29tbWEgYCxgXG4gIGlmIChvYmoubnNwICYmICcvJyAhPT0gb2JqLm5zcCkge1xuICAgIHN0ciArPSBvYmoubnNwICsgJywnO1xuICB9XG5cbiAgLy8gaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgdGhlIGlkXG4gIGlmIChudWxsICE9IG9iai5pZCkge1xuICAgIHN0ciArPSBvYmouaWQ7XG4gIH1cblxuICAvLyBqc29uIGRhdGFcbiAgaWYgKG51bGwgIT0gb2JqLmRhdGEpIHtcbiAgICB2YXIgcGF5bG9hZCA9IHRyeVN0cmluZ2lmeShvYmouZGF0YSk7XG4gICAgaWYgKHBheWxvYWQgIT09IGZhbHNlKSB7XG4gICAgICBzdHIgKz0gcGF5bG9hZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEVSUk9SX1BBQ0tFVDtcbiAgICB9XG4gIH1cblxuICBkZWJ1ZygnZW5jb2RlZCAlaiBhcyAlcycsIG9iaiwgc3RyKTtcbiAgcmV0dXJuIHN0cjtcbn1cblxuZnVuY3Rpb24gdHJ5U3RyaW5naWZ5KHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdHIpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgYXMgJ2J1ZmZlciBzZXF1ZW5jZScgYnkgcmVtb3ZpbmcgYmxvYnMsIGFuZFxuICogZGVjb25zdHJ1Y3RpbmcgcGFja2V0IGludG8gb2JqZWN0IHdpdGggcGxhY2Vob2xkZXJzIGFuZFxuICogYSBsaXN0IG9mIGJ1ZmZlcnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7QnVmZmVyfSBlbmNvZGVkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBc0JpbmFyeShvYmosIGNhbGxiYWNrKSB7XG5cbiAgZnVuY3Rpb24gd3JpdGVFbmNvZGluZyhibG9ibGVzc0RhdGEpIHtcbiAgICB2YXIgZGVjb25zdHJ1Y3Rpb24gPSBiaW5hcnkuZGVjb25zdHJ1Y3RQYWNrZXQoYmxvYmxlc3NEYXRhKTtcbiAgICB2YXIgcGFjayA9IGVuY29kZUFzU3RyaW5nKGRlY29uc3RydWN0aW9uLnBhY2tldCk7XG4gICAgdmFyIGJ1ZmZlcnMgPSBkZWNvbnN0cnVjdGlvbi5idWZmZXJzO1xuXG4gICAgYnVmZmVycy51bnNoaWZ0KHBhY2spOyAvLyBhZGQgcGFja2V0IGluZm8gdG8gYmVnaW5uaW5nIG9mIGRhdGEgbGlzdFxuICAgIGNhbGxiYWNrKGJ1ZmZlcnMpOyAvLyB3cml0ZSBhbGwgdGhlIGJ1ZmZlcnNcbiAgfVxuXG4gIGJpbmFyeS5yZW1vdmVCbG9icyhvYmosIHdyaXRlRW5jb2RpbmcpO1xufVxuXG4vKipcbiAqIEEgc29ja2V0LmlvIERlY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IGRlY29kZXJcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gRGVjb2RlcigpIHtcbiAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgIHdpdGggRGVjb2Rlci5cbiAqL1xuXG5FbWl0dGVyKERlY29kZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBEZWNvZGVzIGFuIGVuY29kZWQgcGFja2V0IHN0cmluZyBpbnRvIHBhY2tldCBKU09OLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBvYmogLSBlbmNvZGVkIHBhY2tldFxuICogQHJldHVybiB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRGVjb2Rlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24ob2JqKSB7XG4gIHZhciBwYWNrZXQ7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuICAgIHBhY2tldCA9IGRlY29kZVN0cmluZyhvYmopO1xuICAgIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gcGFja2V0LnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBwYWNrZXQudHlwZSkgeyAvLyBiaW5hcnkgcGFja2V0J3MganNvblxuICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbmV3IEJpbmFyeVJlY29uc3RydWN0b3IocGFja2V0KTtcblxuICAgICAgLy8gbm8gYXR0YWNobWVudHMsIGxhYmVsZWQgYmluYXJ5IGJ1dCBubyBiaW5hcnkgZGF0YSB0byBmb2xsb3dcbiAgICAgIGlmICh0aGlzLnJlY29uc3RydWN0b3IucmVjb25QYWNrLmF0dGFjaG1lbnRzID09PSAwKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHsgLy8gbm9uLWJpbmFyeSBmdWxsIHBhY2tldFxuICAgICAgdGhpcy5lbWl0KCdkZWNvZGVkJywgcGFja2V0KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNCdWYob2JqKSB8fCBvYmouYmFzZTY0KSB7IC8vIHJhdyBiaW5hcnkgZGF0YVxuICAgIGlmICghdGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dvdCBiaW5hcnkgZGF0YSB3aGVuIG5vdCByZWNvbnN0cnVjdGluZyBhIHBhY2tldCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYWNrZXQgPSB0aGlzLnJlY29uc3RydWN0b3IudGFrZUJpbmFyeURhdGEob2JqKTtcbiAgICAgIGlmIChwYWNrZXQpIHsgLy8gcmVjZWl2ZWQgZmluYWwgYnVmZmVyXG4gICAgICAgIHRoaXMucmVjb25zdHJ1Y3RvciA9IG51bGw7XG4gICAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0eXBlOiAnICsgb2JqKTtcbiAgfVxufTtcblxuLyoqXG4gKiBEZWNvZGUgYSBwYWNrZXQgU3RyaW5nIChKU09OIGRhdGEpXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGRlY29kZVN0cmluZyhzdHIpIHtcbiAgdmFyIGkgPSAwO1xuICAvLyBsb29rIHVwIHR5cGVcbiAgdmFyIHAgPSB7XG4gICAgdHlwZTogTnVtYmVyKHN0ci5jaGFyQXQoMCkpXG4gIH07XG5cbiAgaWYgKG51bGwgPT0gZXhwb3J0cy50eXBlc1twLnR5cGVdKSB7XG4gICAgcmV0dXJuIGVycm9yKCd1bmtub3duIHBhY2tldCB0eXBlICcgKyBwLnR5cGUpO1xuICB9XG5cbiAgLy8gbG9vayB1cCBhdHRhY2htZW50cyBpZiB0eXBlIGJpbmFyeVxuICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IHAudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IHAudHlwZSkge1xuICAgIHZhciBzdGFydCA9IGkgKyAxO1xuICAgIHdoaWxlIChzdHIuY2hhckF0KCsraSkgIT09ICctJyAmJiBpICE9IHN0ci5sZW5ndGgpIHt9XG4gICAgdmFyIGJ1ZiA9IHN0ci5zdWJzdHJpbmcoc3RhcnQsIGkpO1xuICAgIGlmIChidWYgIT0gTnVtYmVyKGJ1ZikgfHwgc3RyLmNoYXJBdChpKSAhPT0gJy0nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lsbGVnYWwgYXR0YWNobWVudHMnKTtcbiAgICB9XG4gICAgcC5hdHRhY2htZW50cyA9IE51bWJlcihidWYpO1xuICB9XG5cbiAgLy8gbG9vayB1cCBuYW1lc3BhY2UgKGlmIGFueSlcbiAgaWYgKCcvJyA9PT0gc3RyLmNoYXJBdChpICsgMSkpIHtcbiAgICB2YXIgc3RhcnQgPSBpICsgMTtcbiAgICB3aGlsZSAoKytpKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAoJywnID09PSBjKSBicmVhaztcbiAgICAgIGlmIChpID09PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICB9XG4gICAgcC5uc3AgPSBzdHIuc3Vic3RyaW5nKHN0YXJ0LCBpKTtcbiAgfSBlbHNlIHtcbiAgICBwLm5zcCA9ICcvJztcbiAgfVxuXG4gIC8vIGxvb2sgdXAgaWRcbiAgdmFyIG5leHQgPSBzdHIuY2hhckF0KGkgKyAxKTtcbiAgaWYgKCcnICE9PSBuZXh0ICYmIE51bWJlcihuZXh0KSA9PSBuZXh0KSB7XG4gICAgdmFyIHN0YXJ0ID0gaSArIDE7XG4gICAgd2hpbGUgKCsraSkge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKG51bGwgPT0gYyB8fCBOdW1iZXIoYykgIT0gYykge1xuICAgICAgICAtLWk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgICBwLmlkID0gTnVtYmVyKHN0ci5zdWJzdHJpbmcoc3RhcnQsIGkgKyAxKSk7XG4gIH1cblxuICAvLyBsb29rIHVwIGpzb24gZGF0YVxuICBpZiAoc3RyLmNoYXJBdCgrK2kpKSB7XG4gICAgdmFyIHBheWxvYWQgPSB0cnlQYXJzZShzdHIuc3Vic3RyKGkpKTtcbiAgICB2YXIgaXNQYXlsb2FkVmFsaWQgPSBwYXlsb2FkICE9PSBmYWxzZSAmJiAocC50eXBlID09PSBleHBvcnRzLkVSUk9SIHx8IGlzQXJyYXkocGF5bG9hZCkpO1xuICAgIGlmIChpc1BheWxvYWRWYWxpZCkge1xuICAgICAgcC5kYXRhID0gcGF5bG9hZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVycm9yKCdpbnZhbGlkIHBheWxvYWQnKTtcbiAgICB9XG4gIH1cblxuICBkZWJ1ZygnZGVjb2RlZCAlcyBhcyAlaicsIHN0ciwgcCk7XG4gIHJldHVybiBwO1xufVxuXG5mdW5jdGlvbiB0cnlQYXJzZShzdHIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdHIpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIERlYWxsb2NhdGVzIGEgcGFyc2VyJ3MgcmVzb3VyY2VzXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5EZWNvZGVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICB0aGlzLnJlY29uc3RydWN0b3IuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpO1xuICB9XG59O1xuXG4vKipcbiAqIEEgbWFuYWdlciBvZiBhIGJpbmFyeSBldmVudCdzICdidWZmZXIgc2VxdWVuY2UnLiBTaG91bGRcbiAqIGJlIGNvbnN0cnVjdGVkIHdoZW5ldmVyIGEgcGFja2V0IG9mIHR5cGUgQklOQVJZX0VWRU5UIGlzXG4gKiBkZWNvZGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge0JpbmFyeVJlY29uc3RydWN0b3J9IGluaXRpYWxpemVkIHJlY29uc3RydWN0b3JcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIEJpbmFyeVJlY29uc3RydWN0b3IocGFja2V0KSB7XG4gIHRoaXMucmVjb25QYWNrID0gcGFja2V0O1xuICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBNZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gYmluYXJ5IGRhdGEgcmVjZWl2ZWQgZnJvbSBjb25uZWN0aW9uXG4gKiBhZnRlciBhIEJJTkFSWV9FVkVOVCBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtCdWZmZXIgfCBBcnJheUJ1ZmZlcn0gYmluRGF0YSAtIHRoZSByYXcgYmluYXJ5IGRhdGEgcmVjZWl2ZWRcbiAqIEByZXR1cm4ge251bGwgfCBPYmplY3R9IHJldHVybnMgbnVsbCBpZiBtb3JlIGJpbmFyeSBkYXRhIGlzIGV4cGVjdGVkIG9yXG4gKiAgIGEgcmVjb25zdHJ1Y3RlZCBwYWNrZXQgb2JqZWN0IGlmIGFsbCBidWZmZXJzIGhhdmUgYmVlbiByZWNlaXZlZC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkJpbmFyeVJlY29uc3RydWN0b3IucHJvdG90eXBlLnRha2VCaW5hcnlEYXRhID0gZnVuY3Rpb24oYmluRGF0YSkge1xuICB0aGlzLmJ1ZmZlcnMucHVzaChiaW5EYXRhKTtcbiAgaWYgKHRoaXMuYnVmZmVycy5sZW5ndGggPT09IHRoaXMucmVjb25QYWNrLmF0dGFjaG1lbnRzKSB7IC8vIGRvbmUgd2l0aCBidWZmZXIgbGlzdFxuICAgIHZhciBwYWNrZXQgPSBiaW5hcnkucmVjb25zdHJ1Y3RQYWNrZXQodGhpcy5yZWNvblBhY2ssIHRoaXMuYnVmZmVycyk7XG4gICAgdGhpcy5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gICAgcmV0dXJuIHBhY2tldDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbi8qKlxuICogQ2xlYW5zIHVwIGJpbmFyeSBwYWNrZXQgcmVjb25zdHJ1Y3Rpb24gdmFyaWFibGVzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkJpbmFyeVJlY29uc3RydWN0b3IucHJvdG90eXBlLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yZWNvblBhY2sgPSBudWxsO1xuICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbn07XG5cbmZ1bmN0aW9uIGVycm9yKG1zZykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IGV4cG9ydHMuRVJST1IsXG4gICAgZGF0YTogJ3BhcnNlciBlcnJvcjogJyArIG1zZ1xuICB9O1xufVxuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnIzAwMDBDQycsICcjMDAwMEZGJywgJyMwMDMzQ0MnLCAnIzAwMzNGRicsICcjMDA2NkNDJywgJyMwMDY2RkYnLCAnIzAwOTlDQycsXG4gICcjMDA5OUZGJywgJyMwMENDMDAnLCAnIzAwQ0MzMycsICcjMDBDQzY2JywgJyMwMENDOTknLCAnIzAwQ0NDQycsICcjMDBDQ0ZGJyxcbiAgJyMzMzAwQ0MnLCAnIzMzMDBGRicsICcjMzMzM0NDJywgJyMzMzMzRkYnLCAnIzMzNjZDQycsICcjMzM2NkZGJywgJyMzMzk5Q0MnLFxuICAnIzMzOTlGRicsICcjMzNDQzAwJywgJyMzM0NDMzMnLCAnIzMzQ0M2NicsICcjMzNDQzk5JywgJyMzM0NDQ0MnLCAnIzMzQ0NGRicsXG4gICcjNjYwMENDJywgJyM2NjAwRkYnLCAnIzY2MzNDQycsICcjNjYzM0ZGJywgJyM2NkNDMDAnLCAnIzY2Q0MzMycsICcjOTkwMENDJyxcbiAgJyM5OTAwRkYnLCAnIzk5MzNDQycsICcjOTkzM0ZGJywgJyM5OUNDMDAnLCAnIzk5Q0MzMycsICcjQ0MwMDAwJywgJyNDQzAwMzMnLFxuICAnI0NDMDA2NicsICcjQ0MwMDk5JywgJyNDQzAwQ0MnLCAnI0NDMDBGRicsICcjQ0MzMzAwJywgJyNDQzMzMzMnLCAnI0NDMzM2NicsXG4gICcjQ0MzMzk5JywgJyNDQzMzQ0MnLCAnI0NDMzNGRicsICcjQ0M2NjAwJywgJyNDQzY2MzMnLCAnI0NDOTkwMCcsICcjQ0M5OTMzJyxcbiAgJyNDQ0NDMDAnLCAnI0NDQ0MzMycsICcjRkYwMDAwJywgJyNGRjAwMzMnLCAnI0ZGMDA2NicsICcjRkYwMDk5JywgJyNGRjAwQ0MnLFxuICAnI0ZGMDBGRicsICcjRkYzMzAwJywgJyNGRjMzMzMnLCAnI0ZGMzM2NicsICcjRkYzMzk5JywgJyNGRjMzQ0MnLCAnI0ZGMzNGRicsXG4gICcjRkY2NjAwJywgJyNGRjY2MzMnLCAnI0ZGOTkwMCcsICcjRkY5OTMzJywgJyNGRkNDMDAnLCAnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnWydkZWZhdWx0J10gPSBjcmVhdGVEZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIEFjdGl2ZSBgZGVidWdgIGluc3RhbmNlcy5cbiAqL1xuZXhwb3J0cy5pbnN0YW5jZXMgPSBbXTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAqL1xuXG5leHBvcnRzLm5hbWVzID0gW107XG5leHBvcnRzLnNraXBzID0gW107XG5cbi8qKlxuICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICpcbiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMgPSB7fTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICB2YXIgaGFzaCA9IDAsIGk7XG5cbiAgZm9yIChpIGluIG5hbWVzcGFjZSkge1xuICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW01hdGguYWJzKGhhc2gpICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cbiAgdmFyIHByZXZUaW1lO1xuXG4gIGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgIC8vIGRpc2FibGVkP1xuICAgIGlmICghZGVidWcuZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgdmFyIHNlbGYgPSBkZWJ1ZztcblxuICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG4gICAgdmFyIGN1cnIgPSArbmV3IERhdGUoKTtcbiAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgcHJldlRpbWUgPSBjdXJyO1xuXG4gICAgLy8gdHVybiB0aGUgYGFyZ3VtZW50c2AgaW50byBhIHByb3BlciBBcnJheVxuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBhcmdzWzBdID0gZXhwb3J0cy5jb2VyY2UoYXJnc1swXSk7XG5cbiAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBhcmdzWzBdKSB7XG4gICAgICAvLyBhbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuICAgICAgYXJncy51bnNoaWZ0KCclTycpO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgZnVuY3Rpb24obWF0Y2gsIGZvcm1hdCkge1xuICAgICAgLy8gaWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSByZXR1cm4gbWF0Y2g7XG4gICAgICBpbmRleCsrO1xuICAgICAgdmFyIGZvcm1hdHRlciA9IGV4cG9ydHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmb3JtYXR0ZXIpIHtcbiAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cbiAgICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICAvLyBhcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuICAgIGV4cG9ydHMuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG4gICAgdmFyIGxvZ0ZuID0gZGVidWcubG9nIHx8IGV4cG9ydHMubG9nIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG4gICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gIH1cblxuICBkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gIGRlYnVnLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKTtcbiAgZGVidWcudXNlQ29sb3JzID0gZXhwb3J0cy51c2VDb2xvcnMoKTtcbiAgZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuICBkZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblxuICAvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuaW5pdCkge1xuICAgIGV4cG9ydHMuaW5pdChkZWJ1Zyk7XG4gIH1cblxuICBleHBvcnRzLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcblxuICByZXR1cm4gZGVidWc7XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICB2YXIgaW5kZXggPSBleHBvcnRzLmluc3RhbmNlcy5pbmRleE9mKHRoaXMpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgZXhwb3J0cy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gIGV4cG9ydHMuc2F2ZShuYW1lc3BhY2VzKTtcblxuICBleHBvcnRzLm5hbWVzID0gW107XG4gIGV4cG9ydHMuc2tpcHMgPSBbXTtcblxuICB2YXIgaTtcbiAgdmFyIHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgdmFyIGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIXNwbGl0W2ldKSBjb250aW51ZTsgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcbiAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGV4cG9ydHMuaW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGluc3RhbmNlID0gZXhwb3J0cy5pbnN0YW5jZXNbaV07XG4gICAgaW5zdGFuY2UuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuICB9XG59XG5cbi8qKlxuICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBleHBvcnRzLmVuYWJsZSgnJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgaWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGksIGxlbjtcbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgeSA9IGQgKiAzNjUuMjU7XG5cbi8qKlxuICogUGFyc2Ugb3IgZm9ybWF0IHRoZSBnaXZlbiBgdmFsYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICAtIGBsb25nYCB2ZXJib3NlIGZvcm1hdHRpbmcgW2ZhbHNlXVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gdmFsXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAdGhyb3dzIHtFcnJvcn0gdGhyb3cgYW4gZXJyb3IgaWYgdmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSBudW1iZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIGlmIChtcyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtcyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICByZXR1cm4gcGx1cmFsKG1zLCBkLCAnZGF5JykgfHxcbiAgICBwbHVyYWwobXMsIGgsICdob3VyJykgfHxcbiAgICBwbHVyYWwobXMsIG0sICdtaW51dGUnKSB8fFxuICAgIHBsdXJhbChtcywgcywgJ3NlY29uZCcpIHx8XG4gICAgbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG4sIG5hbWUpIHtcbiAgaWYgKG1zIDwgbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAobXMgPCBuICogMS41KSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBuKSArICcgJyArIG5hbWU7XG4gIH1cbiAgcmV0dXJuIE1hdGguY2VpbChtcyAvIG4pICsgJyAnICsgbmFtZSArICdzJztcbn1cbiIsIlxyXG4vKipcclxuICogRXhwb3NlIGBFbWl0dGVyYC5cclxuICovXHJcblxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICBtb2R1bGUuZXhwb3J0cyA9IEVtaXR0ZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIGEgbmV3IGBFbWl0dGVyYC5cclxuICpcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5mdW5jdGlvbiBFbWl0dGVyKG9iaikge1xyXG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1peGluIHRoZSBlbWl0dGVyIHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5mdW5jdGlvbiBtaXhpbihvYmopIHtcclxuICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHtcclxuICAgIG9ialtrZXldID0gRW1pdHRlci5wcm90b3R5cGVba2V5XTtcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuLyoqXHJcbiAqIExpc3RlbiBvbiB0aGUgZ2l2ZW4gYGV2ZW50YCB3aXRoIGBmbmAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uID1cclxuRW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gICh0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXSlcclxuICAgIC5wdXNoKGZuKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGVcclxuICogdGltZSB0aGVuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgZnVuY3Rpb24gb24oKSB7XHJcbiAgICB0aGlzLm9mZihldmVudCwgb24pO1xyXG4gICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICB9XHJcblxyXG4gIG9uLmZuID0gZm47XHJcbiAgdGhpcy5vbihldmVudCwgb24pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsXHJcbiAqIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vZmYgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuXHJcbiAgLy8gYWxsXHJcbiAgaWYgKDAgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgdGhpcy5fY2FsbGJhY2tzID0ge307XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHNwZWNpZmljIGV2ZW50XHJcbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgaWYgKCFjYWxsYmFja3MpIHJldHVybiB0aGlzO1xyXG5cclxuICAvLyByZW1vdmUgYWxsIGhhbmRsZXJzXHJcbiAgaWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHJlbW92ZSBzcGVjaWZpYyBoYW5kbGVyXHJcbiAgdmFyIGNiO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjYiA9IGNhbGxiYWNrc1tpXTtcclxuICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XHJcbiAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUmVtb3ZlIGV2ZW50IHNwZWNpZmljIGFycmF5cyBmb3IgZXZlbnQgdHlwZXMgdGhhdCBub1xyXG4gIC8vIG9uZSBpcyBzdWJzY3JpYmVkIGZvciB0byBhdm9pZCBtZW1vcnkgbGVhay5cclxuICBpZiAoY2FsbGJhY2tzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBFbWl0IGBldmVudGAgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7TWl4ZWR9IC4uLlxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG5cclxuICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSlcclxuICAgICwgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuXHJcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xyXG4gIH1cclxuXHJcbiAgaWYgKGNhbGxiYWNrcykge1xyXG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gYXJyYXkgb2YgY2FsbGJhY2tzIGZvciBgZXZlbnRgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB0aGlzIGVtaXR0ZXIgaGFzIGBldmVudGAgaGFuZGxlcnMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICByZXR1cm4gISEgdGhpcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aDtcclxufTtcclxuIiwiLypnbG9iYWwgQmxvYixGaWxlKi9cblxuLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzXG4gKi9cblxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG52YXIgaXNCdWYgPSByZXF1aXJlKCcuL2lzLWJ1ZmZlcicpO1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciB3aXRoTmF0aXZlQmxvYiA9IHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChCbG9iKSA9PT0gJ1tvYmplY3QgQmxvYkNvbnN0cnVjdG9yXScpO1xudmFyIHdpdGhOYXRpdmVGaWxlID0gdHlwZW9mIEZpbGUgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBGaWxlICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEZpbGUpID09PSAnW29iamVjdCBGaWxlQ29uc3RydWN0b3JdJyk7XG5cbi8qKlxuICogUmVwbGFjZXMgZXZlcnkgQnVmZmVyIHwgQXJyYXlCdWZmZXIgaW4gcGFja2V0IHdpdGggYSBudW1iZXJlZCBwbGFjZWhvbGRlci5cbiAqIEFueXRoaW5nIHdpdGggYmxvYnMgb3IgZmlsZXMgc2hvdWxkIGJlIGZlZCB0aHJvdWdoIHJlbW92ZUJsb2JzIGJlZm9yZSBjb21pbmdcbiAqIGhlcmUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIHNvY2tldC5pbyBldmVudCBwYWNrZXRcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBkZWNvbnN0cnVjdGVkIHBhY2tldCBhbmQgbGlzdCBvZiBidWZmZXJzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZGVjb25zdHJ1Y3RQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQpIHtcbiAgdmFyIGJ1ZmZlcnMgPSBbXTtcbiAgdmFyIHBhY2tldERhdGEgPSBwYWNrZXQuZGF0YTtcbiAgdmFyIHBhY2sgPSBwYWNrZXQ7XG4gIHBhY2suZGF0YSA9IF9kZWNvbnN0cnVjdFBhY2tldChwYWNrZXREYXRhLCBidWZmZXJzKTtcbiAgcGFjay5hdHRhY2htZW50cyA9IGJ1ZmZlcnMubGVuZ3RoOyAvLyBudW1iZXIgb2YgYmluYXJ5ICdhdHRhY2htZW50cydcbiAgcmV0dXJuIHtwYWNrZXQ6IHBhY2ssIGJ1ZmZlcnM6IGJ1ZmZlcnN9O1xufTtcblxuZnVuY3Rpb24gX2RlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcbiAgaWYgKCFkYXRhKSByZXR1cm4gZGF0YTtcblxuICBpZiAoaXNCdWYoZGF0YSkpIHtcbiAgICB2YXIgcGxhY2Vob2xkZXIgPSB7IF9wbGFjZWhvbGRlcjogdHJ1ZSwgbnVtOiBidWZmZXJzLmxlbmd0aCB9O1xuICAgIGJ1ZmZlcnMucHVzaChkYXRhKTtcbiAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhKSkge1xuICAgIHZhciBuZXdEYXRhID0gbmV3IEFycmF5KGRhdGEubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5ld0RhdGFbaV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSwgYnVmZmVycyk7XG4gICAgfVxuICAgIHJldHVybiBuZXdEYXRhO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiAhKGRhdGEgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgIHZhciBuZXdEYXRhID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgIG5ld0RhdGFba2V5XSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RGF0YTtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBSZWNvbnN0cnVjdHMgYSBiaW5hcnkgcGFja2V0IGZyb20gaXRzIHBsYWNlaG9sZGVyIHBhY2tldCBhbmQgYnVmZmVyc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBldmVudCBwYWNrZXQgd2l0aCBwbGFjZWhvbGRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IGJ1ZmZlcnMgLSBiaW5hcnkgYnVmZmVycyB0byBwdXQgaW4gcGxhY2Vob2xkZXIgcG9zaXRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY29uc3RydWN0ZWQgcGFja2V0XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMucmVjb25zdHJ1Y3RQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQsIGJ1ZmZlcnMpIHtcbiAgcGFja2V0LmRhdGEgPSBfcmVjb25zdHJ1Y3RQYWNrZXQocGFja2V0LmRhdGEsIGJ1ZmZlcnMpO1xuICBwYWNrZXQuYXR0YWNobWVudHMgPSB1bmRlZmluZWQ7IC8vIG5vIGxvbmdlciB1c2VmdWxcbiAgcmV0dXJuIHBhY2tldDtcbn07XG5cbmZ1bmN0aW9uIF9yZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gIGlmICghZGF0YSkgcmV0dXJuIGRhdGE7XG5cbiAgaWYgKGRhdGEgJiYgZGF0YS5fcGxhY2Vob2xkZXIpIHtcbiAgICByZXR1cm4gYnVmZmVyc1tkYXRhLm51bV07IC8vIGFwcHJvcHJpYXRlIGJ1ZmZlciAoc2hvdWxkIGJlIG5hdHVyYWwgb3JkZXIgYW55d2F5KVxuICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRhdGFbaV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSwgYnVmZmVycyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0Jykge1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICBkYXRhW2tleV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBBc3luY2hyb25vdXNseSByZW1vdmVzIEJsb2JzIG9yIEZpbGVzIGZyb20gZGF0YSB2aWFcbiAqIEZpbGVSZWFkZXIncyByZWFkQXNBcnJheUJ1ZmZlciBtZXRob2QuIFVzZWQgYmVmb3JlIGVuY29kaW5nXG4gKiBkYXRhIGFzIG1zZ3BhY2suIENhbGxzIGNhbGxiYWNrIHdpdGggdGhlIGJsb2JsZXNzIGRhdGEuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLnJlbW92ZUJsb2JzID0gZnVuY3Rpb24oZGF0YSwgY2FsbGJhY2spIHtcbiAgZnVuY3Rpb24gX3JlbW92ZUJsb2JzKG9iaiwgY3VyS2V5LCBjb250YWluaW5nT2JqZWN0KSB7XG4gICAgaWYgKCFvYmopIHJldHVybiBvYmo7XG5cbiAgICAvLyBjb252ZXJ0IGFueSBibG9iXG4gICAgaWYgKCh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICAgICAod2l0aE5hdGl2ZUZpbGUgJiYgb2JqIGluc3RhbmNlb2YgRmlsZSkpIHtcbiAgICAgIHBlbmRpbmdCbG9icysrO1xuXG4gICAgICAvLyBhc3luYyBmaWxlcmVhZGVyXG4gICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkgeyAvLyB0aGlzLnJlc3VsdCA9PSBhcnJheWJ1ZmZlclxuICAgICAgICBpZiAoY29udGFpbmluZ09iamVjdCkge1xuICAgICAgICAgIGNvbnRhaW5pbmdPYmplY3RbY3VyS2V5XSA9IHRoaXMucmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGJsb2JsZXNzRGF0YSA9IHRoaXMucmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgbm90aGluZyBwZW5kaW5nIGl0cyBjYWxsYmFjayB0aW1lXG4gICAgICAgIGlmKCEgLS1wZW5kaW5nQmxvYnMpIHtcbiAgICAgICAgICBjYWxsYmFjayhibG9ibGVzc0RhdGEpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKG9iaik7IC8vIGJsb2IgLT4gYXJyYXlidWZmZXJcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqKSkgeyAvLyBoYW5kbGUgYXJyYXlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIF9yZW1vdmVCbG9icyhvYmpbaV0sIGksIG9iaik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAhaXNCdWYob2JqKSkgeyAvLyBhbmQgb2JqZWN0XG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgIF9yZW1vdmVCbG9icyhvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBwZW5kaW5nQmxvYnMgPSAwO1xuICB2YXIgYmxvYmxlc3NEYXRhID0gZGF0YTtcbiAgX3JlbW92ZUJsb2JzKGJsb2JsZXNzRGF0YSk7XG4gIGlmICghcGVuZGluZ0Jsb2JzKSB7XG4gICAgY2FsbGJhY2soYmxvYmxlc3NEYXRhKTtcbiAgfVxufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmO1xuXG52YXIgd2l0aE5hdGl2ZUJ1ZmZlciA9IHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIEJ1ZmZlci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJztcbnZhciB3aXRoTmF0aXZlQXJyYXlCdWZmZXIgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbic7XG5cbnZhciBpc1ZpZXcgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nID8gQXJyYXlCdWZmZXIuaXNWaWV3KG9iaikgOiAob2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iaiBpcyBhIGJ1ZmZlciBvciBhbiBhcnJheWJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc0J1ZihvYmopIHtcbiAgcmV0dXJuICh3aXRoTmF0aXZlQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB8fFxuICAgICAgICAgICh3aXRoTmF0aXZlQXJyYXlCdWZmZXIgJiYgKG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IGlzVmlldyhvYmopKSk7XG59XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxuY29uc3QgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxuY29uc3QgY3VzdG9tSW5zcGVjdFN5bWJvbCA9XG4gICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2xbJ2ZvciddID09PSAnZnVuY3Rpb24nKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgID8gU3ltYm9sWydmb3InXSgnbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgIDogbnVsbFxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbmNvbnN0IEtfTUFYX0xFTkdUSCA9IDB4N2ZmZmZmZmZcbmV4cG9ydHMua01heExlbmd0aCA9IEtfTUFYX0xFTkdUSFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBQcmludCB3YXJuaW5nIGFuZCByZWNvbW1lbmQgdXNpbmcgYGJ1ZmZlcmAgdjQueCB3aGljaCBoYXMgYW4gT2JqZWN0XG4gKiAgICAgICAgICAgICAgIGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBXZSByZXBvcnQgdGhhdCB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBpZiB0aGUgYXJlIG5vdCBzdWJjbGFzc2FibGVcbiAqIHVzaW5nIF9fcHJvdG9fXy4gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWBcbiAqIChTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOCkuIElFIDEwIGxhY2tzIHN1cHBvcnRcbiAqIGZvciBfX3Byb3RvX18gYW5kIGhhcyBhIGJ1Z2d5IHR5cGVkIGFycmF5IGltcGxlbWVudGF0aW9uLlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IHR5cGVkQXJyYXlTdXBwb3J0KClcblxuaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICBjb25zb2xlLmVycm9yKFxuICAgICdUaGlzIGJyb3dzZXIgbGFja3MgdHlwZWQgYXJyYXkgKFVpbnQ4QXJyYXkpIHN1cHBvcnQgd2hpY2ggaXMgcmVxdWlyZWQgYnkgJyArXG4gICAgJ2BidWZmZXJgIHY1LnguIFVzZSBgYnVmZmVyYCB2NC54IGlmIHlvdSByZXF1aXJlIG9sZCBicm93c2VyIHN1cHBvcnQuJ1xuICApXG59XG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgLy8gQ2FuIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkP1xuICB0cnkge1xuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgY29uc3QgcHJvdG8gPSB7IGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfSB9XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHByb3RvLCBVaW50OEFycmF5LnByb3RvdHlwZSlcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYXJyLCBwcm90bylcbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MlxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdwYXJlbnQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyXG4gIH1cbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAnb2Zmc2V0Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmJ5dGVPZmZzZXRcbiAgfVxufSlcblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKGxlbmd0aCA+IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgbGVuZ3RoICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpXG4gIH1cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgY29uc3QgYnVmID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYnVmLCBCdWZmZXIucHJvdG90eXBlKVxuICByZXR1cm4gYnVmXG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBzdHJpbmcuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUoYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuZnVuY3Rpb24gZnJvbSAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5Vmlldyh2YWx1ZSlcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCAnICtcbiAgICAgICdvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB2YWx1ZSlcbiAgICApXG4gIH1cblxuICBpZiAoaXNJbnN0YW5jZSh2YWx1ZSwgQXJyYXlCdWZmZXIpIHx8XG4gICAgICAodmFsdWUgJiYgaXNJbnN0YW5jZSh2YWx1ZS5idWZmZXIsIEFycmF5QnVmZmVyKSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgKGlzSW5zdGFuY2UodmFsdWUsIFNoYXJlZEFycmF5QnVmZmVyKSB8fFxuICAgICAgKHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBTaGFyZWRBcnJheUJ1ZmZlcikpKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG9mIHR5cGUgbnVtYmVyLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICApXG4gIH1cblxuICBjb25zdCB2YWx1ZU9mID0gdmFsdWUudmFsdWVPZiAmJiB2YWx1ZS52YWx1ZU9mKClcbiAgaWYgKHZhbHVlT2YgIT0gbnVsbCAmJiB2YWx1ZU9mICE9PSB2YWx1ZSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZU9mLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBjb25zdCBiID0gZnJvbU9iamVjdCh2YWx1ZSlcbiAgaWYgKGIpIHJldHVybiBiXG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1ByaW1pdGl2ZSAhPSBudWxsICYmXG4gICAgICB0eXBlb2YgdmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZVtTeW1ib2wudG9QcmltaXRpdmVdKCdzdHJpbmcnKSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgJ29yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHZhbHVlKVxuICApXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gTm90ZTogQ2hhbmdlIHByb3RvdHlwZSAqYWZ0ZXIqIEJ1ZmZlci5mcm9tIGlzIGRlZmluZWQgdG8gd29ya2Fyb3VuZCBDaHJvbWUgYnVnOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC8xNDhcbk9iamVjdC5zZXRQcm90b3R5cGVPZihCdWZmZXIucHJvdG90eXBlLCBVaW50OEFycmF5LnByb3RvdHlwZSlcbk9iamVjdC5zZXRQcm90b3R5cGVPZihCdWZmZXIsIFVpbnQ4QXJyYXkpXG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBzaXplICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2Moc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlIChzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgfVxuXG4gIGNvbnN0IGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIGxldCBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuXG4gIGNvbnN0IGFjdHVhbCA9IGJ1Zi53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgYnVmID0gYnVmLnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAoYXJyYXkpIHtcbiAgY29uc3QgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIGNvbnN0IGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICBidWZbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5VmlldyAoYXJyYXlWaWV3KSB7XG4gIGlmIChpc0luc3RhbmNlKGFycmF5VmlldywgVWludDhBcnJheSkpIHtcbiAgICBjb25zdCBjb3B5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlWaWV3KVxuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIoY29weS5idWZmZXIsIGNvcHkuYnl0ZU9mZnNldCwgY29weS5ieXRlTGVuZ3RoKVxuICB9XG4gIHJldHVybiBmcm9tQXJyYXlMaWtlKGFycmF5Vmlldylcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyIChhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcIm9mZnNldFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wibGVuZ3RoXCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGxldCBidWZcbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihidWYsIEJ1ZmZlci5wcm90b3R5cGUpXG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0IChvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgY29uc3QgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICBjb25zdCBidWYgPSBjcmVhdGVCdWZmZXIobGVuKVxuXG4gICAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBidWZcbiAgICB9XG5cbiAgICBvYmouY29weShidWYsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gYnVmXG4gIH1cblxuICBpZiAob2JqLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBudW1iZXJJc05hTihvYmoubGVuZ3RoKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcigwKVxuICAgIH1cbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmopXG4gIH1cblxuICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIEFycmF5LmlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqLmRhdGEpXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IEtfTUFYX0xFTkdUSGAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsgS19NQVhfTEVOR1RILnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyID09PSB0cnVlICYmXG4gICAgYiAhPT0gQnVmZmVyLnByb3RvdHlwZSAvLyBzbyBCdWZmZXIuaXNCdWZmZXIoQnVmZmVyLnByb3RvdHlwZSkgd2lsbCBiZSBmYWxzZVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKGlzSW5zdGFuY2UoYSwgVWludDhBcnJheSkpIGEgPSBCdWZmZXIuZnJvbShhLCBhLm9mZnNldCwgYS5ieXRlTGVuZ3RoKVxuICBpZiAoaXNJbnN0YW5jZShiLCBVaW50OEFycmF5KSkgYiA9IEJ1ZmZlci5mcm9tKGIsIGIub2Zmc2V0LCBiLmJ5dGVMZW5ndGgpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcImJ1ZjFcIiwgXCJidWYyXCIgYXJndW1lbnRzIG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXknXG4gICAgKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgbGV0IHggPSBhLmxlbmd0aFxuICBsZXQgeSA9IGIubGVuZ3RoXG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICBsZXQgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIGxldCBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgbGV0IGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoaXNJbnN0YW5jZShidWYsIFVpbnQ4QXJyYXkpKSB7XG4gICAgICBpZiAocG9zICsgYnVmLmxlbmd0aCA+IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgYnVmID0gQnVmZmVyLmZyb20oYnVmKVxuICAgICAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgICAgIGJ1ZmZlcixcbiAgICAgICAgICBidWYsXG4gICAgICAgICAgcG9zXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgfVxuICAgIHBvcyArPSBidWYubGVuZ3RoXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IGlzSW5zdGFuY2Uoc3RyaW5nLCBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIG9yIEFycmF5QnVmZmVyLiAnICtcbiAgICAgICdSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2Ygc3RyaW5nXG4gICAgKVxuICB9XG5cbiAgY29uc3QgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBjb25zdCBtdXN0TWF0Y2ggPSAoYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdID09PSB0cnVlKVxuICBpZiAoIW11c3RNYXRjaCAmJiBsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIGxldCBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHtcbiAgICAgICAgICByZXR1cm4gbXVzdE1hdGNoID8gLTEgOiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICB9XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICBsZXQgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcmNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIChhbmQgdGhlIGBpcy1idWZmZXJgIG5wbSBwYWNrYWdlKVxuLy8gdG8gZGV0ZWN0IGEgQnVmZmVyIGluc3RhbmNlLiBJdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgYGluc3RhbmNlb2YgQnVmZmVyYFxuLy8gcmVsaWFibHkgaW4gYSBicm93c2VyaWZ5IGNvbnRleHQgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBtdWx0aXBsZSBkaWZmZXJlbnRcbi8vIGNvcGllcyBvZiB0aGUgJ2J1ZmZlcicgcGFja2FnZSBpbiB1c2UuIFRoaXMgbWV0aG9kIHdvcmtzIGV2ZW4gZm9yIEJ1ZmZlclxuLy8gaW5zdGFuY2VzIHRoYXQgd2VyZSBjcmVhdGVkIGZyb20gYW5vdGhlciBjb3B5IG9mIHRoZSBgYnVmZmVyYCBwYWNrYWdlLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTU0XG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICBjb25zdCBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIGNvbnN0IGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIGNvbnN0IGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIGNvbnN0IGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICBjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZyA9IEJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmdcblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICBsZXQgc3RyID0gJydcbiAgY29uc3QgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLnJlcGxhY2UoLyguezJ9KS9nLCAnJDEgJykudHJpbSgpXG4gIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cbmlmIChjdXN0b21JbnNwZWN0U3ltYm9sKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGVbY3VzdG9tSW5zcGVjdFN5bWJvbF0gPSBCdWZmZXIucHJvdG90eXBlLmluc3BlY3Rcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKGlzSW5zdGFuY2UodGFyZ2V0LCBVaW50OEFycmF5KSkge1xuICAgIHRhcmdldCA9IEJ1ZmZlci5mcm9tKHRhcmdldCwgdGFyZ2V0Lm9mZnNldCwgdGFyZ2V0LmJ5dGVMZW5ndGgpXG4gIH1cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwidGFyZ2V0XCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheS4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB0YXJnZXQpXG4gICAgKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgbGV0IHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIGxldCB5ID0gZW5kIC0gc3RhcnRcbiAgY29uc3QgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICBjb25zdCB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICBjb25zdCB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAobnVtYmVySXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmICh0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbdmFsXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgbGV0IGluZGV4U2l6ZSA9IDFcbiAgbGV0IGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgbGV0IHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgbGV0IGlcbiAgaWYgKGRpcikge1xuICAgIGxldCBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGxldCBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgY29uc3QgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgY29uc3Qgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGxldCBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAobnVtYmVySXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA+Pj4gMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIGNvbnN0IHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgbGV0IGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICBjb25zdCByZXMgPSBbXVxuXG4gIGxldCBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICBjb25zdCBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICBsZXQgY29kZVBvaW50ID0gbnVsbFxuICAgIGxldCBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpXG4gICAgICA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpXG4gICAgICAgICAgPyAzXG4gICAgICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRilcbiAgICAgICAgICAgICAgPyAyXG4gICAgICAgICAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgbGV0IHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxuY29uc3QgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIGNvbnN0IGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgbGV0IHJlcyA9ICcnXG4gIGxldCBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBsZXQgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgY29uc3QgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIGxldCBvdXQgPSAnJ1xuICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSBoZXhTbGljZUxvb2t1cFRhYmxlW2J1ZltpXV1cbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGNvbnN0IGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIGxldCByZXMgPSAnJ1xuICAvLyBJZiBieXRlcy5sZW5ndGggaXMgb2RkLCB0aGUgbGFzdCA4IGJpdHMgbXVzdCBiZSBpZ25vcmVkIChzYW1lIGFzIG5vZGUuanMpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoIC0gMTsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyAoYnl0ZXNbaSArIDFdICogMjU2KSlcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIGNvbnN0IG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKG5ld0J1ZiwgQnVmZmVyLnByb3RvdHlwZSlcblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50TEUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICBsZXQgdmFsID0gdGhpc1tvZmZzZXRdXG4gIGxldCBtdWwgPSAxXG4gIGxldCBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnRCRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgbGV0IG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50OCA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MTZMRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQxNkJFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDMyTEUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MzJCRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRCaWdVSW50NjRMRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnVUludDY0TEUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCBsbyA9IGZpcnN0ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjRcblxuICBjb25zdCBoaSA9IHRoaXNbKytvZmZzZXRdICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICBsYXN0ICogMiAqKiAyNFxuXG4gIHJldHVybiBCaWdJbnQobG8pICsgKEJpZ0ludChoaSkgPDwgQmlnSW50KDMyKSlcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ1VJbnQ2NEJFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHJlYWRCaWdVSW50NjRCRSAob2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBjb25zdCBmaXJzdCA9IHRoaXNbb2Zmc2V0XVxuICBjb25zdCBsYXN0ID0gdGhpc1tvZmZzZXQgKyA3XVxuICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIHRoaXMubGVuZ3RoIC0gOClcbiAgfVxuXG4gIGNvbnN0IGhpID0gZmlyc3QgKiAyICoqIDI0ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XVxuXG4gIGNvbnN0IGxvID0gdGhpc1srK29mZnNldF0gKiAyICoqIDI0ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICBsYXN0XG5cbiAgcmV0dXJuIChCaWdJbnQoaGkpIDw8IEJpZ0ludCgzMikpICsgQmlnSW50KGxvKVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0XVxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIGxldCBpID0gYnl0ZUxlbmd0aFxuICBsZXQgbXVsID0gMVxuICBsZXQgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgY29uc3QgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRCaWdJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHJlYWRCaWdJbnQ2NExFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgdmFsID0gdGhpc1tvZmZzZXQgKyA0XSArXG4gICAgdGhpc1tvZmZzZXQgKyA1XSAqIDIgKiogOCArXG4gICAgdGhpc1tvZmZzZXQgKyA2XSAqIDIgKiogMTYgK1xuICAgIChsYXN0IDw8IDI0KSAvLyBPdmVyZmxvd1xuXG4gIHJldHVybiAoQmlnSW50KHZhbCkgPDwgQmlnSW50KDMyKSkgK1xuICAgIEJpZ0ludChmaXJzdCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDI0KVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnSW50NjRCRSAob2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBjb25zdCBmaXJzdCA9IHRoaXNbb2Zmc2V0XVxuICBjb25zdCBsYXN0ID0gdGhpc1tvZmZzZXQgKyA3XVxuICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIHRoaXMubGVuZ3RoIC0gOClcbiAgfVxuXG4gIGNvbnN0IHZhbCA9IChmaXJzdCA8PCAyNCkgKyAvLyBPdmVyZmxvd1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdXG5cbiAgcmV0dXJuIChCaWdJbnQodmFsKSA8PCBCaWdJbnQoMzIpKSArXG4gICAgQmlnSW50KHRoaXNbKytvZmZzZXRdICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgbGFzdClcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludExFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjb25zdCBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIGxldCBtdWwgPSAxXG4gIGxldCBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50QkUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNvbnN0IG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgbGV0IGkgPSBieXRlTGVuZ3RoIC0gMVxuICBsZXQgbXVsID0gMVxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQ4ID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDE2TEUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQxNkJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MzJMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDMyQkUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gd3J0QmlnVUludDY0TEUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbWluLCBtYXgpIHtcbiAgY2hlY2tJbnRCSSh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCA3KVxuXG4gIGxldCBsbyA9IE51bWJlcih2YWx1ZSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCsrXSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGxvXG4gIGxldCBoaSA9IE51bWJlcih2YWx1ZSA+PiBCaWdJbnQoMzIpICYgQmlnSW50KDB4ZmZmZmZmZmYpKVxuICBidWZbb2Zmc2V0KytdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0KytdID0gaGlcbiAgcmV0dXJuIG9mZnNldFxufVxuXG5mdW5jdGlvbiB3cnRCaWdVSW50NjRCRSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBtaW4sIG1heCkge1xuICBjaGVja0ludEJJKHZhbHVlLCBtaW4sIG1heCwgYnVmLCBvZmZzZXQsIDcpXG5cbiAgbGV0IGxvID0gTnVtYmVyKHZhbHVlICYgQmlnSW50KDB4ZmZmZmZmZmYpKVxuICBidWZbb2Zmc2V0ICsgN10gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCArIDZdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQgKyA1XSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0ICsgNF0gPSBsb1xuICBsZXQgaGkgPSBOdW1iZXIodmFsdWUgPj4gQmlnSW50KDMyKSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCArIDNdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQgKyAyXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0ICsgMV0gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldF0gPSBoaVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnVUludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdVSW50NjRMRSAodmFsdWUsIG9mZnNldCA9IDApIHtcbiAgcmV0dXJuIHdydEJpZ1VJbnQ2NExFKHRoaXMsIHZhbHVlLCBvZmZzZXQsIEJpZ0ludCgwKSwgQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVCaWdVSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiB3cml0ZUJpZ1VJbnQ2NEJFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0QkUodGhpcywgdmFsdWUsIG9mZnNldCwgQmlnSW50KDApLCBCaWdJbnQoJzB4ZmZmZmZmZmZmZmZmZmZmZicpKVxufSlcblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjb25zdCBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICBsZXQgaSA9IDBcbiAgbGV0IG11bCA9IDFcbiAgbGV0IHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjb25zdCBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICBsZXQgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIGxldCBtdWwgPSAxXG4gIGxldCBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnSW50NjRMRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiB3cml0ZUJpZ0ludDY0TEUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRMRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAtQmlnSW50KCcweDgwMDAwMDAwMDAwMDAwMDAnKSwgQmlnSW50KCcweDdmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVCaWdJbnQ2NEJFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnSW50NjRCRSAodmFsdWUsIG9mZnNldCA9IDApIHtcbiAgcmV0dXJuIHdydEJpZ1VJbnQ2NEJFKHRoaXMsIHZhbHVlLCBvZmZzZXQsIC1CaWdJbnQoJzB4ODAwMDAwMDAwMDAwMDAwMCcpLCBCaWdJbnQoJzB4N2ZmZmZmZmZmZmZmZmZmZicpKVxufSlcblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgc2hvdWxkIGJlIGEgQnVmZmVyJylcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIGNvbnN0IGxlbiA9IGVuZCAtIHN0YXJ0XG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFVzZSBidWlsdC1pbiB3aGVuIGF2YWlsYWJsZSwgbWlzc2luZyBmcm9tIElFMTFcbiAgICB0aGlzLmNvcHlXaXRoaW4odGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpXG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgY29uc3QgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoKGVuY29kaW5nID09PSAndXRmOCcgJiYgY29kZSA8IDEyOCkgfHxcbiAgICAgICAgICBlbmNvZGluZyA9PT0gJ2xhdGluMScpIHtcbiAgICAgICAgLy8gRmFzdCBwYXRoOiBJZiBgdmFsYCBmaXRzIGludG8gYSBzaW5nbGUgYnl0ZSwgdXNlIHRoYXQgbnVtZXJpYyB2YWx1ZS5cbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdib29sZWFuJykge1xuICAgIHZhbCA9IE51bWJlcih2YWwpXG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgbGV0IGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb25zdCBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICAgIGNvbnN0IGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyB2YWwgK1xuICAgICAgICAnXCIgaXMgaW52YWxpZCBmb3IgYXJndW1lbnQgXCJ2YWx1ZVwiJylcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gQ1VTVE9NIEVSUk9SU1xuLy8gPT09PT09PT09PT09PVxuXG4vLyBTaW1wbGlmaWVkIHZlcnNpb25zIGZyb20gTm9kZSwgY2hhbmdlZCBmb3IgQnVmZmVyLW9ubHkgdXNhZ2VcbmNvbnN0IGVycm9ycyA9IHt9XG5mdW5jdGlvbiBFIChzeW0sIGdldE1lc3NhZ2UsIEJhc2UpIHtcbiAgZXJyb3JzW3N5bV0gPSBjbGFzcyBOb2RlRXJyb3IgZXh0ZW5kcyBCYXNlIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICBzdXBlcigpXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbWVzc2FnZScsIHtcbiAgICAgICAgdmFsdWU6IGdldE1lc3NhZ2UuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfSlcblxuICAgICAgLy8gQWRkIHRoZSBlcnJvciBjb2RlIHRvIHRoZSBuYW1lIHRvIGluY2x1ZGUgaXQgaW4gdGhlIHN0YWNrIHRyYWNlLlxuICAgICAgdGhpcy5uYW1lID0gYCR7dGhpcy5uYW1lfSBbJHtzeW19XWBcbiAgICAgIC8vIEFjY2VzcyB0aGUgc3RhY2sgdG8gZ2VuZXJhdGUgdGhlIGVycm9yIG1lc3NhZ2UgaW5jbHVkaW5nIHRoZSBlcnJvciBjb2RlXG4gICAgICAvLyBmcm9tIHRoZSBuYW1lLlxuICAgICAgdGhpcy5zdGFjayAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuICAgICAgLy8gUmVzZXQgdGhlIG5hbWUgdG8gdGhlIGFjdHVhbCBuYW1lLlxuICAgICAgZGVsZXRlIHRoaXMubmFtZVxuICAgIH1cblxuICAgIGdldCBjb2RlICgpIHtcbiAgICAgIHJldHVybiBzeW1cbiAgICB9XG5cbiAgICBzZXQgY29kZSAodmFsdWUpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnY29kZScsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdG9TdHJpbmcgKCkge1xuICAgICAgcmV0dXJuIGAke3RoaXMubmFtZX0gWyR7c3ltfV06ICR7dGhpcy5tZXNzYWdlfWBcbiAgICB9XG4gIH1cbn1cblxuRSgnRVJSX0JVRkZFUl9PVVRfT0ZfQk9VTkRTJyxcbiAgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAobmFtZSkge1xuICAgICAgcmV0dXJuIGAke25hbWV9IGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kc2BcbiAgICB9XG5cbiAgICByZXR1cm4gJ0F0dGVtcHQgdG8gYWNjZXNzIG1lbW9yeSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnXG4gIH0sIFJhbmdlRXJyb3IpXG5FKCdFUlJfSU5WQUxJRF9BUkdfVFlQRScsXG4gIGZ1bmN0aW9uIChuYW1lLCBhY3R1YWwpIHtcbiAgICByZXR1cm4gYFRoZSBcIiR7bmFtZX1cIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyLiBSZWNlaXZlZCB0eXBlICR7dHlwZW9mIGFjdHVhbH1gXG4gIH0sIFR5cGVFcnJvcilcbkUoJ0VSUl9PVVRfT0ZfUkFOR0UnLFxuICBmdW5jdGlvbiAoc3RyLCByYW5nZSwgaW5wdXQpIHtcbiAgICBsZXQgbXNnID0gYFRoZSB2YWx1ZSBvZiBcIiR7c3RyfVwiIGlzIG91dCBvZiByYW5nZS5gXG4gICAgbGV0IHJlY2VpdmVkID0gaW5wdXRcbiAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihpbnB1dCkgJiYgTWF0aC5hYnMoaW5wdXQpID4gMiAqKiAzMikge1xuICAgICAgcmVjZWl2ZWQgPSBhZGROdW1lcmljYWxTZXBhcmF0b3IoU3RyaW5nKGlucHV0KSlcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ2JpZ2ludCcpIHtcbiAgICAgIHJlY2VpdmVkID0gU3RyaW5nKGlucHV0KVxuICAgICAgaWYgKGlucHV0ID4gQmlnSW50KDIpICoqIEJpZ0ludCgzMikgfHwgaW5wdXQgPCAtKEJpZ0ludCgyKSAqKiBCaWdJbnQoMzIpKSkge1xuICAgICAgICByZWNlaXZlZCA9IGFkZE51bWVyaWNhbFNlcGFyYXRvcihyZWNlaXZlZClcbiAgICAgIH1cbiAgICAgIHJlY2VpdmVkICs9ICduJ1xuICAgIH1cbiAgICBtc2cgKz0gYCBJdCBtdXN0IGJlICR7cmFuZ2V9LiBSZWNlaXZlZCAke3JlY2VpdmVkfWBcbiAgICByZXR1cm4gbXNnXG4gIH0sIFJhbmdlRXJyb3IpXG5cbmZ1bmN0aW9uIGFkZE51bWVyaWNhbFNlcGFyYXRvciAodmFsKSB7XG4gIGxldCByZXMgPSAnJ1xuICBsZXQgaSA9IHZhbC5sZW5ndGhcbiAgY29uc3Qgc3RhcnQgPSB2YWxbMF0gPT09ICctJyA/IDEgOiAwXG4gIGZvciAoOyBpID49IHN0YXJ0ICsgNDsgaSAtPSAzKSB7XG4gICAgcmVzID0gYF8ke3ZhbC5zbGljZShpIC0gMywgaSl9JHtyZXN9YFxuICB9XG4gIHJldHVybiBgJHt2YWwuc2xpY2UoMCwgaSl9JHtyZXN9YFxufVxuXG4vLyBDSEVDSyBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBjaGVja0JvdW5kcyAoYnVmLCBvZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgaWYgKGJ1ZltvZmZzZXRdID09PSB1bmRlZmluZWQgfHwgYnVmW29mZnNldCArIGJ5dGVMZW5ndGhdID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIGJ1Zi5sZW5ndGggLSAoYnl0ZUxlbmd0aCArIDEpKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50QkkgKHZhbHVlLCBtaW4sIG1heCwgYnVmLCBvZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB7XG4gICAgY29uc3QgbiA9IHR5cGVvZiBtaW4gPT09ICdiaWdpbnQnID8gJ24nIDogJydcbiAgICBsZXQgcmFuZ2VcbiAgICBpZiAoYnl0ZUxlbmd0aCA+IDMpIHtcbiAgICAgIGlmIChtaW4gPT09IDAgfHwgbWluID09PSBCaWdJbnQoMCkpIHtcbiAgICAgICAgcmFuZ2UgPSBgPj0gMCR7bn0gYW5kIDwgMiR7bn0gKiogJHsoYnl0ZUxlbmd0aCArIDEpICogOH0ke259YFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmFuZ2UgPSBgPj0gLSgyJHtufSAqKiAkeyhieXRlTGVuZ3RoICsgMSkgKiA4IC0gMX0ke259KSBhbmQgPCAyICoqIGAgK1xuICAgICAgICAgICAgICAgIGAkeyhieXRlTGVuZ3RoICsgMSkgKiA4IC0gMX0ke259YFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByYW5nZSA9IGA+PSAke21pbn0ke259IGFuZCA8PSAke21heH0ke259YFxuICAgIH1cbiAgICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9PVVRfT0ZfUkFOR0UoJ3ZhbHVlJywgcmFuZ2UsIHZhbHVlKVxuICB9XG4gIGNoZWNrQm91bmRzKGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU51bWJlciAodmFsdWUsIG5hbWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9JTlZBTElEX0FSR19UWVBFKG5hbWUsICdudW1iZXInLCB2YWx1ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBib3VuZHNFcnJvciAodmFsdWUsIGxlbmd0aCwgdHlwZSkge1xuICBpZiAoTWF0aC5mbG9vcih2YWx1ZSkgIT09IHZhbHVlKSB7XG4gICAgdmFsaWRhdGVOdW1iZXIodmFsdWUsIHR5cGUpXG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfT1VUX09GX1JBTkdFKHR5cGUgfHwgJ29mZnNldCcsICdhbiBpbnRlZ2VyJywgdmFsdWUpXG4gIH1cblxuICBpZiAobGVuZ3RoIDwgMCkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX0JVRkZFUl9PVVRfT0ZfQk9VTkRTKClcbiAgfVxuXG4gIHRocm93IG5ldyBlcnJvcnMuRVJSX09VVF9PRl9SQU5HRSh0eXBlIHx8ICdvZmZzZXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYD49ICR7dHlwZSA/IDEgOiAwfSBhbmQgPD0gJHtsZW5ndGh9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlKVxufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbmNvbnN0IElOVkFMSURfQkFTRTY0X1JFID0gL1teKy8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgdGFrZXMgZXF1YWwgc2lnbnMgYXMgZW5kIG9mIHRoZSBCYXNlNjQgZW5jb2RpbmdcbiAgc3RyID0gc3RyLnNwbGl0KCc9JylbMF1cbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0ci50cmltKCkucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICBsZXQgY29kZVBvaW50XG4gIGNvbnN0IGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgbGV0IGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIGNvbnN0IGJ5dGVzID0gW11cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgY29uc3QgYnl0ZUFycmF5ID0gW11cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICBsZXQgYywgaGksIGxvXG4gIGNvbnN0IGJ5dGVBcnJheSA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgbGV0IGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbi8vIEFycmF5QnVmZmVyIG9yIFVpbnQ4QXJyYXkgb2JqZWN0cyBmcm9tIG90aGVyIGNvbnRleHRzIChpLmUuIGlmcmFtZXMpIGRvIG5vdCBwYXNzXG4vLyB0aGUgYGluc3RhbmNlb2ZgIGNoZWNrIGJ1dCB0aGV5IHNob3VsZCBiZSB0cmVhdGVkIGFzIG9mIHRoYXQgdHlwZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE2NlxuZnVuY3Rpb24gaXNJbnN0YW5jZSAob2JqLCB0eXBlKSB7XG4gIHJldHVybiBvYmogaW5zdGFuY2VvZiB0eXBlIHx8XG4gICAgKG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lICE9IG51bGwgJiZcbiAgICAgIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSB0eXBlLm5hbWUpXG59XG5mdW5jdGlvbiBudW1iZXJJc05hTiAob2JqKSB7XG4gIC8vIEZvciBJRTExIHN1cHBvcnRcbiAgcmV0dXJuIG9iaiAhPT0gb2JqIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG5cbi8vIENyZWF0ZSBsb29rdXAgdGFibGUgZm9yIGB0b1N0cmluZygnaGV4JylgXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8yMTlcbmNvbnN0IGhleFNsaWNlTG9va3VwVGFibGUgPSAoZnVuY3Rpb24gKCkge1xuICBjb25zdCBhbHBoYWJldCA9ICcwMTIzNDU2Nzg5YWJjZGVmJ1xuICBjb25zdCB0YWJsZSA9IG5ldyBBcnJheSgyNTYpXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgIGNvbnN0IGkxNiA9IGkgKiAxNlxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTY7ICsraikge1xuICAgICAgdGFibGVbaTE2ICsgal0gPSBhbHBoYWJldFtpXSArIGFscGhhYmV0W2pdXG4gICAgfVxuICB9XG4gIHJldHVybiB0YWJsZVxufSkoKVxuXG4vLyBSZXR1cm4gbm90IGZ1bmN0aW9uIHdpdGggRXJyb3IgaWYgQmlnSW50IG5vdCBzdXBwb3J0ZWRcbmZ1bmN0aW9uIGRlZmluZUJpZ0ludE1ldGhvZCAoZm4pIHtcbiAgcmV0dXJuIHR5cGVvZiBCaWdJbnQgPT09ICd1bmRlZmluZWQnID8gQnVmZmVyQmlnSW50Tm90RGVmaW5lZCA6IGZuXG59XG5cbmZ1bmN0aW9uIEJ1ZmZlckJpZ0ludE5vdERlZmluZWQgKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0JpZ0ludCBub3Qgc3VwcG9ydGVkJylcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiLyohIGllZWU3NTQuIEJTRC0zLUNsYXVzZSBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbmV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBlaW8gPSByZXF1aXJlKCdlbmdpbmUuaW8tY2xpZW50Jyk7XG52YXIgU29ja2V0ID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgb24gPSByZXF1aXJlKCcuL29uJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1iaW5kJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50Om1hbmFnZXInKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnaW5kZXhvZicpO1xudmFyIEJhY2tvZmYgPSByZXF1aXJlKCdiYWNrbzInKTtcblxuLyoqXG4gKiBJRTYrIGhhc093blByb3BlcnR5XG4gKi9cblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hbmFnZXI7XG5cbi8qKlxuICogYE1hbmFnZXJgIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmdpbmUgaW5zdGFuY2Ugb3IgZW5naW5lIHVyaS9vcHRzXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBNYW5hZ2VyICh1cmksIG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1hbmFnZXIpKSByZXR1cm4gbmV3IE1hbmFnZXIodXJpLCBvcHRzKTtcbiAgaWYgKHVyaSAmJiAoJ29iamVjdCcgPT09IHR5cGVvZiB1cmkpKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSB1bmRlZmluZWQ7XG4gIH1cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgb3B0cy5wYXRoID0gb3B0cy5wYXRoIHx8ICcvc29ja2V0LmlvJztcbiAgdGhpcy5uc3BzID0ge307XG4gIHRoaXMuc3VicyA9IFtdO1xuICB0aGlzLm9wdHMgPSBvcHRzO1xuICB0aGlzLnJlY29ubmVjdGlvbihvcHRzLnJlY29ubmVjdGlvbiAhPT0gZmFsc2UpO1xuICB0aGlzLnJlY29ubmVjdGlvbkF0dGVtcHRzKG9wdHMucmVjb25uZWN0aW9uQXR0ZW1wdHMgfHwgSW5maW5pdHkpO1xuICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KG9wdHMucmVjb25uZWN0aW9uRGVsYXkgfHwgMTAwMCk7XG4gIHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgob3B0cy5yZWNvbm5lY3Rpb25EZWxheU1heCB8fCA1MDAwKTtcbiAgdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKG9wdHMucmFuZG9taXphdGlvbkZhY3RvciB8fCAwLjUpO1xuICB0aGlzLmJhY2tvZmYgPSBuZXcgQmFja29mZih7XG4gICAgbWluOiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KCksXG4gICAgbWF4OiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KCksXG4gICAgaml0dGVyOiB0aGlzLnJhbmRvbWl6YXRpb25GYWN0b3IoKVxuICB9KTtcbiAgdGhpcy50aW1lb3V0KG51bGwgPT0gb3B0cy50aW1lb3V0ID8gMjAwMDAgOiBvcHRzLnRpbWVvdXQpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgdGhpcy51cmkgPSB1cmk7XG4gIHRoaXMuY29ubmVjdGluZyA9IFtdO1xuICB0aGlzLmxhc3RQaW5nID0gbnVsbDtcbiAgdGhpcy5lbmNvZGluZyA9IGZhbHNlO1xuICB0aGlzLnBhY2tldEJ1ZmZlciA9IFtdO1xuICB2YXIgX3BhcnNlciA9IG9wdHMucGFyc2VyIHx8IHBhcnNlcjtcbiAgdGhpcy5lbmNvZGVyID0gbmV3IF9wYXJzZXIuRW5jb2RlcigpO1xuICB0aGlzLmRlY29kZXIgPSBuZXcgX3BhcnNlci5EZWNvZGVyKCk7XG4gIHRoaXMuYXV0b0Nvbm5lY3QgPSBvcHRzLmF1dG9Db25uZWN0ICE9PSBmYWxzZTtcbiAgaWYgKHRoaXMuYXV0b0Nvbm5lY3QpIHRoaXMub3BlbigpO1xufVxuXG4vKipcbiAqIFByb3BhZ2F0ZSBnaXZlbiBldmVudCB0byBzb2NrZXRzIGFuZCBlbWl0IG9uIGB0aGlzYFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmVtaXRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICBmb3IgKHZhciBuc3AgaW4gdGhpcy5uc3BzKSB7XG4gICAgaWYgKGhhcy5jYWxsKHRoaXMubnNwcywgbnNwKSkge1xuICAgICAgdGhpcy5uc3BzW25zcF0uZW1pdC5hcHBseSh0aGlzLm5zcHNbbnNwXSwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogVXBkYXRlIGBzb2NrZXQuaWRgIG9mIGFsbCBzb2NrZXRzXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUudXBkYXRlU29ja2V0SWRzID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBuc3AgaW4gdGhpcy5uc3BzKSB7XG4gICAgaWYgKGhhcy5jYWxsKHRoaXMubnNwcywgbnNwKSkge1xuICAgICAgdGhpcy5uc3BzW25zcF0uaWQgPSB0aGlzLmdlbmVyYXRlSWQobnNwKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogZ2VuZXJhdGUgYHNvY2tldC5pZGAgZm9yIHRoZSBnaXZlbiBgbnNwYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuc3BcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmdlbmVyYXRlSWQgPSBmdW5jdGlvbiAobnNwKSB7XG4gIHJldHVybiAobnNwID09PSAnLycgPyAnJyA6IChuc3AgKyAnIycpKSArIHRoaXMuZW5naW5lLmlkO1xufTtcblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoTWFuYWdlci5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFNldHMgdGhlIGByZWNvbm5lY3Rpb25gIGNvbmZpZy5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHRydWUvZmFsc2UgaWYgaXQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgcmVjb25uZWN0XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbiA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbjtcbiAgdGhpcy5fcmVjb25uZWN0aW9uID0gISF2O1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgcmVjb25uZWN0aW9uIGF0dGVtcHRzIGNvbmZpZy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbWF4IHJlY29ubmVjdGlvbiBhdHRlbXB0cyBiZWZvcmUgZ2l2aW5nIHVwXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkF0dGVtcHRzID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHM7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzID0gdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGRlbGF5IGJldHdlZW4gcmVjb25uZWN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsYXlcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYgb3IgdmFsdWVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucmVjb25uZWN0aW9uRGVsYXkgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheTtcbiAgdGhpcy5fcmVjb25uZWN0aW9uRGVsYXkgPSB2O1xuICB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldE1pbih2KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yYW5kb21pemF0aW9uRmFjdG9yID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvcjtcbiAgdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvciA9IHY7XG4gIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0Sml0dGVyKHYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgbWF4aW11bSBkZWxheSBiZXR3ZWVuIHJlY29ubmVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkRlbGF5TWF4ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXlNYXg7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4ID0gdjtcbiAgdGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRNYXgodik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjb25uZWN0aW9uIHRpbWVvdXQuIGBmYWxzZWAgdG8gZGlzYWJsZVxuICpcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYgb3IgdmFsdWVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUudGltZW91dCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3RpbWVvdXQ7XG4gIHRoaXMuX3RpbWVvdXQgPSB2O1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU3RhcnRzIHRyeWluZyB0byByZWNvbm5lY3QgaWYgcmVjb25uZWN0aW9uIGlzIGVuYWJsZWQgYW5kIHdlIGhhdmUgbm90XG4gKiBzdGFydGVkIHJlY29ubmVjdGluZyB5ZXRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5tYXliZVJlY29ubmVjdE9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gT25seSB0cnkgdG8gcmVjb25uZWN0IGlmIGl0J3MgdGhlIGZpcnN0IHRpbWUgd2UncmUgY29ubmVjdGluZ1xuICBpZiAoIXRoaXMucmVjb25uZWN0aW5nICYmIHRoaXMuX3JlY29ubmVjdGlvbiAmJiB0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPT09IDApIHtcbiAgICAvLyBrZWVwcyByZWNvbm5lY3Rpb24gZnJvbSBmaXJpbmcgdHdpY2UgZm9yIHRoZSBzYW1lIHJlY29ubmVjdGlvbiBsb29wXG4gICAgdGhpcy5yZWNvbm5lY3QoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydCBgc29ja2V0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25hbCwgY2FsbGJhY2tcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub3BlbiA9XG5NYW5hZ2VyLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKGZuLCBvcHRzKSB7XG4gIGRlYnVnKCdyZWFkeVN0YXRlICVzJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgaWYgKH50aGlzLnJlYWR5U3RhdGUuaW5kZXhPZignb3BlbicpKSByZXR1cm4gdGhpcztcblxuICBkZWJ1Zygnb3BlbmluZyAlcycsIHRoaXMudXJpKTtcbiAgdGhpcy5lbmdpbmUgPSBlaW8odGhpcy51cmksIHRoaXMub3B0cyk7XG4gIHZhciBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG4gIHRoaXMuc2tpcFJlY29ubmVjdCA9IGZhbHNlO1xuXG4gIC8vIGVtaXQgYG9wZW5gXG4gIHZhciBvcGVuU3ViID0gb24oc29ja2V0LCAnb3BlbicsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9ub3BlbigpO1xuICAgIGZuICYmIGZuKCk7XG4gIH0pO1xuXG4gIC8vIGVtaXQgYGNvbm5lY3RfZXJyb3JgXG4gIHZhciBlcnJvclN1YiA9IG9uKHNvY2tldCwgJ2Vycm9yJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkZWJ1ZygnY29ubmVjdF9lcnJvcicpO1xuICAgIHNlbGYuY2xlYW51cCgpO1xuICAgIHNlbGYucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICAgIHNlbGYuZW1pdEFsbCgnY29ubmVjdF9lcnJvcicsIGRhdGEpO1xuICAgIGlmIChmbikge1xuICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignQ29ubmVjdGlvbiBlcnJvcicpO1xuICAgICAgZXJyLmRhdGEgPSBkYXRhO1xuICAgICAgZm4oZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT25seSBkbyB0aGlzIGlmIHRoZXJlIGlzIG5vIGZuIHRvIGhhbmRsZSB0aGUgZXJyb3JcbiAgICAgIHNlbGYubWF5YmVSZWNvbm5lY3RPbk9wZW4oKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIGVtaXQgYGNvbm5lY3RfdGltZW91dGBcbiAgaWYgKGZhbHNlICE9PSB0aGlzLl90aW1lb3V0KSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLl90aW1lb3V0O1xuICAgIGRlYnVnKCdjb25uZWN0IGF0dGVtcHQgd2lsbCB0aW1lb3V0IGFmdGVyICVkJywgdGltZW91dCk7XG5cbiAgICBpZiAodGltZW91dCA9PT0gMCkge1xuICAgICAgb3BlblN1Yi5kZXN0cm95KCk7IC8vIHByZXZlbnRzIGEgcmFjZSBjb25kaXRpb24gd2l0aCB0aGUgJ29wZW4nIGV2ZW50XG4gICAgfVxuXG4gICAgLy8gc2V0IHRpbWVyXG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBkZWJ1ZygnY29ubmVjdCBhdHRlbXB0IHRpbWVkIG91dCBhZnRlciAlZCcsIHRpbWVvdXQpO1xuICAgICAgb3BlblN1Yi5kZXN0cm95KCk7XG4gICAgICBzb2NrZXQuY2xvc2UoKTtcbiAgICAgIHNvY2tldC5lbWl0KCdlcnJvcicsICd0aW1lb3V0Jyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ2Nvbm5lY3RfdGltZW91dCcsIHRpbWVvdXQpO1xuICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5zdWJzLnB1c2gob3BlblN1Yik7XG4gIHRoaXMuc3Vicy5wdXNoKGVycm9yU3ViKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IG9wZW4uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1Zygnb3BlbicpO1xuXG4gIC8vIGNsZWFyIG9sZCBzdWJzXG4gIHRoaXMuY2xlYW51cCgpO1xuXG4gIC8vIG1hcmsgYXMgb3BlblxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xuXG4gIC8vIGFkZCBuZXcgc3Vic1xuICB2YXIgc29ja2V0ID0gdGhpcy5lbmdpbmU7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2RhdGEnLCBiaW5kKHRoaXMsICdvbmRhdGEnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdwaW5nJywgYmluZCh0aGlzLCAnb25waW5nJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAncG9uZycsIGJpbmQodGhpcywgJ29ucG9uZycpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Vycm9yJywgYmluZCh0aGlzLCAnb25lcnJvcicpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ2Nsb3NlJywgYmluZCh0aGlzLCAnb25jbG9zZScpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHRoaXMuZGVjb2RlciwgJ2RlY29kZWQnLCBiaW5kKHRoaXMsICdvbmRlY29kZWQnKSkpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHBpbmcuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25waW5nID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmxhc3RQaW5nID0gbmV3IERhdGUoKTtcbiAgdGhpcy5lbWl0QWxsKCdwaW5nJyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucG9uZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0QWxsKCdwb25nJywgbmV3IERhdGUoKSAtIHRoaXMubGFzdFBpbmcpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZGVjb2Rlci5hZGQoZGF0YSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHBhcnNlciBmdWxseSBkZWNvZGVzIGEgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uZGVjb2RlZCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzb2NrZXQgZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5lbWl0QWxsKCdlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgc29ja2V0IGZvciB0aGUgZ2l2ZW4gYG5zcGAuXG4gKlxuICogQHJldHVybiB7U29ja2V0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5zb2NrZXQgPSBmdW5jdGlvbiAobnNwLCBvcHRzKSB7XG4gIHZhciBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgaWYgKCFzb2NrZXQpIHtcbiAgICBzb2NrZXQgPSBuZXcgU29ja2V0KHRoaXMsIG5zcCwgb3B0cyk7XG4gICAgdGhpcy5uc3BzW25zcF0gPSBzb2NrZXQ7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNvY2tldC5vbignY29ubmVjdGluZycsIG9uQ29ubmVjdGluZyk7XG4gICAgc29ja2V0Lm9uKCdjb25uZWN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgc29ja2V0LmlkID0gc2VsZi5nZW5lcmF0ZUlkKG5zcCk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5hdXRvQ29ubmVjdCkge1xuICAgICAgLy8gbWFudWFsbHkgY2FsbCBoZXJlIHNpbmNlIGNvbm5lY3RpbmcgZXZlbnQgaXMgZmlyZWQgYmVmb3JlIGxpc3RlbmluZ1xuICAgICAgb25Db25uZWN0aW5nKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Db25uZWN0aW5nICgpIHtcbiAgICBpZiAoIX5pbmRleE9mKHNlbGYuY29ubmVjdGluZywgc29ja2V0KSkge1xuICAgICAgc2VsZi5jb25uZWN0aW5nLnB1c2goc29ja2V0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc29ja2V0O1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNvY2tldCBjbG9zZS5cbiAqXG4gKiBAcGFyYW0ge1NvY2tldH0gc29ja2V0XG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChzb2NrZXQpIHtcbiAgdmFyIGluZGV4ID0gaW5kZXhPZih0aGlzLmNvbm5lY3RpbmcsIHNvY2tldCk7XG4gIGlmICh+aW5kZXgpIHRoaXMuY29ubmVjdGluZy5zcGxpY2UoaW5kZXgsIDEpO1xuICBpZiAodGhpcy5jb25uZWN0aW5nLmxlbmd0aCkgcmV0dXJuO1xuXG4gIHRoaXMuY2xvc2UoKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgZGVidWcoJ3dyaXRpbmcgcGFja2V0ICVqJywgcGFja2V0KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAocGFja2V0LnF1ZXJ5ICYmIHBhY2tldC50eXBlID09PSAwKSBwYWNrZXQubnNwICs9ICc/JyArIHBhY2tldC5xdWVyeTtcblxuICBpZiAoIXNlbGYuZW5jb2RpbmcpIHtcbiAgICAvLyBlbmNvZGUsIHRoZW4gd3JpdGUgdG8gZW5naW5lIHdpdGggcmVzdWx0XG4gICAgc2VsZi5lbmNvZGluZyA9IHRydWU7XG4gICAgdGhpcy5lbmNvZGVyLmVuY29kZShwYWNrZXQsIGZ1bmN0aW9uIChlbmNvZGVkUGFja2V0cykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkUGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWxmLmVuZ2luZS53cml0ZShlbmNvZGVkUGFja2V0c1tpXSwgcGFja2V0Lm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgc2VsZi5lbmNvZGluZyA9IGZhbHNlO1xuICAgICAgc2VsZi5wcm9jZXNzUGFja2V0UXVldWUoKTtcbiAgICB9KTtcbiAgfSBlbHNlIHsgLy8gYWRkIHBhY2tldCB0byB0aGUgcXVldWVcbiAgICBzZWxmLnBhY2tldEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIH1cbn07XG5cbi8qKlxuICogSWYgcGFja2V0IGJ1ZmZlciBpcyBub24tZW1wdHksIGJlZ2lucyBlbmNvZGluZyB0aGVcbiAqIG5leHQgcGFja2V0IGluIGxpbmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucHJvY2Vzc1BhY2tldFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5wYWNrZXRCdWZmZXIubGVuZ3RoID4gMCAmJiAhdGhpcy5lbmNvZGluZykge1xuICAgIHZhciBwYWNrID0gdGhpcy5wYWNrZXRCdWZmZXIuc2hpZnQoKTtcbiAgICB0aGlzLnBhY2tldChwYWNrKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCB0cmFuc3BvcnQgc3Vic2NyaXB0aW9ucyBhbmQgcGFja2V0IGJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2xlYW51cCcpO1xuXG4gIHZhciBzdWJzTGVuZ3RoID0gdGhpcy5zdWJzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzTGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3ViID0gdGhpcy5zdWJzLnNoaWZ0KCk7XG4gICAgc3ViLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHRoaXMucGFja2V0QnVmZmVyID0gW107XG4gIHRoaXMuZW5jb2RpbmcgPSBmYWxzZTtcbiAgdGhpcy5sYXN0UGluZyA9IG51bGw7XG5cbiAgdGhpcy5kZWNvZGVyLmRlc3Ryb3koKTtcbn07XG5cbi8qKlxuICogQ2xvc2UgdGhlIGN1cnJlbnQgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmNsb3NlID1cbk1hbmFnZXIucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdkaXNjb25uZWN0Jyk7XG4gIHRoaXMuc2tpcFJlY29ubmVjdCA9IHRydWU7XG4gIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIC8vIGBvbmNsb3NlYCB3aWxsIG5vdCBmaXJlIGJlY2F1c2VcbiAgICAvLyBhbiBvcGVuIGV2ZW50IG5ldmVyIGhhcHBlbmVkXG4gICAgdGhpcy5jbGVhbnVwKCk7XG4gIH1cbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICBpZiAodGhpcy5lbmdpbmUpIHRoaXMuZW5naW5lLmNsb3NlKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICBkZWJ1Zygnb25jbG9zZScpO1xuXG4gIHRoaXMuY2xlYW51cCgpO1xuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24pO1xuXG4gIGlmICh0aGlzLl9yZWNvbm5lY3Rpb24gJiYgIXRoaXMuc2tpcFJlY29ubmVjdCkge1xuICAgIHRoaXMucmVjb25uZWN0KCk7XG4gIH1cbn07XG5cbi8qKlxuICogQXR0ZW1wdCBhIHJlY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnJlY29ubmVjdGluZyB8fCB0aGlzLnNraXBSZWNvbm5lY3QpIHJldHVybiB0aGlzO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy5iYWNrb2ZmLmF0dGVtcHRzID49IHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzKSB7XG4gICAgZGVidWcoJ3JlY29ubmVjdCBmYWlsZWQnKTtcbiAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICB0aGlzLmVtaXRBbGwoJ3JlY29ubmVjdF9mYWlsZWQnKTtcbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHZhciBkZWxheSA9IHRoaXMuYmFja29mZi5kdXJhdGlvbigpO1xuICAgIGRlYnVnKCd3aWxsIHdhaXQgJWRtcyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHQnLCBkZWxheSk7XG5cbiAgICB0aGlzLnJlY29ubmVjdGluZyA9IHRydWU7XG4gICAgdmFyIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KSByZXR1cm47XG5cbiAgICAgIGRlYnVnKCdhdHRlbXB0aW5nIHJlY29ubmVjdCcpO1xuICAgICAgc2VsZi5lbWl0QWxsKCdyZWNvbm5lY3RfYXR0ZW1wdCcsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ3JlY29ubmVjdGluZycsIHNlbGYuYmFja29mZi5hdHRlbXB0cyk7XG5cbiAgICAgIC8vIGNoZWNrIGFnYWluIGZvciB0aGUgY2FzZSBzb2NrZXQgY2xvc2VkIGluIGFib3ZlIGV2ZW50c1xuICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdCkgcmV0dXJuO1xuXG4gICAgICBzZWxmLm9wZW4oZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGVidWcoJ3JlY29ubmVjdCBhdHRlbXB0IGVycm9yJyk7XG4gICAgICAgICAgc2VsZi5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLnJlY29ubmVjdCgpO1xuICAgICAgICAgIHNlbGYuZW1pdEFsbCgncmVjb25uZWN0X2Vycm9yJywgZXJyLmRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdyZWNvbm5lY3Qgc3VjY2VzcycpO1xuICAgICAgICAgIHNlbGYub25yZWNvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgZGVsYXkpO1xuXG4gICAgdGhpcy5zdWJzLnB1c2goe1xuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVjb25uZWN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9ucmVjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXR0ZW1wdCA9IHRoaXMuYmFja29mZi5hdHRlbXB0cztcbiAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gIHRoaXMudXBkYXRlU29ja2V0SWRzKCk7XG4gIHRoaXMuZW1pdEFsbCgncmVjb25uZWN0JywgYXR0ZW1wdCk7XG59O1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc29ja2V0Jyk7XG5cbi8qKlxuICogRXhwb3J0cyBwYXJzZXJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICpcbiAqL1xubW9kdWxlLmV4cG9ydHMucGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciB0cmFuc3BvcnRzID0gcmVxdWlyZSgnLi90cmFuc3BvcnRzL2luZGV4Jyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OnNvY2tldCcpO1xudmFyIGluZGV4ID0gcmVxdWlyZSgnaW5kZXhvZicpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBwYXJzZXVyaSA9IHJlcXVpcmUoJ3BhcnNldXJpJyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNvY2tldDtcblxuLyoqXG4gKiBTb2NrZXQgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSB1cmkgb3Igb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gU29ja2V0ICh1cmksIG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNvY2tldCkpIHJldHVybiBuZXcgU29ja2V0KHVyaSwgb3B0cyk7XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgaWYgKHVyaSAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHVyaSkge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gbnVsbDtcbiAgfVxuXG4gIGlmICh1cmkpIHtcbiAgICB1cmkgPSBwYXJzZXVyaSh1cmkpO1xuICAgIG9wdHMuaG9zdG5hbWUgPSB1cmkuaG9zdDtcbiAgICBvcHRzLnNlY3VyZSA9IHVyaS5wcm90b2NvbCA9PT0gJ2h0dHBzJyB8fCB1cmkucHJvdG9jb2wgPT09ICd3c3MnO1xuICAgIG9wdHMucG9ydCA9IHVyaS5wb3J0O1xuICAgIGlmICh1cmkucXVlcnkpIG9wdHMucXVlcnkgPSB1cmkucXVlcnk7XG4gIH0gZWxzZSBpZiAob3B0cy5ob3N0KSB7XG4gICAgb3B0cy5ob3N0bmFtZSA9IHBhcnNldXJpKG9wdHMuaG9zdCkuaG9zdDtcbiAgfVxuXG4gIHRoaXMuc2VjdXJlID0gbnVsbCAhPSBvcHRzLnNlY3VyZSA/IG9wdHMuc2VjdXJlXG4gICAgOiAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJiAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2wpO1xuXG4gIGlmIChvcHRzLmhvc3RuYW1lICYmICFvcHRzLnBvcnQpIHtcbiAgICAvLyBpZiBubyBwb3J0IGlzIHNwZWNpZmllZCBtYW51YWxseSwgdXNlIHRoZSBwcm90b2NvbCBkZWZhdWx0XG4gICAgb3B0cy5wb3J0ID0gdGhpcy5zZWN1cmUgPyAnNDQzJyA6ICc4MCc7XG4gIH1cblxuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudCB8fCBmYWxzZTtcbiAgdGhpcy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWUgfHxcbiAgICAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyA/IGxvY2F0aW9uLmhvc3RuYW1lIDogJ2xvY2FsaG9zdCcpO1xuICB0aGlzLnBvcnQgPSBvcHRzLnBvcnQgfHwgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9jYXRpb24ucG9ydFxuICAgICAgPyBsb2NhdGlvbi5wb3J0XG4gICAgICA6ICh0aGlzLnNlY3VyZSA/IDQ0MyA6IDgwKSk7XG4gIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5IHx8IHt9O1xuICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB0aGlzLnF1ZXJ5KSB0aGlzLnF1ZXJ5ID0gcGFyc2Vxcy5kZWNvZGUodGhpcy5xdWVyeSk7XG4gIHRoaXMudXBncmFkZSA9IGZhbHNlICE9PSBvcHRzLnVwZ3JhZGU7XG4gIHRoaXMucGF0aCA9IChvcHRzLnBhdGggfHwgJy9lbmdpbmUuaW8nKS5yZXBsYWNlKC9cXC8kLywgJycpICsgJy8nO1xuICB0aGlzLmZvcmNlSlNPTlAgPSAhIW9wdHMuZm9yY2VKU09OUDtcbiAgdGhpcy5qc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wO1xuICB0aGlzLmZvcmNlQmFzZTY0ID0gISFvcHRzLmZvcmNlQmFzZTY0O1xuICB0aGlzLmVuYWJsZXNYRFIgPSAhIW9wdHMuZW5hYmxlc1hEUjtcbiAgdGhpcy53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZSAhPT0gb3B0cy53aXRoQ3JlZGVudGlhbHM7XG4gIHRoaXMudGltZXN0YW1wUGFyYW0gPSBvcHRzLnRpbWVzdGFtcFBhcmFtIHx8ICd0JztcbiAgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyA9IG9wdHMudGltZXN0YW1wUmVxdWVzdHM7XG4gIHRoaXMudHJhbnNwb3J0cyA9IG9wdHMudHJhbnNwb3J0cyB8fCBbJ3BvbGxpbmcnLCAnd2Vic29ja2V0J107XG4gIHRoaXMudHJhbnNwb3J0T3B0aW9ucyA9IG9wdHMudHJhbnNwb3J0T3B0aW9ucyB8fCB7fTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJyc7XG4gIHRoaXMud3JpdGVCdWZmZXIgPSBbXTtcbiAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcbiAgdGhpcy5wb2xpY3lQb3J0ID0gb3B0cy5wb2xpY3lQb3J0IHx8IDg0MztcbiAgdGhpcy5yZW1lbWJlclVwZ3JhZGUgPSBvcHRzLnJlbWVtYmVyVXBncmFkZSB8fCBmYWxzZTtcbiAgdGhpcy5iaW5hcnlUeXBlID0gbnVsbDtcbiAgdGhpcy5vbmx5QmluYXJ5VXBncmFkZXMgPSBvcHRzLm9ubHlCaW5hcnlVcGdyYWRlcztcbiAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IGZhbHNlICE9PSBvcHRzLnBlck1lc3NhZ2VEZWZsYXRlID8gKG9wdHMucGVyTWVzc2FnZURlZmxhdGUgfHwge30pIDogZmFsc2U7XG5cbiAgaWYgKHRydWUgPT09IHRoaXMucGVyTWVzc2FnZURlZmxhdGUpIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSB7fTtcbiAgaWYgKHRoaXMucGVyTWVzc2FnZURlZmxhdGUgJiYgbnVsbCA9PSB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCkge1xuICAgIHRoaXMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkID0gMTAyNDtcbiAgfVxuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4IHx8IHVuZGVmaW5lZDtcbiAgdGhpcy5rZXkgPSBvcHRzLmtleSB8fCB1bmRlZmluZWQ7XG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZSB8fCB1bmRlZmluZWQ7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydCB8fCB1bmRlZmluZWQ7XG4gIHRoaXMuY2EgPSBvcHRzLmNhIHx8IHVuZGVmaW5lZDtcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzIHx8IHVuZGVmaW5lZDtcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuICB0aGlzLmZvcmNlTm9kZSA9ICEhb3B0cy5mb3JjZU5vZGU7XG5cbiAgLy8gZGV0ZWN0IFJlYWN0TmF0aXZlIGVudmlyb25tZW50XG4gIHRoaXMuaXNSZWFjdE5hdGl2ZSA9ICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdzdHJpbmcnICYmIG5hdmlnYXRvci5wcm9kdWN0LnRvTG93ZXJDYXNlKCkgPT09ICdyZWFjdG5hdGl2ZScpO1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgb3IgUmVhY3ROYXRpdmUgY2xpZW50XG4gIGlmICh0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcgfHwgdGhpcy5pc1JlYWN0TmF0aXZlKSB7XG4gICAgaWYgKG9wdHMuZXh0cmFIZWFkZXJzICYmIE9iamVjdC5rZXlzKG9wdHMuZXh0cmFIZWFkZXJzKS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmxvY2FsQWRkcmVzcykge1xuICAgICAgdGhpcy5sb2NhbEFkZHJlc3MgPSBvcHRzLmxvY2FsQWRkcmVzcztcbiAgICB9XG4gIH1cblxuICAvLyBzZXQgb24gaGFuZHNoYWtlXG4gIHRoaXMuaWQgPSBudWxsO1xuICB0aGlzLnVwZ3JhZGVzID0gbnVsbDtcbiAgdGhpcy5waW5nSW50ZXJ2YWwgPSBudWxsO1xuICB0aGlzLnBpbmdUaW1lb3V0ID0gbnVsbDtcblxuICAvLyBzZXQgb24gaGVhcnRiZWF0XG4gIHRoaXMucGluZ0ludGVydmFsVGltZXIgPSBudWxsO1xuICB0aGlzLnBpbmdUaW1lb3V0VGltZXIgPSBudWxsO1xuXG4gIHRoaXMub3BlbigpO1xufVxuXG5Tb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFNvY2tldC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG9jb2wgPSBwYXJzZXIucHJvdG9jb2w7IC8vIHRoaXMgaXMgYW4gaW50XG5cbi8qKlxuICogRXhwb3NlIGRlcHMgZm9yIGxlZ2FjeSBjb21wYXRpYmlsaXR5XG4gKiBhbmQgc3RhbmRhbG9uZSBicm93c2VyIGFjY2Vzcy5cbiAqL1xuXG5Tb2NrZXQuU29ja2V0ID0gU29ja2V0O1xuU29ja2V0LlRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0Jyk7XG5Tb2NrZXQudHJhbnNwb3J0cyA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0cy9pbmRleCcpO1xuU29ja2V0LnBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIHRyYW5zcG9ydCBvZiB0aGUgZ2l2ZW4gdHlwZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAqIEByZXR1cm4ge1RyYW5zcG9ydH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuY3JlYXRlVHJhbnNwb3J0ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVidWcoJ2NyZWF0aW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTtcbiAgdmFyIHF1ZXJ5ID0gY2xvbmUodGhpcy5xdWVyeSk7XG5cbiAgLy8gYXBwZW5kIGVuZ2luZS5pbyBwcm90b2NvbCBpZGVudGlmaWVyXG4gIHF1ZXJ5LkVJTyA9IHBhcnNlci5wcm90b2NvbDtcblxuICAvLyB0cmFuc3BvcnQgbmFtZVxuICBxdWVyeS50cmFuc3BvcnQgPSBuYW1lO1xuXG4gIC8vIHBlci10cmFuc3BvcnQgb3B0aW9uc1xuICB2YXIgb3B0aW9ucyA9IHRoaXMudHJhbnNwb3J0T3B0aW9uc1tuYW1lXSB8fCB7fTtcblxuICAvLyBzZXNzaW9uIGlkIGlmIHdlIGFscmVhZHkgaGF2ZSBvbmVcbiAgaWYgKHRoaXMuaWQpIHF1ZXJ5LnNpZCA9IHRoaXMuaWQ7XG5cbiAgdmFyIHRyYW5zcG9ydCA9IG5ldyB0cmFuc3BvcnRzW25hbWVdKHtcbiAgICBxdWVyeTogcXVlcnksXG4gICAgc29ja2V0OiB0aGlzLFxuICAgIGFnZW50OiBvcHRpb25zLmFnZW50IHx8IHRoaXMuYWdlbnQsXG4gICAgaG9zdG5hbWU6IG9wdGlvbnMuaG9zdG5hbWUgfHwgdGhpcy5ob3N0bmFtZSxcbiAgICBwb3J0OiBvcHRpb25zLnBvcnQgfHwgdGhpcy5wb3J0LFxuICAgIHNlY3VyZTogb3B0aW9ucy5zZWN1cmUgfHwgdGhpcy5zZWN1cmUsXG4gICAgcGF0aDogb3B0aW9ucy5wYXRoIHx8IHRoaXMucGF0aCxcbiAgICBmb3JjZUpTT05QOiBvcHRpb25zLmZvcmNlSlNPTlAgfHwgdGhpcy5mb3JjZUpTT05QLFxuICAgIGpzb25wOiBvcHRpb25zLmpzb25wIHx8IHRoaXMuanNvbnAsXG4gICAgZm9yY2VCYXNlNjQ6IG9wdGlvbnMuZm9yY2VCYXNlNjQgfHwgdGhpcy5mb3JjZUJhc2U2NCxcbiAgICBlbmFibGVzWERSOiBvcHRpb25zLmVuYWJsZXNYRFIgfHwgdGhpcy5lbmFibGVzWERSLFxuICAgIHdpdGhDcmVkZW50aWFsczogb3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgfHwgdGhpcy53aXRoQ3JlZGVudGlhbHMsXG4gICAgdGltZXN0YW1wUmVxdWVzdHM6IG9wdGlvbnMudGltZXN0YW1wUmVxdWVzdHMgfHwgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyxcbiAgICB0aW1lc3RhbXBQYXJhbTogb3B0aW9ucy50aW1lc3RhbXBQYXJhbSB8fCB0aGlzLnRpbWVzdGFtcFBhcmFtLFxuICAgIHBvbGljeVBvcnQ6IG9wdGlvbnMucG9saWN5UG9ydCB8fCB0aGlzLnBvbGljeVBvcnQsXG4gICAgcGZ4OiBvcHRpb25zLnBmeCB8fCB0aGlzLnBmeCxcbiAgICBrZXk6IG9wdGlvbnMua2V5IHx8IHRoaXMua2V5LFxuICAgIHBhc3NwaHJhc2U6IG9wdGlvbnMucGFzc3BocmFzZSB8fCB0aGlzLnBhc3NwaHJhc2UsXG4gICAgY2VydDogb3B0aW9ucy5jZXJ0IHx8IHRoaXMuY2VydCxcbiAgICBjYTogb3B0aW9ucy5jYSB8fCB0aGlzLmNhLFxuICAgIGNpcGhlcnM6IG9wdGlvbnMuY2lwaGVycyB8fCB0aGlzLmNpcGhlcnMsXG4gICAgcmVqZWN0VW5hdXRob3JpemVkOiBvcHRpb25zLnJlamVjdFVuYXV0aG9yaXplZCB8fCB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCxcbiAgICBwZXJNZXNzYWdlRGVmbGF0ZTogb3B0aW9ucy5wZXJNZXNzYWdlRGVmbGF0ZSB8fCB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLFxuICAgIGV4dHJhSGVhZGVyczogb3B0aW9ucy5leHRyYUhlYWRlcnMgfHwgdGhpcy5leHRyYUhlYWRlcnMsXG4gICAgZm9yY2VOb2RlOiBvcHRpb25zLmZvcmNlTm9kZSB8fCB0aGlzLmZvcmNlTm9kZSxcbiAgICBsb2NhbEFkZHJlc3M6IG9wdGlvbnMubG9jYWxBZGRyZXNzIHx8IHRoaXMubG9jYWxBZGRyZXNzLFxuICAgIHJlcXVlc3RUaW1lb3V0OiBvcHRpb25zLnJlcXVlc3RUaW1lb3V0IHx8IHRoaXMucmVxdWVzdFRpbWVvdXQsXG4gICAgcHJvdG9jb2xzOiBvcHRpb25zLnByb3RvY29scyB8fCB2b2lkICgwKSxcbiAgICBpc1JlYWN0TmF0aXZlOiB0aGlzLmlzUmVhY3ROYXRpdmVcbiAgfSk7XG5cbiAgcmV0dXJuIHRyYW5zcG9ydDtcbn07XG5cbmZ1bmN0aW9uIGNsb25lIChvYmopIHtcbiAgdmFyIG8gPSB7fTtcbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBvW2ldID0gb2JqW2ldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbztcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyB0cmFuc3BvcnQgdG8gdXNlIGFuZCBzdGFydHMgcHJvYmUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblNvY2tldC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRyYW5zcG9ydDtcbiAgaWYgKHRoaXMucmVtZW1iZXJVcGdyYWRlICYmIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgJiYgdGhpcy50cmFuc3BvcnRzLmluZGV4T2YoJ3dlYnNvY2tldCcpICE9PSAtMSkge1xuICAgIHRyYW5zcG9ydCA9ICd3ZWJzb2NrZXQnO1xuICB9IGVsc2UgaWYgKDAgPT09IHRoaXMudHJhbnNwb3J0cy5sZW5ndGgpIHtcbiAgICAvLyBFbWl0IGVycm9yIG9uIG5leHQgdGljayBzbyBpdCBjYW4gYmUgbGlzdGVuZWQgdG9cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgJ05vIHRyYW5zcG9ydHMgYXZhaWxhYmxlJyk7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zcG9ydCA9IHRoaXMudHJhbnNwb3J0c1swXTtcbiAgfVxuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG5cbiAgLy8gUmV0cnkgd2l0aCB0aGUgbmV4dCB0cmFuc3BvcnQgaWYgdGhlIHRyYW5zcG9ydCBpcyBkaXNhYmxlZCAoanNvbnA6IGZhbHNlKVxuICB0cnkge1xuICAgIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aGlzLnRyYW5zcG9ydHMuc2hpZnQoKTtcbiAgICB0aGlzLm9wZW4oKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cmFuc3BvcnQub3BlbigpO1xuICB0aGlzLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydC4gRGlzYWJsZXMgdGhlIGV4aXN0aW5nIG9uZSAoaWYgYW55KS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNldFRyYW5zcG9ydCA9IGZ1bmN0aW9uICh0cmFuc3BvcnQpIHtcbiAgZGVidWcoJ3NldHRpbmcgdHJhbnNwb3J0ICVzJywgdHJhbnNwb3J0Lm5hbWUpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKHRoaXMudHJhbnNwb3J0KSB7XG4gICAgZGVidWcoJ2NsZWFyaW5nIGV4aXN0aW5nIHRyYW5zcG9ydCAlcycsIHRoaXMudHJhbnNwb3J0Lm5hbWUpO1xuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB9XG5cbiAgLy8gc2V0IHVwIHRyYW5zcG9ydFxuICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcblxuICAvLyBzZXQgdXAgdHJhbnNwb3J0IGxpc3RlbmVyc1xuICB0cmFuc3BvcnRcbiAgLm9uKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uRHJhaW4oKTtcbiAgfSlcbiAgLm9uKCdwYWNrZXQnLCBmdW5jdGlvbiAocGFja2V0KSB7XG4gICAgc2VsZi5vblBhY2tldChwYWNrZXQpO1xuICB9KVxuICAub24oJ2Vycm9yJywgZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoZSk7XG4gIH0pXG4gIC5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCd0cmFuc3BvcnQgY2xvc2UnKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIFByb2JlcyBhIHRyYW5zcG9ydC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUucHJvYmUgPSBmdW5jdGlvbiAobmFtZSkge1xuICBkZWJ1ZygncHJvYmluZyB0cmFuc3BvcnQgXCIlc1wiJywgbmFtZSk7XG4gIHZhciB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydChuYW1lLCB7IHByb2JlOiAxIH0pO1xuICB2YXIgZmFpbGVkID0gZmFsc2U7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gb25UcmFuc3BvcnRPcGVuICgpIHtcbiAgICBpZiAoc2VsZi5vbmx5QmluYXJ5VXBncmFkZXMpIHtcbiAgICAgIHZhciB1cGdyYWRlTG9zZXNCaW5hcnkgPSAhdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiBzZWxmLnRyYW5zcG9ydC5zdXBwb3J0c0JpbmFyeTtcbiAgICAgIGZhaWxlZCA9IGZhaWxlZCB8fCB1cGdyYWRlTG9zZXNCaW5hcnk7XG4gICAgfVxuICAgIGlmIChmYWlsZWQpIHJldHVybjtcblxuICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIG9wZW5lZCcsIG5hbWUpO1xuICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICdwaW5nJywgZGF0YTogJ3Byb2JlJyB9XSk7XG4gICAgdHJhbnNwb3J0Lm9uY2UoJ3BhY2tldCcsIGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcbiAgICAgIGlmICgncG9uZycgPT09IG1zZy50eXBlICYmICdwcm9iZScgPT09IG1zZy5kYXRhKSB7XG4gICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIHBvbmcnLCBuYW1lKTtcbiAgICAgICAgc2VsZi51cGdyYWRpbmcgPSB0cnVlO1xuICAgICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGluZycsIHRyYW5zcG9ydCk7XG4gICAgICAgIGlmICghdHJhbnNwb3J0KSByZXR1cm47XG4gICAgICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdHJhbnNwb3J0Lm5hbWU7XG5cbiAgICAgICAgZGVidWcoJ3BhdXNpbmcgY3VycmVudCB0cmFuc3BvcnQgXCIlc1wiJywgc2VsZi50cmFuc3BvcnQubmFtZSk7XG4gICAgICAgIHNlbGYudHJhbnNwb3J0LnBhdXNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKCdjbG9zZWQnID09PSBzZWxmLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICAgICAgICBkZWJ1ZygnY2hhbmdpbmcgdHJhbnNwb3J0IGFuZCBzZW5kaW5nIHVwZ3JhZGUgcGFja2V0Jyk7XG5cbiAgICAgICAgICBjbGVhbnVwKCk7XG5cbiAgICAgICAgICBzZWxmLnNldFRyYW5zcG9ydCh0cmFuc3BvcnQpO1xuICAgICAgICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICd1cGdyYWRlJyB9XSk7XG4gICAgICAgICAgc2VsZi5lbWl0KCd1cGdyYWRlJywgdHJhbnNwb3J0KTtcbiAgICAgICAgICB0cmFuc3BvcnQgPSBudWxsO1xuICAgICAgICAgIHNlbGYudXBncmFkaW5nID0gZmFsc2U7XG4gICAgICAgICAgc2VsZi5mbHVzaCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCcsIG5hbWUpO1xuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdwcm9iZSBlcnJvcicpO1xuICAgICAgICBlcnIudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgIHNlbGYuZW1pdCgndXBncmFkZUVycm9yJywgZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZyZWV6ZVRyYW5zcG9ydCAoKSB7XG4gICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgLy8gQW55IGNhbGxiYWNrIGNhbGxlZCBieSB0cmFuc3BvcnQgc2hvdWxkIGJlIGlnbm9yZWQgc2luY2Ugbm93XG4gICAgZmFpbGVkID0gdHJ1ZTtcblxuICAgIGNsZWFudXAoKTtcblxuICAgIHRyYW5zcG9ydC5jbG9zZSgpO1xuICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gIH1cblxuICAvLyBIYW5kbGUgYW55IGVycm9yIHRoYXQgaGFwcGVucyB3aGlsZSBwcm9iaW5nXG4gIGZ1bmN0aW9uIG9uZXJyb3IgKGVycikge1xuICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcigncHJvYmUgZXJyb3I6ICcgKyBlcnIpO1xuICAgIGVycm9yLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lO1xuXG4gICAgZnJlZXplVHJhbnNwb3J0KCk7XG5cbiAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBmYWlsZWQgYmVjYXVzZSBvZiBlcnJvcjogJXMnLCBuYW1lLCBlcnIpO1xuXG4gICAgc2VsZi5lbWl0KCd1cGdyYWRlRXJyb3InLCBlcnJvcik7XG4gIH1cblxuICBmdW5jdGlvbiBvblRyYW5zcG9ydENsb3NlICgpIHtcbiAgICBvbmVycm9yKCd0cmFuc3BvcnQgY2xvc2VkJyk7XG4gIH1cblxuICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgY2xvc2VkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgZnVuY3Rpb24gb25jbG9zZSAoKSB7XG4gICAgb25lcnJvcignc29ja2V0IGNsb3NlZCcpO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgc29ja2V0IGlzIHVwZ3JhZGVkIHdoaWxlIHdlJ3JlIHByb2JpbmdcbiAgZnVuY3Rpb24gb251cGdyYWRlICh0bykge1xuICAgIGlmICh0cmFuc3BvcnQgJiYgdG8ubmFtZSAhPT0gdHJhbnNwb3J0Lm5hbWUpIHtcbiAgICAgIGRlYnVnKCdcIiVzXCIgd29ya3MgLSBhYm9ydGluZyBcIiVzXCInLCB0by5uYW1lLCB0cmFuc3BvcnQubmFtZSk7XG4gICAgICBmcmVlemVUcmFuc3BvcnQoKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVycyBvbiB0aGUgdHJhbnNwb3J0IGFuZCBvbiBzZWxmXG4gIGZ1bmN0aW9uIGNsZWFudXAgKCkge1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGluZycsIG9udXBncmFkZSk7XG4gIH1cblxuICB0cmFuc3BvcnQub25jZSgnb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7XG4gIHRyYW5zcG9ydC5vbmNlKCdlcnJvcicsIG9uZXJyb3IpO1xuICB0cmFuc3BvcnQub25jZSgnY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTtcblxuICB0aGlzLm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIHRoaXMub25jZSgndXBncmFkaW5nJywgb251cGdyYWRlKTtcblxuICB0cmFuc3BvcnQub3BlbigpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBjb25uZWN0aW9uIGlzIGRlZW1lZCBvcGVuLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdzb2NrZXQgb3BlbicpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdGhpcy50cmFuc3BvcnQubmFtZTtcbiAgdGhpcy5lbWl0KCdvcGVuJyk7XG4gIHRoaXMuZmx1c2goKTtcblxuICAvLyB3ZSBjaGVjayBmb3IgYHJlYWR5U3RhdGVgIGluIGNhc2UgYW4gYG9wZW5gXG4gIC8vIGxpc3RlbmVyIGFscmVhZHkgY2xvc2VkIHRoZSBzb2NrZXRcbiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlICYmIHRoaXMudXBncmFkZSAmJiB0aGlzLnRyYW5zcG9ydC5wYXVzZSkge1xuICAgIGRlYnVnKCdzdGFydGluZyB1cGdyYWRlIHByb2JlcycpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy51cGdyYWRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMucHJvYmUodGhpcy51cGdyYWRlc1tpXSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgYSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8XG4gICAgICAnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCdzb2NrZXQgcmVjZWl2ZTogdHlwZSBcIiVzXCIsIGRhdGEgXCIlc1wiJywgcGFja2V0LnR5cGUsIHBhY2tldC5kYXRhKTtcblxuICAgIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcblxuICAgIC8vIFNvY2tldCBpcyBsaXZlIC0gYW55IHBhY2tldCBjb3VudHNcbiAgICB0aGlzLmVtaXQoJ2hlYXJ0YmVhdCcpO1xuXG4gICAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgICAgY2FzZSAnb3Blbic6XG4gICAgICAgIHRoaXMub25IYW5kc2hha2UoSlNPTi5wYXJzZShwYWNrZXQuZGF0YSkpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAncG9uZyc6XG4gICAgICAgIHRoaXMuc2V0UGluZygpO1xuICAgICAgICB0aGlzLmVtaXQoJ3BvbmcnKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignc2VydmVyIGVycm9yJyk7XG4gICAgICAgIGVyci5jb2RlID0gcGFja2V0LmRhdGE7XG4gICAgICAgIHRoaXMub25FcnJvcihlcnIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnbWVzc2FnZSc6XG4gICAgICAgIHRoaXMuZW1pdCgnZGF0YScsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgdGhpcy5lbWl0KCdtZXNzYWdlJywgcGFja2V0LmRhdGEpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZGVidWcoJ3BhY2tldCByZWNlaXZlZCB3aXRoIHNvY2tldCByZWFkeVN0YXRlIFwiJXNcIicsIHRoaXMucmVhZHlTdGF0ZSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gaGFuZHNoYWtlIGNvbXBsZXRpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGhhbmRzaGFrZSBvYmpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25IYW5kc2hha2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmVtaXQoJ2hhbmRzaGFrZScsIGRhdGEpO1xuICB0aGlzLmlkID0gZGF0YS5zaWQ7XG4gIHRoaXMudHJhbnNwb3J0LnF1ZXJ5LnNpZCA9IGRhdGEuc2lkO1xuICB0aGlzLnVwZ3JhZGVzID0gdGhpcy5maWx0ZXJVcGdyYWRlcyhkYXRhLnVwZ3JhZGVzKTtcbiAgdGhpcy5waW5nSW50ZXJ2YWwgPSBkYXRhLnBpbmdJbnRlcnZhbDtcbiAgdGhpcy5waW5nVGltZW91dCA9IGRhdGEucGluZ1RpbWVvdXQ7XG4gIHRoaXMub25PcGVuKCk7XG4gIC8vIEluIGNhc2Ugb3BlbiBoYW5kbGVyIGNsb3NlcyBzb2NrZXRcbiAgaWYgKCdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgdGhpcy5zZXRQaW5nKCk7XG5cbiAgLy8gUHJvbG9uZyBsaXZlbmVzcyBvZiBzb2NrZXQgb24gaGVhcnRiZWF0XG4gIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ2hlYXJ0YmVhdCcsIHRoaXMub25IZWFydGJlYXQpO1xuICB0aGlzLm9uKCdoZWFydGJlYXQnLCB0aGlzLm9uSGVhcnRiZWF0KTtcbn07XG5cbi8qKlxuICogUmVzZXRzIHBpbmcgdGltZW91dC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uSGVhcnRiZWF0ID0gZnVuY3Rpb24gKHRpbWVvdXQpIHtcbiAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgc2VsZi5waW5nVGltZW91dFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCdjbG9zZWQnID09PSBzZWxmLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICBzZWxmLm9uQ2xvc2UoJ3BpbmcgdGltZW91dCcpO1xuICB9LCB0aW1lb3V0IHx8IChzZWxmLnBpbmdJbnRlcnZhbCArIHNlbGYucGluZ1RpbWVvdXQpKTtcbn07XG5cbi8qKlxuICogUGluZ3Mgc2VydmVyIGV2ZXJ5IGB0aGlzLnBpbmdJbnRlcnZhbGAgYW5kIGV4cGVjdHMgcmVzcG9uc2VcbiAqIHdpdGhpbiBgdGhpcy5waW5nVGltZW91dGAgb3IgY2xvc2VzIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZXRQaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGNsZWFyVGltZW91dChzZWxmLnBpbmdJbnRlcnZhbFRpbWVyKTtcbiAgc2VsZi5waW5nSW50ZXJ2YWxUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cml0aW5nIHBpbmcgcGFja2V0IC0gZXhwZWN0aW5nIHBvbmcgd2l0aGluICVzbXMnLCBzZWxmLnBpbmdUaW1lb3V0KTtcbiAgICBzZWxmLnBpbmcoKTtcbiAgICBzZWxmLm9uSGVhcnRiZWF0KHNlbGYucGluZ1RpbWVvdXQpO1xuICB9LCBzZWxmLnBpbmdJbnRlcnZhbCk7XG59O1xuXG4vKipcbiogU2VuZHMgYSBwaW5nIHBhY2tldC5cbipcbiogQGFwaSBwcml2YXRlXG4qL1xuXG5Tb2NrZXQucHJvdG90eXBlLnBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5zZW5kUGFja2V0KCdwaW5nJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYuZW1pdCgncGluZycpO1xuICB9KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIG9uIGBkcmFpbmAgZXZlbnRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uRHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMud3JpdGVCdWZmZXIuc3BsaWNlKDAsIHRoaXMucHJldkJ1ZmZlckxlbik7XG5cbiAgLy8gc2V0dGluZyBwcmV2QnVmZmVyTGVuID0gMCBpcyB2ZXJ5IGltcG9ydGFudFxuICAvLyBmb3IgZXhhbXBsZSwgd2hlbiB1cGdyYWRpbmcsIHVwZ3JhZGUgcGFja2V0IGlzIHNlbnQgb3ZlcixcbiAgLy8gYW5kIGEgbm9uemVybyBwcmV2QnVmZmVyTGVuIGNvdWxkIGNhdXNlIHByb2JsZW1zIG9uIGBkcmFpbmBcbiAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcblxuICBpZiAoMCA9PT0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICB0aGlzLmVtaXQoJ2RyYWluJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5mbHVzaCgpO1xuICB9XG59O1xuXG4vKipcbiAqIEZsdXNoIHdyaXRlIGJ1ZmZlcnMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdjbG9zZWQnICE9PSB0aGlzLnJlYWR5U3RhdGUgJiYgdGhpcy50cmFuc3BvcnQud3JpdGFibGUgJiZcbiAgICAhdGhpcy51cGdyYWRpbmcgJiYgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICBkZWJ1ZygnZmx1c2hpbmcgJWQgcGFja2V0cyBpbiBzb2NrZXQnLCB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCk7XG4gICAgdGhpcy50cmFuc3BvcnQuc2VuZCh0aGlzLndyaXRlQnVmZmVyKTtcbiAgICAvLyBrZWVwIHRyYWNrIG9mIGN1cnJlbnQgbGVuZ3RoIG9mIHdyaXRlQnVmZmVyXG4gICAgLy8gc3BsaWNlIHdyaXRlQnVmZmVyIGFuZCBjYWxsYmFja0J1ZmZlciBvbiBgZHJhaW5gXG4gICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGg7XG4gICAgdGhpcy5lbWl0KCdmbHVzaCcpO1xuICB9XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgbWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAcmV0dXJuIHtTb2NrZXR9IGZvciBjaGFpbmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS53cml0ZSA9XG5Tb2NrZXQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAobXNnLCBvcHRpb25zLCBmbikge1xuICB0aGlzLnNlbmRQYWNrZXQoJ21lc3NhZ2UnLCBtc2csIG9wdGlvbnMsIGZuKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYWNrZXQgdHlwZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2VuZFBhY2tldCA9IGZ1bmN0aW9uICh0eXBlLCBkYXRhLCBvcHRpb25zLCBmbikge1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGRhdGEpIHtcbiAgICBmbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2Ygb3B0aW9ucykge1xuICAgIGZuID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuXG4gIGlmICgnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuY29tcHJlc3MgPSBmYWxzZSAhPT0gb3B0aW9ucy5jb21wcmVzcztcblxuICB2YXIgcGFja2V0ID0ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgZGF0YTogZGF0YSxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH07XG4gIHRoaXMuZW1pdCgncGFja2V0Q3JlYXRlJywgcGFja2V0KTtcbiAgdGhpcy53cml0ZUJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIGlmIChmbikgdGhpcy5vbmNlKCdmbHVzaCcsIGZuKTtcbiAgdGhpcy5mbHVzaCgpO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIGNvbm5lY3Rpb24uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NpbmcnO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgICAgICB3YWl0Rm9yVXBncmFkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy51cGdyYWRpbmcpIHtcbiAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2UgKCkge1xuICAgIHNlbGYub25DbG9zZSgnZm9yY2VkIGNsb3NlJyk7XG4gICAgZGVidWcoJ3NvY2tldCBjbG9zaW5nIC0gdGVsbGluZyB0cmFuc3BvcnQgdG8gY2xvc2UnKTtcbiAgICBzZWxmLnRyYW5zcG9ydC5jbG9zZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYW51cEFuZENsb3NlICgpIHtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCd1cGdyYWRlJywgY2xlYW51cEFuZENsb3NlKTtcbiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCd1cGdyYWRlRXJyb3InLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIGNsb3NlKCk7XG4gIH1cblxuICBmdW5jdGlvbiB3YWl0Rm9yVXBncmFkZSAoKSB7XG4gICAgLy8gd2FpdCBmb3IgdXBncmFkZSB0byBmaW5pc2ggc2luY2Ugd2UgY2FuJ3Qgc2VuZCBwYWNrZXRzIHdoaWxlIHBhdXNpbmcgYSB0cmFuc3BvcnRcbiAgICBzZWxmLm9uY2UoJ3VwZ3JhZGUnLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIHNlbGYub25jZSgndXBncmFkZUVycm9yJywgY2xlYW51cEFuZENsb3NlKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgZXJyb3JcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIGRlYnVnKCdzb2NrZXQgZXJyb3IgJWonLCBlcnIpO1xuICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB0aGlzLm9uQ2xvc2UoJ3RyYW5zcG9ydCBlcnJvcicsIGVycik7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAocmVhc29uLCBkZXNjKSB7XG4gIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnY2xvc2luZycgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCdzb2NrZXQgY2xvc2Ugd2l0aCByZWFzb246IFwiJXNcIicsIHJlYXNvbik7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gY2xlYXIgdGltZXJzXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ0ludGVydmFsVGltZXIpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnBpbmdUaW1lb3V0VGltZXIpO1xuXG4gICAgLy8gc3RvcCBldmVudCBmcm9tIGZpcmluZyBhZ2FpbiBmb3IgdHJhbnNwb3J0XG4gICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCdjbG9zZScpO1xuXG4gICAgLy8gZW5zdXJlIHRyYW5zcG9ydCB3b24ndCBzdGF5IG9wZW5cbiAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuXG4gICAgLy8gaWdub3JlIGZ1cnRoZXIgdHJhbnNwb3J0IGNvbW11bmljYXRpb25cbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcblxuICAgIC8vIHNldCByZWFkeSBzdGF0ZVxuICAgIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuXG4gICAgLy8gY2xlYXIgc2Vzc2lvbiBpZFxuICAgIHRoaXMuaWQgPSBudWxsO1xuXG4gICAgLy8gZW1pdCBjbG9zZSBldmVudFxuICAgIHRoaXMuZW1pdCgnY2xvc2UnLCByZWFzb24sIGRlc2MpO1xuXG4gICAgLy8gY2xlYW4gYnVmZmVycyBhZnRlciwgc28gdXNlcnMgY2FuIHN0aWxsXG4gICAgLy8gZ3JhYiB0aGUgYnVmZmVycyBvbiBgY2xvc2VgIGV2ZW50XG4gICAgc2VsZi53cml0ZUJ1ZmZlciA9IFtdO1xuICAgIHNlbGYucHJldkJ1ZmZlckxlbiA9IDA7XG4gIH1cbn07XG5cbi8qKlxuICogRmlsdGVycyB1cGdyYWRlcywgcmV0dXJuaW5nIG9ubHkgdGhvc2UgbWF0Y2hpbmcgY2xpZW50IHRyYW5zcG9ydHMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gc2VydmVyIHVwZ3JhZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5maWx0ZXJVcGdyYWRlcyA9IGZ1bmN0aW9uICh1cGdyYWRlcykge1xuICB2YXIgZmlsdGVyZWRVcGdyYWRlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgaiA9IHVwZ3JhZGVzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGlmICh+aW5kZXgodGhpcy50cmFuc3BvcnRzLCB1cGdyYWRlc1tpXSkpIGZpbHRlcmVkVXBncmFkZXMucHVzaCh1cGdyYWRlc1tpXSk7XG4gIH1cbiAgcmV0dXJuIGZpbHRlcmVkVXBncmFkZXM7XG59O1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzXG4gKi9cblxudmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG52YXIgWEhSID0gcmVxdWlyZSgnLi9wb2xsaW5nLXhocicpO1xudmFyIEpTT05QID0gcmVxdWlyZSgnLi9wb2xsaW5nLWpzb25wJyk7XG52YXIgd2Vic29ja2V0ID0gcmVxdWlyZSgnLi93ZWJzb2NrZXQnKTtcblxuLyoqXG4gKiBFeHBvcnQgdHJhbnNwb3J0cy5cbiAqL1xuXG5leHBvcnRzLnBvbGxpbmcgPSBwb2xsaW5nO1xuZXhwb3J0cy53ZWJzb2NrZXQgPSB3ZWJzb2NrZXQ7XG5cbi8qKlxuICogUG9sbGluZyB0cmFuc3BvcnQgcG9seW1vcnBoaWMgY29uc3RydWN0b3IuXG4gKiBEZWNpZGVzIG9uIHhociB2cyBqc29ucCBiYXNlZCBvbiBmZWF0dXJlIGRldGVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwb2xsaW5nIChvcHRzKSB7XG4gIHZhciB4aHI7XG4gIHZhciB4ZCA9IGZhbHNlO1xuICB2YXIgeHMgPSBmYWxzZTtcbiAgdmFyIGpzb25wID0gZmFsc2UgIT09IG9wdHMuanNvbnA7XG5cbiAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgaXNTU0wgPSAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgdmFyIHBvcnQgPSBsb2NhdGlvbi5wb3J0O1xuXG4gICAgLy8gc29tZSB1c2VyIGFnZW50cyBoYXZlIGVtcHR5IGBsb2NhdGlvbi5wb3J0YFxuICAgIGlmICghcG9ydCkge1xuICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7XG4gICAgfVxuXG4gICAgeGQgPSBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSB8fCBwb3J0ICE9PSBvcHRzLnBvcnQ7XG4gICAgeHMgPSBvcHRzLnNlY3VyZSAhPT0gaXNTU0w7XG4gIH1cblxuICBvcHRzLnhkb21haW4gPSB4ZDtcbiAgb3B0cy54c2NoZW1lID0geHM7XG4gIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtcblxuICBpZiAoJ29wZW4nIGluIHhociAmJiAhb3B0cy5mb3JjZUpTT05QKSB7XG4gICAgcmV0dXJuIG5ldyBYSFIob3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFqc29ucCkgdGhyb3cgbmV3IEVycm9yKCdKU09OUCBkaXNhYmxlZCcpO1xuICAgIHJldHVybiBuZXcgSlNPTlAob3B0cyk7XG4gIH1cbn1cbiIsIi8vIGJyb3dzZXIgc2hpbSBmb3IgeG1saHR0cHJlcXVlc3QgbW9kdWxlXG5cbnZhciBoYXNDT1JTID0gcmVxdWlyZSgnaGFzLWNvcnMnKTtcbnZhciBnbG9iYWxUaGlzID0gcmVxdWlyZSgnLi9nbG9iYWxUaGlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgdmFyIHhkb21haW4gPSBvcHRzLnhkb21haW47XG5cbiAgLy8gc2NoZW1lIG11c3QgYmUgc2FtZSB3aGVuIHVzaWduIFhEb21haW5SZXF1ZXN0XG4gIC8vIGh0dHA6Ly9ibG9ncy5tc2RuLmNvbS9iL2llaW50ZXJuYWxzL2FyY2hpdmUvMjAxMC8wNS8xMy94ZG9tYWlucmVxdWVzdC1yZXN0cmljdGlvbnMtbGltaXRhdGlvbnMtYW5kLXdvcmthcm91bmRzLmFzcHhcbiAgdmFyIHhzY2hlbWUgPSBvcHRzLnhzY2hlbWU7XG5cbiAgLy8gWERvbWFpblJlcXVlc3QgaGFzIGEgZmxvdyBvZiBub3Qgc2VuZGluZyBjb29raWUsIHRoZXJlZm9yZSBpdCBzaG91bGQgYmUgZGlzYWJsZWQgYXMgYSBkZWZhdWx0LlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9lbmdpbmUuaW8tY2xpZW50L3B1bGwvMjE3XG4gIHZhciBlbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO1xuXG4gIC8vIFhNTEh0dHBSZXF1ZXN0IGNhbiBiZSBkaXNhYmxlZCBvbiBJRVxuICB0cnkge1xuICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICYmICgheGRvbWFpbiB8fCBoYXNDT1JTKSkge1xuICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkgeyB9XG5cbiAgLy8gVXNlIFhEb21haW5SZXF1ZXN0IGZvciBJRTggaWYgZW5hYmxlc1hEUiBpcyB0cnVlXG4gIC8vIGJlY2F1c2UgbG9hZGluZyBiYXIga2VlcHMgZmxhc2hpbmcgd2hlbiB1c2luZyBqc29ucC1wb2xsaW5nXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS95dWppb3Nha2Evc29ja2UuaW8taWU4LWxvYWRpbmctZXhhbXBsZVxuICB0cnkge1xuICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIFhEb21haW5SZXF1ZXN0ICYmICF4c2NoZW1lICYmIGVuYWJsZXNYRFIpIHtcbiAgICAgIHJldHVybiBuZXcgWERvbWFpblJlcXVlc3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHsgfVxuXG4gIGlmICgheGRvbWFpbikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbmV3IGdsb2JhbFRoaXNbWydBY3RpdmUnXS5jb25jYXQoJ09iamVjdCcpLmpvaW4oJ1gnKV0oJ01pY3Jvc29mdC5YTUxIVFRQJyk7XG4gICAgfSBjYXRjaCAoZSkgeyB9XG4gIH1cbn07XG4iLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKlxuICogTG9naWMgYm9ycm93ZWQgZnJvbSBNb2Rlcm5penI6XG4gKlxuICogICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9jb3JzLmpzXG4gKi9cblxudHJ5IHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmXG4gICAgJ3dpdGhDcmVkZW50aWFscycgaW4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG59IGNhdGNoIChlcnIpIHtcbiAgLy8gaWYgWE1MSHR0cCBzdXBwb3J0IGlzIGRpc2FibGVkIGluIElFIHRoZW4gaXQgd2lsbCB0aHJvd1xuICAvLyB3aGVuIHRyeWluZyB0byBjcmVhdGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBzZWxmO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctZnVuY1xuICB9XG59KSgpO1xuIiwiLyogZ2xvYmFsIGF0dGFjaEV2ZW50ICovXG5cbi8qKlxuICogTW9kdWxlIHJlcXVpcmVtZW50cy5cbiAqL1xuXG52YXIgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCd4bWxodHRwcmVxdWVzdC1zc2wnKTtcbnZhciBQb2xsaW5nID0gcmVxdWlyZSgnLi9wb2xsaW5nJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OnBvbGxpbmcteGhyJyk7XG52YXIgZ2xvYmFsVGhpcyA9IHJlcXVpcmUoJy4uL2dsb2JhbFRoaXMnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFhIUjtcbm1vZHVsZS5leHBvcnRzLlJlcXVlc3QgPSBSZXF1ZXN0O1xuXG4vKipcbiAqIEVtcHR5IGZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gZW1wdHkgKCkge31cblxuLyoqXG4gKiBYSFIgUG9sbGluZyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBYSFIgKG9wdHMpIHtcbiAgUG9sbGluZy5jYWxsKHRoaXMsIG9wdHMpO1xuICB0aGlzLnJlcXVlc3RUaW1lb3V0ID0gb3B0cy5yZXF1ZXN0VGltZW91dDtcbiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcblxuICBpZiAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBpc1NTTCA9ICdodHRwczonID09PSBsb2NhdGlvbi5wcm90b2NvbDtcbiAgICB2YXIgcG9ydCA9IGxvY2F0aW9uLnBvcnQ7XG5cbiAgICAvLyBzb21lIHVzZXIgYWdlbnRzIGhhdmUgZW1wdHkgYGxvY2F0aW9uLnBvcnRgXG4gICAgaWYgKCFwb3J0KSB7XG4gICAgICBwb3J0ID0gaXNTU0wgPyA0NDMgOiA4MDtcbiAgICB9XG5cbiAgICB0aGlzLnhkID0gKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0cy5ob3N0bmFtZSAhPT0gbG9jYXRpb24uaG9zdG5hbWUpIHx8XG4gICAgICBwb3J0ICE9PSBvcHRzLnBvcnQ7XG4gICAgdGhpcy54cyA9IG9wdHMuc2VjdXJlICE9PSBpc1NTTDtcbiAgfVxufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gUG9sbGluZy5cbiAqL1xuXG5pbmhlcml0KFhIUiwgUG9sbGluZyk7XG5cbi8qKlxuICogWEhSIHN1cHBvcnRzIGJpbmFyeVxuICovXG5cblhIUi5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnkgPSB0cnVlO1xuXG4vKipcbiAqIENyZWF0ZXMgYSByZXF1ZXN0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2RcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblhIUi5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICBvcHRzLnVyaSA9IHRoaXMudXJpKCk7XG4gIG9wdHMueGQgPSB0aGlzLnhkO1xuICBvcHRzLnhzID0gdGhpcy54cztcbiAgb3B0cy5hZ2VudCA9IHRoaXMuYWdlbnQgfHwgZmFsc2U7XG4gIG9wdHMuc3VwcG9ydHNCaW5hcnkgPSB0aGlzLnN1cHBvcnRzQmluYXJ5O1xuICBvcHRzLmVuYWJsZXNYRFIgPSB0aGlzLmVuYWJsZXNYRFI7XG4gIG9wdHMud2l0aENyZWRlbnRpYWxzID0gdGhpcy53aXRoQ3JlZGVudGlhbHM7XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMucGZ4ID0gdGhpcy5wZng7XG4gIG9wdHMua2V5ID0gdGhpcy5rZXk7XG4gIG9wdHMucGFzc3BocmFzZSA9IHRoaXMucGFzc3BocmFzZTtcbiAgb3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O1xuICBvcHRzLmNhID0gdGhpcy5jYTtcbiAgb3B0cy5jaXBoZXJzID0gdGhpcy5jaXBoZXJzO1xuICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO1xuICBvcHRzLnJlcXVlc3RUaW1lb3V0ID0gdGhpcy5yZXF1ZXN0VGltZW91dDtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICBvcHRzLmV4dHJhSGVhZGVycyA9IHRoaXMuZXh0cmFIZWFkZXJzO1xuXG4gIHJldHVybiBuZXcgUmVxdWVzdChvcHRzKTtcbn07XG5cbi8qKlxuICogU2VuZHMgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSB0byBzZW5kLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGVkIHVwb24gZmx1c2guXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5YSFIucHJvdG90eXBlLmRvV3JpdGUgPSBmdW5jdGlvbiAoZGF0YSwgZm4pIHtcbiAgdmFyIGlzQmluYXJ5ID0gdHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnICYmIGRhdGEgIT09IHVuZGVmaW5lZDtcbiAgdmFyIHJlcSA9IHRoaXMucmVxdWVzdCh7IG1ldGhvZDogJ1BPU1QnLCBkYXRhOiBkYXRhLCBpc0JpbmFyeTogaXNCaW5hcnkgfSk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmVxLm9uKCdzdWNjZXNzJywgZm4pO1xuICByZXEub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgIHNlbGYub25FcnJvcigneGhyIHBvc3QgZXJyb3InLCBlcnIpO1xuICB9KTtcbiAgdGhpcy5zZW5kWGhyID0gcmVxO1xufTtcblxuLyoqXG4gKiBTdGFydHMgYSBwb2xsIGN5Y2xlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblhIUi5wcm90b3R5cGUuZG9Qb2xsID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygneGhyIHBvbGwnKTtcbiAgdmFyIHJlcSA9IHRoaXMucmVxdWVzdCgpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJlcS5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgc2VsZi5vbkRhdGEoZGF0YSk7XG4gIH0pO1xuICByZXEub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgIHNlbGYub25FcnJvcigneGhyIHBvbGwgZXJyb3InLCBlcnIpO1xuICB9KTtcbiAgdGhpcy5wb2xsWGhyID0gcmVxO1xufTtcblxuLyoqXG4gKiBSZXF1ZXN0IGNvbnN0cnVjdG9yXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gUmVxdWVzdCAob3B0cykge1xuICB0aGlzLm1ldGhvZCA9IG9wdHMubWV0aG9kIHx8ICdHRVQnO1xuICB0aGlzLnVyaSA9IG9wdHMudXJpO1xuICB0aGlzLnhkID0gISFvcHRzLnhkO1xuICB0aGlzLnhzID0gISFvcHRzLnhzO1xuICB0aGlzLmFzeW5jID0gZmFsc2UgIT09IG9wdHMuYXN5bmM7XG4gIHRoaXMuZGF0YSA9IHVuZGVmaW5lZCAhPT0gb3B0cy5kYXRhID8gb3B0cy5kYXRhIDogbnVsbDtcbiAgdGhpcy5hZ2VudCA9IG9wdHMuYWdlbnQ7XG4gIHRoaXMuaXNCaW5hcnkgPSBvcHRzLmlzQmluYXJ5O1xuICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gb3B0cy5zdXBwb3J0c0JpbmFyeTtcbiAgdGhpcy5lbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO1xuICB0aGlzLndpdGhDcmVkZW50aWFscyA9IG9wdHMud2l0aENyZWRlbnRpYWxzO1xuICB0aGlzLnJlcXVlc3RUaW1lb3V0ID0gb3B0cy5yZXF1ZXN0VGltZW91dDtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5wZnggPSBvcHRzLnBmeDtcbiAgdGhpcy5rZXkgPSBvcHRzLmtleTtcbiAgdGhpcy5wYXNzcGhyYXNlID0gb3B0cy5wYXNzcGhyYXNlO1xuICB0aGlzLmNlcnQgPSBvcHRzLmNlcnQ7XG4gIHRoaXMuY2EgPSBvcHRzLmNhO1xuICB0aGlzLmNpcGhlcnMgPSBvcHRzLmNpcGhlcnM7XG4gIHRoaXMucmVqZWN0VW5hdXRob3JpemVkID0gb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcblxuICB0aGlzLmNyZWF0ZSgpO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihSZXF1ZXN0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogQ3JlYXRlcyB0aGUgWEhSIG9iamVjdCBhbmQgc2VuZHMgdGhlIHJlcXVlc3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgb3B0cyA9IHsgYWdlbnQ6IHRoaXMuYWdlbnQsIHhkb21haW46IHRoaXMueGQsIHhzY2hlbWU6IHRoaXMueHMsIGVuYWJsZXNYRFI6IHRoaXMuZW5hYmxlc1hEUiB9O1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICBvcHRzLnBmeCA9IHRoaXMucGZ4O1xuICBvcHRzLmtleSA9IHRoaXMua2V5O1xuICBvcHRzLnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2U7XG4gIG9wdHMuY2VydCA9IHRoaXMuY2VydDtcbiAgb3B0cy5jYSA9IHRoaXMuY2E7XG4gIG9wdHMuY2lwaGVycyA9IHRoaXMuY2lwaGVycztcbiAgb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDtcblxuICB2YXIgeGhyID0gdGhpcy54aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qob3B0cyk7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0cnkge1xuICAgIGRlYnVnKCd4aHIgb3BlbiAlczogJXMnLCB0aGlzLm1ldGhvZCwgdGhpcy51cmkpO1xuICAgIHhoci5vcGVuKHRoaXMubWV0aG9kLCB0aGlzLnVyaSwgdGhpcy5hc3luYyk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0aGlzLmV4dHJhSGVhZGVycykge1xuICAgICAgICB4aHIuc2V0RGlzYWJsZUhlYWRlckNoZWNrICYmIHhoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sodHJ1ZSk7XG4gICAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5leHRyYUhlYWRlcnMpIHtcbiAgICAgICAgICBpZiAodGhpcy5leHRyYUhlYWRlcnMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGksIHRoaXMuZXh0cmFIZWFkZXJzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgaWYgKCdQT1NUJyA9PT0gdGhpcy5tZXRob2QpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICh0aGlzLmlzQmluYXJ5KSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJyovKicpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAvLyBpZTYgY2hlY2tcbiAgICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdGhpcy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVxdWVzdFRpbWVvdXQpIHtcbiAgICAgIHhoci50aW1lb3V0ID0gdGhpcy5yZXF1ZXN0VGltZW91dDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5oYXNYRFIoKSkge1xuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5vbkxvYWQoKTtcbiAgICAgIH07XG4gICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5vbkVycm9yKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSAyKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBjb250ZW50VHlwZSA9IHhoci5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1UeXBlJyk7XG4gICAgICAgICAgICBpZiAoc2VsZi5zdXBwb3J0c0JpbmFyeSAmJiBjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScgfHwgY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07IGNoYXJzZXQ9VVRGLTgnKSB7XG4gICAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKDQgIT09IHhoci5yZWFkeVN0YXRlKSByZXR1cm47XG4gICAgICAgIGlmICgyMDAgPT09IHhoci5zdGF0dXMgfHwgMTIyMyA9PT0geGhyLnN0YXR1cykge1xuICAgICAgICAgIHNlbGYub25Mb2FkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBgZXJyb3JgIGV2ZW50IGhhbmRsZXIgdGhhdCdzIHVzZXItc2V0XG4gICAgICAgICAgLy8gZG9lcyBub3QgdGhyb3cgaW4gdGhlIHNhbWUgdGljayBhbmQgZ2V0cyBjYXVnaHQgaGVyZVxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5vbkVycm9yKHR5cGVvZiB4aHIuc3RhdHVzID09PSAnbnVtYmVyJyA/IHhoci5zdGF0dXMgOiAwKTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBkZWJ1ZygneGhyIGRhdGEgJXMnLCB0aGlzLmRhdGEpO1xuICAgIHhoci5zZW5kKHRoaXMuZGF0YSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBOZWVkIHRvIGRlZmVyIHNpbmNlIC5jcmVhdGUoKSBpcyBjYWxsZWQgZGlyZWN0bHkgZmhyb20gdGhlIGNvbnN0cnVjdG9yXG4gICAgLy8gYW5kIHRodXMgdGhlICdlcnJvcicgZXZlbnQgY2FuIG9ubHkgYmUgb25seSBib3VuZCAqYWZ0ZXIqIHRoaXMgZXhjZXB0aW9uXG4gICAgLy8gb2NjdXJzLiAgVGhlcmVmb3JlLCBhbHNvLCB3ZSBjYW5ub3QgdGhyb3cgaGVyZSBhdCBhbGwuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLm9uRXJyb3IoZSk7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aGlzLmluZGV4ID0gUmVxdWVzdC5yZXF1ZXN0c0NvdW50Kys7XG4gICAgUmVxdWVzdC5yZXF1ZXN0c1t0aGlzLmluZGV4XSA9IHRoaXM7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc3VjY2Vzc2Z1bCByZXNwb25zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vblN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdCgnc3VjY2VzcycpO1xuICB0aGlzLmNsZWFudXAoKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIGlmIHdlIGhhdmUgZGF0YS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmVtaXQoJ2RhdGEnLCBkYXRhKTtcbiAgdGhpcy5vblN1Y2Nlc3MoKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIHRoaXMuY2xlYW51cCh0cnVlKTtcbn07XG5cbi8qKlxuICogQ2xlYW5zIHVwIGhvdXNlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoZnJvbUVycm9yKSB7XG4gIGlmICgndW5kZWZpbmVkJyA9PT0gdHlwZW9mIHRoaXMueGhyIHx8IG51bGwgPT09IHRoaXMueGhyKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIHhtbGh0dHByZXF1ZXN0XG4gIGlmICh0aGlzLmhhc1hEUigpKSB7XG4gICAgdGhpcy54aHIub25sb2FkID0gdGhpcy54aHIub25lcnJvciA9IGVtcHR5O1xuICB9IGVsc2Uge1xuICAgIHRoaXMueGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGVtcHR5O1xuICB9XG5cbiAgaWYgKGZyb21FcnJvcikge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLnhoci5hYm9ydCgpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cblxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGRlbGV0ZSBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdO1xuICB9XG5cbiAgdGhpcy54aHIgPSBudWxsO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBsb2FkLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uTG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGRhdGE7XG4gIHRyeSB7XG4gICAgdmFyIGNvbnRlbnRUeXBlO1xuICAgIHRyeSB7XG4gICAgICBjb250ZW50VHlwZSA9IHRoaXMueGhyLmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LVR5cGUnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIGlmIChjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScgfHwgY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07IGNoYXJzZXQ9VVRGLTgnKSB7XG4gICAgICBkYXRhID0gdGhpcy54aHIucmVzcG9uc2UgfHwgdGhpcy54aHIucmVzcG9uc2VUZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhID0gdGhpcy54aHIucmVzcG9uc2VUZXh0O1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMub25FcnJvcihlKTtcbiAgfVxuICBpZiAobnVsbCAhPSBkYXRhKSB7XG4gICAgdGhpcy5vbkRhdGEoZGF0YSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgaXQgaGFzIFhEb21haW5SZXF1ZXN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmhhc1hEUiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiBYRG9tYWluUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcgJiYgIXRoaXMueHMgJiYgdGhpcy5lbmFibGVzWERSO1xufTtcblxuLyoqXG4gKiBBYm9ydHMgdGhlIHJlcXVlc3QuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jbGVhbnVwKCk7XG59O1xuXG4vKipcbiAqIEFib3J0cyBwZW5kaW5nIHJlcXVlc3RzIHdoZW4gdW5sb2FkaW5nIHRoZSB3aW5kb3cuIFRoaXMgaXMgbmVlZGVkIHRvIHByZXZlbnRcbiAqIG1lbW9yeSBsZWFrcyAoZS5nLiB3aGVuIHVzaW5nIElFKSBhbmQgdG8gZW5zdXJlIHRoYXQgbm8gc3B1cmlvdXMgZXJyb3IgaXNcbiAqIGVtaXR0ZWQuXG4gKi9cblxuUmVxdWVzdC5yZXF1ZXN0c0NvdW50ID0gMDtcblJlcXVlc3QucmVxdWVzdHMgPSB7fTtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgaWYgKHR5cGVvZiBhdHRhY2hFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGF0dGFjaEV2ZW50KCdvbnVubG9hZCcsIHVubG9hZEhhbmRsZXIpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHRlcm1pbmF0aW9uRXZlbnQgPSAnb25wYWdlaGlkZScgaW4gZ2xvYmFsVGhpcyA/ICdwYWdlaGlkZScgOiAndW5sb2FkJztcbiAgICBhZGRFdmVudExpc3RlbmVyKHRlcm1pbmF0aW9uRXZlbnQsIHVubG9hZEhhbmRsZXIsIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bmxvYWRIYW5kbGVyICgpIHtcbiAgZm9yICh2YXIgaSBpbiBSZXF1ZXN0LnJlcXVlc3RzKSB7XG4gICAgaWYgKFJlcXVlc3QucmVxdWVzdHMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIFJlcXVlc3QucmVxdWVzdHNbaV0uYWJvcnQoKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi4vdHJhbnNwb3J0Jyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgeWVhc3QgPSByZXF1aXJlKCd5ZWFzdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBQb2xsaW5nO1xuXG4vKipcbiAqIElzIFhIUjIgc3VwcG9ydGVkP1xuICovXG5cbnZhciBoYXNYSFIyID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG4gIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoeyB4ZG9tYWluOiBmYWxzZSB9KTtcbiAgcmV0dXJuIG51bGwgIT0geGhyLnJlc3BvbnNlVHlwZTtcbn0pKCk7XG5cbi8qKlxuICogUG9sbGluZyBpbnRlcmZhY2UuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIGZvcmNlQmFzZTY0ID0gKG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NCk7XG4gIGlmICghaGFzWEhSMiB8fCBmb3JjZUJhc2U2NCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuICBUcmFuc3BvcnQuY2FsbCh0aGlzLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFRyYW5zcG9ydC5cbiAqL1xuXG5pbmhlcml0KFBvbGxpbmcsIFRyYW5zcG9ydCk7XG5cbi8qKlxuICogVHJhbnNwb3J0IG5hbWUuXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUubmFtZSA9ICdwb2xsaW5nJztcblxuLyoqXG4gKiBPcGVucyB0aGUgc29ja2V0ICh0cmlnZ2VycyBwb2xsaW5nKS4gV2Ugd3JpdGUgYSBQSU5HIG1lc3NhZ2UgdG8gZGV0ZXJtaW5lXG4gKiB3aGVuIHRoZSB0cmFuc3BvcnQgaXMgb3Blbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucG9sbCgpO1xufTtcblxuLyoqXG4gKiBQYXVzZXMgcG9sbGluZy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB1cG9uIGJ1ZmZlcnMgYXJlIGZsdXNoZWQgYW5kIHRyYW5zcG9ydCBpcyBwYXVzZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKG9uUGF1c2UpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdwYXVzaW5nJztcblxuICBmdW5jdGlvbiBwYXVzZSAoKSB7XG4gICAgZGVidWcoJ3BhdXNlZCcpO1xuICAgIHNlbGYucmVhZHlTdGF0ZSA9ICdwYXVzZWQnO1xuICAgIG9uUGF1c2UoKTtcbiAgfVxuXG4gIGlmICh0aGlzLnBvbGxpbmcgfHwgIXRoaXMud3JpdGFibGUpIHtcbiAgICB2YXIgdG90YWwgPSAwO1xuXG4gICAgaWYgKHRoaXMucG9sbGluZykge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgcG9sbGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ3BvbGxDb21wbGV0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVidWcoJ3ByZS1wYXVzZSBwb2xsaW5nIGNvbXBsZXRlJyk7XG4gICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy53cml0YWJsZSkge1xuICAgICAgZGVidWcoJ3dlIGFyZSBjdXJyZW50bHkgd3JpdGluZyAtIHdhaXRpbmcgdG8gcGF1c2UnKTtcbiAgICAgIHRvdGFsKys7XG4gICAgICB0aGlzLm9uY2UoJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWJ1ZygncHJlLXBhdXNlIHdyaXRpbmcgY29tcGxldGUnKTtcbiAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBhdXNlKCk7XG4gIH1cbn07XG5cbi8qKlxuICogU3RhcnRzIHBvbGxpbmcgY3ljbGUuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5wb2xsID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygncG9sbGluZycpO1xuICB0aGlzLnBvbGxpbmcgPSB0cnVlO1xuICB0aGlzLmRvUG9sbCgpO1xuICB0aGlzLmVtaXQoJ3BvbGwnKTtcbn07XG5cbi8qKlxuICogT3ZlcmxvYWRzIG9uRGF0YSB0byBkZXRlY3QgcGF5bG9hZHMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBkZWJ1ZygncG9sbGluZyBnb3QgZGF0YSAlcycsIGRhdGEpO1xuICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAocGFja2V0LCBpbmRleCwgdG90YWwpIHtcbiAgICAvLyBpZiBpdHMgdGhlIGZpcnN0IG1lc3NhZ2Ugd2UgY29uc2lkZXIgdGhlIHRyYW5zcG9ydCBvcGVuXG4gICAgaWYgKCdvcGVuaW5nJyA9PT0gc2VsZi5yZWFkeVN0YXRlICYmIHBhY2tldC50eXBlID09PSAnb3BlbicpIHtcbiAgICAgIHNlbGYub25PcGVuKCk7XG4gICAgfVxuXG4gICAgLy8gaWYgaXRzIGEgY2xvc2UgcGFja2V0LCB3ZSBjbG9zZSB0aGUgb25nb2luZyByZXF1ZXN0c1xuICAgIGlmICgnY2xvc2UnID09PSBwYWNrZXQudHlwZSkge1xuICAgICAgc2VsZi5vbkNsb3NlKCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gb3RoZXJ3aXNlIGJ5cGFzcyBvbkRhdGEgYW5kIGhhbmRsZSB0aGUgbWVzc2FnZVxuICAgIHNlbGYub25QYWNrZXQocGFja2V0KTtcbiAgfTtcblxuICAvLyBkZWNvZGUgcGF5bG9hZFxuICBwYXJzZXIuZGVjb2RlUGF5bG9hZChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlLCBjYWxsYmFjayk7XG5cbiAgLy8gaWYgYW4gZXZlbnQgZGlkIG5vdCB0cmlnZ2VyIGNsb3NpbmdcbiAgaWYgKCdjbG9zZWQnICE9PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAvLyBpZiB3ZSBnb3QgZGF0YSB3ZSdyZSBub3QgcG9sbGluZ1xuICAgIHRoaXMucG9sbGluZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncG9sbENvbXBsZXRlJyk7XG5cbiAgICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgIHRoaXMucG9sbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1ZygnaWdub3JpbmcgcG9sbCAtIHRyYW5zcG9ydCBzdGF0ZSBcIiVzXCInLCB0aGlzLnJlYWR5U3RhdGUpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBGb3IgcG9sbGluZywgc2VuZCBhIGNsb3NlIHBhY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gY2xvc2UgKCkge1xuICAgIGRlYnVnKCd3cml0aW5nIGNsb3NlIHBhY2tldCcpO1xuICAgIHNlbGYud3JpdGUoW3sgdHlwZTogJ2Nsb3NlJyB9XSk7XG4gIH1cblxuICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICBkZWJ1ZygndHJhbnNwb3J0IG9wZW4gLSBjbG9zaW5nJyk7XG4gICAgY2xvc2UoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpbiBjYXNlIHdlJ3JlIHRyeWluZyB0byBjbG9zZSB3aGlsZVxuICAgIC8vIGhhbmRzaGFraW5nIGlzIGluIHByb2dyZXNzIChHSC0xNjQpXG4gICAgZGVidWcoJ3RyYW5zcG9ydCBub3Qgb3BlbiAtIGRlZmVycmluZyBjbG9zZScpO1xuICAgIHRoaXMub25jZSgnb3BlbicsIGNsb3NlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXcml0ZXMgYSBwYWNrZXRzIHBheWxvYWQuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGF0YSBwYWNrZXRzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkcmFpbiBjYWxsYmFja1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAocGFja2V0cykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcbiAgdmFyIGNhbGxiYWNrZm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi53cml0YWJsZSA9IHRydWU7XG4gICAgc2VsZi5lbWl0KCdkcmFpbicpO1xuICB9O1xuXG4gIHBhcnNlci5lbmNvZGVQYXlsb2FkKHBhY2tldHMsIHRoaXMuc3VwcG9ydHNCaW5hcnksIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgc2VsZi5kb1dyaXRlKGRhdGEsIGNhbGxiYWNrZm4pO1xuICB9KTtcbn07XG5cbi8qKlxuICogR2VuZXJhdGVzIHVyaSBmb3IgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS51cmkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gIHZhciBzY2hlbWEgPSB0aGlzLnNlY3VyZSA/ICdodHRwcycgOiAnaHR0cCc7XG4gIHZhciBwb3J0ID0gJyc7XG5cbiAgLy8gY2FjaGUgYnVzdGluZyBpcyBmb3JjZWRcbiAgaWYgKGZhbHNlICE9PSB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzKSB7XG4gICAgcXVlcnlbdGhpcy50aW1lc3RhbXBQYXJhbV0gPSB5ZWFzdCgpO1xuICB9XG5cbiAgaWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5ICYmICFxdWVyeS5zaWQpIHtcbiAgICBxdWVyeS5iNjQgPSAxO1xuICB9XG5cbiAgcXVlcnkgPSBwYXJzZXFzLmVuY29kZShxdWVyeSk7XG5cbiAgLy8gYXZvaWQgcG9ydCBpZiBkZWZhdWx0IGZvciBzY2hlbWFcbiAgaWYgKHRoaXMucG9ydCAmJiAoKCdodHRwcycgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gNDQzKSB8fFxuICAgICAoJ2h0dHAnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDgwKSkpIHtcbiAgICBwb3J0ID0gJzonICsgdGhpcy5wb3J0O1xuICB9XG5cbiAgLy8gcHJlcGVuZCA/IHRvIHF1ZXJ5XG4gIGlmIChxdWVyeS5sZW5ndGgpIHtcbiAgICBxdWVyeSA9ICc/JyArIHF1ZXJ5O1xuICB9XG5cbiAgdmFyIGlwdjYgPSB0aGlzLmhvc3RuYW1lLmluZGV4T2YoJzonKSAhPT0gLTE7XG4gIHJldHVybiBzY2hlbWEgKyAnOi8vJyArIChpcHY2ID8gJ1snICsgdGhpcy5ob3N0bmFtZSArICddJyA6IHRoaXMuaG9zdG5hbWUpICsgcG9ydCArIHRoaXMucGF0aCArIHF1ZXJ5O1xufTtcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNwb3J0O1xuXG4vKipcbiAqIFRyYW5zcG9ydCBhYnN0cmFjdCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFRyYW5zcG9ydCAob3B0cykge1xuICB0aGlzLnBhdGggPSBvcHRzLnBhdGg7XG4gIHRoaXMuaG9zdG5hbWUgPSBvcHRzLmhvc3RuYW1lO1xuICB0aGlzLnBvcnQgPSBvcHRzLnBvcnQ7XG4gIHRoaXMuc2VjdXJlID0gb3B0cy5zZWN1cmU7XG4gIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5O1xuICB0aGlzLnRpbWVzdGFtcFBhcmFtID0gb3B0cy50aW1lc3RhbXBQYXJhbTtcbiAgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyA9IG9wdHMudGltZXN0YW1wUmVxdWVzdHM7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICcnO1xuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudCB8fCBmYWxzZTtcbiAgdGhpcy5zb2NrZXQgPSBvcHRzLnNvY2tldDtcbiAgdGhpcy5lbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO1xuICB0aGlzLndpdGhDcmVkZW50aWFscyA9IG9wdHMud2l0aENyZWRlbnRpYWxzO1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4O1xuICB0aGlzLmtleSA9IG9wdHMua2V5O1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2U7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydDtcbiAgdGhpcy5jYSA9IG9wdHMuY2E7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycztcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgdGhpcy5mb3JjZU5vZGUgPSBvcHRzLmZvcmNlTm9kZTtcblxuICAvLyByZXN1bHRzIG9mIFJlYWN0TmF0aXZlIGVudmlyb25tZW50IGRldGVjdGlvblxuICB0aGlzLmlzUmVhY3ROYXRpdmUgPSBvcHRzLmlzUmVhY3ROYXRpdmU7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcbiAgdGhpcy5sb2NhbEFkZHJlc3MgPSBvcHRzLmxvY2FsQWRkcmVzcztcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoVHJhbnNwb3J0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogRW1pdHMgYW4gZXJyb3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7VHJhbnNwb3J0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKG1zZywgZGVzYykge1xuICB2YXIgZXJyID0gbmV3IEVycm9yKG1zZyk7XG4gIGVyci50eXBlID0gJ1RyYW5zcG9ydEVycm9yJztcbiAgZXJyLmRlc2NyaXB0aW9uID0gZGVzYztcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBPcGVucyB0aGUgdHJhbnNwb3J0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnO1xuICAgIHRoaXMuZG9PcGVuKCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgdGhpcy5kb0Nsb3NlKCk7XG4gICAgdGhpcy5vbkNsb3NlKCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgbXVsdGlwbGUgcGFja2V0cy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAocGFja2V0cykge1xuICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLndyaXRlKHBhY2tldHMpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IG5vdCBvcGVuJyk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gb3BlblxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25PcGVuID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7XG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuICB0aGlzLmVtaXQoJ29wZW4nKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggZGF0YS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB2YXIgcGFja2V0ID0gcGFyc2VyLmRlY29kZVBhY2tldChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlKTtcbiAgdGhpcy5vblBhY2tldChwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBhIGRlY29kZWQgcGFja2V0LlxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUub25QYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gY2xvc2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgdGhpcy5lbWl0KCdjbG9zZScpO1xufTtcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xudmFyIGhhc0JpbmFyeSA9IHJlcXVpcmUoJ2hhcy1iaW5hcnkyJyk7XG52YXIgc2xpY2VCdWZmZXIgPSByZXF1aXJlKCdhcnJheWJ1ZmZlci5zbGljZScpO1xudmFyIGFmdGVyID0gcmVxdWlyZSgnYWZ0ZXInKTtcbnZhciB1dGY4ID0gcmVxdWlyZSgnLi91dGY4Jyk7XG5cbnZhciBiYXNlNjRlbmNvZGVyO1xuaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgYmFzZTY0ZW5jb2RlciA9IHJlcXVpcmUoJ2Jhc2U2NC1hcnJheWJ1ZmZlcicpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHdlIGFyZSBydW5uaW5nIGFuIGFuZHJvaWQgYnJvd3Nlci4gVGhhdCByZXF1aXJlcyB1cyB0byB1c2VcbiAqIEFycmF5QnVmZmVyIHdpdGggcG9sbGluZyB0cmFuc3BvcnRzLi4uXG4gKlxuICogaHR0cDovL2doaW5kYS5uZXQvanBlZy1ibG9iLWFqYXgtYW5kcm9pZC9cbiAqL1xuXG52YXIgaXNBbmRyb2lkID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL0FuZHJvaWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIENoZWNrIGlmIHdlIGFyZSBydW5uaW5nIGluIFBoYW50b21KUy5cbiAqIFVwbG9hZGluZyBhIEJsb2Igd2l0aCBQaGFudG9tSlMgZG9lcyBub3Qgd29yayBjb3JyZWN0bHksIGFzIHJlcG9ydGVkIGhlcmU6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYXJpeWEvcGhhbnRvbWpzL2lzc3Vlcy8xMTM5NVxuICogQHR5cGUgYm9vbGVhblxuICovXG52YXIgaXNQaGFudG9tSlMgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvUGhhbnRvbUpTL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBXaGVuIHRydWUsIGF2b2lkcyB1c2luZyBCbG9icyB0byBlbmNvZGUgcGF5bG9hZHMuXG4gKiBAdHlwZSBib29sZWFuXG4gKi9cbnZhciBkb250U2VuZEJsb2JzID0gaXNBbmRyb2lkIHx8IGlzUGhhbnRvbUpTO1xuXG4vKipcbiAqIEN1cnJlbnQgcHJvdG9jb2wgdmVyc2lvbi5cbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gMztcblxuLyoqXG4gKiBQYWNrZXQgdHlwZXMuXG4gKi9cblxudmFyIHBhY2tldHMgPSBleHBvcnRzLnBhY2tldHMgPSB7XG4gICAgb3BlbjogICAgIDAgICAgLy8gbm9uLXdzXG4gICwgY2xvc2U6ICAgIDEgICAgLy8gbm9uLXdzXG4gICwgcGluZzogICAgIDJcbiAgLCBwb25nOiAgICAgM1xuICAsIG1lc3NhZ2U6ICA0XG4gICwgdXBncmFkZTogIDVcbiAgLCBub29wOiAgICAgNlxufTtcblxudmFyIHBhY2tldHNsaXN0ID0ga2V5cyhwYWNrZXRzKTtcblxuLyoqXG4gKiBQcmVtYWRlIGVycm9yIHBhY2tldC5cbiAqL1xuXG52YXIgZXJyID0geyB0eXBlOiAnZXJyb3InLCBkYXRhOiAncGFyc2VyIGVycm9yJyB9O1xuXG4vKipcbiAqIENyZWF0ZSBhIGJsb2IgYXBpIGV2ZW4gZm9yIGJsb2IgYnVpbGRlciB3aGVuIHZlbmRvciBwcmVmaXhlcyBleGlzdFxuICovXG5cbnZhciBCbG9iID0gcmVxdWlyZSgnYmxvYicpO1xuXG4vKipcbiAqIEVuY29kZXMgYSBwYWNrZXQuXG4gKlxuICogICAgIDxwYWNrZXQgdHlwZSBpZD4gWyA8ZGF0YT4gXVxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIDVoZWxsbyB3b3JsZFxuICogICAgIDNcbiAqICAgICA0XG4gKlxuICogQmluYXJ5IGlzIGVuY29kZWQgaW4gYW4gaWRlbnRpY2FsIHByaW5jaXBsZVxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIHV0ZjhlbmNvZGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygc3VwcG9ydHNCaW5hcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHN1cHBvcnRzQmluYXJ5O1xuICAgIHN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIHV0ZjhlbmNvZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHV0ZjhlbmNvZGU7XG4gICAgdXRmOGVuY29kZSA9IG51bGw7XG4gIH1cblxuICB2YXIgZGF0YSA9IChwYWNrZXQuZGF0YSA9PT0gdW5kZWZpbmVkKVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiBwYWNrZXQuZGF0YS5idWZmZXIgfHwgcGFja2V0LmRhdGE7XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGVuY29kZUFycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICByZXR1cm4gZW5jb2RlQmxvYihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH1cblxuICAvLyBtaWdodCBiZSBhbiBvYmplY3Qgd2l0aCB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogZGF0YUFzQmFzZTY0U3RyaW5nIH1cbiAgaWYgKGRhdGEgJiYgZGF0YS5iYXNlNjQpIHtcbiAgICByZXR1cm4gZW5jb2RlQmFzZTY0T2JqZWN0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gU2VuZGluZyBkYXRhIGFzIGEgdXRmLTggc3RyaW5nXG4gIHZhciBlbmNvZGVkID0gcGFja2V0c1twYWNrZXQudHlwZV07XG5cbiAgLy8gZGF0YSBmcmFnbWVudCBpcyBvcHRpb25hbFxuICBpZiAodW5kZWZpbmVkICE9PSBwYWNrZXQuZGF0YSkge1xuICAgIGVuY29kZWQgKz0gdXRmOGVuY29kZSA/IHV0ZjguZW5jb2RlKFN0cmluZyhwYWNrZXQuZGF0YSksIHsgc3RyaWN0OiBmYWxzZSB9KSA6IFN0cmluZyhwYWNrZXQuZGF0YSk7XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2soJycgKyBlbmNvZGVkKTtcblxufTtcblxuZnVuY3Rpb24gZW5jb2RlQmFzZTY0T2JqZWN0KHBhY2tldCwgY2FsbGJhY2spIHtcbiAgLy8gcGFja2V0IGRhdGEgaXMgYW4gb2JqZWN0IHsgYmFzZTY0OiB0cnVlLCBkYXRhOiBkYXRhQXNCYXNlNjRTdHJpbmcgfVxuICB2YXIgbWVzc2FnZSA9ICdiJyArIGV4cG9ydHMucGFja2V0c1twYWNrZXQudHlwZV0gKyBwYWNrZXQuZGF0YS5kYXRhO1xuICByZXR1cm4gY2FsbGJhY2sobWVzc2FnZSk7XG59XG5cbi8qKlxuICogRW5jb2RlIHBhY2tldCBoZWxwZXJzIGZvciBiaW5hcnkgdHlwZXNcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgdmFyIGRhdGEgPSBwYWNrZXQuZGF0YTtcbiAgdmFyIGNvbnRlbnRBcnJheSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICB2YXIgcmVzdWx0QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMSArIGRhdGEuYnl0ZUxlbmd0aCk7XG5cbiAgcmVzdWx0QnVmZmVyWzBdID0gcGFja2V0c1twYWNrZXQudHlwZV07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGVudEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0QnVmZmVyW2krMV0gPSBjb250ZW50QXJyYXlbaV07XG4gIH1cblxuICByZXR1cm4gY2FsbGJhY2socmVzdWx0QnVmZmVyLmJ1ZmZlcik7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUJsb2JBc0FycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICghc3VwcG9ydHNCaW5hcnkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgZnIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICBmci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldCh7IHR5cGU6IHBhY2tldC50eXBlLCBkYXRhOiBmci5yZXN1bHQgfSwgc3VwcG9ydHNCaW5hcnksIHRydWUsIGNhbGxiYWNrKTtcbiAgfTtcbiAgcmV0dXJuIGZyLnJlYWRBc0FycmF5QnVmZmVyKHBhY2tldC5kYXRhKTtcbn1cblxuZnVuY3Rpb24gZW5jb2RlQmxvYihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgaWYgKGRvbnRTZW5kQmxvYnMpIHtcbiAgICByZXR1cm4gZW5jb2RlQmxvYkFzQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9IG5ldyBVaW50OEFycmF5KDEpO1xuICBsZW5ndGhbMF0gPSBwYWNrZXRzW3BhY2tldC50eXBlXTtcbiAgdmFyIGJsb2IgPSBuZXcgQmxvYihbbGVuZ3RoLmJ1ZmZlciwgcGFja2V0LmRhdGFdKTtcblxuICByZXR1cm4gY2FsbGJhY2soYmxvYik7XG59XG5cbi8qKlxuICogRW5jb2RlcyBhIHBhY2tldCB3aXRoIGJpbmFyeSBkYXRhIGluIGEgYmFzZTY0IHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQsIGhhcyBgdHlwZWAgYW5kIGBkYXRhYFxuICogQHJldHVybiB7U3RyaW5nfSBiYXNlNjQgZW5jb2RlZCBtZXNzYWdlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQsIGNhbGxiYWNrKSB7XG4gIHZhciBtZXNzYWdlID0gJ2InICsgZXhwb3J0cy5wYWNrZXRzW3BhY2tldC50eXBlXTtcbiAgaWYgKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBwYWNrZXQuZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICB2YXIgZnIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGZyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGI2NCA9IGZyLnJlc3VsdC5zcGxpdCgnLCcpWzFdO1xuICAgICAgY2FsbGJhY2sobWVzc2FnZSArIGI2NCk7XG4gICAgfTtcbiAgICByZXR1cm4gZnIucmVhZEFzRGF0YVVSTChwYWNrZXQuZGF0YSk7XG4gIH1cblxuICB2YXIgYjY0ZGF0YTtcbiAgdHJ5IHtcbiAgICBiNjRkYXRhID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShwYWNrZXQuZGF0YSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gaVBob25lIFNhZmFyaSBkb2Vzbid0IGxldCB5b3UgYXBwbHkgd2l0aCB0eXBlZCBhcnJheXNcbiAgICB2YXIgdHlwZWQgPSBuZXcgVWludDhBcnJheShwYWNrZXQuZGF0YSk7XG4gICAgdmFyIGJhc2ljID0gbmV3IEFycmF5KHR5cGVkLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlZC5sZW5ndGg7IGkrKykge1xuICAgICAgYmFzaWNbaV0gPSB0eXBlZFtpXTtcbiAgICB9XG4gICAgYjY0ZGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYmFzaWMpO1xuICB9XG4gIG1lc3NhZ2UgKz0gYnRvYShiNjRkYXRhKTtcbiAgcmV0dXJuIGNhbGxiYWNrKG1lc3NhZ2UpO1xufTtcblxuLyoqXG4gKiBEZWNvZGVzIGEgcGFja2V0LiBDaGFuZ2VzIGZvcm1hdCB0byBCbG9iIGlmIHJlcXVlc3RlZC5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggYHR5cGVgIGFuZCBgZGF0YWAgKGlmIGFueSlcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZGVjb2RlUGFja2V0ID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIHV0ZjhkZWNvZGUpIHtcbiAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBlcnI7XG4gIH1cbiAgLy8gU3RyaW5nIGRhdGFcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGlmIChkYXRhLmNoYXJBdCgwKSA9PT0gJ2InKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5kZWNvZGVCYXNlNjRQYWNrZXQoZGF0YS5zdWJzdHIoMSksIGJpbmFyeVR5cGUpO1xuICAgIH1cblxuICAgIGlmICh1dGY4ZGVjb2RlKSB7XG4gICAgICBkYXRhID0gdHJ5RGVjb2RlKGRhdGEpO1xuICAgICAgaWYgKGRhdGEgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBlcnI7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciB0eXBlID0gZGF0YS5jaGFyQXQoMCk7XG5cbiAgICBpZiAoTnVtYmVyKHR5cGUpICE9IHR5cGUgfHwgIXBhY2tldHNsaXN0W3R5cGVdKSB7XG4gICAgICByZXR1cm4gZXJyO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdLCBkYXRhOiBkYXRhLnN1YnN0cmluZygxKSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBhc0FycmF5ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gIHZhciB0eXBlID0gYXNBcnJheVswXTtcbiAgdmFyIHJlc3QgPSBzbGljZUJ1ZmZlcihkYXRhLCAxKTtcbiAgaWYgKEJsb2IgJiYgYmluYXJ5VHlwZSA9PT0gJ2Jsb2InKSB7XG4gICAgcmVzdCA9IG5ldyBCbG9iKFtyZXN0XSk7XG4gIH1cbiAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0sIGRhdGE6IHJlc3QgfTtcbn07XG5cbmZ1bmN0aW9uIHRyeURlY29kZShkYXRhKSB7XG4gIHRyeSB7XG4gICAgZGF0YSA9IHV0ZjguZGVjb2RlKGRhdGEsIHsgc3RyaWN0OiBmYWxzZSB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBEZWNvZGVzIGEgcGFja2V0IGVuY29kZWQgaW4gYSBiYXNlNjQgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGJhc2U2NCBlbmNvZGVkIG1lc3NhZ2VcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBgdHlwZWAgYW5kIGBkYXRhYCAoaWYgYW55KVxuICovXG5cbmV4cG9ydHMuZGVjb2RlQmFzZTY0UGFja2V0ID0gZnVuY3Rpb24obXNnLCBiaW5hcnlUeXBlKSB7XG4gIHZhciB0eXBlID0gcGFja2V0c2xpc3RbbXNnLmNoYXJBdCgwKV07XG4gIGlmICghYmFzZTY0ZW5jb2Rlcikge1xuICAgIHJldHVybiB7IHR5cGU6IHR5cGUsIGRhdGE6IHsgYmFzZTY0OiB0cnVlLCBkYXRhOiBtc2cuc3Vic3RyKDEpIH0gfTtcbiAgfVxuXG4gIHZhciBkYXRhID0gYmFzZTY0ZW5jb2Rlci5kZWNvZGUobXNnLnN1YnN0cigxKSk7XG5cbiAgaWYgKGJpbmFyeVR5cGUgPT09ICdibG9iJyAmJiBCbG9iKSB7XG4gICAgZGF0YSA9IG5ldyBCbG9iKFtkYXRhXSk7XG4gIH1cblxuICByZXR1cm4geyB0eXBlOiB0eXBlLCBkYXRhOiBkYXRhIH07XG59O1xuXG4vKipcbiAqIEVuY29kZXMgbXVsdGlwbGUgbWVzc2FnZXMgKHBheWxvYWQpLlxuICpcbiAqICAgICA8bGVuZ3RoPjpkYXRhXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgMTE6aGVsbG8gd29ybGQyOmhpXG4gKlxuICogSWYgYW55IGNvbnRlbnRzIGFyZSBiaW5hcnksIHRoZXkgd2lsbCBiZSBlbmNvZGVkIGFzIGJhc2U2NCBzdHJpbmdzLiBCYXNlNjRcbiAqIGVuY29kZWQgc3RyaW5ncyBhcmUgbWFya2VkIHdpdGggYSBiIGJlZm9yZSB0aGUgbGVuZ3RoIHNwZWNpZmllclxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGF5bG9hZCA9IGZ1bmN0aW9uIChwYWNrZXRzLCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBzdXBwb3J0c0JpbmFyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gc3VwcG9ydHNCaW5hcnk7XG4gICAgc3VwcG9ydHNCaW5hcnkgPSBudWxsO1xuICB9XG5cbiAgdmFyIGlzQmluYXJ5ID0gaGFzQmluYXJ5KHBhY2tldHMpO1xuXG4gIGlmIChzdXBwb3J0c0JpbmFyeSAmJiBpc0JpbmFyeSkge1xuICAgIGlmIChCbG9iICYmICFkb250U2VuZEJsb2JzKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNCbG9iKHBhY2tldHMsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlcihwYWNrZXRzLCBjYWxsYmFjayk7XG4gIH1cblxuICBpZiAoIXBhY2tldHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCcwOicpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0TGVuZ3RoSGVhZGVyKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbWVzc2FnZS5sZW5ndGggKyAnOicgKyBtZXNzYWdlO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCAhaXNCaW5hcnkgPyBmYWxzZSA6IHN1cHBvcnRzQmluYXJ5LCBmYWxzZSwgZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgZG9uZUNhbGxiYWNrKG51bGwsIHNldExlbmd0aEhlYWRlcihtZXNzYWdlKSk7XG4gICAgfSk7XG4gIH1cblxuICBtYXAocGFja2V0cywgZW5jb2RlT25lLCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHtcbiAgICByZXR1cm4gY2FsbGJhY2socmVzdWx0cy5qb2luKCcnKSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBBc3luYyBhcnJheSBtYXAgdXNpbmcgYWZ0ZXJcbiAqL1xuXG5mdW5jdGlvbiBtYXAoYXJ5LCBlYWNoLCBkb25lKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgQXJyYXkoYXJ5Lmxlbmd0aCk7XG4gIHZhciBuZXh0ID0gYWZ0ZXIoYXJ5Lmxlbmd0aCwgZG9uZSk7XG5cbiAgdmFyIGVhY2hXaXRoSW5kZXggPSBmdW5jdGlvbihpLCBlbCwgY2IpIHtcbiAgICBlYWNoKGVsLCBmdW5jdGlvbihlcnJvciwgbXNnKSB7XG4gICAgICByZXN1bHRbaV0gPSBtc2c7XG4gICAgICBjYihlcnJvciwgcmVzdWx0KTtcbiAgICB9KTtcbiAgfTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyeS5sZW5ndGg7IGkrKykge1xuICAgIGVhY2hXaXRoSW5kZXgoaSwgYXJ5W2ldLCBuZXh0KTtcbiAgfVxufVxuXG4vKlxuICogRGVjb2RlcyBkYXRhIHdoZW4gYSBwYXlsb2FkIGlzIG1heWJlIGV4cGVjdGVkLiBQb3NzaWJsZSBiaW5hcnkgY29udGVudHMgYXJlXG4gKiBkZWNvZGVkIGZyb20gdGhlaXIgYmFzZTY0IHJlcHJlc2VudGF0aW9uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEsIGNhbGxiYWNrIG1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29kZVBheWxvYWQgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBleHBvcnRzLmRlY29kZVBheWxvYWRBc0JpbmFyeShkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjayk7XG4gIH1cblxuICBpZiAodHlwZW9mIGJpbmFyeVR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGJpbmFyeVR5cGU7XG4gICAgYmluYXJ5VHlwZSA9IG51bGw7XG4gIH1cblxuICB2YXIgcGFja2V0O1xuICBpZiAoZGF0YSA9PT0gJycpIHtcbiAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gJycsIG4sIG1zZztcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGRhdGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGNociA9IGRhdGEuY2hhckF0KGkpO1xuXG4gICAgaWYgKGNociAhPT0gJzonKSB7XG4gICAgICBsZW5ndGggKz0gY2hyO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGxlbmd0aCA9PT0gJycgfHwgKGxlbmd0aCAhPSAobiA9IE51bWJlcihsZW5ndGgpKSkpIHtcbiAgICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgIH1cblxuICAgIG1zZyA9IGRhdGEuc3Vic3RyKGkgKyAxLCBuKTtcblxuICAgIGlmIChsZW5ndGggIT0gbXNnLmxlbmd0aCkge1xuICAgICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgfVxuXG4gICAgaWYgKG1zZy5sZW5ndGgpIHtcbiAgICAgIHBhY2tldCA9IGV4cG9ydHMuZGVjb2RlUGFja2V0KG1zZywgYmluYXJ5VHlwZSwgZmFsc2UpO1xuXG4gICAgICBpZiAoZXJyLnR5cGUgPT09IHBhY2tldC50eXBlICYmIGVyci5kYXRhID09PSBwYWNrZXQuZGF0YSkge1xuICAgICAgICAvLyBwYXJzZXIgZXJyb3IgaW4gaW5kaXZpZHVhbCBwYWNrZXQgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmV0ID0gY2FsbGJhY2socGFja2V0LCBpICsgbiwgbCk7XG4gICAgICBpZiAoZmFsc2UgPT09IHJldCkgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGFkdmFuY2UgY3Vyc29yXG4gICAgaSArPSBuO1xuICAgIGxlbmd0aCA9ICcnO1xuICB9XG5cbiAgaWYgKGxlbmd0aCAhPT0gJycpIHtcbiAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gIH1cblxufTtcblxuLyoqXG4gKiBFbmNvZGVzIG11bHRpcGxlIG1lc3NhZ2VzIChwYXlsb2FkKSBhcyBiaW5hcnkuXG4gKlxuICogPDEgPSBiaW5hcnksIDAgPSBzdHJpbmc+PG51bWJlciBmcm9tIDAtOT48bnVtYmVyIGZyb20gMC05PlsuLi5dPG51bWJlclxuICogMjU1PjxkYXRhPlxuICpcbiAqIEV4YW1wbGU6XG4gKiAxIDMgMjU1IDEgMiAzLCBpZiB0aGUgYmluYXJ5IGNvbnRlbnRzIGFyZSBpbnRlcnByZXRlZCBhcyA4IGJpdCBpbnRlZ2Vyc1xuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEByZXR1cm4ge0FycmF5QnVmZmVyfSBlbmNvZGVkIHBheWxvYWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQXJyYXlCdWZmZXIgPSBmdW5jdGlvbihwYWNrZXRzLCBjYWxsYmFjaykge1xuICBpZiAoIXBhY2tldHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBBcnJheUJ1ZmZlcigwKSk7XG4gIH1cblxuICBmdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LCBkb25lQ2FsbGJhY2spIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsIHRydWUsIHRydWUsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiBkb25lQ2FsbGJhY2sobnVsbCwgZGF0YSk7XG4gICAgfSk7XG4gIH1cblxuICBtYXAocGFja2V0cywgZW5jb2RlT25lLCBmdW5jdGlvbihlcnIsIGVuY29kZWRQYWNrZXRzKSB7XG4gICAgdmFyIHRvdGFsTGVuZ3RoID0gZW5jb2RlZFBhY2tldHMucmVkdWNlKGZ1bmN0aW9uKGFjYywgcCkge1xuICAgICAgdmFyIGxlbjtcbiAgICAgIGlmICh0eXBlb2YgcCA9PT0gJ3N0cmluZycpe1xuICAgICAgICBsZW4gPSBwLmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlbiA9IHAuYnl0ZUxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2MgKyBsZW4udG9TdHJpbmcoKS5sZW5ndGggKyBsZW4gKyAyOyAvLyBzdHJpbmcvYmluYXJ5IGlkZW50aWZpZXIgKyBzZXBhcmF0b3IgPSAyXG4gICAgfSwgMCk7XG5cbiAgICB2YXIgcmVzdWx0QXJyYXkgPSBuZXcgVWludDhBcnJheSh0b3RhbExlbmd0aCk7XG5cbiAgICB2YXIgYnVmZmVySW5kZXggPSAwO1xuICAgIGVuY29kZWRQYWNrZXRzLmZvckVhY2goZnVuY3Rpb24ocCkge1xuICAgICAgdmFyIGlzU3RyaW5nID0gdHlwZW9mIHAgPT09ICdzdHJpbmcnO1xuICAgICAgdmFyIGFiID0gcDtcbiAgICAgIGlmIChpc1N0cmluZykge1xuICAgICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KHAubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmlld1tpXSA9IHAuY2hhckNvZGVBdChpKTtcbiAgICAgICAgfVxuICAgICAgICBhYiA9IHZpZXcuYnVmZmVyO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNTdHJpbmcpIHsgLy8gbm90IHRydWUgYmluYXJ5XG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gMDtcbiAgICAgIH0gZWxzZSB7IC8vIHRydWUgYmluYXJ5XG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gMTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxlblN0ciA9IGFiLmJ5dGVMZW5ndGgudG9TdHJpbmcoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuU3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gcGFyc2VJbnQobGVuU3RyW2ldKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gMjU1O1xuXG4gICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGFiKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IHZpZXdbaV07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY2FsbGJhY2socmVzdWx0QXJyYXkuYnVmZmVyKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEVuY29kZSBhcyBCbG9iXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNCbG9iID0gZnVuY3Rpb24ocGFja2V0cywgY2FsbGJhY2spIHtcbiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCB0cnVlLCB0cnVlLCBmdW5jdGlvbihlbmNvZGVkKSB7XG4gICAgICB2YXIgYmluYXJ5SWRlbnRpZmllciA9IG5ldyBVaW50OEFycmF5KDEpO1xuICAgICAgYmluYXJ5SWRlbnRpZmllclswXSA9IDE7XG4gICAgICBpZiAodHlwZW9mIGVuY29kZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoZW5jb2RlZC5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuY29kZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2aWV3W2ldID0gZW5jb2RlZC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIGVuY29kZWQgPSB2aWV3LmJ1ZmZlcjtcbiAgICAgICAgYmluYXJ5SWRlbnRpZmllclswXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHZhciBsZW4gPSAoZW5jb2RlZCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKVxuICAgICAgICA/IGVuY29kZWQuYnl0ZUxlbmd0aFxuICAgICAgICA6IGVuY29kZWQuc2l6ZTtcblxuICAgICAgdmFyIGxlblN0ciA9IGxlbi50b1N0cmluZygpO1xuICAgICAgdmFyIGxlbmd0aEFyeSA9IG5ldyBVaW50OEFycmF5KGxlblN0ci5sZW5ndGggKyAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuU3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxlbmd0aEFyeVtpXSA9IHBhcnNlSW50KGxlblN0cltpXSk7XG4gICAgICB9XG4gICAgICBsZW5ndGhBcnlbbGVuU3RyLmxlbmd0aF0gPSAyNTU7XG5cbiAgICAgIGlmIChCbG9iKSB7XG4gICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2JpbmFyeUlkZW50aWZpZXIuYnVmZmVyLCBsZW5ndGhBcnkuYnVmZmVyLCBlbmNvZGVkXSk7XG4gICAgICAgIGRvbmVDYWxsYmFjayhudWxsLCBibG9iKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG1hcChwYWNrZXRzLCBlbmNvZGVPbmUsIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICAgIHJldHVybiBjYWxsYmFjayhuZXcgQmxvYihyZXN1bHRzKSk7XG4gIH0pO1xufTtcblxuLypcbiAqIERlY29kZXMgZGF0YSB3aGVuIGEgcGF5bG9hZCBpcyBtYXliZSBleHBlY3RlZC4gU3RyaW5ncyBhcmUgZGVjb2RlZCBieVxuICogaW50ZXJwcmV0aW5nIGVhY2ggYnl0ZSBhcyBhIGtleSBjb2RlIGZvciBlbnRyaWVzIG1hcmtlZCB0byBzdGFydCB3aXRoIDAuIFNlZVxuICogZGVzY3JpcHRpb24gb2YgZW5jb2RlUGF5bG9hZEFzQmluYXJ5XG4gKlxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gZGF0YSwgY2FsbGJhY2sgbWV0aG9kXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZGVjb2RlUGF5bG9hZEFzQmluYXJ5ID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgYmluYXJ5VHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gYmluYXJ5VHlwZTtcbiAgICBiaW5hcnlUeXBlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBidWZmZXJUYWlsID0gZGF0YTtcbiAgdmFyIGJ1ZmZlcnMgPSBbXTtcblxuICB3aGlsZSAoYnVmZmVyVGFpbC5ieXRlTGVuZ3RoID4gMCkge1xuICAgIHZhciB0YWlsQXJyYXkgPSBuZXcgVWludDhBcnJheShidWZmZXJUYWlsKTtcbiAgICB2YXIgaXNTdHJpbmcgPSB0YWlsQXJyYXlbMF0gPT09IDA7XG4gICAgdmFyIG1zZ0xlbmd0aCA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IDsgaSsrKSB7XG4gICAgICBpZiAodGFpbEFycmF5W2ldID09PSAyNTUpIGJyZWFrO1xuXG4gICAgICAvLyAzMTAgPSBjaGFyIGxlbmd0aCBvZiBOdW1iZXIuTUFYX1ZBTFVFXG4gICAgICBpZiAobXNnTGVuZ3RoLmxlbmd0aCA+IDMxMCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICAgIH1cblxuICAgICAgbXNnTGVuZ3RoICs9IHRhaWxBcnJheVtpXTtcbiAgICB9XG5cbiAgICBidWZmZXJUYWlsID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgMiArIG1zZ0xlbmd0aC5sZW5ndGgpO1xuICAgIG1zZ0xlbmd0aCA9IHBhcnNlSW50KG1zZ0xlbmd0aCk7XG5cbiAgICB2YXIgbXNnID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgMCwgbXNnTGVuZ3RoKTtcbiAgICBpZiAoaXNTdHJpbmcpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG1zZyA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkobXNnKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlQaG9uZSBTYWZhcmkgZG9lc24ndCBsZXQgeW91IGFwcGx5IHRvIHR5cGVkIGFycmF5c1xuICAgICAgICB2YXIgdHlwZWQgPSBuZXcgVWludDhBcnJheShtc2cpO1xuICAgICAgICBtc2cgPSAnJztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG1zZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHR5cGVkW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGJ1ZmZlcnMucHVzaChtc2cpO1xuICAgIGJ1ZmZlclRhaWwgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCBtc2dMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRvdGFsID0gYnVmZmVycy5sZW5ndGg7XG4gIGJ1ZmZlcnMuZm9yRWFjaChmdW5jdGlvbihidWZmZXIsIGkpIHtcbiAgICBjYWxsYmFjayhleHBvcnRzLmRlY29kZVBhY2tldChidWZmZXIsIGJpbmFyeVR5cGUsIHRydWUpLCBpLCB0b3RhbCk7XG4gIH0pO1xufTtcbiIsIlxuLyoqXG4gKiBHZXRzIHRoZSBrZXlzIGZvciBhbiBvYmplY3QuXG4gKlxuICogQHJldHVybiB7QXJyYXl9IGtleXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyAob2JqKXtcbiAgdmFyIGFyciA9IFtdO1xuICB2YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChoYXMuY2FsbChvYmosIGkpKSB7XG4gICAgICBhcnIucHVzaChpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycjtcbn07XG4iLCIvKiBnbG9iYWwgQmxvYiBGaWxlICovXG5cbi8qXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEJsb2IpID09PSAnW29iamVjdCBCbG9iQ29uc3RydWN0b3JdJztcbnZhciB3aXRoTmF0aXZlRmlsZSA9IHR5cGVvZiBGaWxlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgRmlsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChGaWxlKSA9PT0gJ1tvYmplY3QgRmlsZUNvbnN0cnVjdG9yXSc7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNCaW5hcnk7XG5cbi8qKlxuICogQ2hlY2tzIGZvciBiaW5hcnkgZGF0YS5cbiAqXG4gKiBTdXBwb3J0cyBCdWZmZXIsIEFycmF5QnVmZmVyLCBCbG9iIGFuZCBGaWxlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbnl0aGluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBoYXNCaW5hcnkgKG9iaikge1xuICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChoYXNCaW5hcnkob2JqW2ldKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCh0eXBlb2YgQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIEJ1ZmZlci5pc0J1ZmZlciAmJiBCdWZmZXIuaXNCdWZmZXIob2JqKSkgfHxcbiAgICAodHlwZW9mIEFycmF5QnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fFxuICAgICh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICh3aXRoTmF0aXZlRmlsZSAmJiBvYmogaW5zdGFuY2VvZiBGaWxlKVxuICApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvaGFzLWJpbmFyeS9wdWxsLzRcbiAgaWYgKG9iai50b0pTT04gJiYgdHlwZW9mIG9iai50b0pTT04gPT09ICdmdW5jdGlvbicgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBoYXNCaW5hcnkob2JqLnRvSlNPTigpLCB0cnVlKTtcbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSAmJiBoYXNCaW5hcnkob2JqW2tleV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4iLCIvKipcbiAqIEFuIGFic3RyYWN0aW9uIGZvciBzbGljaW5nIGFuIGFycmF5YnVmZmVyIGV2ZW4gd2hlblxuICogQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlIGlzIG5vdCBzdXBwb3J0ZWRcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyYXlidWZmZXIsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYXJyYXlidWZmZXIuYnl0ZUxlbmd0aDtcbiAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICBlbmQgPSBlbmQgfHwgYnl0ZXM7XG5cbiAgaWYgKGFycmF5YnVmZmVyLnNsaWNlKSB7IHJldHVybiBhcnJheWJ1ZmZlci5zbGljZShzdGFydCwgZW5kKTsgfVxuXG4gIGlmIChzdGFydCA8IDApIHsgc3RhcnQgKz0gYnl0ZXM7IH1cbiAgaWYgKGVuZCA8IDApIHsgZW5kICs9IGJ5dGVzOyB9XG4gIGlmIChlbmQgPiBieXRlcykgeyBlbmQgPSBieXRlczsgfVxuXG4gIGlmIChzdGFydCA+PSBieXRlcyB8fCBzdGFydCA+PSBlbmQgfHwgYnl0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gbmV3IEFycmF5QnVmZmVyKDApO1xuICB9XG5cbiAgdmFyIGFidiA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcbiAgdmFyIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGVuZCAtIHN0YXJ0KTtcbiAgZm9yICh2YXIgaSA9IHN0YXJ0LCBpaSA9IDA7IGkgPCBlbmQ7IGkrKywgaWkrKykge1xuICAgIHJlc3VsdFtpaV0gPSBhYnZbaV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdC5idWZmZXI7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBhZnRlclxuXG5mdW5jdGlvbiBhZnRlcihjb3VudCwgY2FsbGJhY2ssIGVycl9jYikge1xuICAgIHZhciBiYWlsID0gZmFsc2VcbiAgICBlcnJfY2IgPSBlcnJfY2IgfHwgbm9vcFxuICAgIHByb3h5LmNvdW50ID0gY291bnRcblxuICAgIHJldHVybiAoY291bnQgPT09IDApID8gY2FsbGJhY2soKSA6IHByb3h5XG5cbiAgICBmdW5jdGlvbiBwcm94eShlcnIsIHJlc3VsdCkge1xuICAgICAgICBpZiAocHJveHkuY291bnQgPD0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhZnRlciBjYWxsZWQgdG9vIG1hbnkgdGltZXMnKVxuICAgICAgICB9XG4gICAgICAgIC0tcHJveHkuY291bnRcblxuICAgICAgICAvLyBhZnRlciBmaXJzdCBlcnJvciwgcmVzdCBhcmUgcGFzc2VkIHRvIGVycl9jYlxuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBiYWlsID0gdHJ1ZVxuICAgICAgICAgICAgY2FsbGJhY2soZXJyKVxuICAgICAgICAgICAgLy8gZnV0dXJlIGVycm9yIGNhbGxiYWNrcyB3aWxsIGdvIHRvIGVycm9yIGhhbmRsZXJcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZXJyX2NiXG4gICAgICAgIH0gZWxzZSBpZiAocHJveHkuY291bnQgPT09IDAgJiYgIWJhaWwpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdClcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG4iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL3V0ZjhqcyB2Mi4xLjIgYnkgQG1hdGhpYXMgKi9cblxudmFyIHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5mdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuXHR2YXIgb3V0cHV0ID0gW107XG5cdHZhciBjb3VudGVyID0gMDtcblx0dmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG5cdHZhciB2YWx1ZTtcblx0dmFyIGV4dHJhO1xuXHR3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuXHRcdHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHQvLyBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXJcblx0XHRcdGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHQvLyBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXJcblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG91dHB1dDtcbn1cblxuLy8gVGFrZW4gZnJvbSBodHRwczovL210aHMuYmUvcHVueWNvZGVcbmZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0dmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblx0dmFyIGluZGV4ID0gLTE7XG5cdHZhciB2YWx1ZTtcblx0dmFyIG91dHB1dCA9ICcnO1xuXHR3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHRcdHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXHRcdGlmICh2YWx1ZSA+IDB4RkZGRikge1xuXHRcdFx0dmFsdWUgLT0gMHgxMDAwMDtcblx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0dmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGO1xuXHRcdH1cblx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCwgc3RyaWN0KSB7XG5cdGlmIChjb2RlUG9pbnQgPj0gMHhEODAwICYmIGNvZGVQb2ludCA8PSAweERGRkYpIHtcblx0XHRpZiAoc3RyaWN0KSB7XG5cdFx0XHR0aHJvdyBFcnJvcihcblx0XHRcdFx0J0xvbmUgc3Vycm9nYXRlIFUrJyArIGNvZGVQb2ludC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSArXG5cdFx0XHRcdCcgaXMgbm90IGEgc2NhbGFyIHZhbHVlJ1xuXHRcdFx0KTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiB0cnVlO1xufVxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmZ1bmN0aW9uIGNyZWF0ZUJ5dGUoY29kZVBvaW50LCBzaGlmdCkge1xuXHRyZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IHNoaWZ0KSAmIDB4M0YpIHwgMHg4MCk7XG59XG5cbmZ1bmN0aW9uIGVuY29kZUNvZGVQb2ludChjb2RlUG9pbnQsIHN0cmljdCkge1xuXHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkZGODApID09IDApIHsgLy8gMS1ieXRlIHNlcXVlbmNlXG5cdFx0cmV0dXJuIHN0cmluZ0Zyb21DaGFyQ29kZShjb2RlUG9pbnQpO1xuXHR9XG5cdHZhciBzeW1ib2wgPSAnJztcblx0aWYgKChjb2RlUG9pbnQgJiAweEZGRkZGODAwKSA9PSAwKSB7IC8vIDItYnl0ZSBzZXF1ZW5jZVxuXHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiA2KSAmIDB4MUYpIHwgMHhDMCk7XG5cdH1cblx0ZWxzZSBpZiAoKGNvZGVQb2ludCAmIDB4RkZGRjAwMDApID09IDApIHsgLy8gMy1ieXRlIHNlcXVlbmNlXG5cdFx0aWYgKCFjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCwgc3RyaWN0KSkge1xuXHRcdFx0Y29kZVBvaW50ID0gMHhGRkZEO1xuXHRcdH1cblx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gMTIpICYgMHgwRikgfCAweEUwKTtcblx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHR9XG5cdGVsc2UgaWYgKChjb2RlUG9pbnQgJiAweEZGRTAwMDAwKSA9PSAwKSB7IC8vIDQtYnl0ZSBzZXF1ZW5jZVxuXHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiAxOCkgJiAweDA3KSB8IDB4RjApO1xuXHRcdHN5bWJvbCArPSBjcmVhdGVCeXRlKGNvZGVQb2ludCwgMTIpO1xuXHRcdHN5bWJvbCArPSBjcmVhdGVCeXRlKGNvZGVQb2ludCwgNik7XG5cdH1cblx0c3ltYm9sICs9IHN0cmluZ0Zyb21DaGFyQ29kZSgoY29kZVBvaW50ICYgMHgzRikgfCAweDgwKTtcblx0cmV0dXJuIHN5bWJvbDtcbn1cblxuZnVuY3Rpb24gdXRmOGVuY29kZShzdHJpbmcsIG9wdHMpIHtcblx0b3B0cyA9IG9wdHMgfHwge307XG5cdHZhciBzdHJpY3QgPSBmYWxzZSAhPT0gb3B0cy5zdHJpY3Q7XG5cblx0dmFyIGNvZGVQb2ludHMgPSB1Y3MyZGVjb2RlKHN0cmluZyk7XG5cdHZhciBsZW5ndGggPSBjb2RlUG9pbnRzLmxlbmd0aDtcblx0dmFyIGluZGV4ID0gLTE7XG5cdHZhciBjb2RlUG9pbnQ7XG5cdHZhciBieXRlU3RyaW5nID0gJyc7XG5cdHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdFx0Y29kZVBvaW50ID0gY29kZVBvaW50c1tpbmRleF07XG5cdFx0Ynl0ZVN0cmluZyArPSBlbmNvZGVDb2RlUG9pbnQoY29kZVBvaW50LCBzdHJpY3QpO1xuXHR9XG5cdHJldHVybiBieXRlU3RyaW5nO1xufVxuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuZnVuY3Rpb24gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKSB7XG5cdGlmIChieXRlSW5kZXggPj0gYnl0ZUNvdW50KSB7XG5cdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHR9XG5cblx0dmFyIGNvbnRpbnVhdGlvbkJ5dGUgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDB4RkY7XG5cdGJ5dGVJbmRleCsrO1xuXG5cdGlmICgoY29udGludWF0aW9uQnl0ZSAmIDB4QzApID09IDB4ODApIHtcblx0XHRyZXR1cm4gY29udGludWF0aW9uQnl0ZSAmIDB4M0Y7XG5cdH1cblxuXHQvLyBJZiB3ZSBlbmQgdXAgaGVyZSwgaXTigJlzIG5vdCBhIGNvbnRpbnVhdGlvbiBieXRlXG5cdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG59XG5cbmZ1bmN0aW9uIGRlY29kZVN5bWJvbChzdHJpY3QpIHtcblx0dmFyIGJ5dGUxO1xuXHR2YXIgYnl0ZTI7XG5cdHZhciBieXRlMztcblx0dmFyIGJ5dGU0O1xuXHR2YXIgY29kZVBvaW50O1xuXG5cdGlmIChieXRlSW5kZXggPiBieXRlQ291bnQpIHtcblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBieXRlIGluZGV4Jyk7XG5cdH1cblxuXHRpZiAoYnl0ZUluZGV4ID09IGJ5dGVDb3VudCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIFJlYWQgZmlyc3QgYnl0ZVxuXHRieXRlMSA9IGJ5dGVBcnJheVtieXRlSW5kZXhdICYgMHhGRjtcblx0Ynl0ZUluZGV4Kys7XG5cblx0Ly8gMS1ieXRlIHNlcXVlbmNlIChubyBjb250aW51YXRpb24gYnl0ZXMpXG5cdGlmICgoYnl0ZTEgJiAweDgwKSA9PSAwKSB7XG5cdFx0cmV0dXJuIGJ5dGUxO1xuXHR9XG5cblx0Ly8gMi1ieXRlIHNlcXVlbmNlXG5cdGlmICgoYnl0ZTEgJiAweEUwKSA9PSAweEMwKSB7XG5cdFx0Ynl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDFGKSA8PCA2KSB8IGJ5dGUyO1xuXHRcdGlmIChjb2RlUG9pbnQgPj0gMHg4MCkge1xuXHRcdFx0cmV0dXJuIGNvZGVQb2ludDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcblx0XHR9XG5cdH1cblxuXHQvLyAzLWJ5dGUgc2VxdWVuY2UgKG1heSBpbmNsdWRlIHVucGFpcmVkIHN1cnJvZ2F0ZXMpXG5cdGlmICgoYnl0ZTEgJiAweEYwKSA9PSAweEUwKSB7XG5cdFx0Ynl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgwRikgPDwgMTIpIHwgKGJ5dGUyIDw8IDYpIHwgYnl0ZTM7XG5cdFx0aWYgKGNvZGVQb2ludCA+PSAweDA4MDApIHtcblx0XHRcdHJldHVybiBjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCwgc3RyaWN0KSA/IGNvZGVQb2ludCA6IDB4RkZGRDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcblx0XHR9XG5cdH1cblxuXHQvLyA0LWJ5dGUgc2VxdWVuY2Vcblx0aWYgKChieXRlMSAmIDB4RjgpID09IDB4RjApIHtcblx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Ynl0ZTMgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGJ5dGU0ID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgwNykgPDwgMHgxMikgfCAoYnl0ZTIgPDwgMHgwQykgfFxuXHRcdFx0KGJ5dGUzIDw8IDB4MDYpIHwgYnl0ZTQ7XG5cdFx0aWYgKGNvZGVQb2ludCA+PSAweDAxMDAwMCAmJiBjb2RlUG9pbnQgPD0gMHgxMEZGRkYpIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQ7XG5cdFx0fVxuXHR9XG5cblx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgVVRGLTggZGV0ZWN0ZWQnKTtcbn1cblxudmFyIGJ5dGVBcnJheTtcbnZhciBieXRlQ291bnQ7XG52YXIgYnl0ZUluZGV4O1xuZnVuY3Rpb24gdXRmOGRlY29kZShieXRlU3RyaW5nLCBvcHRzKSB7XG5cdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHR2YXIgc3RyaWN0ID0gZmFsc2UgIT09IG9wdHMuc3RyaWN0O1xuXG5cdGJ5dGVBcnJheSA9IHVjczJkZWNvZGUoYnl0ZVN0cmluZyk7XG5cdGJ5dGVDb3VudCA9IGJ5dGVBcnJheS5sZW5ndGg7XG5cdGJ5dGVJbmRleCA9IDA7XG5cdHZhciBjb2RlUG9pbnRzID0gW107XG5cdHZhciB0bXA7XG5cdHdoaWxlICgodG1wID0gZGVjb2RlU3ltYm9sKHN0cmljdCkpICE9PSBmYWxzZSkge1xuXHRcdGNvZGVQb2ludHMucHVzaCh0bXApO1xuXHR9XG5cdHJldHVybiB1Y3MyZW5jb2RlKGNvZGVQb2ludHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0dmVyc2lvbjogJzIuMS4yJyxcblx0ZW5jb2RlOiB1dGY4ZW5jb2RlLFxuXHRkZWNvZGU6IHV0ZjhkZWNvZGVcbn07XG4iLCIvKlxuICogYmFzZTY0LWFycmF5YnVmZmVyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmlrbGFzdmgvYmFzZTY0LWFycmF5YnVmZmVyXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIE5pa2xhcyB2b24gSGVydHplblxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICovXG4oZnVuY3Rpb24oY2hhcnMpe1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBleHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyKSB7XG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpLFxuICAgIGksIGxlbiA9IGJ5dGVzLmxlbmd0aCwgYmFzZTY0ID0gXCJcIjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTMpIHtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpXSA+PiAyXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2ldICYgMykgPDwgNCkgfCAoYnl0ZXNbaSArIDFdID4+IDQpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2kgKyAxXSAmIDE1KSA8PCAyKSB8IChieXRlc1tpICsgMl0gPj4gNildO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2kgKyAyXSAmIDYzXTtcbiAgICB9XG5cbiAgICBpZiAoKGxlbiAlIDMpID09PSAyKSB7XG4gICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAxKSArIFwiPVwiO1xuICAgIH0gZWxzZSBpZiAobGVuICUgMyA9PT0gMSkge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMikgKyBcIj09XCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2U2NDtcbiAgfTtcblxuICBleHBvcnRzLmRlY29kZSA9ICBmdW5jdGlvbihiYXNlNjQpIHtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYmFzZTY0Lmxlbmd0aCAqIDAuNzUsXG4gICAgbGVuID0gYmFzZTY0Lmxlbmd0aCwgaSwgcCA9IDAsXG4gICAgZW5jb2RlZDEsIGVuY29kZWQyLCBlbmNvZGVkMywgZW5jb2RlZDQ7XG5cbiAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAxXSA9PT0gXCI9XCIpIHtcbiAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMl0gPT09IFwiPVwiKSB7XG4gICAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhcnJheWJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihidWZmZXJMZW5ndGgpLFxuICAgIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSs9NCkge1xuICAgICAgZW5jb2RlZDEgPSBjaGFycy5pbmRleE9mKGJhc2U2NFtpXSk7XG4gICAgICBlbmNvZGVkMiA9IGNoYXJzLmluZGV4T2YoYmFzZTY0W2krMV0pO1xuICAgICAgZW5jb2RlZDMgPSBjaGFycy5pbmRleE9mKGJhc2U2NFtpKzJdKTtcbiAgICAgIGVuY29kZWQ0ID0gY2hhcnMuaW5kZXhPZihiYXNlNjRbaSszXSk7XG5cbiAgICAgIGJ5dGVzW3ArK10gPSAoZW5jb2RlZDEgPDwgMikgfCAoZW5jb2RlZDIgPj4gNCk7XG4gICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMiAmIDE1KSA8PCA0KSB8IChlbmNvZGVkMyA+PiAyKTtcbiAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQzICYgMykgPDwgNikgfCAoZW5jb2RlZDQgJiA2Myk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5YnVmZmVyO1xuICB9O1xufSkoXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCIpO1xuIiwiLyoqXHJcbiAqIENyZWF0ZSBhIGJsb2IgYnVpbGRlciBldmVuIHdoZW4gdmVuZG9yIHByZWZpeGVzIGV4aXN0XHJcbiAqL1xyXG5cclxudmFyIEJsb2JCdWlsZGVyID0gdHlwZW9mIEJsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IEJsb2JCdWlsZGVyIDpcclxuICB0eXBlb2YgV2ViS2l0QmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnID8gV2ViS2l0QmxvYkJ1aWxkZXIgOlxyXG4gIHR5cGVvZiBNU0Jsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IE1TQmxvYkJ1aWxkZXIgOlxyXG4gIHR5cGVvZiBNb3pCbG9iQnVpbGRlciAhPT0gJ3VuZGVmaW5lZCcgPyBNb3pCbG9iQnVpbGRlciA6IFxyXG4gIGZhbHNlO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIEJsb2IgY29uc3RydWN0b3IgaXMgc3VwcG9ydGVkXHJcbiAqL1xyXG5cclxudmFyIGJsb2JTdXBwb3J0ZWQgPSAoZnVuY3Rpb24oKSB7XHJcbiAgdHJ5IHtcclxuICAgIHZhciBhID0gbmV3IEJsb2IoWydoaSddKTtcclxuICAgIHJldHVybiBhLnNpemUgPT09IDI7XHJcbiAgfSBjYXRjaChlKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59KSgpO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIEJsb2IgY29uc3RydWN0b3Igc3VwcG9ydHMgQXJyYXlCdWZmZXJWaWV3c1xyXG4gKiBGYWlscyBpbiBTYWZhcmkgNiwgc28gd2UgbmVlZCB0byBtYXAgdG8gQXJyYXlCdWZmZXJzIHRoZXJlLlxyXG4gKi9cclxuXHJcbnZhciBibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXcgPSBibG9iU3VwcG9ydGVkICYmIChmdW5jdGlvbigpIHtcclxuICB0cnkge1xyXG4gICAgdmFyIGIgPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoWzEsMl0pXSk7XHJcbiAgICByZXR1cm4gYi5zaXplID09PSAyO1xyXG4gIH0gY2F0Y2goZSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufSkoKTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBCbG9iQnVpbGRlciBpcyBzdXBwb3J0ZWRcclxuICovXHJcblxyXG52YXIgYmxvYkJ1aWxkZXJTdXBwb3J0ZWQgPSBCbG9iQnVpbGRlclxyXG4gICYmIEJsb2JCdWlsZGVyLnByb3RvdHlwZS5hcHBlbmRcclxuICAmJiBCbG9iQnVpbGRlci5wcm90b3R5cGUuZ2V0QmxvYjtcclxuXHJcbi8qKlxyXG4gKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCBtYXBzIEFycmF5QnVmZmVyVmlld3MgdG8gQXJyYXlCdWZmZXJzXHJcbiAqIFVzZWQgYnkgQmxvYkJ1aWxkZXIgY29uc3RydWN0b3IgYW5kIG9sZCBicm93c2VycyB0aGF0IGRpZG4ndFxyXG4gKiBzdXBwb3J0IGl0IGluIHRoZSBCbG9iIGNvbnN0cnVjdG9yLlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KSB7XHJcbiAgcmV0dXJuIGFyeS5tYXAoZnVuY3Rpb24oY2h1bmspIHtcclxuICAgIGlmIChjaHVuay5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xyXG4gICAgICB2YXIgYnVmID0gY2h1bmsuYnVmZmVyO1xyXG5cclxuICAgICAgLy8gaWYgdGhpcyBpcyBhIHN1YmFycmF5LCBtYWtlIGEgY29weSBzbyB3ZSBvbmx5XHJcbiAgICAgIC8vIGluY2x1ZGUgdGhlIHN1YmFycmF5IHJlZ2lvbiBmcm9tIHRoZSB1bmRlcmx5aW5nIGJ1ZmZlclxyXG4gICAgICBpZiAoY2h1bmsuYnl0ZUxlbmd0aCAhPT0gYnVmLmJ5dGVMZW5ndGgpIHtcclxuICAgICAgICB2YXIgY29weSA9IG5ldyBVaW50OEFycmF5KGNodW5rLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgIGNvcHkuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZiwgY2h1bmsuYnl0ZU9mZnNldCwgY2h1bmsuYnl0ZUxlbmd0aCkpO1xyXG4gICAgICAgIGJ1ZiA9IGNvcHkuYnVmZmVyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gYnVmO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjaHVuaztcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcihhcnksIG9wdGlvbnMpIHtcclxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcbiAgdmFyIGJiID0gbmV3IEJsb2JCdWlsZGVyKCk7XHJcbiAgbWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpLmZvckVhY2goZnVuY3Rpb24ocGFydCkge1xyXG4gICAgYmIuYXBwZW5kKHBhcnQpO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gKG9wdGlvbnMudHlwZSkgPyBiYi5nZXRCbG9iKG9wdGlvbnMudHlwZSkgOiBiYi5nZXRCbG9iKCk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBCbG9iQ29uc3RydWN0b3IoYXJ5LCBvcHRpb25zKSB7XHJcbiAgcmV0dXJuIG5ldyBCbG9iKG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KSwgb3B0aW9ucyB8fCB7fSk7XHJcbn07XHJcblxyXG5pZiAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgQmxvYkJ1aWxkZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBCbG9iLnByb3RvdHlwZTtcclxuICBCbG9iQ29uc3RydWN0b3IucHJvdG90eXBlID0gQmxvYi5wcm90b3R5cGU7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xyXG4gIGlmIChibG9iU3VwcG9ydGVkKSB7XHJcbiAgICByZXR1cm4gYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3ID8gQmxvYiA6IEJsb2JDb25zdHJ1Y3RvcjtcclxuICB9IGVsc2UgaWYgKGJsb2JCdWlsZGVyU3VwcG9ydGVkKSB7XHJcbiAgICByZXR1cm4gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcjtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICB9XHJcbn0pKCk7XHJcbiIsIi8qKlxuICogQ29tcGlsZXMgYSBxdWVyeXN0cmluZ1xuICogUmV0dXJucyBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBzdHIgPSAnJztcblxuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIGlmIChzdHIubGVuZ3RoKSBzdHIgKz0gJyYnO1xuICAgICAgc3RyICs9IGVuY29kZVVSSUNvbXBvbmVudChpKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHI7XG59O1xuXG4vKipcbiAqIFBhcnNlcyBhIHNpbXBsZSBxdWVyeXN0cmluZyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBxc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbihxcyl7XG4gIHZhciBxcnkgPSB7fTtcbiAgdmFyIHBhaXJzID0gcXMuc3BsaXQoJyYnKTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYWlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XG4gICAgcXJ5W2RlY29kZVVSSUNvbXBvbmVudChwYWlyWzBdKV0gPSBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7XG4gIH1cbiAgcmV0dXJuIHFyeTtcbn07XG4iLCJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYSwgYil7XG4gIHZhciBmbiA9IGZ1bmN0aW9uKCl7fTtcbiAgZm4ucHJvdG90eXBlID0gYi5wcm90b3R5cGU7XG4gIGEucHJvdG90eXBlID0gbmV3IGZuO1xuICBhLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGE7XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFscGhhYmV0ID0gJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LV8nLnNwbGl0KCcnKVxuICAsIGxlbmd0aCA9IDY0XG4gICwgbWFwID0ge31cbiAgLCBzZWVkID0gMFxuICAsIGkgPSAwXG4gICwgcHJldjtcblxuLyoqXG4gKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBzcGVjaWZpZWQgbnVtYmVyLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBudW0gVGhlIG51bWJlciB0byBjb252ZXJ0LlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbnVtYmVyLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZW5jb2RlKG51bSkge1xuICB2YXIgZW5jb2RlZCA9ICcnO1xuXG4gIGRvIHtcbiAgICBlbmNvZGVkID0gYWxwaGFiZXRbbnVtICUgbGVuZ3RoXSArIGVuY29kZWQ7XG4gICAgbnVtID0gTWF0aC5mbG9vcihudW0gLyBsZW5ndGgpO1xuICB9IHdoaWxlIChudW0gPiAwKTtcblxuICByZXR1cm4gZW5jb2RlZDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGludGVnZXIgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBnaXZlbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgaW50ZWdlciB2YWx1ZSByZXByZXNlbnRlZCBieSB0aGUgc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZGVjb2RlKHN0cikge1xuICB2YXIgZGVjb2RlZCA9IDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGRlY29kZWQgPSBkZWNvZGVkICogbGVuZ3RoICsgbWFwW3N0ci5jaGFyQXQoaSldO1xuICB9XG5cbiAgcmV0dXJuIGRlY29kZWQ7XG59XG5cbi8qKlxuICogWWVhc3Q6IEEgdGlueSBncm93aW5nIGlkIGdlbmVyYXRvci5cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBBIHVuaXF1ZSBpZC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHllYXN0KCkge1xuICB2YXIgbm93ID0gZW5jb2RlKCtuZXcgRGF0ZSgpKTtcblxuICBpZiAobm93ICE9PSBwcmV2KSByZXR1cm4gc2VlZCA9IDAsIHByZXYgPSBub3c7XG4gIHJldHVybiBub3cgKycuJysgZW5jb2RlKHNlZWQrKyk7XG59XG5cbi8vXG4vLyBNYXAgZWFjaCBjaGFyYWN0ZXIgdG8gaXRzIGluZGV4LlxuLy9cbmZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIG1hcFthbHBoYWJldFtpXV0gPSBpO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBgeWVhc3RgLCBgZW5jb2RlYCBhbmQgYGRlY29kZWAgZnVuY3Rpb25zLlxuLy9cbnllYXN0LmVuY29kZSA9IGVuY29kZTtcbnllYXN0LmRlY29kZSA9IGRlY29kZTtcbm1vZHVsZS5leHBvcnRzID0geWVhc3Q7XG4iLCIvKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZWJ1ZycpO1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9ICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWVcbiAgICAgICAgICAgICAgICYmICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWUuc3RvcmFnZVxuICAgICAgICAgICAgICAgICAgPyBjaHJvbWUuc3RvcmFnZS5sb2NhbFxuICAgICAgICAgICAgICAgICAgOiBsb2NhbHN0b3JhZ2UoKTtcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbXG4gICcjMDAwMENDJywgJyMwMDAwRkYnLCAnIzAwMzNDQycsICcjMDAzM0ZGJywgJyMwMDY2Q0MnLCAnIzAwNjZGRicsICcjMDA5OUNDJyxcbiAgJyMwMDk5RkYnLCAnIzAwQ0MwMCcsICcjMDBDQzMzJywgJyMwMENDNjYnLCAnIzAwQ0M5OScsICcjMDBDQ0NDJywgJyMwMENDRkYnLFxuICAnIzMzMDBDQycsICcjMzMwMEZGJywgJyMzMzMzQ0MnLCAnIzMzMzNGRicsICcjMzM2NkNDJywgJyMzMzY2RkYnLCAnIzMzOTlDQycsXG4gICcjMzM5OUZGJywgJyMzM0NDMDAnLCAnIzMzQ0MzMycsICcjMzNDQzY2JywgJyMzM0NDOTknLCAnIzMzQ0NDQycsICcjMzNDQ0ZGJyxcbiAgJyM2NjAwQ0MnLCAnIzY2MDBGRicsICcjNjYzM0NDJywgJyM2NjMzRkYnLCAnIzY2Q0MwMCcsICcjNjZDQzMzJywgJyM5OTAwQ0MnLFxuICAnIzk5MDBGRicsICcjOTkzM0NDJywgJyM5OTMzRkYnLCAnIzk5Q0MwMCcsICcjOTlDQzMzJywgJyNDQzAwMDAnLCAnI0NDMDAzMycsXG4gICcjQ0MwMDY2JywgJyNDQzAwOTknLCAnI0NDMDBDQycsICcjQ0MwMEZGJywgJyNDQzMzMDAnLCAnI0NDMzMzMycsICcjQ0MzMzY2JyxcbiAgJyNDQzMzOTknLCAnI0NDMzNDQycsICcjQ0MzM0ZGJywgJyNDQzY2MDAnLCAnI0NDNjYzMycsICcjQ0M5OTAwJywgJyNDQzk5MzMnLFxuICAnI0NDQ0MwMCcsICcjQ0NDQzMzJywgJyNGRjAwMDAnLCAnI0ZGMDAzMycsICcjRkYwMDY2JywgJyNGRjAwOTknLCAnI0ZGMDBDQycsXG4gICcjRkYwMEZGJywgJyNGRjMzMDAnLCAnI0ZGMzMzMycsICcjRkYzMzY2JywgJyNGRjMzOTknLCAnI0ZGMzNDQycsICcjRkYzM0ZGJyxcbiAgJyNGRjY2MDAnLCAnI0ZGNjYzMycsICcjRkY5OTAwJywgJyNGRjk5MzMnLCAnI0ZGQ0MwMCcsICcjRkZDQzMzJ1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLFxuICogYW5kIHRoZSBGaXJlYnVnIGV4dGVuc2lvbiAoYW55IEZpcmVmb3ggdmVyc2lvbikgYXJlIGtub3duXG4gKiB0byBzdXBwb3J0IFwiJWNcIiBDU1MgY3VzdG9taXphdGlvbnMuXG4gKlxuICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG4gIC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcbiAgLy8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2VcbiAgLy8gZXhwbGljaXRseVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgd2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBpcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuICAvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuICByZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcbiAgICAvLyBpcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcbiAgICAvLyBpcyBmaXJlZm94ID49IHYzMT9cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcbiAgICAvLyBkb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbih2KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyLm1lc3NhZ2U7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcbiAgdmFyIHVzZUNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuXG4gIGFyZ3NbMF0gPSAodXNlQ29sb3JzID8gJyVjJyA6ICcnKVxuICAgICsgdGhpcy5uYW1lc3BhY2VcbiAgICArICh1c2VDb2xvcnMgPyAnICVjJyA6ICcgJylcbiAgICArIGFyZ3NbMF1cbiAgICArICh1c2VDb2xvcnMgPyAnJWMgJyA6ICcgJylcbiAgICArICcrJyArIGV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuICBpZiAoIXVzZUNvbG9ycykgcmV0dXJuO1xuXG4gIHZhciBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcbiAgYXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0JylcblxuICAvLyB0aGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuICAvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG4gIC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdEMgPSAwO1xuICBhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICBpZiAoJyUlJyA9PT0gbWF0Y2gpIHJldHVybjtcbiAgICBpbmRleCsrO1xuICAgIGlmICgnJWMnID09PSBtYXRjaCkge1xuICAgICAgLy8gd2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG4gICAgICAvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuICAgICAgbGFzdEMgPSBpbmRleDtcbiAgICB9XG4gIH0pO1xuXG4gIGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBsb2coKSB7XG4gIC8vIHRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG4gIC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG4gIHJldHVybiAnb2JqZWN0JyA9PT0gdHlwZW9mIGNvbnNvbGVcbiAgICAmJiBjb25zb2xlLmxvZ1xuICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgdHJ5IHtcbiAgICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLmRlYnVnID0gbmFtZXNwYWNlcztcbiAgICB9XG4gIH0gY2F0Y2goZSkge31cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2FkKCkge1xuICB2YXIgcjtcbiAgdHJ5IHtcbiAgICByID0gZXhwb3J0cy5zdG9yYWdlLmRlYnVnO1xuICB9IGNhdGNoKGUpIHt9XG5cbiAgLy8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuICBpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcbiAgICByID0gcHJvY2Vzcy5lbnYuREVCVUc7XG4gIH1cblxuICByZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBFbmFibGUgbmFtZXNwYWNlcyBsaXN0ZWQgaW4gYGxvY2FsU3RvcmFnZS5kZWJ1Z2AgaW5pdGlhbGx5LlxuICovXG5cbmV4cG9ydHMuZW5hYmxlKGxvYWQoKSk7XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICB9IGNhdGNoIChlKSB7fVxufVxuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWdbJ2RlZmF1bHQnXSA9IGNyZWF0ZURlYnVnO1xuZXhwb3J0cy5jb2VyY2UgPSBjb2VyY2U7XG5leHBvcnRzLmRpc2FibGUgPSBkaXNhYmxlO1xuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XG5leHBvcnRzLmVuYWJsZWQgPSBlbmFibGVkO1xuZXhwb3J0cy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cbi8qKlxuICogQWN0aXZlIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuICovXG5leHBvcnRzLmluc3RhbmNlcyA9IFtdO1xuXG4vKipcbiAqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuICovXG5cbmV4cG9ydHMubmFtZXMgPSBbXTtcbmV4cG9ydHMuc2tpcHMgPSBbXTtcblxuLyoqXG4gKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gKlxuICogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycyA9IHt9O1xuXG4vKipcbiAqIFNlbGVjdCBhIGNvbG9yLlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG4gIHZhciBoYXNoID0gMCwgaTtcblxuICBmb3IgKGkgaW4gbmFtZXNwYWNlKSB7XG4gICAgaGFzaCAgPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBleHBvcnRzLmNvbG9ycy5sZW5ndGhdO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblxuICB2YXIgcHJldlRpbWU7XG5cbiAgZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgLy8gZGlzYWJsZWQ/XG4gICAgaWYgKCFkZWJ1Zy5lbmFibGVkKSByZXR1cm47XG5cbiAgICB2YXIgc2VsZiA9IGRlYnVnO1xuXG4gICAgLy8gc2V0IGBkaWZmYCB0aW1lc3RhbXBcbiAgICB2YXIgY3VyciA9ICtuZXcgRGF0ZSgpO1xuICAgIHZhciBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG4gICAgc2VsZi5kaWZmID0gbXM7XG4gICAgc2VsZi5wcmV2ID0gcHJldlRpbWU7XG4gICAgc2VsZi5jdXJyID0gY3VycjtcbiAgICBwcmV2VGltZSA9IGN1cnI7XG5cbiAgICAvLyB0dXJuIHRoZSBgYXJndW1lbnRzYCBpbnRvIGEgcHJvcGVyIEFycmF5XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGFyZ3NbMF0gPSBleHBvcnRzLmNvZXJjZShhcmdzWzBdKTtcblxuICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGFyZ3NbMF0pIHtcbiAgICAgIC8vIGFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG4gICAgICBhcmdzLnVuc2hpZnQoJyVPJyk7XG4gICAgfVxuXG4gICAgLy8gYXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCBmdW5jdGlvbihtYXRjaCwgZm9ybWF0KSB7XG4gICAgICAvLyBpZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG4gICAgICBpZiAobWF0Y2ggPT09ICclJScpIHJldHVybiBtYXRjaDtcbiAgICAgIGluZGV4Kys7XG4gICAgICB2YXIgZm9ybWF0dGVyID0gZXhwb3J0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG4gICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGZvcm1hdHRlcikge1xuICAgICAgICB2YXIgdmFsID0gYXJnc1tpbmRleF07XG4gICAgICAgIG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuICAgICAgICAvLyBub3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG4gICAgICAgIGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIC8vIGFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG4gICAgZXhwb3J0cy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cbiAgICB2YXIgbG9nRm4gPSBkZWJ1Zy5sb2cgfHwgZXhwb3J0cy5sb2cgfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcbiAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxuXG4gIGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgZGVidWcuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChuYW1lc3BhY2UpO1xuICBkZWJ1Zy51c2VDb2xvcnMgPSBleHBvcnRzLnVzZUNvbG9ycygpO1xuICBkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG4gIGRlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuXG4gIC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZXhwb3J0cy5pbml0KSB7XG4gICAgZXhwb3J0cy5pbml0KGRlYnVnKTtcbiAgfVxuXG4gIGV4cG9ydHMuaW5zdGFuY2VzLnB1c2goZGVidWcpO1xuXG4gIHJldHVybiBkZWJ1Zztcbn1cblxuZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gIHZhciBpbmRleCA9IGV4cG9ydHMuaW5zdGFuY2VzLmluZGV4T2YodGhpcyk7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICBleHBvcnRzLmluc3RhbmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcbiAqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcbiAgZXhwb3J0cy5zYXZlKG5hbWVzcGFjZXMpO1xuXG4gIGV4cG9ydHMubmFtZXMgPSBbXTtcbiAgZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4gIHZhciBpO1xuICB2YXIgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuICB2YXIgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICghc3BsaXRbaV0pIGNvbnRpbnVlOyAvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuICAgIG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuICAgIGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcbiAgICAgIGV4cG9ydHMuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgZXhwb3J0cy5pbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBleHBvcnRzLmluc3RhbmNlc1tpXTtcbiAgICBpbnN0YW5jZS5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKGluc3RhbmNlLm5hbWVzcGFjZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gIGV4cG9ydHMuZW5hYmxlKCcnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuICBpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgaSwgbGVuO1xuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMubmFtZXNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDb2VyY2UgYHZhbGAuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuICByZXR1cm4gdmFsO1xufVxuIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKCg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgaWYgKG1zID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtcyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHJldHVybiBwbHVyYWwobXMsIGQsICdkYXknKSB8fFxuICAgIHBsdXJhbChtcywgaCwgJ2hvdXInKSB8fFxuICAgIHBsdXJhbChtcywgbSwgJ21pbnV0ZScpIHx8XG4gICAgcGx1cmFsKG1zLCBzLCAnc2Vjb25kJykgfHxcbiAgICBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkge1xuICBpZiAobXMgPCBuKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtcyA8IG4gKiAxLjUpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihtcyAvIG4pICsgJyAnICsgbmFtZTtcbiAgfVxuICByZXR1cm4gTWF0aC5jZWlsKG1zIC8gbikgKyAnICcgKyBuYW1lICsgJ3MnO1xufVxuIiwiLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBQb2xsaW5nID0gcmVxdWlyZSgnLi9wb2xsaW5nJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgZ2xvYmFsVGhpcyA9IHJlcXVpcmUoJy4uL2dsb2JhbFRoaXMnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpTT05QUG9sbGluZztcblxuLyoqXG4gKiBDYWNoZWQgcmVndWxhciBleHByZXNzaW9ucy5cbiAqL1xuXG52YXIgck5ld2xpbmUgPSAvXFxuL2c7XG52YXIgckVzY2FwZWROZXdsaW5lID0gL1xcXFxuL2c7XG5cbi8qKlxuICogR2xvYmFsIEpTT05QIGNhbGxiYWNrcy5cbiAqL1xuXG52YXIgY2FsbGJhY2tzO1xuXG4vKipcbiAqIE5vb3AuXG4gKi9cblxuZnVuY3Rpb24gZW1wdHkgKCkgeyB9XG5cbi8qKlxuICogSlNPTlAgUG9sbGluZyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gSlNPTlBQb2xsaW5nIChvcHRzKSB7XG4gIFBvbGxpbmcuY2FsbCh0aGlzLCBvcHRzKTtcblxuICB0aGlzLnF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcblxuICAvLyBkZWZpbmUgZ2xvYmFsIGNhbGxiYWNrcyBhcnJheSBpZiBub3QgcHJlc2VudFxuICAvLyB3ZSBkbyB0aGlzIGhlcmUgKGxhemlseSkgdG8gYXZvaWQgdW5uZWVkZWQgZ2xvYmFsIHBvbGx1dGlvblxuICBpZiAoIWNhbGxiYWNrcykge1xuICAgIC8vIHdlIG5lZWQgdG8gY29uc2lkZXIgbXVsdGlwbGUgZW5naW5lcyBpbiB0aGUgc2FtZSBwYWdlXG4gICAgY2FsbGJhY2tzID0gZ2xvYmFsVGhpcy5fX19laW8gPSAoZ2xvYmFsVGhpcy5fX19laW8gfHwgW10pO1xuICB9XG5cbiAgLy8gY2FsbGJhY2sgaWRlbnRpZmllclxuICB0aGlzLmluZGV4ID0gY2FsbGJhY2tzLmxlbmd0aDtcblxuICAvLyBhZGQgY2FsbGJhY2sgdG8ganNvbnAgZ2xvYmFsXG4gIHZhciBzZWxmID0gdGhpcztcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKG1zZykge1xuICAgIHNlbGYub25EYXRhKG1zZyk7XG4gIH0pO1xuXG4gIC8vIGFwcGVuZCB0byBxdWVyeSBzdHJpbmdcbiAgdGhpcy5xdWVyeS5qID0gdGhpcy5pbmRleDtcblxuICAvLyBwcmV2ZW50IHNwdXJpb3VzIGVycm9ycyBmcm9tIGJlaW5nIGVtaXR0ZWQgd2hlbiB0aGUgd2luZG93IGlzIHVubG9hZGVkXG4gIGlmICh0eXBlb2YgYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLnNjcmlwdCkgc2VsZi5zY3JpcHQub25lcnJvciA9IGVtcHR5O1xuICAgIH0sIGZhbHNlKTtcbiAgfVxufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gUG9sbGluZy5cbiAqL1xuXG5pbmhlcml0KEpTT05QUG9sbGluZywgUG9sbGluZyk7XG5cbi8qXG4gKiBKU09OUCBvbmx5IHN1cHBvcnRzIGJpbmFyeSBhcyBiYXNlNjQgZW5jb2RlZCBzdHJpbmdzXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuXG4vKipcbiAqIENsb3NlcyB0aGUgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc2NyaXB0KSB7XG4gICAgdGhpcy5zY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNjcmlwdCk7XG4gICAgdGhpcy5zY3JpcHQgPSBudWxsO1xuICB9XG5cbiAgaWYgKHRoaXMuZm9ybSkge1xuICAgIHRoaXMuZm9ybS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZm9ybSk7XG4gICAgdGhpcy5mb3JtID0gbnVsbDtcbiAgICB0aGlzLmlmcmFtZSA9IG51bGw7XG4gIH1cblxuICBQb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gIGlmICh0aGlzLnNjcmlwdCkge1xuICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgfVxuXG4gIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gIHNjcmlwdC5zcmMgPSB0aGlzLnVyaSgpO1xuICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgc2VsZi5vbkVycm9yKCdqc29ucCBwb2xsIGVycm9yJywgZSk7XG4gIH07XG5cbiAgdmFyIGluc2VydEF0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICBpZiAoaW5zZXJ0QXQpIHtcbiAgICBpbnNlcnRBdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY3JpcHQsIGluc2VydEF0KTtcbiAgfSBlbHNlIHtcbiAgICAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICB9XG4gIHRoaXMuc2NyaXB0ID0gc2NyaXB0O1xuXG4gIHZhciBpc1VBZ2Vja28gPSAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG5hdmlnYXRvciAmJiAvZ2Vja28vaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4gIGlmIChpc1VBZ2Vja28pIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICB9LCAxMDApO1xuICB9XG59O1xuXG4vKipcbiAqIFdyaXRlcyB3aXRoIGEgaGlkZGVuIGlmcmFtZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSB0byBzZW5kXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9Xcml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBmbikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKCF0aGlzLmZvcm0pIHtcbiAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgICB2YXIgYXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgdmFyIGlkID0gdGhpcy5pZnJhbWVJZCA9ICdlaW9faWZyYW1lXycgKyB0aGlzLmluZGV4O1xuICAgIHZhciBpZnJhbWU7XG5cbiAgICBmb3JtLmNsYXNzTmFtZSA9ICdzb2NrZXRpbyc7XG4gICAgZm9ybS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgZm9ybS5zdHlsZS50b3AgPSAnLTEwMDBweCc7XG4gICAgZm9ybS5zdHlsZS5sZWZ0ID0gJy0xMDAwcHgnO1xuICAgIGZvcm0udGFyZ2V0ID0gaWQ7XG4gICAgZm9ybS5tZXRob2QgPSAnUE9TVCc7XG4gICAgZm9ybS5zZXRBdHRyaWJ1dGUoJ2FjY2VwdC1jaGFyc2V0JywgJ3V0Zi04Jyk7XG4gICAgYXJlYS5uYW1lID0gJ2QnO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQoYXJlYSk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcblxuICAgIHRoaXMuZm9ybSA9IGZvcm07XG4gICAgdGhpcy5hcmVhID0gYXJlYTtcbiAgfVxuXG4gIHRoaXMuZm9ybS5hY3Rpb24gPSB0aGlzLnVyaSgpO1xuXG4gIGZ1bmN0aW9uIGNvbXBsZXRlICgpIHtcbiAgICBpbml0SWZyYW1lKCk7XG4gICAgZm4oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRJZnJhbWUgKCkge1xuICAgIGlmIChzZWxmLmlmcmFtZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2VsZi5mb3JtLnJlbW92ZUNoaWxkKHNlbGYuaWZyYW1lKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgc2VsZi5vbkVycm9yKCdqc29ucCBwb2xsaW5nIGlmcmFtZSByZW1vdmFsIGVycm9yJywgZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIGllNiBkeW5hbWljIGlmcmFtZXMgd2l0aCB0YXJnZXQ9XCJcIiBzdXBwb3J0ICh0aGFua3MgQ2hyaXMgTGFtYmFjaGVyKVxuICAgICAgdmFyIGh0bWwgPSAnPGlmcmFtZSBzcmM9XCJqYXZhc2NyaXB0OjBcIiBuYW1lPVwiJyArIHNlbGYuaWZyYW1lSWQgKyAnXCI+JztcbiAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaHRtbCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICBpZnJhbWUubmFtZSA9IHNlbGYuaWZyYW1lSWQ7XG4gICAgICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6MCc7XG4gICAgfVxuXG4gICAgaWZyYW1lLmlkID0gc2VsZi5pZnJhbWVJZDtcblxuICAgIHNlbGYuZm9ybS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgIHNlbGYuaWZyYW1lID0gaWZyYW1lO1xuICB9XG5cbiAgaW5pdElmcmFtZSgpO1xuXG4gIC8vIGVzY2FwZSBcXG4gdG8gcHJldmVudCBpdCBmcm9tIGJlaW5nIGNvbnZlcnRlZCBpbnRvIFxcclxcbiBieSBzb21lIFVBc1xuICAvLyBkb3VibGUgZXNjYXBpbmcgaXMgcmVxdWlyZWQgZm9yIGVzY2FwZWQgbmV3IGxpbmVzIGJlY2F1c2UgdW5lc2NhcGluZyBvZiBuZXcgbGluZXMgY2FuIGJlIGRvbmUgc2FmZWx5IG9uIHNlcnZlci1zaWRlXG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UockVzY2FwZWROZXdsaW5lLCAnXFxcXFxcbicpO1xuICB0aGlzLmFyZWEudmFsdWUgPSBkYXRhLnJlcGxhY2Uock5ld2xpbmUsICdcXFxcbicpO1xuXG4gIHRyeSB7XG4gICAgdGhpcy5mb3JtLnN1Ym1pdCgpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIGlmICh0aGlzLmlmcmFtZS5hdHRhY2hFdmVudCkge1xuICAgIHRoaXMuaWZyYW1lLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmlmcmFtZS5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmlmcmFtZS5vbmxvYWQgPSBjb21wbGV0ZTtcbiAgfVxufTtcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi4vdHJhbnNwb3J0Jyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIHBhcnNlcXMgPSByZXF1aXJlKCdwYXJzZXFzJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgeWVhc3QgPSByZXF1aXJlKCd5ZWFzdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDp3ZWJzb2NrZXQnKTtcblxudmFyIEJyb3dzZXJXZWJTb2NrZXQsIE5vZGVXZWJTb2NrZXQ7XG5cbmlmICh0eXBlb2YgV2ViU29ja2V0ICE9PSAndW5kZWZpbmVkJykge1xuICBCcm93c2VyV2ViU29ja2V0ID0gV2ViU29ja2V0O1xufSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgQnJvd3NlcldlYlNvY2tldCA9IHNlbGYuV2ViU29ja2V0IHx8IHNlbGYuTW96V2ViU29ja2V0O1xufVxuXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgdHJ5IHtcbiAgICBOb2RlV2ViU29ja2V0ID0gcmVxdWlyZSgnd3MnKTtcbiAgfSBjYXRjaCAoZSkgeyB9XG59XG5cbi8qKlxuICogR2V0IGVpdGhlciB0aGUgYFdlYlNvY2tldGAgb3IgYE1veldlYlNvY2tldGAgZ2xvYmFsc1xuICogaW4gdGhlIGJyb3dzZXIgb3IgdHJ5IHRvIHJlc29sdmUgV2ViU29ja2V0LWNvbXBhdGlibGVcbiAqIGludGVyZmFjZSBleHBvc2VkIGJ5IGB3c2AgZm9yIE5vZGUtbGlrZSBlbnZpcm9ubWVudC5cbiAqL1xuXG52YXIgV2ViU29ja2V0SW1wbCA9IEJyb3dzZXJXZWJTb2NrZXQgfHwgTm9kZVdlYlNvY2tldDtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdTO1xuXG4vKipcbiAqIFdlYlNvY2tldCB0cmFuc3BvcnQgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSB7T2JqZWN0fSBjb25uZWN0aW9uIG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gV1MgKG9wdHMpIHtcbiAgdmFyIGZvcmNlQmFzZTY0ID0gKG9wdHMgJiYgb3B0cy5mb3JjZUJhc2U2NCk7XG4gIGlmIChmb3JjZUJhc2U2NCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuICB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0gb3B0cy5wZXJNZXNzYWdlRGVmbGF0ZTtcbiAgdGhpcy51c2luZ0Jyb3dzZXJXZWJTb2NrZXQgPSBCcm93c2VyV2ViU29ja2V0ICYmICFvcHRzLmZvcmNlTm9kZTtcbiAgdGhpcy5wcm90b2NvbHMgPSBvcHRzLnByb3RvY29scztcbiAgaWYgKCF0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgIFdlYlNvY2tldEltcGwgPSBOb2RlV2ViU29ja2V0O1xuICB9XG4gIFRyYW5zcG9ydC5jYWxsKHRoaXMsIG9wdHMpO1xufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gVHJhbnNwb3J0LlxuICovXG5cbmluaGVyaXQoV1MsIFRyYW5zcG9ydCk7XG5cbi8qKlxuICogVHJhbnNwb3J0IG5hbWUuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5XUy5wcm90b3R5cGUubmFtZSA9ICd3ZWJzb2NrZXQnO1xuXG4vKlxuICogV2ViU29ja2V0cyBzdXBwb3J0IGJpbmFyeVxuICovXG5cbldTLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG5cbi8qKlxuICogT3BlbnMgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5jaGVjaygpKSB7XG4gICAgLy8gbGV0IHByb2JlIHRpbWVvdXRcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdXJpID0gdGhpcy51cmkoKTtcbiAgdmFyIHByb3RvY29scyA9IHRoaXMucHJvdG9jb2xzO1xuXG4gIHZhciBvcHRzID0ge307XG5cbiAgaWYgKCF0aGlzLmlzUmVhY3ROYXRpdmUpIHtcbiAgICBvcHRzLmFnZW50ID0gdGhpcy5hZ2VudDtcbiAgICBvcHRzLnBlck1lc3NhZ2VEZWZsYXRlID0gdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZTtcblxuICAgIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICAgIG9wdHMucGZ4ID0gdGhpcy5wZng7XG4gICAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgICBvcHRzLnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2U7XG4gICAgb3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O1xuICAgIG9wdHMuY2EgPSB0aGlzLmNhO1xuICAgIG9wdHMuY2lwaGVycyA9IHRoaXMuY2lwaGVycztcbiAgICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO1xuICB9XG5cbiAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgb3B0cy5oZWFkZXJzID0gdGhpcy5leHRyYUhlYWRlcnM7XG4gIH1cbiAgaWYgKHRoaXMubG9jYWxBZGRyZXNzKSB7XG4gICAgb3B0cy5sb2NhbEFkZHJlc3MgPSB0aGlzLmxvY2FsQWRkcmVzcztcbiAgfVxuXG4gIHRyeSB7XG4gICAgdGhpcy53cyA9XG4gICAgICB0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCAmJiAhdGhpcy5pc1JlYWN0TmF0aXZlXG4gICAgICAgID8gcHJvdG9jb2xzXG4gICAgICAgICAgPyBuZXcgV2ViU29ja2V0SW1wbCh1cmksIHByb3RvY29scylcbiAgICAgICAgICA6IG5ldyBXZWJTb2NrZXRJbXBsKHVyaSlcbiAgICAgICAgOiBuZXcgV2ViU29ja2V0SW1wbCh1cmksIHByb3RvY29scywgb3B0cyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgfVxuXG4gIGlmICh0aGlzLndzLmJpbmFyeVR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLndzLnN1cHBvcnRzICYmIHRoaXMud3Muc3VwcG9ydHMuYmluYXJ5KSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG4gICAgdGhpcy53cy5iaW5hcnlUeXBlID0gJ25vZGVidWZmZXInO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud3MuYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gIH1cblxuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG59O1xuXG4vKipcbiAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBzb2NrZXRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLndzLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uT3BlbigpO1xuICB9O1xuICB0aGlzLndzLm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCk7XG4gIH07XG4gIHRoaXMud3Mub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgc2VsZi5vbkRhdGEoZXYuZGF0YSk7XG4gIH07XG4gIHRoaXMud3Mub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgc2VsZi5vbkVycm9yKCd3ZWJzb2NrZXQgZXJyb3InLCBlKTtcbiAgfTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGRhdGEgdG8gc29ja2V0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IG9mIHBhY2tldHMuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAocGFja2V0cykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICAvLyBlbmNvZGVQYWNrZXQgZWZmaWNpZW50IGFzIGl0IHVzZXMgV1MgZnJhbWluZ1xuICAvLyBubyBuZWVkIGZvciBlbmNvZGVQYXlsb2FkXG4gIHZhciB0b3RhbCA9IHBhY2tldHMubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHRvdGFsOyBpIDwgbDsgaSsrKSB7XG4gICAgKGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICAgIHBhcnNlci5lbmNvZGVQYWNrZXQocGFja2V0LCBzZWxmLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAoIXNlbGYudXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgICAgICAgLy8gYWx3YXlzIGNyZWF0ZSBhIG5ldyBvYmplY3QgKEdILTQzNylcbiAgICAgICAgICB2YXIgb3B0cyA9IHt9O1xuICAgICAgICAgIGlmIChwYWNrZXQub3B0aW9ucykge1xuICAgICAgICAgICAgb3B0cy5jb21wcmVzcyA9IHBhY2tldC5vcHRpb25zLmNvbXByZXNzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWxmLnBlck1lc3NhZ2VEZWZsYXRlKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gJ3N0cmluZycgPT09IHR5cGVvZiBkYXRhID8gQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSkgOiBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChsZW4gPCBzZWxmLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICBvcHRzLmNvbXByZXNzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU29tZXRpbWVzIHRoZSB3ZWJzb2NrZXQgaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQgYnV0IHRoZSBicm93c2VyIGRpZG4ndFxuICAgICAgICAvLyBoYXZlIGEgY2hhbmNlIG9mIGluZm9ybWluZyB1cyBhYm91dCBpdCB5ZXQsIGluIHRoYXQgY2FzZSBzZW5kIHdpbGxcbiAgICAgICAgLy8gdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoc2VsZi51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAgIC8vIFR5cGVFcnJvciBpcyB0aHJvd24gd2hlbiBwYXNzaW5nIHRoZSBzZWNvbmQgYXJndW1lbnQgb24gU2FmYXJpXG4gICAgICAgICAgICBzZWxmLndzLnNlbmQoZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYud3Muc2VuZChkYXRhLCBvcHRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkZWJ1Zygnd2Vic29ja2V0IGNsb3NlZCBiZWZvcmUgb25jbG9zZSBldmVudCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLS10b3RhbCB8fCBkb25lKCk7XG4gICAgICB9KTtcbiAgICB9KShwYWNrZXRzW2ldKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvbmUgKCkge1xuICAgIHNlbGYuZW1pdCgnZmx1c2gnKTtcblxuICAgIC8vIGZha2UgZHJhaW5cbiAgICAvLyBkZWZlciB0byBuZXh0IHRpY2sgdG8gYWxsb3cgU29ja2V0IHRvIGNsZWFyIHdyaXRlQnVmZmVyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgICB9LCAwKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBjbG9zZVxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBUcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UuY2FsbCh0aGlzKTtcbn07XG5cbi8qKlxuICogQ2xvc2VzIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiB0aGlzLndzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMud3MuY2xvc2UoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgdXJpIGZvciBjb25uZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS51cmkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gIHZhciBzY2hlbWEgPSB0aGlzLnNlY3VyZSA/ICd3c3MnIDogJ3dzJztcbiAgdmFyIHBvcnQgPSAnJztcblxuICAvLyBhdm9pZCBwb3J0IGlmIGRlZmF1bHQgZm9yIHNjaGVtYVxuICBpZiAodGhpcy5wb3J0ICYmICgoJ3dzcycgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gNDQzKSB8fFxuICAgICgnd3MnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDgwKSkpIHtcbiAgICBwb3J0ID0gJzonICsgdGhpcy5wb3J0O1xuICB9XG5cbiAgLy8gYXBwZW5kIHRpbWVzdGFtcCB0byBVUklcbiAgaWYgKHRoaXMudGltZXN0YW1wUmVxdWVzdHMpIHtcbiAgICBxdWVyeVt0aGlzLnRpbWVzdGFtcFBhcmFtXSA9IHllYXN0KCk7XG4gIH1cblxuICAvLyBjb21tdW5pY2F0ZSBiaW5hcnkgc3VwcG9ydCBjYXBhYmlsaXRpZXNcbiAgaWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcXVlcnkuYjY0ID0gMTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xO1xuICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbn07XG5cbi8qKlxuICogRmVhdHVyZSBkZXRlY3Rpb24gZm9yIFdlYlNvY2tldC5cbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufSB3aGV0aGVyIHRoaXMgdHJhbnNwb3J0IGlzIGF2YWlsYWJsZS5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuV1MucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISFXZWJTb2NrZXRJbXBsICYmICEoJ19faW5pdGlhbGl6ZScgaW4gV2ViU29ja2V0SW1wbCAmJiB0aGlzLm5hbWUgPT09IFdTLnByb3RvdHlwZS5uYW1lKTtcbn07XG4iLCJcbnZhciBpbmRleE9mID0gW10uaW5kZXhPZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnIsIG9iail7XG4gIGlmIChpbmRleE9mKSByZXR1cm4gYXJyLmluZGV4T2Yob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoYXJyW2ldID09PSBvYmopIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn07IiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciB0b0FycmF5ID0gcmVxdWlyZSgndG8tYXJyYXknKTtcbnZhciBvbiA9IHJlcXVpcmUoJy4vb24nKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnY29tcG9uZW50LWJpbmQnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6c29ja2V0Jyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBoYXNCaW4gPSByZXF1aXJlKCdoYXMtYmluYXJ5MicpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IFNvY2tldDtcblxuLyoqXG4gKiBJbnRlcm5hbCBldmVudHMgKGJsYWNrbGlzdGVkKS5cbiAqIFRoZXNlIGV2ZW50cyBjYW4ndCBiZSBlbWl0dGVkIGJ5IHRoZSB1c2VyLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbnZhciBldmVudHMgPSB7XG4gIGNvbm5lY3Q6IDEsXG4gIGNvbm5lY3RfZXJyb3I6IDEsXG4gIGNvbm5lY3RfdGltZW91dDogMSxcbiAgY29ubmVjdGluZzogMSxcbiAgZGlzY29ubmVjdDogMSxcbiAgZXJyb3I6IDEsXG4gIHJlY29ubmVjdDogMSxcbiAgcmVjb25uZWN0X2F0dGVtcHQ6IDEsXG4gIHJlY29ubmVjdF9mYWlsZWQ6IDEsXG4gIHJlY29ubmVjdF9lcnJvcjogMSxcbiAgcmVjb25uZWN0aW5nOiAxLFxuICBwaW5nOiAxLFxuICBwb25nOiAxXG59O1xuXG4vKipcbiAqIFNob3J0Y3V0IHRvIGBFbWl0dGVyI2VtaXRgLlxuICovXG5cbnZhciBlbWl0ID0gRW1pdHRlci5wcm90b3R5cGUuZW1pdDtcblxuLyoqXG4gKiBgU29ja2V0YCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFNvY2tldCAoaW8sIG5zcCwgb3B0cykge1xuICB0aGlzLmlvID0gaW87XG4gIHRoaXMubnNwID0gbnNwO1xuICB0aGlzLmpzb24gPSB0aGlzOyAvLyBjb21wYXRcbiAgdGhpcy5pZHMgPSAwO1xuICB0aGlzLmFja3MgPSB7fTtcbiAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG4gIHRoaXMuc2VuZEJ1ZmZlciA9IFtdO1xuICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gIHRoaXMuZmxhZ3MgPSB7fTtcbiAgaWYgKG9wdHMgJiYgb3B0cy5xdWVyeSkge1xuICAgIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5O1xuICB9XG4gIGlmICh0aGlzLmlvLmF1dG9Db25uZWN0KSB0aGlzLm9wZW4oKTtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoU29ja2V0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogU3Vic2NyaWJlIHRvIG9wZW4sIGNsb3NlIGFuZCBwYWNrZXQgZXZlbnRzXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zdWJFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnN1YnMpIHJldHVybjtcblxuICB2YXIgaW8gPSB0aGlzLmlvO1xuICB0aGlzLnN1YnMgPSBbXG4gICAgb24oaW8sICdvcGVuJywgYmluZCh0aGlzLCAnb25vcGVuJykpLFxuICAgIG9uKGlvLCAncGFja2V0JywgYmluZCh0aGlzLCAnb25wYWNrZXQnKSksXG4gICAgb24oaW8sICdjbG9zZScsIGJpbmQodGhpcywgJ29uY2xvc2UnKSlcbiAgXTtcbn07XG5cbi8qKlxuICogXCJPcGVuc1wiIHRoZSBzb2NrZXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9wZW4gPVxuU29ja2V0LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jb25uZWN0ZWQpIHJldHVybiB0aGlzO1xuXG4gIHRoaXMuc3ViRXZlbnRzKCk7XG4gIGlmICghdGhpcy5pby5yZWNvbm5lY3RpbmcpIHRoaXMuaW8ub3BlbigpOyAvLyBlbnN1cmUgb3BlblxuICBpZiAoJ29wZW4nID09PSB0aGlzLmlvLnJlYWR5U3RhdGUpIHRoaXMub25vcGVuKCk7XG4gIHRoaXMuZW1pdCgnY29ubmVjdGluZycpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBgbWVzc2FnZWAgZXZlbnQuXG4gKlxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gIGFyZ3MudW5zaGlmdCgnbWVzc2FnZScpO1xuICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBPdmVycmlkZSBgZW1pdGAuXG4gKiBJZiB0aGUgZXZlbnQgaXMgaW4gYGV2ZW50c2AsIGl0J3MgZW1pdHRlZCBub3JtYWxseS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgbmFtZVxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIChldikge1xuICBpZiAoZXZlbnRzLmhhc093blByb3BlcnR5KGV2KSkge1xuICAgIGVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICB2YXIgcGFja2V0ID0ge1xuICAgIHR5cGU6ICh0aGlzLmZsYWdzLmJpbmFyeSAhPT0gdW5kZWZpbmVkID8gdGhpcy5mbGFncy5iaW5hcnkgOiBoYXNCaW4oYXJncykpID8gcGFyc2VyLkJJTkFSWV9FVkVOVCA6IHBhcnNlci5FVkVOVCxcbiAgICBkYXRhOiBhcmdzXG4gIH07XG5cbiAgcGFja2V0Lm9wdGlvbnMgPSB7fTtcbiAgcGFja2V0Lm9wdGlvbnMuY29tcHJlc3MgPSAhdGhpcy5mbGFncyB8fCBmYWxzZSAhPT0gdGhpcy5mbGFncy5jb21wcmVzcztcblxuICAvLyBldmVudCBhY2sgY2FsbGJhY2tcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0pIHtcbiAgICBkZWJ1ZygnZW1pdHRpbmcgcGFja2V0IHdpdGggYWNrIGlkICVkJywgdGhpcy5pZHMpO1xuICAgIHRoaXMuYWNrc1t0aGlzLmlkc10gPSBhcmdzLnBvcCgpO1xuICAgIHBhY2tldC5pZCA9IHRoaXMuaWRzKys7XG4gIH1cblxuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICB0aGlzLnBhY2tldChwYWNrZXQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc2VuZEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIH1cblxuICB0aGlzLmZsYWdzID0ge307XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUucGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICBwYWNrZXQubnNwID0gdGhpcy5uc3A7XG4gIHRoaXMuaW8ucGFja2V0KHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBgb3BlbmAuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCd0cmFuc3BvcnQgaXMgb3BlbiAtIGNvbm5lY3RpbmcnKTtcblxuICAvLyB3cml0ZSBjb25uZWN0IHBhY2tldCBpZiBuZWNlc3NhcnlcbiAgaWYgKCcvJyAhPT0gdGhpcy5uc3ApIHtcbiAgICBpZiAodGhpcy5xdWVyeSkge1xuICAgICAgdmFyIHF1ZXJ5ID0gdHlwZW9mIHRoaXMucXVlcnkgPT09ICdvYmplY3QnID8gcGFyc2Vxcy5lbmNvZGUodGhpcy5xdWVyeSkgOiB0aGlzLnF1ZXJ5O1xuICAgICAgZGVidWcoJ3NlbmRpbmcgY29ubmVjdCBwYWNrZXQgd2l0aCBxdWVyeSAlcycsIHF1ZXJ5KTtcbiAgICAgIHRoaXMucGFja2V0KHt0eXBlOiBwYXJzZXIuQ09OTkVDVCwgcXVlcnk6IHF1ZXJ5fSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGFja2V0KHt0eXBlOiBwYXJzZXIuQ09OTkVDVH0pO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlbmdpbmUgYGNsb3NlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVhc29uXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gIGRlYnVnKCdjbG9zZSAoJXMpJywgcmVhc29uKTtcbiAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO1xuICBkZWxldGUgdGhpcy5pZDtcbiAgdGhpcy5lbWl0KCdkaXNjb25uZWN0JywgcmVhc29uKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggc29ja2V0IHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9ucGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB2YXIgc2FtZU5hbWVzcGFjZSA9IHBhY2tldC5uc3AgPT09IHRoaXMubnNwO1xuICB2YXIgcm9vdE5hbWVzcGFjZUVycm9yID0gcGFja2V0LnR5cGUgPT09IHBhcnNlci5FUlJPUiAmJiBwYWNrZXQubnNwID09PSAnLyc7XG5cbiAgaWYgKCFzYW1lTmFtZXNwYWNlICYmICFyb290TmFtZXNwYWNlRXJyb3IpIHJldHVybjtcblxuICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgY2FzZSBwYXJzZXIuQ09OTkVDVDpcbiAgICAgIHRoaXMub25jb25uZWN0KCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkVWRU5UOlxuICAgICAgdGhpcy5vbmV2ZW50KHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkJJTkFSWV9FVkVOVDpcbiAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5BQ0s6XG4gICAgICB0aGlzLm9uYWNrKHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkJJTkFSWV9BQ0s6XG4gICAgICB0aGlzLm9uYWNrKHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkRJU0NPTk5FQ1Q6XG4gICAgICB0aGlzLm9uZGlzY29ubmVjdCgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5FUlJPUjpcbiAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBwYWNrZXQuZGF0YSk7XG4gICAgICBicmVhaztcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNlcnZlciBldmVudC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uZXZlbnQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHZhciBhcmdzID0gcGFja2V0LmRhdGEgfHwgW107XG4gIGRlYnVnKCdlbWl0dGluZyBldmVudCAlaicsIGFyZ3MpO1xuXG4gIGlmIChudWxsICE9IHBhY2tldC5pZCkge1xuICAgIGRlYnVnKCdhdHRhY2hpbmcgYWNrIGNhbGxiYWNrIHRvIGV2ZW50Jyk7XG4gICAgYXJncy5wdXNoKHRoaXMuYWNrKHBhY2tldC5pZCkpO1xuICB9XG5cbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJlY2VpdmVCdWZmZXIucHVzaChhcmdzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBQcm9kdWNlcyBhbiBhY2sgY2FsbGJhY2sgdG8gZW1pdCB3aXRoIGFuIGV2ZW50LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuYWNrID0gZnVuY3Rpb24gKGlkKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNlbnQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBwcmV2ZW50IGRvdWJsZSBjYWxsYmFja3NcbiAgICBpZiAoc2VudCkgcmV0dXJuO1xuICAgIHNlbnQgPSB0cnVlO1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICAgIGRlYnVnKCdzZW5kaW5nIGFjayAlaicsIGFyZ3MpO1xuXG4gICAgc2VsZi5wYWNrZXQoe1xuICAgICAgdHlwZTogaGFzQmluKGFyZ3MpID8gcGFyc2VyLkJJTkFSWV9BQ0sgOiBwYXJzZXIuQUNLLFxuICAgICAgaWQ6IGlkLFxuICAgICAgZGF0YTogYXJnc1xuICAgIH0pO1xuICB9O1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNlcnZlciBhY2tub3dsZWdlbWVudC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uYWNrID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB2YXIgYWNrID0gdGhpcy5hY2tzW3BhY2tldC5pZF07XG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgYWNrKSB7XG4gICAgZGVidWcoJ2NhbGxpbmcgYWNrICVzIHdpdGggJWonLCBwYWNrZXQuaWQsIHBhY2tldC5kYXRhKTtcbiAgICBhY2suYXBwbHkodGhpcywgcGFja2V0LmRhdGEpO1xuICAgIGRlbGV0ZSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgfSBlbHNlIHtcbiAgICBkZWJ1ZygnYmFkIGFjayAlcycsIHBhY2tldC5pZCk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc2VydmVyIGNvbm5lY3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY29ubmVjdGVkID0gdHJ1ZTtcbiAgdGhpcy5kaXNjb25uZWN0ZWQgPSBmYWxzZTtcbiAgdGhpcy5lbWl0QnVmZmVyZWQoKTtcbiAgdGhpcy5lbWl0KCdjb25uZWN0Jyk7XG59O1xuXG4vKipcbiAqIEVtaXQgYnVmZmVyZWQgZXZlbnRzIChyZWNlaXZlZCBhbmQgZW1pdHRlZCkuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5lbWl0QnVmZmVyZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpO1xuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5yZWNlaXZlQnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgZW1pdC5hcHBseSh0aGlzLCB0aGlzLnJlY2VpdmVCdWZmZXJbaV0pO1xuICB9XG4gIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLnNlbmRCdWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLnBhY2tldCh0aGlzLnNlbmRCdWZmZXJbaV0pO1xuICB9XG4gIHRoaXMuc2VuZEJ1ZmZlciA9IFtdO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzZXJ2ZXIgZGlzY29ubmVjdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3NlcnZlciBkaXNjb25uZWN0ICglcyknLCB0aGlzLm5zcCk7XG4gIHRoaXMuZGVzdHJveSgpO1xuICB0aGlzLm9uY2xvc2UoJ2lvIHNlcnZlciBkaXNjb25uZWN0Jyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGZvcmNlZCBjbGllbnQvc2VydmVyIHNpZGUgZGlzY29ubmVjdGlvbnMsXG4gKiB0aGlzIG1ldGhvZCBlbnN1cmVzIHRoZSBtYW5hZ2VyIHN0b3BzIHRyYWNraW5nIHVzIGFuZFxuICogdGhhdCByZWNvbm5lY3Rpb25zIGRvbid0IGdldCB0cmlnZ2VyZWQgZm9yIHRoaXMuXG4gKlxuICogQGFwaSBwcml2YXRlLlxuICovXG5cblNvY2tldC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc3Vicykge1xuICAgIC8vIGNsZWFuIHN1YnNjcmlwdGlvbnMgdG8gYXZvaWQgcmVjb25uZWN0aW9uc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdWJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnN1YnNbaV0uZGVzdHJveSgpO1xuICAgIH1cbiAgICB0aGlzLnN1YnMgPSBudWxsO1xuICB9XG5cbiAgdGhpcy5pby5kZXN0cm95KHRoaXMpO1xufTtcblxuLyoqXG4gKiBEaXNjb25uZWN0cyB0aGUgc29ja2V0IG1hbnVhbGx5LlxuICpcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNsb3NlID1cblNvY2tldC5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgZGVidWcoJ3BlcmZvcm1pbmcgZGlzY29ubmVjdCAoJXMpJywgdGhpcy5uc3ApO1xuICAgIHRoaXMucGFja2V0KHsgdHlwZTogcGFyc2VyLkRJU0NPTk5FQ1QgfSk7XG4gIH1cblxuICAvLyByZW1vdmUgc29ja2V0IGZyb20gcG9vbFxuICB0aGlzLmRlc3Ryb3koKTtcblxuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAvLyBmaXJlIGV2ZW50c1xuICAgIHRoaXMub25jbG9zZSgnaW8gY2xpZW50IGRpc2Nvbm5lY3QnKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY29tcHJlc3MgZmxhZy5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlmIGB0cnVlYCwgY29tcHJlc3NlcyB0aGUgc2VuZGluZyBkYXRhXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jb21wcmVzcyA9IGZ1bmN0aW9uIChjb21wcmVzcykge1xuICB0aGlzLmZsYWdzLmNvbXByZXNzID0gY29tcHJlc3M7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBiaW5hcnkgZmxhZ1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gd2hldGhlciB0aGUgZW1pdHRlZCBkYXRhIGNvbnRhaW5zIGJpbmFyeVxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuYmluYXJ5ID0gZnVuY3Rpb24gKGJpbmFyeSkge1xuICB0aGlzLmZsYWdzLmJpbmFyeSA9IGJpbmFyeTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0b0FycmF5XG5cbmZ1bmN0aW9uIHRvQXJyYXkobGlzdCwgaW5kZXgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXVxuXG4gICAgaW5kZXggPSBpbmRleCB8fCAwXG5cbiAgICBmb3IgKHZhciBpID0gaW5kZXggfHwgMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJyYXlbaSAtIGluZGV4XSA9IGxpc3RbaV1cbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlcbn1cbiIsIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9uO1xuXG4vKipcbiAqIEhlbHBlciBmb3Igc3Vic2NyaXB0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxFdmVudEVtaXR0ZXJ9IG9iaiB3aXRoIGBFbWl0dGVyYCBtaXhpbiBvciBgRXZlbnRFbWl0dGVyYFxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIG9uIChvYmosIGV2LCBmbikge1xuICBvYmoub24oZXYsIGZuKTtcbiAgcmV0dXJuIHtcbiAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICBvYmoucmVtb3ZlTGlzdGVuZXIoZXYsIGZuKTtcbiAgICB9XG4gIH07XG59XG4iLCIvKipcbiAqIFNsaWNlIHJlZmVyZW5jZS5cbiAqL1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcblxuLyoqXG4gKiBCaW5kIGBvYmpgIHRvIGBmbmAuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGZuIG9yIHN0cmluZ1xuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBmbil7XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgZm4pIGZuID0gb2JqW2ZuXTtcbiAgaWYgKCdmdW5jdGlvbicgIT0gdHlwZW9mIGZuKSB0aHJvdyBuZXcgRXJyb3IoJ2JpbmQoKSByZXF1aXJlcyBhIGZ1bmN0aW9uJyk7XG4gIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gZm4uYXBwbHkob2JqLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgfVxufTtcbiIsIlxuLyoqXG4gKiBFeHBvc2UgYEJhY2tvZmZgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQmFja29mZjtcblxuLyoqXG4gKiBJbml0aWFsaXplIGJhY2tvZmYgdGltZXIgd2l0aCBgb3B0c2AuXG4gKlxuICogLSBgbWluYCBpbml0aWFsIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIFsxMDBdXG4gKiAtIGBtYXhgIG1heCB0aW1lb3V0IFsxMDAwMF1cbiAqIC0gYGppdHRlcmAgWzBdXG4gKiAtIGBmYWN0b3JgIFsyXVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEJhY2tvZmYob3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgdGhpcy5tcyA9IG9wdHMubWluIHx8IDEwMDtcbiAgdGhpcy5tYXggPSBvcHRzLm1heCB8fCAxMDAwMDtcbiAgdGhpcy5mYWN0b3IgPSBvcHRzLmZhY3RvciB8fCAyO1xuICB0aGlzLmppdHRlciA9IG9wdHMuaml0dGVyID4gMCAmJiBvcHRzLmppdHRlciA8PSAxID8gb3B0cy5qaXR0ZXIgOiAwO1xuICB0aGlzLmF0dGVtcHRzID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGJhY2tvZmYgZHVyYXRpb24uXG4gKlxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKCl7XG4gIHZhciBtcyA9IHRoaXMubXMgKiBNYXRoLnBvdyh0aGlzLmZhY3RvciwgdGhpcy5hdHRlbXB0cysrKTtcbiAgaWYgKHRoaXMuaml0dGVyKSB7XG4gICAgdmFyIHJhbmQgPSAgTWF0aC5yYW5kb20oKTtcbiAgICB2YXIgZGV2aWF0aW9uID0gTWF0aC5mbG9vcihyYW5kICogdGhpcy5qaXR0ZXIgKiBtcyk7XG4gICAgbXMgPSAoTWF0aC5mbG9vcihyYW5kICogMTApICYgMSkgPT0gMCAgPyBtcyAtIGRldmlhdGlvbiA6IG1zICsgZGV2aWF0aW9uO1xuICB9XG4gIHJldHVybiBNYXRoLm1pbihtcywgdGhpcy5tYXgpIHwgMDtcbn07XG5cbi8qKlxuICogUmVzZXQgdGhlIG51bWJlciBvZiBhdHRlbXB0cy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWluaW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWluID0gZnVuY3Rpb24obWluKXtcbiAgdGhpcy5tcyA9IG1pbjtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBtYXhpbXVtIGR1cmF0aW9uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNYXggPSBmdW5jdGlvbihtYXgpe1xuICB0aGlzLm1heCA9IG1heDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBqaXR0ZXJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldEppdHRlciA9IGZ1bmN0aW9uKGppdHRlcil7XG4gIHRoaXMuaml0dGVyID0gaml0dGVyO1xufTtcblxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLG49U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxxPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxyPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSx0PVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSx1PVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLHY9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLHc9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLHg9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIikseT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKSx6PVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBBKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT16JiZhW3pdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG52YXIgQj17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQz1PYmplY3QuYXNzaWduLEQ9e307ZnVuY3Rpb24gRShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307XG5FLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoXCJzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy5cIik7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn12YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RztDKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9QXJyYXkuaXNBcnJheSxKPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksSz17Y3VycmVudDpudWxsfSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixlKXt2YXIgZCxjPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZCBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUouY2FsbChiLGQpJiYhTC5oYXNPd25Qcm9wZXJ0eShkKSYmKGNbZF09YltkXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWMuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07Yy5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihkIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1jW2RdJiYoY1tkXT1nW2RdKTtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6Yyxfb3duZXI6Sy5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWx9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2c7ZnVuY3Rpb24gUShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIFIoYSxiLGUsZCxjKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbDpjYXNlIG46aD0hMH19aWYoaClyZXR1cm4gaD1hLGM9YyhoKSxhPVwiXCI9PT1kP1wiLlwiK1EoaCwwKTpkLEkoYyk/KGU9XCJcIixudWxsIT1hJiYoZT1hLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIiksUihjLGIsZSxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWMmJihPKGMpJiYoYz1OKGMsZSsoIWMua2V5fHxoJiZoLmtleT09PWMua2V5P1wiXCI6KFwiXCIrYy5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChjKSksMTtoPTA7ZD1cIlwiPT09ZD9cIi5cIjpkK1wiOlwiO2lmKEkoYSkpZm9yKHZhciBnPTA7ZzxhLmxlbmd0aDtnKyspe2s9XG5hW2ddO3ZhciBmPWQrUShrLGcpO2grPVIoayxiLGUsZixjKX1lbHNlIGlmKGY9QShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZCtRKGssZysrKSxoKz1SKGssYixlLGYsYyk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVN0cmluZyhhKSxFcnJvcihcIk9iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogXCIrKFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpK1wiKS4gSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSBpbnN0ZWFkLlwiKTtyZXR1cm4gaH1cbmZ1bmN0aW9uIFMoYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGQ9W10sYz0wO1IoYSxkLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGUsYSxjKyspfSk7cmV0dXJuIGR9ZnVuY3Rpb24gVChhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2IudGhlbihmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yn0sZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWJ9KTstMT09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0wLGEuX3Jlc3VsdD1iKX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQuZGVmYXVsdDt0aHJvdyBhLl9yZXN1bHQ7fVxudmFyIFU9e2N1cnJlbnQ6bnVsbH0sVj17dHJhbnNpdGlvbjpudWxsfSxXPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlUsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6VixSZWFjdEN1cnJlbnRPd25lcjpLfTtleHBvcnRzLkNoaWxkcmVuPXttYXA6Uyxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtTKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZSl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UyhhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFMoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihcIlJlYWN0LkNoaWxkcmVuLm9ubHkgZXhwZWN0ZWQgdG8gcmVjZWl2ZSBhIHNpbmdsZSBSZWFjdCBlbGVtZW50IGNoaWxkLlwiKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUU7ZXhwb3J0cy5GcmFnbWVudD1wO1xuZXhwb3J0cy5Qcm9maWxlcj1yO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1HO2V4cG9ydHMuU3RyaWN0TW9kZT1xO2V4cG9ydHMuU3VzcGVuc2U9dztleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVc7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsZSl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoXCJSZWFjdC5jbG9uZUVsZW1lbnQoLi4uKTogVGhlIGFyZ3VtZW50IG11c3QgYmUgYSBSZWFjdCBlbGVtZW50LCBidXQgeW91IHBhc3NlZCBcIithK1wiLlwiKTt2YXIgZD1DKHt9LGEucHJvcHMpLGM9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUsuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihjPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSi5jYWxsKGIsZikmJiFMLmhhc093blByb3BlcnR5KGYpJiYoZFtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtcbmZvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmMscmVmOmsscHJvcHM6ZCxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhKXthPXskJHR5cGVvZjp1LF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbCxfZGVmYXVsdFZhbHVlOm51bGwsX2dsb2JhbE5hbWU6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dCxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O1xuZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO2V4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eSxfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlR9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eCx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMuc3RhcnRUcmFuc2l0aW9uPWZ1bmN0aW9uKGEpe3ZhciBiPVYudHJhbnNpdGlvbjtWLnRyYW5zaXRpb249e307dHJ5e2EoKX1maW5hbGx5e1YudHJhbnNpdGlvbj1ifX07ZXhwb3J0cy51bnN0YWJsZV9hY3Q9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcihcImFjdCguLi4pIGlzIG5vdCBzdXBwb3J0ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMgb2YgUmVhY3QuXCIpO307XG5leHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VDb250ZXh0KGEpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRGVmZXJyZWRWYWx1ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZURlZmVycmVkVmFsdWUoYSl9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJZD1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlSWQoKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGUpfTtcbmV4cG9ydHMudXNlSW5zZXJ0aW9uRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VJbnNlcnRpb25FZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZHVjZXIoYSxiLGUpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN0YXRlKGEpfTtleHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN5bmNFeHRlcm5hbFN0b3JlKGEsYixlKX07XG5leHBvcnRzLnVzZVRyYW5zaXRpb249ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZVRyYW5zaXRpb24oKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMi4wXCI7XG4iLG51bGwsbnVsbCxudWxsLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcclxuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XHJcbiAgICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XHJcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcclxuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcclxuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XHJcbn0pIDogZnVuY3Rpb24obywgdikge1xyXG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XHJcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4oc3RhdGUsIHJlY2VpdmVyKSB7XHJcbiAgICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcclxuICAgIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XHJcbn1cclxuIixudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgYnVuZGxlVVJMID0ge307XG5cbmZ1bmN0aW9uIGdldEJ1bmRsZVVSTENhY2hlZChpZCkge1xuICB2YXIgdmFsdWUgPSBidW5kbGVVUkxbaWRdO1xuXG4gIGlmICghdmFsdWUpIHtcbiAgICB2YWx1ZSA9IGdldEJ1bmRsZVVSTCgpO1xuICAgIGJ1bmRsZVVSTFtpZF0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0QnVuZGxlVVJMKCkge1xuICB0cnkge1xuICAgIHRocm93IG5ldyBFcnJvcigpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB2YXIgbWF0Y2hlcyA9ICgnJyArIGVyci5zdGFjaykubWF0Y2goLyhodHRwcz98ZmlsZXxmdHB8KGNocm9tZXxtb3opLWV4dGVuc2lvbik6XFwvXFwvW14pXFxuXSsvZyk7XG5cbiAgICBpZiAobWF0Y2hlcykge1xuICAgICAgLy8gVGhlIGZpcnN0IHR3byBzdGFjayBmcmFtZXMgd2lsbCBiZSB0aGlzIGZ1bmN0aW9uIGFuZCBnZXRCdW5kbGVVUkxDYWNoZWQuXG4gICAgICAvLyBVc2UgdGhlIDNyZCBvbmUsIHdoaWNoIHdpbGwgYmUgYSBydW50aW1lIGluIHRoZSBvcmlnaW5hbCBidW5kbGUuXG4gICAgICByZXR1cm4gZ2V0QmFzZVVSTChtYXRjaGVzWzJdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gJy8nO1xufVxuXG5mdW5jdGlvbiBnZXRCYXNlVVJMKHVybCkge1xuICByZXR1cm4gKCcnICsgdXJsKS5yZXBsYWNlKC9eKCg/Omh0dHBzP3xmaWxlfGZ0cHwoY2hyb21lfG1veiktZXh0ZW5zaW9uKTpcXC9cXC8uKylcXC9bXi9dKyQvLCAnJDEnKSArICcvJztcbn0gLy8gVE9ETzogUmVwbGFjZSB1c2VzIHdpdGggYG5ldyBVUkwodXJsKS5vcmlnaW5gIHdoZW4gaWUxMSBpcyBubyBsb25nZXIgc3VwcG9ydGVkLlxuXG5cbmZ1bmN0aW9uIGdldE9yaWdpbih1cmwpIHtcbiAgdmFyIG1hdGNoZXMgPSAoJycgKyB1cmwpLm1hdGNoKC8oaHR0cHM/fGZpbGV8ZnRwfChjaHJvbWV8bW96KS1leHRlbnNpb24pOlxcL1xcL1teL10rLyk7XG5cbiAgaWYgKCFtYXRjaGVzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdPcmlnaW4gbm90IGZvdW5kJyk7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlc1swXTtcbn1cblxuZXhwb3J0cy5nZXRCdW5kbGVVUkwgPSBnZXRCdW5kbGVVUkxDYWNoZWQ7XG5leHBvcnRzLmdldEJhc2VVUkwgPSBnZXRCYXNlVVJMO1xuZXhwb3J0cy5nZXRPcmlnaW4gPSBnZXRPcmlnaW47IiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290JyksXG4gICAgc3R1YkZhbHNlID0gcmVxdWlyZSgnLi9zdHViRmFsc2UnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmZmVyO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJGYWxzZTtcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vZGVVdGlsO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICBpZiAoaXNEZWVwKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICB9XG4gIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVCdWZmZXI7XG4iLCJyZXF1aXJlKCcuL2hlbHBlcnMvYnVuZGxlLW1hbmlmZXN0JykucmVnaXN0ZXIoSlNPTi5wYXJzZShcIntcXFwiaVY3N2hcXFwiOlxcXCJiYWNrZ3JvdW5kLjkwZTIzZWMyLmpzXFxcIixcXFwiMnptSlVcXFwiOlxcXCJkaWFsb2cuOWJlZWYxNWEuaHRtbFxcXCIsXFxcImpDcTlEXFxcIjpcXFwicG9wdXAuNWI0Njk3ZWQuanNcXFwiLFxcXCJjdEVVb1xcXCI6XFxcInBvcHVwLjlhNThlMTI1LmNzc1xcXCIsXFxcIjJBM21tXFxcIjpcXFwicG9wdXAuNWQ3OGU2NDguanNcXFwifVwiKSk7IiwicmVxdWlyZSgnLi9idWZmZXJQb2x5ZmlsbCcpO1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsJztcbmltcG9ydCB7IGV0aGVycyB9IGZyb20gJ2V0aGVycyc7XG5pbXBvcnQgeyBuZXR3b3Jrc1N0b3JlIH0gZnJvbSAnc3JjL21vZHVsZXMvbmV0d29ya3MvbmV0d29ya3Mtc3RvcmUnO1xuaW1wb3J0IHsgY29uZmlndXJlQmFja2dyb3VuZENsaWVudCB9IGZyb20gJ3NyYy9tb2R1bGVzL2RlZmktc2RrJztcbmltcG9ydCB7IGluaXRpYWxpemUgfSBmcm9tICcuL2luaXRpYWxpemUnO1xuaW1wb3J0IHsgSHR0cENvbm5lY3Rpb24gfSBmcm9tICcuL21lc3NhZ2luZy9IdHRwQ29ubmVjdGlvbic7XG5pbXBvcnQgeyBQb3J0UmVnaXN0cnkgfSBmcm9tICcuL21lc3NhZ2luZy9Qb3J0UmVnaXN0cnknO1xuaW1wb3J0IHsgY3JlYXRlV2FsbGV0TWVzc2FnZUhhbmRsZXIgfSBmcm9tICcuL21lc3NhZ2luZy9wb3J0LW1lc3NhZ2UtaGFuZGxlcnMvY3JlYXRlV2FsbGV0TWVzc2FnZUhhbmRsZXInO1xuaW1wb3J0IHsgY3JlYXRlUG9ydE1lc3NhZ2VIYW5kbGVyIH0gZnJvbSAnLi9tZXNzYWdpbmcvcG9ydC1tZXNzYWdlLWhhbmRsZXJzL2NyZWF0ZVBvcnRNZXNzYWdlSGFuZGxlcic7XG5pbXBvcnQgeyBjcmVhdGVOb3RpZmljYXRpb25XaW5kb3dNZXNzYWdlSGFuZGxlciB9IGZyb20gJy4vbWVzc2FnaW5nL3BvcnQtbWVzc2FnZS1oYW5kbGVycy9ub3RpZmljYXRpb25XaW5kb3dNZXNzYWdlSGFuZGxlcic7XG5pbXBvcnQgeyBjcmVhdGVIdHRwQ29ubmVjdGlvbk1lc3NhZ2VIYW5kbGVyIH0gZnJvbSAnLi9tZXNzYWdpbmcvcG9ydC1tZXNzYWdlLWhhbmRsZXJzL2NyZWF0ZUhUVFBDb25uZWN0aW9uTWVzc2FnZUhhbmRsZXInO1xuaW1wb3J0IHsgaGFuZGxlQWNjb3VudEV2ZW50cyB9IGZyb20gJy4vbWVzc2FnaW5nL2NvbnRyb2xsZXItZXZlbnQtaGFuZGxlcnMvYWNjb3VudC1ldmVudHMtaGFuZGxlcic7XG5pbXBvcnQgeyBFdGhlcmV1bUV2ZW50c0Jyb2FkY2FzdGVyIH0gZnJvbSAnLi9tZXNzYWdpbmcvY29udHJvbGxlci1ldmVudC1oYW5kbGVycy9ldGhlcmV1bS1wcm92aWRlci1ldmVudHMnO1xuaW1wb3J0IHsgTWVtb3J5Q2FjaGVSUEMgfSBmcm9tICcuL3Jlc291cmNlL21lbW9yeUNhY2hlUlBDJztcbmltcG9ydCB7IHN0YXJ0IGFzIHN0YXJ0SWRsZVRpbWVyIH0gZnJvbSAnLi9pZGxlLXRpbWUtaGFuZGxlcic7XG5pbXBvcnQgdHlwZSB7IFJ1bnRpbWVQb3J0IH0gZnJvbSAnLi93ZWJhcGlzL1J1bnRpbWVQb3J0JztcblxuT2JqZWN0LmFzc2lnbih3aW5kb3csIHsgZXRoZXJzIH0pO1xuXG5jb25maWd1cmVCYWNrZ3JvdW5kQ2xpZW50KCk7XG5uZXR3b3Jrc1N0b3JlLmxvYWQoKTtcblxuZnVuY3Rpb24gdmVyaWZ5UG9ydChwb3J0OiBSdW50aW1lUG9ydCkge1xuICBjb25zdCBwcm90b2NvbCA9IHBvcnQuc2VuZGVyPy51cmwgPyBuZXcgVVJMKHBvcnQuc2VuZGVyLnVybCkucHJvdG9jb2wgOiBudWxsO1xuICBpZiAocHJvdG9jb2wgPT09ICdjaHJvbWUtZXh0ZW5zaW9uOicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgb25seSBub24tZXh0ZW5zaW9uIChtZWFuaW5nLCBjb250ZW50LXNjcmlwdCkgcG9ydFxuICAgIC8vIGFsbG93ZWQgaXMgYCR7YnJvd3Nlci5ydW50aW1lLmlkfS9ldGhlcmV1bWBcbiAgICByZXR1cm4gcG9ydC5uYW1lID09PSBgJHticm93c2VyLnJ1bnRpbWUuaWR9L2V0aGVyZXVtYDtcbiAgfVxufVxuXG5pbml0aWFsaXplKCkudGhlbigoeyBhY2NvdW50LCBhY2NvdW50UHVibGljUlBDIH0pID0+IHtcbiAgY29uc3QgaHR0cENvbm5lY3Rpb24gPSBuZXcgSHR0cENvbm5lY3Rpb24oKCkgPT4gYWNjb3VudC5nZXRDdXJyZW50V2FsbGV0KCkpO1xuICBjb25zdCBtZW1vcnlDYWNoZVJQQyA9IG5ldyBNZW1vcnlDYWNoZVJQQygpO1xuXG4gIGNvbnN0IHBvcnRSZWdpc3RyeSA9IG5ldyBQb3J0UmVnaXN0cnkoKTtcbiAgcG9ydFJlZ2lzdHJ5LmFkZE1lc3NhZ2VIYW5kbGVyKFxuICAgIGNyZWF0ZVdhbGxldE1lc3NhZ2VIYW5kbGVyKCgpID0+IGFjY291bnQuZ2V0Q3VycmVudFdhbGxldCgpKVxuICApO1xuICBwb3J0UmVnaXN0cnkuYWRkTWVzc2FnZUhhbmRsZXIoXG4gICAgY3JlYXRlUG9ydE1lc3NhZ2VIYW5kbGVyKHtcbiAgICAgIGNoZWNrOiAocG9ydCkgPT4gcG9ydC5uYW1lID09PSAnYWNjb3VudFB1YmxpY1JQQycsXG4gICAgICBjb250cm9sbGVyOiBhY2NvdW50UHVibGljUlBDLFxuICAgIH0pXG4gICk7XG4gIHBvcnRSZWdpc3RyeS5hZGRNZXNzYWdlSGFuZGxlcihcbiAgICBjcmVhdGVQb3J0TWVzc2FnZUhhbmRsZXIoe1xuICAgICAgY2hlY2s6IChwb3J0KSA9PiBwb3J0Lm5hbWUgPT09ICdtZW1vcnlDYWNoZVJQQycsXG4gICAgICBjb250cm9sbGVyOiBtZW1vcnlDYWNoZVJQQyxcbiAgICB9KVxuICApO1xuICBwb3J0UmVnaXN0cnkuYWRkTWVzc2FnZUhhbmRsZXIoY3JlYXRlTm90aWZpY2F0aW9uV2luZG93TWVzc2FnZUhhbmRsZXIoKSk7XG4gIHBvcnRSZWdpc3RyeS5hZGRNZXNzYWdlSGFuZGxlcihcbiAgICBjcmVhdGVIdHRwQ29ubmVjdGlvbk1lc3NhZ2VIYW5kbGVyKGh0dHBDb25uZWN0aW9uKVxuICApO1xuXG4gIGhhbmRsZUFjY291bnRFdmVudHMoeyBhY2NvdW50IH0pO1xuICBjb25zdCBldGhlcmV1bUV2ZW50c0Jyb2FkY2FzdGVyID0gbmV3IEV0aGVyZXVtRXZlbnRzQnJvYWRjYXN0ZXIoe1xuICAgIGFjY291bnQsXG4gICAgZ2V0QWN0aXZlUG9ydHM6ICgpID0+IHBvcnRSZWdpc3RyeS5nZXRBY3RpdmVQb3J0cygpLFxuICB9KTtcbiAgZXRoZXJldW1FdmVudHNCcm9hZGNhc3Rlci5zdGFydExpc3RlbmluZygpO1xuXG4gIGNocm9tZS5ydW50aW1lLm9uQ29ubmVjdC5hZGRMaXN0ZW5lcigocG9ydCkgPT4ge1xuICAgIGlmICh2ZXJpZnlQb3J0KHBvcnQpKSB7XG4gICAgICBwb3J0UmVnaXN0cnkucmVnaXN0ZXIocG9ydCk7XG4gICAgfVxuICB9KTtcblxuICBwb3J0UmVnaXN0cnkuYWRkTGlzdGVuZXIoJ2Rpc2Nvbm5lY3QnLCAocG9ydDogUnVudGltZVBvcnQpID0+IHtcbiAgICBpZiAocG9ydC5uYW1lID09PSBgJHticm93c2VyLnJ1bnRpbWUuaWR9L3dhbGxldGApIHtcbiAgICAgIC8vIE1lYW5zIGV4dGVuc2lvbiBVSSBpcyBjbG9zZWRcbiAgICAgIGFjY291bnQuZXhwaXJlUGFzc3dvcmRTZXNzaW9uKCk7XG4gICAgfVxuICB9KTtcblxuICBhY2NvdW50Lm9uKCdyZXNldCcsICgpID0+IHtcbiAgICBwb3J0UmVnaXN0cnkucG9zdE1lc3NhZ2Uoe1xuICAgICAgcG9ydE5hbWU6IGAke2Nocm9tZS5ydW50aW1lLmlkfS93YWxsZXRgLFxuICAgICAgbWVzc2FnZTogJ3Nlc3Npb24tbG9nb3V0JyxcbiAgICB9KTtcbiAgfSk7XG5cbiAgc3RhcnRJZGxlVGltZXIoKCkgPT4ge1xuICAgIGFjY291bnQubG9nb3V0KCk7XG4gIH0pO1xufSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiAgQmlnTnVtYmVyXG4gKlxuICogIEEgd3JhcHBlciBhcm91bmQgdGhlIEJOLmpzIG9iamVjdC4gV2UgdXNlIHRoZSBCTi5qcyBsaWJyYXJ5XG4gKiAgYmVjYXVzZSBpdCBpcyB1c2VkIGJ5IGVsbGlwdGljLCBzbyBpdCBpcyByZXF1aXJlZCByZWdhcmRsZXNzLlxuICpcbiAqL1xuXG5pbXBvcnQgX0JOIGZyb20gXCJibi5qc1wiO1xuaW1wb3J0IEJOID0gX0JOLkJOO1xuXG5pbXBvcnQgeyBCeXRlcywgSGV4YWJsZSwgaGV4bGlmeSwgaXNCeXRlcywgaXNIZXhTdHJpbmcgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuXG5jb25zdCBfY29uc3RydWN0b3JHdWFyZCA9IHsgfTtcblxuY29uc3QgTUFYX1NBRkUgPSAweDFmZmZmZmZmZmZmZmZmO1xuXG5cbmV4cG9ydCB0eXBlIEJpZ051bWJlcmlzaCA9IEJpZ051bWJlciB8IEJ5dGVzIHwgYmlnaW50IHwgc3RyaW5nIHwgbnVtYmVyO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNCaWdOdW1iZXJpc2godmFsdWU6IGFueSk6IHZhbHVlIGlzIEJpZ051bWJlcmlzaCB7XG4gICAgcmV0dXJuICh2YWx1ZSAhPSBudWxsKSAmJiAoXG4gICAgICAgIEJpZ051bWJlci5pc0JpZ051bWJlcih2YWx1ZSkgfHxcbiAgICAgICAgKHR5cGVvZih2YWx1ZSkgPT09IFwibnVtYmVyXCIgJiYgKHZhbHVlICUgMSkgPT09IDApIHx8XG4gICAgICAgICh0eXBlb2YodmFsdWUpID09PSBcInN0cmluZ1wiICYmICEhdmFsdWUubWF0Y2goL14tP1swLTldKyQvKSkgfHxcbiAgICAgICAgaXNIZXhTdHJpbmcodmFsdWUpIHx8XG4gICAgICAgICh0eXBlb2YodmFsdWUpID09PSBcImJpZ2ludFwiKSB8fFxuICAgICAgICBpc0J5dGVzKHZhbHVlKVxuICAgICk7XG59XG5cbi8vIE9ubHkgd2FybiBhYm91dCBwYXNzaW5nIDEwIGludG8gcmFkaXggb25jZVxubGV0IF93YXJuZWRUb1N0cmluZ1JhZGl4ID0gZmFsc2U7XG5cbmV4cG9ydCBjbGFzcyBCaWdOdW1iZXIgaW1wbGVtZW50cyBIZXhhYmxlIHtcbiAgICByZWFkb25seSBfaGV4OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgX2lzQmlnTnVtYmVyOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoY29uc3RydWN0b3JHdWFyZDogYW55LCBoZXg6IHN0cmluZykge1xuICAgICAgICBpZiAoY29uc3RydWN0b3JHdWFyZCAhPT0gX2NvbnN0cnVjdG9yR3VhcmQpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiY2Fubm90IGNhbGwgY29uc3RydWN0b3IgZGlyZWN0bHk7IHVzZSBCaWdOdW1iZXIuZnJvbVwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJuZXcgKEJpZ051bWJlcilcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9oZXggPSBoZXg7XG4gICAgICAgIHRoaXMuX2lzQmlnTnVtYmVyID0gdHJ1ZTtcblxuICAgICAgICBPYmplY3QuZnJlZXplKHRoaXMpO1xuICAgIH1cblxuICAgIGZyb21Ud29zKHZhbHVlOiBudW1iZXIpOiBCaWdOdW1iZXIge1xuICAgICAgICByZXR1cm4gdG9CaWdOdW1iZXIodG9CTih0aGlzKS5mcm9tVHdvcyh2YWx1ZSkpO1xuICAgIH1cblxuICAgIHRvVHdvcyh2YWx1ZTogbnVtYmVyKTogQmlnTnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykudG9Ud29zKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgYWJzKCk6IEJpZ051bWJlciB7XG4gICAgICAgIGlmICh0aGlzLl9oZXhbMF0gPT09IFwiLVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gQmlnTnVtYmVyLmZyb20odGhpcy5faGV4LnN1YnN0cmluZygxKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgYWRkKG90aGVyOiBCaWdOdW1iZXJpc2gpOiBCaWdOdW1iZXIge1xuICAgICAgICByZXR1cm4gdG9CaWdOdW1iZXIodG9CTih0aGlzKS5hZGQodG9CTihvdGhlcikpKTtcbiAgICB9XG5cbiAgICBzdWIob3RoZXI6IEJpZ051bWJlcmlzaCk6IEJpZ051bWJlciB7XG4gICAgICAgIHJldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLnN1Yih0b0JOKG90aGVyKSkpO1xuICAgIH1cblxuICAgIGRpdihvdGhlcjogQmlnTnVtYmVyaXNoKTogQmlnTnVtYmVyIHtcbiAgICAgICAgY29uc3QgbyA9IEJpZ051bWJlci5mcm9tKG90aGVyKTtcbiAgICAgICAgaWYgKG8uaXNaZXJvKCkpIHtcbiAgICAgICAgICAgIHRocm93RmF1bHQoXCJkaXZpc2lvbi1ieS16ZXJvXCIsIFwiZGl2XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLmRpdih0b0JOKG90aGVyKSkpO1xuICAgIH1cblxuICAgIG11bChvdGhlcjogQmlnTnVtYmVyaXNoKTogQmlnTnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykubXVsKHRvQk4ob3RoZXIpKSk7XG4gICAgfVxuXG4gICAgbW9kKG90aGVyOiBCaWdOdW1iZXJpc2gpOiBCaWdOdW1iZXIge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRvQk4ob3RoZXIpO1xuICAgICAgICBpZiAodmFsdWUuaXNOZWcoKSkge1xuICAgICAgICAgICAgdGhyb3dGYXVsdChcImRpdmlzaW9uLWJ5LXplcm9cIiwgXCJtb2RcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykudW1vZCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIHBvdyhvdGhlcjogQmlnTnVtYmVyaXNoKTogQmlnTnVtYmVyIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0b0JOKG90aGVyKTtcbiAgICAgICAgaWYgKHZhbHVlLmlzTmVnKCkpIHtcbiAgICAgICAgICAgIHRocm93RmF1bHQoXCJuZWdhdGl2ZS1wb3dlclwiLCBcInBvd1wiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9CaWdOdW1iZXIodG9CTih0aGlzKS5wb3codmFsdWUpKTtcbiAgICB9XG5cbiAgICBhbmQob3RoZXI6IEJpZ051bWJlcmlzaCk6IEJpZ051bWJlciB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdG9CTihvdGhlcik7XG4gICAgICAgIGlmICh0aGlzLmlzTmVnYXRpdmUoKSB8fCB2YWx1ZS5pc05lZygpKSB7XG4gICAgICAgICAgICB0aHJvd0ZhdWx0KFwidW5ib3VuZC1iaXR3aXNlLXJlc3VsdFwiLCBcImFuZFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9CaWdOdW1iZXIodG9CTih0aGlzKS5hbmQodmFsdWUpKTtcbiAgICB9XG5cbiAgICBvcihvdGhlcjogQmlnTnVtYmVyaXNoKTogQmlnTnVtYmVyIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0b0JOKG90aGVyKTtcbiAgICAgICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpIHx8IHZhbHVlLmlzTmVnKCkpIHtcbiAgICAgICAgICAgIHRocm93RmF1bHQoXCJ1bmJvdW5kLWJpdHdpc2UtcmVzdWx0XCIsIFwib3JcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykub3IodmFsdWUpKTtcbiAgICB9XG5cbiAgICB4b3Iob3RoZXI6IEJpZ051bWJlcmlzaCk6IEJpZ051bWJlciB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdG9CTihvdGhlcik7XG4gICAgICAgIGlmICh0aGlzLmlzTmVnYXRpdmUoKSB8fCB2YWx1ZS5pc05lZygpKSB7XG4gICAgICAgICAgICB0aHJvd0ZhdWx0KFwidW5ib3VuZC1iaXR3aXNlLXJlc3VsdFwiLCBcInhvclwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9CaWdOdW1iZXIodG9CTih0aGlzKS54b3IodmFsdWUpKTtcbiAgICB9XG5cbiAgICBtYXNrKHZhbHVlOiBudW1iZXIpOiBCaWdOdW1iZXIge1xuICAgICAgICBpZiAodGhpcy5pc05lZ2F0aXZlKCkgfHwgdmFsdWUgPCAwKSB7XG4gICAgICAgICAgICB0aHJvd0ZhdWx0KFwibmVnYXRpdmUtd2lkdGhcIiwgXCJtYXNrXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLm1hc2tuKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgc2hsKHZhbHVlOiBudW1iZXIpOiBCaWdOdW1iZXIge1xuICAgICAgICBpZiAodGhpcy5pc05lZ2F0aXZlKCkgfHwgdmFsdWUgPCAwKSB7XG4gICAgICAgICAgICB0aHJvd0ZhdWx0KFwibmVnYXRpdmUtd2lkdGhcIiwgXCJzaGxcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvQmlnTnVtYmVyKHRvQk4odGhpcykuc2hsbih2YWx1ZSkpO1xuICAgIH1cblxuICAgIHNocih2YWx1ZTogbnVtYmVyKTogQmlnTnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpIHx8IHZhbHVlIDwgMCkge1xuICAgICAgICAgICAgdGhyb3dGYXVsdChcIm5lZ2F0aXZlLXdpZHRoXCIsIFwic2hyXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b0JpZ051bWJlcih0b0JOKHRoaXMpLnNocm4odmFsdWUpKTtcbiAgICB9XG5cbiAgICBlcShvdGhlcjogQmlnTnVtYmVyaXNoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0b0JOKHRoaXMpLmVxKHRvQk4ob3RoZXIpKTtcbiAgICB9XG5cbiAgICBsdChvdGhlcjogQmlnTnVtYmVyaXNoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0b0JOKHRoaXMpLmx0KHRvQk4ob3RoZXIpKTtcbiAgICB9XG5cbiAgICBsdGUob3RoZXI6IEJpZ051bWJlcmlzaCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdG9CTih0aGlzKS5sdGUodG9CTihvdGhlcikpO1xuICAgIH1cblxuICAgIGd0KG90aGVyOiBCaWdOdW1iZXJpc2gpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRvQk4odGhpcykuZ3QodG9CTihvdGhlcikpO1xuICAgfVxuXG4gICAgZ3RlKG90aGVyOiBCaWdOdW1iZXJpc2gpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRvQk4odGhpcykuZ3RlKHRvQk4ob3RoZXIpKTtcbiAgICB9XG5cbiAgICBpc05lZ2F0aXZlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKHRoaXMuX2hleFswXSA9PT0gXCItXCIpO1xuICAgIH1cblxuICAgIGlzWmVybygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRvQk4odGhpcykuaXNaZXJvKCk7XG4gICAgfVxuXG4gICAgdG9OdW1iZXIoKTogbnVtYmVyIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0b0JOKHRoaXMpLnRvTnVtYmVyKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvd0ZhdWx0KFwib3ZlcmZsb3dcIiwgXCJ0b051bWJlclwiLCB0aGlzLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHRvQmlnSW50KCk6IGJpZ2ludCB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gQmlnSW50KHRoaXMudG9TdHJpbmcoKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgfVxuXG4gICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihcInRoaXMgcGxhdGZvcm0gZG9lcyBub3Qgc3VwcG9ydCBCaWdJbnRcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnRvU3RyaW5nKClcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgLy8gTG90cyBvZiBwZW9wbGUgZXhwZWN0IHRoaXMsIHdoaWNoIHdlIGRvIG5vdCBzdXBwb3J0LCBzbyBjaGVjayAoU2VlOiAjODg5KVxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHNbMF0gPT09IDEwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfd2FybmVkVG9TdHJpbmdSYWRpeCkge1xuICAgICAgICAgICAgICAgICAgICBfd2FybmVkVG9TdHJpbmdSYWRpeCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiQmlnTnVtYmVyLnRvU3RyaW5nIGRvZXMgbm90IGFjY2VwdCBhbnkgcGFyYW1ldGVyczsgYmFzZS0xMCBpcyBhc3N1bWVkXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzWzBdID09PSAxNikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiQmlnTnVtYmVyLnRvU3RyaW5nIGRvZXMgbm90IGFjY2VwdCBhbnkgcGFyYW1ldGVyczsgdXNlIGJpZ051bWJlci50b0hleFN0cmluZygpXCIsIExvZ2dlci5lcnJvcnMuVU5FWFBFQ1RFRF9BUkdVTUVOVCwgeyB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJCaWdOdW1iZXIudG9TdHJpbmcgZG9lcyBub3QgYWNjZXB0IHBhcmFtZXRlcnNcIiwgTG9nZ2VyLmVycm9ycy5VTkVYUEVDVEVEX0FSR1VNRU5ULCB7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b0JOKHRoaXMpLnRvU3RyaW5nKDEwKTtcbiAgICB9XG5cbiAgICB0b0hleFN0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5faGV4O1xuICAgIH1cblxuICAgIHRvSlNPTihrZXk/OiBzdHJpbmcpOiBhbnkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcIkJpZ051bWJlclwiLCBoZXg6IHRoaXMudG9IZXhTdHJpbmcoKSB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tKHZhbHVlOiBhbnkpOiBCaWdOdW1iZXIge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBCaWdOdW1iZXIpIHsgcmV0dXJuIHZhbHVlOyB9XG5cbiAgICAgICAgaWYgKHR5cGVvZih2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5tYXRjaCgvXi0/MHhbMC05YS1mXSskL2kpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCaWdOdW1iZXIoX2NvbnN0cnVjdG9yR3VhcmQsIHRvSGV4KHZhbHVlKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZS5tYXRjaCgvXi0/WzAtOV0rJC8pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCaWdOdW1iZXIoX2NvbnN0cnVjdG9yR3VhcmQsIHRvSGV4KG5ldyBCTih2YWx1ZSkpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIEJpZ051bWJlciBzdHJpbmdcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mKHZhbHVlKSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgaWYgKHZhbHVlICUgMSkge1xuICAgICAgICAgICAgICAgIHRocm93RmF1bHQoXCJ1bmRlcmZsb3dcIiwgXCJCaWdOdW1iZXIuZnJvbVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZSA+PSBNQVhfU0FGRSB8fCB2YWx1ZSA8PSAtTUFYX1NBRkUpIHtcbiAgICAgICAgICAgICAgICB0aHJvd0ZhdWx0KFwib3ZlcmZsb3dcIiwgXCJCaWdOdW1iZXIuZnJvbVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBCaWdOdW1iZXIuZnJvbShTdHJpbmcodmFsdWUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFueVZhbHVlID0gPGFueT52YWx1ZTtcblxuICAgICAgICBpZiAodHlwZW9mKGFueVZhbHVlKSA9PT0gXCJiaWdpbnRcIikge1xuICAgICAgICAgICAgcmV0dXJuIEJpZ051bWJlci5mcm9tKGFueVZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzQnl0ZXMoYW55VmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gQmlnTnVtYmVyLmZyb20oaGV4bGlmeShhbnlWYWx1ZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFueVZhbHVlKSB7XG5cbiAgICAgICAgICAgIC8vIEhleGFibGUgaW50ZXJmYWNlICh0YWtlcyBwcmlvcml0eSlcbiAgICAgICAgICAgIGlmIChhbnlWYWx1ZS50b0hleFN0cmluZykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhleCA9IGFueVZhbHVlLnRvSGV4U3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihoZXgpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCaWdOdW1iZXIuZnJvbShoZXgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBGb3Igbm93LCBoYW5kbGUgbGVnYWN5IEpTT04taWZpZWQgdmFsdWVzIChnb2VzIGF3YXkgaW4gdjYpXG4gICAgICAgICAgICAgICAgbGV0IGhleCA9IGFueVZhbHVlLl9oZXg7XG5cbiAgICAgICAgICAgICAgICAvLyBOZXctZm9ybSBKU09OXG4gICAgICAgICAgICAgICAgaWYgKGhleCA9PSBudWxsICYmIGFueVZhbHVlLnR5cGUgPT09IFwiQmlnTnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaGV4ID0gYW55VmFsdWUuaGV4O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YoaGV4KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNIZXhTdHJpbmcoaGV4KSB8fCAoaGV4WzBdID09PSBcIi1cIiAmJiBpc0hleFN0cmluZyhoZXguc3Vic3RyaW5nKDEpKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBCaWdOdW1iZXIuZnJvbShoZXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIEJpZ051bWJlciB2YWx1ZVwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXNCaWdOdW1iZXIodmFsdWU6IGFueSk6IHZhbHVlIGlzIEJpZ051bWJlciB7XG4gICAgICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5faXNCaWdOdW1iZXIpO1xuICAgIH1cbn1cblxuLy8gTm9ybWFsaXplIHRoZSBoZXggc3RyaW5nXG5mdW5jdGlvbiB0b0hleCh2YWx1ZTogc3RyaW5nIHwgQk4pOiBzdHJpbmcge1xuXG4gICAgLy8gRm9yIEJOLCBjYWxsIG9uIHRoZSBoZXggc3RyaW5nXG4gICAgaWYgKHR5cGVvZih2YWx1ZSkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHRvSGV4KHZhbHVlLnRvU3RyaW5nKDE2KSk7XG4gICAgfVxuXG4gICAgLy8gSWYgbmVnYXRpdmUsIHByZXBlbmQgdGhlIG5lZ2F0aXZlIHNpZ24gdG8gdGhlIG5vcm1hbGl6ZWQgcG9zaXRpdmUgdmFsdWVcbiAgICBpZiAodmFsdWVbMF0gPT09IFwiLVwiKSB7XG4gICAgICAgIC8vIFN0cmlwIG9mZiB0aGUgbmVnYXRpdmUgc2lnblxuICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygxKTtcblxuICAgICAgICAvLyBDYW5ub3QgaGF2ZSBtdWx0aXBsZSBuZWdhdGl2ZSBzaWducyAoZS5nLiBcIi0tMHgwNFwiKVxuICAgICAgICBpZiAodmFsdWVbMF0gPT09IFwiLVwiKSB7IGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGhleFwiLCBcInZhbHVlXCIsIHZhbHVlKTsgfVxuXG4gICAgICAgIC8vIENhbGwgdG9IZXggb24gdGhlIHBvc2l0aXZlIGNvbXBvbmVudFxuICAgICAgICB2YWx1ZSA9IHRvSGV4KHZhbHVlKTtcblxuICAgICAgICAvLyBEbyBub3QgYWxsb3cgXCItMHgwMFwiXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gXCIweDAwXCIpIHsgcmV0dXJuIHZhbHVlOyB9XG5cbiAgICAgICAgLy8gTmVnYXRlIHRoZSB2YWx1ZVxuICAgICAgICByZXR1cm4gXCItXCIgKyB2YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgYSBcIjB4XCIgcHJlZml4IGlmIG1pc3NpbmdcbiAgICBpZiAodmFsdWUuc3Vic3RyaW5nKDAsIDIpICE9PSBcIjB4XCIpIHsgdmFsdWUgPSBcIjB4XCIgKyB2YWx1ZTsgfVxuXG4gICAgLy8gTm9ybWFsaXplIHplcm9cbiAgICBpZiAodmFsdWUgPT09IFwiMHhcIikgeyByZXR1cm4gXCIweDAwXCI7IH1cblxuICAgIC8vIE1ha2UgdGhlIHN0cmluZyBldmVuIGxlbmd0aFxuICAgIGlmICh2YWx1ZS5sZW5ndGggJSAyKSB7IHZhbHVlID0gXCIweDBcIiArIHZhbHVlLnN1YnN0cmluZygyKTsgfVxuXG4gICAgLy8gVHJpbSB0byBzbWFsbGVzdCBldmVuLWxlbmd0aCBzdHJpbmdcbiAgICB3aGlsZSAodmFsdWUubGVuZ3RoID4gNCAmJiB2YWx1ZS5zdWJzdHJpbmcoMCwgNCkgPT09IFwiMHgwMFwiKSB7XG4gICAgICAgIHZhbHVlID0gXCIweFwiICsgdmFsdWUuc3Vic3RyaW5nKDQpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gdG9CaWdOdW1iZXIodmFsdWU6IEJOKTogQmlnTnVtYmVyIHtcbiAgICByZXR1cm4gQmlnTnVtYmVyLmZyb20odG9IZXgodmFsdWUpKTtcbn1cblxuZnVuY3Rpb24gdG9CTih2YWx1ZTogQmlnTnVtYmVyaXNoKTogQk4ge1xuICAgIGNvbnN0IGhleCA9IEJpZ051bWJlci5mcm9tKHZhbHVlKS50b0hleFN0cmluZygpO1xuICAgIGlmIChoZXhbMF0gPT09IFwiLVwiKSB7XG4gICAgICAgIHJldHVybiAobmV3IEJOKFwiLVwiICsgaGV4LnN1YnN0cmluZygzKSwgMTYpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBCTihoZXguc3Vic3RyaW5nKDIpLCAxNik7XG59XG5cbmZ1bmN0aW9uIHRocm93RmF1bHQoZmF1bHQ6IHN0cmluZywgb3BlcmF0aW9uOiBzdHJpbmcsIHZhbHVlPzogYW55KTogbmV2ZXIge1xuICAgIGNvbnN0IHBhcmFtczogYW55ID0geyBmYXVsdDogZmF1bHQsIG9wZXJhdGlvbjogb3BlcmF0aW9uIH07XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHsgcGFyYW1zLnZhbHVlID0gdmFsdWU7IH1cblxuICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihmYXVsdCwgTG9nZ2VyLmVycm9ycy5OVU1FUklDX0ZBVUxULCBwYXJhbXMpO1xufVxuXG4vLyB2YWx1ZSBzaG91bGQgaGF2ZSBubyBwcmVmaXhcbmV4cG9ydCBmdW5jdGlvbiBfYmFzZTM2VG8xNih2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gKG5ldyBCTih2YWx1ZSwgMzYpKS50b1N0cmluZygxNik7XG59XG5cbi8vIHZhbHVlIHNob3VsZCBoYXZlIG5vIHByZWZpeFxuZXhwb3J0IGZ1bmN0aW9uIF9iYXNlMTZUbzM2KHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiAobmV3IEJOKHZhbHVlLCAxNikpLnRvU3RyaW5nKDM2KTtcbn1cbiIsImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJiaWdudW1iZXIvNS43LjBcIjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheWlmeSwgQnl0ZXNMaWtlLCBoZXhaZXJvUGFkLCBpc0J5dGVzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcblxuaW1wb3J0IHsgQmlnTnVtYmVyLCBCaWdOdW1iZXJpc2gsIGlzQmlnTnVtYmVyaXNoIH0gZnJvbSBcIi4vYmlnbnVtYmVyXCI7XG5cbmNvbnN0IF9jb25zdHJ1Y3Rvckd1YXJkID0geyB9O1xuXG5jb25zdCBaZXJvID0gQmlnTnVtYmVyLmZyb20oMCk7XG5jb25zdCBOZWdhdGl2ZU9uZSA9IEJpZ051bWJlci5mcm9tKC0xKTtcblxuZnVuY3Rpb24gdGhyb3dGYXVsdChtZXNzYWdlOiBzdHJpbmcsIGZhdWx0OiBzdHJpbmcsIG9wZXJhdGlvbjogc3RyaW5nLCB2YWx1ZT86IGFueSk6IG5ldmVyIHtcbiAgICBjb25zdCBwYXJhbXM6IGFueSA9IHsgZmF1bHQ6IGZhdWx0LCBvcGVyYXRpb246IG9wZXJhdGlvbiB9O1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7IHBhcmFtcy52YWx1ZSA9IHZhbHVlOyB9XG4gICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKG1lc3NhZ2UsIExvZ2dlci5lcnJvcnMuTlVNRVJJQ19GQVVMVCwgcGFyYW1zKTtcbn1cblxuLy8gQ29uc3RhbnQgdG8gcHVsbCB6ZXJvcyBmcm9tIGZvciBtdWx0aXBsaWVyc1xubGV0IHplcm9zID0gXCIwXCI7XG53aGlsZSAoemVyb3MubGVuZ3RoIDwgMjU2KSB7IHplcm9zICs9IHplcm9zOyB9XG5cbi8vIFJldHVybnMgYSBzdHJpbmcgXCIxXCIgZm9sbG93ZWQgYnkgZGVjaW1hbCBcIjBcInNcbmZ1bmN0aW9uIGdldE11bHRpcGxpZXIoZGVjaW1hbHM6IEJpZ051bWJlcmlzaCk6IHN0cmluZyB7XG5cbiAgICBpZiAodHlwZW9mKGRlY2ltYWxzKSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGVjaW1hbHMgPSBCaWdOdW1iZXIuZnJvbShkZWNpbWFscykudG9OdW1iZXIoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZihkZWNpbWFscykgPT09IFwibnVtYmVyXCIgJiYgZGVjaW1hbHMgPj0gMCAmJiBkZWNpbWFscyA8PSAyNTYgJiYgIShkZWNpbWFscyAlIDEpKSB7XG4gICAgICAgIHJldHVybiAoXCIxXCIgKyB6ZXJvcy5zdWJzdHJpbmcoMCwgZGVjaW1hbHMpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZGVjaW1hbCBzaXplXCIsIFwiZGVjaW1hbHNcIiwgZGVjaW1hbHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0Rml4ZWQodmFsdWU6IEJpZ051bWJlcmlzaCwgZGVjaW1hbHM/OiBzdHJpbmcgfCBCaWdOdW1iZXJpc2gpOiBzdHJpbmcge1xuICAgIGlmIChkZWNpbWFscyA9PSBudWxsKSB7IGRlY2ltYWxzID0gMDsgfVxuICAgIGNvbnN0IG11bHRpcGxpZXIgPSBnZXRNdWx0aXBsaWVyKGRlY2ltYWxzKTtcblxuICAgIC8vIE1ha2Ugc3VyZSB3ZWkgaXMgYSBiaWcgbnVtYmVyIChjb252ZXJ0IGFzIG5lY2Vzc2FyeSlcbiAgICB2YWx1ZSA9IEJpZ051bWJlci5mcm9tKHZhbHVlKTtcblxuICAgIGNvbnN0IG5lZ2F0aXZlID0gdmFsdWUubHQoWmVybyk7XG4gICAgaWYgKG5lZ2F0aXZlKSB7IHZhbHVlID0gdmFsdWUubXVsKE5lZ2F0aXZlT25lKTsgfVxuXG4gICAgbGV0IGZyYWN0aW9uID0gdmFsdWUubW9kKG11bHRpcGxpZXIpLnRvU3RyaW5nKCk7XG4gICAgd2hpbGUgKGZyYWN0aW9uLmxlbmd0aCA8IG11bHRpcGxpZXIubGVuZ3RoIC0gMSkgeyBmcmFjdGlvbiA9IFwiMFwiICsgZnJhY3Rpb247IH1cblxuICAgIC8vIFN0cmlwIHRyYWluaW5nIDBcbiAgICBmcmFjdGlvbiA9IGZyYWN0aW9uLm1hdGNoKC9eKFswLTldKlsxLTldfDApKDAqKS8pWzFdO1xuXG4gICAgY29uc3Qgd2hvbGUgPSB2YWx1ZS5kaXYobXVsdGlwbGllcikudG9TdHJpbmcoKTtcbiAgICBpZiAobXVsdGlwbGllci5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdmFsdWUgPSB3aG9sZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHdob2xlICsgXCIuXCIgKyBmcmFjdGlvbjtcbiAgICB9XG5cbiAgICBpZiAobmVnYXRpdmUpIHsgdmFsdWUgPSBcIi1cIiArIHZhbHVlOyB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUZpeGVkKHZhbHVlOiBzdHJpbmcsIGRlY2ltYWxzPzogQmlnTnVtYmVyaXNoKTogQmlnTnVtYmVyIHtcblxuICAgIGlmIChkZWNpbWFscyA9PSBudWxsKSB7IGRlY2ltYWxzID0gMDsgfVxuICAgIGNvbnN0IG11bHRpcGxpZXIgPSBnZXRNdWx0aXBsaWVyKGRlY2ltYWxzKTtcblxuICAgIGlmICh0eXBlb2YodmFsdWUpICE9PSBcInN0cmluZ1wiIHx8ICF2YWx1ZS5tYXRjaCgvXi0/WzAtOS5dKyQvKSkge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBkZWNpbWFsIHZhbHVlXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8vIElzIGl0IG5lZ2F0aXZlP1xuICAgIGNvbnN0IG5lZ2F0aXZlID0gKHZhbHVlLnN1YnN0cmluZygwLCAxKSA9PT0gXCItXCIpO1xuICAgIGlmIChuZWdhdGl2ZSkgeyB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygxKTsgfVxuXG4gICAgaWYgKHZhbHVlID09PSBcIi5cIikge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwibWlzc2luZyB2YWx1ZVwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBTcGxpdCBpdCBpbnRvIGEgd2hvbGUgYW5kIGZyYWN0aW9uYWwgcGFydFxuICAgIGNvbnN0IGNvbXBzID0gdmFsdWUuc3BsaXQoXCIuXCIpO1xuICAgIGlmIChjb21wcy5sZW5ndGggPiAyKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ0b28gbWFueSBkZWNpbWFsIHBvaW50c1wiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBsZXQgd2hvbGUgPSBjb21wc1swXSwgZnJhY3Rpb24gPSBjb21wc1sxXTtcbiAgICBpZiAoIXdob2xlKSB7IHdob2xlID0gXCIwXCI7IH1cbiAgICBpZiAoIWZyYWN0aW9uKSB7IGZyYWN0aW9uID0gXCIwXCI7IH1cblxuICAgIC8vIFRyaW0gdHJhaWxpbmcgemVyb3NcbiAgICB3aGlsZSAoZnJhY3Rpb25bZnJhY3Rpb24ubGVuZ3RoIC0gMV0gPT09IFwiMFwiKSB7XG4gICAgICAgIGZyYWN0aW9uID0gZnJhY3Rpb24uc3Vic3RyaW5nKDAsIGZyYWN0aW9uLmxlbmd0aCAtIDEpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIHRoZSBmcmFjdGlvbiBkb2Vzbid0IGV4Y2VlZCBvdXIgZGVjaW1hbHMgc2l6ZVxuICAgIGlmIChmcmFjdGlvbi5sZW5ndGggPiBtdWx0aXBsaWVyLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhyb3dGYXVsdChcImZyYWN0aW9uYWwgY29tcG9uZW50IGV4Y2VlZHMgZGVjaW1hbHNcIiwgXCJ1bmRlcmZsb3dcIiwgXCJwYXJzZUZpeGVkXCIpO1xuICAgIH1cblxuICAgIC8vIElmIGRlY2ltYWxzIGlzIDAsIHdlIGhhdmUgYW4gZW1wdHkgc3RyaW5nIGZvciBmcmFjdGlvblxuICAgIGlmIChmcmFjdGlvbiA9PT0gXCJcIikgeyBmcmFjdGlvbiA9IFwiMFwiOyB9XG5cbiAgICAvLyBGdWxseSBwYWQgdGhlIHN0cmluZyB3aXRoIHplcm9zIHRvIGdldCB0byB3ZWlcbiAgICB3aGlsZSAoZnJhY3Rpb24ubGVuZ3RoIDwgbXVsdGlwbGllci5sZW5ndGggLSAxKSB7IGZyYWN0aW9uICs9IFwiMFwiOyB9XG5cbiAgICBjb25zdCB3aG9sZVZhbHVlID0gQmlnTnVtYmVyLmZyb20od2hvbGUpO1xuICAgIGNvbnN0IGZyYWN0aW9uVmFsdWUgPSBCaWdOdW1iZXIuZnJvbShmcmFjdGlvbik7XG5cbiAgICBsZXQgd2VpID0gKHdob2xlVmFsdWUubXVsKG11bHRpcGxpZXIpKS5hZGQoZnJhY3Rpb25WYWx1ZSk7XG5cbiAgICBpZiAobmVnYXRpdmUpIHsgd2VpID0gd2VpLm11bChOZWdhdGl2ZU9uZSk7IH1cblxuICAgIHJldHVybiB3ZWk7XG59XG5cblxuZXhwb3J0IGNsYXNzIEZpeGVkRm9ybWF0IHtcbiAgICByZWFkb25seSBzaWduZWQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgd2lkdGg6IG51bWJlcjtcbiAgICByZWFkb25seSBkZWNpbWFsczogbnVtYmVyO1xuICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgICByZWFkb25seSBfbXVsdGlwbGllcjogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoY29uc3RydWN0b3JHdWFyZDogYW55LCBzaWduZWQ6IGJvb2xlYW4sIHdpZHRoOiBudW1iZXIsIGRlY2ltYWxzOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKGNvbnN0cnVjdG9yR3VhcmQgIT09IF9jb25zdHJ1Y3Rvckd1YXJkKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImNhbm5vdCB1c2UgRml4ZWRGb3JtYXQgY29uc3RydWN0b3I7IHVzZSBGaXhlZEZvcm1hdC5mcm9tXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcIm5ldyBGaXhlZEZvcm1hdFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2lnbmVkID0gc2lnbmVkO1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuZGVjaW1hbHMgPSBkZWNpbWFscztcblxuICAgICAgICB0aGlzLm5hbWUgPSAoc2lnbmVkID8gXCJcIjogXCJ1XCIpICsgXCJmaXhlZFwiICsgU3RyaW5nKHdpZHRoKSArIFwieFwiICsgU3RyaW5nKGRlY2ltYWxzKTtcblxuICAgICAgICB0aGlzLl9tdWx0aXBsaWVyID0gZ2V0TXVsdGlwbGllcihkZWNpbWFscyk7XG5cbiAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbSh2YWx1ZTogYW55KTogRml4ZWRGb3JtYXQge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBGaXhlZEZvcm1hdCkgeyByZXR1cm4gdmFsdWU7IH1cblxuICAgICAgICBpZiAodHlwZW9mKHZhbHVlKSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdmFsdWUgPSBgZml4ZWQxMjh4JHt2YWx1ZX1gXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc2lnbmVkID0gdHJ1ZTtcbiAgICAgICAgbGV0IHdpZHRoID0gMTI4O1xuICAgICAgICBsZXQgZGVjaW1hbHMgPSAxODtcblxuICAgICAgICBpZiAodHlwZW9mKHZhbHVlKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBcImZpeGVkXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0cy4uLlxuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gXCJ1Zml4ZWRcIikge1xuICAgICAgICAgICAgICAgIHNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaCA9IHZhbHVlLm1hdGNoKC9eKHU/KWZpeGVkKFswLTldKyl4KFswLTldKykkLyk7XG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaCkgeyBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmaXhlZCBmb3JtYXRcIiwgXCJmb3JtYXRcIiwgdmFsdWUpOyB9XG4gICAgICAgICAgICAgICAgc2lnbmVkID0gKG1hdGNoWzFdICE9PSBcInVcIik7XG4gICAgICAgICAgICAgICAgd2lkdGggPSBwYXJzZUludChtYXRjaFsyXSk7XG4gICAgICAgICAgICAgICAgZGVjaW1hbHMgPSBwYXJzZUludChtYXRjaFszXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrID0gKGtleTogc3RyaW5nLCB0eXBlOiBzdHJpbmcsIGRlZmF1bHRWYWx1ZTogYW55KTogYW55ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVba2V5XSA9PSBudWxsKSB7IHJldHVybiBkZWZhdWx0VmFsdWU7IH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHZhbHVlW2tleV0pICE9PSB0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGZpeGVkIGZvcm1hdCAoXCIgKyBrZXkgKyBcIiBub3QgXCIgKyB0eXBlICtcIilcIiwgXCJmb3JtYXQuXCIgKyBrZXksIHZhbHVlW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpZ25lZCA9IGNoZWNrKFwic2lnbmVkXCIsIFwiYm9vbGVhblwiLCBzaWduZWQpO1xuICAgICAgICAgICAgd2lkdGggPSBjaGVjayhcIndpZHRoXCIsIFwibnVtYmVyXCIsIHdpZHRoKTtcbiAgICAgICAgICAgIGRlY2ltYWxzID0gY2hlY2soXCJkZWNpbWFsc1wiLCBcIm51bWJlclwiLCBkZWNpbWFscyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2lkdGggJSA4KSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmaXhlZCBmb3JtYXQgd2lkdGggKG5vdCBieXRlIGFsaWduZWQpXCIsIFwiZm9ybWF0LndpZHRoXCIsIHdpZHRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWNpbWFscyA+IDgwKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmaXhlZCBmb3JtYXQgKGRlY2ltYWxzIHRvbyBsYXJnZSlcIiwgXCJmb3JtYXQuZGVjaW1hbHNcIiwgZGVjaW1hbHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBGaXhlZEZvcm1hdChfY29uc3RydWN0b3JHdWFyZCwgc2lnbmVkLCB3aWR0aCwgZGVjaW1hbHMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZpeGVkTnVtYmVyIHtcbiAgICByZWFkb25seSBmb3JtYXQ6IEZpeGVkRm9ybWF0O1xuICAgIHJlYWRvbmx5IF9oZXg6IHN0cmluZztcbiAgICByZWFkb25seSBfdmFsdWU6IHN0cmluZztcblxuICAgIHJlYWRvbmx5IF9pc0ZpeGVkTnVtYmVyOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoY29uc3RydWN0b3JHdWFyZDogYW55LCBoZXg6IHN0cmluZywgdmFsdWU6IHN0cmluZywgZm9ybWF0PzogRml4ZWRGb3JtYXQpIHtcbiAgICAgICAgaWYgKGNvbnN0cnVjdG9yR3VhcmQgIT09IF9jb25zdHJ1Y3Rvckd1YXJkKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImNhbm5vdCB1c2UgRml4ZWROdW1iZXIgY29uc3RydWN0b3I7IHVzZSBGaXhlZE51bWJlci5mcm9tXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcIm5ldyBGaXhlZEZvcm1hdFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuICAgICAgICB0aGlzLl9oZXggPSBoZXg7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgdGhpcy5faXNGaXhlZE51bWJlciA9IHRydWU7XG5cbiAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgICB9XG5cbiAgICBfY2hlY2tGb3JtYXQob3RoZXI6IEZpeGVkTnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmZvcm1hdC5uYW1lICE9PSBvdGhlci5mb3JtYXQubmFtZSkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImluY29tcGF0aWJsZSBmb3JtYXQ7IHVzZSBmaXhlZE51bWJlci50b0Zvcm1hdFwiLCBcIm90aGVyXCIsIG90aGVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZFVuc2FmZShvdGhlcjogRml4ZWROdW1iZXIpOiBGaXhlZE51bWJlciB7XG4gICAgICAgIHRoaXMuX2NoZWNrRm9ybWF0KG90aGVyKTtcbiAgICAgICAgY29uc3QgYSA9IHBhcnNlRml4ZWQodGhpcy5fdmFsdWUsIHRoaXMuZm9ybWF0LmRlY2ltYWxzKTtcbiAgICAgICAgY29uc3QgYiA9IHBhcnNlRml4ZWQob3RoZXIuX3ZhbHVlLCBvdGhlci5mb3JtYXQuZGVjaW1hbHMpO1xuICAgICAgICByZXR1cm4gRml4ZWROdW1iZXIuZnJvbVZhbHVlKGEuYWRkKGIpLCB0aGlzLmZvcm1hdC5kZWNpbWFscywgdGhpcy5mb3JtYXQpO1xuICAgIH1cblxuICAgIHN1YlVuc2FmZShvdGhlcjogRml4ZWROdW1iZXIpOiBGaXhlZE51bWJlciB7XG4gICAgICAgIHRoaXMuX2NoZWNrRm9ybWF0KG90aGVyKTtcbiAgICAgICAgY29uc3QgYSA9IHBhcnNlRml4ZWQodGhpcy5fdmFsdWUsIHRoaXMuZm9ybWF0LmRlY2ltYWxzKTtcbiAgICAgICAgY29uc3QgYiA9IHBhcnNlRml4ZWQob3RoZXIuX3ZhbHVlLCBvdGhlci5mb3JtYXQuZGVjaW1hbHMpO1xuICAgICAgICByZXR1cm4gRml4ZWROdW1iZXIuZnJvbVZhbHVlKGEuc3ViKGIpLCB0aGlzLmZvcm1hdC5kZWNpbWFscywgdGhpcy5mb3JtYXQpO1xuICAgIH1cblxuICAgIG11bFVuc2FmZShvdGhlcjogRml4ZWROdW1iZXIpOiBGaXhlZE51bWJlciB7XG4gICAgICAgIHRoaXMuX2NoZWNrRm9ybWF0KG90aGVyKTtcbiAgICAgICAgY29uc3QgYSA9IHBhcnNlRml4ZWQodGhpcy5fdmFsdWUsIHRoaXMuZm9ybWF0LmRlY2ltYWxzKTtcbiAgICAgICAgY29uc3QgYiA9IHBhcnNlRml4ZWQob3RoZXIuX3ZhbHVlLCBvdGhlci5mb3JtYXQuZGVjaW1hbHMpO1xuICAgICAgICByZXR1cm4gRml4ZWROdW1iZXIuZnJvbVZhbHVlKGEubXVsKGIpLmRpdih0aGlzLmZvcm1hdC5fbXVsdGlwbGllciksIHRoaXMuZm9ybWF0LmRlY2ltYWxzLCB0aGlzLmZvcm1hdCk7XG4gICAgfVxuXG4gICAgZGl2VW5zYWZlKG90aGVyOiBGaXhlZE51bWJlcik6IEZpeGVkTnVtYmVyIHtcbiAgICAgICAgdGhpcy5fY2hlY2tGb3JtYXQob3RoZXIpO1xuICAgICAgICBjb25zdCBhID0gcGFyc2VGaXhlZCh0aGlzLl92YWx1ZSwgdGhpcy5mb3JtYXQuZGVjaW1hbHMpO1xuICAgICAgICBjb25zdCBiID0gcGFyc2VGaXhlZChvdGhlci5fdmFsdWUsIG90aGVyLmZvcm1hdC5kZWNpbWFscyk7XG4gICAgICAgIHJldHVybiBGaXhlZE51bWJlci5mcm9tVmFsdWUoYS5tdWwodGhpcy5mb3JtYXQuX211bHRpcGxpZXIpLmRpdihiKSwgdGhpcy5mb3JtYXQuZGVjaW1hbHMsIHRoaXMuZm9ybWF0KTtcbiAgICB9XG5cbiAgICBmbG9vcigpOiBGaXhlZE51bWJlciB7XG4gICAgICAgIGNvbnN0IGNvbXBzID0gdGhpcy50b1N0cmluZygpLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgaWYgKGNvbXBzLmxlbmd0aCA9PT0gMSkgeyBjb21wcy5wdXNoKFwiMFwiKTsgfVxuXG4gICAgICAgIGxldCByZXN1bHQgPSBGaXhlZE51bWJlci5mcm9tKGNvbXBzWzBdLCB0aGlzLmZvcm1hdCk7XG5cbiAgICAgICAgY29uc3QgaGFzRnJhY3Rpb24gPSAhY29tcHNbMV0ubWF0Y2goL14oMCopJC8pO1xuICAgICAgICBpZiAodGhpcy5pc05lZ2F0aXZlKCkgJiYgaGFzRnJhY3Rpb24pIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zdWJVbnNhZmUoT05FLnRvRm9ybWF0KHJlc3VsdC5mb3JtYXQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgY2VpbGluZygpOiBGaXhlZE51bWJlciB7XG4gICAgICAgIGNvbnN0IGNvbXBzID0gdGhpcy50b1N0cmluZygpLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgaWYgKGNvbXBzLmxlbmd0aCA9PT0gMSkgeyBjb21wcy5wdXNoKFwiMFwiKTsgfVxuXG4gICAgICAgIGxldCByZXN1bHQgPSBGaXhlZE51bWJlci5mcm9tKGNvbXBzWzBdLCB0aGlzLmZvcm1hdCk7XG5cbiAgICAgICAgY29uc3QgaGFzRnJhY3Rpb24gPSAhY29tcHNbMV0ubWF0Y2goL14oMCopJC8pO1xuICAgICAgICBpZiAoIXRoaXMuaXNOZWdhdGl2ZSgpICYmIGhhc0ZyYWN0aW9uKSB7XG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuYWRkVW5zYWZlKE9ORS50b0Zvcm1hdChyZXN1bHQuZm9ybWF0KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIEBUT0RPOiBTdXBwb3J0IG90aGVyIHJvdW5kaW5nIGFsZ29yaXRobXNcbiAgICByb3VuZChkZWNpbWFscz86IG51bWJlcik6IEZpeGVkTnVtYmVyIHtcbiAgICAgICAgaWYgKGRlY2ltYWxzID09IG51bGwpIHsgZGVjaW1hbHMgPSAwOyB9XG5cbiAgICAgICAgLy8gSWYgd2UgYXJlIGFscmVhZHkgaW4gcmFuZ2UsIHdlJ3JlIGRvbmVcbiAgICAgICAgY29uc3QgY29tcHMgPSB0aGlzLnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpO1xuICAgICAgICBpZiAoY29tcHMubGVuZ3RoID09PSAxKSB7IGNvbXBzLnB1c2goXCIwXCIpOyB9XG5cbiAgICAgICAgaWYgKGRlY2ltYWxzIDwgMCB8fCBkZWNpbWFscyA+IDgwIHx8IChkZWNpbWFscyAlIDEpKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBkZWNpbWFsIGNvdW50XCIsIFwiZGVjaW1hbHNcIiwgZGVjaW1hbHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbXBzWzFdLmxlbmd0aCA8PSBkZWNpbWFscykgeyByZXR1cm4gdGhpczsgfVxuXG4gICAgICAgIGNvbnN0IGZhY3RvciA9IEZpeGVkTnVtYmVyLmZyb20oXCIxXCIgKyB6ZXJvcy5zdWJzdHJpbmcoMCwgZGVjaW1hbHMpLCB0aGlzLmZvcm1hdCk7XG4gICAgICAgIGNvbnN0IGJ1bXAgPSBCVU1QLnRvRm9ybWF0KHRoaXMuZm9ybWF0KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5tdWxVbnNhZmUoZmFjdG9yKS5hZGRVbnNhZmUoYnVtcCkuZmxvb3IoKS5kaXZVbnNhZmUoZmFjdG9yKTtcbiAgICB9XG5cbiAgICBpc1plcm8oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAodGhpcy5fdmFsdWUgPT09IFwiMC4wXCIgfHwgdGhpcy5fdmFsdWUgPT09IFwiMFwiKTtcbiAgICB9XG5cbiAgICBpc05lZ2F0aXZlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKHRoaXMuX3ZhbHVlWzBdID09PSBcIi1cIik7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuX3ZhbHVlOyB9XG5cbiAgICB0b0hleFN0cmluZyh3aWR0aD86IG51bWJlcik6IHN0cmluZyB7XG4gICAgICAgIGlmICh3aWR0aCA9PSBudWxsKSB7IHJldHVybiB0aGlzLl9oZXg7IH1cbiAgICAgICAgaWYgKHdpZHRoICUgOCkgeyBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBieXRlIHdpZHRoXCIsIFwid2lkdGhcIiwgd2lkdGgpOyB9XG4gICAgICAgIGNvbnN0IGhleCA9IEJpZ051bWJlci5mcm9tKHRoaXMuX2hleCkuZnJvbVR3b3ModGhpcy5mb3JtYXQud2lkdGgpLnRvVHdvcyh3aWR0aCkudG9IZXhTdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIGhleFplcm9QYWQoaGV4LCB3aWR0aCAvIDgpO1xuICAgIH1cblxuICAgIHRvVW5zYWZlRmxvYXQoKTogbnVtYmVyIHsgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy50b1N0cmluZygpKTsgfVxuXG4gICAgdG9Gb3JtYXQoZm9ybWF0OiBGaXhlZEZvcm1hdCB8IHN0cmluZyk6IEZpeGVkTnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIEZpeGVkTnVtYmVyLmZyb21TdHJpbmcodGhpcy5fdmFsdWUsIGZvcm1hdCk7XG4gICAgfVxuXG5cbiAgICBzdGF0aWMgZnJvbVZhbHVlKHZhbHVlOiBCaWdOdW1iZXIsIGRlY2ltYWxzPzogQmlnTnVtYmVyaXNoLCBmb3JtYXQ/OiBGaXhlZEZvcm1hdCB8IHN0cmluZyB8IG51bWJlcik6IEZpeGVkTnVtYmVyIHtcbiAgICAgICAgLy8gSWYgZGVjaW1hbHMgbG9va3MgbW9yZSBsaWtlIGEgZm9ybWF0LCBhbmQgdGhlcmUgaXMgbm8gZm9ybWF0LCBzaGlmdCB0aGUgcGFyYW1ldGVyc1xuICAgICAgICBpZiAoZm9ybWF0ID09IG51bGwgJiYgZGVjaW1hbHMgIT0gbnVsbCAmJiAhaXNCaWdOdW1iZXJpc2goZGVjaW1hbHMpKSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBkZWNpbWFscztcbiAgICAgICAgICAgIGRlY2ltYWxzID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWNpbWFscyA9PSBudWxsKSB7IGRlY2ltYWxzID0gMDsgfVxuICAgICAgICBpZiAoZm9ybWF0ID09IG51bGwpIHsgZm9ybWF0ID0gXCJmaXhlZFwiOyB9XG5cbiAgICAgICAgcmV0dXJuIEZpeGVkTnVtYmVyLmZyb21TdHJpbmcoZm9ybWF0Rml4ZWQodmFsdWUsIGRlY2ltYWxzKSwgRml4ZWRGb3JtYXQuZnJvbShmb3JtYXQpKTtcbiAgICB9XG5cblxuICAgIHN0YXRpYyBmcm9tU3RyaW5nKHZhbHVlOiBzdHJpbmcsIGZvcm1hdD86IEZpeGVkRm9ybWF0IHwgc3RyaW5nIHwgbnVtYmVyKTogRml4ZWROdW1iZXIge1xuICAgICAgICBpZiAoZm9ybWF0ID09IG51bGwpIHsgZm9ybWF0ID0gXCJmaXhlZFwiOyB9XG5cbiAgICAgICAgY29uc3QgZml4ZWRGb3JtYXQgPSBGaXhlZEZvcm1hdC5mcm9tKGZvcm1hdCk7XG5cbiAgICAgICAgY29uc3QgbnVtZXJpYyA9IHBhcnNlRml4ZWQodmFsdWUsIGZpeGVkRm9ybWF0LmRlY2ltYWxzKTtcblxuICAgICAgICBpZiAoIWZpeGVkRm9ybWF0LnNpZ25lZCAmJiBudW1lcmljLmx0KFplcm8pKSB7XG4gICAgICAgICAgICB0aHJvd0ZhdWx0KFwidW5zaWduZWQgdmFsdWUgY2Fubm90IGJlIG5lZ2F0aXZlXCIsIFwib3ZlcmZsb3dcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaGV4OiBzdHJpbmcgPSBudWxsO1xuICAgICAgICBpZiAoZml4ZWRGb3JtYXQuc2lnbmVkKSB7XG4gICAgICAgICAgICBoZXggPSBudW1lcmljLnRvVHdvcyhmaXhlZEZvcm1hdC53aWR0aCkudG9IZXhTdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhleCA9IG51bWVyaWMudG9IZXhTdHJpbmcoKTtcbiAgICAgICAgICAgIGhleCA9IGhleFplcm9QYWQoaGV4LCBmaXhlZEZvcm1hdC53aWR0aCAvIDgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGVjaW1hbCA9IGZvcm1hdEZpeGVkKG51bWVyaWMsIGZpeGVkRm9ybWF0LmRlY2ltYWxzKTtcblxuICAgICAgICByZXR1cm4gbmV3IEZpeGVkTnVtYmVyKF9jb25zdHJ1Y3Rvckd1YXJkLCBoZXgsIGRlY2ltYWwsIGZpeGVkRm9ybWF0KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbUJ5dGVzKHZhbHVlOiBCeXRlc0xpa2UsIGZvcm1hdD86IEZpeGVkRm9ybWF0IHwgc3RyaW5nIHwgbnVtYmVyKTogRml4ZWROdW1iZXIge1xuICAgICAgICBpZiAoZm9ybWF0ID09IG51bGwpIHsgZm9ybWF0ID0gXCJmaXhlZFwiOyB9XG5cbiAgICAgICAgY29uc3QgZml4ZWRGb3JtYXQgPSBGaXhlZEZvcm1hdC5mcm9tKGZvcm1hdCk7XG5cbiAgICAgICAgaWYgKGFycmF5aWZ5KHZhbHVlKS5sZW5ndGggPiBmaXhlZEZvcm1hdC53aWR0aCAvIDgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm92ZXJmbG93XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG51bWVyaWMgPSBCaWdOdW1iZXIuZnJvbSh2YWx1ZSk7XG4gICAgICAgIGlmIChmaXhlZEZvcm1hdC5zaWduZWQpIHsgbnVtZXJpYyA9IG51bWVyaWMuZnJvbVR3b3MoZml4ZWRGb3JtYXQud2lkdGgpOyB9XG5cbiAgICAgICAgY29uc3QgaGV4ID0gbnVtZXJpYy50b1R3b3MoKGZpeGVkRm9ybWF0LnNpZ25lZCA/IDA6IDEpICsgZml4ZWRGb3JtYXQud2lkdGgpLnRvSGV4U3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IGRlY2ltYWwgPSBmb3JtYXRGaXhlZChudW1lcmljLCBmaXhlZEZvcm1hdC5kZWNpbWFscyk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBGaXhlZE51bWJlcihfY29uc3RydWN0b3JHdWFyZCwgaGV4LCBkZWNpbWFsLCBmaXhlZEZvcm1hdCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb20odmFsdWU6IGFueSwgZm9ybWF0PzogRml4ZWRGb3JtYXQgfCBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZih2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBGaXhlZE51bWJlci5mcm9tU3RyaW5nKHZhbHVlLCBmb3JtYXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzQnl0ZXModmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gRml4ZWROdW1iZXIuZnJvbUJ5dGVzKHZhbHVlLCBmb3JtYXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBGaXhlZE51bWJlci5mcm9tVmFsdWUodmFsdWUsIDAsIGZvcm1hdCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBBbGxvdyBOVU1FUklDX0ZBVUxUIHRvIGJ1YmJsZSB1cFxuICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgIT09IExvZ2dlci5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCkge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIEZpeGVkTnVtYmVyIHZhbHVlXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBpc0ZpeGVkTnVtYmVyKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBGaXhlZE51bWJlciB7XG4gICAgICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5faXNGaXhlZE51bWJlcik7XG4gICAgfVxufVxuXG5jb25zdCBPTkUgPSBGaXhlZE51bWJlci5mcm9tKDEpO1xuY29uc3QgQlVNUCA9IEZpeGVkTnVtYmVyLmZyb20oXCIwLjVcIik7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lUmVhZE9ubHk8VCwgSyBleHRlbmRzIGtleW9mIFQ+KG9iamVjdDogVCwgbmFtZTogSywgdmFsdWU6IFRbS10pOiB2b2lkIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgIH0pO1xufVxuXG4vLyBDcmF3bCB1cCB0aGUgY29uc3RydWN0b3IgY2hhaW4gdG8gZmluZCBhIHN0YXRpYyBtZXRob2RcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGF0aWM8VD4oY3RvcjogYW55LCBrZXk6IHN0cmluZyk6IFQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzI7IGkrKykge1xuICAgICAgICBpZiAoY3RvcltrZXldKSB7IHJldHVybiBjdG9yW2tleV07IH1cbiAgICAgICAgaWYgKCFjdG9yLnByb3RvdHlwZSB8fCB0eXBlb2YoY3Rvci5wcm90b3R5cGUpICE9PSBcIm9iamVjdFwiKSB7IGJyZWFrOyB9XG4gICAgICAgIGN0b3IgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY3Rvci5wcm90b3R5cGUpLmNvbnN0cnVjdG9yO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IHR5cGUgRGVmZXJyYWJsZTxUPiA9IHtcbiAgICBbIEsgaW4ga2V5b2YgVCBdOiBUW0tdIHwgUHJvbWlzZTxUW0tdPjtcbn1cblxuXG50eXBlIFJlc3VsdCA9IHsga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnl9O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZVByb3BlcnRpZXM8VD4ob2JqZWN0OiBSZWFkb25seTxEZWZlcnJhYmxlPFQ+Pik6IFByb21pc2U8VD4ge1xuICAgIGNvbnN0IHByb21pc2VzOiBBcnJheTxQcm9taXNlPFJlc3VsdD4+ID0gT2JqZWN0LmtleXMob2JqZWN0KS5tYXAoKGtleSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IG9iamVjdFs8a2V5b2YgRGVmZXJyYWJsZTxUPj5rZXldO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKCh2KSA9PiAoeyBrZXk6IGtleSwgdmFsdWU6IHYgfSkpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcblxuICAgIHJldHVybiByZXN1bHRzLnJlZHVjZSgoYWNjdW0sIHJlc3VsdCkgPT4ge1xuICAgICAgICBhY2N1bVs8a2V5b2YgVD4ocmVzdWx0LmtleSldID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICByZXR1cm4gYWNjdW07XG4gICAgfSwgPFQ+eyB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUHJvcGVydGllcyhvYmplY3Q6IGFueSwgcHJvcGVydGllczogeyBbIG5hbWU6IHN0cmluZyBdOiBib29sZWFuIH0pOiB2b2lkIHtcbiAgICBpZiAoIW9iamVjdCB8fCB0eXBlb2Yob2JqZWN0KSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBvYmplY3RcIiwgXCJvYmplY3RcIiwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBpZiAoIXByb3BlcnRpZXNba2V5XSkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgb2JqZWN0IGtleSAtIFwiICsga2V5LCBcInRyYW5zYWN0aW9uOlwiICsga2V5LCBvYmplY3QpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGFsbG93Q29weTxUPihvYmplY3Q6IFQpOiBUIHtcbiAgICBjb25zdCByZXN1bHQ6IGFueSA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9iamVjdCkgeyByZXN1bHRba2V5XSA9IG9iamVjdFtrZXldOyB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuY29uc3Qgb3BhcXVlOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSA9IHsgYmlnaW50OiB0cnVlLCBib29sZWFuOiB0cnVlLCBcImZ1bmN0aW9uXCI6IHRydWUsIG51bWJlcjogdHJ1ZSwgc3RyaW5nOiB0cnVlIH07XG5cbmZ1bmN0aW9uIF9pc0Zyb3plbihvYmplY3Q6IGFueSk6IGJvb2xlYW4ge1xuXG4gICAgLy8gT3BhcXVlIG9iamVjdHMgYXJlIG5vdCBtdXRhYmxlLCBzbyBzYWZlIHRvIGNvcHkgYnkgYXNzaWdubWVudFxuICAgIGlmIChvYmplY3QgPT09IHVuZGVmaW5lZCB8fCBvYmplY3QgPT09IG51bGwgfHwgb3BhcXVlW3R5cGVvZihvYmplY3QpXSkgeyByZXR1cm4gdHJ1ZTsgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSB8fCB0eXBlb2Yob2JqZWN0KSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBpZiAoIU9iamVjdC5pc0Zyb3plbihvYmplY3QpKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZTogYW55ID0gbnVsbDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5c1tpXV07XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIElmIGFjY2Vzc2luZyBhIHZhbHVlIHRyaWdnZXJzIGFuIGVycm9yLCBpdCBpcyBhIGdldHRlclxuICAgICAgICAgICAgICAgIC8vIGRlc2lnbmVkIHRvIGRvIHNvIChlLmcuIFJlc3VsdCkgYW5kIGlzIHRoZXJlZm9yZSBcImZyb3plblwiXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghX2lzRnJvemVuKHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKGBDYW5ub3QgZGVlcENvcHkgJHsgdHlwZW9mKG9iamVjdCkgfWAsIFwib2JqZWN0XCIsIG9iamVjdCk7XG59XG5cbi8vIFJldHVybnMgYSBuZXcgY29weSBvZiBvYmplY3QsIHN1Y2ggdGhhdCBubyBwcm9wZXJ0aWVzIG1heSBiZSByZXBsYWNlZC5cbi8vIE5ldyBwcm9wZXJ0aWVzIG1heSBiZSBhZGRlZCBvbmx5IHRvIG9iamVjdHMuXG5mdW5jdGlvbiBfZGVlcENvcHkob2JqZWN0OiBhbnkpOiBhbnkge1xuXG4gICAgaWYgKF9pc0Zyb3plbihvYmplY3QpKSB7IHJldHVybiBvYmplY3Q7IH1cblxuICAgIC8vIEFycmF5cyBhcmUgbXV0YWJsZSwgc28gd2UgbmVlZCB0byBjcmVhdGUgYSBjb3B5XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZShvYmplY3QubWFwKChpdGVtKSA9PiBkZWVwQ29weShpdGVtKSkpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Yob2JqZWN0KSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBjb25zdCByZXN1bHQ6IHsgWyBrZXk6IHN0cmluZyBdOiBhbnkgfSA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgeyBjb250aW51ZTsgfVxuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkocmVzdWx0LCBrZXksIGRlZXBDb3B5KHZhbHVlKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJldHVybiBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKGBDYW5ub3QgZGVlcENvcHkgJHsgdHlwZW9mKG9iamVjdCkgfWAsIFwib2JqZWN0XCIsIG9iamVjdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWVwQ29weTxUPihvYmplY3Q6IFQpOiBUIHtcbiAgICByZXR1cm4gX2RlZXBDb3B5KG9iamVjdCk7XG59XG5cbmV4cG9ydCBjbGFzcyBEZXNjcmlwdGlvbjxUID0gYW55PiB7XG4gICAgY29uc3RydWN0b3IoaW5mbzogeyBbIEsgaW4ga2V5b2YgVCBdOiBUW0tdIH0pIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaW5mbykge1xuICAgICAgICAgICAgKDxhbnk+dGhpcylba2V5XSA9IGRlZXBDb3B5KGluZm9ba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwicHJvcGVydGllcy81LjcuMFwiO1xuIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcImFiaS81LjcuMFwiO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iaWdudW1iZXJcIjtcbmltcG9ydCB7IGRlZmluZVJlYWRPbmx5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIjtcblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuXG5leHBvcnQgaW50ZXJmYWNlIEpzb25GcmFnbWVudFR5cGUge1xuICAgIHJlYWRvbmx5IG5hbWU/OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgaW5kZXhlZD86IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgdHlwZT86IHN0cmluZztcbiAgICByZWFkb25seSBpbnRlcm5hbFR5cGU/OiBhbnk7IC8vIEBUT0RPOiBpbiB2NiByZWR1Y2UgdHlwZVxuICAgIHJlYWRvbmx5IGNvbXBvbmVudHM/OiBSZWFkb25seUFycmF5PEpzb25GcmFnbWVudFR5cGU+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEpzb25GcmFnbWVudCB7XG4gICAgcmVhZG9ubHkgbmFtZT86IHN0cmluZztcbiAgICByZWFkb25seSB0eXBlPzogc3RyaW5nO1xuXG4gICAgcmVhZG9ubHkgYW5vbnltb3VzPzogYm9vbGVhbjtcblxuICAgIHJlYWRvbmx5IHBheWFibGU/OiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGNvbnN0YW50PzogYm9vbGVhbjtcbiAgICByZWFkb25seSBzdGF0ZU11dGFiaWxpdHk/OiBzdHJpbmc7XG5cbiAgICByZWFkb25seSBpbnB1dHM/OiBSZWFkb25seUFycmF5PEpzb25GcmFnbWVudFR5cGU+O1xuICAgIHJlYWRvbmx5IG91dHB1dHM/OiBSZWFkb25seUFycmF5PEpzb25GcmFnbWVudFR5cGU+O1xuXG4gICAgcmVhZG9ubHkgZ2FzPzogc3RyaW5nO1xufTtcblxuY29uc3QgX2NvbnN0cnVjdG9yR3VhcmQgPSB7IH07XG5cbi8vIEFTVCBOb2RlIHBhcnNlciBzdGF0ZVxudHlwZSBQYXJzZVN0YXRlID0ge1xuICAgIGFsbG93QXJyYXk/OiBib29sZWFuLFxuICAgIGFsbG93TmFtZT86IGJvb2xlYW4sXG4gICAgYWxsb3dQYXJhbXM/OiBib29sZWFuLFxuICAgIGFsbG93VHlwZT86IGJvb2xlYW4sXG4gICAgcmVhZEFycmF5PzogYm9vbGVhbixcbn07XG5cbi8vIEFTVCBOb2RlXG50eXBlIFBhcnNlTm9kZSA9IHtcbiAgICBwYXJlbnQ/OiBhbnksXG4gICAgdHlwZT86IHN0cmluZyxcbiAgICBuYW1lPzogc3RyaW5nLFxuICAgIHN0YXRlPzogUGFyc2VTdGF0ZSxcbiAgICBpbmRleGVkPzogYm9vbGVhbixcbiAgICBjb21wb25lbnRzPzogQXJyYXk8UGFyc2VOb2RlPlxufTtcblxubGV0IE1vZGlmaWVyc0J5dGVzOiB7IFsgbmFtZTogc3RyaW5nIF06IGJvb2xlYW4gfSA9IHsgY2FsbGRhdGE6IHRydWUsIG1lbW9yeTogdHJ1ZSwgc3RvcmFnZTogdHJ1ZSB9O1xubGV0IE1vZGlmaWVyc05lc3Q6IHsgWyBuYW1lOiBzdHJpbmcgXTogYm9vbGVhbiB9ID0geyBjYWxsZGF0YTogdHJ1ZSwgbWVtb3J5OiB0cnVlIH07XG5mdW5jdGlvbiBjaGVja01vZGlmaWVyKHR5cGU6IHN0cmluZywgbmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgaWYgKHR5cGUgPT09IFwiYnl0ZXNcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChNb2RpZmllcnNCeXRlc1tuYW1lXSkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJhZGRyZXNzXCIpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09IFwicGF5YWJsZVwiKSB7IHJldHVybiB0cnVlOyB9XG4gICAgfSBlbHNlIGlmICh0eXBlLmluZGV4T2YoXCJbXCIpID49IDAgfHwgdHlwZSA9PT0gXCJ0dXBsZVwiKSB7XG4gICAgICAgIGlmIChNb2RpZmllcnNOZXN0W25hbWVdKSB7IHJldHVybiB0cnVlOyB9XG4gICAgfVxuICAgIGlmIChNb2RpZmllcnNCeXRlc1tuYW1lXSB8fCBuYW1lID09PSBcInBheWFibGVcIikge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBtb2RpZmllclwiLCBcIm5hbWVcIiwgbmFtZSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLy8gQFRPRE86IE1ha2Ugc3VyZSB0aGF0IGNoaWxkcmVuIG9mIGFuIGluZGV4ZWQgdHVwbGUgYXJlIG1hcmtlZCB3aXRoIGEgbnVsbCBpbmRleGVkXG5mdW5jdGlvbiBwYXJzZVBhcmFtVHlwZShwYXJhbTogc3RyaW5nLCBhbGxvd0luZGV4ZWQ6IGJvb2xlYW4pOiBQYXJzZU5vZGUge1xuXG4gICAgbGV0IG9yaWdpbmFsUGFyYW0gPSBwYXJhbTtcbiAgICBmdW5jdGlvbiB0aHJvd0Vycm9yKGk6IG51bWJlcikge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKGB1bmV4cGVjdGVkIGNoYXJhY3RlciBhdCBwb3NpdGlvbiAkeyBpIH1gLCBcInBhcmFtXCIsIHBhcmFtKTtcbiAgICB9XG4gICAgcGFyYW0gPSBwYXJhbS5yZXBsYWNlKC9cXHMvZywgXCIgXCIpO1xuXG4gICAgZnVuY3Rpb24gbmV3Tm9kZShwYXJlbnQ6IFBhcnNlTm9kZSk6IFBhcnNlTm9kZSB7XG4gICAgICAgIGxldCBub2RlOiBQYXJzZU5vZGUgPSB7IHR5cGU6IFwiXCIsIG5hbWU6IFwiXCIsIHBhcmVudDogcGFyZW50LCBzdGF0ZTogeyBhbGxvd1R5cGU6IHRydWUgfSB9O1xuICAgICAgICBpZiAoYWxsb3dJbmRleGVkKSB7IG5vZGUuaW5kZXhlZCA9IGZhbHNlOyB9XG4gICAgICAgIHJldHVybiBub2RlXG4gICAgfVxuXG4gICAgbGV0IHBhcmVudDogUGFyc2VOb2RlID0geyB0eXBlOiBcIlwiLCBuYW1lOiBcIlwiLCBzdGF0ZTogeyBhbGxvd1R5cGU6IHRydWUgfSB9O1xuICAgIGxldCBub2RlID0gcGFyZW50O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbS5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgYyA9IHBhcmFtW2ldO1xuICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICAgIGNhc2UgXCIoXCI6XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuc3RhdGUuYWxsb3dUeXBlICYmIG5vZGUudHlwZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICBub2RlLnR5cGUgPSBcInR1cGxlXCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghbm9kZS5zdGF0ZS5hbGxvd1BhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvd0Vycm9yKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBub2RlLnN0YXRlLmFsbG93VHlwZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG5vZGUudHlwZSA9IHZlcmlmeVR5cGUobm9kZS50eXBlKTtcbiAgICAgICAgICAgICAgICBub2RlLmNvbXBvbmVudHMgPSBbIG5ld05vZGUobm9kZSkgXTtcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5jb21wb25lbnRzWzBdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwiKVwiOlxuICAgICAgICAgICAgICAgIGRlbGV0ZSBub2RlLnN0YXRlO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubmFtZSA9PT0gXCJpbmRleGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbGxvd0luZGV4ZWQpIHsgdGhyb3dFcnJvcihpKTsgfVxuICAgICAgICAgICAgICAgICAgICBub2RlLmluZGV4ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBub2RlLm5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjaGVja01vZGlmaWVyKG5vZGUudHlwZSwgbm9kZS5uYW1lKSkgeyBub2RlLm5hbWUgPSBcIlwiOyB9XG5cbiAgICAgICAgICAgICAgICBub2RlLnR5cGUgPSB2ZXJpZnlUeXBlKG5vZGUudHlwZSk7XG5cbiAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSBub2RlO1xuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudDtcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGUpIHsgdGhyb3dFcnJvcihpKTsgfVxuICAgICAgICAgICAgICAgIGRlbGV0ZSBjaGlsZC5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgbm9kZS5zdGF0ZS5hbGxvd1BhcmFtcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG5vZGUuc3RhdGUuYWxsb3dOYW1lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBub2RlLnN0YXRlLmFsbG93QXJyYXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwiLFwiOlxuICAgICAgICAgICAgICAgIGRlbGV0ZSBub2RlLnN0YXRlO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubmFtZSA9PT0gXCJpbmRleGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbGxvd0luZGV4ZWQpIHsgdGhyb3dFcnJvcihpKTsgfVxuICAgICAgICAgICAgICAgICAgICBub2RlLmluZGV4ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBub2RlLm5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjaGVja01vZGlmaWVyKG5vZGUudHlwZSwgbm9kZS5uYW1lKSkgeyBub2RlLm5hbWUgPSBcIlwiOyB9XG5cbiAgICAgICAgICAgICAgICBub2RlLnR5cGUgPSB2ZXJpZnlUeXBlKG5vZGUudHlwZSk7XG5cbiAgICAgICAgICAgICAgICBsZXQgc2libGluZzogUGFyc2VOb2RlID0gbmV3Tm9kZShub2RlLnBhcmVudCk7XG4gICAgICAgICAgICAgICAgIC8veyB0eXBlOiBcIlwiLCBuYW1lOiBcIlwiLCBwYXJlbnQ6IG5vZGUucGFyZW50LCBzdGF0ZTogeyBhbGxvd1R5cGU6IHRydWUgfSB9O1xuICAgICAgICAgICAgICAgIG5vZGUucGFyZW50LmNvbXBvbmVudHMucHVzaChzaWJsaW5nKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgbm9kZS5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgbm9kZSA9IHNpYmxpbmc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIC8vIEhpdCBhIHNwYWNlLi4uXG4gICAgICAgICAgICBjYXNlIFwiIFwiOlxuXG4gICAgICAgICAgICAgICAgLy8gSWYgcmVhZGluZyB0eXBlLCB0aGUgdHlwZSBpcyBkb25lIGFuZCBtYXkgcmVhZCBhIHBhcmFtIG9yIG5hbWVcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5zdGF0ZS5hbGxvd1R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS50eXBlID0gdmVyaWZ5VHlwZShub2RlLnR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG5vZGUuc3RhdGUuYWxsb3dUeXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zdGF0ZS5hbGxvd05hbWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zdGF0ZS5hbGxvd1BhcmFtcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZiByZWFkaW5nIG5hbWUsIHRoZSBuYW1lIGlzIGRvbmVcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5zdGF0ZS5hbGxvd05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubmFtZSAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubmFtZSA9PT0gXCJpbmRleGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFsbG93SW5kZXhlZCkgeyB0aHJvd0Vycm9yKGkpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuaW5kZXhlZCkgeyB0aHJvd0Vycm9yKGkpOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5pbmRleGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLm5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGVja01vZGlmaWVyKG5vZGUudHlwZSwgbm9kZS5uYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUubmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc3RhdGUuYWxsb3dOYW1lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcIltcIjpcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGUuc3RhdGUuYWxsb3dBcnJheSkgeyB0aHJvd0Vycm9yKGkpOyB9XG5cbiAgICAgICAgICAgICAgICBub2RlLnR5cGUgKz0gYztcblxuICAgICAgICAgICAgICAgIG5vZGUuc3RhdGUuYWxsb3dBcnJheSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG5vZGUuc3RhdGUuYWxsb3dOYW1lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbm9kZS5zdGF0ZS5yZWFkQXJyYXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwiXVwiOlxuICAgICAgICAgICAgICAgIGlmICghbm9kZS5zdGF0ZS5yZWFkQXJyYXkpIHsgdGhyb3dFcnJvcihpKTsgfVxuXG4gICAgICAgICAgICAgICAgbm9kZS50eXBlICs9IGM7XG5cbiAgICAgICAgICAgICAgICBub2RlLnN0YXRlLnJlYWRBcnJheSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG5vZGUuc3RhdGUuYWxsb3dBcnJheSA9IHRydWU7XG4gICAgICAgICAgICAgICAgbm9kZS5zdGF0ZS5hbGxvd05hbWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmIChub2RlLnN0YXRlLmFsbG93VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLnR5cGUgKz0gYztcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5zdGF0ZS5hbGxvd1BhcmFtcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuc3RhdGUuYWxsb3dBcnJheSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLnN0YXRlLmFsbG93TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLm5hbWUgKz0gYztcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG5vZGUuc3RhdGUuYWxsb3dBcnJheTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUuc3RhdGUucmVhZEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUudHlwZSArPSBjO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3IoaSk7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobm9kZS5wYXJlbnQpIHsgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVuZXhwZWN0ZWQgZW9mXCIsIFwicGFyYW1cIiwgcGFyYW0pOyB9XG5cbiAgICBkZWxldGUgcGFyZW50LnN0YXRlO1xuXG4gICAgaWYgKG5vZGUubmFtZSA9PT0gXCJpbmRleGVkXCIpIHtcbiAgICAgICAgaWYgKCFhbGxvd0luZGV4ZWQpIHsgdGhyb3dFcnJvcihvcmlnaW5hbFBhcmFtLmxlbmd0aCAtIDcpOyB9XG4gICAgICAgIGlmIChub2RlLmluZGV4ZWQpIHsgdGhyb3dFcnJvcihvcmlnaW5hbFBhcmFtLmxlbmd0aCAtIDcpOyB9XG4gICAgICAgIG5vZGUuaW5kZXhlZCA9IHRydWU7XG4gICAgICAgIG5vZGUubmFtZSA9IFwiXCI7XG4gICAgfSBlbHNlIGlmIChjaGVja01vZGlmaWVyKG5vZGUudHlwZSwgbm9kZS5uYW1lKSkge1xuICAgICAgICBub2RlLm5hbWUgPSBcIlwiO1xuICAgIH1cblxuICAgIHBhcmVudC50eXBlID0gdmVyaWZ5VHlwZShwYXJlbnQudHlwZSk7XG5cbiAgICByZXR1cm4gcGFyZW50O1xufVxuXG5mdW5jdGlvbiBwb3B1bGF0ZShvYmplY3Q6IGFueSwgcGFyYW1zOiBhbnkpIHtcbiAgICBmb3IgKGxldCBrZXkgaW4gcGFyYW1zKSB7IGRlZmluZVJlYWRPbmx5KG9iamVjdCwga2V5LCBwYXJhbXNba2V5XSk7IH1cbn1cblxuZXhwb3J0IGNvbnN0IEZvcm1hdFR5cGVzOiB7IFsgbmFtZTogc3RyaW5nIF06IHN0cmluZyB9ID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgLy8gQmFyZSBmb3JtYXR0aW5nLCBhcyBpcyBuZWVkZWQgZm9yIGNvbXB1dGluZyBhIHNpZ2hhc2ggb2YgYW4gZXZlbnQgb3IgZnVuY3Rpb25cbiAgICBzaWdoYXNoOiBcInNpZ2hhc2hcIixcblxuICAgIC8vIEh1bWFuLVJlYWRhYmxlIHdpdGggTWluaW1hbCBzcGFjaW5nIGFuZCB3aXRob3V0IG5hbWVzIChjb21wYWN0IGh1bWFuLXJlYWRhYmxlKVxuICAgIG1pbmltYWw6IFwibWluaW1hbFwiLFxuXG4gICAgLy8gSHVtYW4tUmVhZGFibGUgd2l0aCBuaWNlIHNwYWNpbmcsIGluY2x1ZGluZyBhbGwgbmFtZXNcbiAgICBmdWxsOiBcImZ1bGxcIixcblxuICAgIC8vIEpTT04tZm9ybWF0IGEgbGEgU29saWRpdHlcbiAgICBqc29uOiBcImpzb25cIlxufSk7XG5cbmNvbnN0IHBhcmFtVHlwZUFycmF5ID0gbmV3IFJlZ0V4cCgvXiguKilcXFsoWzAtOV0qKVxcXSQvKTtcblxuZXhwb3J0IGNsYXNzIFBhcmFtVHlwZSB7XG5cbiAgICAvLyBUaGUgbG9jYWwgbmFtZSBvZiB0aGUgcGFyYW1ldGVyIChvZiBudWxsIGlmIHVuYm91bmQpXG4gICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuXG4gICAgLy8gVGhlIGZ1bGx5IHF1YWxpZmllZCB0eXBlIChlLmcuIFwiYWRkcmVzc1wiLCBcInR1cGxlKGFkZHJlc3MpXCIsIFwidWludDI1NlszXVtdXCJcbiAgICByZWFkb25seSB0eXBlOiBzdHJpbmc7XG5cbiAgICAvLyBUaGUgYmFzZSB0eXBlIChlLmcuIFwiYWRkcmVzc1wiLCBcInR1cGxlXCIsIFwiYXJyYXlcIilcbiAgICByZWFkb25seSBiYXNlVHlwZTogc3RyaW5nO1xuXG4gICAgLy8gSW5kZXhhYmxlIFBhcmFtdGVycyBPTkxZIChvdGhlcndpc2UgbnVsbClcbiAgICByZWFkb25seSBpbmRleGVkOiBib29sZWFuO1xuXG4gICAgLy8gVHVwbGVzIE9OTFk6IChvdGhlcndpc2UgbnVsbClcbiAgICAvLyAgLSBzdWItY29tcG9uZW50c1xuICAgIHJlYWRvbmx5IGNvbXBvbmVudHM6IEFycmF5PFBhcmFtVHlwZT47XG5cbiAgICAvLyBBcnJheXMgT05MWTogKG90aGVyd2lzZSBudWxsKVxuICAgIC8vICAtIGxlbmd0aCBvZiB0aGUgYXJyYXkgKC0xIGZvciBkeW5hbWljIGxlbmd0aClcbiAgICAvLyAgLSBjaGlsZCB0eXBlXG4gICAgcmVhZG9ubHkgYXJyYXlMZW5ndGg6IG51bWJlcjtcbiAgICByZWFkb25seSBhcnJheUNoaWxkcmVuOiBQYXJhbVR5cGU7XG5cbiAgICByZWFkb25seSBfaXNQYXJhbVR5cGU6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25zdHJ1Y3Rvckd1YXJkOiBhbnksIHBhcmFtczogYW55KSB7XG4gICAgICAgIGlmIChjb25zdHJ1Y3Rvckd1YXJkICE9PSBfY29uc3RydWN0b3JHdWFyZCkgeyBsb2dnZXIudGhyb3dFcnJvcihcInVzZSBmcm9tU3RyaW5nXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICBvcGVyYXRpb246IFwibmV3IFBhcmFtVHlwZSgpXCJcbiAgICAgICAgfSk7IH1cbiAgICAgICAgcG9wdWxhdGUodGhpcywgcGFyYW1zKTtcblxuICAgICAgICBsZXQgbWF0Y2ggPSB0aGlzLnR5cGUubWF0Y2gocGFyYW1UeXBlQXJyYXkpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHBvcHVsYXRlKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBhcnJheUxlbmd0aDogcGFyc2VJbnQobWF0Y2hbMl0gfHwgXCItMVwiKSxcbiAgICAgICAgICAgICAgICBhcnJheUNoaWxkcmVuOiBQYXJhbVR5cGUuZnJvbU9iamVjdCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IG1hdGNoWzFdLFxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRzOiB0aGlzLmNvbXBvbmVudHNcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBiYXNlVHlwZTogXCJhcnJheVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvcHVsYXRlKHRoaXMsIHtcbiAgICAgICAgICAgICAgICBhcnJheUxlbmd0aDogbnVsbCxcbiAgICAgICAgICAgICAgICBhcnJheUNoaWxkcmVuOiBudWxsLFxuICAgICAgICAgICAgICAgIGJhc2VUeXBlOiAoKHRoaXMuY29tcG9uZW50cyAhPSBudWxsKSA/IFwidHVwbGVcIjogdGhpcy50eXBlKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pc1BhcmFtVHlwZSA9IHRydWU7XG5cbiAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgICB9XG5cbiAgICAvLyBGb3JtYXQgdGhlIHBhcmFtZXRlciBmcmFnbWVudFxuICAgIC8vICAgLSBzaWdoYXNoOiBcIih1aW50MjU2LGFkZHJlc3MpXCJcbiAgICAvLyAgIC0gbWluaW1hbDogXCJ0dXBsZSh1aW50MjU2LGFkZHJlc3MpIGluZGV4ZWRcIlxuICAgIC8vICAgLSBmdWxsOiAgICBcInR1cGxlKHVpbnQyNTYgZm9vLCBhZGRyZXNzIGJhcikgaW5kZXhlZCBiYXpcIlxuICAgIGZvcm1hdChmb3JtYXQ/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAoIWZvcm1hdCkgeyBmb3JtYXQgPSBGb3JtYXRUeXBlcy5zaWdoYXNoOyB9XG4gICAgICAgIGlmICghRm9ybWF0VHlwZXNbZm9ybWF0XSkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZm9ybWF0IHR5cGVcIiwgXCJmb3JtYXRcIiwgZm9ybWF0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLmpzb24pIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ6IGFueSA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAoKHRoaXMuYmFzZVR5cGUgPT09IFwidHVwbGVcIikgPyBcInR1cGxlXCI6IHRoaXMudHlwZSksXG4gICAgICAgICAgICAgICAgbmFtZTogKHRoaXMubmFtZSB8fCB1bmRlZmluZWQpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHR5cGVvZih0aGlzLmluZGV4ZWQpID09PSBcImJvb2xlYW5cIikgeyByZXN1bHQuaW5kZXhlZCA9IHRoaXMuaW5kZXhlZDsgfVxuICAgICAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50cykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5jb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzLm1hcCgoY29tcCkgPT4gSlNPTi5wYXJzZShjb21wLmZvcm1hdChmb3JtYXQpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVzdWx0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXN1bHQgPSBcIlwiO1xuXG4gICAgICAgIC8vIEFycmF5XG4gICAgICAgIGlmICh0aGlzLmJhc2VUeXBlID09PSBcImFycmF5XCIpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSB0aGlzLmFycmF5Q2hpbGRyZW4uZm9ybWF0KGZvcm1hdCk7XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJbXCIgKyAodGhpcy5hcnJheUxlbmd0aCA8IDAgPyBcIlwiOiBTdHJpbmcodGhpcy5hcnJheUxlbmd0aCkpICsgXCJdXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5iYXNlVHlwZSA9PT0gXCJ0dXBsZVwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZvcm1hdCAhPT0gRm9ybWF0VHlwZXMuc2lnaGFzaCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdGhpcy50eXBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCIoXCIgKyB0aGlzLmNvbXBvbmVudHMubWFwKFxuICAgICAgICAgICAgICAgICAgICAoY29tcCkgPT4gY29tcC5mb3JtYXQoZm9ybWF0KVxuICAgICAgICAgICAgICAgICkuam9pbigoZm9ybWF0ID09PSBGb3JtYXRUeXBlcy5mdWxsKSA/IFwiLCBcIjogXCIsXCIpICsgXCIpXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB0aGlzLnR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZm9ybWF0ICE9PSBGb3JtYXRUeXBlcy5zaWdoYXNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pbmRleGVkID09PSB0cnVlKSB7IHJlc3VsdCArPSBcIiBpbmRleGVkXCI7IH1cbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLmZ1bGwgJiYgdGhpcy5uYW1lKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiIFwiICsgdGhpcy5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbSh2YWx1ZTogc3RyaW5nIHwgSnNvbkZyYWdtZW50VHlwZSB8IFBhcmFtVHlwZSwgYWxsb3dJbmRleGVkPzogYm9vbGVhbik6IFBhcmFtVHlwZSB7XG4gICAgICAgIGlmICh0eXBlb2YodmFsdWUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gUGFyYW1UeXBlLmZyb21TdHJpbmcodmFsdWUsIGFsbG93SW5kZXhlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFBhcmFtVHlwZS5mcm9tT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbU9iamVjdCh2YWx1ZTogSnNvbkZyYWdtZW50VHlwZSB8IFBhcmFtVHlwZSk6IFBhcmFtVHlwZSB7XG4gICAgICAgIGlmIChQYXJhbVR5cGUuaXNQYXJhbVR5cGUodmFsdWUpKSB7IHJldHVybiB2YWx1ZTsgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUGFyYW1UeXBlKF9jb25zdHJ1Y3Rvckd1YXJkLCB7XG4gICAgICAgICAgICBuYW1lOiAodmFsdWUubmFtZSB8fCBudWxsKSxcbiAgICAgICAgICAgIHR5cGU6IHZlcmlmeVR5cGUodmFsdWUudHlwZSksXG4gICAgICAgICAgICBpbmRleGVkOiAoKHZhbHVlLmluZGV4ZWQgPT0gbnVsbCkgPyBudWxsOiAhIXZhbHVlLmluZGV4ZWQpLFxuICAgICAgICAgICAgY29tcG9uZW50czogKHZhbHVlLmNvbXBvbmVudHMgPyB2YWx1ZS5jb21wb25lbnRzLm1hcChQYXJhbVR5cGUuZnJvbU9iamVjdCk6IG51bGwpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tU3RyaW5nKHZhbHVlOiBzdHJpbmcsIGFsbG93SW5kZXhlZD86IGJvb2xlYW4pOiBQYXJhbVR5cGUge1xuICAgICAgICBmdW5jdGlvbiBQYXJhbVR5cGlmeShub2RlOiBQYXJzZU5vZGUpOiBQYXJhbVR5cGUge1xuICAgICAgICAgICAgcmV0dXJuIFBhcmFtVHlwZS5mcm9tT2JqZWN0KHtcbiAgICAgICAgICAgICAgICBuYW1lOiBub2RlLm5hbWUsXG4gICAgICAgICAgICAgICAgdHlwZTogbm9kZS50eXBlLFxuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IG5vZGUuaW5kZXhlZCxcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBub2RlLmNvbXBvbmVudHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFBhcmFtVHlwaWZ5KHBhcnNlUGFyYW1UeXBlKHZhbHVlLCAhIWFsbG93SW5kZXhlZCkpO1xuICAgIH1cblxuICAgIHN0YXRpYyBpc1BhcmFtVHlwZSh2YWx1ZTogYW55KTogdmFsdWUgaXMgUGFyYW1UeXBlIHtcbiAgICAgICAgcmV0dXJuICEhKHZhbHVlICE9IG51bGwgJiYgdmFsdWUuX2lzUGFyYW1UeXBlKTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBwYXJzZVBhcmFtcyh2YWx1ZTogc3RyaW5nLCBhbGxvd0luZGV4OiBib29sZWFuKTogQXJyYXk8UGFyYW1UeXBlPiB7XG4gICAgcmV0dXJuIHNwbGl0TmVzdGluZyh2YWx1ZSkubWFwKChwYXJhbSkgPT4gUGFyYW1UeXBlLmZyb21TdHJpbmcocGFyYW0sIGFsbG93SW5kZXgpKTtcbn1cblxudHlwZSBUeXBlQ2hlY2s8VD4gPSB7IC1yZWFkb25seSBbIEsgaW4ga2V5b2YgVCBdOiBUW0tdIH07XG5cbmludGVyZmFjZSBfRnJhZ21lbnQge1xuICAgIHJlYWRvbmx5IHR5cGU6IHN0cmluZztcbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgaW5wdXRzOiBSZWFkb25seUFycmF5PFBhcmFtVHlwZT47XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGcmFnbWVudCB7XG5cbiAgICByZWFkb25seSB0eXBlOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGlucHV0czogQXJyYXk8UGFyYW1UeXBlPjtcblxuICAgIHJlYWRvbmx5IF9pc0ZyYWdtZW50OiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoY29uc3RydWN0b3JHdWFyZDogYW55LCBwYXJhbXM6IGFueSkge1xuICAgICAgICBpZiAoY29uc3RydWN0b3JHdWFyZCAhPT0gX2NvbnN0cnVjdG9yR3VhcmQpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwidXNlIGEgc3RhdGljIGZyb20gbWV0aG9kXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcIm5ldyBGcmFnbWVudCgpXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHBvcHVsYXRlKHRoaXMsIHBhcmFtcyk7XG5cbiAgICAgICAgdGhpcy5faXNGcmFnbWVudCA9IHRydWU7XG5cbiAgICAgICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgICB9XG5cbiAgICBhYnN0cmFjdCBmb3JtYXQoZm9ybWF0Pzogc3RyaW5nKTogc3RyaW5nO1xuXG4gICAgc3RhdGljIGZyb20odmFsdWU6IEZyYWdtZW50IHwgSnNvbkZyYWdtZW50IHwgc3RyaW5nKTogRnJhZ21lbnQge1xuICAgICAgICBpZiAoRnJhZ21lbnQuaXNGcmFnbWVudCh2YWx1ZSkpIHsgcmV0dXJuIHZhbHVlOyB9XG5cbiAgICAgICAgaWYgKHR5cGVvZih2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBGcmFnbWVudC5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBGcmFnbWVudC5mcm9tT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbU9iamVjdCh2YWx1ZTogRnJhZ21lbnQgfCBKc29uRnJhZ21lbnQpOiBGcmFnbWVudCB7XG4gICAgICAgIGlmIChGcmFnbWVudC5pc0ZyYWdtZW50KHZhbHVlKSkgeyByZXR1cm4gdmFsdWU7IH1cblxuICAgICAgICBzd2l0Y2ggKHZhbHVlLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbkZyYWdtZW50LmZyb21PYmplY3QodmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBcImV2ZW50XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEV2ZW50RnJhZ21lbnQuZnJvbU9iamVjdCh2YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIFwiY29uc3RydWN0b3JcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29uc3RydWN0b3JGcmFnbWVudC5mcm9tT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICAgIGNhc2UgXCJlcnJvclwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBFcnJvckZyYWdtZW50LmZyb21PYmplY3QodmFsdWUpO1xuICAgICAgICAgICAgY2FzZSBcImZhbGxiYWNrXCI6XG4gICAgICAgICAgICBjYXNlIFwicmVjZWl2ZVwiOlxuICAgICAgICAgICAgICAgIC8vIEBUT0RPOiBTb21ldGhpbmc/IE1heWJlIHJldHVybiBhIEZ1bmN0aW9uRnJhZ21lbnQ/IEEgY3VzdG9tIERlZmF1bHRGdW5jdGlvbkZyYWdtZW50P1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGZyYWdtZW50IG9iamVjdFwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVN0cmluZyh2YWx1ZTogc3RyaW5nKTogRnJhZ21lbnQge1xuICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIFwicmV0dXJuc1wiIGlzIHN1cnJvdW5kZWQgYnkgYSBzcGFjZSBhbmQgYWxsIHdoaXRlc3BhY2UgaXMgZXhhY3RseSBvbmUgc3BhY2VcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXHMvZywgXCIgXCIpO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcKC9nLCBcIiAoXCIpLnJlcGxhY2UoL1xcKS9nLCBcIikgXCIpLnJlcGxhY2UoL1xccysvZywgXCIgXCIpO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcblxuICAgICAgICBpZiAodmFsdWUuc3BsaXQoXCIgXCIpWzBdID09PSBcImV2ZW50XCIpIHtcbiAgICAgICAgICAgcmV0dXJuIEV2ZW50RnJhZ21lbnQuZnJvbVN0cmluZyh2YWx1ZS5zdWJzdHJpbmcoNSkudHJpbSgpKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5zcGxpdChcIiBcIilbMF0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uRnJhZ21lbnQuZnJvbVN0cmluZyh2YWx1ZS5zdWJzdHJpbmcoOCkudHJpbSgpKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5zcGxpdChcIihcIilbMF0udHJpbSgpID09PSBcImNvbnN0cnVjdG9yXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBDb25zdHJ1Y3RvckZyYWdtZW50LmZyb21TdHJpbmcodmFsdWUudHJpbSgpKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5zcGxpdChcIiBcIilbMF0gPT09IFwiZXJyb3JcIikge1xuICAgICAgICAgICByZXR1cm4gRXJyb3JGcmFnbWVudC5mcm9tU3RyaW5nKHZhbHVlLnN1YnN0cmluZyg1KS50cmltKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bnN1cHBvcnRlZCBmcmFnbWVudFwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXNGcmFnbWVudCh2YWx1ZTogYW55KTogdmFsdWUgaXMgRnJhZ21lbnQge1xuICAgICAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX2lzRnJhZ21lbnQpO1xuICAgIH1cbn1cblxuaW50ZXJmYWNlIF9FdmVudEZyYWdtZW50IGV4dGVuZHMgX0ZyYWdtZW50IHtcbiAgICByZWFkb25seSBhbm9ueW1vdXM6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBFdmVudEZyYWdtZW50IGV4dGVuZHMgRnJhZ21lbnQge1xuICAgIHJlYWRvbmx5IGFub255bW91czogYm9vbGVhbjtcblxuICAgIGZvcm1hdChmb3JtYXQ/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAoIWZvcm1hdCkgeyBmb3JtYXQgPSBGb3JtYXRUeXBlcy5zaWdoYXNoOyB9XG4gICAgICAgIGlmICghRm9ybWF0VHlwZXNbZm9ybWF0XSkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZm9ybWF0IHR5cGVcIiwgXCJmb3JtYXRcIiwgZm9ybWF0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLmpzb24pIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJldmVudFwiLFxuICAgICAgICAgICAgICAgIGFub255bW91czogdGhpcy5hbm9ueW1vdXMsXG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgICAgIGlucHV0czogdGhpcy5pbnB1dHMubWFwKChpbnB1dCkgPT4gSlNPTi5wYXJzZShpbnB1dC5mb3JtYXQoZm9ybWF0KSkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXN1bHQgPSBcIlwiO1xuXG4gICAgICAgIGlmIChmb3JtYXQgIT09IEZvcm1hdFR5cGVzLnNpZ2hhc2gpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBcImV2ZW50IFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0ICs9IHRoaXMubmFtZSArIFwiKFwiICsgdGhpcy5pbnB1dHMubWFwKFxuICAgICAgICAgICAgKGlucHV0KSA9PiBpbnB1dC5mb3JtYXQoZm9ybWF0KVxuICAgICAgICApLmpvaW4oKGZvcm1hdCA9PT0gRm9ybWF0VHlwZXMuZnVsbCkgPyBcIiwgXCI6IFwiLFwiKSArIFwiKSBcIjtcblxuICAgICAgICBpZiAoZm9ybWF0ICE9PSBGb3JtYXRUeXBlcy5zaWdoYXNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hbm9ueW1vdXMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCJhbm9ueW1vdXMgXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0LnRyaW0oKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbSh2YWx1ZTogRXZlbnRGcmFnbWVudCB8IEpzb25GcmFnbWVudCB8IHN0cmluZyk6IEV2ZW50RnJhZ21lbnQge1xuICAgICAgICBpZiAodHlwZW9mKHZhbHVlKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIEV2ZW50RnJhZ21lbnQuZnJvbVN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEV2ZW50RnJhZ21lbnQuZnJvbU9iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21PYmplY3QodmFsdWU6IEpzb25GcmFnbWVudCB8IEV2ZW50RnJhZ21lbnQpOiBFdmVudEZyYWdtZW50IHtcbiAgICAgICAgaWYgKEV2ZW50RnJhZ21lbnQuaXNFdmVudEZyYWdtZW50KHZhbHVlKSkgeyByZXR1cm4gdmFsdWU7IH1cblxuICAgICAgICBpZiAodmFsdWUudHlwZSAhPT0gXCJldmVudFwiKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBldmVudCBvYmplY3RcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXJhbXM6IFR5cGVDaGVjazxfRXZlbnRGcmFnbWVudD4gPSB7XG4gICAgICAgICAgICBuYW1lOiB2ZXJpZnlJZGVudGlmaWVyKHZhbHVlLm5hbWUpLFxuICAgICAgICAgICAgYW5vbnltb3VzOiB2YWx1ZS5hbm9ueW1vdXMsXG4gICAgICAgICAgICBpbnB1dHM6ICh2YWx1ZS5pbnB1dHMgPyB2YWx1ZS5pbnB1dHMubWFwKFBhcmFtVHlwZS5mcm9tT2JqZWN0KSA6IFtdKSxcbiAgICAgICAgICAgIHR5cGU6IFwiZXZlbnRcIlxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXcgRXZlbnRGcmFnbWVudChfY29uc3RydWN0b3JHdWFyZCwgcGFyYW1zKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVN0cmluZyh2YWx1ZTogc3RyaW5nKTogRXZlbnRGcmFnbWVudCB7XG5cbiAgICAgICAgbGV0IG1hdGNoID0gdmFsdWUubWF0Y2gocmVnZXhQYXJlbik7XG4gICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGV2ZW50IHN0cmluZ1wiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBhbm9ueW1vdXMgPSBmYWxzZTtcbiAgICAgICAgbWF0Y2hbM10uc3BsaXQoXCIgXCIpLmZvckVhY2goKG1vZGlmaWVyKSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2gobW9kaWZpZXIudHJpbSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImFub255bW91c1wiOlxuICAgICAgICAgICAgICAgICAgICBhbm9ueW1vdXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiXCI6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKFwidW5rbm93biBtb2RpZmllcjogXCIgKyBtb2RpZmllcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBFdmVudEZyYWdtZW50LmZyb21PYmplY3Qoe1xuICAgICAgICAgICAgbmFtZTogbWF0Y2hbMV0udHJpbSgpLFxuICAgICAgICAgICAgYW5vbnltb3VzOiBhbm9ueW1vdXMsXG4gICAgICAgICAgICBpbnB1dHM6IHBhcnNlUGFyYW1zKG1hdGNoWzJdLCB0cnVlKSxcbiAgICAgICAgICAgIHR5cGU6IFwiZXZlbnRcIlxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXNFdmVudEZyYWdtZW50KHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBFdmVudEZyYWdtZW50IHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZS5faXNGcmFnbWVudCAmJiB2YWx1ZS50eXBlID09PSBcImV2ZW50XCIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VHYXModmFsdWU6IHN0cmluZywgcGFyYW1zOiBhbnkpOiBzdHJpbmcge1xuICAgIHBhcmFtcy5nYXMgPSBudWxsO1xuXG4gICAgbGV0IGNvbXBzID0gdmFsdWUuc3BsaXQoXCJAXCIpO1xuICAgIGlmIChjb21wcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgaWYgKGNvbXBzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGh1bWFuLXJlYWRhYmxlIEFCSSBzaWduYXR1cmVcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjb21wc1sxXS5tYXRjaCgvXlswLTldKyQvKSkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgaHVtYW4tcmVhZGFibGUgQUJJIHNpZ25hdHVyZSBnYXNcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyYW1zLmdhcyA9IEJpZ051bWJlci5mcm9tKGNvbXBzWzFdKTtcbiAgICAgICAgcmV0dXJuIGNvbXBzWzBdO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNb2RpZmllcnModmFsdWU6IHN0cmluZywgcGFyYW1zOiBhbnkpOiB2b2lkIHtcbiAgICBwYXJhbXMuY29uc3RhbnQgPSBmYWxzZTtcbiAgICBwYXJhbXMucGF5YWJsZSA9IGZhbHNlO1xuICAgIHBhcmFtcy5zdGF0ZU11dGFiaWxpdHkgPSBcIm5vbnBheWFibGVcIjtcblxuICAgIHZhbHVlLnNwbGl0KFwiIFwiKS5mb3JFYWNoKChtb2RpZmllcikgPT4ge1xuICAgICAgICBzd2l0Y2ggKG1vZGlmaWVyLnRyaW0oKSkge1xuICAgICAgICAgICAgY2FzZSBcImNvbnN0YW50XCI6XG4gICAgICAgICAgICAgICAgcGFyYW1zLmNvbnN0YW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJwYXlhYmxlXCI6XG4gICAgICAgICAgICAgICAgcGFyYW1zLnBheWFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHBhcmFtcy5zdGF0ZU11dGFiaWxpdHkgPSBcInBheWFibGVcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJub25wYXlhYmxlXCI6XG4gICAgICAgICAgICAgICAgcGFyYW1zLnBheWFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBwYXJhbXMuc3RhdGVNdXRhYmlsaXR5ID0gXCJub25wYXlhYmxlXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicHVyZVwiOlxuICAgICAgICAgICAgICAgIHBhcmFtcy5jb25zdGFudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcGFyYW1zLnN0YXRlTXV0YWJpbGl0eSA9IFwicHVyZVwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInZpZXdcIjpcbiAgICAgICAgICAgICAgICBwYXJhbXMuY29uc3RhbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHBhcmFtcy5zdGF0ZU11dGFiaWxpdHkgPSBcInZpZXdcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJleHRlcm5hbFwiOlxuICAgICAgICAgICAgY2FzZSBcInB1YmxpY1wiOlxuICAgICAgICAgICAgY2FzZSBcIlwiOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInVua25vd24gbW9kaWZpZXI6IFwiICsgbW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbnR5cGUgU3RhdGVJbnB1dFZhbHVlID0ge1xuICAgIGNvbnN0YW50PzogYm9vbGVhbjtcbiAgICBwYXlhYmxlPzogYm9vbGVhbjtcbiAgICBzdGF0ZU11dGFiaWxpdHk/OiBzdHJpbmc7XG4gICAgdHlwZT86IHN0cmluZztcbn07XG5cbnR5cGUgU3RhdGVPdXRwdXRWYWx1ZSA9IHtcbiAgICBjb25zdGFudDogYm9vbGVhbjtcbiAgICBwYXlhYmxlOiBib29sZWFuO1xuICAgIHN0YXRlTXV0YWJpbGl0eTogc3RyaW5nO1xufTtcblxuZnVuY3Rpb24gdmVyaWZ5U3RhdGUodmFsdWU6IFN0YXRlSW5wdXRWYWx1ZSk6IFN0YXRlT3V0cHV0VmFsdWUge1xuICAgIGxldCByZXN1bHQ6IGFueSA9IHtcbiAgICAgICAgY29uc3RhbnQ6IGZhbHNlLFxuICAgICAgICBwYXlhYmxlOiB0cnVlLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwicGF5YWJsZVwiXG4gICAgfTtcblxuICAgIGlmICh2YWx1ZS5zdGF0ZU11dGFiaWxpdHkgIT0gbnVsbCkge1xuICAgICAgICByZXN1bHQuc3RhdGVNdXRhYmlsaXR5ID0gdmFsdWUuc3RhdGVNdXRhYmlsaXR5O1xuXG4gICAgICAgIC8vIFNldCAoYW5kIGNoZWNrIHRoaW5ncyBhcmUgY29uc2lzdGVudCkgdGhlIGNvbnN0YW50IHByb3BlcnR5XG4gICAgICAgIHJlc3VsdC5jb25zdGFudCA9IChyZXN1bHQuc3RhdGVNdXRhYmlsaXR5ID09PSBcInZpZXdcIiB8fCByZXN1bHQuc3RhdGVNdXRhYmlsaXR5ID09PSBcInB1cmVcIik7XG4gICAgICAgIGlmICh2YWx1ZS5jb25zdGFudCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoKCEhdmFsdWUuY29uc3RhbnQpICE9PSByZXN1bHQuY29uc3RhbnQpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiY2Fubm90IGhhdmUgY29uc3RhbnQgZnVuY3Rpb24gd2l0aCBtdXRhYmlsaXR5IFwiICsgcmVzdWx0LnN0YXRlTXV0YWJpbGl0eSwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgKGFuZCBjaGVjayB0aGluZ3MgYXJlIGNvbnNpc3RlbnQpIHRoZSBwYXlhYmxlIHByb3BlcnR5XG4gICAgICAgIHJlc3VsdC5wYXlhYmxlID0gKHJlc3VsdC5zdGF0ZU11dGFiaWxpdHkgPT09IFwicGF5YWJsZVwiKTtcbiAgICAgICAgaWYgKHZhbHVlLnBheWFibGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKCghIXZhbHVlLnBheWFibGUpICE9PSByZXN1bHQucGF5YWJsZSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJjYW5ub3QgaGF2ZSBwYXlhYmxlIGZ1bmN0aW9uIHdpdGggbXV0YWJpbGl0eSBcIiArIHJlc3VsdC5zdGF0ZU11dGFiaWxpdHksIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKHZhbHVlLnBheWFibGUgIT0gbnVsbCkge1xuICAgICAgICByZXN1bHQucGF5YWJsZSA9ICEhdmFsdWUucGF5YWJsZTtcblxuICAgICAgICAvLyBJZiBwYXlhYmxlIHdlIGNhbiBhc3N1bWUgbm9uLWNvbnN0YW50OyBvdGhlcndpc2Ugd2UgY2FuJ3QgYXNzdW1lXG4gICAgICAgIGlmICh2YWx1ZS5jb25zdGFudCA9PSBudWxsICYmICFyZXN1bHQucGF5YWJsZSAmJiB2YWx1ZS50eXBlICE9PSBcImNvbnN0cnVjdG9yXCIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bmFibGUgdG8gZGV0ZXJtaW5lIHN0YXRlTXV0YWJpbGl0eVwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdC5jb25zdGFudCA9ICEhdmFsdWUuY29uc3RhbnQ7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5jb25zdGFudCkge1xuICAgICAgICAgICAgcmVzdWx0LnN0YXRlTXV0YWJpbGl0eSA9IFwidmlld1wiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnN0YXRlTXV0YWJpbGl0eSA9IChyZXN1bHQucGF5YWJsZSA/IFwicGF5YWJsZVwiOiBcIm5vbnBheWFibGVcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVzdWx0LnBheWFibGUgJiYgcmVzdWx0LmNvbnN0YW50KSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiY2Fubm90IGhhdmUgY29uc3RhbnQgcGF5YWJsZSBmdW5jdGlvblwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgfSBlbHNlIGlmICh2YWx1ZS5jb25zdGFudCAhPSBudWxsKSB7XG4gICAgICAgIHJlc3VsdC5jb25zdGFudCA9ICEhdmFsdWUuY29uc3RhbnQ7XG4gICAgICAgIHJlc3VsdC5wYXlhYmxlID0gIXJlc3VsdC5jb25zdGFudDtcbiAgICAgICAgcmVzdWx0LnN0YXRlTXV0YWJpbGl0eSA9IChyZXN1bHQuY29uc3RhbnQgPyBcInZpZXdcIjogXCJwYXlhYmxlXCIpO1xuXG4gICAgfSBlbHNlIGlmICh2YWx1ZS50eXBlICE9PSBcImNvbnN0cnVjdG9yXCIpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVuYWJsZSB0byBkZXRlcm1pbmUgc3RhdGVNdXRhYmlsaXR5XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmludGVyZmFjZSBfQ29uc3RydWN0b3JGcmFnbWVudCBleHRlbmRzIF9GcmFnbWVudCB7XG4gICAgc3RhdGVNdXRhYmlsaXR5OiBzdHJpbmc7XG4gICAgcGF5YWJsZTogYm9vbGVhbjtcbiAgICBnYXM/OiBCaWdOdW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBDb25zdHJ1Y3RvckZyYWdtZW50IGV4dGVuZHMgRnJhZ21lbnQge1xuICAgIHN0YXRlTXV0YWJpbGl0eTogc3RyaW5nO1xuICAgIHBheWFibGU6IGJvb2xlYW47XG4gICAgZ2FzPzogQmlnTnVtYmVyO1xuXG4gICAgZm9ybWF0KGZvcm1hdD86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGlmICghZm9ybWF0KSB7IGZvcm1hdCA9IEZvcm1hdFR5cGVzLnNpZ2hhc2g7IH1cbiAgICAgICAgaWYgKCFGb3JtYXRUeXBlc1tmb3JtYXRdKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmb3JtYXQgdHlwZVwiLCBcImZvcm1hdFwiLCBmb3JtYXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gRm9ybWF0VHlwZXMuanNvbikge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImNvbnN0cnVjdG9yXCIsXG4gICAgICAgICAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiAoKHRoaXMuc3RhdGVNdXRhYmlsaXR5ICE9PSBcIm5vbnBheWFibGVcIikgPyB0aGlzLnN0YXRlTXV0YWJpbGl0eTogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICBwYXlhYmxlOiB0aGlzLnBheWFibGUsXG4gICAgICAgICAgICAgICAgZ2FzOiAodGhpcy5nYXMgPyB0aGlzLmdhcy50b051bWJlcigpOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgIGlucHV0czogdGhpcy5pbnB1dHMubWFwKChpbnB1dCkgPT4gSlNPTi5wYXJzZShpbnB1dC5mb3JtYXQoZm9ybWF0KSkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLnNpZ2hhc2gpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiY2Fubm90IGZvcm1hdCBhIGNvbnN0cnVjdG9yIGZvciBzaWdoYXNoXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcImZvcm1hdChzaWdoYXNoKVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXN1bHQgPSBcImNvbnN0cnVjdG9yKFwiICsgdGhpcy5pbnB1dHMubWFwKFxuICAgICAgICAgICAgKGlucHV0KSA9PiBpbnB1dC5mb3JtYXQoZm9ybWF0KVxuICAgICAgICApLmpvaW4oKGZvcm1hdCA9PT0gRm9ybWF0VHlwZXMuZnVsbCkgPyBcIiwgXCI6IFwiLFwiKSArIFwiKSBcIjtcblxuICAgICAgICBpZiAodGhpcy5zdGF0ZU11dGFiaWxpdHkgJiYgdGhpcy5zdGF0ZU11dGFiaWxpdHkgIT09IFwibm9ucGF5YWJsZVwiKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gdGhpcy5zdGF0ZU11dGFiaWxpdHkgKyBcIiBcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQudHJpbSgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tKHZhbHVlOiBDb25zdHJ1Y3RvckZyYWdtZW50IHwgSnNvbkZyYWdtZW50IHwgc3RyaW5nKTogQ29uc3RydWN0b3JGcmFnbWVudCB7XG4gICAgICAgIGlmICh0eXBlb2YodmFsdWUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gQ29uc3RydWN0b3JGcmFnbWVudC5mcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQ29uc3RydWN0b3JGcmFnbWVudC5mcm9tT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbU9iamVjdCh2YWx1ZTogQ29uc3RydWN0b3JGcmFnbWVudCB8IEpzb25GcmFnbWVudCk6IENvbnN0cnVjdG9yRnJhZ21lbnQge1xuICAgICAgICBpZiAoQ29uc3RydWN0b3JGcmFnbWVudC5pc0NvbnN0cnVjdG9yRnJhZ21lbnQodmFsdWUpKSB7IHJldHVybiB2YWx1ZTsgfVxuXG4gICAgICAgIGlmICh2YWx1ZS50eXBlICE9PSBcImNvbnN0cnVjdG9yXCIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGNvbnN0cnVjdG9yIG9iamVjdFwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzdGF0ZSA9IHZlcmlmeVN0YXRlKHZhbHVlKTtcbiAgICAgICAgaWYgKHN0YXRlLmNvbnN0YW50KSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiY29uc3RydWN0b3IgY2Fubm90IGJlIGNvbnN0YW50XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFyYW1zOiBUeXBlQ2hlY2s8X0NvbnN0cnVjdG9yRnJhZ21lbnQ+ID0ge1xuICAgICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6IHZhbHVlLnR5cGUsXG4gICAgICAgICAgICBpbnB1dHM6ICh2YWx1ZS5pbnB1dHMgPyB2YWx1ZS5pbnB1dHMubWFwKFBhcmFtVHlwZS5mcm9tT2JqZWN0KTogW10pLFxuICAgICAgICAgICAgcGF5YWJsZTogc3RhdGUucGF5YWJsZSxcbiAgICAgICAgICAgIHN0YXRlTXV0YWJpbGl0eTogc3RhdGUuc3RhdGVNdXRhYmlsaXR5LFxuICAgICAgICAgICAgZ2FzOiAodmFsdWUuZ2FzID8gQmlnTnVtYmVyLmZyb20odmFsdWUuZ2FzKTogbnVsbClcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yRnJhZ21lbnQoX2NvbnN0cnVjdG9yR3VhcmQsIHBhcmFtcyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21TdHJpbmcodmFsdWU6IHN0cmluZyk6IENvbnN0cnVjdG9yRnJhZ21lbnQge1xuICAgICAgICBsZXQgcGFyYW1zOiBhbnkgPSB7IHR5cGU6IFwiY29uc3RydWN0b3JcIiB9O1xuXG4gICAgICAgIHZhbHVlID0gcGFyc2VHYXModmFsdWUsIHBhcmFtcyk7XG5cbiAgICAgICAgbGV0IHBhcmVucyA9IHZhbHVlLm1hdGNoKHJlZ2V4UGFyZW4pO1xuICAgICAgICBpZiAoIXBhcmVucyB8fCBwYXJlbnNbMV0udHJpbSgpICE9PSBcImNvbnN0cnVjdG9yXCIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGNvbnN0cnVjdG9yIHN0cmluZ1wiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmFtcy5pbnB1dHMgPSBwYXJzZVBhcmFtcyhwYXJlbnNbMl0udHJpbSgpLCBmYWxzZSk7XG5cbiAgICAgICAgcGFyc2VNb2RpZmllcnMocGFyZW5zWzNdLnRyaW0oKSwgcGFyYW1zKTtcblxuICAgICAgICByZXR1cm4gQ29uc3RydWN0b3JGcmFnbWVudC5mcm9tT2JqZWN0KHBhcmFtcyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGlzQ29uc3RydWN0b3JGcmFnbWVudCh2YWx1ZTogYW55KTogdmFsdWUgaXMgQ29uc3RydWN0b3JGcmFnbWVudCB7XG4gICAgICAgIHJldHVybiAodmFsdWUgJiYgdmFsdWUuX2lzRnJhZ21lbnQgJiYgdmFsdWUudHlwZSA9PT0gXCJjb25zdHJ1Y3RvclwiKTtcbiAgICB9XG59XG5cbmludGVyZmFjZSBfRnVuY3Rpb25GcmFnbWVudCBleHRlbmRzIF9Db25zdHJ1Y3RvckZyYWdtZW50IHtcbiAgICBjb25zdGFudDogYm9vbGVhbjtcbiAgICBvdXRwdXRzPzogQXJyYXk8UGFyYW1UeXBlPjtcbn1cblxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uRnJhZ21lbnQgZXh0ZW5kcyBDb25zdHJ1Y3RvckZyYWdtZW50IHtcbiAgICBjb25zdGFudDogYm9vbGVhbjtcbiAgICBvdXRwdXRzPzogQXJyYXk8UGFyYW1UeXBlPjtcblxuICAgIGZvcm1hdChmb3JtYXQ/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAoIWZvcm1hdCkgeyBmb3JtYXQgPSBGb3JtYXRUeXBlcy5zaWdoYXNoOyB9XG4gICAgICAgIGlmICghRm9ybWF0VHlwZXNbZm9ybWF0XSkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZm9ybWF0IHR5cGVcIiwgXCJmb3JtYXRcIiwgZm9ybWF0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLmpzb24pIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICBjb25zdGFudDogdGhpcy5jb25zdGFudCxcbiAgICAgICAgICAgICAgICBzdGF0ZU11dGFiaWxpdHk6ICgodGhpcy5zdGF0ZU11dGFiaWxpdHkgIT09IFwibm9ucGF5YWJsZVwiKSA/IHRoaXMuc3RhdGVNdXRhYmlsaXR5OiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgIHBheWFibGU6IHRoaXMucGF5YWJsZSxcbiAgICAgICAgICAgICAgICBnYXM6ICh0aGlzLmdhcyA/IHRoaXMuZ2FzLnRvTnVtYmVyKCk6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgaW5wdXRzOiB0aGlzLmlucHV0cy5tYXAoKGlucHV0KSA9PiBKU09OLnBhcnNlKGlucHV0LmZvcm1hdChmb3JtYXQpKSksXG4gICAgICAgICAgICAgICAgb3V0cHV0czogdGhpcy5vdXRwdXRzLm1hcCgob3V0cHV0KSA9PiBKU09OLnBhcnNlKG91dHB1dC5mb3JtYXQoZm9ybWF0KSkpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzdWx0ID0gXCJcIjtcblxuICAgICAgICBpZiAoZm9ybWF0ICE9PSBGb3JtYXRUeXBlcy5zaWdoYXNoKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJmdW5jdGlvbiBcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdCArPSB0aGlzLm5hbWUgKyBcIihcIiArIHRoaXMuaW5wdXRzLm1hcChcbiAgICAgICAgICAgIChpbnB1dCkgPT4gaW5wdXQuZm9ybWF0KGZvcm1hdClcbiAgICAgICAgKS5qb2luKChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLmZ1bGwpID8gXCIsIFwiOiBcIixcIikgKyBcIikgXCI7XG5cbiAgICAgICAgaWYgKGZvcm1hdCAhPT0gRm9ybWF0VHlwZXMuc2lnaGFzaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGVNdXRhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGVNdXRhYmlsaXR5ICE9PSBcIm5vbnBheWFibGVcIikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gKHRoaXMuc3RhdGVNdXRhYmlsaXR5ICsgXCIgXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb25zdGFudCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcInZpZXcgXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm91dHB1dHMgJiYgdGhpcy5vdXRwdXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcInJldHVybnMgKFwiICsgdGhpcy5vdXRwdXRzLm1hcChcbiAgICAgICAgICAgICAgICAgICAgKG91dHB1dCkgPT4gb3V0cHV0LmZvcm1hdChmb3JtYXQpXG4gICAgICAgICAgICAgICAgKS5qb2luKFwiLCBcIikgKyBcIikgXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmdhcyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiQFwiICsgdGhpcy5nYXMudG9TdHJpbmcoKSArIFwiIFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdC50cmltKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb20odmFsdWU6IEZ1bmN0aW9uRnJhZ21lbnQgfCBKc29uRnJhZ21lbnQgfCBzdHJpbmcpOiBGdW5jdGlvbkZyYWdtZW50IHtcbiAgICAgICAgaWYgKHR5cGVvZih2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbkZyYWdtZW50LmZyb21TdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBGdW5jdGlvbkZyYWdtZW50LmZyb21PYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tT2JqZWN0KHZhbHVlOiBGdW5jdGlvbkZyYWdtZW50IHwgSnNvbkZyYWdtZW50KTogRnVuY3Rpb25GcmFnbWVudCB7XG4gICAgICAgIGlmIChGdW5jdGlvbkZyYWdtZW50LmlzRnVuY3Rpb25GcmFnbWVudCh2YWx1ZSkpIHsgcmV0dXJuIHZhbHVlOyB9XG5cbiAgICAgICAgaWYgKHZhbHVlLnR5cGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZnVuY3Rpb24gb2JqZWN0XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHN0YXRlID0gdmVyaWZ5U3RhdGUodmFsdWUpO1xuXG4gICAgICAgIGNvbnN0IHBhcmFtczogVHlwZUNoZWNrPF9GdW5jdGlvbkZyYWdtZW50PiA9IHtcbiAgICAgICAgICAgIHR5cGU6IHZhbHVlLnR5cGUsXG4gICAgICAgICAgICBuYW1lOiB2ZXJpZnlJZGVudGlmaWVyKHZhbHVlLm5hbWUpLFxuICAgICAgICAgICAgY29uc3RhbnQ6IHN0YXRlLmNvbnN0YW50LFxuICAgICAgICAgICAgaW5wdXRzOiAodmFsdWUuaW5wdXRzID8gdmFsdWUuaW5wdXRzLm1hcChQYXJhbVR5cGUuZnJvbU9iamVjdCk6IFtdKSxcbiAgICAgICAgICAgIG91dHB1dHM6ICh2YWx1ZS5vdXRwdXRzID8gdmFsdWUub3V0cHV0cy5tYXAoUGFyYW1UeXBlLmZyb21PYmplY3QpOiBbIF0pLFxuICAgICAgICAgICAgcGF5YWJsZTogc3RhdGUucGF5YWJsZSxcbiAgICAgICAgICAgIHN0YXRlTXV0YWJpbGl0eTogc3RhdGUuc3RhdGVNdXRhYmlsaXR5LFxuICAgICAgICAgICAgZ2FzOiAodmFsdWUuZ2FzID8gQmlnTnVtYmVyLmZyb20odmFsdWUuZ2FzKTogbnVsbClcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uRnJhZ21lbnQoX2NvbnN0cnVjdG9yR3VhcmQsIHBhcmFtcyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21TdHJpbmcodmFsdWU6IHN0cmluZyk6IEZ1bmN0aW9uRnJhZ21lbnQge1xuICAgICAgICBsZXQgcGFyYW1zOiBhbnkgPSB7IHR5cGU6IFwiZnVuY3Rpb25cIiB9O1xuICAgICAgICB2YWx1ZSA9IHBhcnNlR2FzKHZhbHVlLCBwYXJhbXMpO1xuXG4gICAgICAgIGxldCBjb21wcyA9IHZhbHVlLnNwbGl0KFwiIHJldHVybnMgXCIpO1xuICAgICAgICBpZiAoY29tcHMubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZnVuY3Rpb24gc3RyaW5nXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBhcmVucyA9IGNvbXBzWzBdLm1hdGNoKHJlZ2V4UGFyZW4pO1xuICAgICAgICBpZiAoIXBhcmVucykge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZnVuY3Rpb24gc2lnbmF0dXJlXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyYW1zLm5hbWUgPSBwYXJlbnNbMV0udHJpbSgpO1xuICAgICAgICBpZiAocGFyYW1zLm5hbWUpIHsgdmVyaWZ5SWRlbnRpZmllcihwYXJhbXMubmFtZSk7IH1cblxuICAgICAgICBwYXJhbXMuaW5wdXRzID0gcGFyc2VQYXJhbXMocGFyZW5zWzJdLCBmYWxzZSk7XG5cbiAgICAgICAgcGFyc2VNb2RpZmllcnMocGFyZW5zWzNdLnRyaW0oKSwgcGFyYW1zKTtcblxuICAgICAgICAvLyBXZSBoYXZlIG91dHB1dHNcbiAgICAgICAgaWYgKGNvbXBzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgbGV0IHJldHVybnMgPSBjb21wc1sxXS5tYXRjaChyZWdleFBhcmVuKTtcbiAgICAgICAgICAgIGlmIChyZXR1cm5zWzFdLnRyaW0oKSAhPSBcIlwiIHx8IHJldHVybnNbM10udHJpbSgpICE9IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidW5leHBlY3RlZCB0b2tlbnNcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJhbXMub3V0cHV0cyA9IHBhcnNlUGFyYW1zKHJldHVybnNbMl0sIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcmFtcy5vdXRwdXRzID0gWyBdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uRnJhZ21lbnQuZnJvbU9iamVjdChwYXJhbXMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBpc0Z1bmN0aW9uRnJhZ21lbnQodmFsdWU6IGFueSk6IHZhbHVlIGlzIEZ1bmN0aW9uRnJhZ21lbnQge1xuICAgICAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlLl9pc0ZyYWdtZW50ICYmIHZhbHVlLnR5cGUgPT09IFwiZnVuY3Rpb25cIik7XG4gICAgfVxufVxuXG4vL2V4cG9ydCBjbGFzcyBTdHJ1Y3RGcmFnbWVudCBleHRlbmRzIEZyYWdtZW50IHtcbi8vfVxuXG5mdW5jdGlvbiBjaGVja0ZvcmJpZGRlbihmcmFnbWVudDogRXJyb3JGcmFnbWVudCk6IEVycm9yRnJhZ21lbnQge1xuICAgIGNvbnN0IHNpZyA9IGZyYWdtZW50LmZvcm1hdCgpO1xuICAgIGlmIChzaWcgPT09IFwiRXJyb3Ioc3RyaW5nKVwiIHx8IHNpZyA9PT0gXCJQYW5pYyh1aW50MjU2KVwiKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGNhbm5vdCBzcGVjaWZ5IHVzZXIgZGVmaW5lZCAkeyBzaWcgfSBlcnJvcmAsIFwiZnJhZ21lbnRcIiwgZnJhZ21lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gZnJhZ21lbnQ7XG59XG5cbmV4cG9ydCBjbGFzcyBFcnJvckZyYWdtZW50IGV4dGVuZHMgRnJhZ21lbnQge1xuXG4gICAgZm9ybWF0KGZvcm1hdD86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGlmICghZm9ybWF0KSB7IGZvcm1hdCA9IEZvcm1hdFR5cGVzLnNpZ2hhc2g7IH1cbiAgICAgICAgaWYgKCFGb3JtYXRUeXBlc1tmb3JtYXRdKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBmb3JtYXQgdHlwZVwiLCBcImZvcm1hdFwiLCBmb3JtYXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gRm9ybWF0VHlwZXMuanNvbikge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImVycm9yXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgICAgIGlucHV0czogdGhpcy5pbnB1dHMubWFwKChpbnB1dCkgPT4gSlNPTi5wYXJzZShpbnB1dC5mb3JtYXQoZm9ybWF0KSkpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzdWx0ID0gXCJcIjtcblxuICAgICAgICBpZiAoZm9ybWF0ICE9PSBGb3JtYXRUeXBlcy5zaWdoYXNoKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJlcnJvciBcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdCArPSB0aGlzLm5hbWUgKyBcIihcIiArIHRoaXMuaW5wdXRzLm1hcChcbiAgICAgICAgICAgIChpbnB1dCkgPT4gaW5wdXQuZm9ybWF0KGZvcm1hdClcbiAgICAgICAgKS5qb2luKChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLmZ1bGwpID8gXCIsIFwiOiBcIixcIikgKyBcIikgXCI7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdC50cmltKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb20odmFsdWU6IEVycm9yRnJhZ21lbnQgfCBKc29uRnJhZ21lbnQgfCBzdHJpbmcpOiBFcnJvckZyYWdtZW50IHtcbiAgICAgICAgaWYgKHR5cGVvZih2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBFcnJvckZyYWdtZW50LmZyb21TdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBFcnJvckZyYWdtZW50LmZyb21PYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tT2JqZWN0KHZhbHVlOiBFcnJvckZyYWdtZW50IHwgSnNvbkZyYWdtZW50KTogRXJyb3JGcmFnbWVudCB7XG4gICAgICAgIGlmIChFcnJvckZyYWdtZW50LmlzRXJyb3JGcmFnbWVudCh2YWx1ZSkpIHsgcmV0dXJuIHZhbHVlOyB9XG5cbiAgICAgICAgaWYgKHZhbHVlLnR5cGUgIT09IFwiZXJyb3JcIikge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZXJyb3Igb2JqZWN0XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFyYW1zOiBUeXBlQ2hlY2s8X0ZyYWdtZW50PiA9IHtcbiAgICAgICAgICAgIHR5cGU6IHZhbHVlLnR5cGUsXG4gICAgICAgICAgICBuYW1lOiB2ZXJpZnlJZGVudGlmaWVyKHZhbHVlLm5hbWUpLFxuICAgICAgICAgICAgaW5wdXRzOiAodmFsdWUuaW5wdXRzID8gdmFsdWUuaW5wdXRzLm1hcChQYXJhbVR5cGUuZnJvbU9iamVjdCk6IFtdKVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBjaGVja0ZvcmJpZGRlbihuZXcgRXJyb3JGcmFnbWVudChfY29uc3RydWN0b3JHdWFyZCwgcGFyYW1zKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21TdHJpbmcodmFsdWU6IHN0cmluZyk6IEVycm9yRnJhZ21lbnQge1xuICAgICAgICBsZXQgcGFyYW1zOiBhbnkgPSB7IHR5cGU6IFwiZXJyb3JcIiB9O1xuXG4gICAgICAgIGxldCBwYXJlbnMgPSB2YWx1ZS5tYXRjaChyZWdleFBhcmVuKTtcbiAgICAgICAgaWYgKCFwYXJlbnMpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGVycm9yIHNpZ25hdHVyZVwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmFtcy5uYW1lID0gcGFyZW5zWzFdLnRyaW0oKTtcbiAgICAgICAgaWYgKHBhcmFtcy5uYW1lKSB7IHZlcmlmeUlkZW50aWZpZXIocGFyYW1zLm5hbWUpOyB9XG5cbiAgICAgICAgcGFyYW1zLmlucHV0cyA9IHBhcnNlUGFyYW1zKHBhcmVuc1syXSwgZmFsc2UpO1xuXG4gICAgICAgIHJldHVybiBjaGVja0ZvcmJpZGRlbihFcnJvckZyYWdtZW50LmZyb21PYmplY3QocGFyYW1zKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGlzRXJyb3JGcmFnbWVudCh2YWx1ZTogYW55KTogdmFsdWUgaXMgRXJyb3JGcmFnbWVudCB7XG4gICAgICAgIHJldHVybiAodmFsdWUgJiYgdmFsdWUuX2lzRnJhZ21lbnQgJiYgdmFsdWUudHlwZSA9PT0gXCJlcnJvclwiKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHZlcmlmeVR5cGUodHlwZTogc3RyaW5nKTogc3RyaW5nIHtcblxuICAgIC8vIFRoZXNlIG5lZWQgdG8gYmUgdHJhbnNmb3JtZWQgdG8gdGhlaXIgZnVsbCBkZXNjcmlwdGlvblxuICAgIGlmICh0eXBlLm1hdGNoKC9edWludCgkfFteMS05XSkvKSkge1xuICAgICAgICB0eXBlID0gXCJ1aW50MjU2XCIgKyB0eXBlLnN1YnN0cmluZyg0KTtcbiAgICB9IGVsc2UgaWYgKHR5cGUubWF0Y2goL15pbnQoJHxbXjEtOV0pLykpIHtcbiAgICAgICAgdHlwZSA9IFwiaW50MjU2XCIgKyB0eXBlLnN1YnN0cmluZygzKTtcbiAgICB9XG5cbiAgICAvLyBAVE9ETzogbW9yZSB2ZXJpZmljYXRpb25cblxuICAgIHJldHVybiB0eXBlO1xufVxuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9zb2xpZGl0eS9ibG9iLzFmOGYxYTNkYjkzYTU0OGQwNTU1ZTNlMTRjZmM1NWExMGUyNWI2MGUvZG9jcy9ncmFtbWFyL1NvbGlkaXR5TGV4ZXIuZzQjTDIzNFxuY29uc3QgcmVnZXhJZGVudGlmaWVyID0gbmV3IFJlZ0V4cChcIl5bYS16QS1aJF9dW2EtekEtWjAtOSRfXSokXCIpO1xuZnVuY3Rpb24gdmVyaWZ5SWRlbnRpZmllcih2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAoIXZhbHVlIHx8ICF2YWx1ZS5tYXRjaChyZWdleElkZW50aWZpZXIpKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGludmFsaWQgaWRlbnRpZmllciBcIiR7IHZhbHVlIH1cImAsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbmNvbnN0IHJlZ2V4UGFyZW4gPSBuZXcgUmVnRXhwKFwiXihbXikoXSopXFxcXCgoLiopXFxcXCkoW14pKF0qKSRcIik7XG5cbmZ1bmN0aW9uIHNwbGl0TmVzdGluZyh2YWx1ZTogc3RyaW5nKTogQXJyYXk8YW55PiB7XG4gICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XG5cbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgbGV0IGFjY3VtID0gXCJcIjtcbiAgICBsZXQgZGVwdGggPSAwO1xuICAgIGZvciAobGV0IG9mZnNldCA9IDA7IG9mZnNldCA8IHZhbHVlLmxlbmd0aDsgb2Zmc2V0KyspIHtcbiAgICAgICAgbGV0IGMgPSB2YWx1ZVtvZmZzZXRdO1xuICAgICAgICBpZiAoYyA9PT0gXCIsXCIgJiYgZGVwdGggPT09IDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFjY3VtKTtcbiAgICAgICAgICAgIGFjY3VtID0gXCJcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjY3VtICs9IGM7XG4gICAgICAgICAgICBpZiAoYyA9PT0gXCIoXCIpIHtcbiAgICAgICAgICAgICAgICBkZXB0aCsrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjID09PSBcIilcIikge1xuICAgICAgICAgICAgICAgIGRlcHRoLS07XG4gICAgICAgICAgICAgICAgaWYgKGRlcHRoID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidW5iYWxhbmNlZCBwYXJlbnRoZXNpc1wiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFjY3VtKSB7IHJlc3VsdC5wdXNoKGFjY3VtKTsgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dpa2kvd2lraS9FdGhlcmV1bS1Db250cmFjdC1BQklcblxuaW1wb3J0IHsgYXJyYXlpZnksIEJ5dGVzTGlrZSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgZGVmaW5lUmVhZE9ubHkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiO1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5cbmltcG9ydCB7IENvZGVyLCBSZWFkZXIsIFJlc3VsdCwgV3JpdGVyIH0gZnJvbSBcIi4vY29kZXJzL2Fic3RyYWN0LWNvZGVyXCI7XG5pbXBvcnQgeyBBZGRyZXNzQ29kZXIgfSBmcm9tIFwiLi9jb2RlcnMvYWRkcmVzc1wiO1xuaW1wb3J0IHsgQXJyYXlDb2RlciB9IGZyb20gXCIuL2NvZGVycy9hcnJheVwiO1xuaW1wb3J0IHsgQm9vbGVhbkNvZGVyIH0gZnJvbSBcIi4vY29kZXJzL2Jvb2xlYW5cIjtcbmltcG9ydCB7IEJ5dGVzQ29kZXIgfSBmcm9tIFwiLi9jb2RlcnMvYnl0ZXNcIjtcbmltcG9ydCB7IEZpeGVkQnl0ZXNDb2RlciB9IGZyb20gXCIuL2NvZGVycy9maXhlZC1ieXRlc1wiO1xuaW1wb3J0IHsgTnVsbENvZGVyIH0gZnJvbSBcIi4vY29kZXJzL251bGxcIjtcbmltcG9ydCB7IE51bWJlckNvZGVyIH0gZnJvbSBcIi4vY29kZXJzL251bWJlclwiO1xuaW1wb3J0IHsgU3RyaW5nQ29kZXIgfSBmcm9tIFwiLi9jb2RlcnMvc3RyaW5nXCI7XG5pbXBvcnQgeyBUdXBsZUNvZGVyIH0gZnJvbSBcIi4vY29kZXJzL3R1cGxlXCI7XG5cbmltcG9ydCB7IFBhcmFtVHlwZSB9IGZyb20gXCIuL2ZyYWdtZW50c1wiO1xuXG5cbmNvbnN0IHBhcmFtVHlwZUJ5dGVzID0gbmV3IFJlZ0V4cCgvXmJ5dGVzKFswLTldKikkLyk7XG5jb25zdCBwYXJhbVR5cGVOdW1iZXIgPSBuZXcgUmVnRXhwKC9eKHU/aW50KShbMC05XSopJC8pO1xuXG5cbmV4cG9ydCB0eXBlIENvZXJjZUZ1bmMgPSAodHlwZTogc3RyaW5nLCB2YWx1ZTogYW55KSA9PiBhbnk7XG5cbmV4cG9ydCBjbGFzcyBBYmlDb2RlciB7XG4gICAgcmVhZG9ubHkgY29lcmNlRnVuYzogQ29lcmNlRnVuYztcblxuICAgIGNvbnN0cnVjdG9yKGNvZXJjZUZ1bmM/OiBDb2VyY2VGdW5jKSB7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiY29lcmNlRnVuY1wiLCBjb2VyY2VGdW5jIHx8IG51bGwpO1xuICAgIH1cblxuICAgIF9nZXRDb2RlcihwYXJhbTogUGFyYW1UeXBlKTogQ29kZXIge1xuXG4gICAgICAgIHN3aXRjaCAocGFyYW0uYmFzZVR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJhZGRyZXNzXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBZGRyZXNzQ29kZXIocGFyYW0ubmFtZSk7XG4gICAgICAgICAgICBjYXNlIFwiYm9vbFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQm9vbGVhbkNvZGVyKHBhcmFtLm5hbWUpO1xuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU3RyaW5nQ29kZXIocGFyYW0ubmFtZSk7XG4gICAgICAgICAgICBjYXNlIFwiYnl0ZXNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEJ5dGVzQ29kZXIocGFyYW0ubmFtZSk7XG4gICAgICAgICAgICBjYXNlIFwiYXJyYXlcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFycmF5Q29kZXIodGhpcy5fZ2V0Q29kZXIocGFyYW0uYXJyYXlDaGlsZHJlbiksIHBhcmFtLmFycmF5TGVuZ3RoLCBwYXJhbS5uYW1lKTtcbiAgICAgICAgICAgIGNhc2UgXCJ0dXBsZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVHVwbGVDb2RlcigocGFyYW0uY29tcG9uZW50cyB8fCBbXSkubWFwKChjb21wb25lbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldENvZGVyKGNvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgfSksIHBhcmFtLm5hbWUpO1xuICAgICAgICAgICAgY2FzZSBcIlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTnVsbENvZGVyKHBhcmFtLm5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdT9pbnRbMC05XSpcbiAgICAgICAgbGV0IG1hdGNoID0gcGFyYW0udHlwZS5tYXRjaChwYXJhbVR5cGVOdW1iZXIpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGxldCBzaXplID0gcGFyc2VJbnQobWF0Y2hbMl0gfHwgXCIyNTZcIik7XG4gICAgICAgICAgICBpZiAoc2l6ZSA9PT0gMCB8fCBzaXplID4gMjU2IHx8IChzaXplICUgOCkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBcIiArIG1hdGNoWzFdICsgXCIgYml0IGxlbmd0aFwiLCBcInBhcmFtXCIsIHBhcmFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgTnVtYmVyQ29kZXIoc2l6ZSAvIDgsIChtYXRjaFsxXSA9PT0gXCJpbnRcIiksIHBhcmFtLm5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYnl0ZXNbMC05XStcbiAgICAgICAgbWF0Y2ggPSBwYXJhbS50eXBlLm1hdGNoKHBhcmFtVHlwZUJ5dGVzKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBsZXQgc2l6ZSA9IHBhcnNlSW50KG1hdGNoWzFdKTtcbiAgICAgICAgICAgIGlmIChzaXplID09PSAwIHx8IHNpemUgPiAzMikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGJ5dGVzIGxlbmd0aFwiLCBcInBhcmFtXCIsIHBhcmFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgRml4ZWRCeXRlc0NvZGVyKHNpemUsIHBhcmFtLm5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHR5cGVcIiwgXCJ0eXBlXCIsIHBhcmFtLnR5cGUpO1xuICAgIH1cblxuICAgIF9nZXRXb3JkU2l6ZSgpOiBudW1iZXIgeyByZXR1cm4gMzI7IH1cblxuICAgIF9nZXRSZWFkZXIoZGF0YTogVWludDhBcnJheSwgYWxsb3dMb29zZT86IGJvb2xlYW4pOiBSZWFkZXIge1xuICAgICAgICByZXR1cm4gbmV3IFJlYWRlcihkYXRhLCB0aGlzLl9nZXRXb3JkU2l6ZSgpLCB0aGlzLmNvZXJjZUZ1bmMsIGFsbG93TG9vc2UpO1xuICAgIH1cblxuICAgIF9nZXRXcml0ZXIoKTogV3JpdGVyIHtcbiAgICAgICAgcmV0dXJuIG5ldyBXcml0ZXIodGhpcy5fZ2V0V29yZFNpemUoKSk7XG4gICAgfVxuXG4gICAgZ2V0RGVmYXVsdFZhbHVlKHR5cGVzOiBSZWFkb25seUFycmF5PHN0cmluZyB8IFBhcmFtVHlwZT4pOiBSZXN1bHQge1xuICAgICAgICBjb25zdCBjb2RlcnM6IEFycmF5PENvZGVyPiA9IHR5cGVzLm1hcCgodHlwZSkgPT4gdGhpcy5fZ2V0Q29kZXIoUGFyYW1UeXBlLmZyb20odHlwZSkpKTtcbiAgICAgICAgY29uc3QgY29kZXIgPSBuZXcgVHVwbGVDb2Rlcihjb2RlcnMsIFwiX1wiKTtcbiAgICAgICAgcmV0dXJuIGNvZGVyLmRlZmF1bHRWYWx1ZSgpO1xuICAgIH1cblxuICAgIGVuY29kZSh0eXBlczogUmVhZG9ubHlBcnJheTxzdHJpbmcgfCBQYXJhbVR5cGU+LCB2YWx1ZXM6IFJlYWRvbmx5QXJyYXk8YW55Pik6IHN0cmluZyB7XG4gICAgICAgIGlmICh0eXBlcy5sZW5ndGggIT09IHZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwidHlwZXMvdmFsdWVzIGxlbmd0aCBtaXNtYXRjaFwiLCBMb2dnZXIuZXJyb3JzLklOVkFMSURfQVJHVU1FTlQsIHtcbiAgICAgICAgICAgICAgICBjb3VudDogeyB0eXBlczogdHlwZXMubGVuZ3RoLCB2YWx1ZXM6IHZhbHVlcy5sZW5ndGggfSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogeyB0eXBlczogdHlwZXMsIHZhbHVlczogdmFsdWVzIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29kZXJzID0gdHlwZXMubWFwKCh0eXBlKSA9PiB0aGlzLl9nZXRDb2RlcihQYXJhbVR5cGUuZnJvbSh0eXBlKSkpO1xuICAgICAgICBjb25zdCBjb2RlciA9IChuZXcgVHVwbGVDb2Rlcihjb2RlcnMsIFwiX1wiKSk7XG5cbiAgICAgICAgY29uc3Qgd3JpdGVyID0gdGhpcy5fZ2V0V3JpdGVyKCk7XG4gICAgICAgIGNvZGVyLmVuY29kZSh3cml0ZXIsIHZhbHVlcyk7XG4gICAgICAgIHJldHVybiB3cml0ZXIuZGF0YTtcbiAgICB9XG5cbiAgICBkZWNvZGUodHlwZXM6IFJlYWRvbmx5QXJyYXk8c3RyaW5nIHwgUGFyYW1UeXBlPiwgZGF0YTogQnl0ZXNMaWtlLCBsb29zZT86IGJvb2xlYW4pOiBSZXN1bHQge1xuICAgICAgICBjb25zdCBjb2RlcnM6IEFycmF5PENvZGVyPiA9IHR5cGVzLm1hcCgodHlwZSkgPT4gdGhpcy5fZ2V0Q29kZXIoUGFyYW1UeXBlLmZyb20odHlwZSkpKTtcbiAgICAgICAgY29uc3QgY29kZXIgPSBuZXcgVHVwbGVDb2Rlcihjb2RlcnMsIFwiX1wiKTtcbiAgICAgICAgcmV0dXJuIGNvZGVyLmRlY29kZSh0aGlzLl9nZXRSZWFkZXIoYXJyYXlpZnkoZGF0YSksIGxvb3NlKSk7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgZGVmYXVsdEFiaUNvZGVyOiBBYmlDb2RlciA9IG5ldyBBYmlDb2RlcigpO1xuXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlpZnksIEJ5dGVzTGlrZSwgY29uY2F0LCBoZXhDb25jYXQsIGhleGxpZnkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IEJpZ051bWJlciwgQmlnTnVtYmVyaXNoIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2JpZ251bWJlclwiO1xuaW1wb3J0IHsgZGVmaW5lUmVhZE9ubHkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiO1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4uL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3VsdCBleHRlbmRzIFJlYWRvbmx5QXJyYXk8YW55PiB7XG4gICAgcmVhZG9ubHkgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tSZXN1bHRFcnJvcnMocmVzdWx0OiBSZXN1bHQpOiBBcnJheTx7IHBhdGg6IEFycmF5PHN0cmluZyB8IG51bWJlcj4sIGVycm9yOiBFcnJvciB9PiB7XG4gICAgLy8gRmluZCB0aGUgZmlyc3QgZXJyb3IgKGlmIGFueSlcbiAgICBjb25zdCBlcnJvcnM6IEFycmF5PHsgcGF0aDogQXJyYXk8c3RyaW5nIHwgbnVtYmVyPiwgZXJyb3I6IEVycm9yIH0+ID0gWyBdO1xuXG4gICAgY29uc3QgY2hlY2tFcnJvcnMgPSBmdW5jdGlvbihwYXRoOiBBcnJheTxzdHJpbmcgfCBudW1iZXI+LCBvYmplY3Q6IGFueSk6IHZvaWQge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkob2JqZWN0KSkgeyByZXR1cm47IH1cbiAgICAgICAgZm9yIChsZXQga2V5IGluIG9iamVjdCkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRQYXRoID0gcGF0aC5zbGljZSgpO1xuICAgICAgICAgICAgY2hpbGRQYXRoLnB1c2goa2V5KTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgY2hlY2tFcnJvcnMoY2hpbGRQYXRoLCBvYmplY3Rba2V5XSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKHsgcGF0aDogY2hpbGRQYXRoLCBlcnJvcjogZXJyb3IgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hlY2tFcnJvcnMoWyBdLCByZXN1bHQpO1xuXG4gICAgcmV0dXJuIGVycm9ycztcblxufVxuXG5leHBvcnQgdHlwZSBDb2VyY2VGdW5jID0gKHR5cGU6IHN0cmluZywgdmFsdWU6IGFueSkgPT4gYW55O1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29kZXIge1xuXG4gICAgLy8gVGhlIGNvZGVyIG5hbWU6XG4gICAgLy8gICAtIGFkZHJlc3MsIHVpbnQyNTYsIHR1cGxlLCBhcnJheSwgZXRjLlxuICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcblxuICAgIC8vIFRoZSBmdWxseSBleHBhbmRlZCB0eXBlLCBpbmNsdWRpbmcgY29tcG9zaXRlIHR5cGVzOlxuICAgIC8vICAgLSBhZGRyZXNzLCB1aW50MjU2LCB0dXBsZShhZGRyZXNzLGJ5dGVzKSwgdWludDI1NlszXVs0XVtdLCAgZXRjLlxuICAgIHJlYWRvbmx5IHR5cGU6IHN0cmluZztcblxuICAgIC8vIFRoZSBsb2NhbE5hbWUgYm91bmQgaW4gdGhlIHNpZ25hdHVyZSwgaW4gdGhpcyBleGFtcGxlIGl0IGlzIFwiYmF6XCI6XG4gICAgLy8gICAtIHR1cGxlKGFkZHJlc3MgZm9vLCB1aW50IGJhcikgYmF6XG4gICAgcmVhZG9ubHkgbG9jYWxOYW1lOiBzdHJpbmc7XG5cbiAgICAvLyBXaGV0aGVyIHRoaXMgdHlwZSBpcyBkeW5hbWljOlxuICAgIC8vICAtIER5bmFtaWM6IGJ5dGVzLCBzdHJpbmcsIGFkZHJlc3NbXSwgdHVwbGUoYm9vbGVhbltdKSwgZXRjLlxuICAgIC8vICAtIE5vdCBEeW5hbWljOiBhZGRyZXNzLCB1aW50MjU2LCBib29sZWFuWzNdLCB0dXBsZShhZGRyZXNzLCB1aW50OClcbiAgICByZWFkb25seSBkeW5hbWljOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCB0eXBlOiBzdHJpbmcsIGxvY2FsTmFtZTogc3RyaW5nLCBkeW5hbWljOiBib29sZWFuKSB7XG4gICAgICAgIC8vIEBUT0RPOiBkZWZpbmVSZWFkT25seSB0aGVzZVxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmxvY2FsTmFtZSA9IGxvY2FsTmFtZTtcbiAgICAgICAgdGhpcy5keW5hbWljID0gZHluYW1pYztcbiAgICB9XG5cbiAgICBfdGhyb3dFcnJvcihtZXNzYWdlOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihtZXNzYWdlLCB0aGlzLmxvY2FsTmFtZSwgdmFsdWUpO1xuICAgIH1cblxuICAgIGFic3RyYWN0IGVuY29kZSh3cml0ZXI6IFdyaXRlciwgdmFsdWU6IGFueSk6IG51bWJlcjtcbiAgICBhYnN0cmFjdCBkZWNvZGUocmVhZGVyOiBSZWFkZXIpOiBhbnk7XG5cbiAgICBhYnN0cmFjdCBkZWZhdWx0VmFsdWUoKTogYW55O1xufVxuXG5leHBvcnQgY2xhc3MgV3JpdGVyIHtcbiAgICByZWFkb25seSB3b3JkU2l6ZTogbnVtYmVyO1xuXG4gICAgX2RhdGE6IEFycmF5PFVpbnQ4QXJyYXk+O1xuICAgIF9kYXRhTGVuZ3RoOiBudW1iZXI7XG4gICAgX3BhZGRpbmc6IFVpbnQ4QXJyYXk7XG5cbiAgICBjb25zdHJ1Y3Rvcih3b3JkU2l6ZT86IG51bWJlcikge1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIndvcmRTaXplXCIsIHdvcmRTaXplIHx8IDMyKTtcbiAgICAgICAgdGhpcy5fZGF0YSA9IFsgXTtcbiAgICAgICAgdGhpcy5fZGF0YUxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX3BhZGRpbmcgPSBuZXcgVWludDhBcnJheSh3b3JkU2l6ZSk7XG4gICAgfVxuXG4gICAgZ2V0IGRhdGEoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGhleENvbmNhdCh0aGlzLl9kYXRhKTtcbiAgICB9XG4gICAgZ2V0IGxlbmd0aCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fZGF0YUxlbmd0aDsgfVxuXG4gICAgX3dyaXRlRGF0YShkYXRhOiBVaW50OEFycmF5KTogbnVtYmVyIHtcbiAgICAgICAgdGhpcy5fZGF0YS5wdXNoKGRhdGEpO1xuICAgICAgICB0aGlzLl9kYXRhTGVuZ3RoICs9IGRhdGEubGVuZ3RoO1xuICAgICAgICByZXR1cm4gZGF0YS5sZW5ndGg7XG4gICAgfVxuXG4gICAgYXBwZW5kV3JpdGVyKHdyaXRlcjogV3JpdGVyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dyaXRlRGF0YShjb25jYXQod3JpdGVyLl9kYXRhKSk7XG4gICAgfVxuXG4gICAgLy8gQXJyYXlpc2ggaXRlbXM7IHBhZGRlZCBvbiB0aGUgcmlnaHQgdG8gd29yZFNpemVcbiAgICB3cml0ZUJ5dGVzKHZhbHVlOiBCeXRlc0xpa2UpOiBudW1iZXIge1xuICAgICAgICBsZXQgYnl0ZXMgPSBhcnJheWlmeSh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdPZmZzZXQgPSBieXRlcy5sZW5ndGggJSB0aGlzLndvcmRTaXplO1xuICAgICAgICBpZiAocGFkZGluZ09mZnNldCkge1xuICAgICAgICAgICAgYnl0ZXMgPSBjb25jYXQoWyBieXRlcywgdGhpcy5fcGFkZGluZy5zbGljZShwYWRkaW5nT2Zmc2V0KSBdKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl93cml0ZURhdGEoYnl0ZXMpO1xuICAgIH1cblxuICAgIF9nZXRWYWx1ZSh2YWx1ZTogQmlnTnVtYmVyaXNoKTogVWludDhBcnJheSB7XG4gICAgICAgIGxldCBieXRlcyA9IGFycmF5aWZ5KEJpZ051bWJlci5mcm9tKHZhbHVlKSk7XG4gICAgICAgIGlmIChieXRlcy5sZW5ndGggPiB0aGlzLndvcmRTaXplKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcInZhbHVlIG91dC1vZi1ib3VuZHNcIiwgTG9nZ2VyLmVycm9ycy5CVUZGRVJfT1ZFUlJVTiwge1xuICAgICAgICAgICAgICAgIGxlbmd0aDogdGhpcy53b3JkU2l6ZSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IGJ5dGVzLmxlbmd0aFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ5dGVzLmxlbmd0aCAlIHRoaXMud29yZFNpemUpIHtcbiAgICAgICAgICAgIGJ5dGVzID0gY29uY2F0KFsgdGhpcy5fcGFkZGluZy5zbGljZShieXRlcy5sZW5ndGggJSB0aGlzLndvcmRTaXplKSwgYnl0ZXMgXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIH1cblxuICAgIC8vIEJpZ051bWJlcmlzaCBpdGVtczsgcGFkZGVkIG9uIHRoZSBsZWZ0IHRvIHdvcmRTaXplXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogQmlnTnVtYmVyaXNoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dyaXRlRGF0YSh0aGlzLl9nZXRWYWx1ZSh2YWx1ZSkpO1xuICAgIH1cblxuICAgIHdyaXRlVXBkYXRhYmxlVmFsdWUoKTogKHZhbHVlOiBCaWdOdW1iZXJpc2gpID0+IHZvaWQge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLl9kYXRhLmxlbmd0aDtcbiAgICAgICAgdGhpcy5fZGF0YS5wdXNoKHRoaXMuX3BhZGRpbmcpO1xuICAgICAgICB0aGlzLl9kYXRhTGVuZ3RoICs9IHRoaXMud29yZFNpemU7XG4gICAgICAgIHJldHVybiAodmFsdWU6IEJpZ051bWJlcmlzaCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fZGF0YVtvZmZzZXRdID0gdGhpcy5fZ2V0VmFsdWUodmFsdWUpO1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlYWRlciB7XG4gICAgcmVhZG9ubHkgd29yZFNpemU6IG51bWJlcjtcbiAgICByZWFkb25seSBhbGxvd0xvb3NlOiBib29sZWFuO1xuXG4gICAgcmVhZG9ubHkgX2RhdGE6IFVpbnQ4QXJyYXk7XG4gICAgcmVhZG9ubHkgX2NvZXJjZUZ1bmM6IENvZXJjZUZ1bmM7XG5cbiAgICBfb2Zmc2V0OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBCeXRlc0xpa2UsIHdvcmRTaXplPzogbnVtYmVyLCBjb2VyY2VGdW5jPzogQ29lcmNlRnVuYywgYWxsb3dMb29zZT86IGJvb2xlYW4pIHtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfZGF0YVwiLCBhcnJheWlmeShkYXRhKSk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwid29yZFNpemVcIiwgd29yZFNpemUgfHwgMzIpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl9jb2VyY2VGdW5jXCIsIGNvZXJjZUZ1bmMpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImFsbG93TG9vc2VcIiwgYWxsb3dMb29zZSk7XG5cbiAgICAgICAgdGhpcy5fb2Zmc2V0ID0gMDtcbiAgICB9XG5cbiAgICBnZXQgZGF0YSgpOiBzdHJpbmcgeyByZXR1cm4gaGV4bGlmeSh0aGlzLl9kYXRhKTsgfVxuICAgIGdldCBjb25zdW1lZCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fb2Zmc2V0OyB9XG5cbiAgICAvLyBUaGUgZGVmYXVsdCBDb2VyY2UgZnVuY3Rpb25cbiAgICBzdGF0aWMgY29lcmNlKG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSk6IGFueSB7XG4gICAgICAgIGxldCBtYXRjaCA9IG5hbWUubWF0Y2goXCJedT9pbnQoWzAtOV0rKSRcIik7XG4gICAgICAgIGlmIChtYXRjaCAmJiBwYXJzZUludChtYXRjaFsxXSkgPD0gNDgpIHsgdmFsdWUgPSAgdmFsdWUudG9OdW1iZXIoKTsgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgY29lcmNlKG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSk6IGFueSB7XG4gICAgICAgIGlmICh0aGlzLl9jb2VyY2VGdW5jKSB7IHJldHVybiB0aGlzLl9jb2VyY2VGdW5jKG5hbWUsIHZhbHVlKTsgfVxuICAgICAgICByZXR1cm4gUmVhZGVyLmNvZXJjZShuYW1lLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgX3BlZWtCeXRlcyhvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIGxvb3NlPzogYm9vbGVhbik6IFVpbnQ4QXJyYXkge1xuICAgICAgICBsZXQgYWxpZ25lZExlbmd0aCA9IE1hdGguY2VpbChsZW5ndGggLyB0aGlzLndvcmRTaXplKSAqIHRoaXMud29yZFNpemU7XG4gICAgICAgIGlmICh0aGlzLl9vZmZzZXQgKyBhbGlnbmVkTGVuZ3RoID4gdGhpcy5fZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFsbG93TG9vc2UgJiYgbG9vc2UgJiYgdGhpcy5fb2Zmc2V0ICsgbGVuZ3RoIDw9IHRoaXMuX2RhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgYWxpZ25lZExlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJkYXRhIG91dC1vZi1ib3VuZHNcIiwgTG9nZ2VyLmVycm9ycy5CVUZGRVJfT1ZFUlJVTiwge1xuICAgICAgICAgICAgICAgICAgICBsZW5ndGg6IHRoaXMuX2RhdGEubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMuX29mZnNldCArIGFsaWduZWRMZW5ndGhcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5zbGljZSh0aGlzLl9vZmZzZXQsIHRoaXMuX29mZnNldCArIGFsaWduZWRMZW5ndGgpXG4gICAgfVxuXG4gICAgc3ViUmVhZGVyKG9mZnNldDogbnVtYmVyKTogUmVhZGVyIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWFkZXIodGhpcy5fZGF0YS5zbGljZSh0aGlzLl9vZmZzZXQgKyBvZmZzZXQpLCB0aGlzLndvcmRTaXplLCB0aGlzLl9jb2VyY2VGdW5jLCB0aGlzLmFsbG93TG9vc2UpO1xuICAgIH1cblxuICAgIHJlYWRCeXRlcyhsZW5ndGg6IG51bWJlciwgbG9vc2U/OiBib29sZWFuKTogVWludDhBcnJheSB7XG4gICAgICAgIGxldCBieXRlcyA9IHRoaXMuX3BlZWtCeXRlcygwLCBsZW5ndGgsICEhbG9vc2UpO1xuICAgICAgICB0aGlzLl9vZmZzZXQgKz0gYnl0ZXMubGVuZ3RoO1xuICAgICAgICAvLyBAVE9ETzogTWFrZSBzdXJlIHRoZSBsZW5ndGguLmVuZCBieXRlcyBhcmUgYWxsIDA/XG4gICAgICAgIHJldHVybiBieXRlcy5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIHJlYWRWYWx1ZSgpOiBCaWdOdW1iZXIge1xuICAgICAgICByZXR1cm4gQmlnTnVtYmVyLmZyb20odGhpcy5yZWFkQnl0ZXModGhpcy53b3JkU2l6ZSkpO1xuICAgIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheWlmeSwgQnl0ZXNMaWtlLCBjb25jYXQsIGhleERhdGFMZW5ndGgsIGhleERhdGFTbGljZSwgaXNIZXhTdHJpbmcsIHN0cmlwWmVyb3MgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IEJpZ051bWJlciwgQmlnTnVtYmVyaXNoLCBfYmFzZTE2VG8zNiwgX2Jhc2UzNlRvMTYgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYmlnbnVtYmVyXCI7XG5pbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qva2VjY2FrMjU2XCI7XG5pbXBvcnQgeyBlbmNvZGUgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcmxwXCI7XG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcblxuZnVuY3Rpb24gZ2V0Q2hlY2tzdW1BZGRyZXNzKGFkZHJlc3M6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKCFpc0hleFN0cmluZyhhZGRyZXNzLCAyMCkpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYWRkcmVzc1wiLCBcImFkZHJlc3NcIiwgYWRkcmVzcyk7XG4gICAgfVxuXG4gICAgYWRkcmVzcyA9IGFkZHJlc3MudG9Mb3dlckNhc2UoKTtcblxuICAgIGNvbnN0IGNoYXJzID0gYWRkcmVzcy5zdWJzdHJpbmcoMikuc3BsaXQoXCJcIik7XG5cbiAgICBjb25zdCBleHBhbmRlZCA9IG5ldyBVaW50OEFycmF5KDQwKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQwOyBpKyspIHtcbiAgICAgICAgZXhwYW5kZWRbaV0gPSBjaGFyc1tpXS5jaGFyQ29kZUF0KDApO1xuICAgIH1cblxuICAgIGNvbnN0IGhhc2hlZCA9IGFycmF5aWZ5KGtlY2NhazI1NihleHBhbmRlZCkpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0MDsgaSArPSAyKSB7XG4gICAgICAgIGlmICgoaGFzaGVkW2kgPj4gMV0gPj4gNCkgPj0gOCkge1xuICAgICAgICAgICAgY2hhcnNbaV0gPSBjaGFyc1tpXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoaGFzaGVkW2kgPj4gMV0gJiAweDBmKSA+PSA4KSB7XG4gICAgICAgICAgICBjaGFyc1tpICsgMV0gPSBjaGFyc1tpICsgMV0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBcIjB4XCIgKyBjaGFycy5qb2luKFwiXCIpO1xufVxuXG4vLyBTaGltcyBmb3IgZW52aXJvbm1lbnRzIHRoYXQgYXJlIG1pc3Npbmcgc29tZSByZXF1aXJlZCBjb25zdGFudHMgYW5kIGZ1bmN0aW9uc1xuY29uc3QgTUFYX1NBRkVfSU5URUdFUjogbnVtYmVyID0gMHgxZmZmZmZmZmZmZmZmZjtcblxuZnVuY3Rpb24gbG9nMTAoeDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBpZiAoTWF0aC5sb2cxMCkgeyByZXR1cm4gTWF0aC5sb2cxMCh4KTsgfVxuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4xMDtcbn1cblxuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludGVybmF0aW9uYWxfQmFua19BY2NvdW50X051bWJlclxuXG4vLyBDcmVhdGUgbG9va3VwIHRhYmxlXG5jb25zdCBpYmFuTG9va3VwOiB7IFtjaGFyYWN0ZXI6IHN0cmluZ106IHN0cmluZyB9ID0geyB9O1xuZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7IGliYW5Mb29rdXBbU3RyaW5nKGkpXSA9IFN0cmluZyhpKTsgfVxuZm9yIChsZXQgaSA9IDA7IGkgPCAyNjsgaSsrKSB7IGliYW5Mb29rdXBbU3RyaW5nLmZyb21DaGFyQ29kZSg2NSArIGkpXSA9IFN0cmluZygxMCArIGkpOyB9XG5cbi8vIEhvdyBtYW55IGRlY2ltYWwgZGlnaXRzIGNhbiB3ZSBwcm9jZXNzPyAoZm9yIDY0LWJpdCBmbG9hdCwgdGhpcyBpcyAxNSlcbmNvbnN0IHNhZmVEaWdpdHMgPSBNYXRoLmZsb29yKGxvZzEwKE1BWF9TQUZFX0lOVEVHRVIpKTtcblxuZnVuY3Rpb24gaWJhbkNoZWNrc3VtKGFkZHJlc3M6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgYWRkcmVzcyA9IGFkZHJlc3MudG9VcHBlckNhc2UoKTtcbiAgICBhZGRyZXNzID0gYWRkcmVzcy5zdWJzdHJpbmcoNCkgKyBhZGRyZXNzLnN1YnN0cmluZygwLCAyKSArIFwiMDBcIjtcblxuICAgIGxldCBleHBhbmRlZCA9IGFkZHJlc3Muc3BsaXQoXCJcIikubWFwKChjKSA9PiB7IHJldHVybiBpYmFuTG9va3VwW2NdOyB9KS5qb2luKFwiXCIpO1xuXG4gICAgLy8gSmF2YXNjcmlwdCBjYW4gaGFuZGxlIGludGVnZXJzIHNhZmVseSB1cCB0byAxNSAoZGVjaW1hbCkgZGlnaXRzXG4gICAgd2hpbGUgKGV4cGFuZGVkLmxlbmd0aCA+PSBzYWZlRGlnaXRzKXtcbiAgICAgICAgbGV0IGJsb2NrID0gZXhwYW5kZWQuc3Vic3RyaW5nKDAsIHNhZmVEaWdpdHMpO1xuICAgICAgICBleHBhbmRlZCA9IHBhcnNlSW50KGJsb2NrLCAxMCkgJSA5NyArIGV4cGFuZGVkLnN1YnN0cmluZyhibG9jay5sZW5ndGgpO1xuICAgIH1cblxuICAgIGxldCBjaGVja3N1bSA9IFN0cmluZyg5OCAtIChwYXJzZUludChleHBhbmRlZCwgMTApICUgOTcpKTtcbiAgICB3aGlsZSAoY2hlY2tzdW0ubGVuZ3RoIDwgMikgeyBjaGVja3N1bSA9IFwiMFwiICsgY2hlY2tzdW07IH1cblxuICAgIHJldHVybiBjaGVja3N1bTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBZGRyZXNzKGFkZHJlc3M6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgbGV0IHJlc3VsdCA9IG51bGw7XG5cbiAgICBpZiAodHlwZW9mKGFkZHJlc3MpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGFkZHJlc3NcIiwgXCJhZGRyZXNzXCIsIGFkZHJlc3MpO1xuICAgIH1cblxuICAgIGlmIChhZGRyZXNzLm1hdGNoKC9eKDB4KT9bMC05YS1mQS1GXXs0MH0kLykpIHtcblxuICAgICAgICAvLyBNaXNzaW5nIHRoZSAweCBwcmVmaXhcbiAgICAgICAgaWYgKGFkZHJlc3Muc3Vic3RyaW5nKDAsIDIpICE9PSBcIjB4XCIpIHsgYWRkcmVzcyA9IFwiMHhcIiArIGFkZHJlc3M7IH1cblxuICAgICAgICByZXN1bHQgPSBnZXRDaGVja3N1bUFkZHJlc3MoYWRkcmVzcyk7XG5cbiAgICAgICAgLy8gSXQgaXMgYSBjaGVja3N1bW1lZCBhZGRyZXNzIHdpdGggYSBiYWQgY2hlY2tzdW1cbiAgICAgICAgaWYgKGFkZHJlc3MubWF0Y2goLyhbQS1GXS4qW2EtZl0pfChbYS1mXS4qW0EtRl0pLykgJiYgcmVzdWx0ICE9PSBhZGRyZXNzKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiYmFkIGFkZHJlc3MgY2hlY2tzdW1cIiwgXCJhZGRyZXNzXCIsIGFkZHJlc3MpO1xuICAgICAgICB9XG5cbiAgICAvLyBNYXliZSBJQ0FQPyAod2Ugb25seSBzdXBwb3J0IGRpcmVjdCBtb2RlKVxuICAgIH0gZWxzZSBpZiAoYWRkcmVzcy5tYXRjaCgvXlhFWzAtOV17Mn1bMC05QS1aYS16XXszMCwzMX0kLykpIHtcblxuICAgICAgICAvLyBJdCBpcyBhbiBJQ0FQIGFkZHJlc3Mgd2l0aCBhIGJhZCBjaGVja3N1bVxuICAgICAgICBpZiAoYWRkcmVzcy5zdWJzdHJpbmcoMiwgNCkgIT09IGliYW5DaGVja3N1bShhZGRyZXNzKSkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImJhZCBpY2FwIGNoZWNrc3VtXCIsIFwiYWRkcmVzc1wiLCBhZGRyZXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdCA9IF9iYXNlMzZUbzE2KGFkZHJlc3Muc3Vic3RyaW5nKDQpKTtcbiAgICAgICAgd2hpbGUgKHJlc3VsdC5sZW5ndGggPCA0MCkgeyByZXN1bHQgPSBcIjBcIiArIHJlc3VsdDsgfVxuICAgICAgICByZXN1bHQgPSBnZXRDaGVja3N1bUFkZHJlc3MoXCIweFwiICsgcmVzdWx0KTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGFkZHJlc3NcIiwgXCJhZGRyZXNzXCIsIGFkZHJlc3MpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FkZHJlc3MoYWRkcmVzczogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgdHJ5IHtcbiAgICAgICAgZ2V0QWRkcmVzcyhhZGRyZXNzKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEljYXBBZGRyZXNzKGFkZHJlc3M6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgbGV0IGJhc2UzNiA9IF9iYXNlMTZUbzM2KGdldEFkZHJlc3MoYWRkcmVzcykuc3Vic3RyaW5nKDIpKS50b1VwcGVyQ2FzZSgpO1xuICAgIHdoaWxlIChiYXNlMzYubGVuZ3RoIDwgMzApIHsgYmFzZTM2ID0gXCIwXCIgKyBiYXNlMzY7IH1cbiAgICByZXR1cm4gXCJYRVwiICsgaWJhbkNoZWNrc3VtKFwiWEUwMFwiICsgYmFzZTM2KSArIGJhc2UzNjtcbn1cblxuLy8gaHR0cDovL2V0aGVyZXVtLnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy83NjAvaG93LWlzLXRoZS1hZGRyZXNzLW9mLWFuLWV0aGVyZXVtLWNvbnRyYWN0LWNvbXB1dGVkXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udHJhY3RBZGRyZXNzKHRyYW5zYWN0aW9uOiB7IGZyb206IHN0cmluZywgbm9uY2U6IEJpZ051bWJlcmlzaCB9KSB7XG4gICAgbGV0IGZyb206IHN0cmluZyA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgICAgZnJvbSA9IGdldEFkZHJlc3ModHJhbnNhY3Rpb24uZnJvbSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcIm1pc3NpbmcgZnJvbSBhZGRyZXNzXCIsIFwidHJhbnNhY3Rpb25cIiwgdHJhbnNhY3Rpb24pO1xuICAgIH1cblxuICAgIGNvbnN0IG5vbmNlID0gc3RyaXBaZXJvcyhhcnJheWlmeShCaWdOdW1iZXIuZnJvbSh0cmFuc2FjdGlvbi5ub25jZSkudG9IZXhTdHJpbmcoKSkpO1xuXG4gICAgcmV0dXJuIGdldEFkZHJlc3MoaGV4RGF0YVNsaWNlKGtlY2NhazI1NihlbmNvZGUoWyBmcm9tLCBub25jZSBdKSksIDEyKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDcmVhdGUyQWRkcmVzcyhmcm9tOiBzdHJpbmcsIHNhbHQ6IEJ5dGVzTGlrZSwgaW5pdENvZGVIYXNoOiBCeXRlc0xpa2UpOiBzdHJpbmcge1xuICAgIGlmIChoZXhEYXRhTGVuZ3RoKHNhbHQpICE9PSAzMikge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwic2FsdCBtdXN0IGJlIDMyIGJ5dGVzXCIsIFwic2FsdFwiLCBzYWx0KTtcbiAgICB9XG4gICAgaWYgKGhleERhdGFMZW5ndGgoaW5pdENvZGVIYXNoKSAhPT0gMzIpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImluaXRDb2RlSGFzaCBtdXN0IGJlIDMyIGJ5dGVzXCIsIFwiaW5pdENvZGVIYXNoXCIsIGluaXRDb2RlSGFzaCk7XG4gICAgfVxuICAgIHJldHVybiBnZXRBZGRyZXNzKGhleERhdGFTbGljZShrZWNjYWsyNTYoY29uY2F0KFsgXCIweGZmXCIsIGdldEFkZHJlc3MoZnJvbSksIHNhbHQsIGluaXRDb2RlSGFzaCBdKSksIDEyKSlcbn1cbiIsIi8qKlxuICogW2pzLXNoYTNde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9lbW4xNzgvanMtc2hhM31cbiAqXG4gKiBAdmVyc2lvbiAwLjguMFxuICogQGF1dGhvciBDaGVuLCBZaS1DeXVhbiBbZW1uMTc4QGdtYWlsLmNvbV1cbiAqIEBjb3B5cmlnaHQgQ2hlbiwgWWktQ3l1YW4gMjAxNS0yMDE4XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuLypqc2xpbnQgYml0d2lzZTogdHJ1ZSAqL1xuKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBJTlBVVF9FUlJPUiA9ICdpbnB1dCBpcyBpbnZhbGlkIHR5cGUnO1xuICB2YXIgRklOQUxJWkVfRVJST1IgPSAnZmluYWxpemUgYWxyZWFkeSBjYWxsZWQnO1xuICB2YXIgV0lORE9XID0gdHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCc7XG4gIHZhciByb290ID0gV0lORE9XID8gd2luZG93IDoge307XG4gIGlmIChyb290LkpTX1NIQTNfTk9fV0lORE9XKSB7XG4gICAgV0lORE9XID0gZmFsc2U7XG4gIH1cbiAgdmFyIFdFQl9XT1JLRVIgPSAhV0lORE9XICYmIHR5cGVvZiBzZWxmID09PSAnb2JqZWN0JztcbiAgdmFyIE5PREVfSlMgPSAhcm9vdC5KU19TSEEzX05PX05PREVfSlMgJiYgdHlwZW9mIHByb2Nlc3MgPT09ICdvYmplY3QnICYmIHByb2Nlc3MudmVyc2lvbnMgJiYgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlO1xuICBpZiAoTk9ERV9KUykge1xuICAgIHJvb3QgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoV0VCX1dPUktFUikge1xuICAgIHJvb3QgPSBzZWxmO1xuICB9XG4gIHZhciBDT01NT05fSlMgPSAhcm9vdC5KU19TSEEzX05PX0NPTU1PTl9KUyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cztcbiAgdmFyIEFNRCA9IHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZDtcbiAgdmFyIEFSUkFZX0JVRkZFUiA9ICFyb290LkpTX1NIQTNfTk9fQVJSQVlfQlVGRkVSICYmIHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBIRVhfQ0hBUlMgPSAnMDEyMzQ1Njc4OWFiY2RlZicuc3BsaXQoJycpO1xuICB2YXIgU0hBS0VfUEFERElORyA9IFszMSwgNzkzNiwgMjAzMTYxNiwgNTIwMDkzNjk2XTtcbiAgdmFyIENTSEFLRV9QQURESU5HID0gWzQsIDEwMjQsIDI2MjE0NCwgNjcxMDg4NjRdO1xuICB2YXIgS0VDQ0FLX1BBRERJTkcgPSBbMSwgMjU2LCA2NTUzNiwgMTY3NzcyMTZdO1xuICB2YXIgUEFERElORyA9IFs2LCAxNTM2LCAzOTMyMTYsIDEwMDY2MzI5Nl07XG4gIHZhciBTSElGVCA9IFswLCA4LCAxNiwgMjRdO1xuICB2YXIgUkMgPSBbMSwgMCwgMzI4OTgsIDAsIDMyOTA2LCAyMTQ3NDgzNjQ4LCAyMTQ3NTE2NDE2LCAyMTQ3NDgzNjQ4LCAzMjkwNywgMCwgMjE0NzQ4MzY0OSxcbiAgICAwLCAyMTQ3NTE2NTQ1LCAyMTQ3NDgzNjQ4LCAzMjc3NywgMjE0NzQ4MzY0OCwgMTM4LCAwLCAxMzYsIDAsIDIxNDc1MTY0MjUsIDAsXG4gICAgMjE0NzQ4MzY1OCwgMCwgMjE0NzUxNjU1NSwgMCwgMTM5LCAyMTQ3NDgzNjQ4LCAzMjkwNSwgMjE0NzQ4MzY0OCwgMzI3NzEsXG4gICAgMjE0NzQ4MzY0OCwgMzI3NzAsIDIxNDc0ODM2NDgsIDEyOCwgMjE0NzQ4MzY0OCwgMzI3NzgsIDAsIDIxNDc0ODM2NTgsIDIxNDc0ODM2NDgsXG4gICAgMjE0NzUxNjU0NSwgMjE0NzQ4MzY0OCwgMzI4OTYsIDIxNDc0ODM2NDgsIDIxNDc0ODM2NDksIDAsIDIxNDc1MTY0MjQsIDIxNDc0ODM2NDhdO1xuICB2YXIgQklUUyA9IFsyMjQsIDI1NiwgMzg0LCA1MTJdO1xuICB2YXIgU0hBS0VfQklUUyA9IFsxMjgsIDI1Nl07XG4gIHZhciBPVVRQVVRfVFlQRVMgPSBbJ2hleCcsICdidWZmZXInLCAnYXJyYXlCdWZmZXInLCAnYXJyYXknLCAnZGlnZXN0J107XG4gIHZhciBDU0hBS0VfQllURVBBRCA9IHtcbiAgICAnMTI4JzogMTY4LFxuICAgICcyNTYnOiAxMzZcbiAgfTtcblxuICBpZiAocm9vdC5KU19TSEEzX05PX05PREVfSlMgfHwgIUFycmF5LmlzQXJyYXkpIHtcbiAgICBBcnJheS5pc0FycmF5ID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH07XG4gIH1cblxuICBpZiAoQVJSQVlfQlVGRkVSICYmIChyb290LkpTX1NIQTNfTk9fQVJSQVlfQlVGRkVSX0lTX1ZJRVcgfHwgIUFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICBBcnJheUJ1ZmZlci5pc1ZpZXcgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgb2JqLmJ1ZmZlciAmJiBvYmouYnVmZmVyLmNvbnN0cnVjdG9yID09PSBBcnJheUJ1ZmZlcjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGNyZWF0ZU91dHB1dE1ldGhvZCA9IGZ1bmN0aW9uIChiaXRzLCBwYWRkaW5nLCBvdXRwdXRUeXBlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICByZXR1cm4gbmV3IEtlY2NhayhiaXRzLCBwYWRkaW5nLCBiaXRzKS51cGRhdGUobWVzc2FnZSlbb3V0cHV0VHlwZV0oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjcmVhdGVTaGFrZU91dHB1dE1ldGhvZCA9IGZ1bmN0aW9uIChiaXRzLCBwYWRkaW5nLCBvdXRwdXRUeXBlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlLCBvdXRwdXRCaXRzKSB7XG4gICAgICByZXR1cm4gbmV3IEtlY2NhayhiaXRzLCBwYWRkaW5nLCBvdXRwdXRCaXRzKS51cGRhdGUobWVzc2FnZSlbb3V0cHV0VHlwZV0oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjcmVhdGVDc2hha2VPdXRwdXRNZXRob2QgPSBmdW5jdGlvbiAoYml0cywgcGFkZGluZywgb3V0cHV0VHlwZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSwgb3V0cHV0Qml0cywgbiwgcykge1xuICAgICAgcmV0dXJuIG1ldGhvZHNbJ2NzaGFrZScgKyBiaXRzXS51cGRhdGUobWVzc2FnZSwgb3V0cHV0Qml0cywgbiwgcylbb3V0cHV0VHlwZV0oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjcmVhdGVLbWFjT3V0cHV0TWV0aG9kID0gZnVuY3Rpb24gKGJpdHMsIHBhZGRpbmcsIG91dHB1dFR5cGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGtleSwgbWVzc2FnZSwgb3V0cHV0Qml0cywgcykge1xuICAgICAgcmV0dXJuIG1ldGhvZHNbJ2ttYWMnICsgYml0c10udXBkYXRlKGtleSwgbWVzc2FnZSwgb3V0cHV0Qml0cywgcylbb3V0cHV0VHlwZV0oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjcmVhdGVPdXRwdXRNZXRob2RzID0gZnVuY3Rpb24gKG1ldGhvZCwgY3JlYXRlTWV0aG9kLCBiaXRzLCBwYWRkaW5nKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBPVVRQVVRfVFlQRVMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciB0eXBlID0gT1VUUFVUX1RZUEVTW2ldO1xuICAgICAgbWV0aG9kW3R5cGVdID0gY3JlYXRlTWV0aG9kKGJpdHMsIHBhZGRpbmcsIHR5cGUpO1xuICAgIH1cbiAgICByZXR1cm4gbWV0aG9kO1xuICB9O1xuXG4gIHZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoYml0cywgcGFkZGluZykge1xuICAgIHZhciBtZXRob2QgPSBjcmVhdGVPdXRwdXRNZXRob2QoYml0cywgcGFkZGluZywgJ2hleCcpO1xuICAgIG1ldGhvZC5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbmV3IEtlY2NhayhiaXRzLCBwYWRkaW5nLCBiaXRzKTtcbiAgICB9O1xuICAgIG1ldGhvZC51cGRhdGUgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgcmV0dXJuIG1ldGhvZC5jcmVhdGUoKS51cGRhdGUobWVzc2FnZSk7XG4gICAgfTtcbiAgICByZXR1cm4gY3JlYXRlT3V0cHV0TWV0aG9kcyhtZXRob2QsIGNyZWF0ZU91dHB1dE1ldGhvZCwgYml0cywgcGFkZGluZyk7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZVNoYWtlTWV0aG9kID0gZnVuY3Rpb24gKGJpdHMsIHBhZGRpbmcpIHtcbiAgICB2YXIgbWV0aG9kID0gY3JlYXRlU2hha2VPdXRwdXRNZXRob2QoYml0cywgcGFkZGluZywgJ2hleCcpO1xuICAgIG1ldGhvZC5jcmVhdGUgPSBmdW5jdGlvbiAob3V0cHV0Qml0cykge1xuICAgICAgcmV0dXJuIG5ldyBLZWNjYWsoYml0cywgcGFkZGluZywgb3V0cHV0Qml0cyk7XG4gICAgfTtcbiAgICBtZXRob2QudXBkYXRlID0gZnVuY3Rpb24gKG1lc3NhZ2UsIG91dHB1dEJpdHMpIHtcbiAgICAgIHJldHVybiBtZXRob2QuY3JlYXRlKG91dHB1dEJpdHMpLnVwZGF0ZShtZXNzYWdlKTtcbiAgICB9O1xuICAgIHJldHVybiBjcmVhdGVPdXRwdXRNZXRob2RzKG1ldGhvZCwgY3JlYXRlU2hha2VPdXRwdXRNZXRob2QsIGJpdHMsIHBhZGRpbmcpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVDc2hha2VNZXRob2QgPSBmdW5jdGlvbiAoYml0cywgcGFkZGluZykge1xuICAgIHZhciB3ID0gQ1NIQUtFX0JZVEVQQURbYml0c107XG4gICAgdmFyIG1ldGhvZCA9IGNyZWF0ZUNzaGFrZU91dHB1dE1ldGhvZChiaXRzLCBwYWRkaW5nLCAnaGV4Jyk7XG4gICAgbWV0aG9kLmNyZWF0ZSA9IGZ1bmN0aW9uIChvdXRwdXRCaXRzLCBuLCBzKSB7XG4gICAgICBpZiAoIW4gJiYgIXMpIHtcbiAgICAgICAgcmV0dXJuIG1ldGhvZHNbJ3NoYWtlJyArIGJpdHNdLmNyZWF0ZShvdXRwdXRCaXRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgS2VjY2FrKGJpdHMsIHBhZGRpbmcsIG91dHB1dEJpdHMpLmJ5dGVwYWQoW24sIHNdLCB3KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIG1ldGhvZC51cGRhdGUgPSBmdW5jdGlvbiAobWVzc2FnZSwgb3V0cHV0Qml0cywgbiwgcykge1xuICAgICAgcmV0dXJuIG1ldGhvZC5jcmVhdGUob3V0cHV0Qml0cywgbiwgcykudXBkYXRlKG1lc3NhZ2UpO1xuICAgIH07XG4gICAgcmV0dXJuIGNyZWF0ZU91dHB1dE1ldGhvZHMobWV0aG9kLCBjcmVhdGVDc2hha2VPdXRwdXRNZXRob2QsIGJpdHMsIHBhZGRpbmcpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLbWFjTWV0aG9kID0gZnVuY3Rpb24gKGJpdHMsIHBhZGRpbmcpIHtcbiAgICB2YXIgdyA9IENTSEFLRV9CWVRFUEFEW2JpdHNdO1xuICAgIHZhciBtZXRob2QgPSBjcmVhdGVLbWFjT3V0cHV0TWV0aG9kKGJpdHMsIHBhZGRpbmcsICdoZXgnKTtcbiAgICBtZXRob2QuY3JlYXRlID0gZnVuY3Rpb24gKGtleSwgb3V0cHV0Qml0cywgcykge1xuICAgICAgcmV0dXJuIG5ldyBLbWFjKGJpdHMsIHBhZGRpbmcsIG91dHB1dEJpdHMpLmJ5dGVwYWQoWydLTUFDJywgc10sIHcpLmJ5dGVwYWQoW2tleV0sIHcpO1xuICAgIH07XG4gICAgbWV0aG9kLnVwZGF0ZSA9IGZ1bmN0aW9uIChrZXksIG1lc3NhZ2UsIG91dHB1dEJpdHMsIHMpIHtcbiAgICAgIHJldHVybiBtZXRob2QuY3JlYXRlKGtleSwgb3V0cHV0Qml0cywgcykudXBkYXRlKG1lc3NhZ2UpO1xuICAgIH07XG4gICAgcmV0dXJuIGNyZWF0ZU91dHB1dE1ldGhvZHMobWV0aG9kLCBjcmVhdGVLbWFjT3V0cHV0TWV0aG9kLCBiaXRzLCBwYWRkaW5nKTtcbiAgfTtcblxuICB2YXIgYWxnb3JpdGhtcyA9IFtcbiAgICB7IG5hbWU6ICdrZWNjYWsnLCBwYWRkaW5nOiBLRUNDQUtfUEFERElORywgYml0czogQklUUywgY3JlYXRlTWV0aG9kOiBjcmVhdGVNZXRob2QgfSxcbiAgICB7IG5hbWU6ICdzaGEzJywgcGFkZGluZzogUEFERElORywgYml0czogQklUUywgY3JlYXRlTWV0aG9kOiBjcmVhdGVNZXRob2QgfSxcbiAgICB7IG5hbWU6ICdzaGFrZScsIHBhZGRpbmc6IFNIQUtFX1BBRERJTkcsIGJpdHM6IFNIQUtFX0JJVFMsIGNyZWF0ZU1ldGhvZDogY3JlYXRlU2hha2VNZXRob2QgfSxcbiAgICB7IG5hbWU6ICdjc2hha2UnLCBwYWRkaW5nOiBDU0hBS0VfUEFERElORywgYml0czogU0hBS0VfQklUUywgY3JlYXRlTWV0aG9kOiBjcmVhdGVDc2hha2VNZXRob2QgfSxcbiAgICB7IG5hbWU6ICdrbWFjJywgcGFkZGluZzogQ1NIQUtFX1BBRERJTkcsIGJpdHM6IFNIQUtFX0JJVFMsIGNyZWF0ZU1ldGhvZDogY3JlYXRlS21hY01ldGhvZCB9XG4gIF07XG5cbiAgdmFyIG1ldGhvZHMgPSB7fSwgbWV0aG9kTmFtZXMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFsZ29yaXRobXMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYWxnb3JpdGhtID0gYWxnb3JpdGhtc1tpXTtcbiAgICB2YXIgYml0cyA9IGFsZ29yaXRobS5iaXRzO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgYml0cy5sZW5ndGg7ICsraikge1xuICAgICAgdmFyIG1ldGhvZE5hbWUgPSBhbGdvcml0aG0ubmFtZSArICdfJyArIGJpdHNbal07XG4gICAgICBtZXRob2ROYW1lcy5wdXNoKG1ldGhvZE5hbWUpO1xuICAgICAgbWV0aG9kc1ttZXRob2ROYW1lXSA9IGFsZ29yaXRobS5jcmVhdGVNZXRob2QoYml0c1tqXSwgYWxnb3JpdGhtLnBhZGRpbmcpO1xuICAgICAgaWYgKGFsZ29yaXRobS5uYW1lICE9PSAnc2hhMycpIHtcbiAgICAgICAgdmFyIG5ld01ldGhvZE5hbWUgPSBhbGdvcml0aG0ubmFtZSArIGJpdHNbal07XG4gICAgICAgIG1ldGhvZE5hbWVzLnB1c2gobmV3TWV0aG9kTmFtZSk7XG4gICAgICAgIG1ldGhvZHNbbmV3TWV0aG9kTmFtZV0gPSBtZXRob2RzW21ldGhvZE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIEtlY2NhayhiaXRzLCBwYWRkaW5nLCBvdXRwdXRCaXRzKSB7XG4gICAgdGhpcy5ibG9ja3MgPSBbXTtcbiAgICB0aGlzLnMgPSBbXTtcbiAgICB0aGlzLnBhZGRpbmcgPSBwYWRkaW5nO1xuICAgIHRoaXMub3V0cHV0Qml0cyA9IG91dHB1dEJpdHM7XG4gICAgdGhpcy5yZXNldCA9IHRydWU7XG4gICAgdGhpcy5maW5hbGl6ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmJsb2NrID0gMDtcbiAgICB0aGlzLnN0YXJ0ID0gMDtcbiAgICB0aGlzLmJsb2NrQ291bnQgPSAoMTYwMCAtIChiaXRzIDw8IDEpKSA+PiA1O1xuICAgIHRoaXMuYnl0ZUNvdW50ID0gdGhpcy5ibG9ja0NvdW50IDw8IDI7XG4gICAgdGhpcy5vdXRwdXRCbG9ja3MgPSBvdXRwdXRCaXRzID4+IDU7XG4gICAgdGhpcy5leHRyYUJ5dGVzID0gKG91dHB1dEJpdHMgJiAzMSkgPj4gMztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTA7ICsraSkge1xuICAgICAgdGhpcy5zW2ldID0gMDtcbiAgICB9XG4gIH1cblxuICBLZWNjYWsucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoRklOQUxJWkVfRVJST1IpO1xuICAgIH1cbiAgICB2YXIgbm90U3RyaW5nLCB0eXBlID0gdHlwZW9mIG1lc3NhZ2U7XG4gICAgaWYgKHR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5QVVRfRVJST1IpO1xuICAgICAgICB9IGVsc2UgaWYgKEFSUkFZX0JVRkZFUiAmJiBtZXNzYWdlLmNvbnN0cnVjdG9yID09PSBBcnJheUJ1ZmZlcikge1xuICAgICAgICAgIG1lc3NhZ2UgPSBuZXcgVWludDhBcnJheShtZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShtZXNzYWdlKSkge1xuICAgICAgICAgIGlmICghQVJSQVlfQlVGRkVSIHx8ICFBcnJheUJ1ZmZlci5pc1ZpZXcobWVzc2FnZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihJTlBVVF9FUlJPUik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5QVVRfRVJST1IpO1xuICAgICAgfVxuICAgICAgbm90U3RyaW5nID0gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGJsb2NrcyA9IHRoaXMuYmxvY2tzLCBieXRlQ291bnQgPSB0aGlzLmJ5dGVDb3VudCwgbGVuZ3RoID0gbWVzc2FnZS5sZW5ndGgsXG4gICAgICBibG9ja0NvdW50ID0gdGhpcy5ibG9ja0NvdW50LCBpbmRleCA9IDAsIHMgPSB0aGlzLnMsIGksIGNvZGU7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLnJlc2V0KSB7XG4gICAgICAgIHRoaXMucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgYmxvY2tzWzBdID0gdGhpcy5ibG9jaztcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGJsb2NrQ291bnQgKyAxOyArK2kpIHtcbiAgICAgICAgICBibG9ja3NbaV0gPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobm90U3RyaW5nKSB7XG4gICAgICAgIGZvciAoaSA9IHRoaXMuc3RhcnQ7IGluZGV4IDwgbGVuZ3RoICYmIGkgPCBieXRlQ291bnQ7ICsraW5kZXgpIHtcbiAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSBtZXNzYWdlW2luZGV4XSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChpID0gdGhpcy5zdGFydDsgaW5kZXggPCBsZW5ndGggJiYgaSA8IGJ5dGVDb3VudDsgKytpbmRleCkge1xuICAgICAgICAgIGNvZGUgPSBtZXNzYWdlLmNoYXJDb2RlQXQoaW5kZXgpO1xuICAgICAgICAgIGlmIChjb2RlIDwgMHg4MCkge1xuICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gY29kZSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPCAweDgwMCkge1xuICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4YzAgfCAoY29kZSA+PiA2KSkgPDwgU0hJRlRbaSsrICYgM107XG4gICAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHg4MCB8IChjb2RlICYgMHgzZikpIDw8IFNISUZUW2krKyAmIDNdO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY29kZSA8IDB4ZDgwMCB8fCBjb2RlID49IDB4ZTAwMCkge1xuICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4ZTAgfCAoY29kZSA+PiAxMikpIDw8IFNISUZUW2krKyAmIDNdO1xuICAgICAgICAgICAgYmxvY2tzW2kgPj4gMl0gfD0gKDB4ODAgfCAoKGNvZGUgPj4gNikgJiAweDNmKSkgPDwgU0hJRlRbaSsrICYgM107XG4gICAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHg4MCB8IChjb2RlICYgMHgzZikpIDw8IFNISUZUW2krKyAmIDNdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb2RlID0gMHgxMDAwMCArICgoKGNvZGUgJiAweDNmZikgPDwgMTApIHwgKG1lc3NhZ2UuY2hhckNvZGVBdCgrK2luZGV4KSAmIDB4M2ZmKSk7XG4gICAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHhmMCB8IChjb2RlID4+IDE4KSkgPDwgU0hJRlRbaSsrICYgM107XG4gICAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHg4MCB8ICgoY29kZSA+PiAxMikgJiAweDNmKSkgPDwgU0hJRlRbaSsrICYgM107XG4gICAgICAgICAgICBibG9ja3NbaSA+PiAyXSB8PSAoMHg4MCB8ICgoY29kZSA+PiA2KSAmIDB4M2YpKSA8PCBTSElGVFtpKysgJiAzXTtcbiAgICAgICAgICAgIGJsb2Nrc1tpID4+IDJdIHw9ICgweDgwIHwgKGNvZGUgJiAweDNmKSkgPDwgU0hJRlRbaSsrICYgM107XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmxhc3RCeXRlSW5kZXggPSBpO1xuICAgICAgaWYgKGkgPj0gYnl0ZUNvdW50KSB7XG4gICAgICAgIHRoaXMuc3RhcnQgPSBpIC0gYnl0ZUNvdW50O1xuICAgICAgICB0aGlzLmJsb2NrID0gYmxvY2tzW2Jsb2NrQ291bnRdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYmxvY2tDb3VudDsgKytpKSB7XG4gICAgICAgICAgc1tpXSBePSBibG9ja3NbaV07XG4gICAgICAgIH1cbiAgICAgICAgZihzKTtcbiAgICAgICAgdGhpcy5yZXNldCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN0YXJ0ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgS2VjY2FrLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiAoeCwgcmlnaHQpIHtcbiAgICB2YXIgbyA9IHggJiAyNTUsIG4gPSAxO1xuICAgIHZhciBieXRlcyA9IFtvXTtcbiAgICB4ID0geCA+PiA4O1xuICAgIG8gPSB4ICYgMjU1O1xuICAgIHdoaWxlIChvID4gMCkge1xuICAgICAgYnl0ZXMudW5zaGlmdChvKTtcbiAgICAgIHggPSB4ID4+IDg7XG4gICAgICBvID0geCAmIDI1NTtcbiAgICAgICsrbjtcbiAgICB9XG4gICAgaWYgKHJpZ2h0KSB7XG4gICAgICBieXRlcy5wdXNoKG4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBieXRlcy51bnNoaWZ0KG4pO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZShieXRlcyk7XG4gICAgcmV0dXJuIGJ5dGVzLmxlbmd0aDtcbiAgfTtcblxuICBLZWNjYWsucHJvdG90eXBlLmVuY29kZVN0cmluZyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICB2YXIgbm90U3RyaW5nLCB0eXBlID0gdHlwZW9mIHN0cjtcbiAgICBpZiAodHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoc3RyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKElOUFVUX0VSUk9SKTtcbiAgICAgICAgfSBlbHNlIGlmIChBUlJBWV9CVUZGRVIgJiYgc3RyLmNvbnN0cnVjdG9yID09PSBBcnJheUJ1ZmZlcikge1xuICAgICAgICAgIHN0ciA9IG5ldyBVaW50OEFycmF5KHN0cik7XG4gICAgICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoc3RyKSkge1xuICAgICAgICAgIGlmICghQVJSQVlfQlVGRkVSIHx8ICFBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKElOUFVUX0VSUk9SKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihJTlBVVF9FUlJPUik7XG4gICAgICB9XG4gICAgICBub3RTdHJpbmcgPSB0cnVlO1xuICAgIH1cbiAgICB2YXIgYnl0ZXMgPSAwLCBsZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgIGlmIChub3RTdHJpbmcpIHtcbiAgICAgIGJ5dGVzID0gbGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoY29kZSA8IDB4ODApIHtcbiAgICAgICAgICBieXRlcyArPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPCAweDgwMCkge1xuICAgICAgICAgIGJ5dGVzICs9IDI7XG4gICAgICAgIH0gZWxzZSBpZiAoY29kZSA8IDB4ZDgwMCB8fCBjb2RlID49IDB4ZTAwMCkge1xuICAgICAgICAgIGJ5dGVzICs9IDM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29kZSA9IDB4MTAwMDAgKyAoKChjb2RlICYgMHgzZmYpIDw8IDEwKSB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHgzZmYpKTtcbiAgICAgICAgICBieXRlcyArPSA0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGJ5dGVzICs9IHRoaXMuZW5jb2RlKGJ5dGVzICogOCk7XG4gICAgdGhpcy51cGRhdGUoc3RyKTtcbiAgICByZXR1cm4gYnl0ZXM7XG4gIH07XG5cbiAgS2VjY2FrLnByb3RvdHlwZS5ieXRlcGFkID0gZnVuY3Rpb24gKHN0cnMsIHcpIHtcbiAgICB2YXIgYnl0ZXMgPSB0aGlzLmVuY29kZSh3KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cnMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGJ5dGVzICs9IHRoaXMuZW5jb2RlU3RyaW5nKHN0cnNbaV0pO1xuICAgIH1cbiAgICB2YXIgcGFkZGluZ0J5dGVzID0gdyAtIGJ5dGVzICUgdztcbiAgICB2YXIgemVyb3MgPSBbXTtcbiAgICB6ZXJvcy5sZW5ndGggPSBwYWRkaW5nQnl0ZXM7XG4gICAgdGhpcy51cGRhdGUoemVyb3MpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEtlY2Nhay5wcm90b3R5cGUuZmluYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZmluYWxpemVkID0gdHJ1ZTtcbiAgICB2YXIgYmxvY2tzID0gdGhpcy5ibG9ja3MsIGkgPSB0aGlzLmxhc3RCeXRlSW5kZXgsIGJsb2NrQ291bnQgPSB0aGlzLmJsb2NrQ291bnQsIHMgPSB0aGlzLnM7XG4gICAgYmxvY2tzW2kgPj4gMl0gfD0gdGhpcy5wYWRkaW5nW2kgJiAzXTtcbiAgICBpZiAodGhpcy5sYXN0Qnl0ZUluZGV4ID09PSB0aGlzLmJ5dGVDb3VudCkge1xuICAgICAgYmxvY2tzWzBdID0gYmxvY2tzW2Jsb2NrQ291bnRdO1xuICAgICAgZm9yIChpID0gMTsgaSA8IGJsb2NrQ291bnQgKyAxOyArK2kpIHtcbiAgICAgICAgYmxvY2tzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgYmxvY2tzW2Jsb2NrQ291bnQgLSAxXSB8PSAweDgwMDAwMDAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBibG9ja0NvdW50OyArK2kpIHtcbiAgICAgIHNbaV0gXj0gYmxvY2tzW2ldO1xuICAgIH1cbiAgICBmKHMpO1xuICB9O1xuXG4gIEtlY2Nhay5wcm90b3R5cGUudG9TdHJpbmcgPSBLZWNjYWsucHJvdG90eXBlLmhleCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZpbmFsaXplKCk7XG5cbiAgICB2YXIgYmxvY2tDb3VudCA9IHRoaXMuYmxvY2tDb3VudCwgcyA9IHRoaXMucywgb3V0cHV0QmxvY2tzID0gdGhpcy5vdXRwdXRCbG9ja3MsXG4gICAgICBleHRyYUJ5dGVzID0gdGhpcy5leHRyYUJ5dGVzLCBpID0gMCwgaiA9IDA7XG4gICAgdmFyIGhleCA9ICcnLCBibG9jaztcbiAgICB3aGlsZSAoaiA8IG91dHB1dEJsb2Nrcykge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGJsb2NrQ291bnQgJiYgaiA8IG91dHB1dEJsb2NrczsgKytpLCArK2opIHtcbiAgICAgICAgYmxvY2sgPSBzW2ldO1xuICAgICAgICBoZXggKz0gSEVYX0NIQVJTWyhibG9jayA+PiA0KSAmIDB4MEZdICsgSEVYX0NIQVJTW2Jsb2NrICYgMHgwRl0gK1xuICAgICAgICAgIEhFWF9DSEFSU1soYmxvY2sgPj4gMTIpICYgMHgwRl0gKyBIRVhfQ0hBUlNbKGJsb2NrID4+IDgpICYgMHgwRl0gK1xuICAgICAgICAgIEhFWF9DSEFSU1soYmxvY2sgPj4gMjApICYgMHgwRl0gKyBIRVhfQ0hBUlNbKGJsb2NrID4+IDE2KSAmIDB4MEZdICtcbiAgICAgICAgICBIRVhfQ0hBUlNbKGJsb2NrID4+IDI4KSAmIDB4MEZdICsgSEVYX0NIQVJTWyhibG9jayA+PiAyNCkgJiAweDBGXTtcbiAgICAgIH1cbiAgICAgIGlmIChqICUgYmxvY2tDb3VudCA9PT0gMCkge1xuICAgICAgICBmKHMpO1xuICAgICAgICBpID0gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGV4dHJhQnl0ZXMpIHtcbiAgICAgIGJsb2NrID0gc1tpXTtcbiAgICAgIGhleCArPSBIRVhfQ0hBUlNbKGJsb2NrID4+IDQpICYgMHgwRl0gKyBIRVhfQ0hBUlNbYmxvY2sgJiAweDBGXTtcbiAgICAgIGlmIChleHRyYUJ5dGVzID4gMSkge1xuICAgICAgICBoZXggKz0gSEVYX0NIQVJTWyhibG9jayA+PiAxMikgJiAweDBGXSArIEhFWF9DSEFSU1soYmxvY2sgPj4gOCkgJiAweDBGXTtcbiAgICAgIH1cbiAgICAgIGlmIChleHRyYUJ5dGVzID4gMikge1xuICAgICAgICBoZXggKz0gSEVYX0NIQVJTWyhibG9jayA+PiAyMCkgJiAweDBGXSArIEhFWF9DSEFSU1soYmxvY2sgPj4gMTYpICYgMHgwRl07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBoZXg7XG4gIH07XG5cbiAgS2VjY2FrLnByb3RvdHlwZS5hcnJheUJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZpbmFsaXplKCk7XG5cbiAgICB2YXIgYmxvY2tDb3VudCA9IHRoaXMuYmxvY2tDb3VudCwgcyA9IHRoaXMucywgb3V0cHV0QmxvY2tzID0gdGhpcy5vdXRwdXRCbG9ja3MsXG4gICAgICBleHRyYUJ5dGVzID0gdGhpcy5leHRyYUJ5dGVzLCBpID0gMCwgaiA9IDA7XG4gICAgdmFyIGJ5dGVzID0gdGhpcy5vdXRwdXRCaXRzID4+IDM7XG4gICAgdmFyIGJ1ZmZlcjtcbiAgICBpZiAoZXh0cmFCeXRlcykge1xuICAgICAgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKChvdXRwdXRCbG9ja3MgKyAxKSA8PCAyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ5dGVzKTtcbiAgICB9XG4gICAgdmFyIGFycmF5ID0gbmV3IFVpbnQzMkFycmF5KGJ1ZmZlcik7XG4gICAgd2hpbGUgKGogPCBvdXRwdXRCbG9ja3MpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBibG9ja0NvdW50ICYmIGogPCBvdXRwdXRCbG9ja3M7ICsraSwgKytqKSB7XG4gICAgICAgIGFycmF5W2pdID0gc1tpXTtcbiAgICAgIH1cbiAgICAgIGlmIChqICUgYmxvY2tDb3VudCA9PT0gMCkge1xuICAgICAgICBmKHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXh0cmFCeXRlcykge1xuICAgICAgYXJyYXlbaV0gPSBzW2ldO1xuICAgICAgYnVmZmVyID0gYnVmZmVyLnNsaWNlKDAsIGJ5dGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZmZlcjtcbiAgfTtcblxuICBLZWNjYWsucHJvdG90eXBlLmJ1ZmZlciA9IEtlY2Nhay5wcm90b3R5cGUuYXJyYXlCdWZmZXI7XG5cbiAgS2VjY2FrLnByb3RvdHlwZS5kaWdlc3QgPSBLZWNjYWsucHJvdG90eXBlLmFycmF5ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZmluYWxpemUoKTtcblxuICAgIHZhciBibG9ja0NvdW50ID0gdGhpcy5ibG9ja0NvdW50LCBzID0gdGhpcy5zLCBvdXRwdXRCbG9ja3MgPSB0aGlzLm91dHB1dEJsb2NrcyxcbiAgICAgIGV4dHJhQnl0ZXMgPSB0aGlzLmV4dHJhQnl0ZXMsIGkgPSAwLCBqID0gMDtcbiAgICB2YXIgYXJyYXkgPSBbXSwgb2Zmc2V0LCBibG9jaztcbiAgICB3aGlsZSAoaiA8IG91dHB1dEJsb2Nrcykge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGJsb2NrQ291bnQgJiYgaiA8IG91dHB1dEJsb2NrczsgKytpLCArK2opIHtcbiAgICAgICAgb2Zmc2V0ID0gaiA8PCAyO1xuICAgICAgICBibG9jayA9IHNbaV07XG4gICAgICAgIGFycmF5W29mZnNldF0gPSBibG9jayAmIDB4RkY7XG4gICAgICAgIGFycmF5W29mZnNldCArIDFdID0gKGJsb2NrID4+IDgpICYgMHhGRjtcbiAgICAgICAgYXJyYXlbb2Zmc2V0ICsgMl0gPSAoYmxvY2sgPj4gMTYpICYgMHhGRjtcbiAgICAgICAgYXJyYXlbb2Zmc2V0ICsgM10gPSAoYmxvY2sgPj4gMjQpICYgMHhGRjtcbiAgICAgIH1cbiAgICAgIGlmIChqICUgYmxvY2tDb3VudCA9PT0gMCkge1xuICAgICAgICBmKHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXh0cmFCeXRlcykge1xuICAgICAgb2Zmc2V0ID0gaiA8PCAyO1xuICAgICAgYmxvY2sgPSBzW2ldO1xuICAgICAgYXJyYXlbb2Zmc2V0XSA9IGJsb2NrICYgMHhGRjtcbiAgICAgIGlmIChleHRyYUJ5dGVzID4gMSkge1xuICAgICAgICBhcnJheVtvZmZzZXQgKyAxXSA9IChibG9jayA+PiA4KSAmIDB4RkY7XG4gICAgICB9XG4gICAgICBpZiAoZXh0cmFCeXRlcyA+IDIpIHtcbiAgICAgICAgYXJyYXlbb2Zmc2V0ICsgMl0gPSAoYmxvY2sgPj4gMTYpICYgMHhGRjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEttYWMoYml0cywgcGFkZGluZywgb3V0cHV0Qml0cykge1xuICAgIEtlY2Nhay5jYWxsKHRoaXMsIGJpdHMsIHBhZGRpbmcsIG91dHB1dEJpdHMpO1xuICB9XG5cbiAgS21hYy5wcm90b3R5cGUgPSBuZXcgS2VjY2FrKCk7XG5cbiAgS21hYy5wcm90b3R5cGUuZmluYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbmNvZGUodGhpcy5vdXRwdXRCaXRzLCB0cnVlKTtcbiAgICByZXR1cm4gS2VjY2FrLnByb3RvdHlwZS5maW5hbGl6ZS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIHZhciBmID0gZnVuY3Rpb24gKHMpIHtcbiAgICB2YXIgaCwgbCwgbiwgYzAsIGMxLCBjMiwgYzMsIGM0LCBjNSwgYzYsIGM3LCBjOCwgYzksXG4gICAgICBiMCwgYjEsIGIyLCBiMywgYjQsIGI1LCBiNiwgYjcsIGI4LCBiOSwgYjEwLCBiMTEsIGIxMiwgYjEzLCBiMTQsIGIxNSwgYjE2LCBiMTcsXG4gICAgICBiMTgsIGIxOSwgYjIwLCBiMjEsIGIyMiwgYjIzLCBiMjQsIGIyNSwgYjI2LCBiMjcsIGIyOCwgYjI5LCBiMzAsIGIzMSwgYjMyLCBiMzMsXG4gICAgICBiMzQsIGIzNSwgYjM2LCBiMzcsIGIzOCwgYjM5LCBiNDAsIGI0MSwgYjQyLCBiNDMsIGI0NCwgYjQ1LCBiNDYsIGI0NywgYjQ4LCBiNDk7XG4gICAgZm9yIChuID0gMDsgbiA8IDQ4OyBuICs9IDIpIHtcbiAgICAgIGMwID0gc1swXSBeIHNbMTBdIF4gc1syMF0gXiBzWzMwXSBeIHNbNDBdO1xuICAgICAgYzEgPSBzWzFdIF4gc1sxMV0gXiBzWzIxXSBeIHNbMzFdIF4gc1s0MV07XG4gICAgICBjMiA9IHNbMl0gXiBzWzEyXSBeIHNbMjJdIF4gc1szMl0gXiBzWzQyXTtcbiAgICAgIGMzID0gc1szXSBeIHNbMTNdIF4gc1syM10gXiBzWzMzXSBeIHNbNDNdO1xuICAgICAgYzQgPSBzWzRdIF4gc1sxNF0gXiBzWzI0XSBeIHNbMzRdIF4gc1s0NF07XG4gICAgICBjNSA9IHNbNV0gXiBzWzE1XSBeIHNbMjVdIF4gc1szNV0gXiBzWzQ1XTtcbiAgICAgIGM2ID0gc1s2XSBeIHNbMTZdIF4gc1syNl0gXiBzWzM2XSBeIHNbNDZdO1xuICAgICAgYzcgPSBzWzddIF4gc1sxN10gXiBzWzI3XSBeIHNbMzddIF4gc1s0N107XG4gICAgICBjOCA9IHNbOF0gXiBzWzE4XSBeIHNbMjhdIF4gc1szOF0gXiBzWzQ4XTtcbiAgICAgIGM5ID0gc1s5XSBeIHNbMTldIF4gc1syOV0gXiBzWzM5XSBeIHNbNDldO1xuXG4gICAgICBoID0gYzggXiAoKGMyIDw8IDEpIHwgKGMzID4+PiAzMSkpO1xuICAgICAgbCA9IGM5IF4gKChjMyA8PCAxKSB8IChjMiA+Pj4gMzEpKTtcbiAgICAgIHNbMF0gXj0gaDtcbiAgICAgIHNbMV0gXj0gbDtcbiAgICAgIHNbMTBdIF49IGg7XG4gICAgICBzWzExXSBePSBsO1xuICAgICAgc1syMF0gXj0gaDtcbiAgICAgIHNbMjFdIF49IGw7XG4gICAgICBzWzMwXSBePSBoO1xuICAgICAgc1szMV0gXj0gbDtcbiAgICAgIHNbNDBdIF49IGg7XG4gICAgICBzWzQxXSBePSBsO1xuICAgICAgaCA9IGMwIF4gKChjNCA8PCAxKSB8IChjNSA+Pj4gMzEpKTtcbiAgICAgIGwgPSBjMSBeICgoYzUgPDwgMSkgfCAoYzQgPj4+IDMxKSk7XG4gICAgICBzWzJdIF49IGg7XG4gICAgICBzWzNdIF49IGw7XG4gICAgICBzWzEyXSBePSBoO1xuICAgICAgc1sxM10gXj0gbDtcbiAgICAgIHNbMjJdIF49IGg7XG4gICAgICBzWzIzXSBePSBsO1xuICAgICAgc1szMl0gXj0gaDtcbiAgICAgIHNbMzNdIF49IGw7XG4gICAgICBzWzQyXSBePSBoO1xuICAgICAgc1s0M10gXj0gbDtcbiAgICAgIGggPSBjMiBeICgoYzYgPDwgMSkgfCAoYzcgPj4+IDMxKSk7XG4gICAgICBsID0gYzMgXiAoKGM3IDw8IDEpIHwgKGM2ID4+PiAzMSkpO1xuICAgICAgc1s0XSBePSBoO1xuICAgICAgc1s1XSBePSBsO1xuICAgICAgc1sxNF0gXj0gaDtcbiAgICAgIHNbMTVdIF49IGw7XG4gICAgICBzWzI0XSBePSBoO1xuICAgICAgc1syNV0gXj0gbDtcbiAgICAgIHNbMzRdIF49IGg7XG4gICAgICBzWzM1XSBePSBsO1xuICAgICAgc1s0NF0gXj0gaDtcbiAgICAgIHNbNDVdIF49IGw7XG4gICAgICBoID0gYzQgXiAoKGM4IDw8IDEpIHwgKGM5ID4+PiAzMSkpO1xuICAgICAgbCA9IGM1IF4gKChjOSA8PCAxKSB8IChjOCA+Pj4gMzEpKTtcbiAgICAgIHNbNl0gXj0gaDtcbiAgICAgIHNbN10gXj0gbDtcbiAgICAgIHNbMTZdIF49IGg7XG4gICAgICBzWzE3XSBePSBsO1xuICAgICAgc1syNl0gXj0gaDtcbiAgICAgIHNbMjddIF49IGw7XG4gICAgICBzWzM2XSBePSBoO1xuICAgICAgc1szN10gXj0gbDtcbiAgICAgIHNbNDZdIF49IGg7XG4gICAgICBzWzQ3XSBePSBsO1xuICAgICAgaCA9IGM2IF4gKChjMCA8PCAxKSB8IChjMSA+Pj4gMzEpKTtcbiAgICAgIGwgPSBjNyBeICgoYzEgPDwgMSkgfCAoYzAgPj4+IDMxKSk7XG4gICAgICBzWzhdIF49IGg7XG4gICAgICBzWzldIF49IGw7XG4gICAgICBzWzE4XSBePSBoO1xuICAgICAgc1sxOV0gXj0gbDtcbiAgICAgIHNbMjhdIF49IGg7XG4gICAgICBzWzI5XSBePSBsO1xuICAgICAgc1szOF0gXj0gaDtcbiAgICAgIHNbMzldIF49IGw7XG4gICAgICBzWzQ4XSBePSBoO1xuICAgICAgc1s0OV0gXj0gbDtcblxuICAgICAgYjAgPSBzWzBdO1xuICAgICAgYjEgPSBzWzFdO1xuICAgICAgYjMyID0gKHNbMTFdIDw8IDQpIHwgKHNbMTBdID4+PiAyOCk7XG4gICAgICBiMzMgPSAoc1sxMF0gPDwgNCkgfCAoc1sxMV0gPj4+IDI4KTtcbiAgICAgIGIxNCA9IChzWzIwXSA8PCAzKSB8IChzWzIxXSA+Pj4gMjkpO1xuICAgICAgYjE1ID0gKHNbMjFdIDw8IDMpIHwgKHNbMjBdID4+PiAyOSk7XG4gICAgICBiNDYgPSAoc1szMV0gPDwgOSkgfCAoc1szMF0gPj4+IDIzKTtcbiAgICAgIGI0NyA9IChzWzMwXSA8PCA5KSB8IChzWzMxXSA+Pj4gMjMpO1xuICAgICAgYjI4ID0gKHNbNDBdIDw8IDE4KSB8IChzWzQxXSA+Pj4gMTQpO1xuICAgICAgYjI5ID0gKHNbNDFdIDw8IDE4KSB8IChzWzQwXSA+Pj4gMTQpO1xuICAgICAgYjIwID0gKHNbMl0gPDwgMSkgfCAoc1szXSA+Pj4gMzEpO1xuICAgICAgYjIxID0gKHNbM10gPDwgMSkgfCAoc1syXSA+Pj4gMzEpO1xuICAgICAgYjIgPSAoc1sxM10gPDwgMTIpIHwgKHNbMTJdID4+PiAyMCk7XG4gICAgICBiMyA9IChzWzEyXSA8PCAxMikgfCAoc1sxM10gPj4+IDIwKTtcbiAgICAgIGIzNCA9IChzWzIyXSA8PCAxMCkgfCAoc1syM10gPj4+IDIyKTtcbiAgICAgIGIzNSA9IChzWzIzXSA8PCAxMCkgfCAoc1syMl0gPj4+IDIyKTtcbiAgICAgIGIxNiA9IChzWzMzXSA8PCAxMykgfCAoc1szMl0gPj4+IDE5KTtcbiAgICAgIGIxNyA9IChzWzMyXSA8PCAxMykgfCAoc1szM10gPj4+IDE5KTtcbiAgICAgIGI0OCA9IChzWzQyXSA8PCAyKSB8IChzWzQzXSA+Pj4gMzApO1xuICAgICAgYjQ5ID0gKHNbNDNdIDw8IDIpIHwgKHNbNDJdID4+PiAzMCk7XG4gICAgICBiNDAgPSAoc1s1XSA8PCAzMCkgfCAoc1s0XSA+Pj4gMik7XG4gICAgICBiNDEgPSAoc1s0XSA8PCAzMCkgfCAoc1s1XSA+Pj4gMik7XG4gICAgICBiMjIgPSAoc1sxNF0gPDwgNikgfCAoc1sxNV0gPj4+IDI2KTtcbiAgICAgIGIyMyA9IChzWzE1XSA8PCA2KSB8IChzWzE0XSA+Pj4gMjYpO1xuICAgICAgYjQgPSAoc1syNV0gPDwgMTEpIHwgKHNbMjRdID4+PiAyMSk7XG4gICAgICBiNSA9IChzWzI0XSA8PCAxMSkgfCAoc1syNV0gPj4+IDIxKTtcbiAgICAgIGIzNiA9IChzWzM0XSA8PCAxNSkgfCAoc1szNV0gPj4+IDE3KTtcbiAgICAgIGIzNyA9IChzWzM1XSA8PCAxNSkgfCAoc1szNF0gPj4+IDE3KTtcbiAgICAgIGIxOCA9IChzWzQ1XSA8PCAyOSkgfCAoc1s0NF0gPj4+IDMpO1xuICAgICAgYjE5ID0gKHNbNDRdIDw8IDI5KSB8IChzWzQ1XSA+Pj4gMyk7XG4gICAgICBiMTAgPSAoc1s2XSA8PCAyOCkgfCAoc1s3XSA+Pj4gNCk7XG4gICAgICBiMTEgPSAoc1s3XSA8PCAyOCkgfCAoc1s2XSA+Pj4gNCk7XG4gICAgICBiNDIgPSAoc1sxN10gPDwgMjMpIHwgKHNbMTZdID4+PiA5KTtcbiAgICAgIGI0MyA9IChzWzE2XSA8PCAyMykgfCAoc1sxN10gPj4+IDkpO1xuICAgICAgYjI0ID0gKHNbMjZdIDw8IDI1KSB8IChzWzI3XSA+Pj4gNyk7XG4gICAgICBiMjUgPSAoc1syN10gPDwgMjUpIHwgKHNbMjZdID4+PiA3KTtcbiAgICAgIGI2ID0gKHNbMzZdIDw8IDIxKSB8IChzWzM3XSA+Pj4gMTEpO1xuICAgICAgYjcgPSAoc1szN10gPDwgMjEpIHwgKHNbMzZdID4+PiAxMSk7XG4gICAgICBiMzggPSAoc1s0N10gPDwgMjQpIHwgKHNbNDZdID4+PiA4KTtcbiAgICAgIGIzOSA9IChzWzQ2XSA8PCAyNCkgfCAoc1s0N10gPj4+IDgpO1xuICAgICAgYjMwID0gKHNbOF0gPDwgMjcpIHwgKHNbOV0gPj4+IDUpO1xuICAgICAgYjMxID0gKHNbOV0gPDwgMjcpIHwgKHNbOF0gPj4+IDUpO1xuICAgICAgYjEyID0gKHNbMThdIDw8IDIwKSB8IChzWzE5XSA+Pj4gMTIpO1xuICAgICAgYjEzID0gKHNbMTldIDw8IDIwKSB8IChzWzE4XSA+Pj4gMTIpO1xuICAgICAgYjQ0ID0gKHNbMjldIDw8IDcpIHwgKHNbMjhdID4+PiAyNSk7XG4gICAgICBiNDUgPSAoc1syOF0gPDwgNykgfCAoc1syOV0gPj4+IDI1KTtcbiAgICAgIGIyNiA9IChzWzM4XSA8PCA4KSB8IChzWzM5XSA+Pj4gMjQpO1xuICAgICAgYjI3ID0gKHNbMzldIDw8IDgpIHwgKHNbMzhdID4+PiAyNCk7XG4gICAgICBiOCA9IChzWzQ4XSA8PCAxNCkgfCAoc1s0OV0gPj4+IDE4KTtcbiAgICAgIGI5ID0gKHNbNDldIDw8IDE0KSB8IChzWzQ4XSA+Pj4gMTgpO1xuXG4gICAgICBzWzBdID0gYjAgXiAofmIyICYgYjQpO1xuICAgICAgc1sxXSA9IGIxIF4gKH5iMyAmIGI1KTtcbiAgICAgIHNbMTBdID0gYjEwIF4gKH5iMTIgJiBiMTQpO1xuICAgICAgc1sxMV0gPSBiMTEgXiAofmIxMyAmIGIxNSk7XG4gICAgICBzWzIwXSA9IGIyMCBeICh+YjIyICYgYjI0KTtcbiAgICAgIHNbMjFdID0gYjIxIF4gKH5iMjMgJiBiMjUpO1xuICAgICAgc1szMF0gPSBiMzAgXiAofmIzMiAmIGIzNCk7XG4gICAgICBzWzMxXSA9IGIzMSBeICh+YjMzICYgYjM1KTtcbiAgICAgIHNbNDBdID0gYjQwIF4gKH5iNDIgJiBiNDQpO1xuICAgICAgc1s0MV0gPSBiNDEgXiAofmI0MyAmIGI0NSk7XG4gICAgICBzWzJdID0gYjIgXiAofmI0ICYgYjYpO1xuICAgICAgc1szXSA9IGIzIF4gKH5iNSAmIGI3KTtcbiAgICAgIHNbMTJdID0gYjEyIF4gKH5iMTQgJiBiMTYpO1xuICAgICAgc1sxM10gPSBiMTMgXiAofmIxNSAmIGIxNyk7XG4gICAgICBzWzIyXSA9IGIyMiBeICh+YjI0ICYgYjI2KTtcbiAgICAgIHNbMjNdID0gYjIzIF4gKH5iMjUgJiBiMjcpO1xuICAgICAgc1szMl0gPSBiMzIgXiAofmIzNCAmIGIzNik7XG4gICAgICBzWzMzXSA9IGIzMyBeICh+YjM1ICYgYjM3KTtcbiAgICAgIHNbNDJdID0gYjQyIF4gKH5iNDQgJiBiNDYpO1xuICAgICAgc1s0M10gPSBiNDMgXiAofmI0NSAmIGI0Nyk7XG4gICAgICBzWzRdID0gYjQgXiAofmI2ICYgYjgpO1xuICAgICAgc1s1XSA9IGI1IF4gKH5iNyAmIGI5KTtcbiAgICAgIHNbMTRdID0gYjE0IF4gKH5iMTYgJiBiMTgpO1xuICAgICAgc1sxNV0gPSBiMTUgXiAofmIxNyAmIGIxOSk7XG4gICAgICBzWzI0XSA9IGIyNCBeICh+YjI2ICYgYjI4KTtcbiAgICAgIHNbMjVdID0gYjI1IF4gKH5iMjcgJiBiMjkpO1xuICAgICAgc1szNF0gPSBiMzQgXiAofmIzNiAmIGIzOCk7XG4gICAgICBzWzM1XSA9IGIzNSBeICh+YjM3ICYgYjM5KTtcbiAgICAgIHNbNDRdID0gYjQ0IF4gKH5iNDYgJiBiNDgpO1xuICAgICAgc1s0NV0gPSBiNDUgXiAofmI0NyAmIGI0OSk7XG4gICAgICBzWzZdID0gYjYgXiAofmI4ICYgYjApO1xuICAgICAgc1s3XSA9IGI3IF4gKH5iOSAmIGIxKTtcbiAgICAgIHNbMTZdID0gYjE2IF4gKH5iMTggJiBiMTApO1xuICAgICAgc1sxN10gPSBiMTcgXiAofmIxOSAmIGIxMSk7XG4gICAgICBzWzI2XSA9IGIyNiBeICh+YjI4ICYgYjIwKTtcbiAgICAgIHNbMjddID0gYjI3IF4gKH5iMjkgJiBiMjEpO1xuICAgICAgc1szNl0gPSBiMzYgXiAofmIzOCAmIGIzMCk7XG4gICAgICBzWzM3XSA9IGIzNyBeICh+YjM5ICYgYjMxKTtcbiAgICAgIHNbNDZdID0gYjQ2IF4gKH5iNDggJiBiNDApO1xuICAgICAgc1s0N10gPSBiNDcgXiAofmI0OSAmIGI0MSk7XG4gICAgICBzWzhdID0gYjggXiAofmIwICYgYjIpO1xuICAgICAgc1s5XSA9IGI5IF4gKH5iMSAmIGIzKTtcbiAgICAgIHNbMThdID0gYjE4IF4gKH5iMTAgJiBiMTIpO1xuICAgICAgc1sxOV0gPSBiMTkgXiAofmIxMSAmIGIxMyk7XG4gICAgICBzWzI4XSA9IGIyOCBeICh+YjIwICYgYjIyKTtcbiAgICAgIHNbMjldID0gYjI5IF4gKH5iMjEgJiBiMjMpO1xuICAgICAgc1szOF0gPSBiMzggXiAofmIzMCAmIGIzMik7XG4gICAgICBzWzM5XSA9IGIzOSBeICh+YjMxICYgYjMzKTtcbiAgICAgIHNbNDhdID0gYjQ4IF4gKH5iNDAgJiBiNDIpO1xuICAgICAgc1s0OV0gPSBiNDkgXiAofmI0MSAmIGI0Myk7XG5cbiAgICAgIHNbMF0gXj0gUkNbbl07XG4gICAgICBzWzFdIF49IFJDW24gKyAxXTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKENPTU1PTl9KUykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gbWV0aG9kcztcbiAgfSBlbHNlIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbWV0aG9kTmFtZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHJvb3RbbWV0aG9kTmFtZXNbaV1dID0gbWV0aG9kc1ttZXRob2ROYW1lc1tpXV07XG4gICAgfVxuICAgIGlmIChBTUQpIHtcbiAgICAgIGRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBtZXRob2RzO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59KSgpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBzaGEzIGZyb20gXCJqcy1zaGEzXCI7XG5cbmltcG9ydCB7IGFycmF5aWZ5LCBCeXRlc0xpa2UgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGtlY2NhazI1NihkYXRhOiBCeXRlc0xpa2UpOiBzdHJpbmcge1xuICAgIHJldHVybiAnMHgnICsgc2hhMy5rZWNjYWtfMjU2KGFycmF5aWZ5KGRhdGEpKTtcbn1cbiIsImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJhZGRyZXNzLzUuNy4wXCI7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZ2V0QWRkcmVzcyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hZGRyZXNzXCI7XG5pbXBvcnQgeyBoZXhaZXJvUGFkIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5cbmltcG9ydCB7IENvZGVyLCBSZWFkZXIsIFdyaXRlciB9IGZyb20gXCIuL2Fic3RyYWN0LWNvZGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBBZGRyZXNzQ29kZXIgZXh0ZW5kcyBDb2RlciB7XG5cbiAgICBjb25zdHJ1Y3Rvcihsb2NhbE5hbWU6IHN0cmluZykge1xuICAgICAgICBzdXBlcihcImFkZHJlc3NcIiwgXCJhZGRyZXNzXCIsIGxvY2FsTmFtZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGRlZmF1bHRWYWx1ZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCIweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIjtcbiAgICB9XG5cbiAgICBlbmNvZGUod3JpdGVyOiBXcml0ZXIsIHZhbHVlOiBzdHJpbmcpOiBudW1iZXIge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFsdWUgPSBnZXRBZGRyZXNzKHZhbHVlKVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5fdGhyb3dFcnJvcihlcnJvci5tZXNzYWdlLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlci53cml0ZVZhbHVlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBkZWNvZGUocmVhZGVyOiBSZWFkZXIpOiBhbnkge1xuICAgICAgICByZXR1cm4gZ2V0QWRkcmVzcyhoZXhaZXJvUGFkKHJlYWRlci5yZWFkVmFsdWUoKS50b0hleFN0cmluZygpLCAyMCkpO1xuICAgIH1cbn1cblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5cbmltcG9ydCB7IENvZGVyLCBSZWFkZXIsIFJlc3VsdCwgV3JpdGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXJcIjtcbmltcG9ydCB7IEFub255bW91c0NvZGVyIH0gZnJvbSBcIi4vYW5vbnltb3VzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWNrKHdyaXRlcjogV3JpdGVyLCBjb2RlcnM6IFJlYWRvbmx5QXJyYXk8Q29kZXI+LCB2YWx1ZXM6IEFycmF5PGFueT4gfCB7IFsgbmFtZTogc3RyaW5nIF06IGFueSB9KTogbnVtYmVyIHtcbiAgICBsZXQgYXJyYXlWYWx1ZXM6IEFycmF5PGFueT4gPSBudWxsO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xuICAgICAgIGFycmF5VmFsdWVzID0gdmFsdWVzO1xuXG4gICAgfSBlbHNlIGlmICh2YWx1ZXMgJiYgdHlwZW9mKHZhbHVlcykgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgbGV0IHVuaXF1ZTogeyBbIG5hbWU6IHN0cmluZyBdOiBib29sZWFuIH0gPSB7IH07XG5cbiAgICAgICAgYXJyYXlWYWx1ZXMgPSBjb2RlcnMubWFwKChjb2RlcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGNvZGVyLmxvY2FsTmFtZTtcbiAgICAgICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiY2Fubm90IGVuY29kZSBvYmplY3QgZm9yIHNpZ25hdHVyZSB3aXRoIG1pc3NpbmcgbmFtZXNcIiwgTG9nZ2VyLmVycm9ycy5JTlZBTElEX0FSR1VNRU5ULCB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50OiBcInZhbHVlc1wiLFxuICAgICAgICAgICAgICAgICAgICBjb2RlcjogY29kZXIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHVuaXF1ZVtuYW1lXSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiY2Fubm90IGVuY29kZSBvYmplY3QgZm9yIHNpZ25hdHVyZSB3aXRoIGR1cGxpY2F0ZSBuYW1lc1wiLCBMb2dnZXIuZXJyb3JzLklOVkFMSURfQVJHVU1FTlQsIHtcbiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnQ6IFwidmFsdWVzXCIsXG4gICAgICAgICAgICAgICAgICAgIGNvZGVyOiBjb2RlcixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB1bmlxdWVbbmFtZV0gPSB0cnVlO1xuXG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzW25hbWVdO1xuICAgICAgICB9KTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHR1cGxlIHZhbHVlXCIsIFwidHVwbGVcIiwgdmFsdWVzKTtcbiAgICB9XG5cbiAgICBpZiAoY29kZXJzLmxlbmd0aCAhPT0gYXJyYXlWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ0eXBlcy92YWx1ZSBsZW5ndGggbWlzbWF0Y2hcIiwgXCJ0dXBsZVwiLCB2YWx1ZXMpO1xuICAgIH1cblxuICAgIGxldCBzdGF0aWNXcml0ZXIgPSBuZXcgV3JpdGVyKHdyaXRlci53b3JkU2l6ZSk7XG4gICAgbGV0IGR5bmFtaWNXcml0ZXIgPSBuZXcgV3JpdGVyKHdyaXRlci53b3JkU2l6ZSk7XG5cbiAgICBsZXQgdXBkYXRlRnVuY3M6IEFycmF5PChiYXNlT2Zmc2V0OiBudW1iZXIpID0+IHZvaWQ+ID0gW107XG4gICAgY29kZXJzLmZvckVhY2goKGNvZGVyLCBpbmRleCkgPT4ge1xuICAgICAgICBsZXQgdmFsdWUgPSBhcnJheVZhbHVlc1tpbmRleF07XG5cbiAgICAgICAgaWYgKGNvZGVyLmR5bmFtaWMpIHtcbiAgICAgICAgICAgIC8vIEdldCBjdXJyZW50IGR5bmFtaWMgb2Zmc2V0IChmb3IgdGhlIGZ1dHVyZSBwb2ludGVyKVxuICAgICAgICAgICAgbGV0IGR5bmFtaWNPZmZzZXQgPSBkeW5hbWljV3JpdGVyLmxlbmd0aDtcblxuICAgICAgICAgICAgLy8gRW5jb2RlIHRoZSBkeW5hbWljIHZhbHVlIGludG8gdGhlIGR5bmFtaWNXcml0ZXJcbiAgICAgICAgICAgIGNvZGVyLmVuY29kZShkeW5hbWljV3JpdGVyLCB2YWx1ZSk7XG5cbiAgICAgICAgICAgIC8vIFByZXBhcmUgdG8gcG9wdWxhdGUgdGhlIGNvcnJlY3Qgb2Zmc2V0IG9uY2Ugd2UgYXJlIGRvbmVcbiAgICAgICAgICAgIGxldCB1cGRhdGVGdW5jID0gc3RhdGljV3JpdGVyLndyaXRlVXBkYXRhYmxlVmFsdWUoKTtcbiAgICAgICAgICAgIHVwZGF0ZUZ1bmNzLnB1c2goKGJhc2VPZmZzZXQ6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgIHVwZGF0ZUZ1bmMoYmFzZU9mZnNldCArIGR5bmFtaWNPZmZzZXQpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvZGVyLmVuY29kZShzdGF0aWNXcml0ZXIsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gQmFja2ZpbGwgYWxsIHRoZSBkeW5hbWljIG9mZnNldHMsIG5vdyB0aGF0IHdlIGtub3cgdGhlIHN0YXRpYyBsZW5ndGhcbiAgICB1cGRhdGVGdW5jcy5mb3JFYWNoKChmdW5jKSA9PiB7IGZ1bmMoc3RhdGljV3JpdGVyLmxlbmd0aCk7IH0pO1xuXG4gICAgbGV0IGxlbmd0aCA9IHdyaXRlci5hcHBlbmRXcml0ZXIoc3RhdGljV3JpdGVyKTtcbiAgICBsZW5ndGggKz0gd3JpdGVyLmFwcGVuZFdyaXRlcihkeW5hbWljV3JpdGVyKTtcbiAgICByZXR1cm4gbGVuZ3RoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5wYWNrKHJlYWRlcjogUmVhZGVyLCBjb2RlcnM6IEFycmF5PENvZGVyPik6IFJlc3VsdCB7XG4gICAgbGV0IHZhbHVlczogYW55ID0gW107XG5cbiAgICAvLyBBIHJlYWRlciBhbmNob3JlZCB0byB0aGlzIGJhc2VcbiAgICBsZXQgYmFzZVJlYWRlciA9IHJlYWRlci5zdWJSZWFkZXIoMCk7XG5cbiAgICBjb2RlcnMuZm9yRWFjaCgoY29kZXIpID0+IHtcbiAgICAgICAgbGV0IHZhbHVlOiBhbnkgPSBudWxsO1xuXG4gICAgICAgIGlmIChjb2Rlci5keW5hbWljKSB7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gcmVhZGVyLnJlYWRWYWx1ZSgpO1xuICAgICAgICAgICAgbGV0IG9mZnNldFJlYWRlciA9IGJhc2VSZWFkZXIuc3ViUmVhZGVyKG9mZnNldC50b051bWJlcigpKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBjb2Rlci5kZWNvZGUob2Zmc2V0UmVhZGVyKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2Fubm90IHJlY292ZXIgZnJvbSB0aGlzXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IExvZ2dlci5lcnJvcnMuQlVGRkVSX09WRVJSVU4pIHsgdGhyb3cgZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGVycm9yO1xuICAgICAgICAgICAgICAgIHZhbHVlLmJhc2VUeXBlID0gY29kZXIubmFtZTtcbiAgICAgICAgICAgICAgICB2YWx1ZS5uYW1lID0gY29kZXIubG9jYWxOYW1lO1xuICAgICAgICAgICAgICAgIHZhbHVlLnR5cGUgPSBjb2Rlci50eXBlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gY29kZXIuZGVjb2RlKHJlYWRlcik7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIENhbm5vdCByZWNvdmVyIGZyb20gdGhpc1xuICAgICAgICAgICAgICAgIGlmIChlcnJvci5jb2RlID09PSBMb2dnZXIuZXJyb3JzLkJVRkZFUl9PVkVSUlVOKSB7IHRocm93IGVycm9yOyB9XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICB2YWx1ZS5iYXNlVHlwZSA9IGNvZGVyLm5hbWU7XG4gICAgICAgICAgICAgICAgdmFsdWUubmFtZSA9IGNvZGVyLmxvY2FsTmFtZTtcbiAgICAgICAgICAgICAgICB2YWx1ZS50eXBlID0gY29kZXIudHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gV2Ugb25seSBvdXRwdXQgbmFtZWQgcHJvcGVydGllcyBmb3IgdW5pcXVlbHkgbmFtZWQgY29kZXJzXG4gICAgY29uc3QgdW5pcXVlTmFtZXMgPSBjb2RlcnMucmVkdWNlKChhY2N1bSwgY29kZXIpID0+IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGNvZGVyLmxvY2FsTmFtZTtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgIGlmICghYWNjdW1bbmFtZV0pIHsgYWNjdW1bbmFtZV0gPSAwOyB9XG4gICAgICAgICAgICBhY2N1bVtuYW1lXSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2N1bTtcbiAgICB9LCA8eyBbIG5hbWU6IHN0cmluZyBdOiBudW1iZXIgfT57IH0pO1xuXG4gICAgLy8gQWRkIGFueSBuYW1lZCBwYXJhbWV0ZXJzIChpLmUuIHR1cGxlcylcbiAgICBjb2RlcnMuZm9yRWFjaCgoY29kZXI6IENvZGVyLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGxldCBuYW1lID0gY29kZXIubG9jYWxOYW1lO1xuICAgICAgICBpZiAoIW5hbWUgfHwgdW5pcXVlTmFtZXNbbmFtZV0gIT09IDEpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgaWYgKG5hbWUgPT09IFwibGVuZ3RoXCIpIHsgbmFtZSA9IFwiX2xlbmd0aFwiOyB9XG5cbiAgICAgICAgaWYgKHZhbHVlc1tuYW1lXSAhPSBudWxsKSB7IHJldHVybjsgfVxuXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2luZGV4XTtcblxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbHVlcywgbmFtZSwge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiB7IHRocm93IHZhbHVlOyB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1tpXTtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWx1ZXMsIGksIHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogKCkgPT4geyB0aHJvdyB2YWx1ZTsgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh2YWx1ZXMpO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBBcnJheUNvZGVyIGV4dGVuZHMgQ29kZXIge1xuICAgIHJlYWRvbmx5IGNvZGVyOiBDb2RlcjtcbiAgICByZWFkb25seSBsZW5ndGg6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGNvZGVyOiBDb2RlciwgbGVuZ3RoOiBudW1iZXIsIGxvY2FsTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSAoY29kZXIudHlwZSArIFwiW1wiICsgKGxlbmd0aCA+PSAwID8gbGVuZ3RoOiBcIlwiKSArIFwiXVwiKTtcbiAgICAgICAgY29uc3QgZHluYW1pYyA9IChsZW5ndGggPT09IC0xIHx8IGNvZGVyLmR5bmFtaWMpO1xuICAgICAgICBzdXBlcihcImFycmF5XCIsIHR5cGUsIGxvY2FsTmFtZSwgZHluYW1pYyk7XG5cbiAgICAgICAgdGhpcy5jb2RlciA9IGNvZGVyO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICB9XG5cbiAgICBkZWZhdWx0VmFsdWUoKTogQXJyYXk8YW55PiB7XG4gICAgICAgIC8vIFZlcmlmaWVzIHRoZSBjaGlsZCBjb2RlciBpcyB2YWxpZCAoZXZlbiBpZiB0aGUgYXJyYXkgaXMgZHluYW1pYyBvciAwLWxlbmd0aClcbiAgICAgICAgY29uc3QgZGVmYXVsdENoaWxkID0gdGhpcy5jb2Rlci5kZWZhdWx0VmFsdWUoKTtcblxuICAgICAgICBjb25zdCByZXN1bHQ6IEFycmF5PGFueT4gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChkZWZhdWx0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZW5jb2RlKHdyaXRlcjogV3JpdGVyLCB2YWx1ZTogQXJyYXk8YW55Pik6IG51bWJlciB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rocm93RXJyb3IoXCJleHBlY3RlZCBhcnJheSB2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY291bnQgPSB0aGlzLmxlbmd0aDtcblxuICAgICAgICBpZiAoY291bnQgPT09IC0xKSB7XG4gICAgICAgICAgICBjb3VudCA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICAgIHdyaXRlci53cml0ZVZhbHVlKHZhbHVlLmxlbmd0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBsb2dnZXIuY2hlY2tBcmd1bWVudENvdW50KHZhbHVlLmxlbmd0aCwgY291bnQsIFwiY29kZXIgYXJyYXlcIiArICh0aGlzLmxvY2FsTmFtZT8gKFwiIFwiKyB0aGlzLmxvY2FsTmFtZSk6IFwiXCIpKTtcblxuICAgICAgICBsZXQgY29kZXJzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHsgY29kZXJzLnB1c2godGhpcy5jb2Rlcik7IH1cblxuICAgICAgICByZXR1cm4gcGFjayh3cml0ZXIsIGNvZGVycywgdmFsdWUpO1xuICAgIH1cblxuICAgIGRlY29kZShyZWFkZXI6IFJlYWRlcik6IGFueSB7XG4gICAgICAgIGxldCBjb3VudCA9IHRoaXMubGVuZ3RoO1xuICAgICAgICBpZiAoY291bnQgPT09IC0xKSB7XG4gICAgICAgICAgICBjb3VudCA9IHJlYWRlci5yZWFkVmFsdWUoKS50b051bWJlcigpO1xuXG4gICAgICAgICAgICAvLyBDaGVjayB0aGF0IHRoZXJlIGlzICpyb3VnaGx5KiBlbm91Z2ggZGF0YSB0byBlbnN1cmVcbiAgICAgICAgICAgIC8vIHN0cmF5IHJhbmRvbSBkYXRhIGlzIG5vdCBiZWluZyByZWFkIGFzIGEgbGVuZ3RoLiBFYWNoXG4gICAgICAgICAgICAvLyBzbG90IHJlcXVpcmVzIGF0IGxlYXN0IDMyIGJ5dGVzIGZvciB0aGVpciB2YWx1ZSAob3IgMzJcbiAgICAgICAgICAgIC8vIGJ5dGVzIGFzIGEgbGluayB0byB0aGUgZGF0YSkuIFRoaXMgY291bGQgdXNlIGEgbXVjaFxuICAgICAgICAgICAgLy8gdGlnaHRlciBib3VuZCwgYnV0IHdlIGFyZSBlcnJvcmluZyBvbiB0aGUgc2lkZSBvZiBzYWZldHkuXG4gICAgICAgICAgICBpZiAoY291bnQgKiAzMiA+IHJlYWRlci5fZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImluc3VmZmljaWVudCBkYXRhIGxlbmd0aFwiLCBMb2dnZXIuZXJyb3JzLkJVRkZFUl9PVkVSUlVOLCB7XG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogcmVhZGVyLl9kYXRhLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgY291bnQ6IGNvdW50XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvZGVycyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHsgY29kZXJzLnB1c2gobmV3IEFub255bW91c0NvZGVyKHRoaXMuY29kZXIpKTsgfVxuXG4gICAgICAgIHJldHVybiByZWFkZXIuY29lcmNlKHRoaXMubmFtZSwgdW5wYWNrKHJlYWRlciwgY29kZXJzKSk7XG4gICAgfVxufVxuXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgQ29kZXIsIFJlYWRlciwgV3JpdGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXJcIjtcblxuLy8gQ2xvbmVzIHRoZSBmdW5jdGlvbmFsaXR5IG9mIGFuIGV4aXN0aW5nIENvZGVyLCBidXQgd2l0aG91dCBhIGxvY2FsTmFtZVxuZXhwb3J0IGNsYXNzIEFub255bW91c0NvZGVyIGV4dGVuZHMgQ29kZXIge1xuICAgIHByaXZhdGUgY29kZXI6IENvZGVyO1xuXG4gICAgY29uc3RydWN0b3IoY29kZXI6IENvZGVyKSB7XG4gICAgICAgIHN1cGVyKGNvZGVyLm5hbWUsIGNvZGVyLnR5cGUsIHVuZGVmaW5lZCwgY29kZXIuZHluYW1pYyk7XG4gICAgICAgIHRoaXMuY29kZXIgPSBjb2RlcjtcbiAgICB9XG5cbiAgICBkZWZhdWx0VmFsdWUoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29kZXIuZGVmYXVsdFZhbHVlKCk7XG4gICAgfVxuXG4gICAgZW5jb2RlKHdyaXRlcjogV3JpdGVyLCB2YWx1ZTogYW55KTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29kZXIuZW5jb2RlKHdyaXRlciwgdmFsdWUpO1xuICAgIH1cblxuICAgIGRlY29kZShyZWFkZXI6IFJlYWRlcik6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvZGVyLmRlY29kZShyZWFkZXIpO1xuICAgIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBDb2RlciwgUmVhZGVyLCBXcml0ZXIgfSBmcm9tIFwiLi9hYnN0cmFjdC1jb2RlclwiO1xuXG5leHBvcnQgY2xhc3MgQm9vbGVhbkNvZGVyIGV4dGVuZHMgQ29kZXIge1xuXG4gICAgY29uc3RydWN0b3IobG9jYWxOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoXCJib29sXCIsIFwiYm9vbFwiLCBsb2NhbE5hbWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBkZWZhdWx0VmFsdWUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBlbmNvZGUod3JpdGVyOiBXcml0ZXIsIHZhbHVlOiBib29sZWFuKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHdyaXRlci53cml0ZVZhbHVlKHZhbHVlID8gMTogMCk7XG4gICAgfVxuXG4gICAgZGVjb2RlKHJlYWRlcjogUmVhZGVyKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHJlYWRlci5jb2VyY2UodGhpcy50eXBlLCAhcmVhZGVyLnJlYWRWYWx1ZSgpLmlzWmVybygpKTtcbiAgICB9XG59XG5cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheWlmeSwgaGV4bGlmeSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuXG5pbXBvcnQgeyBDb2RlciwgUmVhZGVyLCBXcml0ZXIgfSBmcm9tIFwiLi9hYnN0cmFjdC1jb2RlclwiO1xuXG5leHBvcnQgY2xhc3MgRHluYW1pY0J5dGVzQ29kZXIgZXh0ZW5kcyBDb2RlciB7XG4gICAgY29uc3RydWN0b3IodHlwZTogc3RyaW5nLCBsb2NhbE5hbWU6IHN0cmluZykge1xuICAgICAgIHN1cGVyKHR5cGUsIHR5cGUsIGxvY2FsTmFtZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgZGVmYXVsdFZhbHVlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIjB4XCI7XG4gICAgfVxuXG4gICAgZW5jb2RlKHdyaXRlcjogV3JpdGVyLCB2YWx1ZTogYW55KTogbnVtYmVyIHtcbiAgICAgICAgdmFsdWUgPSBhcnJheWlmeSh2YWx1ZSk7XG4gICAgICAgIGxldCBsZW5ndGggPSB3cml0ZXIud3JpdGVWYWx1ZSh2YWx1ZS5sZW5ndGgpO1xuICAgICAgICBsZW5ndGggKz0gd3JpdGVyLndyaXRlQnl0ZXModmFsdWUpO1xuICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cblxuICAgIGRlY29kZShyZWFkZXI6IFJlYWRlcik6IGFueSB7XG4gICAgICAgIHJldHVybiByZWFkZXIucmVhZEJ5dGVzKHJlYWRlci5yZWFkVmFsdWUoKS50b051bWJlcigpLCB0cnVlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCeXRlc0NvZGVyIGV4dGVuZHMgRHluYW1pY0J5dGVzQ29kZXIge1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKFwiYnl0ZXNcIiwgbG9jYWxOYW1lKTtcbiAgICB9XG5cbiAgICBkZWNvZGUocmVhZGVyOiBSZWFkZXIpOiBhbnkge1xuICAgICAgICByZXR1cm4gcmVhZGVyLmNvZXJjZSh0aGlzLm5hbWUsIGhleGxpZnkoc3VwZXIuZGVjb2RlKHJlYWRlcikpKTtcbiAgICB9XG59XG5cblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5aWZ5LCBCeXRlc0xpa2UsIGhleGxpZnkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcblxuaW1wb3J0IHsgQ29kZXIsIFJlYWRlciwgV3JpdGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXJcIjtcblxuLy8gQFRPRE86IE1lcmdlIHRoaXMgd2l0aCBieXRlc1xuZXhwb3J0IGNsYXNzIEZpeGVkQnl0ZXNDb2RlciBleHRlbmRzIENvZGVyIHtcbiAgICByZWFkb25seSBzaXplOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihzaXplOiBudW1iZXIsIGxvY2FsTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGxldCBuYW1lID0gXCJieXRlc1wiICsgU3RyaW5nKHNpemUpO1xuICAgICAgICBzdXBlcihuYW1lLCBuYW1lLCBsb2NhbE5hbWUsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICB9XG5cbiAgICBkZWZhdWx0VmFsdWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIChcIjB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiKS5zdWJzdHJpbmcoMCwgMiArIHRoaXMuc2l6ZSAqIDIpO1xuICAgIH1cblxuICAgIGVuY29kZSh3cml0ZXI6IFdyaXRlciwgdmFsdWU6IEJ5dGVzTGlrZSk6IG51bWJlciB7XG4gICAgICAgIGxldCBkYXRhID0gYXJyYXlpZnkodmFsdWUpO1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggIT09IHRoaXMuc2l6ZSkgeyB0aGlzLl90aHJvd0Vycm9yKFwiaW5jb3JyZWN0IGRhdGEgbGVuZ3RoXCIsIHZhbHVlKTsgfVxuICAgICAgICByZXR1cm4gd3JpdGVyLndyaXRlQnl0ZXMoZGF0YSk7XG4gICAgfVxuXG4gICAgZGVjb2RlKHJlYWRlcjogUmVhZGVyKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHJlYWRlci5jb2VyY2UodGhpcy5uYW1lLCBoZXhsaWZ5KHJlYWRlci5yZWFkQnl0ZXModGhpcy5zaXplKSkpO1xuICAgIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBDb2RlciwgUmVhZGVyLCBXcml0ZXIgfSBmcm9tIFwiLi9hYnN0cmFjdC1jb2RlclwiO1xuXG5leHBvcnQgY2xhc3MgTnVsbENvZGVyIGV4dGVuZHMgQ29kZXIge1xuXG4gICAgY29uc3RydWN0b3IobG9jYWxOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoXCJudWxsXCIsIFwiXCIsIGxvY2FsTmFtZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGRlZmF1bHRWYWx1ZSgpOiBudWxsIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZW5jb2RlKHdyaXRlcjogV3JpdGVyLCB2YWx1ZTogYW55KTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHsgdGhpcy5fdGhyb3dFcnJvcihcIm5vdCBudWxsXCIsIHZhbHVlKTsgfVxuICAgICAgICByZXR1cm4gd3JpdGVyLndyaXRlQnl0ZXMoWyBdKTtcbiAgICB9XG5cbiAgICBkZWNvZGUocmVhZGVyOiBSZWFkZXIpOiBhbnkge1xuICAgICAgICByZWFkZXIucmVhZEJ5dGVzKDApO1xuICAgICAgICByZXR1cm4gcmVhZGVyLmNvZXJjZSh0aGlzLm5hbWUsIG51bGwpO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBBZGRyZXNzWmVybyA9IFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCI7XG5cbiIsImltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iaWdudW1iZXJcIjtcblxuY29uc3QgTmVnYXRpdmVPbmU6IEJpZ051bWJlciA9ICgvKiNfX1BVUkVfXyovQmlnTnVtYmVyLmZyb20oLTEpKTtcbmNvbnN0IFplcm86IEJpZ051bWJlciA9ICgvKiNfX1BVUkVfXyovQmlnTnVtYmVyLmZyb20oMCkpO1xuY29uc3QgT25lOiBCaWdOdW1iZXIgPSAoLyojX19QVVJFX18qL0JpZ051bWJlci5mcm9tKDEpKTtcbmNvbnN0IFR3bzogQmlnTnVtYmVyID0gKC8qI19fUFVSRV9fKi9CaWdOdW1iZXIuZnJvbSgyKSk7XG5jb25zdCBXZWlQZXJFdGhlcjogQmlnTnVtYmVyID0gKC8qI19fUFVSRV9fKi9CaWdOdW1iZXIuZnJvbShcIjEwMDAwMDAwMDAwMDAwMDAwMDBcIikpO1xuY29uc3QgTWF4VWludDI1NjogQmlnTnVtYmVyID0gKC8qI19fUFVSRV9fKi9CaWdOdW1iZXIuZnJvbShcIjB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlwiKSk7XG5cbmNvbnN0IE1pbkludDI1NjogQmlnTnVtYmVyID0gKC8qI19fUFVSRV9fKi9CaWdOdW1iZXIuZnJvbShcIi0weDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIikpO1xuY29uc3QgTWF4SW50MjU2OiBCaWdOdW1iZXIgPSAoLyojX19QVVJFX18qL0JpZ051bWJlci5mcm9tKFwiMHg3ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmXCIpKTtcblxuZXhwb3J0IHtcbiAgICBOZWdhdGl2ZU9uZSxcbiAgICBaZXJvLFxuICAgIE9uZSxcbiAgICBUd28sXG4gICAgV2VpUGVyRXRoZXIsXG4gICAgTWF4VWludDI1NixcbiAgICBNaW5JbnQyNTYsXG4gICAgTWF4SW50MjU2LFxufTtcbiIsImV4cG9ydCBjb25zdCBIYXNoWmVybyA9IFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCI7XG5cbiIsIi8vIE5GS0MgKGNvbXBvc2VkKSAgICAgICAgICAgICAvLyAoZGVjb21wb3NlZClcbmV4cG9ydCBjb25zdCBFdGhlclN5bWJvbCA9IFwiXFx1MDM5ZVwiOyAgLy8gXCJcXHVEODM1XFx1REY2M1wiO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IEJpZ051bWJlciwgQmlnTnVtYmVyaXNoIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2JpZ251bWJlclwiO1xuaW1wb3J0IHsgTWF4VWludDI1NiwgTmVnYXRpdmVPbmUsIE9uZSwgWmVybyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9jb25zdGFudHNcIjtcblxuaW1wb3J0IHsgQ29kZXIsIFJlYWRlciwgV3JpdGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXJcIjtcblxuZXhwb3J0IGNsYXNzIE51bWJlckNvZGVyIGV4dGVuZHMgQ29kZXIge1xuICAgIHJlYWRvbmx5IHNpemU6IG51bWJlcjtcbiAgICByZWFkb25seSBzaWduZWQ6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihzaXplOiBudW1iZXIsIHNpZ25lZDogYm9vbGVhbiwgbG9jYWxOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9ICgoc2lnbmVkID8gXCJpbnRcIjogXCJ1aW50XCIpICsgKHNpemUgKiA4KSk7XG4gICAgICAgIHN1cGVyKG5hbWUsIG5hbWUsIGxvY2FsTmFtZSwgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gICAgICAgIHRoaXMuc2lnbmVkID0gc2lnbmVkO1xuICAgIH1cblxuICAgIGRlZmF1bHRWYWx1ZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBlbmNvZGUod3JpdGVyOiBXcml0ZXIsIHZhbHVlOiBCaWdOdW1iZXJpc2gpOiBudW1iZXIge1xuICAgICAgICBsZXQgdiA9IEJpZ051bWJlci5mcm9tKHZhbHVlKTtcblxuICAgICAgICAvLyBDaGVjayBib3VuZHMgYXJlIHNhZmUgZm9yIGVuY29kaW5nXG4gICAgICAgIGxldCBtYXhVaW50VmFsdWUgPSBNYXhVaW50MjU2Lm1hc2sod3JpdGVyLndvcmRTaXplICogOCk7XG4gICAgICAgIGlmICh0aGlzLnNpZ25lZCkge1xuICAgICAgICAgICAgbGV0IGJvdW5kcyA9IG1heFVpbnRWYWx1ZS5tYXNrKHRoaXMuc2l6ZSAqIDggLSAxKTtcbiAgICAgICAgICAgIGlmICh2Lmd0KGJvdW5kcykgfHwgdi5sdChib3VuZHMuYWRkKE9uZSkubXVsKE5lZ2F0aXZlT25lKSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90aHJvd0Vycm9yKFwidmFsdWUgb3V0LW9mLWJvdW5kc1wiLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodi5sdChaZXJvKSB8fCB2Lmd0KG1heFVpbnRWYWx1ZS5tYXNrKHRoaXMuc2l6ZSAqIDgpKSkge1xuICAgICAgICAgICAgdGhpcy5fdGhyb3dFcnJvcihcInZhbHVlIG91dC1vZi1ib3VuZHNcIiwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdiA9IHYudG9Ud29zKHRoaXMuc2l6ZSAqIDgpLm1hc2sodGhpcy5zaXplICogOCk7XG5cbiAgICAgICAgaWYgKHRoaXMuc2lnbmVkKSB7XG4gICAgICAgICAgICB2ID0gdi5mcm9tVHdvcyh0aGlzLnNpemUgKiA4KS50b1R3b3MoOCAqIHdyaXRlci53b3JkU2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gd3JpdGVyLndyaXRlVmFsdWUodik7XG4gICAgfVxuXG4gICAgZGVjb2RlKHJlYWRlcjogUmVhZGVyKTogYW55IHtcbiAgICAgICAgbGV0IHZhbHVlID0gcmVhZGVyLnJlYWRWYWx1ZSgpLm1hc2sodGhpcy5zaXplICogOCk7XG5cbiAgICAgICAgaWYgKHRoaXMuc2lnbmVkKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmZyb21Ud29zKHRoaXMuc2l6ZSAqIDgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlYWRlci5jb2VyY2UodGhpcy5uYW1lLCB2YWx1ZSk7XG4gICAgfVxufVxuXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlpZnksIEJ5dGVzTGlrZSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZXhwb3J0IGVudW0gVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtIHtcbiAgICBjdXJyZW50ICA9IFwiXCIsXG4gICAgTkZDICAgICAgPSBcIk5GQ1wiLFxuICAgIE5GRCAgICAgID0gXCJORkRcIixcbiAgICBORktDICAgICA9IFwiTkZLQ1wiLFxuICAgIE5GS0QgICAgID0gXCJORktEXCJcbn07XG5cbmV4cG9ydCBlbnVtIFV0ZjhFcnJvclJlYXNvbiB7XG4gICAgLy8gQSBjb250aW51YXRpb24gYnl0ZSB3YXMgcHJlc2VudCB3aGVyZSB0aGVyZSB3YXMgbm90aGluZyB0byBjb250aW51ZVxuICAgIC8vIC0gb2Zmc2V0ID0gdGhlIGluZGV4IHRoZSBjb2RlcG9pbnQgYmVnYW4gaW5cbiAgICBVTkVYUEVDVEVEX0NPTlRJTlVFICAgPSBcInVuZXhwZWN0ZWQgY29udGludWF0aW9uIGJ5dGVcIixcblxuICAgIC8vIEFuIGludmFsaWQgKG5vbi1jb250aW51YXRpb24pIGJ5dGUgdG8gc3RhcnQgYSBVVEYtOCBjb2RlcG9pbnQgd2FzIGZvdW5kXG4gICAgLy8gLSBvZmZzZXQgPSB0aGUgaW5kZXggdGhlIGNvZGVwb2ludCBiZWdhbiBpblxuICAgIEJBRF9QUkVGSVggICAgICAgICAgICA9IFwiYmFkIGNvZGVwb2ludCBwcmVmaXhcIixcblxuICAgIC8vIFRoZSBzdHJpbmcgaXMgdG9vIHNob3J0IHRvIHByb2Nlc3MgdGhlIGV4cGVjdGVkIGNvZGVwb2ludFxuICAgIC8vIC0gb2Zmc2V0ID0gdGhlIGluZGV4IHRoZSBjb2RlcG9pbnQgYmVnYW4gaW5cbiAgICBPVkVSUlVOICAgICAgICAgICAgICAgPSBcInN0cmluZyBvdmVycnVuXCIsXG5cbiAgICAvLyBBIG1pc3NpbmcgY29udGludWF0aW9uIGJ5dGUgd2FzIGV4cGVjdGVkIGJ1dCBub3QgZm91bmRcbiAgICAvLyAtIG9mZnNldCA9IHRoZSBpbmRleCB0aGUgY29udGludWF0aW9uIGJ5dGUgd2FzIGV4cGVjdGVkIGF0XG4gICAgTUlTU0lOR19DT05USU5VRSAgICAgID0gXCJtaXNzaW5nIGNvbnRpbnVhdGlvbiBieXRlXCIsXG5cbiAgICAvLyBUaGUgY29tcHV0ZWQgY29kZSBwb2ludCBpcyBvdXRzaWRlIHRoZSByYW5nZSBmb3IgVVRGLThcbiAgICAvLyAtIG9mZnNldCAgICAgICA9IHN0YXJ0IG9mIHRoaXMgY29kZXBvaW50XG4gICAgLy8gLSBiYWRDb2RlcG9pbnQgPSB0aGUgY29tcHV0ZWQgY29kZXBvaW50OyBvdXRzaWRlIHRoZSBVVEYtOCByYW5nZVxuICAgIE9VVF9PRl9SQU5HRSAgICAgICAgICA9IFwib3V0IG9mIFVURi04IHJhbmdlXCIsXG5cbiAgICAvLyBVVEYtOCBzdHJpbmdzIG1heSBub3QgY29udGFpbiBVVEYtMTYgc3Vycm9nYXRlIHBhaXJzXG4gICAgLy8gLSBvZmZzZXQgICAgICAgPSBzdGFydCBvZiB0aGlzIGNvZGVwb2ludFxuICAgIC8vIC0gYmFkQ29kZXBvaW50ID0gdGhlIGNvbXB1dGVkIGNvZGVwb2ludDsgaW5zaWRlIHRoZSBVVEYtMTYgc3Vycm9nYXRlIHJhbmdlXG4gICAgVVRGMTZfU1VSUk9HQVRFICAgICAgID0gXCJVVEYtMTYgc3Vycm9nYXRlXCIsXG5cbiAgICAvLyBUaGUgc3RyaW5nIGlzIGFuIG92ZXJsb25nIHJlcHJlc2VudGF0aW9uXG4gICAgLy8gLSBvZmZzZXQgICAgICAgPSBzdGFydCBvZiB0aGlzIGNvZGVwb2ludFxuICAgIC8vIC0gYmFkQ29kZXBvaW50ID0gdGhlIGNvbXB1dGVkIGNvZGVwb2ludDsgYWxyZWFkeSBib3VuZHMgY2hlY2tlZFxuICAgIE9WRVJMT05HICAgICAgICAgICAgICA9IFwib3ZlcmxvbmcgcmVwcmVzZW50YXRpb25cIixcbn07XG5cblxuZXhwb3J0IHR5cGUgVXRmOEVycm9yRnVuYyA9IChyZWFzb246IFV0ZjhFcnJvclJlYXNvbiwgb2Zmc2V0OiBudW1iZXIsIGJ5dGVzOiBBcnJheUxpa2U8bnVtYmVyPiwgb3V0cHV0OiBBcnJheTxudW1iZXI+LCBiYWRDb2RlcG9pbnQ/OiBudW1iZXIpID0+IG51bWJlcjtcblxuZnVuY3Rpb24gZXJyb3JGdW5jKHJlYXNvbjogVXRmOEVycm9yUmVhc29uLCBvZmZzZXQ6IG51bWJlciwgYnl0ZXM6IEFycmF5TGlrZTxudW1iZXI+LCBvdXRwdXQ6IEFycmF5PG51bWJlcj4sIGJhZENvZGVwb2ludD86IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGludmFsaWQgY29kZXBvaW50IGF0IG9mZnNldCAkeyBvZmZzZXQgfTsgJHsgcmVhc29uIH1gLCBcImJ5dGVzXCIsIGJ5dGVzKTtcbn1cblxuZnVuY3Rpb24gaWdub3JlRnVuYyhyZWFzb246IFV0ZjhFcnJvclJlYXNvbiwgb2Zmc2V0OiBudW1iZXIsIGJ5dGVzOiBBcnJheUxpa2U8bnVtYmVyPiwgb3V0cHV0OiBBcnJheTxudW1iZXI+LCBiYWRDb2RlcG9pbnQ/OiBudW1iZXIpOiBudW1iZXIge1xuXG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gaW52YWxpZCBwcmVmaXggKGluY2x1ZGluZyBzdHJheSBjb250aW51YXRpb24pLCBza2lwIGFueSBhZGRpdGlvbmFsIGNvbnRpbnVhdGlvbiBieXRlc1xuICAgIGlmIChyZWFzb24gPT09IFV0ZjhFcnJvclJlYXNvbi5CQURfUFJFRklYIHx8IHJlYXNvbiA9PT0gVXRmOEVycm9yUmVhc29uLlVORVhQRUNURURfQ09OVElOVUUpIHtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBmb3IgKGxldCBvID0gb2Zmc2V0ICsgMTsgbyA8IGJ5dGVzLmxlbmd0aDsgbysrKSB7XG4gICAgICAgICAgICBpZiAoYnl0ZXNbb10gPj4gNiAhPT0gMHgwMikgeyBicmVhazsgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgYnl0ZSBydW5zIHVzIHBhc3QgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzbyBqdXN0IGp1bXAgdG8gdGhlIGVuZFxuICAgIC8vIChidXQgdGhlIGZpcnN0IGJ5dGUgd2FzIHJlYWQgYWxyZWFkeSByZWFkIGFuZCB0aGVyZWZvcmUgc2tpcHBlZClcbiAgICBpZiAocmVhc29uID09PSBVdGY4RXJyb3JSZWFzb24uT1ZFUlJVTikge1xuICAgICAgICByZXR1cm4gYnl0ZXMubGVuZ3RoIC0gb2Zmc2V0IC0gMTtcbiAgICB9XG5cbiAgICAvLyBOb3RoaW5nIHRvIHNraXBcbiAgICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUZ1bmMocmVhc29uOiBVdGY4RXJyb3JSZWFzb24sIG9mZnNldDogbnVtYmVyLCBieXRlczogQXJyYXlMaWtlPG51bWJlcj4sIG91dHB1dDogQXJyYXk8bnVtYmVyPiwgYmFkQ29kZXBvaW50PzogbnVtYmVyKTogbnVtYmVyIHtcblxuICAgIC8vIE92ZXJsb25nIHJlcHJlc2VudGF0aW9ucyBhcmUgb3RoZXJ3aXNlIFwidmFsaWRcIiBjb2RlIHBvaW50czsganVzdCBub24tZGVpc3Rpbmd0aXNoZWRcbiAgICBpZiAocmVhc29uID09PSBVdGY4RXJyb3JSZWFzb24uT1ZFUkxPTkcpIHtcbiAgICAgICAgb3V0cHV0LnB1c2goYmFkQ29kZXBvaW50KTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLy8gUHV0IHRoZSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgaW50byB0aGUgb3V0cHV0XG4gICAgb3V0cHV0LnB1c2goMHhmZmZkKTtcblxuICAgIC8vIE90aGVyd2lzZSwgcHJvY2VzcyBhcyBpZiBpZ25vcmluZyBlcnJvcnNcbiAgICByZXR1cm4gaWdub3JlRnVuYyhyZWFzb24sIG9mZnNldCwgYnl0ZXMsIG91dHB1dCwgYmFkQ29kZXBvaW50KTtcbn1cblxuLy8gQ29tbW9uIGVycm9yIGhhbmRpbmcgc3RyYXRlZ2llc1xuZXhwb3J0IGNvbnN0IFV0ZjhFcnJvckZ1bmNzOiB7IFsgbmFtZTogc3RyaW5nIF06IFV0ZjhFcnJvckZ1bmMgfSA9IE9iamVjdC5mcmVlemUoe1xuICAgIGVycm9yOiBlcnJvckZ1bmMsXG4gICAgaWdub3JlOiBpZ25vcmVGdW5jLFxuICAgIHJlcGxhY2U6IHJlcGxhY2VGdW5jXG59KTtcblxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMzM1NjQ5My9kZWNvZGUtdXRmLTgtd2l0aC1qYXZhc2NyaXB0IzEzNjkxNDk5XG5mdW5jdGlvbiBnZXRVdGY4Q29kZVBvaW50cyhieXRlczogQnl0ZXNMaWtlLCBvbkVycm9yPzogVXRmOEVycm9yRnVuYyk6IEFycmF5PG51bWJlcj4ge1xuICAgIGlmIChvbkVycm9yID09IG51bGwpIHsgb25FcnJvciA9IFV0ZjhFcnJvckZ1bmNzLmVycm9yOyB9XG5cbiAgICBieXRlcyA9IGFycmF5aWZ5KGJ5dGVzKTtcblxuICAgIGNvbnN0IHJlc3VsdDogQXJyYXk8bnVtYmVyPiA9IFtdO1xuICAgIGxldCBpID0gMDtcblxuICAgIC8vIEludmFsaWQgYnl0ZXMgYXJlIGlnbm9yZWRcbiAgICB3aGlsZShpIDwgYnl0ZXMubGVuZ3RoKSB7XG5cbiAgICAgICAgY29uc3QgYyA9IGJ5dGVzW2krK107XG5cbiAgICAgICAgLy8gMHh4eCB4eHh4XG4gICAgICAgIGlmIChjID4+IDcgPT09IDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGMpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNdWx0aWJ5dGU7IGhvdyBtYW55IGJ5dGVzIGxlZnQgZm9yIHRoaXMgY2hhcmFjdGVyP1xuICAgICAgICBsZXQgZXh0cmFMZW5ndGggPSBudWxsO1xuICAgICAgICBsZXQgb3ZlcmxvbmdNYXNrID0gbnVsbDtcblxuICAgICAgICAvLyAxMTB4IHh4eHggMTB4eCB4eHh4XG4gICAgICAgIGlmICgoYyAmIDB4ZTApID09PSAweGMwKSB7XG4gICAgICAgICAgICBleHRyYUxlbmd0aCA9IDE7XG4gICAgICAgICAgICBvdmVybG9uZ01hc2sgPSAweDdmO1xuXG4gICAgICAgIC8vIDExMTAgeHh4eCAxMHh4IHh4eHggMTB4eCB4eHh4XG4gICAgICAgIH0gZWxzZSBpZiAoKGMgJiAweGYwKSA9PT0gMHhlMCkge1xuICAgICAgICAgICAgZXh0cmFMZW5ndGggPSAyO1xuICAgICAgICAgICAgb3ZlcmxvbmdNYXNrID0gMHg3ZmY7XG5cbiAgICAgICAgLy8gMTExMSAweHh4IDEweHggeHh4eCAxMHh4IHh4eHggMTB4eCB4eHh4XG4gICAgICAgIH0gZWxzZSBpZiAoKGMgJiAweGY4KSA9PT0gMHhmMCkge1xuICAgICAgICAgICAgZXh0cmFMZW5ndGggPSAzO1xuICAgICAgICAgICAgb3ZlcmxvbmdNYXNrID0gMHhmZmZmO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoKGMgJiAweGMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgICAgIGkgKz0gb25FcnJvcihVdGY4RXJyb3JSZWFzb24uVU5FWFBFQ1RFRF9DT05USU5VRSwgaSAtIDEsIGJ5dGVzLCByZXN1bHQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpICs9IG9uRXJyb3IoVXRmOEVycm9yUmVhc29uLkJBRF9QUkVGSVgsIGkgLSAxLCBieXRlcywgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRG8gd2UgaGF2ZSBlbm91Z2ggYnl0ZXMgaW4gb3VyIGRhdGE/XG4gICAgICAgIGlmIChpIC0gMSArIGV4dHJhTGVuZ3RoID49IGJ5dGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgaSArPSBvbkVycm9yKFV0ZjhFcnJvclJlYXNvbi5PVkVSUlVOLCBpIC0gMSwgYnl0ZXMsIHJlc3VsdCk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgbGVuZ3RoIHByZWZpeCBmcm9tIHRoZSBjaGFyXG4gICAgICAgIGxldCByZXMgPSBjICYgKCgxIDw8ICg4IC0gZXh0cmFMZW5ndGggLSAxKSkgLSAxKTtcblxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGV4dHJhTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGxldCBuZXh0Q2hhciA9IGJ5dGVzW2ldO1xuXG4gICAgICAgICAgICAvLyBJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlXG4gICAgICAgICAgICBpZiAoKG5leHRDaGFyICYgMHhjMCkgIT0gMHg4MCkge1xuICAgICAgICAgICAgICAgIGkgKz0gb25FcnJvcihVdGY4RXJyb3JSZWFzb24uTUlTU0lOR19DT05USU5VRSwgaSwgYnl0ZXMsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgcmVzID0gbnVsbDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJlcyA9IChyZXMgPDwgNikgfCAobmV4dENoYXIgJiAweDNmKTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNlZSBhYm92ZSBsb29wIGZvciBpbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlXG4gICAgICAgIGlmIChyZXMgPT09IG51bGwpIHsgY29udGludWU7IH1cblxuICAgICAgICAvLyBNYXhpbXVtIGNvZGUgcG9pbnRcbiAgICAgICAgaWYgKHJlcyA+IDB4MTBmZmZmKSB7XG4gICAgICAgICAgICBpICs9IG9uRXJyb3IoVXRmOEVycm9yUmVhc29uLk9VVF9PRl9SQU5HRSwgaSAtIDEgLSBleHRyYUxlbmd0aCwgYnl0ZXMsIHJlc3VsdCwgcmVzKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVzZXJ2ZWQgZm9yIFVURi0xNiBzdXJyb2dhdGUgaGFsdmVzXG4gICAgICAgIGlmIChyZXMgPj0gMHhkODAwICYmIHJlcyA8PSAweGRmZmYpIHtcbiAgICAgICAgICAgIGkgKz0gb25FcnJvcihVdGY4RXJyb3JSZWFzb24uVVRGMTZfU1VSUk9HQVRFLCBpIC0gMSAtIGV4dHJhTGVuZ3RoLCBieXRlcywgcmVzdWx0LCByZXMpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3Igb3Zlcmxvbmcgc2VxdWVuY2VzIChtb3JlIGJ5dGVzIHRoYW4gbmVlZGVkKVxuICAgICAgICBpZiAocmVzIDw9IG92ZXJsb25nTWFzaykge1xuICAgICAgICAgICAgaSArPSBvbkVycm9yKFV0ZjhFcnJvclJlYXNvbi5PVkVSTE9ORywgaSAtIDEgLSBleHRyYUxlbmd0aCwgYnl0ZXMsIHJlc3VsdCwgcmVzKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0LnB1c2gocmVzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE4NzI5NDA1L2hvdy10by1jb252ZXJ0LXV0Zjgtc3RyaW5nLXRvLWJ5dGUtYXJyYXlcbmV4cG9ydCBmdW5jdGlvbiB0b1V0ZjhCeXRlcyhzdHI6IHN0cmluZywgZm9ybTogVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtID0gVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtLmN1cnJlbnQpOiBVaW50OEFycmF5IHtcblxuICAgIGlmIChmb3JtICE9IFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybS5jdXJyZW50KSB7XG4gICAgICAgIGxvZ2dlci5jaGVja05vcm1hbGl6ZSgpO1xuICAgICAgICBzdHIgPSBzdHIubm9ybWFsaXplKGZvcm0pO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgaWYgKGMgPCAweDgwKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChjKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGMgPCAweDgwMCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goKGMgPj4gNikgfCAweGMwKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKChjICYgMHgzZikgfCAweDgwKTtcblxuICAgICAgICB9IGVsc2UgaWYgKChjICYgMHhmYzAwKSA9PSAweGQ4MDApIHtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIGNvbnN0IGMyID0gc3RyLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgICAgIGlmIChpID49IHN0ci5sZW5ndGggfHwgKGMyICYgMHhmYzAwKSAhPT0gMHhkYzAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB1dGYtOCBzdHJpbmdcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFN1cnJvZ2F0ZSBQYWlyXG4gICAgICAgICAgICBjb25zdCBwYWlyID0gMHgxMDAwMCArICgoYyAmIDB4MDNmZikgPDwgMTApICsgKGMyICYgMHgwM2ZmKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKChwYWlyID4+IDE4KSB8IDB4ZjApO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goKChwYWlyID4+IDEyKSAmIDB4M2YpIHwgMHg4MCk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgoKHBhaXIgPj4gNikgJiAweDNmKSB8IDB4ODApO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goKHBhaXIgJiAweDNmKSB8IDB4ODApO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgoYyA+PiAxMikgfCAweGUwKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCgoYyA+PiA2KSAmIDB4M2YpIHwgMHg4MCk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgoYyAmIDB4M2YpIHwgMHg4MCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlpZnkocmVzdWx0KTtcbn07XG5cbmZ1bmN0aW9uIGVzY2FwZUNoYXIodmFsdWU6IG51bWJlcikge1xuICAgIGNvbnN0IGhleCA9IChcIjAwMDBcIiArIHZhbHVlLnRvU3RyaW5nKDE2KSk7XG4gICAgcmV0dXJuIFwiXFxcXHVcIiArIGhleC5zdWJzdHJpbmcoaGV4Lmxlbmd0aCAtIDQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX3RvRXNjYXBlZFV0ZjhTdHJpbmcoYnl0ZXM6IEJ5dGVzTGlrZSwgb25FcnJvcj86IFV0ZjhFcnJvckZ1bmMpOiBzdHJpbmcge1xuICAgIHJldHVybiAnXCInICsgZ2V0VXRmOENvZGVQb2ludHMoYnl0ZXMsIG9uRXJyb3IpLm1hcCgoY29kZVBvaW50KSA9PiB7XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPCAyNTYpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoY29kZVBvaW50KSB7XG4gICAgICAgICAgICAgICAgY2FzZSA4OiAgcmV0dXJuIFwiXFxcXGJcIjtcbiAgICAgICAgICAgICAgICBjYXNlIDk6ICByZXR1cm4gXCJcXFxcdFwiO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBcIlxcXFxuXCJcbiAgICAgICAgICAgICAgICBjYXNlIDEzOiByZXR1cm4gXCJcXFxcclwiO1xuICAgICAgICAgICAgICAgIGNhc2UgMzQ6IHJldHVybiBcIlxcXFxcXFwiXCI7XG4gICAgICAgICAgICAgICAgY2FzZSA5MjogcmV0dXJuIFwiXFxcXFxcXFxcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA+PSAzMiAmJiBjb2RlUG9pbnQgPCAxMjcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlUG9pbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvZGVQb2ludCA8PSAweGZmZmYpIHtcbiAgICAgICAgICAgIHJldHVybiBlc2NhcGVDaGFyKGNvZGVQb2ludCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMDtcbiAgICAgICAgcmV0dXJuIGVzY2FwZUNoYXIoKChjb2RlUG9pbnQgPj4gMTApICYgMHgzZmYpICsgMHhkODAwKSArIGVzY2FwZUNoYXIoKGNvZGVQb2ludCAmIDB4M2ZmKSArIDB4ZGMwMCk7XG4gICAgfSkuam9pbihcIlwiKSArICdcIic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfdG9VdGY4U3RyaW5nKGNvZGVQb2ludHM6IEFycmF5PG51bWJlcj4pOiBzdHJpbmcge1xuICAgIHJldHVybiBjb2RlUG9pbnRzLm1hcCgoY29kZVBvaW50KSA9PiB7XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPD0gMHhmZmZmKSB7XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlUG9pbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwO1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShcbiAgICAgICAgICAgICgoKGNvZGVQb2ludCA+PiAxMCkgJiAweDNmZikgKyAweGQ4MDApLFxuICAgICAgICAgICAgKChjb2RlUG9pbnQgJiAweDNmZikgKyAweGRjMDApXG4gICAgICAgICk7XG4gICAgfSkuam9pbihcIlwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvVXRmOFN0cmluZyhieXRlczogQnl0ZXNMaWtlLCBvbkVycm9yPzogVXRmOEVycm9yRnVuYyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIF90b1V0ZjhTdHJpbmcoZ2V0VXRmOENvZGVQb2ludHMoYnl0ZXMsIG9uRXJyb3IpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvVXRmOENvZGVQb2ludHMoc3RyOiBzdHJpbmcsIGZvcm06IFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybSA9IFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybS5jdXJyZW50KTogQXJyYXk8bnVtYmVyPiB7XG4gICAgcmV0dXJuIGdldFV0ZjhDb2RlUG9pbnRzKHRvVXRmOEJ5dGVzKHN0ciwgZm9ybSkpO1xufVxuIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcInN0cmluZ3MvNS43LjBcIjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBIYXNoWmVybyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9jb25zdGFudHNcIjtcbmltcG9ydCB7IGFycmF5aWZ5LCBCeXRlc0xpa2UsIGNvbmNhdCwgaGV4bGlmeSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuXG5pbXBvcnQgeyB0b1V0ZjhCeXRlcywgdG9VdGY4U3RyaW5nIH0gZnJvbSBcIi4vdXRmOFwiO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRCeXRlczMyU3RyaW5nKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG5cbiAgICAvLyBHZXQgdGhlIGJ5dGVzXG4gICAgY29uc3QgYnl0ZXMgPSB0b1V0ZjhCeXRlcyh0ZXh0KTtcblxuICAgIC8vIENoZWNrIHdlIGhhdmUgcm9vbSBmb3IgbnVsbC10ZXJtaW5hdGlvblxuICAgIGlmIChieXRlcy5sZW5ndGggPiAzMSkgeyB0aHJvdyBuZXcgRXJyb3IoXCJieXRlczMyIHN0cmluZyBtdXN0IGJlIGxlc3MgdGhhbiAzMiBieXRlc1wiKTsgfVxuXG4gICAgLy8gWmVyby1wYWQgKGltcGxpY2l0bHkgbnVsbC10ZXJtaW5hdGVzKVxuICAgIHJldHVybiBoZXhsaWZ5KGNvbmNhdChbIGJ5dGVzLCBIYXNoWmVybyBdKS5zbGljZSgwLCAzMikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VCeXRlczMyU3RyaW5nKGJ5dGVzOiBCeXRlc0xpa2UpOiBzdHJpbmcge1xuICAgIGNvbnN0IGRhdGEgPSBhcnJheWlmeShieXRlcyk7XG5cbiAgICAvLyBNdXN0IGJlIDMyIGJ5dGVzIHdpdGggYSBudWxsLXRlcm1pbmF0aW9uXG4gICAgaWYgKGRhdGEubGVuZ3RoICE9PSAzMikgeyB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGJ5dGVzMzIgLSBub3QgMzIgYnl0ZXMgbG9uZ1wiKTsgfVxuICAgIGlmIChkYXRhWzMxXSAhPT0gMCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGJ5dGVzMzIgc3RyaW5nIC0gbm8gbnVsbCB0ZXJtaW5hdG9yXCIpOyB9XG5cbiAgICAvLyBGaW5kIHRoZSBudWxsIHRlcm1pbmF0aW9uXG4gICAgbGV0IGxlbmd0aCA9IDMxO1xuICAgIHdoaWxlIChkYXRhW2xlbmd0aCAtIDFdID09PSAwKSB7IGxlbmd0aC0tOyB9XG5cbiAgICAvLyBEZXRlcm1pbmUgdGhlIHN0cmluZyB2YWx1ZVxuICAgIHJldHVybiB0b1V0ZjhTdHJpbmcoZGF0YS5zbGljZSgwLCBsZW5ndGgpKTtcbn1cblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IHRvVXRmOENvZGVQb2ludHMsIF90b1V0ZjhTdHJpbmcsIFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybSB9IGZyb20gXCIuL3V0ZjhcIjtcblxudHlwZSBSYW5nZWQgPSB7XG4gICAgbDogbnVtYmVyLCAgICAgICAgICAvLyBMbyB2YWx1ZVxuICAgIGg6IG51bWJlciwgICAgICAgICAgLy8gSGlnaCB2YWx1ZSAobGVzcyB0aGUgbG8pXG4gICAgZD86IG51bWJlciwgICAgICAgICAvLyBEZWx0YS9zdHJpZGUgKGRlZmF1bHQ6IDEpXG4gICAgcz86IG51bWJlciwgICAgICAgICAvLyBTaGlmdCAoZGVmYXVsdDogMSlcbiAgICBlPzogQXJyYXk8bnVtYmVyPiAgIC8vIEV4Y2VwdGlvbnMgdG8gc2tpcFxufTtcblxudHlwZSBUYWJsZSA9IHsgWyBzcmM6IG51bWJlciBdOiBBcnJheTxudW1iZXI+IH07XG5cbmZ1bmN0aW9uIGJ5dGVzMihkYXRhOiBzdHJpbmcpOiBBcnJheTxudW1iZXI+IHtcbiAgICBpZiAoKGRhdGEubGVuZ3RoICUgNCkgIT09IDApIHsgdGhyb3cgbmV3IEVycm9yKFwiYmFkIGRhdGFcIik7IH1cbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArPSA0KSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHBhcnNlSW50KGRhdGEuc3Vic3RyaW5nKGksIGkgKyA0KSwgMTYpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGFibGUoZGF0YTogc3RyaW5nLCBmdW5jPzogKHZhbHVlOiBzdHJpbmcpID0+IEFycmF5PG51bWJlcj4pOiBUYWJsZSB7XG4gICAgaWYgKCFmdW5jKSB7XG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbih2YWx1ZTogc3RyaW5nKSB7IHJldHVybiBbIHBhcnNlSW50KHZhbHVlLCAxNikgXTsgfVxuICAgIH1cblxuICAgIGxldCBsbyA9IDA7XG5cbiAgICBsZXQgcmVzdWx0OiBUYWJsZSA9IHsgfTtcbiAgICBkYXRhLnNwbGl0KFwiLFwiKS5mb3JFYWNoKChwYWlyKSA9PiB7XG4gICAgICAgIGxldCBjb21wcyA9IHBhaXIuc3BsaXQoXCI6XCIpO1xuICAgICAgICBsbyArPSBwYXJzZUludChjb21wc1swXSwgMTYpO1xuICAgICAgICByZXN1bHRbbG9dID0gZnVuYyhjb21wc1sxXSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSYW5nZVRhYmxlKGRhdGE6IHN0cmluZyk6IEFycmF5PFJhbmdlZD4ge1xuICAgIGxldCBoaSA9IDA7XG4gICAgcmV0dXJuIGRhdGEuc3BsaXQoXCIsXCIpLm1hcCgodikgPT4ge1xuICAgICAgICBsZXQgY29tcHMgPSB2LnNwbGl0KFwiLVwiKTtcbiAgICAgICAgaWYgKGNvbXBzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgY29tcHNbMV0gPSBcIjBcIjtcbiAgICAgICAgfSBlbHNlIGlmIChjb21wc1sxXSA9PT0gXCJcIikge1xuICAgICAgICAgICAgY29tcHNbMV0gPSBcIjFcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBsbyA9IGhpICsgcGFyc2VJbnQoY29tcHNbMF0sIDE2KTtcbiAgICAgICAgaGkgPSBwYXJzZUludChjb21wc1sxXSwgMTYpO1xuICAgICAgICByZXR1cm4geyBsOiBsbywgaDogaGkgfTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hNYXAodmFsdWU6IG51bWJlciwgcmFuZ2VzOiBBcnJheTxSYW5nZWQ+KTogUmFuZ2VkIHtcbiAgICBsZXQgbG8gPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCByYW5nZSA9IHJhbmdlc1tpXTtcbiAgICAgICAgbG8gKz0gcmFuZ2UubDtcbiAgICAgICAgaWYgKHZhbHVlID49IGxvICYmIHZhbHVlIDw9IGxvICsgcmFuZ2UuaCAmJiAoKHZhbHVlIC0gbG8pICUgKHJhbmdlLmQgfHwgMSkpID09PSAwKSB7XG4gICAgICAgICAgICBpZiAocmFuZ2UuZSAmJiByYW5nZS5lLmluZGV4T2YodmFsdWUgLSBsbykgIT09IC0xKSB7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IFRhYmxlX0FfMV9yYW5nZXMgPSBjcmVhdGVSYW5nZVRhYmxlKFwiMjIxLDEzLTFiLDVmLSw0MC0xMCw1MS1mLDExLTMsMy0zLDItMiwyLTQsOCwyLDE1LDJkLDI4LTgsODgsNDgsMjctLDMtNSwxMS0yMCwyNy0sOCwyOCwzLTUsMTIsMTgsYi1hLDFjLTQsNi0xNiwyLWQsMi0yLDIsMWItNCwxNy05LDhmLSwxMCxmLDFmLTIsMWMtMzQsMzMtMTRlLDQsMzYtLDEzLSw2LTIsMWEtZiw0LDktLDMtLDE3LDgsMi0yLDUtLDIsOC0sMy0sNC04LDItMywzLDYtLDE2LTYsMi0sNy0zLDMtLDE3LDgsMywzLDMtLDIsNi0zLDMtLDQtYSw1LDItNiwxMC1iLDQsOCwyLDQsMTcsOCwzLDYtLGIsNCw0LSwyLWUsMi00LGItMTAsNCw5LSwzLSwxNyw4LDMtLDUtLDktMiwzLSw0LTcsMy0zLDMsNC0zLGMtMTAsMyw3LTIsNCw1LTIsMywyLDMtMiwzLTIsNC0yLDksNC0zLDYtMiw0LDUtOCwyLWUsZC1kLDQsOSw0LDE4LGIsNi0zLDgsNCw1LTYsMy04LDMtMyxiLTExLDMsOSw0LDE4LGIsNi0zLDgsNCw1LTYsMy02LDIsMy0zLGItMTEsMyw5LDQsMTgsMTEtMyw3LSw0LDUtOCwyLTcsMy0zLGItMTEsMywxMy0yLDE5LGEsMi0sOC0yLDItMyw3LDIsOS0xMSw0LWIsM2ItMywxZS0yNCwzLDItLDMsMi0sMi01LDUsOCw0LDIsMi0sMyxlLDQtLDYsMiw3LSxiLSwzLTIxLDQ5LDIzLTUsMWMtMyw5LDI1LDEwLSwyLTJmLDIzLDYsMyw4LTIsNS01LDFiLTQ1LDI3LTksMmEtLDItMyw1Yi00LDQ1LTQsNTMtNSw4LDQwLDIsNS0sOCwyLDUtLDI4LDIsNS0sMjAsMiw1LSw4LDIsNS0sOCw4LDE4LDIwLDIsNS0sOCwyOCwxNC01LDFkLTIyLDU2LWIsMjc3LTgsMWUtMiw1Mi1lLGUsOC1hLDE4LTgsMTUtYixlLDQsMy1iLDVlLTIsYi0xNSwxMCxiLTUsNTktNywyYi01NTUsOWQtMyw1Yi01LDE3LSw3LSwyNy0sNy0sOSwyLDIsMiwyMC0sMzYsMTAsZi0sNywxNC0sNCxhLDU0LTMsMi02LDYtNSw5LSwxYy0xMCwxMy0xZCwxYy0xNCwzYy0sMTAtNiwzMi1iLDI0MC0zMCwyOC0xOCxjLTE0LGEwLDExNS0sMyw2Ni0sYi03Niw1LDUtLDFkLDI0LDIsNS0yLDIsOC0sMzUtMiwxOSxmLTEwLDFkLTMsMzExLTM3ZiwxYiw1YS1iLGQ3LTE5LGQtMyw0MSw1Ny0sNjgtNCwyOS0zLDVmLDI5LTM3LDJlLTIsMjUtYywyYy0yLDRlLTMsMzAsNzgtMyw2NC0sMjAsMTliNy00OSw1MWE3LTU5LDQ4ZS0yLDM4LTczOCwyYmE1LTViLDIyMmYtLDNjLTk0LDgtYiw2LTQsMWIsNiwyLDMsMyw2ZC0yMCwxNmUtZiw0MS0sMzctNywyZS0yLDExLWYsNS1iLDE4LSxiLDE0LDUtMyw2LDg4LSwyLGJmLTIsNy0sNy0sNy0sNC0yLDgsOC05LDgtMmZmLDIwLDUtYiwxYy1iNCwyNy0sMjctY2JiMSxmNy05LDI4LTIsYjUtMjIxLDU2LDQ4LDMtLDItLDMtLDUsZCwyLDUsMyw0Miw1LSw5LDgsMWQsNSw2LDItMiw4LDE1My0zLDEyMy0zLDMzLTI3ZmQsYTZkYS01MTI4LDIxZi01ZGYsMy1mZmZkLDMtZmZmZCwzLWZmZmQsMy1mZmZkLDMtZmZmZCwzLWZmZmQsMy1mZmZkLDMtZmZmZCwzLWZmZmQsMy1mZmZkLDMtZmZmZCwzLDItMWQsNjEtZmY3ZFwiKTtcblxuLy8gQFRPRE86IE1ha2UgdGhpcyByZWxhdGl2ZS4uLlxuY29uc3QgVGFibGVfQl8xX2ZsYWdzID0gXCJhZCwzNGYsMTgwNiwxODBiLDE4MGMsMTgwZCwyMDBiLDIwMGMsMjAwZCwyMDYwLGZlZmZcIi5zcGxpdChcIixcIikubWFwKCh2KSA9PiBwYXJzZUludCh2LCAxNikpO1xuXG5jb25zdCBUYWJsZV9CXzJfcmFuZ2VzOiBBcnJheTxSYW5nZWQ+ID0gW1xuICAgIHsgaDogMjUsIHM6IDMyLCBsOiA2NSB9LFxuICAgIHsgaDogMzAsIHM6IDMyLCBlOiBbIDIzIF0sIGw6IDEyNyB9LFxuICAgIHsgaDogNTQsIHM6IDEsIGU6IFsgNDggXSwgbDogNjQsIGQ6IDIgfSxcbiAgICB7IGg6IDE0LCBzOiAxLCBsOiA1NywgZDogMiB9LFxuICAgIHsgaDogNDQsIHM6IDEsIGw6IDE3LCBkOiAyIH0sXG4gICAgeyBoOiAxMCwgczogMSwgZTogWyAyLCA2LCA4IF0sIGw6IDYxLCBkOiAyIH0sXG4gICAgeyBoOiAxNiwgczogMSwgbDogNjgsIGQ6IDIgfSxcbiAgICB7IGg6IDg0LCBzOiAxLCBlOiBbIDE4LCAyNCwgNjYgXSwgbDogMTksIGQ6IDIgfSxcbiAgICB7IGg6IDI2LCBzOiAzMiwgZTogWyAxNyBdLCBsOiA0MzUgfSxcbiAgICB7IGg6IDIyLCBzOiAxLCBsOiA3MSwgZDogMiB9LFxuICAgIHsgaDogMTUsIHM6IDgwLCBsOiA0MCB9LFxuICAgIHsgaDogMzEsIHM6IDMyLCBsOiAxNiB9LFxuICAgIHsgaDogMzIsIHM6IDEsIGw6IDgwLCBkOiAyIH0sXG4gICAgeyBoOiA1MiwgczogMSwgbDogNDIsIGQ6IDIgfSxcbiAgICB7IGg6IDEyLCBzOiAxLCBsOiA1NSwgZDogMiB9LFxuICAgIHsgaDogNDAsIHM6IDEsIGU6IFsgMzggXSwgbDogMTUsIGQ6IDIgfSxcbiAgICB7IGg6IDE0LCBzOiAxLCBsOiA0OCwgZDogMiB9LFxuICAgIHsgaDogMzcsIHM6IDQ4LCBsOiA0OSB9LFxuICAgIHsgaDogMTQ4LCBzOiAxLCBsOiA2MzUxLCBkOiAyIH0sXG4gICAgeyBoOiA4OCwgczogMSwgbDogMTYwLCBkOiAyIH0sXG4gICAgeyBoOiAxNSwgczogMTYsIGw6IDcwNCB9LFxuICAgIHsgaDogMjUsIHM6IDI2LCBsOiA4NTQgfSxcbiAgICB7IGg6IDI1LCBzOiAzMiwgbDogNTU5MTUgfSxcbiAgICB7IGg6IDM3LCBzOiA0MCwgbDogMTI0NyB9LFxuICAgIHsgaDogMjUsIHM6IC0xMTk3MTEsIGw6IDUzMjQ4IH0sXG4gICAgeyBoOiAyNSwgczogLTExOTc2MywgbDogNTIgfSxcbiAgICB7IGg6IDI1LCBzOiAtMTE5ODE1LCBsOiA1MiB9LFxuICAgIHsgaDogMjUsIHM6IC0xMTk4NjcsIGU6IFsgMSwgNCwgNSwgNywgOCwgMTEsIDEyLCAxNyBdLCBsOiA1MiB9LFxuICAgIHsgaDogMjUsIHM6IC0xMTk5MTksIGw6IDUyIH0sXG4gICAgeyBoOiAyNCwgczogLTExOTk3MSwgZTogWyAyLCA3LCA4LCAxNyBdLCBsOiA1MiB9LFxuICAgIHsgaDogMjQsIHM6IC0xMjAwMjMsIGU6IFsgMiwgNywgMTMsIDE1LCAxNiwgMTcgXSwgbDogNTIgfSxcbiAgICB7IGg6IDI1LCBzOiAtMTIwMDc1LCBsOiA1MiB9LFxuICAgIHsgaDogMjUsIHM6IC0xMjAxMjcsIGw6IDUyIH0sXG4gICAgeyBoOiAyNSwgczogLTEyMDE3OSwgbDogNTIgfSxcbiAgICB7IGg6IDI1LCBzOiAtMTIwMjMxLCBsOiA1MiB9LFxuICAgIHsgaDogMjUsIHM6IC0xMjAyODMsIGw6IDUyIH0sXG4gICAgeyBoOiAyNSwgczogLTEyMDMzNSwgbDogNTIgfSxcbiAgICB7IGg6IDI0LCBzOiAtMTE5NTQzLCBlOiBbIDE3IF0sIGw6IDU2IH0sXG4gICAgeyBoOiAyNCwgczogLTExOTYwMSwgZTogWyAxNyBdLCBsOiA1OCB9LFxuICAgIHsgaDogMjQsIHM6IC0xMTk2NTksIGU6IFsgMTcgXSwgbDogNTggfSxcbiAgICB7IGg6IDI0LCBzOiAtMTE5NzE3LCBlOiBbIDE3IF0sIGw6IDU4IH0sXG4gICAgeyBoOiAyNCwgczogLTExOTc3NSwgZTogWyAxNyBdLCBsOiA1OCB9XG5dO1xuY29uc3QgVGFibGVfQl8yX2x1dF9hYnMgPSBjcmVhdGVUYWJsZShcImI1OjNiYyxjMzpmZiw3OjczLDI6MjUzLDU6MjU0LDM6MjU2LDE6MjU3LDU6MjU5LDE6MjViLDM6MjYwLDE6MjYzLDI6MjY5LDE6MjY4LDU6MjZmLDE6MjcyLDI6Mjc1LDc6MjgwLDM6MjgzLDU6Mjg4LDM6MjhhLDE6MjhiLDU6MjkyLDNmOjE5NSwxOjFiZiwyOToxOWUsMTI1OjNiOSw4YjozYjIsMTozYjgsMTozYzUsMzozYzYsMTozYzAsMWE6M2JhLDE6M2MxLDE6M2MzLDI6M2I4LDE6M2I1LDFiYzk6M2I5LDFjOjFmNzYsMToxZjc3LGY6MWY3YSwxOjFmN2IsZDoxZjc4LDE6MWY3OSwxOjFmN2MsMToxZjdkLDEwNzo2Myw1OjI1Yiw0OjY4LDE6NjgsMTo2OCwzOjY5LDE6NjksMTo2YywzOjZlLDQ6NzAsMTo3MSwxOjcyLDE6NzIsMTo3Miw3OjdhLDI6M2M5LDI6N2EsMjo2YiwxOmU1LDE6NjIsMTo2MywzOjY1LDE6NjYsMjo2ZCxiOjNiMywxOjNjMCw2OjY0LDFiNTc0OjNiOCwxYTozYzMsMjA6M2I4LDFhOjNjMywyMDozYjgsMWE6M2MzLDIwOjNiOCwxYTozYzMsMjA6M2I4LDFhOjNjM1wiKTtcbmNvbnN0IFRhYmxlX0JfMl9sdXRfcmVsID0gY3JlYXRlVGFibGUoXCIxNzk6MSwyOjEsMjoxLDU6MSwyOjEsYTo0ZixhOjEsODoxLDI6MSwyOjEsMzoxLDU6MSwzOjEsNDoxLDI6MSwzOjEsNDoxLDg6MiwxOjEsMjoyLDE6MSwyOjIsMjc6MiwxOTU6MjYsMjoyNSwxOjI1LDE6MjUsMjo0MCwyOjNmLDE6M2YsMzM6MSwxMTotNiwxOi05LDFhYzc6LTNhLDZkOi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsOTotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsYjotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCwxOi04LDk6LTgsMTotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCw5Oi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCxjOi04LDI6LTgsMjotOCwyOi04LDk6LTgsMTotOCwxOi04LDE6LTgsMTotOCwxOi04LDE6LTgsMTotOCw0OTotOCwxOi04LDE6LTRhLDE6LTRhLGQ6LTU2LDE6LTU2LDE6LTU2LDE6LTU2LGQ6LTgsMTotOCxmOi04LDE6LTgsMzotN1wiKTtcbmNvbnN0IFRhYmxlX0JfMl9jb21wbGV4ID0gY3JlYXRlVGFibGUoXCJkZjowMDczMDA3Myw1MTowMDY5MDMwNywxOTowMkJDMDA2RSxhNzowMDZBMDMwQywxOGE6MDAyMDAzQjksMTY6MDNCOTAzMDgwMzAxLDIwOjAzQzUwMzA4MDMwMSwxZDc6MDU2NTA1ODIsMTkwZjowMDY4MDMzMSwxOjAwNzQwMzA4LDE6MDA3NzAzMEEsMTowMDc5MDMwQSwxOjAwNjEwMkJFLGI2OjAzQzUwMzEzLDI6MDNDNTAzMTMwMzAwLDI6MDNDNTAzMTMwMzAxLDI6MDNDNTAzMTMwMzQyLDJhOjFGMDAwM0I5LDE6MUYwMTAzQjksMToxRjAyMDNCOSwxOjFGMDMwM0I5LDE6MUYwNDAzQjksMToxRjA1MDNCOSwxOjFGMDYwM0I5LDE6MUYwNzAzQjksMToxRjAwMDNCOSwxOjFGMDEwM0I5LDE6MUYwMjAzQjksMToxRjAzMDNCOSwxOjFGMDQwM0I5LDE6MUYwNTAzQjksMToxRjA2MDNCOSwxOjFGMDcwM0I5LDE6MUYyMDAzQjksMToxRjIxMDNCOSwxOjFGMjIwM0I5LDE6MUYyMzAzQjksMToxRjI0MDNCOSwxOjFGMjUwM0I5LDE6MUYyNjAzQjksMToxRjI3MDNCOSwxOjFGMjAwM0I5LDE6MUYyMTAzQjksMToxRjIyMDNCOSwxOjFGMjMwM0I5LDE6MUYyNDAzQjksMToxRjI1MDNCOSwxOjFGMjYwM0I5LDE6MUYyNzAzQjksMToxRjYwMDNCOSwxOjFGNjEwM0I5LDE6MUY2MjAzQjksMToxRjYzMDNCOSwxOjFGNjQwM0I5LDE6MUY2NTAzQjksMToxRjY2MDNCOSwxOjFGNjcwM0I5LDE6MUY2MDAzQjksMToxRjYxMDNCOSwxOjFGNjIwM0I5LDE6MUY2MzAzQjksMToxRjY0MDNCOSwxOjFGNjUwM0I5LDE6MUY2NjAzQjksMToxRjY3MDNCOSwzOjFGNzAwM0I5LDE6MDNCMTAzQjksMTowM0FDMDNCOSwyOjAzQjEwMzQyLDE6MDNCMTAzNDIwM0I5LDU6MDNCMTAzQjksNjoxRjc0MDNCOSwxOjAzQjcwM0I5LDE6MDNBRTAzQjksMjowM0I3MDM0MiwxOjAzQjcwMzQyMDNCOSw1OjAzQjcwM0I5LDY6MDNCOTAzMDgwMzAwLDE6MDNCOTAzMDgwMzAxLDM6MDNCOTAzNDIsMTowM0I5MDMwODAzNDIsYjowM0M1MDMwODAzMDAsMTowM0M1MDMwODAzMDEsMTowM0MxMDMxMywyOjAzQzUwMzQyLDE6MDNDNTAzMDgwMzQyLGI6MUY3QzAzQjksMTowM0M5MDNCOSwxOjAzQ0UwM0I5LDI6MDNDOTAzNDIsMTowM0M5MDM0MjAzQjksNTowM0M5MDNCOSxhYzowMDcyMDA3Myw1YjowMEIwMDA2Myw2OjAwQjAwMDY2LGQ6MDA2RTAwNkYsYTowMDczMDA2RCwxOjAwNzQwMDY1MDA2QywxOjAwNzQwMDZELDEyNGY6MDA2ODAwNzAwMDYxLDI6MDA2MTAwNzUsMjowMDZGMDA3NixiOjAwNzAwMDYxLDE6MDA2RTAwNjEsMTowM0JDMDA2MSwxOjAwNkQwMDYxLDE6MDA2QjAwNjEsMTowMDZCMDA2MiwxOjAwNkQwMDYyLDE6MDA2NzAwNjIsMzowMDcwMDA2NiwxOjAwNkUwMDY2LDE6MDNCQzAwNjYsNDowMDY4MDA3QSwxOjAwNkIwMDY4MDA3QSwxOjAwNkQwMDY4MDA3QSwxOjAwNjcwMDY4MDA3QSwxOjAwNzQwMDY4MDA3QSwxNTowMDcwMDA2MSwxOjAwNkIwMDcwMDA2MSwxOjAwNkQwMDcwMDA2MSwxOjAwNjcwMDcwMDA2MSw4OjAwNzAwMDc2LDE6MDA2RTAwNzYsMTowM0JDMDA3NiwxOjAwNkQwMDc2LDE6MDA2QjAwNzYsMTowMDZEMDA3NiwxOjAwNzAwMDc3LDE6MDA2RTAwNzcsMTowM0JDMDA3NywxOjAwNkQwMDc3LDE6MDA2QjAwNzcsMTowMDZEMDA3NywxOjAwNkIwM0M5LDE6MDA2RDAzQzksMjowMDYyMDA3MSwzOjAwNjMyMjE1MDA2QjAwNjcsMTowMDYzMDA2RjAwMkUsMTowMDY0MDA2MiwxOjAwNjcwMDc5LDI6MDA2ODAwNzAsMjowMDZCMDA2QiwxOjAwNkIwMDZELDk6MDA3MDAwNjgsMjowMDcwMDA3MDAwNkQsMTowMDcwMDA3MiwyOjAwNzMwMDc2LDE6MDA3NzAwNjIsYzcyMzowMDY2MDA2NiwxOjAwNjYwMDY5LDE6MDA2NjAwNkMsMTowMDY2MDA2NjAwNjksMTowMDY2MDA2NjAwNkMsMTowMDczMDA3NCwxOjAwNzMwMDc0LGQ6MDU3NDA1NzYsMTowNTc0MDU2NSwxOjA1NzQwNTZCLDE6MDU3RTA1NzYsMTowNTc0MDU2RFwiLCBieXRlczIpO1xuXG5jb25zdCBUYWJsZV9DX3JhbmdlcyA9IGNyZWF0ZVJhbmdlVGFibGUoXCI4MC0yMCwyYTAtLDM5YywzMixmNzEsMThlLDdmMi1mLDE5LTcsMzAtNCw3LTUsZjgxLWIsNSxhODAwLTIwZmYsNGQxLTFmLDExMCxmYS02LGQxNzQtNywyZTg0LSxmZmZmLSxmZmZmLSxmZmZmLSxmZmZmLSxmZmZmLSxmZmZmLSxmZmZmLSxmZmZmLSxmZmZmLSxmZmZmLSxmZmZmLSxmZmZmLSwyLDFmLTVmLGZmN2YtMjAwMDFcIik7XG5cblxuZnVuY3Rpb24gZmxhdHRlbih2YWx1ZXM6IEFycmF5PEFycmF5PG51bWJlcj4+KTogQXJyYXk8bnVtYmVyPiB7XG4gICAgcmV0dXJuIHZhbHVlcy5yZWR1Y2UoKGFjY3VtLCB2YWx1ZSkgPT4ge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKCh2YWx1ZSkgPT4geyBhY2N1bS5wdXNoKHZhbHVlKTsgfSk7XG4gICAgICAgIHJldHVybiBhY2N1bTtcbiAgICB9LCBbIF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX25hbWVwcmVwVGFibGVBMShjb2RlcG9pbnQ6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIW1hdGNoTWFwKGNvZGVwb2ludCwgVGFibGVfQV8xX3Jhbmdlcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfbmFtZXByZXBUYWJsZUIyKGNvZGVwb2ludDogbnVtYmVyKTogQXJyYXk8bnVtYmVyPiB7XG4gICAgbGV0IHJhbmdlID0gbWF0Y2hNYXAoY29kZXBvaW50LCBUYWJsZV9CXzJfcmFuZ2VzKTtcbiAgICBpZiAocmFuZ2UpIHsgcmV0dXJuIFsgY29kZXBvaW50ICsgcmFuZ2UucyBdOyB9XG5cbiAgICBsZXQgY29kZXMgPSBUYWJsZV9CXzJfbHV0X2Fic1tjb2RlcG9pbnRdO1xuICAgIGlmIChjb2RlcykgeyByZXR1cm4gY29kZXM7IH1cblxuICAgIGxldCBzaGlmdCA9IFRhYmxlX0JfMl9sdXRfcmVsW2NvZGVwb2ludF07XG4gICAgaWYgKHNoaWZ0KSB7IHJldHVybiBbIGNvZGVwb2ludCArIHNoaWZ0WzBdIF07IH1cblxuICAgIGxldCBjb21wbGV4ID0gVGFibGVfQl8yX2NvbXBsZXhbY29kZXBvaW50XTtcbiAgICBpZiAoY29tcGxleCkgeyByZXR1cm4gY29tcGxleDsgfVxuXG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfbmFtZXByZXBUYWJsZUMoY29kZXBvaW50OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISFtYXRjaE1hcChjb2RlcG9pbnQsIFRhYmxlX0NfcmFuZ2VzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5hbWVwcmVwKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuXG4gICAgLy8gVGhpcyBhbGxvd3MgcGxhdGZvcm1zIHdpdGggaW5jb21wbGV0ZSBub3JtYWxpemUgdG8gYnlwYXNzXG4gICAgLy8gaXQgZm9yIHZlcnkgYmFzaWMgbmFtZXMgd2hpY2ggdGhlIGJ1aWx0LWluIHRvTG93ZXJDYXNlXG4gICAgLy8gd2lsbCBjZXJ0YWlubHkgaGFuZGxlIGNvcnJlY3RseVxuICAgIGlmICh2YWx1ZS5tYXRjaCgvXlthLXowLTktXSokL2kpICYmIHZhbHVlLmxlbmd0aCA8PSA1OSkgeyByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKTsgfVxuXG4gICAgLy8gR2V0IHRoZSBjb2RlIHBvaW50cyAoa2VlcGluZyB0aGUgY3VycmVudCBub3JtYWxpemF0aW9uKVxuICAgIGxldCBjb2RlcyA9IHRvVXRmOENvZGVQb2ludHModmFsdWUpO1xuXG4gICAgY29kZXMgPSBmbGF0dGVuKGNvZGVzLm1hcCgoY29kZSkgPT4ge1xuICAgICAgICAvLyBTdWJzdGl0dXRlIFRhYmxlIEIuMSAoTWFwcyB0byBOb3RoaW5nKVxuICAgICAgICBpZiAoVGFibGVfQl8xX2ZsYWdzLmluZGV4T2YoY29kZSkgPj0gMCkgeyByZXR1cm4gWyBdOyB9XG4gICAgICAgIGlmIChjb2RlID49IDB4ZmUwMCAmJiBjb2RlIDw9IDB4ZmUwZikgeyByZXR1cm4gWyBdOyB9XG5cbiAgICAgICAgLy8gU3Vic3RpdHV0ZSBUYWJsZSBCLjIgKENhc2UgRm9sZGluZylcbiAgICAgICAgbGV0IGNvZGVzVGFibGVCMiA9IF9uYW1lcHJlcFRhYmxlQjIoY29kZSk7XG4gICAgICAgIGlmIChjb2Rlc1RhYmxlQjIpIHsgcmV0dXJuIGNvZGVzVGFibGVCMjsgfVxuXG4gICAgICAgIC8vIE5vIFN1YnN0aXR1dGlvblxuICAgICAgICByZXR1cm4gWyBjb2RlIF07XG4gICAgfSkpO1xuXG4gICAgLy8gTm9ybWFsaXplIHVzaW5nIGZvcm0gS0NcbiAgICBjb2RlcyA9IHRvVXRmOENvZGVQb2ludHMoX3RvVXRmOFN0cmluZyhjb2RlcyksIFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybS5ORktDKTtcblxuICAgIC8vIFByb2hpYml0IFRhYmxlcyBDLjEuMiwgQy4yLjIsIEMuMywgQy40LCBDLjUsIEMuNiwgQy43LCBDLjgsIEMuOVxuICAgIGNvZGVzLmZvckVhY2goKGNvZGUpID0+IHtcbiAgICAgICAgaWYgKF9uYW1lcHJlcFRhYmxlQyhjb2RlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU1RSSU5HUFJFUF9DT05UQUlOU19QUk9ISUJJVEVEXCIpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBQcm9oaWJpdCBVbmFzc2lnbmVkIENvZGUgUG9pbnRzIChUYWJsZSBBLjEpXG4gICAgY29kZXMuZm9yRWFjaCgoY29kZSkgPT4ge1xuICAgICAgICBpZiAoX25hbWVwcmVwVGFibGVBMShjb2RlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU1RSSU5HUFJFUF9DT05UQUlOU19VTkFTU0lHTkVEXCIpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBJRE5BIGV4dHJhc1xuICAgIGxldCBuYW1lID0gX3RvVXRmOFN0cmluZyhjb2Rlcyk7XG5cbiAgICAvLyBJRE5BOiA0LjIuMy4xXG4gICAgaWYgKG5hbWUuc3Vic3RyaW5nKDAsIDEpID09PSBcIi1cIiB8fCBuYW1lLnN1YnN0cmluZygyLCA0KSA9PT0gXCItLVwiIHx8IG5hbWUuc3Vic3RyaW5nKG5hbWUubGVuZ3RoIC0gMSkgPT09IFwiLVwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgaHlwaGVuXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBuYW1lO1xufVxuXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgdG9VdGY4Qnl0ZXMsIHRvVXRmOFN0cmluZyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9zdHJpbmdzXCI7XG5cbmltcG9ydCB7IFJlYWRlciwgV3JpdGVyIH0gZnJvbSBcIi4vYWJzdHJhY3QtY29kZXJcIjtcbmltcG9ydCB7IER5bmFtaWNCeXRlc0NvZGVyIH0gZnJvbSBcIi4vYnl0ZXNcIjtcblxuZXhwb3J0IGNsYXNzIFN0cmluZ0NvZGVyIGV4dGVuZHMgRHluYW1pY0J5dGVzQ29kZXIge1xuXG4gICAgY29uc3RydWN0b3IobG9jYWxOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoXCJzdHJpbmdcIiwgbG9jYWxOYW1lKTtcbiAgICB9XG5cbiAgICBkZWZhdWx0VmFsdWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuXG4gICAgZW5jb2RlKHdyaXRlcjogV3JpdGVyLCB2YWx1ZTogYW55KTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmVuY29kZSh3cml0ZXIsIHRvVXRmOEJ5dGVzKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgZGVjb2RlKHJlYWRlcjogUmVhZGVyKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRvVXRmOFN0cmluZyhzdXBlci5kZWNvZGUocmVhZGVyKSk7XG4gICAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IENvZGVyLCBSZWFkZXIsIFdyaXRlciB9IGZyb20gXCIuL2Fic3RyYWN0LWNvZGVyXCI7XG5pbXBvcnQgeyBwYWNrLCB1bnBhY2sgfSBmcm9tIFwiLi9hcnJheVwiO1xuXG5leHBvcnQgY2xhc3MgVHVwbGVDb2RlciBleHRlbmRzIENvZGVyIHtcbiAgICByZWFkb25seSBjb2RlcnM6IEFycmF5PENvZGVyPjtcblxuICAgIGNvbnN0cnVjdG9yKGNvZGVyczogQXJyYXk8Q29kZXI+LCBsb2NhbE5hbWU6IHN0cmluZykge1xuICAgICAgICBsZXQgZHluYW1pYyA9IGZhbHNlO1xuICAgICAgICBjb25zdCB0eXBlczogQXJyYXk8c3RyaW5nPiA9IFtdO1xuICAgICAgICBjb2RlcnMuZm9yRWFjaCgoY29kZXIpID0+IHtcbiAgICAgICAgICAgIGlmIChjb2Rlci5keW5hbWljKSB7IGR5bmFtaWMgPSB0cnVlOyB9XG4gICAgICAgICAgICB0eXBlcy5wdXNoKGNvZGVyLnR5cGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgdHlwZSA9IChcInR1cGxlKFwiICsgdHlwZXMuam9pbihcIixcIikgKyBcIilcIik7XG5cbiAgICAgICAgc3VwZXIoXCJ0dXBsZVwiLCB0eXBlLCBsb2NhbE5hbWUsIGR5bmFtaWMpO1xuICAgICAgICB0aGlzLmNvZGVycyA9IGNvZGVycztcbiAgICB9XG5cbiAgICBkZWZhdWx0VmFsdWUoKTogYW55IHtcbiAgICAgICAgY29uc3QgdmFsdWVzOiBhbnkgPSBbIF07XG4gICAgICAgIHRoaXMuY29kZXJzLmZvckVhY2goKGNvZGVyKSA9PiB7XG4gICAgICAgICAgICB2YWx1ZXMucHVzaChjb2Rlci5kZWZhdWx0VmFsdWUoKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFdlIG9ubHkgb3V0cHV0IG5hbWVkIHByb3BlcnRpZXMgZm9yIHVuaXF1ZWx5IG5hbWVkIGNvZGVyc1xuICAgICAgICBjb25zdCB1bmlxdWVOYW1lcyA9IHRoaXMuY29kZXJzLnJlZHVjZSgoYWNjdW0sIGNvZGVyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gY29kZXIubG9jYWxOYW1lO1xuICAgICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWFjY3VtW25hbWVdKSB7IGFjY3VtW25hbWVdID0gMDsgfVxuICAgICAgICAgICAgICAgIGFjY3VtW25hbWVdKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWNjdW07XG4gICAgICAgIH0sIDx7IFsgbmFtZTogc3RyaW5nIF06IG51bWJlciB9PnsgfSk7XG5cbiAgICAgICAgLy8gQWRkIG5hbWVkIHZhbHVlc1xuICAgICAgICB0aGlzLmNvZGVycy5mb3JFYWNoKChjb2RlcjogQ29kZXIsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIGxldCBuYW1lID0gY29kZXIubG9jYWxOYW1lO1xuICAgICAgICAgICAgaWYgKCFuYW1lIHx8IHVuaXF1ZU5hbWVzW25hbWVdICE9PSAxKSB7IHJldHVybjsgfVxuXG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gXCJsZW5ndGhcIikgeyBuYW1lID0gXCJfbGVuZ3RoXCI7IH1cblxuICAgICAgICAgICAgaWYgKHZhbHVlc1tuYW1lXSAhPSBudWxsKSB7IHJldHVybjsgfVxuXG4gICAgICAgICAgICB2YWx1ZXNbbmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh2YWx1ZXMpO1xuICAgIH1cblxuICAgIGVuY29kZSh3cml0ZXI6IFdyaXRlciwgdmFsdWU6IEFycmF5PGFueT4gfCB7IFsgbmFtZTogc3RyaW5nIF06IGFueSB9KTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHBhY2sod3JpdGVyLCB0aGlzLmNvZGVycywgdmFsdWUpO1xuICAgIH1cblxuICAgIGRlY29kZShyZWFkZXI6IFJlYWRlcik6IGFueSB7XG4gICAgICAgIHJldHVybiByZWFkZXIuY29lcmNlKHRoaXMubmFtZSwgdW5wYWNrKHJlYWRlciwgdGhpcy5jb2RlcnMpKTtcbiAgICB9XG59XG5cbiIsImltcG9ydCB7IGtlY2NhazI1NiB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9rZWNjYWsyNTZcIjtcbmltcG9ydCB7IHRvVXRmOEJ5dGVzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3N0cmluZ3NcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGlkKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGtlY2NhazI1Nih0b1V0ZjhCeXRlcyh0ZXh0KSk7XG59XG4iLCJpbXBvcnQgeyBjb25jYXQsIGhleGxpZnkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IHRvVXRmOEJ5dGVzLCB0b1V0ZjhTdHJpbmcgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvc3RyaW5nc1wiO1xuaW1wb3J0IHsga2VjY2FrMjU2IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2tlY2NhazI1NlwiO1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5cbmltcG9ydCB7IGVuc19ub3JtYWxpemUgfSBmcm9tIFwiLi9lbnMtbm9ybWFsaXplL2xpYlwiO1xuXG5jb25zdCBaZXJvcyA9IG5ldyBVaW50OEFycmF5KDMyKTtcblplcm9zLmZpbGwoMCk7XG5cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50KGNvbXA6IFVpbnQ4QXJyYXkpOiBVaW50OEFycmF5IHtcbiAgICBpZiAoY29tcC5sZW5ndGggPT09IDApIHsgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBFTlMgbmFtZTsgZW1wdHkgY29tcG9uZW50XCIpOyB9XG4gICAgcmV0dXJuIGNvbXA7XG59XG5cbmZ1bmN0aW9uIGVuc05hbWVTcGxpdChuYW1lOiBzdHJpbmcpOiBBcnJheTxVaW50OEFycmF5PiB7XG4gICAgY29uc3QgYnl0ZXMgPSB0b1V0ZjhCeXRlcyhlbnNfbm9ybWFsaXplKG5hbWUpKTtcbiAgICBjb25zdCBjb21wczogQXJyYXk8VWludDhBcnJheT4gPSBbIF07XG5cbiAgICBpZiAobmFtZS5sZW5ndGggPT09IDApIHsgcmV0dXJuIGNvbXBzOyB9XG5cbiAgICBsZXQgbGFzdCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBkID0gYnl0ZXNbaV07XG5cbiAgICAgICAgLy8gQSBzZXBhcmF0b3IgKGkuZS4gXCIuXCIpOyBjb3B5IHRoaXMgY29tcG9uZW50XG4gICAgICAgIGlmIChkID09PSAweDJlKSB7XG4gICAgICAgICAgICBjb21wcy5wdXNoKGNoZWNrQ29tcG9uZW50KGJ5dGVzLnNsaWNlKGxhc3QsIGkpKSk7XG4gICAgICAgICAgICBsYXN0ID0gaSArIDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGVyZSB3YXMgYSBzdHJheSBzZXBhcmF0b3IgYXQgdGhlIGVuZCBvZiB0aGUgbmFtZVxuICAgIGlmIChsYXN0ID49IGJ5dGVzLmxlbmd0aCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIEVOUyBuYW1lOyBlbXB0eSBjb21wb25lbnRcIik7IH1cblxuICAgIGNvbXBzLnB1c2goY2hlY2tDb21wb25lbnQoYnl0ZXMuc2xpY2UobGFzdCkpKTtcbiAgICByZXR1cm4gY29tcHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnNOb3JtYWxpemUobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gZW5zTmFtZVNwbGl0KG5hbWUpLm1hcCgoY29tcCkgPT4gdG9VdGY4U3RyaW5nKGNvbXApKS5qb2luKFwiLlwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWROYW1lKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiAoZW5zTmFtZVNwbGl0KG5hbWUpLmxlbmd0aCAhPT0gMCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5hbWVoYXNoKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHR5cGVvZihuYW1lKSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBFTlMgbmFtZTsgbm90IGEgc3RyaW5nXCIsIFwibmFtZVwiLCBuYW1lKTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0OiBzdHJpbmcgfCBVaW50OEFycmF5ID0gWmVyb3M7XG5cbiAgICBjb25zdCBjb21wcyA9IGVuc05hbWVTcGxpdChuYW1lKTtcbiAgICB3aGlsZSAoY29tcHMubGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdCA9IGtlY2NhazI1Nihjb25jYXQoW3Jlc3VsdCwga2VjY2FrMjU2KGNvbXBzLnBvcCgpKV0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGV4bGlmeShyZXN1bHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZG5zRW5jb2RlKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGhleGxpZnkoY29uY2F0KGVuc05hbWVTcGxpdChuYW1lKS5tYXAoKGNvbXApID0+IHtcbiAgICAgICAgLy8gRE5TIGRvZXMgbm90IGFsbG93IGNvbXBvbmVudHMgb3ZlciA2MyBieXRlcyBpbiBsZW5ndGhcbiAgICAgICAgaWYgKGNvbXAubGVuZ3RoID4gNjMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgRE5TIGVuY29kZWQgZW50cnk7IGxlbmd0aCBleGNlZWRzIDYzIGJ5dGVzXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShjb21wLmxlbmd0aCArIDEpO1xuICAgICAgICBieXRlcy5zZXQoY29tcCwgMSk7XG4gICAgICAgIGJ5dGVzWzBdID0gYnl0ZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgcmV0dXJuIGJ5dGVzO1xuXG4gICAgfSkpKSArIFwiMDBcIjtcbn1cbiIsImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJoYXNoLzUuNy4wXCI7XG4iLCIvKipcbiAqIE1JVCBMaWNlbnNlXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDIxIEFuZHJldyBSYWZmZW5zcGVyZ2VyXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gKiBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGlzIGEgbmVhciBjYXJib24tY29weSBvZiB0aGUgb3JpZ2luYWwgc291cmNlIChsaW5rIGJlbG93KSB3aXRoIHRoZVxuICogVHlwZVNjcmlwdCB0eXBpbmdzIGFkZGVkIGFuZCBhIGZldyB0d2Vha3MgdG8gbWFrZSBpdCBFUzMtY29tcGF0aWJsZS5cbiAqXG4gKiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hZHJhZmZ5L2Vucy1ub3JtYWxpemUuanNcbiAqL1xuXG5leHBvcnQgdHlwZSBOdW1iZXJzID0gVWludDhBcnJheSB8IEFycmF5PG51bWJlcj47XG5leHBvcnQgdHlwZSBOZXh0RnVuYyA9ICguLi5hcmdzOiBBcnJheTxhbnk+KSA9PiBudW1iZXI7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZWhuYW1tb2RpL3BvbHlmaWxsL2Jsb2IvbWFzdGVyL2FycmF5LnBvbHlmaWxsLmpzXG5mdW5jdGlvbiBmbGF0KGFycmF5OiBBcnJheTxhbnk+LCBkZXB0aD86IG51bWJlcik6IEFycmF5PGFueT4ge1xuICAgIGlmIChkZXB0aCA9PSBudWxsKSB7IGRlcHRoID0gMTsgfVxuICAgIGNvbnN0IHJlc3VsdDogQXJyYXk8YW55PiA9IFtdO1xuXG4gICAgY29uc3QgZm9yRWFjaCA9IHJlc3VsdC5mb3JFYWNoO1xuXG4gICAgY29uc3QgZmxhdERlZXAgPSBmdW5jdGlvbiAoYXJyOiBBcnJheTxhbnk+LCBkZXB0aDogbnVtYmVyKSB7XG4gICAgICAgIGZvckVhY2guY2FsbChhcnIsIGZ1bmN0aW9uICh2YWw6IGFueSkge1xuICAgICAgICAgICAgaWYgKGRlcHRoID4gMCAmJiBBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgICAgICAgICBmbGF0RGVlcCh2YWwsIGRlcHRoIC0gMSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZsYXREZWVwKGFycmF5LCBkZXB0aCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZnJvbUVudHJpZXM8VCBleHRlbmRzIHN0cmluZyB8IG51bWJlciB8IHN5bWJvbCA9IHN0cmluZyB8IG51bWJlciB8IHN5bWJvbCwgVSA9IGFueT4oYXJyYXk6IEFycmF5PFtULCBVXT4pOiBSZWNvcmQ8VCwgVT4ge1xuICAgIGNvbnN0IHJlc3VsdDogUmVjb3JkPFQsIFU+ID0gPFJlY29yZDxULCBVPj57IH07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGFycmF5W2ldO1xuICAgICAgICByZXN1bHRbdmFsdWVbMF1dID0gdmFsdWVbMV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVfYXJpdGhtZXRpYyhieXRlczogTnVtYmVycyk6IEFycmF5PG51bWJlcj4ge1xuXHRsZXQgcG9zID0gMDtcblx0ZnVuY3Rpb24gdTE2KCkgeyByZXR1cm4gKGJ5dGVzW3BvcysrXSA8PCA4KSB8IGJ5dGVzW3BvcysrXTsgfVxuXHRcblx0Ly8gZGVjb2RlIHRoZSBmcmVxdWVuY3kgdGFibGVcblx0bGV0IHN5bWJvbF9jb3VudCA9IHUxNigpO1xuXHRsZXQgdG90YWwgPSAxO1xuXHRsZXQgYWNjID0gWzAsIDFdOyAvLyBmaXJzdCBzeW1ib2wgaGFzIGZyZXF1ZW5jeSAxXG5cdGZvciAobGV0IGkgPSAxOyBpIDwgc3ltYm9sX2NvdW50OyBpKyspIHtcblx0XHRhY2MucHVzaCh0b3RhbCArPSB1MTYoKSk7XG5cdH1cblxuXHQvLyBza2lwIHRoZSBzaXplZC1wYXlsb2FkIHRoYXQgdGhlIGxhc3QgMyBzeW1ib2xzIGluZGV4IGludG9cblx0bGV0IHNraXAgPSB1MTYoKTtcblx0bGV0IHBvc19wYXlsb2FkID0gcG9zO1xuXHRwb3MgKz0gc2tpcDtcblxuXHRsZXQgcmVhZF93aWR0aCA9IDA7XG5cdGxldCByZWFkX2J1ZmZlciA9IDA7IFxuXHRmdW5jdGlvbiByZWFkX2JpdCgpIHtcblx0XHRpZiAocmVhZF93aWR0aCA9PSAwKSB7XG5cdFx0XHQvLyB0aGlzIHdpbGwgcmVhZCBiZXlvbmQgZW5kIG9mIGJ1ZmZlclxuXHRcdFx0Ly8gYnV0ICh1bmRlZmluZWR8MCkgPT4gemVybyBwYWRcblx0XHRcdHJlYWRfYnVmZmVyID0gKHJlYWRfYnVmZmVyIDw8IDgpIHwgYnl0ZXNbcG9zKytdO1xuXHRcdFx0cmVhZF93aWR0aCA9IDg7XG5cdFx0fVxuXHRcdHJldHVybiAocmVhZF9idWZmZXIgPj4gLS1yZWFkX3dpZHRoKSAmIDE7XG5cdH1cblxuXHRjb25zdCBOID0gMzE7XG5cdGNvbnN0IEZVTEwgPSAyKipOO1xuXHRjb25zdCBIQUxGID0gRlVMTCA+Pj4gMTtcblx0Y29uc3QgUVJUUiA9IEhBTEYgPj4gMTtcblx0Y29uc3QgTUFTSyA9IEZVTEwgLSAxO1xuXG5cdC8vIGZpbGwgcmVnaXN0ZXJcblx0bGV0IHJlZ2lzdGVyID0gMDtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBOOyBpKyspIHJlZ2lzdGVyID0gKHJlZ2lzdGVyIDw8IDEpIHwgcmVhZF9iaXQoKTtcblxuXHRsZXQgc3ltYm9scyA9IFtdO1xuXHRsZXQgbG93ID0gMDtcblx0bGV0IHJhbmdlID0gRlVMTDsgLy8gdHJlYXQgbGlrZSBhIGZsb2F0XG5cdHdoaWxlICh0cnVlKSB7XG5cdFx0bGV0IHZhbHVlID0gTWF0aC5mbG9vcigoKChyZWdpc3RlciAtIGxvdyArIDEpICogdG90YWwpIC0gMSkgLyByYW5nZSk7XG5cdFx0bGV0IHN0YXJ0ID0gMDtcblx0XHRsZXQgZW5kID0gc3ltYm9sX2NvdW50O1xuXHRcdHdoaWxlIChlbmQgLSBzdGFydCA+IDEpIHsgLy8gYmluYXJ5IHNlYXJjaFxuXHRcdFx0bGV0IG1pZCA9IChzdGFydCArIGVuZCkgPj4+IDE7XG5cdFx0XHRpZiAodmFsdWUgPCBhY2NbbWlkXSkge1xuXHRcdFx0XHRlbmQgPSBtaWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzdGFydCA9IG1pZDtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHN0YXJ0ID09IDApIGJyZWFrOyAvLyBmaXJzdCBzeW1ib2wgaXMgZW5kIG1hcmtcblx0XHRzeW1ib2xzLnB1c2goc3RhcnQpO1xuXHRcdGxldCBhID0gbG93ICsgTWF0aC5mbG9vcihyYW5nZSAqIGFjY1tzdGFydF0gICAvIHRvdGFsKTtcblx0XHRsZXQgYiA9IGxvdyArIE1hdGguZmxvb3IocmFuZ2UgKiBhY2Nbc3RhcnQrMV0gLyB0b3RhbCkgLSAxXG5cdFx0d2hpbGUgKCgoYSBeIGIpICYgSEFMRikgPT0gMCkge1xuXHRcdFx0cmVnaXN0ZXIgPSAocmVnaXN0ZXIgPDwgMSkgJiBNQVNLIHwgcmVhZF9iaXQoKTtcblx0XHRcdGEgPSAoYSA8PCAxKSAmIE1BU0s7XG5cdFx0XHRiID0gKGIgPDwgMSkgJiBNQVNLIHwgMTtcblx0XHR9XG5cdFx0d2hpbGUgKGEgJiB+YiAmIFFSVFIpIHtcblx0XHRcdHJlZ2lzdGVyID0gKHJlZ2lzdGVyICYgSEFMRikgfCAoKHJlZ2lzdGVyIDw8IDEpICYgKE1BU0sgPj4+IDEpKSB8IHJlYWRfYml0KCk7XG5cdFx0XHRhID0gKGEgPDwgMSkgXiBIQUxGO1xuXHRcdFx0YiA9ICgoYiBeIEhBTEYpIDw8IDEpIHwgSEFMRiB8IDE7XG5cdFx0fVxuXHRcdGxvdyA9IGE7XG5cdFx0cmFuZ2UgPSAxICsgYiAtIGE7XG5cdH1cblx0bGV0IG9mZnNldCA9IHN5bWJvbF9jb3VudCAtIDQ7XG5cdHJldHVybiBzeW1ib2xzLm1hcCh4ID0+IHsgLy8gaW5kZXggaW50byBwYXlsb2FkXG5cdFx0c3dpdGNoICh4IC0gb2Zmc2V0KSB7XG5cdFx0XHRjYXNlIDM6IHJldHVybiBvZmZzZXQgKyAweDEwMTAwICsgKChieXRlc1twb3NfcGF5bG9hZCsrXSA8PCAxNikgfCAoYnl0ZXNbcG9zX3BheWxvYWQrK10gPDwgOCkgfCBieXRlc1twb3NfcGF5bG9hZCsrXSk7XG5cdFx0XHRjYXNlIDI6IHJldHVybiBvZmZzZXQgKyAweDEwMCArICgoYnl0ZXNbcG9zX3BheWxvYWQrK10gPDwgOCkgfCBieXRlc1twb3NfcGF5bG9hZCsrXSk7XG5cdFx0XHRjYXNlIDE6IHJldHVybiBvZmZzZXQgKyBieXRlc1twb3NfcGF5bG9hZCsrXTtcblx0XHRcdGRlZmF1bHQ6IHJldHVybiB4IC0gMTtcblx0XHR9XG5cdH0pO1xufVx0XG5cblxuLy8gcmV0dXJucyBhbiBpdGVyYXRvciB3aGljaCByZXR1cm5zIHRoZSBuZXh0IHN5bWJvbFxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRfcGF5bG9hZCh2OiBOdW1iZXJzKTogTmV4dEZ1bmMge1xuXHRsZXQgcG9zID0gMDtcblx0cmV0dXJuICgpID0+IHZbcG9zKytdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRfY29tcHJlc3NlZF9wYXlsb2FkKGJ5dGVzOiBOdW1iZXJzKTogTmV4dEZ1bmMge1xuXHRyZXR1cm4gcmVhZF9wYXlsb2FkKGRlY29kZV9hcml0aG1ldGljKGJ5dGVzKSk7XG59XG5cbi8vIGVnLiBbMCwxLDIsMy4uLl0gPT4gWzAsLTEsMSwtMiwuLi5dXG5leHBvcnQgZnVuY3Rpb24gc2lnbmVkKGk6IG51bWJlcik6IG51bWJlciB7IFxuXHRyZXR1cm4gKGkgJiAxKSA/ICh+aSA+PiAxKSA6IChpID4+IDEpO1xufVxuXG5mdW5jdGlvbiByZWFkX2NvdW50cyhuOiBudW1iZXIsIG5leHQ6IE5leHRGdW5jKTogQXJyYXk8bnVtYmVyPiB7XG5cdGxldCB2ID0gQXJyYXkobik7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB2W2ldID0gMSArIG5leHQoKTtcblx0cmV0dXJuIHY7XG59XG5cbmZ1bmN0aW9uIHJlYWRfYXNjZW5kaW5nKG46IG51bWJlciwgbmV4dDogTmV4dEZ1bmMpOiBBcnJheTxudW1iZXI+IHtcblx0bGV0IHYgPSBBcnJheShuKTtcblx0Zm9yIChsZXQgaSA9IDAsIHggPSAtMTsgaSA8IG47IGkrKykgdltpXSA9IHggKz0gMSArIG5leHQoKTtcblx0cmV0dXJuIHY7XG59XG5cbmZ1bmN0aW9uIHJlYWRfZGVsdGFzKG46IG51bWJlciwgbmV4dDogTmV4dEZ1bmMpOiBBcnJheTxudW1iZXI+IHtcblx0bGV0IHYgPSBBcnJheShuKTtcblx0Zm9yIChsZXQgaSA9IDAsIHggPSAwOyBpIDwgbjsgaSsrKSB2W2ldID0geCArPSBzaWduZWQobmV4dCgpKTtcblx0cmV0dXJuIHY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkX21lbWJlcl9hcnJheShuZXh0OiBOZXh0RnVuYywgbG9va3VwPzogUmVjb3JkPG51bWJlciwgbnVtYmVyPikge1xuICAgIGxldCB2ID0gcmVhZF9hc2NlbmRpbmcobmV4dCgpLCBuZXh0KTtcbiAgICBsZXQgbiA9IG5leHQoKTtcbiAgICBsZXQgdlggPSByZWFkX2FzY2VuZGluZyhuLCBuZXh0KTtcbiAgICBsZXQgdk4gPSByZWFkX2NvdW50cyhuLCBuZXh0KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZOW2ldOyBqKyspIHtcbiAgICAgICAgICAgIHYucHVzaCh2WFtpXSArIGopO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsb29rdXAgPyB2Lm1hcCh4ID0+IGxvb2t1cFt4XSkgOiB2O1xufVxuXG4vLyByZXR1cm5zIGFycmF5IG9mIFxuLy8gW3gsIHlzXSA9PiBzaW5nbGUgcmVwbGFjZW1lbnQgcnVsZVxuLy8gW3gsIHlzLCBuLCBkeCwgZHhdID0+IGxpbmVhciBtYXBcbmV4cG9ydCBmdW5jdGlvbiByZWFkX21hcHBlZF9tYXAobmV4dDogTmV4dEZ1bmMpOiBSZWNvcmQ8bnVtYmVyLCBBcnJheTxudW1iZXI+PiB7XG5cdGxldCByZXQgPSBbXTtcblx0d2hpbGUgKHRydWUpIHtcblx0XHRsZXQgdyA9IG5leHQoKTtcblx0XHRpZiAodyA9PSAwKSBicmVhaztcblx0XHRyZXQucHVzaChyZWFkX2xpbmVhcl90YWJsZSh3LCBuZXh0KSk7XG5cdH1cblx0d2hpbGUgKHRydWUpIHtcblx0XHRsZXQgdyA9IG5leHQoKSAtIDE7XG5cdFx0aWYgKHcgPCAwKSBicmVhaztcblx0XHRyZXQucHVzaChyZWFkX3JlcGxhY2VtZW50X3RhYmxlKHcsIG5leHQpKTtcblx0fVxuXHRyZXR1cm4gZnJvbUVudHJpZXM8bnVtYmVyLCBBcnJheTxudW1iZXI+PihmbGF0KHJldCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZF96ZXJvX3Rlcm1pbmF0ZWRfYXJyYXkobmV4dDogTmV4dEZ1bmMpOiBBcnJheTxudW1iZXI+IHtcblx0bGV0IHYgPSBbXTtcblx0d2hpbGUgKHRydWUpIHtcblx0XHRsZXQgaSA9IG5leHQoKTtcblx0XHRpZiAoaSA9PSAwKSBicmVhaztcblx0XHR2LnB1c2goaSk7XG5cdH1cblx0cmV0dXJuIHY7XG59XG5cbmZ1bmN0aW9uIHJlYWRfdHJhbnNwb3NlZChuOiBudW1iZXIsIHc6IG51bWJlciwgbmV4dDogTmV4dEZ1bmMpOiBBcnJheTxBcnJheTxudW1iZXI+PiB7XG4gICAgbGV0IG0gPSBBcnJheShuKS5maWxsKHVuZGVmaW5lZCkubWFwKCgpID0+IFtdKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHc7IGkrKykge1xuICAgICAgICByZWFkX2RlbHRhcyhuLCBuZXh0KS5mb3JFYWNoKCh4LCBqKSA9PiBtW2pdLnB1c2goeCkpO1xuICAgIH1cbiAgICByZXR1cm4gbTtcbn1cblxuXG5mdW5jdGlvbiByZWFkX2xpbmVhcl90YWJsZSh3OiBudW1iZXIsIG5leHQ6IE5leHRGdW5jKTogQXJyYXk8QXJyYXk8bnVtYmVyIHwgQXJyYXk8bnVtYmVyPj4+IHtcblx0bGV0IGR4ID0gMSArIG5leHQoKTtcblx0bGV0IGR5ID0gbmV4dCgpO1xuXHRsZXQgdk4gPSByZWFkX3plcm9fdGVybWluYXRlZF9hcnJheShuZXh0KTtcblx0bGV0IG0gPSByZWFkX3RyYW5zcG9zZWQodk4ubGVuZ3RoLCAxK3csIG5leHQpO1xuXHRyZXR1cm4gZmxhdChtLm1hcCgodiwgaSkgPT4ge1xuXHQgIGNvbnN0IHggPSB2WzBdLCB5cyA9IHYuc2xpY2UoMSk7XG5cdFx0Ly9sZXQgW3gsIC4uLnlzXSA9IHY7XG5cdFx0Ly9yZXR1cm4gQXJyYXkodk5baV0pLmZpbGwoKS5tYXAoKF8sIGopID0+IHtcblx0XHRyZXR1cm4gQXJyYXkodk5baV0pLmZpbGwodW5kZWZpbmVkKS5tYXAoKF8sIGopID0+IHtcblx0XHRcdGxldCBqX2R5ID0gaiAqIGR5O1xuXHRcdFx0cmV0dXJuIFt4ICsgaiAqIGR4LCB5cy5tYXAoeSA9PiB5ICsgal9keSldO1xuXHRcdH0pO1xuXHR9KSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRfcmVwbGFjZW1lbnRfdGFibGUodzogbnVtYmVyLCBuZXh0OiBOZXh0RnVuYyk6IEFycmF5PFsgbnVtYmVyLCBBcnJheTxudW1iZXI+IF0+IHtcblx0bGV0IG4gPSAxICsgbmV4dCgpO1xuXHRsZXQgbSA9IHJlYWRfdHJhbnNwb3NlZChuLCAxK3csIG5leHQpO1xuXHRyZXR1cm4gbS5tYXAodiA9PiBbdlswXSwgdi5zbGljZSgxKV0pO1xufVxuXG5leHBvcnQgdHlwZSBCcmFuY2ggPSB7XG4gICAgc2V0OiBTZXQ8bnVtYmVyPjtcbiAgICBub2RlOiBOb2RlO1xufTtcblxuZXhwb3J0IHR5cGUgTm9kZSA9IHtcbiAgICBicmFuY2hlczogQXJyYXk8QnJhbmNoPjtcbiAgICB2YWxpZDogbnVtYmVyO1xuICAgIGZlMGY6IGJvb2xlYW47XG4gICAgc2F2ZTogYm9vbGVhbjtcbiAgICBjaGVjazogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkX2Vtb2ppX3RyaWUobmV4dDogTmV4dEZ1bmMpOiBOb2RlIHtcblx0bGV0IHNvcnRlZCA9IHJlYWRfbWVtYmVyX2FycmF5KG5leHQpLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcblx0cmV0dXJuIHJlYWQoKTtcblx0ZnVuY3Rpb24gcmVhZCgpOiBOb2RlIHtcblx0XHRsZXQgYnJhbmNoZXMgPSBbXTtcblx0XHR3aGlsZSAodHJ1ZSkge1xuXHRcdFx0bGV0IGtleXMgPSByZWFkX21lbWJlcl9hcnJheShuZXh0LCBzb3J0ZWQpO1xuXHRcdFx0aWYgKGtleXMubGVuZ3RoID09IDApIGJyZWFrO1xuXHRcdFx0YnJhbmNoZXMucHVzaCh7c2V0OiBuZXcgU2V0KGtleXMpLCBub2RlOiByZWFkKCl9KTtcblx0XHR9XG4gICAgYnJhbmNoZXMuc29ydCgoYSwgYikgPT4gYi5zZXQuc2l6ZSAtIGEuc2V0LnNpemUpOyAvLyBzb3J0IGJ5IGxpa2VsaWhvb2RcbiBcdFx0bGV0IHRlbXAgPSBuZXh0KCk7XG4gXHRcdGxldCB2YWxpZCA9IHRlbXAgJSAzO1xuIFx0XHR0ZW1wID0gKHRlbXAgLyAzKXwwO1xuIFx0XHRsZXQgZmUwZiA9ICEhKHRlbXAgJiAxKTtcbiBcdFx0dGVtcCA+Pj0gMTtcbiBcdFx0bGV0IHNhdmUgPSB0ZW1wID09IDE7XG4gXHRcdGxldCBjaGVjayA9IHRlbXAgPT0gMjtcbiBcdFx0cmV0dXJuIHticmFuY2hlcywgdmFsaWQsIGZlMGYsIHNhdmUsIGNoZWNrfTtcblx0fVxufVxuIiwiLyoqXG4gKiBNSVQgTGljZW5zZVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAyMSBBbmRyZXcgUmFmZmVuc3BlcmdlclxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICogU09GVFdBUkUuXG4gKlxuICogVGhpcyBpcyBhIG5lYXIgY2FyYm9uLWNvcHkgb2YgdGhlIG9yaWdpbmFsIHNvdXJjZSAobGluayBiZWxvdykgd2l0aCB0aGVcbiAqIFR5cGVTY3JpcHQgdHlwaW5ncyBhZGRlZCBhbmQgYSBmZXcgdHdlYWtzIHRvIG1ha2UgaXQgRVMzLWNvbXBhdGlibGUuXG4gKlxuICogU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYWRyYWZmeS9lbnMtbm9ybWFsaXplLmpzXG4gKi9cblxuaW1wb3J0IHsgdG9VdGY4Q29kZVBvaW50cyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9zdHJpbmdzXCI7XG5cbmltcG9ydCB7IGdldERhdGEgfSBmcm9tICcuL2luY2x1ZGUuanMnO1xuY29uc3QgciA9IGdldERhdGEoKTtcblxuaW1wb3J0IHtyZWFkX21lbWJlcl9hcnJheSwgcmVhZF9tYXBwZWRfbWFwLCByZWFkX2Vtb2ppX3RyaWV9IGZyb20gJy4vZGVjb2Rlci5qcyc7XG5cbi8vIEBUT0RPOiBUaGlzIHNob3VsZCBiZSBsYXppbHkgbG9hZGVkXG5cbmNvbnN0IFZBTElEID0gbmV3IFNldChyZWFkX21lbWJlcl9hcnJheShyKSk7XG5jb25zdCBJR05PUkVEID0gbmV3IFNldChyZWFkX21lbWJlcl9hcnJheShyKSk7XG5jb25zdCBNQVBQRUQgPSByZWFkX21hcHBlZF9tYXAocik7XG5jb25zdCBFTU9KSV9ST09UID0gcmVhZF9lbW9qaV90cmllKHIpO1xuLy9jb25zdCBORkNfQ0hFQ0sgPSBuZXcgU2V0KHJlYWRfbWVtYmVyX2FycmF5KHIsIEFycmF5LmZyb20oVkFMSUQudmFsdWVzKCkpLnNvcnQoKGEsIGIpID0+IGEgLSBiKSkpO1xuXG4vL2NvbnN0IFNUT1AgPSAweDJFO1xuY29uc3QgSFlQSEVOID0gMHgyRDtcbmNvbnN0IFVOREVSU0NPUkUgPSAweDVGO1xuXG5mdW5jdGlvbiBleHBsb2RlX2NwKG5hbWU6IHN0cmluZyk6IEFycmF5PG51bWJlcj4ge1xuICAgIHJldHVybiB0b1V0ZjhDb2RlUG9pbnRzKG5hbWUpO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJfZmUwZihjcHM6IEFycmF5PG51bWJlcj4pOiBBcnJheTxudW1iZXI+IHtcbiAgICByZXR1cm4gY3BzLmZpbHRlcihjcCA9PiBjcCAhPSAweEZFMEYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5zX25vcm1hbGl6ZV9wb3N0X2NoZWNrKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG5cdGZvciAobGV0IGxhYmVsIG9mIG5hbWUuc3BsaXQoJy4nKSkge1xuXHRcdGxldCBjcHMgPSBleHBsb2RlX2NwKGxhYmVsKTtcblx0XHR0cnkge1xuXHRcdFx0Zm9yIChsZXQgaSA9IGNwcy5sYXN0SW5kZXhPZihVTkRFUlNDT1JFKSAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdGlmIChjcHNbaV0gIT09IFVOREVSU0NPUkUpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYHVuZGVyc2NvcmUgb25seSBhbGxvd2VkIGF0IHN0YXJ0YCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChjcHMubGVuZ3RoID49IDQgJiYgY3BzLmV2ZXJ5KGNwID0+IGNwIDwgMHg4MCkgJiYgY3BzWzJdID09PSBIWVBIRU4gJiYgY3BzWzNdID09PSBIWVBIRU4pIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGxhYmVsIGV4dGVuc2lvbmApO1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGxhYmVsIFwiJHtsYWJlbH1cIjogJHtlcnIubWVzc2FnZX1gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnNfbm9ybWFsaXplKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG5cdHJldHVybiBlbnNfbm9ybWFsaXplX3Bvc3RfY2hlY2sobm9ybWFsaXplKG5hbWUsIGZpbHRlcl9mZTBmKSk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZShuYW1lOiBzdHJpbmcsIGVtb2ppX2ZpbHRlcjogKGE6IEFycmF5PG51bWJlcj4pID0+IEFycmF5PG51bWJlcj4pOiBzdHJpbmcge1xuXHRsZXQgaW5wdXQgPSBleHBsb2RlX2NwKG5hbWUpLnJldmVyc2UoKTsgLy8gZmxpcCBmb3IgcG9wXG5cdGxldCBvdXRwdXQgPSBbXTtcblx0d2hpbGUgKGlucHV0Lmxlbmd0aCkge1x0XHRcblx0XHRsZXQgZW1vamkgPSBjb25zdW1lX2Vtb2ppX3JldmVyc2VkKGlucHV0KTtcblx0XHRpZiAoZW1vamkpIHtcblx0XHRcdG91dHB1dC5wdXNoKC4uLmVtb2ppX2ZpbHRlcihlbW9qaSkpO1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdGxldCBjcCA9IGlucHV0LnBvcCgpO1xuXHRcdGlmIChWQUxJRC5oYXMoY3ApKSB7XG5cdFx0XHRvdXRwdXQucHVzaChjcCk7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9IFxuXHRcdGlmIChJR05PUkVELmhhcyhjcCkpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblx0XHRsZXQgY3BzID0gTUFQUEVEW2NwXTtcblx0XHRpZiAoY3BzKSB7XG5cdFx0XHRvdXRwdXQucHVzaCguLi5jcHMpO1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdHRocm93IG5ldyBFcnJvcihgRGlzYWxsb3dlZCBjb2RlcG9pbnQ6IDB4JHtjcC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKX1gKTtcblx0fVxuXHRyZXR1cm4gZW5zX25vcm1hbGl6ZV9wb3N0X2NoZWNrKG5mYyhTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5vdXRwdXQpKSk7XG59XG5cbmZ1bmN0aW9uIG5mYyhzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBzLm5vcm1hbGl6ZSgnTkZDJyk7XG59XG5cbmZ1bmN0aW9uIGNvbnN1bWVfZW1vamlfcmV2ZXJzZWQoY3BzOiBBcnJheTxudW1iZXI+LCBlYXRlbj86IEFycmF5PG51bWJlcj4pIHtcblx0bGV0IG5vZGUgPSBFTU9KSV9ST09UO1xuXHRsZXQgZW1vamk7XG5cdGxldCBzYXZlZDtcblx0bGV0IHN0YWNrID0gW107XG5cdGxldCBwb3MgPSBjcHMubGVuZ3RoO1xuXHRpZiAoZWF0ZW4pIGVhdGVuLmxlbmd0aCA9IDA7IC8vIGNsZWFyIGlucHV0IGJ1ZmZlciAoaWYgbmVlZGVkKVxuXHR3aGlsZSAocG9zKSB7XG5cdFx0bGV0IGNwID0gY3BzWy0tcG9zXTtcblx0XHRub2RlID0gbm9kZS5icmFuY2hlcy5maW5kKHggPT4geC5zZXQuaGFzKGNwKSk/Lm5vZGU7XG5cdFx0aWYgKCFub2RlKSBicmVhaztcblx0XHRpZiAobm9kZS5zYXZlKSB7IC8vIHJlbWVtYmVyXG5cdFx0XHRzYXZlZCA9IGNwO1xuXHRcdH0gZWxzZSBpZiAobm9kZS5jaGVjaykgeyAvLyBjaGVjayBleGNsdXNpb25cblx0XHRcdGlmIChjcCA9PT0gc2F2ZWQpIGJyZWFrO1xuXHRcdH1cblx0XHRzdGFjay5wdXNoKGNwKTtcblx0XHRpZiAobm9kZS5mZTBmKSB7XG5cdFx0XHRzdGFjay5wdXNoKDB4RkUwRik7XG5cdFx0XHRpZiAocG9zID4gMCAmJiBjcHNbcG9zIC0gMV0gPT0gMHhGRTBGKSBwb3MtLTsgLy8gY29uc3VtZSBvcHRpb25hbCBGRTBGXG5cdFx0fVxuXHRcdGlmIChub2RlLnZhbGlkKSB7IC8vIHRoaXMgaXMgYSB2YWxpZCBlbW9qaSAoc28gZmFyKVxuXHRcdFx0ZW1vamkgPSBzdGFjay5zbGljZSgpOyAvLyBjb3B5IHN0YWNrXG5cdFx0XHRpZiAobm9kZS52YWxpZCA9PSAyKSBlbW9qaS5zcGxpY2UoMSwgMSk7IC8vIGRlbGV0ZSBGRTBGIGF0IHBvc2l0aW9uIDEgKFJHSSBaV0ogZG9uJ3QgZm9sbG93IHNwZWMhKVxuXHRcdFx0aWYgKGVhdGVuKSBlYXRlbi5wdXNoKC4uLmNwcy5zbGljZShwb3MpLnJldmVyc2UoKSk7IC8vIGNvcHkgaW5wdXQgKGlmIG5lZWRlZClcblx0XHRcdGNwcy5sZW5ndGggPSBwb3M7IC8vIHRydW5jYXRlXG5cdFx0fVxuXHR9XG5cdHJldHVybiBlbW9qaTtcbn1cbiIsIi8qKlxuICogTUlUIExpY2Vuc2VcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMjEgQW5kcmV3IFJhZmZlbnNwZXJnZXJcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICpcbiAqIFRoaXMgaXMgYSBuZWFyIGNhcmJvbi1jb3B5IG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UgKGxpbmsgYmVsb3cpIHdpdGggdGhlXG4gKiBUeXBlU2NyaXB0IHR5cGluZ3MgYWRkZWQgYW5kIGEgZmV3IHR3ZWFrcyB0byBtYWtlIGl0IEVTMy1jb21wYXRpYmxlLlxuICpcbiAqIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2FkcmFmZnkvZW5zLW5vcm1hbGl6ZS5qc1xuICovXG5cbmltcG9ydCB7IGRlY29kZSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iYXNlNjRcIjtcblxuaW1wb3J0IHtyZWFkX2NvbXByZXNzZWRfcGF5bG9hZH0gZnJvbSAnLi9kZWNvZGVyLmpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGEoKTogKCkgPT4gbnVtYmVyIHtcbiAgICByZXR1cm4gcmVhZF9jb21wcmVzc2VkX3BheWxvYWQoZGVjb2RlKCdBRVFGMkFPMkRFc0Eyd0lyQUdzQlJBQnhBTjhBWndDY0FFd0FxZ0EwQUd3QVVnQnlBRGNBVEFBVkFGWUFJUUF5QUNFQUtBQVlBRmdBR3dBakFCUUFNQUFtQURJQUZBQWZBQlFBS3dBVEFDb0FEZ0FiQUE4QUhRQVlBQm9BR1FBeEFEZ0FMQUFvQUR3QUV3QTlBQk1BR2dBUkFBNEFEd0FXQUJNQUZnQUlBQThBSGdRWEJZTUE1QkhKQVM4SnRBWW9BZTRBRXhvemkwVUFIMjF0QWFNbkJUOENybkl5aHJNRGhSZ0R5Z0lCVUFFSGNvRkhVUGU4QVhCakFld0NqZ0RRUjhJSUNJY0VjUUx3QVRYQ0RnenZId0JtQm9ITkFxc0JkQmNVQXlrZ0RoQU1TaHNrTWdvOEFZOGpxQVFmQVVBZkh3OEJEdzg3TWlvR2xDSVBCd1pDYTRFTGF0TUFBTXNwSlZnc0RsOEFJaGNrU2c4WEFIZHZUd0JjSVFFaURUNE9QaFVxYnlFQ0FFb0FTMzRBZWo4WWJ4ODNKZ1QvWHc4Z0h4Wi83dzhSSUN4UEhBOXZCdytQZnc4UEh3QVBGditmQXNBdkNjOHZFcjhpdndEL0VROEJvbDhPRUJhL0E3OGhyd0FQQ1U4dkVTTnZ2d1dmSHdOZkFWb0RIcitaQUFFRDM0WWFBZEpQQUs3UEx3U0VnRExIQUdvMVB6OFB2eDlmVXdNcnBiOE8vNThWVHpBUElCb1hJeVFKTkY4aHB3SVZBVDhZR0FVQURETkJhWDNSQU1vbUpDZzlFaFVlQTI5TUFCc1pCVE1OSmlwak9oYzE5Z2NJRFI4YkJ3UUhFZ2dDV2k2RElnTHVBUVlBK0JBRkNoYTNBNVhpQUVzcU03VUZGZ0ZMaEFNakZUTVlFMUtsbnc3NG5SVkJHL0FTQ20wQllSTi9CcnNVM1ZvV3krUzB2VjhMUXgrdk44Z0YyQUMyQUs1RUFXd0FwZ1lES21BQXJvUTBORFEwQVQrT0NnN3dBQUlIUkFicE5nVmNCVjBBUFRBNUJmYlBGZ01MemNZTC9RcXFBODJlQkFMS0NqUUNqcVlDaHQwL2syK09Bc1hRQW9QM0FTVEtEZ0R3NkFDS0FVWUNNcElLSnBSYUFFNEE1d29tQUJ6WnZzMFJFRUtpQUNJUUFkNVFkQUVDQWo0WXdnL3dHcVkyQVZnQVlBRFl2QW9DR0FFdWJBMGd2QVkyQUxBQWJwYnZxcHlFQUdBRXBnUUFKZ0FHN2dBZ0FFQUNtZ2hVRndDcUFNcEFJTlFJd0M0RHRoUkFBUGN5Y0tnQXBvSWRBQndCZkNpc0FCb0FUd0JxQVNJQXZoblNCUDhhSC9FQ2VBS1hBcTQwTmpnREJUd0ZZUVU2QVhzM29BQmdBRDRYTmdtY0NZMWVDbDV0SUZaZVVxR2d5b05IQUJnQUVRQWFBQk53V1FBbUFCTUFUUE1hM1QzNEFEbGR5cHJtTTFNMlhvY2lVUWdMenZ3QVhUM3hBQmdBRVFBYUFCTndJR0ZBbkFERDhBQWdBRDRCQkpXemFDY0lBSUVCRk1BV3dLb0FBZHE5QldBRjV3TFFwQUxFdFFBS1VTR2thaFI0R25KTStnc0F3Q2dlRkFpVUFFQ1EwQlF1TDhBQUlBQUFBREtlSWhlY2x2RnFRQUFFVHI0aUFNeElBUk1nQU1Jb0hoUUlBbjBFMHBEUUZDNEhoem5vQUFBQUlBSTJDMC80bHZGcVFBQUVUZ0JKSndZQ0F5NEFCZ1lBRkFBOE1CS1lFSDRlUmhUa0FqWWVGY2dBQ0FZQWVBQnNPcXlRNWdSd0RheXF1Z0VnYUlJQXRnb0FDZ0RtRUFCbUJBV0dtZTVPQkpKQTJtNGNEZW9BbUlUV0FYd3JNZ09nQUd3QkNoNkNCWFlGMVR6ZzF3S0FBRmRpdUFCUkFGd0FYUUJzQUc4QWRnQnJBSFlBYndDRUFIRXdmeFFCVkU1VEVRQURWRmhUQndCREFOSUxBcWNDemdMVEFwUUNyUUw2dkFBTUFMOEFQTGhOQktrRTZnbEdLVEFVNERyNE4yRVlFd0JDa0FCS2s4ckhBYllCbXdJb0FpVTRBamYvQXE0Q293Q0FBTklDaHpnYU5Cc0NzVGdlT0RjRlhyZ0NsUUtkQXFRQmlRR1lBcXNDc2pUc05Ic2ZOUEEwaXhzQVdUV2lPQU1GUERRU05DazJCRFpITm93MlRUWlVOaGsyOEprOVZ6STNRa0VvQW9JQ29RS3dBcWNBUUFBeEJWNEZYYlM5Qlc0N1lrSVhQMWNpVXFzMDVEUy9Gd0FCVXdKVzExZTZuSHVZWm1TaC9SQVlBOG9NS3ZaOEtBU29VQUpZV0FKNklMQXNBWlNvcWpwZ0Ewb2NCSWhtRGdEV0FBYXdSRFFvQUFjdUFqNWlBSEFCWmlSMkFJZ2lIZ0NhQVU2OEFDeHVIQUcweWdNOE1pWklBbGdCZEY0R2FnSnFBUFpPSEFNdUJnb0FUa1lBc0FCaUFIZ0FNTG9HRFBqMEhwS0VCQUFPSmdBdUFMZ2dUQUhXQWVBTUVEYmQyMFVlZ2UwQUR3QVdBRGtBUWdBOU9IZCsyTVVRWkJCaEJnTk5Ea3h4UHhVUUFyRVBxd3ZxRVJvTTFpclEwOTBBTks0SDhBTllCL0FEV0FOWUIvQUg4QU5ZQi9BRFdBTllBMWdEV0J3UDhCL1l4UkJrRDAwRWNnV1RCWkFFMndpSUprNFJoZ2N0Q05kVUVuUWpIRXdEU2dFQkl5cEpJVHVZTXhBbFIwd1JUUWdJQVRaSGJLeDlQUU5NTWJCVStwQ25BOUF5VkRseEJnTWVkaEtsQUM4UGVDRTF1azZEZWt4eHBRcFFUN05YOXdCRkJnQVNxd0FTNWdCSkRTZ0FVQ3dHUFFCSTR6VFlBQk5HQUUyYkFFM0tBRXhkR0FCS2FBYmdBRkJYQUZDT0FGQkpBQkkyU1dkT2JBTERPcTAvL1FvbUNaaHZ3SGRUQmtJUUhDZW1FUGdNTkFHMkFUd043a3ZaQlBJR1BBVEtIMzRaR2cvT2xaMElwaTNlRE80bTVDNmlnRnNqOWlxRUJlNUw5VHplQzA1UmFROWFDMllKNURwa2dVOERJZ0VPSW93SzNnMDZDRzRROUFyS2JBM21FVVlIT2dQV1Nac0FwZ2NDQ3hJZE5oVzJKaEZpclFzS09YZ0cvQnIzQzVBbXNCTXFldjBGMUJvaUJrNEJLaHNBQU5BdTZJV3hXakpjSFU5Z0JnUUxKaVBJRktsUUlRMG1RTGg0U1JvY0J4WWxxZ0tTUTNGS2lGRTNIcFFoOXp3K0RXY3VGRkY5Qi9ZOEJobFFDNEk4bjBhc1JROFIwejZPUFVraVNrd3RCRGFBTERBbmpBblFENFlNdW54ekFWb0pJZ215REhJVE1oRVlOOFlJT2djYUxwY2xKeFlJSWthV1lKc0UrS0FEOUJQU0F3d0ZRQWxDQnhRRHRod3VFeThWS2dVT2dTWFlBdlEyMWk2MEFwQldnUUVZQmN3UEpoL2dFRkZINFE3cUNKd0NaZ09FSmV3QUxoVWlBQmdpbkFoRVpBQmdqOWxUQmk3TUNNaHFiU04xQTJnVTZHSVJkQWVTRGxnSHFCdzBGY0FjNG5ESlhneUdDU2lrc0FsY0FYWUptZ0ZnQk9RSUNqVmNqS0VnUW1kVWkxa1luQ0JpUVVCZC9RSXlER1lWb0VTK2gza0NqQTlzRWh3Qk5nRjBCem9OQWdKNEVlNFJiQkNXQ095R0JUVzJNL2s2SmdSUUlZUWdFZ29vQTFCc3p3c29Kdm9NK1dvQnBCSmpBdzAwUG5mdlo2eGd0eVVYL2djYU1zWkJZU0h5QzVOUHpneWRHc0lZUTFRdkdlVUh3QVAwR3ZRbjYwRllCZ0FEcEFRVU9rNHo3d1MrQzJvSWpBbEFBRW9PcEJnSDJCaHJDbktNMFFFeWpBRzRtZ05Za29RQ2NKQUdPQWNNQUdnTWlBVjY1Z0FlQXFnSXBBQUdBTkFEV0FBNkFxNEhuZ0FhQUlaQ0FUNERLREFCSXVZQ2tBT1VDRExNQVpZd0FmUXFCQnpFREJZQStEaHVTd0xEc2dLQWEyYWpCZDVaQW84Q1NqWUJUaVlFQms5SVVnT3djdUlBM0FCTUJoVGdTQUVXckV2TUcrUkVBZUJ3TEFESUFQd0FCallIQmtJQnpnSDBiZ0M0QVdBTE1nbWp0TFlCVHVvcUFJUUFGbXdCMkFLS0FONEFOZ0NBOGdGVUFFNEZXdm9GMUFKUVNnRVNNaGtzV0dJQnZBTWdBVFFCRGdCNkJzeU9wc29JSUFSdUI5UUNFQndWNGdMdkx3ZTJBZ01pNEJQT1FzWUN2ZDlXQURJWFV1NWVad3FvQ3FkZWFBQzBZVFFITW5NOVVRQVBINmsreUFkeS9CWklpUUltU3dCUTVnQlFRelNhTlRGV1NUWUJwd0dxS1FLMzhBRnRxd0JJL3dLMzdnSzNyUUszc0FLNjI4MEMwZ0szM0FLM3p4QUFVRUlBVUQ5U2tsS0RBcmVrQXJ3NUFFUUF6QUhDTzE0N1dUdGVPMWs3WGp0Wk8xNDdXVHRlTzFrRG1DaFlJMDNBVlUwb0pxa0tiVjlHWWV3TXB3M1ZSTWs2U2hQY1lGSmdNeFBKTGJnVXdoWFBKVmNaUGhxOUp3WWw1VlVLRHdVdDFHWXhDQzAwZGhlOUFFQXBhWU5DWTRjZU1RcE1IT2hUa2xUNUxSd0Fza3VqTTdBTnJSc1dSRUVGU0hYdVlpc1dEd29qQW1TQ0FtSkRYRTZ3WERjaEFxSDRBbWlaQW1ZS0FwK0ZPQndNQW1ZOEFtWW5CRzhFZ0FOL0ZBTitremtIT1hnWU9ZTTZKQ1FDYkI0Q01qYzRDd0p0eUFKdHIvQ0xBRFJvUml3QmFBRGZBT0lBU3dZSG1ReU9BUDhNd3dBT3RnSjNNQUoybzBBQ2VVeEVBbmk3SGwzY1JhOUc5QUo4UUFKNnlRSjlDZ0o4OFVnQlNINWtKUUFzRmtsWlNsd1dHRXJOQXRFQ0F0RE5TeWdEaUZBRGgrZEV4cEV6QXZLaVhRUURBNjlMejB3dUpnVFFUVTFOc0FLTFFBS0syY0ljQ0I1RWFBYTRBbzQ0QW81ZFFaaUNBbzdhQW81ZGVWRzFVellMVXRWVWhnS1QvQUtURFFEcUFCMVZIMVd3VmRFSExCd3Bsb2N5NG5oblJUdzZBcGVnQXUreldDS3BBRm9tQXBhUUFwWjluUUNxV2ExYUNvSk9BRHdDbHJZQ2xrOWNSVnpTQXBuTUFwbGxYTXRkQ0JvQ25KdzV3enFlQXB3WEFwK2NBcDY1aXdBZUVESXJFQUtkOGdLZWt3QzJQbUUxWWZBQ250UUNvRzhCcWdLZW9DQUNuayttWThsa0tDWXNBaWV3QWlaL0FxRDhBcUJOMkFLbU1BS2x6d0tvQUFCK0FxZnphSDFvc2dBRVNtb2RhdElDck9RQ3JLOENyV2dDclFNQ1Z4NENWZDBDc2VMWUF4OVBiSmdDc3I0T0FyTHBHR3poYldSdFNXQURKYzRDdGwwOFFHNlJBeWxHQXJoZkFybElGZ0s1SzNod04zRGlBcjBhQXkyekF6SVNBcjZKY2dNRE0zSUN2aHR6STNOUUFzUE1Bc01GYzROMFREWkdkT0VEUEtnRFBKc0RQY0FDeFgwQ3hrZ0N4aEdLQXNocVVnTElSUUxKVUFMSkx3SmtuZ0xkMDNoNlluaXZlU1pMMFFNWXBHY0RBbUgxR2ZTVkpYc01YcE5ldkJJQ3oyd0N6MjB3VEZUVDlCU2dBTWV1QXM5MEFTcnJBMDRUZmt3R0F0d29BdHVMQXRKUUExSmRBMU5nQVFJRFZZMkFpa0FCekJmdVlVWjJBSUxQZzQ0QzJzZ0MyZCtFRVlSS3B6MERocVlBTUFOa0Q0WnlXdm9BVmdMZlpnTGV1WFI0QXVJdzdSVUI4ekVvQWZTY0FmTFRpQUxyOUFMcGNYb0FBdXI2QXVybEFQcElBYm9DN29vQzY1MldxNWNFQXU1QUE0WGhtSHB3NFhHaUF2TUVBR29EamhlWmxBTDNGQU9SYndPU2lBTDNtUUw1MmdMNFo1b2RtcXk4T0pzZkE1MkVBdjc3QVJ3QU9wOGRuN1FEQlk0RHBtc0RwdG9BMHNZREJtdWhpYUlHQ2dNTVNnRmdBU0FDdGdOR0FKd0VnTHBvQmdDOEJHekFFb3djZ2dDRURDNmtkam9BSkFNMEM1SUtSb0FCWkNnaUFJenczQVlCTEFDa2ZuZzlvZ2lna2dObVdBTjZBRVFDdnJrRVZxVEdBd0NzQlJiQUErNGlRa01DSFIwNzJqSTJQVGJVTnNrMlJqWTVOdkEyM1RaS05pVTNFRGNaTjVJK1JUeERSVEJDSmtLNVZCWUtGaFpmd1FDV3lnVTNBSkJSSHB1K095dGdOeGE2MUE0MEdNc1lqc243QlZ3RlhRVmNCVjBGYUFWZEJWd0ZYUVZjQlYwRlhBVmRCVndGWFVzYUNOeUtBSzRBQVFVSEJ3S1U3b0lDb1cxZTdqQUV6Z1B4QStZRHdnQ2tCRkRBd0FEQUJLekFBT3hGTGhpdEExVUZURGV5UGtNK2JqNTFRa1JDdXdUUVdXUThYKzBBV0JZenNBQ05BOHh3ekFHbTdFWi9RaXNvQ1RBYkxEczZmbkxmYjhIMkdjY3NiZ0Z3MTNNMUhBVmtCVy9KeHNtOUNOUk84RThGREQwRkJRdzlGa2NDbE9ZQ29NRmVncERmQURnY01pQTJBSlFBQ0I4QXNpZ0tBSXpJRUFKS2VCSUFwWTV5UFpRSUFLUWlIYjRmdmo1QktTUlBRclpDT3owb1h5eGdPeXdmS0FuR2JnTUNsUWFDQWtJTFhnZGVDRDlJSUdVZ1FqNWZQb1krZFQ1MkFvNUNNMGRBWDlCVFZHOVNEekZ3V1RRQWJ4QnpKRi9sT0VJUVFnbENDa0tKSUFsczVBY0NsUUlDb0tQTU9ERUZ4aGk2S1NBYml5ZklSck1qdENnZFdDQWtQbEZCSWl0Q3NFSlJ6QWJNQVYvT0V5UXpEZzBPQVFRRUozNmkzMjgvTWs5QXliREpzUWxxM3REUkFwVUtBa0Z6WGYxZC9qOXVBTFlQNmhDb0ZnQ1RHRDhrUHNGS1Fpb2JybTAremowS1NEOGtQblZDUkJ3TUR5SlJUSEZnTVRKYTVyd1hRaVEyWWZJL0pEN0JNRUpFSEdJTlR3NFRPRmxJUnp3Sk8waWNNUXB5UHlRK3d6SkNSQnY2RFZnbktCMDFOZ1VLajJid1l6TXFDb0Jrem5CZ0VGK3pZRElvY3dSSVgrTmdIajRISUNOZmgyQzRDd2R3RldwVEcvbGdVaFlHQXdSZnYyVHM4bUFhWHpWZ21sL1hZSUpmdVdDNEhJMWdVRjlwWUpaZ01SNmlsUUhNQU93TEFsRFJlZkMwaW40QVhBRUpBNlBqQ3djMElhbU9BTk1NQ0FFQ1JRREZOUlRaQmdkK0N3UWxSQStyNitnTEJERUZCbndVQlhnS0FUSUFyd0FHUkFBSEEzY0RkQU4yQTNrRGR3TjlBM29EZFFON0EzMERmQU40QTNvRGZRQVlFQUFsQXRZQVN3TUFVQUZzQUhjS0FIY0FtZ0IzQUhVQWRRQjJBSFZ1OFVnQXlnREFBSGNBZFFCMUFIWUFkUUFMQ2dCM0FBc0FtZ0IzQUFzQ093QjNBQXR1OFVnQXlnREFBSGdLQUpvQWR3QjNBSFVBZFFCMkFIVUFlQUIxQUhVQWRnQjFidkZJQU1vQXdBQUxDZ0NhQUhjQUN3QjNBQXNDT3dCM0FBdHU4VWdBeWdEQUFINEFDd0dnQUxjQnB3QzZBYWhkQXUwQ093THRidkZJQU1vQXdBQUxDZ0NhQXUwQUN3THRBQXNDT3dMdEFBdHU4VWdBeWdEQUEyNEFDd052QUF1MFZzUUFBenNBQUJDa2pVSXBBQXNBVUl1c09nZ1djZ01lQnhWc0d3TDY3VS8ySGx6bVdPRWVPZ0FMQVN2dUFBc2VBZnBLVXBucEdnWUpEQ0laTTZZeUFSVUU5VGhxQUQ1aVhRZ25BSllKUG5PencwWkFFWnhFS3NJQWtBNERoQUhuVEFJRHh4VURLMGx4Q1FsUFlnSXZJUVZZSlFCVnFFMUdha1VBS0dZaURUb1NCQTFFdEFZQVhRSllBSUY4R2dNSFJ5QUFJQWpPZTlZbmNla1JBQTBLQUNVcmp3RTdBeWM2QUFZV0FxYWlLRzRNY0VjcUFOb04zK01nOVR3Q0JoSWt1Q255K0p3VVEyOUwwMDhKbHVSeHUzSytvQWRxaUhPcUZIMEFHNVNVSWZVSjVTeENHZnhkaXBSenFUbVQ0VjVaYityMVVvNFZtK05xU1NFbDJtTnZSMkpoSWE4U3BZTzZudGR3RlhIQ1dUQ0s4ZjIrSHhvN3VpRzNkckR5Y0F1S0lNUDViaGkwNkFDbnFBckgxcno0UnFnLy9sbTZTZ0pHRVZiRjl4SkhJU2FSNkh4cXhTbmt3NnNoRG5lbEhLTkVmR1VYU0pSSjFHY3NtdEp3MjV4clpNREs5Z1hTbTEvWU1rZFg0LzZOS1lPZHRrL05RMy9ObkRBU2pUYzNmUGpJalcvNXNWZlZPYlgyb1REV2tyMWRGOWYza3hCc0QzLzNhUU84aFBmUnorZTB1RWlKcXQxMTYxZ3JpdTdnejhoRER3dHB5K0YrQld0ZWZuS0haUEF4Y1pvV2Juem5oSnB5MGU4NDJqMzZiY056R25JRXVzZ0dYMGE4WnhzbmpjU3NQRFowOXlaMzZmQ1FicmlIZVE3MkpSTUlMTmw2ZVBQZjJIV29Wd2dXQW0xZmIzVjJzQVkwK0I2ckFYcVN3UEJnc2VWbW9xc0JUU3JtOTErWGFzTVlZeVNJOGVlUnhIM1p2SGtNejNCUTVhSjNpVVZiWVBOTTMvN2VtUnRqbHNNZ3YvOVZ5VHN5dC9tSys4ZmdXZVQ2U29GYWNsWHFuNDJkQUlzdkFhckY1dk5OV0h6S1NrS1EvOEhmazVaV0s3cjl5bGlPc29veUJqUmhma0hQNFEyRGtXWFFpNkZHLzlyL0l3Ym1rVjVUN0pTb3BIS24xcEp3bTl0YjVPdDBveU4xWjJtUHBLWEhUeHgybmxLMDhmS2sxaEVZQThXZ1ZWV0w1bGd4MGlUditLZG9qSmVVMjNaRGptaXViWE94VlhKS0tpMldqdWgySExaT0ZMaVNDN1RsczVTTWg0ZitQajZ4VVNyTmpGcUxHZWhSTkI4bEMwUVNMTm1rSkp4L3dTRzNNbmpFOVQxQ2tQd0pJMHdIMmxmendFVElpVnFVeGcwZGZ1NXEzOUd0K2h3ZGN4a2hoTnZRNFR5ckJjZW9mM01ocy9JeEZjaTFIbUhyNEZNWmdYRUVjelBpR0N4MEhSd3pBcURxMmo5QVZtMWt3TjBtUlZMV0x5bGd0b1BOYXBGNWNZNFkxd0poL2UwQkJ3Wmo0NFlnWnJETnF2RC85SHY3R0ZZZFVRZURKdVEzRVdJNEhhS3FhdlUxWGpDL240MWtUNEw3OWtxR3Ewa0xoZFRadmdQM1RBM2ZTMG96VnorNXBpWnNvT3RJdkJVRm9NS2JOY21CTDZZeHhhVUF1c0hCMzhYclM4ZFFNblF3SmZVVWtwUm9HcjVBVWVXaWN2QlR6eUs5Zzc3K3lDa2Y1UEF5c0w3ci9KamNaZ3JidlJwTVc5aXlheFp2S082Y2VaTjJFd0l4S3dWRlB1dkZ1aUVQR0NvYWdiTW8rU3B5ZExyWHFCek5DREdGQ3JPL3JrY3dhMnhob2tRWjVDZFowQXNVM0pmU3FKNm41STE0WUErUC91QWdmaFBVODRUbHc3Y0VGZnA3QUVFOGV5NHNQMTJQVHQ0Q29kczFHUmdET0I1eHZ5aVI1bStCeDhPNW5CQ05jdFU4QmV2ZlY1QTA4eDZSSGQ1amN3UFRNRFNaSk9lZElaMWNHUTcwNGx4YkF6cVpPUDA1WnhhT2doelNkdkZCSFlxb21BVEFSeUFBREs0ZWxQOEx5M0lyVVpLZldoMjNYeTIwdUJVbUxTNFBmYWd1OStveVZhMmlQZ3FSUDNGMkNUVXN2SjcrUlluTjhmRlpiVS9IVnZ4dmNGRkRLa2lUcVY1VUJaM0d6NTRKQUtCeWk5aGtLTVpKdnVHZ2NTWVhGbXcwOFV5b1F5VmRmVEQxL2RNa0NIWGNUR0FLZVJPZ0Fyc3ZtUnJRVExVT1hpb09IR0syUWtqSHVvWUZnWGNpWm9USmQ2RnM1cTFRWDFHK3AvZTI2aFlzRWY3UVpEMW5uSXlsL1NGa050WVltbUJocEJyeGw5V2JZMFlwSFdSdXcyTGwvdGo5bUQ4UDRzblZ6Smw0RjlKKzFhclZlVGI5RTVyMklMSDA0cVN0anhRTnduM200WU5xeG1hTmJMQXFXMlRONkxpZHd1SlJxUytOWGJ0cXhvZURYcHhlR1dteHpTa1d4amt5Q2tYNE5RUm1lNnE1U0FjQytNNys5RVRmQS9Fd3J6UWFqS2FrQ3dZeWV1blA2WkZseFUyb01FbjFQejMxemVTdFc3NEc0MDZaSkZDbDF3QVhJb1VLa1dvdFlFcE91WEIxdVZOeEo2M2RwSkVxZnhCZXB0d0lITnJQejhCbGxab0ljQm9Yd2dmSis4VkFVblZQdlJ2ZXhudzBNYS9XaUdZdUpPNXk4UVR2RVlCaWdGbWhVeFk1UnF6RThPY3l3Ti84bTRVWXJsYW5pSk83NVhRNktTbzkrdFdIbHUraE1pMFVWZGlLUXA3TmVsbm9aVXpOYUl5QlBWZU93SzZHTnArRmZIdVBPb3loYVd1TnZUWUZrdnhzY01RV0RoK3plRkNGa2d3YlhmdGlWMjN5d0o0K3V3UnFtZzlrM0t6d0lRcHpwcHQ4REJCT01icnF3UU01R2IwNXNFd2RLek1pQXFPbG9hQS9scjBLQSsxcHIwLytIaVdvaUlqSEEvd2lyMm5JdVMzUGVVL2ppM082WndveGNSMVNaOUZodExDNVMwRkl6RmhiQldjR1ZQL0tweE9QU2lVb0FkV1VwcUtIKys2U2N6NTA3aUNjeFlJNnJkTUJJQ1BKWmVhN09jbWVGdzVtT2JKU2lxcGpnMlVvV05JcytjRmh5RFN0NmdlVjVxZ2kzRnVubXd3RG9HU01nZXJGT1pHWDFtMGRNQ1lvNVhPcnV4TzA2M2R3RU5LOURiblZNOXdZRlJFemg0dnlVMVdZWUovTFJScDZveGdqcVAvWDVhOC80QWY2cDZOV2tRZmVyekJtWG1lMHpZLzRud01KbS93ZDF0SXFTd0d6K0UzeFBFQU9vWmxKaXQzWGRkRDcvQlQxcGxsek94KzhibVF0QU5RL1M2ZlpleGM2cWkzVytRMnhjbVhUVWh1UzVtcEhRUnZjeFpVTjBTNStQTDlsWFdVQWFSWmhFSDhoVGRBY3VOTU1DdVZOS1RFR3RTVUtOaTNPNktoU2FUemNrOGNzWjJ2V1JaK2Q3bVc4YzRJS3dYSVlkMjVTL3pJZnRQa3dQenVmakV2T0hXVkQxbStGanBEVlVUVjBER0R1SGo2UW5hRXdMdS9kRWdkTFFPZzlFMVNybzlYSEo4eWtMQXd0UHUrcHhxS0R1RmV4cU9OMXNLUW03cndiRTFFNjhVQ2ZBL2Vyb3ZyVENHK0RCU05nMGw0Z29EUXZaTjZ1TmxieUxwY1pBd2oyVWNseWN2THBJWk1ndjR5UmxwYjNZdU1mdG96b3JiY0dWSHQvVmVEVjMrRmRmMVRQMGl1YUNzUGkyRzRYZUdoc3lGMXViVkR4a29KaG1uaVEwL2pTZy9lWU1MOUtMZm5DRmdJU1drcDkxZWF1UjNJUXZFRDBuQVBYSys2aFBDWXMrbjMraENaYmlza21WTUcyZGErMEVzWlBvblVlSVk4RWJmdXNRWGpzSy9lRkRhb3NiUGpFZlFTMFJLRzd5ajVHRzY5TTdNZU8xSG1pVVlvY2d5Z0pITDZNMXF6VUREd1VTbXI5OVY3U2RyMkYzSmpRQUpZK0YweUgzM0l2MytDOU0zOGVNTDdnVGdtTnUvcjJiVU1pUHZwWWJaNnYxL0lhRVNpckJITmE3bVBLbjRkRW1ZZzd2LytIUWdQTjFHNzlqQlExK3NveWRmREMycitoMkJsL0tJYzVLak1LN09INm5iMWpMc05mMEVIVmUyS0JpRTUxb3g2MzZ1eUc2TGhvMHQzSjM0TDVRWS9pbEUzbWlrYUY0SEtYRzFtRzFyQ2V2VDFWdjZHYXZsdHhvUWUvYk1ycFp2UmdnbkJ4U0VQRWVFemtFZE94VG5QWEhWalVZZHc4Sll2akIvbzdFZWdjM01hK05VeExMbnNLMGtKbGluUG1VSHpIR3RyazUrQ0FiVnpGT0JxcHl5M1FWVW56VERmQy8wWEQ5NC9va0grT0IraTdnOWxvbGhXSWpTbmZJYitFcTQzWlhPV213dmp5Vi9xcUQrdDBlKzdtVEVNNzRxUC9PenQ4bm1DN21ScHl1NjNPQjRLblV6RmMwNzRTcW95UFVBZ00rL1RKR0ZvNlQ0NEVIblFVNFg0ejZxYW5uVnFndy9VN3pDcHdjbVhWMUF1Yklydk9ta0tIYXpKQVI1NWVQanA1dExCc044dkFxczNOQUhkY0VIT1IyeFEwbHNOQUZ6U1V1eEZRQ0ZZdlhMWkpkT2o5cDRmTnE2cDBIQkdVaWsyWXphSTR4eVN5OTFLemhRMCtxMWhqeHZJbVJ3UFJmNzZ0Q2hsUmtoUkNpNzROWFo5cVVOZUl3UCtzNXArM201bndQZE5PSGdTTEQ3OW43TzltMW4xdURIaU1udHE0bmtZd1Y1T1oxRU5iWHhGZDRQZ3JsdmF2WnN5VU80TXFZbHFxbjFPOFcvSTFkRVpxNWRYaHJiRVRMYVpJYkMyS2ovQWEvUU0rZnFVT0hkZjB0WEFRMWh1WjNjbVdFQ1dTWHkvNDNqMzUrTXZxOXh3czdKS3NlcmlaMXBFV0tjOHFsek5yR1BVR2NWZ09hOWNQSllJSnNHbkpUQVVzRWNET0VWVUxPNXgwclhCaWpjMWxnWEV6UVFLaFJPZjh6SVY4Mnc4ZXN3Yzc4WVgxMUtZTFdRUmNnSE5KRWxCeGZYcjcybFMyUkJTbDA3cVRLb3JPMnVVRFpyM3NGaFlzdm5oTFpuMEE5NEtSekovN0RFR0lBaFc1WldGcEw4Z0V3dTFhTEE5TXVXWnpOd2w4T3plOVkrYlgrdjlneXdSVm5vQjVJLzhrWFRYVTMxNDF5UkxZcklPT3o2U09ueUhOeTRTaWVxemtCWGhhcmpmanFxMXE2dGtsYUViQThRZm0yRGFJUHM3T1RxL252SkJqS2ZPMkg5YkgyY0NNaDErNWdzcGZ5Y3U4Zi9jdXVSbXREanlxWjd1Q0lNeWpkVjNhK3AzZnFtWHNSeDRDOGx1amV6SUZIblFpVlRYTFh1STFYcndOMytzaVlZajJISFR2RVNVeDhEbE9UWHBhazlxRlJLK0wzbWdKMVdzRDdGNGN1MWFKb0ZvWVFudSt3R0RNT2pKTTNraUJRV0hDY3ZoSi9IUmR4b2RPUXA0NVlaYU9UQTIyTmI0WEtDVnhxa2J3TVlGaHpZUVlJQW5DVzhGVzE0dWY5OGpoVUcyenJLaFFRMHEwQ0VxMHQ1blh5dlV5dlI4RHZENjlMVStnM2krSEZXUU1ROFBxWnVIRCtzTktBVjArTTZFSkMwc3pxN3JFcjdCNWJROEJjTkh6dkRNYzllcUI1WkNRZFRmODBPYm40dXpqd3BZVTdTSVNkdFYwUUdhOUQzV3JoMkJEUXRwQkt4YU5GVisvQ3kyUC9Tdis4czdVZDBGZDc0WDQrby9UTnp0V2dFVFVhcHkrbWFqTlE2OExxM2VlMFpPNDhWRWJUWllpSDFDbzRPbGZXZWY4MlJXZXlVWG83d29NMDNQeWFwR2Zpa1RuUWlub05xNXo1dmVMcGVNVjNIQ0FNVGFabUExb0dMQW43WFMzWFlzeitYSzdWTVFzYzRYS3JtRFhPTFUvcFNYVk5VcThkSXFUYmEvLy8zeDZMaUxTNnhzMXh1Q0FZU2ZjUTMrclFnbXU3dXZmM1RIS3Q1T29vOTdUcWNiUnF4eDdFQVNpemFRQ0JRbGxHL3JZeFZhcE1MZ3RMYlpTNjR3MU1EQk1YWCtQUXBCS053cVVLT2YyRERSRFVYUWY5RWhPUzBRajRuVG1sQThkelNMei9HMWQrVWQ4TVR5LzZnaGhkaUxwZWVyR1kvVWxET2ZpdXFGc01VVTUvVVlsUCtCQW1nUkx1TnB2clVhTGxWa3JxRGlldk5WRUF3Ris0Q29NMU1aVG1qeGpKTXNLSnErdThaZDd0TkNVRnk2TGl5WVhSSlE0Vnl2RVFGRmFDR0tzeEl3UWtrN0V6WjZMVEpxMmhVdVBodkFXK2dRblNHNkorTXN6Qys3UUNSSGNucURkeU5SSjZUOXh5Uzg3QTZNRHV0YnpLR3ZHa3RwYlhxdHpXdFhiOUhzZksyY0JNb21qTjlhNHkrVGFKTG5YeEFlWC9IV3ptZjRjUjR2QUx0L1A0dzRxZ0tZMDRtbDRaZExPaW5GWVM2Y3VwM0cvMWllNCt0MWVPbnBCTmxxR3FzNzVpbHprVDQrRHNaUXhOdmFTS0ovLzZ6SWJiay9NN0xPaEZtUmMvMVIra0J0ejdKRkdkWm0vQ09vdElkdlFvWHBUcVAvMXVxRVVtQ2IvUVdvR0xNd081QU5jSHp4ZFk0OElHUDUrSit6S09UQkZaNFBpZCtHVE0rV3ExMk1WL0g4NnhFSnB0QmE2VCtwM2tncHdMZWRNYW5CSEMyR2dOckZwb04yeG5yTXo5V0ZXWC84L3lnU0JrYXZxMlV2N0ZkQ3NMRVlMdTlMTEl2QVUwYk5SRHR6WWwrL3ZYbWpwSXZ1SkZZam1JMGltNlFFWXFuSWVNc05qWEc0dkl1dElHSGlqZUFHLzlFREJvektWNWNsZGtIYkx4SGgyNXZUK1pFemJoWGxxdnB6S0p3Y0VnZk53TEFLRmVvMC9wdkVFMTBYREIrRVhSVFh0U3pKb3pRS0ZGQUpoTXhZa1ZhQ1crRTlBTDd0TWVVOGFjeGlkSHF6YjZsWDQ2OTFVc0RweS9MTFJtVCtlcGdXNTYrNUN3OHRCNGtNVXY2czlsaDNlUktieUdzK0gvNG1RTWFZelBUZjJPT2Rva0VuK3p6Z3ZvRDNGcU5LazhRcUdBWFZzcWNHZFhyVDYyZlNQa1IydlJPRmk2OEE2c2U4NlV4UlVrNGNhamZQeUNDNEc1d0RoRCt6TnE0am9kUTR1NG4vbTM3THIzNm40TElBQXNWcjAyZEZpOUFpd0E4MU1ZczJybTRlRGxETm1kTVJ2RUtSSGZCd1c1RGRNTnAwalBGWk1lQVJxRi93TDRYQmZkK0VNTEJmTXpwSDVHSDZOYVcrMXZydk1kZytWeER6YXRrM01YZ08zcm8zUC9EcGNDNitNbzRNeVNKaEtKaFNSMDFTR0dHcDVoUFdtcnJVZ3J2M2xEblArSGhjSTNudDNZcUJvVkFWVEJBUVQ1aXVoVGc4bnZQdGQ4WmVZajZ3MXg2UnFHVUJyU2t1NytOMStCYWFzWnZqVGs2NFJvSURsTDhicnBFY0p4M09tWTdqTG9ac3N3ZHRtaGZDL0cyMWxsWGhJVE93bXZSRERlVFRQYnlBU09hMTZjRjUvQTFmWkFpZEpwcWp1M3dZQXk5YXZQUjF5YTZlTnA5SzhYWXJydHV4bHFpK2JES3dsZnJZZFIwUlJpS1JWVExPSDg1K1pZN1hTbXpScGZaQkpqYVRhODFWRGNKSHBablpuU1FMQVNHWVc5bDUxWlYvaDdlVnpUaTNIdjZoVXNnYy81MUFxSlJUa3BiRlZMWFhzem9CTDhuQlgwdS8wakJMVDhuSCtmSmVQYnJ3VVJUNThPWStVaWVSamQxdnMwNHcwVkc1Vk4yVTZNb0daa1F6S04vcHR6MFEzNjZkeG9UR21qN2kxTlFHSGk5R2ducXVYRllkckNmWkJtZWI3czBUNnlyZGxaSDVjWnV3SEZ5SUova0F0R3NUZzB4SDV0YUFBcTQ0QkFrMUNQazlLVlZicVF6ckNVaUZkRi82Z3RsUFE4YkhIYzFHMVc5Mk1YR1o1SEVIZnR5TFlzOG1iRC85eFlSVVdrSG1sTTB6QzJpbEpsbk5nVjRiZkFMcFFnaHhPVW9aTDdWVHF0Q0hJYVFTWG0rWVVNbnBrWHliblYrQTZ4bG0yQ1Z5OGZuMFhsbTJYUmEwK3p6T2EyMUpXV21peGZpUE1TQ1o3cUE0clM5M1ZOM3BrcEYxczVUb25RamlzSGY3aVU5Wkd2VVBPQUtaY1IxcGJlVmYvVWw3T2hlcEdDYUlkOXdPdHFvN3BKN3lMY0JaMHBGa09GMjh5NHpFSS9rY1VObXV0QkhhUXBCZE5NOHZqQ1M2SFpSb2trZW84OFRCQWpHeUc3U1IrNnZVZ1RjeUs5SW1hbGowa3V4ejB3bUsrYnlRVTExQWlKRmsveWE1ZE5kdVJDbGNuVTY0eUd1L2llV1NlT29zMXQzZXArUlBJV1EycHlUWVZiWmx0VGJzYjdOaXdTaTNBVis4S0xXazdMeENuZlpVZXRFTThUaG5zU29HSDM4L255QXdGZ3VKcDhGanZsSHRjV1p1VTRoUHZhMHJIZnIwVWhPT0ovRjZ2UzYyRlc3S3prbVJsbDJIRWM3b1VxNGZ5aTVUNzBWbDdZVklmc1BIVUNkSGVzZjlMazdXTlZXTzc1SkRrWWJNSThUT1c4SktWdExZOWQ2VUpSSVRPOG9LbzB4UytvOTlZeTA0aW5pR0hBYUdqODhrRVdnd3YwT3JIZFkvbnI3NkRPR05TNTloWENHWHpUS1V2RGw5aUtwTFNXWU4xbHhJZXl5d2ROcFRraGF5NzR3MmpGVDZOUzhxa2pvNUN4QTF5ZlNZd3A2QUpJWk5LSWVFSzVQSkFXN09SZ1dnd3AwVmd6WXBxb3ZNcld4YnUrREdaNkxoaWUxUkFxcHptOFZVektKT0gzbUN6V3VUT0xzTjNWVC9kdjJlZVllOVVqYlI4WVRCc0x6N3E2MFZOMXNVNTFrK3VtMWY4SnhENXBQaGJoU0M4clJhQjQ1NHRtaDZZVVdySkkzK0dXWTBxZVdpb2ovdGJrWUlUT2tKYWV1R3Q0SnJKdkhBK2wwR3U3a1k3WE9hYTA1YWxNblJXVkNYcUZnTEl3U1k0dUY1OVVlNVNVNFFLdWMvSGFtRHhicjB4NmNzQ2V0WEdvUDdRbjFCay9KOURzeW5PL1VENmlaMUh5cnoraml0MGhEQ3dpL0U5T2pnS1RiQjNaUUtRLzBaT3ZldmZOSEcwTks0QWozQ3A3TnBSazA3UlQxaS9TMEVMOTNBZzhHUmdLSTlDZnBhakt5SzYrSmovUEkxS081Lzg1VkF3ejJBd3pQOEZUQmIwNzVJeENYdjZUOVJWdldUMnRVYXF4RFM5MnpyR1ViV3pVWWs5bVNzODJwRUNIK2ZrcXNEdDkzVlcrKzRZc1IvZEhDWWNRU1lUTy9LYUJNRGo5TFNEL0ovK3oyMEtxOFh2WlVBSUh0bTloUlBQM0l0YnVBdTJIbTVsa1BzOTJwZDdrQ3hnUnMweE9WQm5aMTNjY2RBMGF1bnJ3djlTZHFFbEpSQzNnK29DdStuWHlDZ21YVXM5eU1qVE1BSUhmeFpWK2FQS2NaZVVCV3QwNTdYbzg1S3MxSXI1Z3pFSENXcVpFaHJMWk11RjExemlHdEZRVWRzL0VFU2FqaGFnemNLc3hhbWNTWnhHdGg0VUlJK2FkUGhRa1VueDJXeU4rNFlXUityM2Y4TW5reUdGdVI0emp6eEpTOFdzUVlSNVBUeVJhRDlpeGE2TWg3NDFuQkhiemZqWEhza0dEcTE3OXhhUk5yQ0lCMXoxeFJmV2ZqcXcycEhjMXprOXhsUHBMOHNRV0FJdUVUWlpoYm5tTDU0cmNlWFZOUnZVaUtycnFJa2VvZ3NsMFhYYjE3eWxOYjBmNEdBOVdkNDR2ZmZFRzhGU1pHSEVMMmZiYVRHUmNTaUNlQThQbUEvZjZIejhIQ1M3NmZYVUh3Z3drelN3bEk3MWVrWjdGYXBtbGsvS0MrSHM4aFVjdzNOMkxONUxoa1ZZeWl6WUZsL3VQZVZQNWxzb0pIaGhmV3Z2U1dydUNVVzFaY0pPZXVUYnJEZ3l3Si9xRzA3Z1pKcGxuVHZMY1lkTmFIMEtNWU9ZTUdYK3JCNE5HUEZtUXNOYUl3bFdyZkNlenhyZTh6WEJyc01UK2VkVkxiTHFOMUJxQjc2Skg0QnZaVHFVSU1mR3dQR0VuK0VubVRWODZmUEJhWWJGTDNERkVoakI0NUNld2tYRUF0SnhrNC9NczJwUFhuYVJxZGt5MEhPWWRjVWNFMnpjWHE0dmFJdlcyL3YwbkhGSkgyWFhlMjJ1ZURtcS8xOFhHdEVMU3E4NWo5WDhxMHRjTlNTS0pJWDhGVHVKRi9QZjhqNVBocUcydStvc3ZzTHhZcnZ2ZmVWSkwrNHRrY1hjcjlKVjd2MEVSbWovWDZmTTNOQzRqNmRTMSs5VW1yMm9QYXZxaUF5ZFRaUExNTlJHWTIzTE85ekFWRGx5N2pEKzcwRzVUUFBMZGhSSWw0V3hjWWpMbk0rU05jSjI2Rk9ya3JJU1V0UE9iSXo1WmIzQUc2MTJrcm5weTE1Uk1XKzFjUWpsbldGSTY1Mzhxa3k5YXhkMm9KbUhJSFAwOEt5UDB1YkdPK1RRTk9ZdXYydWgxN3lDSXZSOFZjU3R3N28xZzBOTTYwc2srOFRxN1lmSUJKcnRwNTNHa3Z6WEg3T0EwcDgvbi91MXNhdGYvVkpodFIxbDhXYTZHbWF1ZzdoYVNwYUNhWVFheDZ0YTBta3V0bGIrZUFPU0cxYW9iTTgxRDlBNGlTMVJSbHpCQm9WWDZ0VTFTNldFMk45T1JZNkRmZUxSQzRsOVJ2cjVoOTVYRFdCMm1SMWQ0V0Z1ZHBzZ1ZZd2lUd1QzMWxqc2tEOFp5RE9sbTVEa0doOU4vVUIvMEFJNVh2YjhaQm1haTJoUTRCV01xRndZbnp4d0IyNllIU092OVdnWTNKWG52b04rMlI0cnFHVmgvTExETXRwRlArU3BNR0pOV3ZiSWw1U09vZGJDY3pXMlJLbGVrc1BvVWVHRXpyanRLSFZkdFpBK2tmcU8rclZ4L2ljbENxd29vcGVwdkpwU1REalQrYjlHV3lsR1JGOEVEYkdsdzZlVXptSk05NU92b3ora3dMWDNjMmZUakZlWUVzRTd2VVptM21xZEdKdUtoMnc5L1FHU2FxUkhzOTlhU2NHT2REcWtGY0FDb3FkYkJvUXFxamFtaEg2UTluZzM5SkNnM2xyR0p3ZDUwUWs5b3ZucUJUcjhNTUU3UHMyd2lWZnlnVW1Qb1VCSkpmSldYNU5kYTBudW5jYkZrQT09JykpO1xufVxuXG4iLCJpbXBvcnQgeyBCeXRlcywgY29uY2F0IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qva2VjY2FrMjU2XCI7XG5pbXBvcnQgeyB0b1V0ZjhCeXRlcyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9zdHJpbmdzXCI7XG5cbmV4cG9ydCBjb25zdCBtZXNzYWdlUHJlZml4ID0gXCJcXHgxOUV0aGVyZXVtIFNpZ25lZCBNZXNzYWdlOlxcblwiO1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzaE1lc3NhZ2UobWVzc2FnZTogQnl0ZXMgfCBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICh0eXBlb2YobWVzc2FnZSkgPT09IFwic3RyaW5nXCIpIHsgbWVzc2FnZSA9IHRvVXRmOEJ5dGVzKG1lc3NhZ2UpOyB9XG4gICAgcmV0dXJuIGtlY2NhazI1Nihjb25jYXQoW1xuICAgICAgICB0b1V0ZjhCeXRlcyhtZXNzYWdlUHJlZml4KSxcbiAgICAgICAgdG9VdGY4Qnl0ZXMoU3RyaW5nKG1lc3NhZ2UubGVuZ3RoKSksXG4gICAgICAgIG1lc3NhZ2VcbiAgICBdKSk7XG59XG5cbiIsImltcG9ydCB7IFR5cGVkRGF0YURvbWFpbiwgVHlwZWREYXRhRmllbGQgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYWJzdHJhY3Qtc2lnbmVyXCI7XG5pbXBvcnQgeyBnZXRBZGRyZXNzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2FkZHJlc3NcIjtcbmltcG9ydCB7IEJpZ051bWJlciwgQmlnTnVtYmVyaXNoIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2JpZ251bWJlclwiO1xuaW1wb3J0IHsgYXJyYXlpZnksIEJ5dGVzTGlrZSwgaGV4Q29uY2F0LCBoZXhsaWZ5LCBoZXhaZXJvUGFkLCBpc0hleFN0cmluZyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsga2VjY2FrMjU2IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2tlY2NhazI1NlwiO1xuaW1wb3J0IHsgZGVlcENvcHksIGRlZmluZVJlYWRPbmx5LCBzaGFsbG93Q29weSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzXCI7XG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcblxuaW1wb3J0IHsgaWQgfSBmcm9tIFwiLi9pZFwiO1xuXG5jb25zdCBwYWRkaW5nID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xucGFkZGluZy5maWxsKDApO1xuXG5jb25zdCBOZWdhdGl2ZU9uZTogQmlnTnVtYmVyID0gQmlnTnVtYmVyLmZyb20oLTEpO1xuY29uc3QgWmVybzogQmlnTnVtYmVyID0gQmlnTnVtYmVyLmZyb20oMCk7XG5jb25zdCBPbmU6IEJpZ051bWJlciA9IEJpZ051bWJlci5mcm9tKDEpO1xuY29uc3QgTWF4VWludDI1NjogQmlnTnVtYmVyID0gQmlnTnVtYmVyLmZyb20oXCIweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZcIik7XG5cbmZ1bmN0aW9uIGhleFBhZFJpZ2h0KHZhbHVlOiBCeXRlc0xpa2UpIHtcbiAgICBjb25zdCBieXRlcyA9IGFycmF5aWZ5KHZhbHVlKTtcbiAgICBjb25zdCBwYWRPZmZzZXQgPSBieXRlcy5sZW5ndGggJSAzMlxuICAgIGlmIChwYWRPZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIGhleENvbmNhdChbIGJ5dGVzLCBwYWRkaW5nLnNsaWNlKHBhZE9mZnNldCkgXSk7XG4gICAgfVxuICAgIHJldHVybiBoZXhsaWZ5KGJ5dGVzKTtcbn1cblxuY29uc3QgaGV4VHJ1ZSA9IGhleFplcm9QYWQoT25lLnRvSGV4U3RyaW5nKCksIDMyKTtcbmNvbnN0IGhleEZhbHNlID0gaGV4WmVyb1BhZChaZXJvLnRvSGV4U3RyaW5nKCksIDMyKTtcblxuY29uc3QgZG9tYWluRmllbGRUeXBlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICBuYW1lOiBcInN0cmluZ1wiLFxuICAgIHZlcnNpb246IFwic3RyaW5nXCIsXG4gICAgY2hhaW5JZDogXCJ1aW50MjU2XCIsXG4gICAgdmVyaWZ5aW5nQ29udHJhY3Q6IFwiYWRkcmVzc1wiLFxuICAgIHNhbHQ6IFwiYnl0ZXMzMlwiXG59O1xuXG5jb25zdCBkb21haW5GaWVsZE5hbWVzOiBBcnJheTxzdHJpbmc+ID0gW1xuICAgIFwibmFtZVwiLCBcInZlcnNpb25cIiwgXCJjaGFpbklkXCIsIFwidmVyaWZ5aW5nQ29udHJhY3RcIiwgXCJzYWx0XCJcbl07XG5cbmZ1bmN0aW9uIGNoZWNrU3RyaW5nKGtleTogc3RyaW5nKTogKHZhbHVlOiBhbnkpID0+IHN0cmluZyB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZTogYW55KXtcbiAgICAgICAgaWYgKHR5cGVvZih2YWx1ZSkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGludmFsaWQgZG9tYWluIHZhbHVlIGZvciAkeyBKU09OLnN0cmluZ2lmeShrZXkpIH1gLCBgZG9tYWluLiR7IGtleSB9YCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59XG5cbmNvbnN0IGRvbWFpbkNoZWNrczogUmVjb3JkPHN0cmluZywgKHZhbHVlOiBhbnkpID0+IGFueT4gPSB7XG4gICAgbmFtZTogY2hlY2tTdHJpbmcoXCJuYW1lXCIpLFxuICAgIHZlcnNpb246IGNoZWNrU3RyaW5nKFwidmVyc2lvblwiKSxcbiAgICBjaGFpbklkOiBmdW5jdGlvbih2YWx1ZTogYW55KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gQmlnTnVtYmVyLmZyb20odmFsdWUpLnRvU3RyaW5nKClcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihgaW52YWxpZCBkb21haW4gdmFsdWUgZm9yIFwiY2hhaW5JZFwiYCwgXCJkb21haW4uY2hhaW5JZFwiLCB2YWx1ZSk7XG4gICAgfSxcbiAgICB2ZXJpZnlpbmdDb250cmFjdDogZnVuY3Rpb24odmFsdWU6IGFueSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEFkZHJlc3ModmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGludmFsaWQgZG9tYWluIHZhbHVlIFwidmVyaWZ5aW5nQ29udHJhY3RcImAsIFwiZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0XCIsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNhbHQ6IGZ1bmN0aW9uKHZhbHVlOiBhbnkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gYXJyYXlpZnkodmFsdWUpO1xuICAgICAgICAgICAgaWYgKGJ5dGVzLmxlbmd0aCAhPT0gMzIpIHsgdGhyb3cgbmV3IEVycm9yKFwiYmFkIGxlbmd0aFwiKTsgfVxuICAgICAgICAgICAgcmV0dXJuIGhleGxpZnkoYnl0ZXMpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikgeyB9XG4gICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKGBpbnZhbGlkIGRvbWFpbiB2YWx1ZSBcInNhbHRcImAsIFwiZG9tYWluLnNhbHRcIiwgdmFsdWUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0QmFzZUVuY29kZXIodHlwZTogc3RyaW5nKTogKHZhbHVlOiBhbnkpID0+IHN0cmluZyB7XG4gICAgLy8gaW50WFggYW5kIHVpbnRYWFxuICAgIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0eXBlLm1hdGNoKC9eKHU/KWludChcXGQqKSQvKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBjb25zdCBzaWduZWQgPSAobWF0Y2hbMV0gPT09IFwiXCIpO1xuXG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IHBhcnNlSW50KG1hdGNoWzJdIHx8IFwiMjU2XCIpO1xuICAgICAgICAgICAgaWYgKHdpZHRoICUgOCAhPT0gMCB8fCB3aWR0aCA+IDI1NiB8fCAobWF0Y2hbMl0gJiYgbWF0Y2hbMl0gIT09IFN0cmluZyh3aWR0aCkpKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgbnVtZXJpYyB3aWR0aFwiLCBcInR5cGVcIiwgdHlwZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGJvdW5kc1VwcGVyID0gTWF4VWludDI1Ni5tYXNrKHNpZ25lZCA/ICh3aWR0aCAtIDEpOiB3aWR0aCk7XG4gICAgICAgICAgICBjb25zdCBib3VuZHNMb3dlciA9IHNpZ25lZCA/IGJvdW5kc1VwcGVyLmFkZChPbmUpLm11bChOZWdhdGl2ZU9uZSk6IFplcm87XG5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZTogQmlnTnVtYmVyaXNoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdiA9IEJpZ051bWJlci5mcm9tKHZhbHVlKTtcblxuICAgICAgICAgICAgICAgIGlmICh2Lmx0KGJvdW5kc0xvd2VyKSB8fCB2Lmd0KGJvdW5kc1VwcGVyKSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKGB2YWx1ZSBvdXQtb2YtYm91bmRzIGZvciAkeyB0eXBlIH1gLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGV4WmVyb1BhZCh2LnRvVHdvcygyNTYpLnRvSGV4U3RyaW5nKCksIDMyKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBieXRlc1hYXG4gICAge1xuICAgICAgICBjb25zdCBtYXRjaCA9IHR5cGUubWF0Y2goL15ieXRlcyhcXGQrKSQvKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IHBhcnNlSW50KG1hdGNoWzFdKTtcbiAgICAgICAgICAgIGlmICh3aWR0aCA9PT0gMCB8fCB3aWR0aCA+IDMyIHx8IG1hdGNoWzFdICE9PSBTdHJpbmcod2lkdGgpKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYnl0ZXMgd2lkdGhcIiwgXCJ0eXBlXCIsIHR5cGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWU6IEJ5dGVzTGlrZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gYXJyYXlpZnkodmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChieXRlcy5sZW5ndGggIT09IHdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGludmFsaWQgbGVuZ3RoIGZvciAkeyB0eXBlIH1gLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhleFBhZFJpZ2h0KHZhbHVlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcImFkZHJlc3NcIjogcmV0dXJuIGZ1bmN0aW9uKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBoZXhaZXJvUGFkKGdldEFkZHJlc3ModmFsdWUpLCAzMik7XG4gICAgICAgIH07XG4gICAgICAgIGNhc2UgXCJib29sXCI6IHJldHVybiBmdW5jdGlvbih2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICAgICAgcmV0dXJuICgoIXZhbHVlKSA/IGhleEZhbHNlOiBoZXhUcnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2FzZSBcImJ5dGVzXCI6IHJldHVybiBmdW5jdGlvbih2YWx1ZTogQnl0ZXNMaWtlKSB7XG4gICAgICAgICAgICByZXR1cm4ga2VjY2FrMjU2KHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOiByZXR1cm4gZnVuY3Rpb24odmFsdWU6IHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGlkKHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZW5jb2RlVHlwZShuYW1lOiBzdHJpbmcsIGZpZWxkczogQXJyYXk8VHlwZWREYXRhRmllbGQ+KTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7IG5hbWUgfSgkeyBmaWVsZHMubWFwKCh7IG5hbWUsIHR5cGUgfSkgPT4gKHR5cGUgKyBcIiBcIiArIG5hbWUpKS5qb2luKFwiLFwiKSB9KWA7XG59XG5cbmV4cG9ydCBjbGFzcyBUeXBlZERhdGFFbmNvZGVyIHtcbiAgICByZWFkb25seSBwcmltYXJ5VHlwZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHR5cGVzOiBSZWNvcmQ8c3RyaW5nLCBBcnJheTxUeXBlZERhdGFGaWVsZD4+O1xuXG4gICAgcmVhZG9ubHkgX2VuY29kZXJDYWNoZTogUmVjb3JkPHN0cmluZywgKHZhbHVlOiBhbnkpID0+IHN0cmluZz47XG4gICAgcmVhZG9ubHkgX3R5cGVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuXG4gICAgY29uc3RydWN0b3IodHlwZXM6IFJlY29yZDxzdHJpbmcsIEFycmF5PFR5cGVkRGF0YUZpZWxkPj4pIHtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJ0eXBlc1wiLCBPYmplY3QuZnJlZXplKGRlZXBDb3B5KHR5cGVzKSkpO1xuXG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiX2VuY29kZXJDYWNoZVwiLCB7IH0pO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl90eXBlc1wiLCB7IH0pO1xuXG4gICAgICAgIC8vIExpbmsgc3RydWN0IHR5cGVzIHRvIHRoZWlyIGRpcmVjdCBjaGlsZCBzdHJ1Y3RzXG4gICAgICAgIGNvbnN0IGxpbmtzOiBSZWNvcmQ8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4gPSB7IH07XG5cbiAgICAgICAgLy8gTGluayBzdHJ1Y3RzIHRvIHN0cnVjdHMgd2hpY2ggY29udGFpbiB0aGVtIGFzIGEgY2hpbGRcbiAgICAgICAgY29uc3QgcGFyZW50czogUmVjb3JkPHN0cmluZywgQXJyYXk8c3RyaW5nPj4gPSB7IH07XG5cbiAgICAgICAgLy8gTGluayBhbGwgc3VidHlwZXMgd2l0aGluIGEgZ2l2ZW4gc3RydWN0XG4gICAgICAgIGNvbnN0IHN1YnR5cGVzOiBSZWNvcmQ8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4gPSB7IH07XG5cbiAgICAgICAgT2JqZWN0LmtleXModHlwZXMpLmZvckVhY2goKHR5cGUpID0+IHtcbiAgICAgICAgICAgIGxpbmtzW3R5cGVdID0geyB9O1xuICAgICAgICAgICAgcGFyZW50c1t0eXBlXSA9IFsgXTtcbiAgICAgICAgICAgIHN1YnR5cGVzW3R5cGVdID0geyB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiB0eXBlcykge1xuXG4gICAgICAgICAgICBjb25zdCB1bmlxdWVOYW1lczogUmVjb3JkPHN0cmluZywgYm9vbGVhbj4gPSB7IH07XG5cbiAgICAgICAgICAgIHR5cGVzW25hbWVdLmZvckVhY2goKGZpZWxkKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayBlYWNoIGZpZWxkIGhhcyBhIHVuaXF1ZSBuYW1lXG4gICAgICAgICAgICAgICAgaWYgKHVuaXF1ZU5hbWVzW2ZpZWxkLm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGR1cGxpY2F0ZSB2YXJpYWJsZSBuYW1lICR7IEpTT04uc3RyaW5naWZ5KGZpZWxkLm5hbWUpIH0gaW4gJHsgSlNPTi5zdHJpbmdpZnkobmFtZSkgfWAsIFwidHlwZXNcIiwgdHlwZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB1bmlxdWVOYW1lc1tmaWVsZC5uYW1lXSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGJhc2UgdHlwZSAoZHJvcCBhbnkgYXJyYXkgc3BlY2lmaWVycylcbiAgICAgICAgICAgICAgICBjb25zdCBiYXNlVHlwZSA9IGZpZWxkLnR5cGUubWF0Y2goL14oW15cXHg1Yl0qKShcXHg1YnwkKS8pWzFdO1xuICAgICAgICAgICAgICAgIGlmIChiYXNlVHlwZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKGBjaXJjdWxhciB0eXBlIHJlZmVyZW5jZSB0byAkeyBKU09OLnN0cmluZ2lmeShiYXNlVHlwZSkgfWAsIFwidHlwZXNcIiwgdHlwZXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElzIHRoaXMgYSBiYXNlIGVuY29kaW5nIHR5cGU/XG4gICAgICAgICAgICAgICAgY29uc3QgZW5jb2RlciA9IGdldEJhc2VFbmNvZGVyKGJhc2VUeXBlKTtcbiAgICAgICAgICAgICAgICBpZiAoZW5jb2RlcikgeyByZXR1cm4gO31cblxuICAgICAgICAgICAgICAgIGlmICghcGFyZW50c1tiYXNlVHlwZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihgdW5rbm93biB0eXBlICR7IEpTT04uc3RyaW5naWZ5KGJhc2VUeXBlKSB9YCwgXCJ0eXBlc1wiLCB0eXBlcyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQWRkIGxpbmthZ2VcbiAgICAgICAgICAgICAgICBwYXJlbnRzW2Jhc2VUeXBlXS5wdXNoKG5hbWUpO1xuICAgICAgICAgICAgICAgIGxpbmtzW25hbWVdW2Jhc2VUeXBlXSA9IHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZHVjZSB0aGUgcHJpbWFyeSB0eXBlXG4gICAgICAgIGNvbnN0IHByaW1hcnlUeXBlcyA9IE9iamVjdC5rZXlzKHBhcmVudHMpLmZpbHRlcigobikgPT4gKHBhcmVudHNbbl0ubGVuZ3RoID09PSAwKSk7XG5cbiAgICAgICAgaWYgKHByaW1hcnlUeXBlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJtaXNzaW5nIHByaW1hcnkgdHlwZVwiLCBcInR5cGVzXCIsIHR5cGVzKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcmltYXJ5VHlwZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihgYW1iaWd1b3VzIHByaW1hcnkgdHlwZXMgb3IgdW51c2VkIHR5cGVzOiAkeyBwcmltYXJ5VHlwZXMubWFwKCh0KSA9PiAoSlNPTi5zdHJpbmdpZnkodCkpKS5qb2luKFwiLCBcIikgfWAsIFwidHlwZXNcIiwgdHlwZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJwcmltYXJ5VHlwZVwiLCBwcmltYXJ5VHlwZXNbMF0pO1xuXG4gICAgICAgIC8vIENoZWNrIGZvciBjaXJjdWxhciB0eXBlIHJlZmVyZW5jZXNcbiAgICAgICAgZnVuY3Rpb24gY2hlY2tDaXJjdWxhcih0eXBlOiBzdHJpbmcsIGZvdW5kOiBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPikge1xuICAgICAgICAgICAgaWYgKGZvdW5kW3R5cGVdKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihgY2lyY3VsYXIgdHlwZSByZWZlcmVuY2UgdG8gJHsgSlNPTi5zdHJpbmdpZnkodHlwZSkgfWAsIFwidHlwZXNcIiwgdHlwZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3VuZFt0eXBlXSA9IHRydWU7XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGxpbmtzW3R5cGVdKS5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghcGFyZW50c1tjaGlsZF0pIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBjaGVjayBjaGlsZHJlblxuICAgICAgICAgICAgICAgIGNoZWNrQ2lyY3VsYXIoY2hpbGQsIGZvdW5kKTtcblxuICAgICAgICAgICAgICAgIC8vIE1hcmsgYWxsIGFuY2VzdG9ycyBhcyBoYXZpbmcgdGhpcyBkZWNlbmRhbnRcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhmb3VuZCkuZm9yRWFjaCgoc3VidHlwZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzdWJ0eXBlc1tzdWJ0eXBlXVtjaGlsZF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGRlbGV0ZSBmb3VuZFt0eXBlXTtcbiAgICAgICAgfVxuICAgICAgICBjaGVja0NpcmN1bGFyKHRoaXMucHJpbWFyeVR5cGUsIHsgfSk7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSBlYWNoIGZ1bGx5IGRlc2NyaWJlIHR5cGVcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHN1YnR5cGVzKSB7XG4gICAgICAgICAgICBjb25zdCBzdCA9IE9iamVjdC5rZXlzKHN1YnR5cGVzW25hbWVdKTtcbiAgICAgICAgICAgIHN0LnNvcnQoKTtcbiAgICAgICAgICAgIHRoaXMuX3R5cGVzW25hbWVdID0gZW5jb2RlVHlwZShuYW1lLCB0eXBlc1tuYW1lXSkgKyBzdC5tYXAoKHQpID0+IGVuY29kZVR5cGUodCwgdHlwZXNbdF0pKS5qb2luKFwiXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0RW5jb2Rlcih0eXBlOiBzdHJpbmcpOiAodmFsdWU6IGFueSkgPT4gc3RyaW5nIHtcbiAgICAgICAgbGV0IGVuY29kZXIgPSB0aGlzLl9lbmNvZGVyQ2FjaGVbdHlwZV07XG4gICAgICAgIGlmICghZW5jb2Rlcikge1xuICAgICAgICAgICAgZW5jb2RlciA9IHRoaXMuX2VuY29kZXJDYWNoZVt0eXBlXSA9IHRoaXMuX2dldEVuY29kZXIodHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVuY29kZXI7XG4gICAgfVxuXG4gICAgX2dldEVuY29kZXIodHlwZTogc3RyaW5nKTogKHZhbHVlOiBhbnkpID0+IHN0cmluZyB7XG5cbiAgICAgICAgLy8gQmFzaWMgZW5jb2RlciB0eXBlIChhZGRyZXNzLCBib29sLCB1aW50MjU2LCBldGMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZXIgPSBnZXRCYXNlRW5jb2Rlcih0eXBlKTtcbiAgICAgICAgICAgIGlmIChlbmNvZGVyKSB7IHJldHVybiBlbmNvZGVyOyB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBcnJheVxuICAgICAgICBjb25zdCBtYXRjaCA9IHR5cGUubWF0Y2goL14oLiopKFxceDViKFxcZCopXFx4NWQpJC8pO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1YnR5cGUgPSBtYXRjaFsxXTtcbiAgICAgICAgICAgIGNvbnN0IHN1YkVuY29kZXIgPSB0aGlzLmdldEVuY29kZXIoc3VidHlwZSk7XG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBwYXJzZUludChtYXRjaFszXSk7XG4gICAgICAgICAgICByZXR1cm4gKHZhbHVlOiBBcnJheTxhbnk+KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA+PSAwICYmIHZhbHVlLmxlbmd0aCAhPT0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJhcnJheSBsZW5ndGggbWlzbWF0Y2g7IGV4cGVjdGVkIGxlbmd0aCAkeyBhcnJheUxlbmd0aCB9XCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSB2YWx1ZS5tYXAoc3ViRW5jb2Rlcik7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3R5cGVzW3N1YnR5cGVdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5tYXAoa2VjY2FrMjU2KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ga2VjY2FrMjU2KGhleENvbmNhdChyZXN1bHQpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdHJ1Y3RcbiAgICAgICAgY29uc3QgZmllbGRzID0gdGhpcy50eXBlc1t0eXBlXTtcbiAgICAgICAgaWYgKGZpZWxkcykge1xuICAgICAgICAgICAgY29uc3QgZW5jb2RlZFR5cGUgPSBpZCh0aGlzLl90eXBlc1t0eXBlXSk7XG4gICAgICAgICAgICByZXR1cm4gKHZhbHVlOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gZmllbGRzLm1hcCgoeyBuYW1lLCB0eXBlIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5nZXRFbmNvZGVyKHR5cGUpKHZhbHVlW25hbWVdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3R5cGVzW3R5cGVdKSB7IHJldHVybiBrZWNjYWsyNTYocmVzdWx0KTsgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhbHVlcy51bnNoaWZ0KGVuY29kZWRUeXBlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaGV4Q29uY2F0KHZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihgdW5rbm93biB0eXBlOiAkeyB0eXBlIH1gLCBcInR5cGVcIiwgdHlwZSk7XG4gICAgfVxuXG4gICAgZW5jb2RlVHlwZShuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl90eXBlc1tuYW1lXTtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYHVua25vd24gdHlwZTogJHsgSlNPTi5zdHJpbmdpZnkobmFtZSkgfWAsIFwibmFtZVwiLCBuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGVuY29kZURhdGEodHlwZTogc3RyaW5nLCB2YWx1ZTogYW55KTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RW5jb2Rlcih0eXBlKSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaGFzaFN0cnVjdChuYW1lOiBzdHJpbmcsIHZhbHVlOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGtlY2NhazI1Nih0aGlzLmVuY29kZURhdGEobmFtZSwgdmFsdWUpKTtcbiAgICB9XG5cbiAgICBlbmNvZGUodmFsdWU6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGVEYXRhKHRoaXMucHJpbWFyeVR5cGUsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBoYXNoKHZhbHVlOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzaFN0cnVjdCh0aGlzLnByaW1hcnlUeXBlLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgX3Zpc2l0KHR5cGU6IHN0cmluZywgdmFsdWU6IGFueSwgY2FsbGJhY2s6ICh0eXBlOiBzdHJpbmcsIGRhdGE6IGFueSkgPT4gYW55KTogYW55IHtcbiAgICAgICAgLy8gQmFzaWMgZW5jb2RlciB0eXBlIChhZGRyZXNzLCBib29sLCB1aW50MjU2LCBldGMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZXIgPSBnZXRCYXNlRW5jb2Rlcih0eXBlKTtcbiAgICAgICAgICAgIGlmIChlbmNvZGVyKSB7IHJldHVybiBjYWxsYmFjayh0eXBlLCB2YWx1ZSk7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFycmF5XG4gICAgICAgIGNvbnN0IG1hdGNoID0gdHlwZS5tYXRjaCgvXiguKikoXFx4NWIoXFxkKilcXHg1ZCkkLyk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgY29uc3Qgc3VidHlwZSA9IG1hdGNoWzFdO1xuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gcGFyc2VJbnQobWF0Y2hbM10pO1xuICAgICAgICAgICAgaWYgKGxlbmd0aCA+PSAwICYmIHZhbHVlLmxlbmd0aCAhPT0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImFycmF5IGxlbmd0aCBtaXNtYXRjaDsgZXhwZWN0ZWQgbGVuZ3RoICR7IGFycmF5TGVuZ3RoIH1cIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUubWFwKCh2OiBhbnkpID0+IHRoaXMuX3Zpc2l0KHN1YnR5cGUsIHYsIGNhbGxiYWNrKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdHJ1Y3RcbiAgICAgICAgY29uc3QgZmllbGRzID0gdGhpcy50eXBlc1t0eXBlXTtcbiAgICAgICAgaWYgKGZpZWxkcykge1xuICAgICAgICAgICAgcmV0dXJuIGZpZWxkcy5yZWR1Y2UoKGFjY3VtLCB7IG5hbWUsIHR5cGUgfSkgPT4ge1xuICAgICAgICAgICAgICAgIGFjY3VtW25hbWVdID0gdGhpcy5fdmlzaXQodHlwZSwgdmFsdWVbbmFtZV0sIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjdW07XG4gICAgICAgICAgICB9LCA8UmVjb3JkPHN0cmluZywgYW55Pj57fSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihgdW5rbm93biB0eXBlOiAkeyB0eXBlIH1gLCBcInR5cGVcIiwgdHlwZSk7XG4gICAgfVxuXG4gICAgdmlzaXQodmFsdWU6IFJlY29yZDxzdHJpbmcsIGFueT4sIGNhbGxiYWNrOiAodHlwZTogc3RyaW5nLCBkYXRhOiBhbnkpID0+IGFueSk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92aXNpdCh0aGlzLnByaW1hcnlUeXBlLCB2YWx1ZSwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tKHR5cGVzOiBSZWNvcmQ8c3RyaW5nLCBBcnJheTxUeXBlZERhdGFGaWVsZD4+KTogVHlwZWREYXRhRW5jb2RlciB7XG4gICAgICAgIHJldHVybiBuZXcgVHlwZWREYXRhRW5jb2Rlcih0eXBlcyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFByaW1hcnlUeXBlKHR5cGVzOiBSZWNvcmQ8c3RyaW5nLCBBcnJheTxUeXBlZERhdGFGaWVsZD4+KTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFR5cGVkRGF0YUVuY29kZXIuZnJvbSh0eXBlcykucHJpbWFyeVR5cGU7XG4gICAgfVxuXG4gICAgc3RhdGljIGhhc2hTdHJ1Y3QobmFtZTogc3RyaW5nLCB0eXBlczogUmVjb3JkPHN0cmluZywgQXJyYXk8VHlwZWREYXRhRmllbGQ+PiwgdmFsdWU6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gVHlwZWREYXRhRW5jb2Rlci5mcm9tKHR5cGVzKS5oYXNoU3RydWN0KG5hbWUsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaGFzaERvbWFpbihkb21haW46IFR5cGVkRGF0YURvbWFpbik6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGRvbWFpbkZpZWxkczogQXJyYXk8VHlwZWREYXRhRmllbGQ+ID0gWyBdO1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gZG9tYWluKSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gZG9tYWluRmllbGRUeXBlc1tuYW1lXTtcbiAgICAgICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGludmFsaWQgdHlwZWQtZGF0YSBkb21haW4ga2V5OiAkeyBKU09OLnN0cmluZ2lmeShuYW1lKSB9YCwgXCJkb21haW5cIiwgZG9tYWluKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbWFpbkZpZWxkcy5wdXNoKHsgbmFtZSwgdHlwZSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvbWFpbkZpZWxkcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZG9tYWluRmllbGROYW1lcy5pbmRleE9mKGEubmFtZSkgLSBkb21haW5GaWVsZE5hbWVzLmluZGV4T2YoYi5uYW1lKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIFR5cGVkRGF0YUVuY29kZXIuaGFzaFN0cnVjdChcIkVJUDcxMkRvbWFpblwiLCB7IEVJUDcxMkRvbWFpbjogZG9tYWluRmllbGRzIH0sIGRvbWFpbik7XG4gICAgfVxuXG4gICAgc3RhdGljIGVuY29kZShkb21haW46IFR5cGVkRGF0YURvbWFpbiwgdHlwZXM6IFJlY29yZDxzdHJpbmcsIEFycmF5PFR5cGVkRGF0YUZpZWxkPj4sIHZhbHVlOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGhleENvbmNhdChbXG4gICAgICAgICAgICBcIjB4MTkwMVwiLFxuICAgICAgICAgICAgVHlwZWREYXRhRW5jb2Rlci5oYXNoRG9tYWluKGRvbWFpbiksXG4gICAgICAgICAgICBUeXBlZERhdGFFbmNvZGVyLmZyb20odHlwZXMpLmhhc2godmFsdWUpXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBoYXNoKGRvbWFpbjogVHlwZWREYXRhRG9tYWluLCB0eXBlczogUmVjb3JkPHN0cmluZywgQXJyYXk8VHlwZWREYXRhRmllbGQ+PiwgdmFsdWU6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4ga2VjY2FrMjU2KFR5cGVkRGF0YUVuY29kZXIuZW5jb2RlKGRvbWFpbiwgdHlwZXMsIHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLy8gUmVwbGFjZXMgYWxsIGFkZHJlc3MgdHlwZXMgd2l0aCBFTlMgbmFtZXMgd2l0aCB0aGVpciBsb29rZWQgdXAgYWRkcmVzc1xuICAgIHN0YXRpYyBhc3luYyByZXNvbHZlTmFtZXMoZG9tYWluOiBUeXBlZERhdGFEb21haW4sIHR5cGVzOiBSZWNvcmQ8c3RyaW5nLCBBcnJheTxUeXBlZERhdGFGaWVsZD4+LCB2YWx1ZTogUmVjb3JkPHN0cmluZywgYW55PiwgcmVzb2x2ZU5hbWU6IChuYW1lOiBzdHJpbmcpID0+IFByb21pc2U8c3RyaW5nPik6IFByb21pc2U8eyBkb21haW46IFR5cGVkRGF0YURvbWFpbiwgdmFsdWU6IGFueSB9PiB7XG4gICAgICAgIC8vIE1ha2UgYSBjb3B5IHRvIGlzb2xhdGUgaXQgZnJvbSB0aGUgb2JqZWN0IHBhc3NlZCBpblxuICAgICAgICBkb21haW4gPSBzaGFsbG93Q29weShkb21haW4pO1xuXG4gICAgICAgIC8vIExvb2sgdXAgYWxsIEVOUyBuYW1lc1xuICAgICAgICBjb25zdCBlbnNDYWNoZTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHsgfTtcblxuICAgICAgICAvLyBEbyB3ZSBuZWVkIHRvIGxvb2sgdXAgdGhlIGRvbWFpbidzIHZlcmlmeWluZ0NvbnRyYWN0P1xuICAgICAgICBpZiAoZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0ICYmICFpc0hleFN0cmluZyhkb21haW4udmVyaWZ5aW5nQ29udHJhY3QsIDIwKSkge1xuICAgICAgICAgICAgZW5zQ2FjaGVbZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0XSA9IFwiMHhcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlIGFyZSBnb2luZyB0byB1c2UgdGhlIGVuY29kZXIgdG8gdmlzaXQgYWxsIHRoZSBiYXNlIHZhbHVlc1xuICAgICAgICBjb25zdCBlbmNvZGVyID0gVHlwZWREYXRhRW5jb2Rlci5mcm9tKHR5cGVzKTtcblxuICAgICAgICAvLyBHZXQgYSBsaXN0IG9mIGFsbCB0aGUgYWRkcmVzc2VzXG4gICAgICAgIGVuY29kZXIudmlzaXQodmFsdWUsICh0eXBlOiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcImFkZHJlc3NcIiAmJiAhaXNIZXhTdHJpbmcodmFsdWUsIDIwKSkge1xuICAgICAgICAgICAgICAgIGVuc0NhY2hlW3ZhbHVlXSA9IFwiMHhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gTG9va3VwIGVhY2ggbmFtZVxuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gZW5zQ2FjaGUpIHtcbiAgICAgICAgICAgIGVuc0NhY2hlW25hbWVdID0gYXdhaXQgcmVzb2x2ZU5hbWUobmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXBsYWNlIHRoZSBkb21haW4gdmVyaWZ5aW5nQ29udHJhY3QgaWYgbmVlZGVkXG4gICAgICAgIGlmIChkb21haW4udmVyaWZ5aW5nQ29udHJhY3QgJiYgZW5zQ2FjaGVbZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0XSkge1xuICAgICAgICAgICAgZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0ID0gZW5zQ2FjaGVbZG9tYWluLnZlcmlmeWluZ0NvbnRyYWN0XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlcGxhY2UgYWxsIEVOUyBuYW1lcyB3aXRoIHRoZWlyIGFkZHJlc3NcbiAgICAgICAgdmFsdWUgPSBlbmNvZGVyLnZpc2l0KHZhbHVlLCAodHlwZTogc3RyaW5nLCB2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJhZGRyZXNzXCIgJiYgZW5zQ2FjaGVbdmFsdWVdKSB7IHJldHVybiBlbnNDYWNoZVt2YWx1ZV07IH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHsgZG9tYWluLCB2YWx1ZSB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRQYXlsb2FkKGRvbWFpbjogVHlwZWREYXRhRG9tYWluLCB0eXBlczogUmVjb3JkPHN0cmluZywgQXJyYXk8VHlwZWREYXRhRmllbGQ+PiwgdmFsdWU6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBhbnkge1xuICAgICAgICAvLyBWYWxpZGF0ZSB0aGUgZG9tYWluIGZpZWxkc1xuICAgICAgICBUeXBlZERhdGFFbmNvZGVyLmhhc2hEb21haW4oZG9tYWluKTtcblxuICAgICAgICAvLyBEZXJpdmUgdGhlIEVJUDcxMkRvbWFpbiBTdHJ1Y3QgcmVmZXJlbmNlIHR5cGVcbiAgICAgICAgY29uc3QgZG9tYWluVmFsdWVzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0geyB9O1xuICAgICAgICBjb25zdCBkb21haW5UeXBlczogQXJyYXk8eyBuYW1lOiBzdHJpbmcsIHR5cGU6c3RyaW5nIH0+ID0gWyBdO1xuXG4gICAgICAgIGRvbWFpbkZpZWxkTmFtZXMuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSAoPGFueT5kb21haW4pW25hbWVdO1xuICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBkb21haW5WYWx1ZXNbbmFtZV0gPSBkb21haW5DaGVja3NbbmFtZV0odmFsdWUpO1xuICAgICAgICAgICAgZG9tYWluVHlwZXMucHVzaCh7IG5hbWUsIHR5cGU6IGRvbWFpbkZpZWxkVHlwZXNbbmFtZV0gfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGVuY29kZXIgPSBUeXBlZERhdGFFbmNvZGVyLmZyb20odHlwZXMpO1xuXG4gICAgICAgIGNvbnN0IHR5cGVzV2l0aERvbWFpbiA9IHNoYWxsb3dDb3B5KHR5cGVzKTtcbiAgICAgICAgaWYgKHR5cGVzV2l0aERvbWFpbi5FSVA3MTJEb21haW4pIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ0eXBlcyBtdXN0IG5vdCBjb250YWluIEVJUDcxMkRvbWFpbiB0eXBlXCIsIFwidHlwZXMuRUlQNzEyRG9tYWluXCIsIHR5cGVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHR5cGVzV2l0aERvbWFpbi5FSVA3MTJEb21haW4gPSBkb21haW5UeXBlcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFZhbGlkYXRlIHRoZSBkYXRhIHN0cnVjdHVyZXMgYW5kIHR5cGVzXG4gICAgICAgIGVuY29kZXIuZW5jb2RlKHZhbHVlKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZXM6IHR5cGVzV2l0aERvbWFpbixcbiAgICAgICAgICAgIGRvbWFpbjogZG9tYWluVmFsdWVzLFxuICAgICAgICAgICAgcHJpbWFyeVR5cGU6IGVuY29kZXIucHJpbWFyeVR5cGUsXG4gICAgICAgICAgICBtZXNzYWdlOiBlbmNvZGVyLnZpc2l0KHZhbHVlLCAodHlwZTogc3RyaW5nLCB2YWx1ZTogYW55KSA9PiB7XG5cbiAgICAgICAgICAgICAgICAvLyBieXRlc1xuICAgICAgICAgICAgICAgIGlmICh0eXBlLm1hdGNoKC9eYnl0ZXMoXFxkKikvKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGV4bGlmeShhcnJheWlmeSh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHVpbnQgb3IgaW50XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUubWF0Y2goL151P2ludC8pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCaWdOdW1iZXIuZnJvbSh2YWx1ZSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFkZHJlc3NcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYm9vbFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YodmFsdWUpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihgaW52YWxpZCBzdHJpbmdgLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIHR5cGVcIiwgXCJ0eXBlXCIsIHR5cGUpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBnZXRBZGRyZXNzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2FkZHJlc3NcIjtcbmltcG9ydCB7IEJpZ051bWJlciwgQmlnTnVtYmVyaXNoIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2JpZ251bWJlclwiO1xuaW1wb3J0IHsgYXJyYXlpZnksIEJ5dGVzTGlrZSwgY29uY2F0LCBoZXhEYXRhU2xpY2UsIGhleGxpZnksIGhleFplcm9QYWQsIGlzSGV4U3RyaW5nIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBpZCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9oYXNoXCI7XG5pbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qva2VjY2FrMjU2XCJcbmltcG9ydCB7IGRlZmluZVJlYWRPbmx5LCBEZXNjcmlwdGlvbiwgZ2V0U3RhdGljIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIjtcblxuaW1wb3J0IHsgQWJpQ29kZXIsIGRlZmF1bHRBYmlDb2RlciB9IGZyb20gXCIuL2FiaS1jb2RlclwiO1xuaW1wb3J0IHsgY2hlY2tSZXN1bHRFcnJvcnMsIFJlc3VsdCB9IGZyb20gXCIuL2NvZGVycy9hYnN0cmFjdC1jb2RlclwiO1xuaW1wb3J0IHsgQ29uc3RydWN0b3JGcmFnbWVudCwgRXJyb3JGcmFnbWVudCwgRXZlbnRGcmFnbWVudCwgRm9ybWF0VHlwZXMsIEZyYWdtZW50LCBGdW5jdGlvbkZyYWdtZW50LCBKc29uRnJhZ21lbnQsIFBhcmFtVHlwZSB9IGZyb20gXCIuL2ZyYWdtZW50c1wiO1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5cbmV4cG9ydCB7IGNoZWNrUmVzdWx0RXJyb3JzLCBSZXN1bHQgfTtcblxuZXhwb3J0IGNsYXNzIExvZ0Rlc2NyaXB0aW9uIGV4dGVuZHMgRGVzY3JpcHRpb248TG9nRGVzY3JpcHRpb24+IHtcbiAgICByZWFkb25seSBldmVudEZyYWdtZW50OiBFdmVudEZyYWdtZW50O1xuICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgICByZWFkb25seSBzaWduYXR1cmU6IHN0cmluZztcbiAgICByZWFkb25seSB0b3BpYzogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGFyZ3M6IFJlc3VsdFxufVxuXG5leHBvcnQgY2xhc3MgVHJhbnNhY3Rpb25EZXNjcmlwdGlvbiBleHRlbmRzIERlc2NyaXB0aW9uPFRyYW5zYWN0aW9uRGVzY3JpcHRpb24+IHtcbiAgICByZWFkb25seSBmdW5jdGlvbkZyYWdtZW50OiBGdW5jdGlvbkZyYWdtZW50O1xuICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgICByZWFkb25seSBhcmdzOiBSZXN1bHQ7XG4gICAgcmVhZG9ubHkgc2lnbmF0dXJlOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgc2lnaGFzaDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHZhbHVlOiBCaWdOdW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBFcnJvckRlc2NyaXB0aW9uIGV4dGVuZHMgRGVzY3JpcHRpb248RXJyb3JEZXNjcmlwdGlvbj4ge1xuICAgIHJlYWRvbmx5IGVycm9yRnJhZ21lbnQ6IEVycm9yRnJhZ21lbnQ7XG4gICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGFyZ3M6IFJlc3VsdDtcbiAgICByZWFkb25seSBzaWduYXR1cmU6IHN0cmluZztcbiAgICByZWFkb25seSBzaWdoYXNoOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBJbmRleGVkIGV4dGVuZHMgRGVzY3JpcHRpb248SW5kZXhlZD4ge1xuICAgIHJlYWRvbmx5IGhhc2g6IHN0cmluZztcbiAgICByZWFkb25seSBfaXNJbmRleGVkOiBib29sZWFuO1xuXG4gICAgc3RhdGljIGlzSW5kZXhlZCh2YWx1ZTogYW55KTogdmFsdWUgaXMgSW5kZXhlZCB7XG4gICAgICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5faXNJbmRleGVkKTtcbiAgICB9XG59XG5cbmNvbnN0IEJ1aWx0aW5FcnJvcnM6IFJlY29yZDxzdHJpbmcsIHsgc2lnbmF0dXJlOiBzdHJpbmcsIGlucHV0czogQXJyYXk8c3RyaW5nPiwgbmFtZTogc3RyaW5nLCByZWFzb24/OiBib29sZWFuIH0+ID0ge1xuICAgIFwiMHgwOGMzNzlhMFwiOiB7IHNpZ25hdHVyZTogXCJFcnJvcihzdHJpbmcpXCIsIG5hbWU6IFwiRXJyb3JcIiwgaW5wdXRzOiBbIFwic3RyaW5nXCIgXSwgcmVhc29uOiB0cnVlIH0sXG4gICAgXCIweDRlNDg3YjcxXCI6IHsgc2lnbmF0dXJlOiBcIlBhbmljKHVpbnQyNTYpXCIsIG5hbWU6IFwiUGFuaWNcIiwgaW5wdXRzOiBbIFwidWludDI1NlwiIF0gfVxufVxuXG5mdW5jdGlvbiB3cmFwQWNjZXNzRXJyb3IocHJvcGVydHk6IHN0cmluZywgZXJyb3I6IEVycm9yKTogRXJyb3Ige1xuICAgIGNvbnN0IHdyYXAgPSBuZXcgRXJyb3IoYGRlZmVycmVkIGVycm9yIGR1cmluZyBBQkkgZGVjb2RpbmcgdHJpZ2dlcmVkIGFjY2Vzc2luZyAkeyBwcm9wZXJ0eSB9YCk7XG4gICAgKDxhbnk+d3JhcCkuZXJyb3IgPSBlcnJvcjtcbiAgICByZXR1cm4gd3JhcDtcbn1cblxuLypcbmZ1bmN0aW9uIGNoZWNrTmFtZXMoZnJhZ21lbnQ6IEZyYWdtZW50LCB0eXBlOiBcImlucHV0XCIgfCBcIm91dHB1dFwiLCBwYXJhbXM6IEFycmF5PFBhcmFtVHlwZT4pOiB2b2lkIHtcbiAgICBwYXJhbXMucmVkdWNlKChhY2N1bSwgcGFyYW0pID0+IHtcbiAgICAgICAgaWYgKHBhcmFtLm5hbWUpIHtcbiAgICAgICAgICAgIGlmIChhY2N1bVtwYXJhbS5uYW1lXSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGR1cGxpY2F0ZSAkeyB0eXBlIH0gcGFyYW1ldGVyICR7IEpTT04uc3RyaW5naWZ5KHBhcmFtLm5hbWUpIH0gaW4gJHsgZnJhZ21lbnQuZm9ybWF0KFwiZnVsbFwiKSB9YCwgXCJmcmFnbWVudFwiLCBmcmFnbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY2N1bVtwYXJhbS5uYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY3VtO1xuICAgIH0sIDx7IFsgbmFtZTogc3RyaW5nIF06IGJvb2xlYW4gfT57IH0pO1xufVxuKi9cbmV4cG9ydCBjbGFzcyBJbnRlcmZhY2Uge1xuICAgIHJlYWRvbmx5IGZyYWdtZW50czogUmVhZG9ubHlBcnJheTxGcmFnbWVudD47XG5cbiAgICByZWFkb25seSBlcnJvcnM6IHsgWyBuYW1lOiBzdHJpbmcgXTogRXJyb3JGcmFnbWVudCB9O1xuICAgIHJlYWRvbmx5IGV2ZW50czogeyBbIG5hbWU6IHN0cmluZyBdOiBFdmVudEZyYWdtZW50IH07XG4gICAgcmVhZG9ubHkgZnVuY3Rpb25zOiB7IFsgbmFtZTogc3RyaW5nIF06IEZ1bmN0aW9uRnJhZ21lbnQgfTtcbiAgICByZWFkb25seSBzdHJ1Y3RzOiB7IFsgbmFtZTogc3RyaW5nIF06IGFueSB9O1xuXG4gICAgcmVhZG9ubHkgZGVwbG95OiBDb25zdHJ1Y3RvckZyYWdtZW50O1xuXG4gICAgcmVhZG9ubHkgX2FiaUNvZGVyOiBBYmlDb2RlcjtcblxuICAgIHJlYWRvbmx5IF9pc0ludGVyZmFjZTogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGZyYWdtZW50czogc3RyaW5nIHwgUmVhZG9ubHlBcnJheTxGcmFnbWVudCB8IEpzb25GcmFnbWVudCB8IHN0cmluZz4pIHtcbiAgICAgICAgbGV0IGFiaTogUmVhZG9ubHlBcnJheTxGcmFnbWVudCB8IEpzb25GcmFnbWVudCB8IHN0cmluZz4gPSBbIF07XG4gICAgICAgIGlmICh0eXBlb2YoZnJhZ21lbnRzKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgYWJpID0gSlNPTi5wYXJzZShmcmFnbWVudHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWJpID0gZnJhZ21lbnRzO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJmcmFnbWVudHNcIiwgYWJpLm1hcCgoZnJhZ21lbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBGcmFnbWVudC5mcm9tKGZyYWdtZW50KTtcbiAgICAgICAgfSkuZmlsdGVyKChmcmFnbWVudCkgPT4gKGZyYWdtZW50ICE9IG51bGwpKSk7XG5cbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfYWJpQ29kZXJcIiwgZ2V0U3RhdGljPCgpID0+IEFiaUNvZGVyPihuZXcudGFyZ2V0LCBcImdldEFiaUNvZGVyXCIpKCkpO1xuXG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiZnVuY3Rpb25zXCIsIHsgfSk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiZXJyb3JzXCIsIHsgfSk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiZXZlbnRzXCIsIHsgfSk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwic3RydWN0c1wiLCB7IH0pO1xuXG4gICAgICAgIC8vIEFkZCBhbGwgZnJhZ21lbnRzIGJ5IHRoZWlyIHNpZ25hdHVyZVxuICAgICAgICB0aGlzLmZyYWdtZW50cy5mb3JFYWNoKChmcmFnbWVudCkgPT4ge1xuICAgICAgICAgICAgbGV0IGJ1Y2tldDogeyBbIG5hbWU6IHN0cmluZyBdOiBGcmFnbWVudCB9ID0gbnVsbDtcbiAgICAgICAgICAgIHN3aXRjaCAoZnJhZ21lbnQudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJjb25zdHJ1Y3RvclwiOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kZXBsb3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKFwiZHVwbGljYXRlIGRlZmluaXRpb24gLSBjb25zdHJ1Y3RvclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrTmFtZXMoZnJhZ21lbnQsIFwiaW5wdXRcIiwgZnJhZ21lbnQuaW5wdXRzKTtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJkZXBsb3lcIiwgPENvbnN0cnVjdG9yRnJhZ21lbnQ+ZnJhZ21lbnQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2tOYW1lcyhmcmFnbWVudCwgXCJpbnB1dFwiLCBmcmFnbWVudC5pbnB1dHMpO1xuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrTmFtZXMoZnJhZ21lbnQsIFwib3V0cHV0XCIsICg8RnVuY3Rpb25GcmFnbWVudD5mcmFnbWVudCkub3V0cHV0cyk7XG4gICAgICAgICAgICAgICAgICAgIGJ1Y2tldCA9IHRoaXMuZnVuY3Rpb25zO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXZlbnRcIjpcbiAgICAgICAgICAgICAgICAgICAgLy9jaGVja05hbWVzKGZyYWdtZW50LCBcImlucHV0XCIsIGZyYWdtZW50LmlucHV0cyk7XG4gICAgICAgICAgICAgICAgICAgIGJ1Y2tldCA9IHRoaXMuZXZlbnRzO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgICAgICAgICAgYnVja2V0ID0gdGhpcy5lcnJvcnM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHNpZ25hdHVyZSA9IGZyYWdtZW50LmZvcm1hdCgpO1xuICAgICAgICAgICAgaWYgKGJ1Y2tldFtzaWduYXR1cmVdKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oXCJkdXBsaWNhdGUgZGVmaW5pdGlvbiAtIFwiICsgc2lnbmF0dXJlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJ1Y2tldFtzaWduYXR1cmVdID0gZnJhZ21lbnQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIElmIHdlIGRvIG5vdCBoYXZlIGEgY29uc3RydWN0b3IgYWRkIGEgZGVmYXVsdFxuICAgICAgICBpZiAoIXRoaXMuZGVwbG95KSB7XG4gICAgICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImRlcGxveVwiLCBDb25zdHJ1Y3RvckZyYWdtZW50LmZyb20oe1xuICAgICAgICAgICAgICAgIHBheWFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiY29uc3RydWN0b3JcIlxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfaXNJbnRlcmZhY2VcIiwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgZm9ybWF0KGZvcm1hdD86IHN0cmluZyk6IHN0cmluZyB8IEFycmF5PHN0cmluZz4ge1xuICAgICAgICBpZiAoIWZvcm1hdCkgeyBmb3JtYXQgPSBGb3JtYXRUeXBlcy5mdWxsOyB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IEZvcm1hdFR5cGVzLnNpZ2hhc2gpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnRlcmZhY2UgZG9lcyBub3Qgc3VwcG9ydCBmb3JtYXR0aW5nIHNpZ2hhc2hcIiwgXCJmb3JtYXRcIiwgZm9ybWF0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFiaSA9IHRoaXMuZnJhZ21lbnRzLm1hcCgoZnJhZ21lbnQpID0+IGZyYWdtZW50LmZvcm1hdChmb3JtYXQpKTtcblxuICAgICAgICAvLyBXZSBuZWVkIHRvIHJlLWJ1bmRsZSB0aGUgSlNPTiBmcmFnbWVudHMgYSBiaXRcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gRm9ybWF0VHlwZXMuanNvbikge1xuICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhYmkubWFwKChqKSA9PiBKU09OLnBhcnNlKGopKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYWJpO1xuICAgIH1cblxuICAgIC8vIFN1Yi1jbGFzc2VzIGNhbiBvdmVycmlkZSB0aGVzZSB0byBoYW5kbGUgb3RoZXIgYmxvY2tjaGFpbnNcbiAgICBzdGF0aWMgZ2V0QWJpQ29kZXIoKTogQWJpQ29kZXIge1xuICAgICAgICByZXR1cm4gZGVmYXVsdEFiaUNvZGVyO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRBZGRyZXNzKGFkZHJlc3M6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBnZXRBZGRyZXNzKGFkZHJlc3MpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRTaWdoYXNoKGZyYWdtZW50OiBFcnJvckZyYWdtZW50IHwgRnVuY3Rpb25GcmFnbWVudCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBoZXhEYXRhU2xpY2UoaWQoZnJhZ21lbnQuZm9ybWF0KCkpLCAwLCA0KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0RXZlbnRUb3BpYyhldmVudEZyYWdtZW50OiBFdmVudEZyYWdtZW50KTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGlkKGV2ZW50RnJhZ21lbnQuZm9ybWF0KCkpO1xuICAgIH1cblxuICAgIC8vIEZpbmQgYSBmdW5jdGlvbiBkZWZpbml0aW9uIGJ5IGFueSBtZWFucyBuZWNlc3NhcnkgKHVubGVzcyBpdCBpcyBhbWJpZ3VvdXMpXG4gICAgZ2V0RnVuY3Rpb24obmFtZU9yU2lnbmF0dXJlT3JTaWdoYXNoOiBzdHJpbmcpOiBGdW5jdGlvbkZyYWdtZW50IHtcbiAgICAgICAgaWYgKGlzSGV4U3RyaW5nKG5hbWVPclNpZ25hdHVyZU9yU2lnaGFzaCkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiB0aGlzLmZ1bmN0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmIChuYW1lT3JTaWduYXR1cmVPclNpZ2hhc2ggPT09IHRoaXMuZ2V0U2lnaGFzaChuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mdW5jdGlvbnNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcIm5vIG1hdGNoaW5nIGZ1bmN0aW9uXCIsIFwic2lnaGFzaFwiLCBuYW1lT3JTaWduYXR1cmVPclNpZ2hhc2gpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSXQgaXMgYSBiYXJlIG5hbWUsIGxvb2sgdXAgdGhlIGZ1bmN0aW9uICh3aWxsIHJldHVybiBudWxsIGlmIGFtYmlndW91cylcbiAgICAgICAgaWYgKG5hbWVPclNpZ25hdHVyZU9yU2lnaGFzaC5pbmRleE9mKFwiKFwiKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBuYW1lT3JTaWduYXR1cmVPclNpZ2hhc2gudHJpbSgpO1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hpbmcgPSBPYmplY3Qua2V5cyh0aGlzLmZ1bmN0aW9ucykuZmlsdGVyKChmKSA9PiAoZi5zcGxpdChcIihcIi8qIGZpeDopICovKVswXSA9PT0gbmFtZSkpO1xuICAgICAgICAgICAgaWYgKG1hdGNoaW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJubyBtYXRjaGluZyBmdW5jdGlvblwiLCBcIm5hbWVcIiwgbmFtZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoaW5nLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwibXVsdGlwbGUgbWF0Y2hpbmcgZnVuY3Rpb25zXCIsIFwibmFtZVwiLCBuYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnVuY3Rpb25zW21hdGNoaW5nWzBdXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgc2lnbmF0dXJlIGFuZCBsb29rdXAgdGhlIGZ1bmN0aW9uXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZnVuY3Rpb25zW0Z1bmN0aW9uRnJhZ21lbnQuZnJvbVN0cmluZyhuYW1lT3JTaWduYXR1cmVPclNpZ2hhc2gpLmZvcm1hdCgpXTtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJubyBtYXRjaGluZyBmdW5jdGlvblwiLCBcInNpZ25hdHVyZVwiLCBuYW1lT3JTaWduYXR1cmVPclNpZ2hhc2gpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRmluZCBhbiBldmVudCBkZWZpbml0aW9uIGJ5IGFueSBtZWFucyBuZWNlc3NhcnkgKHVubGVzcyBpdCBpcyBhbWJpZ3VvdXMpXG4gICAgZ2V0RXZlbnQobmFtZU9yU2lnbmF0dXJlT3JUb3BpYzogc3RyaW5nKTogRXZlbnRGcmFnbWVudCB7XG4gICAgICAgIGlmIChpc0hleFN0cmluZyhuYW1lT3JTaWduYXR1cmVPclRvcGljKSkge1xuICAgICAgICAgICAgY29uc3QgdG9waWNoYXNoID0gbmFtZU9yU2lnbmF0dXJlT3JUb3BpYy50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHRoaXMuZXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRvcGljaGFzaCA9PT0gdGhpcy5nZXRFdmVudFRvcGljKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmV2ZW50c1tuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwibm8gbWF0Y2hpbmcgZXZlbnRcIiwgXCJ0b3BpY2hhc2hcIiwgdG9waWNoYXNoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEl0IGlzIGEgYmFyZSBuYW1lLCBsb29rIHVwIHRoZSBmdW5jdGlvbiAod2lsbCByZXR1cm4gbnVsbCBpZiBhbWJpZ3VvdXMpXG4gICAgICAgIGlmIChuYW1lT3JTaWduYXR1cmVPclRvcGljLmluZGV4T2YoXCIoXCIpID09PSAtMSkge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IG5hbWVPclNpZ25hdHVyZU9yVG9waWMudHJpbSgpO1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hpbmcgPSBPYmplY3Qua2V5cyh0aGlzLmV2ZW50cykuZmlsdGVyKChmKSA9PiAoZi5zcGxpdChcIihcIi8qIGZpeDopICovKVswXSA9PT0gbmFtZSkpO1xuICAgICAgICAgICAgaWYgKG1hdGNoaW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJubyBtYXRjaGluZyBldmVudFwiLCBcIm5hbWVcIiwgbmFtZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoaW5nLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwibXVsdGlwbGUgbWF0Y2hpbmcgZXZlbnRzXCIsIFwibmFtZVwiLCBuYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRzW21hdGNoaW5nWzBdXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgc2lnbmF0dXJlIGFuZCBsb29rdXAgdGhlIGZ1bmN0aW9uXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZXZlbnRzW0V2ZW50RnJhZ21lbnQuZnJvbVN0cmluZyhuYW1lT3JTaWduYXR1cmVPclRvcGljKS5mb3JtYXQoKV07XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwibm8gbWF0Y2hpbmcgZXZlbnRcIiwgXCJzaWduYXR1cmVcIiwgbmFtZU9yU2lnbmF0dXJlT3JUb3BpYyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBGaW5kIGEgZnVuY3Rpb24gZGVmaW5pdGlvbiBieSBhbnkgbWVhbnMgbmVjZXNzYXJ5ICh1bmxlc3MgaXQgaXMgYW1iaWd1b3VzKVxuICAgIGdldEVycm9yKG5hbWVPclNpZ25hdHVyZU9yU2lnaGFzaDogc3RyaW5nKTogRXJyb3JGcmFnbWVudCB7XG4gICAgICAgIGlmIChpc0hleFN0cmluZyhuYW1lT3JTaWduYXR1cmVPclNpZ2hhc2gpKSB7XG4gICAgICAgICAgICBjb25zdCBnZXRTaWdoYXNoID0gZ2V0U3RhdGljPChmOiBFcnJvckZyYWdtZW50IHwgRnVuY3Rpb25GcmFnbWVudCkgPT4gc3RyaW5nPih0aGlzLmNvbnN0cnVjdG9yLCBcImdldFNpZ2hhc2hcIik7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gdGhpcy5lcnJvcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IHRoaXMuZXJyb3JzW25hbWVdO1xuICAgICAgICAgICAgICAgIGlmIChuYW1lT3JTaWduYXR1cmVPclNpZ2hhc2ggPT09IGdldFNpZ2hhc2goZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVycm9yc1tuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwibm8gbWF0Y2hpbmcgZXJyb3JcIiwgXCJzaWdoYXNoXCIsIG5hbWVPclNpZ25hdHVyZU9yU2lnaGFzaCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJdCBpcyBhIGJhcmUgbmFtZSwgbG9vayB1cCB0aGUgZnVuY3Rpb24gKHdpbGwgcmV0dXJuIG51bGwgaWYgYW1iaWd1b3VzKVxuICAgICAgICBpZiAobmFtZU9yU2lnbmF0dXJlT3JTaWdoYXNoLmluZGV4T2YoXCIoXCIpID09PSAtMSkge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IG5hbWVPclNpZ25hdHVyZU9yU2lnaGFzaC50cmltKCk7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGluZyA9IE9iamVjdC5rZXlzKHRoaXMuZXJyb3JzKS5maWx0ZXIoKGYpID0+IChmLnNwbGl0KFwiKFwiLyogZml4OikgKi8pWzBdID09PSBuYW1lKSk7XG4gICAgICAgICAgICBpZiAobWF0Y2hpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcIm5vIG1hdGNoaW5nIGVycm9yXCIsIFwibmFtZVwiLCBuYW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hpbmcubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJtdWx0aXBsZSBtYXRjaGluZyBlcnJvcnNcIiwgXCJuYW1lXCIsIG5hbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvcnNbbWF0Y2hpbmdbMF1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTm9ybWFsaXplIHRoZSBzaWduYXR1cmUgYW5kIGxvb2t1cCB0aGUgZnVuY3Rpb25cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5lcnJvcnNbRnVuY3Rpb25GcmFnbWVudC5mcm9tU3RyaW5nKG5hbWVPclNpZ25hdHVyZU9yU2lnaGFzaCkuZm9ybWF0KCldO1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcIm5vIG1hdGNoaW5nIGVycm9yXCIsIFwic2lnbmF0dXJlXCIsIG5hbWVPclNpZ25hdHVyZU9yU2lnaGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBHZXQgdGhlIHNpZ2hhc2ggKHRoZSBieXRlczQgc2VsZWN0b3IpIHVzZWQgYnkgU29saWRpdHkgdG8gaWRlbnRpZnkgYSBmdW5jdGlvblxuICAgIGdldFNpZ2hhc2goZnJhZ21lbnQ6IEVycm9yRnJhZ21lbnQgfCBGdW5jdGlvbkZyYWdtZW50IHwgc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHR5cGVvZihmcmFnbWVudCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZnJhZ21lbnQgPSB0aGlzLmdldEZ1bmN0aW9uKGZyYWdtZW50KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQgPSB0aGlzLmdldEVycm9yKDxzdHJpbmc+ZnJhZ21lbnQpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdldFN0YXRpYzwoZjogRXJyb3JGcmFnbWVudCB8IEZ1bmN0aW9uRnJhZ21lbnQpID0+IHN0cmluZz4odGhpcy5jb25zdHJ1Y3RvciwgXCJnZXRTaWdoYXNoXCIpKGZyYWdtZW50KTtcbiAgICB9XG5cbiAgICAvLyBHZXQgdGhlIHRvcGljICh0aGUgYnl0ZXMzMiBoYXNoKSB1c2VkIGJ5IFNvbGlkaXR5IHRvIGlkZW50aWZ5IGFuIGV2ZW50XG4gICAgZ2V0RXZlbnRUb3BpYyhldmVudEZyYWdtZW50OiBFdmVudEZyYWdtZW50IHwgc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHR5cGVvZihldmVudEZyYWdtZW50KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgZXZlbnRGcmFnbWVudCA9IHRoaXMuZ2V0RXZlbnQoZXZlbnRGcmFnbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ2V0U3RhdGljPChlOiBFdmVudEZyYWdtZW50KSA9PiBzdHJpbmc+KHRoaXMuY29uc3RydWN0b3IsIFwiZ2V0RXZlbnRUb3BpY1wiKShldmVudEZyYWdtZW50KTtcbiAgICB9XG5cblxuICAgIF9kZWNvZGVQYXJhbXMocGFyYW1zOiBSZWFkb25seUFycmF5PFBhcmFtVHlwZT4sIGRhdGE6IEJ5dGVzTGlrZSk6IFJlc3VsdCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hYmlDb2Rlci5kZWNvZGUocGFyYW1zLCBkYXRhKVxuICAgIH1cblxuICAgIF9lbmNvZGVQYXJhbXMocGFyYW1zOiBSZWFkb25seUFycmF5PFBhcmFtVHlwZT4sIHZhbHVlczogUmVhZG9ubHlBcnJheTxhbnk+KTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FiaUNvZGVyLmVuY29kZShwYXJhbXMsIHZhbHVlcylcbiAgICB9XG5cbiAgICBlbmNvZGVEZXBsb3kodmFsdWVzPzogUmVhZG9ubHlBcnJheTxhbnk+KTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuY29kZVBhcmFtcyh0aGlzLmRlcGxveS5pbnB1dHMsIHZhbHVlcyB8fCBbIF0pO1xuICAgIH1cblxuICAgIGRlY29kZUVycm9yUmVzdWx0KGZyYWdtZW50OiBFcnJvckZyYWdtZW50IHwgc3RyaW5nLCBkYXRhOiBCeXRlc0xpa2UpOiBSZXN1bHQge1xuICAgICAgICBpZiAodHlwZW9mKGZyYWdtZW50KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgZnJhZ21lbnQgPSB0aGlzLmdldEVycm9yKGZyYWdtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJ5dGVzID0gYXJyYXlpZnkoZGF0YSk7XG5cbiAgICAgICAgaWYgKGhleGxpZnkoYnl0ZXMuc2xpY2UoMCwgNCkpICE9PSB0aGlzLmdldFNpZ2hhc2goZnJhZ21lbnQpKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKGBkYXRhIHNpZ25hdHVyZSBkb2VzIG5vdCBtYXRjaCBlcnJvciAkeyBmcmFnbWVudC5uYW1lIH0uYCwgXCJkYXRhXCIsIGhleGxpZnkoYnl0ZXMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9kZWNvZGVQYXJhbXMoZnJhZ21lbnQuaW5wdXRzLCBieXRlcy5zbGljZSg0KSk7XG4gICAgfVxuXG4gICAgZW5jb2RlRXJyb3JSZXN1bHQoZnJhZ21lbnQ6IEVycm9yRnJhZ21lbnQgfCBzdHJpbmcsIHZhbHVlcz86IFJlYWRvbmx5QXJyYXk8YW55Pik6IHN0cmluZyB7XG4gICAgICAgIGlmICh0eXBlb2YoZnJhZ21lbnQpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBmcmFnbWVudCA9IHRoaXMuZ2V0RXJyb3IoZnJhZ21lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhleGxpZnkoY29uY2F0KFtcbiAgICAgICAgICAgIHRoaXMuZ2V0U2lnaGFzaChmcmFnbWVudCksXG4gICAgICAgICAgICB0aGlzLl9lbmNvZGVQYXJhbXMoZnJhZ21lbnQuaW5wdXRzLCB2YWx1ZXMgfHwgWyBdKVxuICAgICAgICBdKSk7XG4gICAgfVxuXG4gICAgLy8gRGVjb2RlIHRoZSBkYXRhIGZvciBhIGZ1bmN0aW9uIGNhbGwgKGUuZy4gdHguZGF0YSlcbiAgICBkZWNvZGVGdW5jdGlvbkRhdGEoZnVuY3Rpb25GcmFnbWVudDogRnVuY3Rpb25GcmFnbWVudCB8IHN0cmluZywgZGF0YTogQnl0ZXNMaWtlKTogUmVzdWx0IHtcbiAgICAgICAgaWYgKHR5cGVvZihmdW5jdGlvbkZyYWdtZW50KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgZnVuY3Rpb25GcmFnbWVudCA9IHRoaXMuZ2V0RnVuY3Rpb24oZnVuY3Rpb25GcmFnbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBieXRlcyA9IGFycmF5aWZ5KGRhdGEpO1xuXG4gICAgICAgIGlmIChoZXhsaWZ5KGJ5dGVzLnNsaWNlKDAsIDQpKSAhPT0gdGhpcy5nZXRTaWdoYXNoKGZ1bmN0aW9uRnJhZ21lbnQpKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKGBkYXRhIHNpZ25hdHVyZSBkb2VzIG5vdCBtYXRjaCBmdW5jdGlvbiAkeyBmdW5jdGlvbkZyYWdtZW50Lm5hbWUgfS5gLCBcImRhdGFcIiwgaGV4bGlmeShieXRlcykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlY29kZVBhcmFtcyhmdW5jdGlvbkZyYWdtZW50LmlucHV0cywgYnl0ZXMuc2xpY2UoNCkpO1xuICAgIH1cblxuICAgIC8vIEVuY29kZSB0aGUgZGF0YSBmb3IgYSBmdW5jdGlvbiBjYWxsIChlLmcuIHR4LmRhdGEpXG4gICAgZW5jb2RlRnVuY3Rpb25EYXRhKGZ1bmN0aW9uRnJhZ21lbnQ6IEZ1bmN0aW9uRnJhZ21lbnQgfCBzdHJpbmcsIHZhbHVlcz86IFJlYWRvbmx5QXJyYXk8YW55Pik6IHN0cmluZyB7XG4gICAgICAgIGlmICh0eXBlb2YoZnVuY3Rpb25GcmFnbWVudCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uRnJhZ21lbnQgPSB0aGlzLmdldEZ1bmN0aW9uKGZ1bmN0aW9uRnJhZ21lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhleGxpZnkoY29uY2F0KFtcbiAgICAgICAgICAgIHRoaXMuZ2V0U2lnaGFzaChmdW5jdGlvbkZyYWdtZW50KSxcbiAgICAgICAgICAgIHRoaXMuX2VuY29kZVBhcmFtcyhmdW5jdGlvbkZyYWdtZW50LmlucHV0cywgdmFsdWVzIHx8IFsgXSlcbiAgICAgICAgXSkpO1xuICAgIH1cblxuICAgIC8vIERlY29kZSB0aGUgcmVzdWx0IGZyb20gYSBmdW5jdGlvbiBjYWxsIChlLmcuIGZyb20gZXRoX2NhbGwpXG4gICAgZGVjb2RlRnVuY3Rpb25SZXN1bHQoZnVuY3Rpb25GcmFnbWVudDogRnVuY3Rpb25GcmFnbWVudCB8IHN0cmluZywgZGF0YTogQnl0ZXNMaWtlKTogUmVzdWx0IHtcbiAgICAgICAgaWYgKHR5cGVvZihmdW5jdGlvbkZyYWdtZW50KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgZnVuY3Rpb25GcmFnbWVudCA9IHRoaXMuZ2V0RnVuY3Rpb24oZnVuY3Rpb25GcmFnbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYnl0ZXMgPSBhcnJheWlmeShkYXRhKTtcblxuICAgICAgICBsZXQgcmVhc29uOiBzdHJpbmcgPSBudWxsO1xuICAgICAgICBsZXQgbWVzc2FnZSA9IFwiXCI7XG4gICAgICAgIGxldCBlcnJvckFyZ3M6IFJlc3VsdCA9IG51bGw7XG4gICAgICAgIGxldCBlcnJvck5hbWU6IHN0cmluZyA9IG51bGw7XG4gICAgICAgIGxldCBlcnJvclNpZ25hdHVyZTogc3RyaW5nID0gbnVsbDtcbiAgICAgICAgc3dpdGNoIChieXRlcy5sZW5ndGggJSB0aGlzLl9hYmlDb2Rlci5fZ2V0V29yZFNpemUoKSkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hYmlDb2Rlci5kZWNvZGUoZnVuY3Rpb25GcmFnbWVudC5vdXRwdXRzLCBieXRlcyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQ6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RvciA9IGhleGxpZnkoYnl0ZXMuc2xpY2UoMCwgNCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1aWx0aW4gPSBCdWlsdGluRXJyb3JzW3NlbGVjdG9yXTtcbiAgICAgICAgICAgICAgICBpZiAoYnVpbHRpbikge1xuICAgICAgICAgICAgICAgICAgICBlcnJvckFyZ3MgPSB0aGlzLl9hYmlDb2Rlci5kZWNvZGUoYnVpbHRpbi5pbnB1dHMsIGJ5dGVzLnNsaWNlKDQpKTtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JOYW1lID0gYnVpbHRpbi5uYW1lO1xuICAgICAgICAgICAgICAgICAgICBlcnJvclNpZ25hdHVyZSA9IGJ1aWx0aW4uc2lnbmF0dXJlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnVpbHRpbi5yZWFzb24pIHsgcmVhc29uID0gZXJyb3JBcmdzWzBdOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvck5hbWUgPT09IFwiRXJyb3JcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGA7IFZNIEV4Y2VwdGlvbiB3aGlsZSBwcm9jZXNzaW5nIHRyYW5zYWN0aW9uOiByZXZlcnRlZCB3aXRoIHJlYXNvbiBzdHJpbmcgJHsgSlNPTi5zdHJpbmdpZnkoZXJyb3JBcmdzWzBdKSB9YDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvck5hbWUgPT09IFwiUGFuaWNcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGA7IFZNIEV4Y2VwdGlvbiB3aGlsZSBwcm9jZXNzaW5nIHRyYW5zYWN0aW9uOiByZXZlcnRlZCB3aXRoIHBhbmljIGNvZGUgJHsgZXJyb3JBcmdzWzBdIH1gO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gdGhpcy5nZXRFcnJvcihzZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvckFyZ3MgPSB0aGlzLl9hYmlDb2Rlci5kZWNvZGUoZXJyb3IuaW5wdXRzLCBieXRlcy5zbGljZSg0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvck5hbWUgPSBlcnJvci5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JTaWduYXR1cmUgPSBlcnJvci5mb3JtYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihcImNhbGwgcmV2ZXJ0IGV4Y2VwdGlvblwiICsgbWVzc2FnZSwgTG9nZ2VyLmVycm9ycy5DQUxMX0VYQ0VQVElPTiwge1xuICAgICAgICAgICAgbWV0aG9kOiBmdW5jdGlvbkZyYWdtZW50LmZvcm1hdCgpLFxuICAgICAgICAgICAgZGF0YTogaGV4bGlmeShkYXRhKSwgZXJyb3JBcmdzLCBlcnJvck5hbWUsIGVycm9yU2lnbmF0dXJlLCByZWFzb25cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gRW5jb2RlIHRoZSByZXN1bHQgZm9yIGEgZnVuY3Rpb24gY2FsbCAoZS5nLiBmb3IgZXRoX2NhbGwpXG4gICAgZW5jb2RlRnVuY3Rpb25SZXN1bHQoZnVuY3Rpb25GcmFnbWVudDogRnVuY3Rpb25GcmFnbWVudCB8IHN0cmluZywgdmFsdWVzPzogUmVhZG9ubHlBcnJheTxhbnk+KTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHR5cGVvZihmdW5jdGlvbkZyYWdtZW50KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgZnVuY3Rpb25GcmFnbWVudCA9IHRoaXMuZ2V0RnVuY3Rpb24oZnVuY3Rpb25GcmFnbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaGV4bGlmeSh0aGlzLl9hYmlDb2Rlci5lbmNvZGUoZnVuY3Rpb25GcmFnbWVudC5vdXRwdXRzLCB2YWx1ZXMgfHwgWyBdKSk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIHRoZSBmaWx0ZXIgZm9yIHRoZSBldmVudCB3aXRoIHNlYXJjaCBjcml0ZXJpYSAoZS5nLiBmb3IgZXRoX2ZpbHRlckxvZylcbiAgICBlbmNvZGVGaWx0ZXJUb3BpY3MoZXZlbnRGcmFnbWVudDogRXZlbnRGcmFnbWVudCB8IHN0cmluZywgdmFsdWVzOiBSZWFkb25seUFycmF5PGFueT4pOiBBcnJheTxzdHJpbmcgfCBBcnJheTxzdHJpbmc+PiB7XG4gICAgICAgIGlmICh0eXBlb2YoZXZlbnRGcmFnbWVudCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGV2ZW50RnJhZ21lbnQgPSB0aGlzLmdldEV2ZW50KGV2ZW50RnJhZ21lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPiBldmVudEZyYWdtZW50LmlucHV0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwidG9vIG1hbnkgYXJndW1lbnRzIGZvciBcIiArIGV2ZW50RnJhZ21lbnQuZm9ybWF0KCksIExvZ2dlci5lcnJvcnMuVU5FWFBFQ1RFRF9BUkdVTUVOVCwge1xuICAgICAgICAgICAgICAgIGFyZ3VtZW50OiBcInZhbHVlc1wiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZXNcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdG9waWNzOiBBcnJheTxzdHJpbmcgfCBBcnJheTxzdHJpbmc+PiA9IFtdO1xuICAgICAgICBpZiAoIWV2ZW50RnJhZ21lbnQuYW5vbnltb3VzKSB7IHRvcGljcy5wdXNoKHRoaXMuZ2V0RXZlbnRUb3BpYyhldmVudEZyYWdtZW50KSk7IH1cblxuICAgICAgICBjb25zdCBlbmNvZGVUb3BpYyA9IChwYXJhbTogUGFyYW1UeXBlLCB2YWx1ZTogYW55KTogc3RyaW5nID0+IHtcbiAgICAgICAgICAgIGlmIChwYXJhbS50eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgIHJldHVybiBpZCh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtLnR5cGUgPT09IFwiYnl0ZXNcIikge1xuICAgICAgICAgICAgICAgICByZXR1cm4ga2VjY2FrMjU2KGhleGxpZnkodmFsdWUpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBhcmFtLnR5cGUgPT09IFwiYm9vbFwiICYmIHR5cGVvZih2YWx1ZSkgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSAodmFsdWUgPyBcIjB4MDFcIjogXCIweDAwXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocGFyYW0udHlwZS5tYXRjaCgvXnU/aW50LykpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IEJpZ051bWJlci5mcm9tKHZhbHVlKS50b0hleFN0cmluZygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDaGVjayBhZGRyZXNzZXMgYXJlIHZhbGlkXG4gICAgICAgICAgICBpZiAocGFyYW0udHlwZSA9PT0gXCJhZGRyZXNzXCIpIHsgdGhpcy5fYWJpQ29kZXIuZW5jb2RlKCBbIFwiYWRkcmVzc1wiIF0sIFsgdmFsdWUgXSk7IH1cbiAgICAgICAgICAgIHJldHVybiBoZXhaZXJvUGFkKGhleGxpZnkodmFsdWUpLCAzMik7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFsdWVzLmZvckVhY2goKHZhbHVlLCBpbmRleCkgPT4ge1xuXG4gICAgICAgICAgICBsZXQgcGFyYW0gPSAoPEV2ZW50RnJhZ21lbnQ+ZXZlbnRGcmFnbWVudCkuaW5wdXRzW2luZGV4XTtcblxuICAgICAgICAgICAgaWYgKCFwYXJhbS5pbmRleGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImNhbm5vdCBmaWx0ZXIgbm9uLWluZGV4ZWQgcGFyYW1ldGVyczsgbXVzdCBiZSBudWxsXCIsIChcImNvbnRyYWN0LlwiICsgcGFyYW0ubmFtZSksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRvcGljcy5wdXNoKG51bGwpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJhbS5iYXNlVHlwZSA9PT0gXCJhcnJheVwiIHx8IHBhcmFtLmJhc2VUeXBlID09PSBcInR1cGxlXCIpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiZmlsdGVyaW5nIHdpdGggdHVwbGVzIG9yIGFycmF5cyBub3Qgc3VwcG9ydGVkXCIsIChcImNvbnRyYWN0LlwiICsgcGFyYW0ubmFtZSksIHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0b3BpY3MucHVzaCh2YWx1ZS5tYXAoKHZhbHVlKSA9PiBlbmNvZGVUb3BpYyhwYXJhbSwgdmFsdWUpKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRvcGljcy5wdXNoKGVuY29kZVRvcGljKHBhcmFtLCB2YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBUcmltIG9mZiB0cmFpbGluZyBudWxsc1xuICAgICAgICB3aGlsZSAodG9waWNzLmxlbmd0aCAmJiB0b3BpY3NbdG9waWNzLmxlbmd0aCAtIDFdID09PSBudWxsKSB7XG4gICAgICAgICAgICB0b3BpY3MucG9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG9waWNzO1xuICAgIH1cblxuICAgIGVuY29kZUV2ZW50TG9nKGV2ZW50RnJhZ21lbnQ6IEV2ZW50RnJhZ21lbnQgfCBzdHJpbmcsIHZhbHVlczogUmVhZG9ubHlBcnJheTxhbnk+KTogeyBkYXRhOiBzdHJpbmcsIHRvcGljczogQXJyYXk8c3RyaW5nPiB9IHtcbiAgICAgICAgaWYgKHR5cGVvZihldmVudEZyYWdtZW50KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgZXZlbnRGcmFnbWVudCA9IHRoaXMuZ2V0RXZlbnQoZXZlbnRGcmFnbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0b3BpY3M6IEFycmF5PHN0cmluZz4gPSBbIF07XG5cbiAgICAgICAgY29uc3QgZGF0YVR5cGVzOiBBcnJheTxQYXJhbVR5cGU+ID0gWyBdO1xuICAgICAgICBjb25zdCBkYXRhVmFsdWVzOiBBcnJheTxzdHJpbmc+ID0gWyBdO1xuXG4gICAgICAgIGlmICghZXZlbnRGcmFnbWVudC5hbm9ueW1vdXMpIHtcbiAgICAgICAgICAgIHRvcGljcy5wdXNoKHRoaXMuZ2V0RXZlbnRUb3BpYyhldmVudEZyYWdtZW50KSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCAhPT0gZXZlbnRGcmFnbWVudC5pbnB1dHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiZXZlbnQgYXJndW1lbnRzL3ZhbHVlcyBtaXNtYXRjaFwiLCBcInZhbHVlc1wiLCB2YWx1ZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnRGcmFnbWVudC5pbnB1dHMuZm9yRWFjaCgocGFyYW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgICAgICBpZiAocGFyYW0uaW5kZXhlZCkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbS50eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvcGljcy5wdXNoKGlkKHZhbHVlKSlcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtLnR5cGUgPT09IFwiYnl0ZXNcIikge1xuICAgICAgICAgICAgICAgICAgICB0b3BpY3MucHVzaChrZWNjYWsyNTYodmFsdWUpKVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW0uYmFzZVR5cGUgPT09IFwidHVwbGVcIiB8fCBwYXJhbS5iYXNlVHlwZSA9PT0gXCJhcnJheVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEBUT0RPXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b3BpY3MucHVzaCh0aGlzLl9hYmlDb2Rlci5lbmNvZGUoWyBwYXJhbS50eXBlXSAsIFsgdmFsdWUgXSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YVR5cGVzLnB1c2gocGFyYW0pO1xuICAgICAgICAgICAgICAgIGRhdGFWYWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiB0aGlzLl9hYmlDb2Rlci5lbmNvZGUoZGF0YVR5cGVzICwgZGF0YVZhbHVlcyksXG4gICAgICAgICAgICB0b3BpY3M6IHRvcGljc1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIERlY29kZSBhIGZpbHRlciBmb3IgdGhlIGV2ZW50IGFuZCB0aGUgc2VhcmNoIGNyaXRlcmlhXG4gICAgZGVjb2RlRXZlbnRMb2coZXZlbnRGcmFnbWVudDogRXZlbnRGcmFnbWVudCB8IHN0cmluZywgZGF0YTogQnl0ZXNMaWtlLCB0b3BpY3M/OiBSZWFkb25seUFycmF5PHN0cmluZz4pOiBSZXN1bHQge1xuICAgICAgICBpZiAodHlwZW9mKGV2ZW50RnJhZ21lbnQpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBldmVudEZyYWdtZW50ID0gdGhpcy5nZXRFdmVudChldmVudEZyYWdtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b3BpY3MgIT0gbnVsbCAmJiAhZXZlbnRGcmFnbWVudC5hbm9ueW1vdXMpIHtcbiAgICAgICAgICAgIGxldCB0b3BpY0hhc2ggPSB0aGlzLmdldEV2ZW50VG9waWMoZXZlbnRGcmFnbWVudCk7XG4gICAgICAgICAgICBpZiAoIWlzSGV4U3RyaW5nKHRvcGljc1swXSwgMzIpIHx8IHRvcGljc1swXS50b0xvd2VyQ2FzZSgpICE9PSB0b3BpY0hhc2gpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImZyYWdtZW50L3RvcGljIG1pc21hdGNoXCIsIExvZ2dlci5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCwgeyBhcmd1bWVudDogXCJ0b3BpY3NbMF1cIiwgZXhwZWN0ZWQ6IHRvcGljSGFzaCwgdmFsdWU6IHRvcGljc1swXSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvcGljcyA9IHRvcGljcy5zbGljZSgxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBpbmRleGVkOiBBcnJheTxQYXJhbVR5cGU+ID0gW107XG4gICAgICAgIGxldCBub25JbmRleGVkOiBBcnJheTxQYXJhbVR5cGU+ID0gW107XG4gICAgICAgIGxldCBkeW5hbWljOiBBcnJheTxib29sZWFuPiA9IFtdO1xuXG4gICAgICAgIGV2ZW50RnJhZ21lbnQuaW5wdXRzLmZvckVhY2goKHBhcmFtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBhcmFtLmluZGV4ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyYW0udHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBwYXJhbS50eXBlID09PSBcImJ5dGVzXCIgfHwgcGFyYW0uYmFzZVR5cGUgPT09IFwidHVwbGVcIiB8fCBwYXJhbS5iYXNlVHlwZSA9PT0gXCJhcnJheVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ZWQucHVzaChQYXJhbVR5cGUuZnJvbU9iamVjdCh7IHR5cGU6IFwiYnl0ZXMzMlwiLCBuYW1lOiBwYXJhbS5uYW1lIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pYy5wdXNoKHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ZWQucHVzaChwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWMucHVzaChmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBub25JbmRleGVkLnB1c2gocGFyYW0pO1xuICAgICAgICAgICAgICAgIGR5bmFtaWMucHVzaChmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCByZXN1bHRJbmRleGVkID0gKHRvcGljcyAhPSBudWxsKSA/IHRoaXMuX2FiaUNvZGVyLmRlY29kZShpbmRleGVkLCBjb25jYXQodG9waWNzKSk6IG51bGw7XG4gICAgICAgIGxldCByZXN1bHROb25JbmRleGVkID0gdGhpcy5fYWJpQ29kZXIuZGVjb2RlKG5vbkluZGV4ZWQsIGRhdGEsIHRydWUpO1xuXG4gICAgICAgIGxldCByZXN1bHQ6IChBcnJheTxhbnk+ICYgeyBbIGtleTogc3RyaW5nIF06IGFueSB9KSA9IFsgXTtcbiAgICAgICAgbGV0IG5vbkluZGV4ZWRJbmRleCA9IDAsIGluZGV4ZWRJbmRleCA9IDA7XG4gICAgICAgIGV2ZW50RnJhZ21lbnQuaW5wdXRzLmZvckVhY2goKHBhcmFtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBhcmFtLmluZGV4ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0SW5kZXhlZCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBuZXcgSW5kZXhlZCh7IF9pc0luZGV4ZWQ6IHRydWUsIGhhc2g6IG51bGwgfSk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGR5bmFtaWNbaW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBuZXcgSW5kZXhlZCh7IF9pc0luZGV4ZWQ6IHRydWUsIGhhc2g6IHJlc3VsdEluZGV4ZWRbaW5kZXhlZEluZGV4KytdIH0pO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSByZXN1bHRJbmRleGVkW2luZGV4ZWRJbmRleCsrXTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2luZGV4XSA9IHJlc3VsdE5vbkluZGV4ZWRbbm9uSW5kZXhlZEluZGV4KytdO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFkZCB0aGUga2V5d29yZCBhcmd1bWVudCBpZiBuYW1lZCBhbmQgc2FmZVxuICAgICAgICAgICAgaWYgKHBhcmFtLm5hbWUgJiYgcmVzdWx0W3BhcmFtLm5hbWVdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJlc3VsdFtpbmRleF07XG5cbiAgICAgICAgICAgICAgICAvLyBNYWtlIGVycm9yIG5hbWVkIHZhbHVlcyB0aHJvdyBvbiBhY2Nlc3NcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzdWx0LCBwYXJhbS5uYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiB7IHRocm93IHdyYXBBY2Nlc3NFcnJvcihgcHJvcGVydHkgJHsgSlNPTi5zdHJpbmdpZnkocGFyYW0ubmFtZSkgfWAsIHZhbHVlKTsgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRbcGFyYW0ubmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIE1ha2UgYWxsIGVycm9yIGluZGV4ZWQgdmFsdWVzIHRocm93IG9uIGFjY2Vzc1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSByZXN1bHRbaV07XG4gICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXN1bHQsIGksIHtcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiB7IHRocm93IHdyYXBBY2Nlc3NFcnJvcihgaW5kZXggJHsgaSB9YCwgdmFsdWUpOyB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZShyZXN1bHQpO1xuICAgIH1cblxuICAgIC8vIEdpdmVuIGEgdHJhbnNhY3Rpb24sIGZpbmQgdGhlIG1hdGNoaW5nIGZ1bmN0aW9uIGZyYWdtZW50IChpZiBhbnkpIGFuZFxuICAgIC8vIGRldGVybWluZSBhbGwgaXRzIHByb3BlcnRpZXMgYW5kIGNhbGwgcGFyYW1ldGVyc1xuICAgIHBhcnNlVHJhbnNhY3Rpb24odHg6IHsgZGF0YTogc3RyaW5nLCB2YWx1ZT86IEJpZ051bWJlcmlzaCB9KTogVHJhbnNhY3Rpb25EZXNjcmlwdGlvbiB7XG4gICAgICAgIGxldCBmcmFnbWVudCA9IHRoaXMuZ2V0RnVuY3Rpb24odHguZGF0YS5zdWJzdHJpbmcoMCwgMTApLnRvTG93ZXJDYXNlKCkpXG5cbiAgICAgICAgaWYgKCFmcmFnbWVudCkgeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb25EZXNjcmlwdGlvbih7XG4gICAgICAgICAgICBhcmdzOiB0aGlzLl9hYmlDb2Rlci5kZWNvZGUoZnJhZ21lbnQuaW5wdXRzLCBcIjB4XCIgKyB0eC5kYXRhLnN1YnN0cmluZygxMCkpLFxuICAgICAgICAgICAgZnVuY3Rpb25GcmFnbWVudDogZnJhZ21lbnQsXG4gICAgICAgICAgICBuYW1lOiBmcmFnbWVudC5uYW1lLFxuICAgICAgICAgICAgc2lnbmF0dXJlOiBmcmFnbWVudC5mb3JtYXQoKSxcbiAgICAgICAgICAgIHNpZ2hhc2g6IHRoaXMuZ2V0U2lnaGFzaChmcmFnbWVudCksXG4gICAgICAgICAgICB2YWx1ZTogQmlnTnVtYmVyLmZyb20odHgudmFsdWUgfHwgXCIwXCIpLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBAVE9ET1xuICAgIC8vcGFyc2VDYWxsUmVzdWx0KGRhdGE6IEJ5dGVzTGlrZSk6ID8/XG5cbiAgICAvLyBHaXZlbiBhbiBldmVudCBsb2csIGZpbmQgdGhlIG1hdGNoaW5nIGV2ZW50IGZyYWdtZW50IChpZiBhbnkpIGFuZFxuICAgIC8vIGRldGVybWluZSBhbGwgaXRzIHByb3BlcnRpZXMgYW5kIHZhbHVlc1xuICAgIHBhcnNlTG9nKGxvZzogeyB0b3BpY3M6IEFycmF5PHN0cmluZz4sIGRhdGE6IHN0cmluZ30pOiBMb2dEZXNjcmlwdGlvbiB7XG4gICAgICAgIGxldCBmcmFnbWVudCA9IHRoaXMuZ2V0RXZlbnQobG9nLnRvcGljc1swXSk7XG5cbiAgICAgICAgaWYgKCFmcmFnbWVudCB8fCBmcmFnbWVudC5hbm9ueW1vdXMpIHsgcmV0dXJuIG51bGw7IH1cblxuICAgICAgICAvLyBAVE9ETzogSWYgYW5vbnltb3VzLCBhbmQgdGhlIG9ubHkgbWV0aG9kLCBhbmQgdGhlIGlucHV0IGNvdW50IG1hdGNoZXMsIHNob3VsZCB3ZSBwYXJzZT9cbiAgICAgICAgLy8gICAgICAgIFByb2JhYmx5IG5vdCwgYmVjYXVzZSBqdXN0IGJlY2F1c2UgaXQgaXMgdGhlIG9ubHkgZXZlbnQgaW4gdGhlIEFCSSBkb2VzXG4gICAgICAgIC8vICAgICAgICBub3QgbWVhbiB3ZSBoYXZlIHRoZSBmdWxsIEFCSTsgbWF5YmUganVzdCBhIGZyYWdtZW50P1xuXG5cbiAgICAgICByZXR1cm4gbmV3IExvZ0Rlc2NyaXB0aW9uKHtcbiAgICAgICAgICAgIGV2ZW50RnJhZ21lbnQ6IGZyYWdtZW50LFxuICAgICAgICAgICAgbmFtZTogZnJhZ21lbnQubmFtZSxcbiAgICAgICAgICAgIHNpZ25hdHVyZTogZnJhZ21lbnQuZm9ybWF0KCksXG4gICAgICAgICAgICB0b3BpYzogdGhpcy5nZXRFdmVudFRvcGljKGZyYWdtZW50KSxcbiAgICAgICAgICAgIGFyZ3M6IHRoaXMuZGVjb2RlRXZlbnRMb2coZnJhZ21lbnQsIGxvZy5kYXRhLCBsb2cudG9waWNzKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwYXJzZUVycm9yKGRhdGE6IEJ5dGVzTGlrZSk6IEVycm9yRGVzY3JpcHRpb24ge1xuICAgICAgICBjb25zdCBoZXhEYXRhID0gaGV4bGlmeShkYXRhKTtcbiAgICAgICAgbGV0IGZyYWdtZW50ID0gdGhpcy5nZXRFcnJvcihoZXhEYXRhLnN1YnN0cmluZygwLCAxMCkudG9Mb3dlckNhc2UoKSlcblxuICAgICAgICBpZiAoIWZyYWdtZW50KSB7IHJldHVybiBudWxsOyB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvckRlc2NyaXB0aW9uKHtcbiAgICAgICAgICAgIGFyZ3M6IHRoaXMuX2FiaUNvZGVyLmRlY29kZShmcmFnbWVudC5pbnB1dHMsIFwiMHhcIiArIGhleERhdGEuc3Vic3RyaW5nKDEwKSksXG4gICAgICAgICAgICBlcnJvckZyYWdtZW50OiBmcmFnbWVudCxcbiAgICAgICAgICAgIG5hbWU6IGZyYWdtZW50Lm5hbWUsXG4gICAgICAgICAgICBzaWduYXR1cmU6IGZyYWdtZW50LmZvcm1hdCgpLFxuICAgICAgICAgICAgc2lnaGFzaDogdGhpcy5nZXRTaWdoYXNoKGZyYWdtZW50KSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAvKlxuICAgIHN0YXRpYyBmcm9tKHZhbHVlOiBBcnJheTxGcmFnbWVudCB8IHN0cmluZyB8IEpzb25BYmk+IHwgc3RyaW5nIHwgSW50ZXJmYWNlKSB7XG4gICAgICAgIGlmIChJbnRlcmZhY2UuaXNJbnRlcmZhY2UodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZih2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW50ZXJmYWNlKEpTT04ucGFyc2UodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEludGVyZmFjZSh2YWx1ZSk7XG4gICAgfVxuICAgICovXG5cbiAgICBzdGF0aWMgaXNJbnRlcmZhY2UodmFsdWU6IGFueSk6IHZhbHVlIGlzIEludGVyZmFjZSB7XG4gICAgICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5faXNJbnRlcmZhY2UpO1xuICAgIH1cbn1cblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IEJpZ051bWJlciwgQmlnTnVtYmVyaXNoIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2JpZ251bWJlclwiO1xuaW1wb3J0IHsgQnl0ZXNMaWtlLCBpc0hleFN0cmluZyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgTmV0d29yayB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9uZXR3b3Jrc1wiO1xuaW1wb3J0IHsgRGVmZXJyYWJsZSwgRGVzY3JpcHRpb24sIGRlZmluZVJlYWRPbmx5LCByZXNvbHZlUHJvcGVydGllcyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBBY2Nlc3NMaXN0aXNoLCBUcmFuc2FjdGlvbiB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC90cmFuc2FjdGlvbnNcIjtcbmltcG9ydCB7IE9uY2VCbG9ja2FibGUgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvd2ViXCI7XG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRXhwb3J0ZWQgVHlwZXNcblxuXG5leHBvcnQgdHlwZSBUcmFuc2FjdGlvblJlcXVlc3QgPSB7XG4gICAgdG8/OiBzdHJpbmcsXG4gICAgZnJvbT86IHN0cmluZyxcbiAgICBub25jZT86IEJpZ051bWJlcmlzaCxcblxuICAgIGdhc0xpbWl0PzogQmlnTnVtYmVyaXNoLFxuICAgIGdhc1ByaWNlPzogQmlnTnVtYmVyaXNoLFxuXG4gICAgZGF0YT86IEJ5dGVzTGlrZSxcbiAgICB2YWx1ZT86IEJpZ051bWJlcmlzaCxcbiAgICBjaGFpbklkPzogbnVtYmVyXG5cbiAgICB0eXBlPzogbnVtYmVyO1xuICAgIGFjY2Vzc0xpc3Q/OiBBY2Nlc3NMaXN0aXNoO1xuXG4gICAgbWF4UHJpb3JpdHlGZWVQZXJHYXM/OiBCaWdOdW1iZXJpc2g7XG4gICAgbWF4RmVlUGVyR2FzPzogQmlnTnVtYmVyaXNoO1xuXG4gICAgY3VzdG9tRGF0YT86IFJlY29yZDxzdHJpbmcsIGFueT47XG4gICAgY2NpcFJlYWRFbmFibGVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2FjdGlvblJlc3BvbnNlIGV4dGVuZHMgVHJhbnNhY3Rpb24ge1xuICAgIGhhc2g6IHN0cmluZztcblxuICAgIC8vIE9ubHkgaWYgYSB0cmFuc2FjdGlvbiBoYXMgYmVlbiBtaW5lZFxuICAgIGJsb2NrTnVtYmVyPzogbnVtYmVyLFxuICAgIGJsb2NrSGFzaD86IHN0cmluZyxcbiAgICB0aW1lc3RhbXA/OiBudW1iZXIsXG5cbiAgICBjb25maXJtYXRpb25zOiBudW1iZXIsXG5cbiAgICAvLyBOb3Qgb3B0aW9uYWwgKGFzIGl0IGlzIGluIFRyYW5zYWN0aW9uKVxuICAgIGZyb206IHN0cmluZztcblxuICAgIC8vIFRoZSByYXcgdHJhbnNhY3Rpb25cbiAgICByYXc/OiBzdHJpbmcsXG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdhaXRzIHVudGlsIHRoZSB0cmFuc2FjdGlvbiBoYXMgYmVlbiBtaW5lZFxuICAgIHdhaXQ6IChjb25maXJtYXRpb25zPzogbnVtYmVyKSA9PiBQcm9taXNlPFRyYW5zYWN0aW9uUmVjZWlwdD5cbn07XG5cbmV4cG9ydCB0eXBlIEJsb2NrVGFnID0gc3RyaW5nIHwgbnVtYmVyO1xuXG5leHBvcnQgaW50ZXJmYWNlIF9CbG9jayB7XG4gICAgaGFzaDogc3RyaW5nO1xuICAgIHBhcmVudEhhc2g6IHN0cmluZztcbiAgICBudW1iZXI6IG51bWJlcjtcblxuICAgIHRpbWVzdGFtcDogbnVtYmVyO1xuICAgIG5vbmNlOiBzdHJpbmc7XG4gICAgZGlmZmljdWx0eTogbnVtYmVyO1xuICAgIF9kaWZmaWN1bHR5OiBCaWdOdW1iZXI7XG5cbiAgICBnYXNMaW1pdDogQmlnTnVtYmVyO1xuICAgIGdhc1VzZWQ6IEJpZ051bWJlcjtcblxuICAgIG1pbmVyOiBzdHJpbmc7XG4gICAgZXh0cmFEYXRhOiBzdHJpbmc7XG5cbiAgICBiYXNlRmVlUGVyR2FzPzogbnVsbCB8IEJpZ051bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCbG9jayBleHRlbmRzIF9CbG9jayB7XG4gICAgdHJhbnNhY3Rpb25zOiBBcnJheTxzdHJpbmc+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJsb2NrV2l0aFRyYW5zYWN0aW9ucyBleHRlbmRzIF9CbG9jayB7XG4gICAgdHJhbnNhY3Rpb25zOiBBcnJheTxUcmFuc2FjdGlvblJlc3BvbnNlPjtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIExvZyB7XG4gICAgYmxvY2tOdW1iZXI6IG51bWJlcjtcbiAgICBibG9ja0hhc2g6IHN0cmluZztcbiAgICB0cmFuc2FjdGlvbkluZGV4OiBudW1iZXI7XG5cbiAgICByZW1vdmVkOiBib29sZWFuO1xuXG4gICAgYWRkcmVzczogc3RyaW5nO1xuICAgIGRhdGE6IHN0cmluZztcblxuICAgIHRvcGljczogQXJyYXk8c3RyaW5nPjtcblxuICAgIHRyYW5zYWN0aW9uSGFzaDogc3RyaW5nO1xuICAgIGxvZ0luZGV4OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNhY3Rpb25SZWNlaXB0IHtcbiAgICB0bzogc3RyaW5nO1xuICAgIGZyb206IHN0cmluZztcbiAgICBjb250cmFjdEFkZHJlc3M6IHN0cmluZyxcbiAgICB0cmFuc2FjdGlvbkluZGV4OiBudW1iZXIsXG4gICAgcm9vdD86IHN0cmluZyxcbiAgICBnYXNVc2VkOiBCaWdOdW1iZXIsXG4gICAgbG9nc0Jsb29tOiBzdHJpbmcsXG4gICAgYmxvY2tIYXNoOiBzdHJpbmcsXG4gICAgdHJhbnNhY3Rpb25IYXNoOiBzdHJpbmcsXG4gICAgbG9nczogQXJyYXk8TG9nPixcbiAgICBibG9ja051bWJlcjogbnVtYmVyLFxuICAgIGNvbmZpcm1hdGlvbnM6IG51bWJlcixcbiAgICBjdW11bGF0aXZlR2FzVXNlZDogQmlnTnVtYmVyLFxuICAgIGVmZmVjdGl2ZUdhc1ByaWNlOiBCaWdOdW1iZXIsXG4gICAgYnl6YW50aXVtOiBib29sZWFuLFxuICAgIHR5cGU6IG51bWJlcjtcbiAgICBzdGF0dXM/OiBudW1iZXJcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmVlRGF0YSB7XG4gICAgbGFzdEJhc2VGZWVQZXJHYXM6IG51bGwgfCBCaWdOdW1iZXI7XG4gICAgbWF4RmVlUGVyR2FzOiBudWxsIHwgQmlnTnVtYmVyO1xuICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiBudWxsIHwgQmlnTnVtYmVyO1xuICAgIGdhc1ByaWNlOiBudWxsIHwgQmlnTnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50RmlsdGVyIHtcbiAgICBhZGRyZXNzPzogc3RyaW5nO1xuICAgIHRvcGljcz86IEFycmF5PHN0cmluZyB8IEFycmF5PHN0cmluZz4gfCBudWxsPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWx0ZXIgZXh0ZW5kcyBFdmVudEZpbHRlciB7XG4gICAgZnJvbUJsb2NrPzogQmxvY2tUYWcsXG4gICAgdG9CbG9jaz86IEJsb2NrVGFnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbHRlckJ5QmxvY2tIYXNoIGV4dGVuZHMgRXZlbnRGaWx0ZXIge1xuICAgIGJsb2NrSGFzaD86IHN0cmluZztcbn1cblxuLy9leHBvcnQgdHlwZSBDYWxsVHJhbnNhY3Rpb25hYmxlID0ge1xuLy8gICAgY2FsbCh0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb25SZXF1ZXN0KTogUHJvbWlzZTxUcmFuc2FjdGlvblJlc3BvbnNlPjtcbi8vfTtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEZvcmtFdmVudCBleHRlbmRzIERlc2NyaXB0aW9uIHtcbiAgICByZWFkb25seSBleHBpcnk6IG51bWJlcjtcblxuICAgIHJlYWRvbmx5IF9pc0ZvcmtFdmVudD86IGJvb2xlYW47XG5cbiAgICBzdGF0aWMgaXNGb3JrRXZlbnQodmFsdWU6IGFueSk6IHZhbHVlIGlzIEZvcmtFdmVudCB7XG4gICAgICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5faXNGb3JrRXZlbnQpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJsb2NrRm9ya0V2ZW50IGV4dGVuZHMgRm9ya0V2ZW50IHtcbiAgICByZWFkb25seSBibG9ja0hhc2g6IHN0cmluZztcblxuICAgIHJlYWRvbmx5IF9pc0Jsb2NrRm9ya0V2ZW50PzogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGJsb2NrSGFzaDogc3RyaW5nLCBleHBpcnk/OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKCFpc0hleFN0cmluZyhibG9ja0hhc2gsIDMyKSkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYmxvY2tIYXNoXCIsIFwiYmxvY2tIYXNoXCIsIGJsb2NrSGFzaCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICBfaXNGb3JrRXZlbnQ6IHRydWUsXG4gICAgICAgICAgICBfaXNCbG9ja0ZvcmtFdmVudDogdHJ1ZSxcbiAgICAgICAgICAgIGV4cGlyeTogKGV4cGlyeSB8fCAwKSxcbiAgICAgICAgICAgIGJsb2NrSGFzaDogYmxvY2tIYXNoXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRyYW5zYWN0aW9uRm9ya0V2ZW50IGV4dGVuZHMgRm9ya0V2ZW50IHtcbiAgICByZWFkb25seSBoYXNoOiBzdHJpbmc7XG5cbiAgICByZWFkb25seSBfaXNUcmFuc2FjdGlvbk9yZGVyRm9ya0V2ZW50PzogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGhhc2g6IHN0cmluZywgZXhwaXJ5PzogbnVtYmVyKSB7XG4gICAgICAgIGlmICghaXNIZXhTdHJpbmcoaGFzaCwgMzIpKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCB0cmFuc2FjdGlvbiBoYXNoXCIsIFwiaGFzaFwiLCBoYXNoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIF9pc0ZvcmtFdmVudDogdHJ1ZSxcbiAgICAgICAgICAgIF9pc1RyYW5zYWN0aW9uRm9ya0V2ZW50OiB0cnVlLFxuICAgICAgICAgICAgZXhwaXJ5OiAoZXhwaXJ5IHx8IDApLFxuICAgICAgICAgICAgaGFzaDogaGFzaFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvbk9yZGVyRm9ya0V2ZW50IGV4dGVuZHMgRm9ya0V2ZW50IHtcbiAgICByZWFkb25seSBiZWZvcmVIYXNoOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgYWZ0ZXJIYXNoOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihiZWZvcmVIYXNoOiBzdHJpbmcsIGFmdGVySGFzaDogc3RyaW5nLCBleHBpcnk/OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKCFpc0hleFN0cmluZyhiZWZvcmVIYXNoLCAzMikpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHRyYW5zYWN0aW9uIGhhc2hcIiwgXCJiZWZvcmVIYXNoXCIsIGJlZm9yZUhhc2gpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNIZXhTdHJpbmcoYWZ0ZXJIYXNoLCAzMikpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHRyYW5zYWN0aW9uIGhhc2hcIiwgXCJhZnRlckhhc2hcIiwgYWZ0ZXJIYXNoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIF9pc0ZvcmtFdmVudDogdHJ1ZSxcbiAgICAgICAgICAgIF9pc1RyYW5zYWN0aW9uT3JkZXJGb3JrRXZlbnQ6IHRydWUsXG4gICAgICAgICAgICBleHBpcnk6IChleHBpcnkgfHwgMCksXG4gICAgICAgICAgICBiZWZvcmVIYXNoOiBiZWZvcmVIYXNoLFxuICAgICAgICAgICAgYWZ0ZXJIYXNoOiBhZnRlckhhc2hcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgdHlwZSBFdmVudFR5cGUgPSBzdHJpbmcgfCBBcnJheTxzdHJpbmcgfCBBcnJheTxzdHJpbmc+PiB8IEV2ZW50RmlsdGVyIHwgRm9ya0V2ZW50O1xuXG5leHBvcnQgdHlwZSBMaXN0ZW5lciA9ICguLi5hcmdzOiBBcnJheTxhbnk+KSA9PiB2b2lkO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBFeHBvcnRlZCBBYnN0cmFjdHNcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQcm92aWRlciBpbXBsZW1lbnRzIE9uY2VCbG9ja2FibGUge1xuXG4gICAgLy8gTmV0d29ya1xuICAgIGFic3RyYWN0IGdldE5ldHdvcmsoKTogUHJvbWlzZTxOZXR3b3JrPjtcblxuICAgIC8vIExhdGVzdCBTdGF0ZVxuICAgIGFic3RyYWN0IGdldEJsb2NrTnVtYmVyKCk6IFByb21pc2U8bnVtYmVyPjtcbiAgICBhYnN0cmFjdCBnZXRHYXNQcmljZSgpOiBQcm9taXNlPEJpZ051bWJlcj47XG4gICAgYXN5bmMgZ2V0RmVlRGF0YSgpOiBQcm9taXNlPEZlZURhdGE+IHtcbiAgICAgICAgY29uc3QgeyBibG9jaywgZ2FzUHJpY2UgfSA9IGF3YWl0IHJlc29sdmVQcm9wZXJ0aWVzKHtcbiAgICAgICAgICAgIGJsb2NrOiB0aGlzLmdldEJsb2NrKFwibGF0ZXN0XCIpLFxuICAgICAgICAgICAgZ2FzUHJpY2U6IHRoaXMuZ2V0R2FzUHJpY2UoKS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBAVE9ETzogV2h5IGlzIHRoaXMgbm93IGZhaWxpbmcgb24gQ2FsYXZlcmFzP1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGxhc3RCYXNlRmVlUGVyR2FzID0gbnVsbCwgbWF4RmVlUGVyR2FzID0gbnVsbCwgbWF4UHJpb3JpdHlGZWVQZXJHYXMgPSBudWxsO1xuXG4gICAgICAgIGlmIChibG9jayAmJiBibG9jay5iYXNlRmVlUGVyR2FzKSB7XG4gICAgICAgICAgICAvLyBXZSBtYXkgd2FudCB0byBjb21wdXRlIHRoaXMgbW9yZSBhY2N1cmF0ZWx5IGluIHRoZSBmdXR1cmUsXG4gICAgICAgICAgICAvLyB1c2luZyB0aGUgZm9ybXVsYSBcImNoZWNrIGlmIHRoZSBiYXNlIGZlZSBpcyBjb3JyZWN0XCIuXG4gICAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTU1OVxuICAgICAgICAgICAgbGFzdEJhc2VGZWVQZXJHYXMgPSBibG9jay5iYXNlRmVlUGVyR2FzO1xuICAgICAgICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXMgPSBCaWdOdW1iZXIuZnJvbShcIjE1MDAwMDAwMDBcIik7XG4gICAgICAgICAgICBtYXhGZWVQZXJHYXMgPSBibG9jay5iYXNlRmVlUGVyR2FzLm11bCgyKS5hZGQobWF4UHJpb3JpdHlGZWVQZXJHYXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgbGFzdEJhc2VGZWVQZXJHYXMsIG1heEZlZVBlckdhcywgbWF4UHJpb3JpdHlGZWVQZXJHYXMsIGdhc1ByaWNlIH07XG4gICAgfVxuXG4gICAgLy8gQWNjb3VudFxuICAgIGFic3RyYWN0IGdldEJhbGFuY2UoYWRkcmVzc09yTmFtZTogc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+LCBibG9ja1RhZz86IEJsb2NrVGFnIHwgUHJvbWlzZTxCbG9ja1RhZz4pOiBQcm9taXNlPEJpZ051bWJlcj47XG4gICAgYWJzdHJhY3QgZ2V0VHJhbnNhY3Rpb25Db3VudChhZGRyZXNzT3JOYW1lOiBzdHJpbmcgfCBQcm9taXNlPHN0cmluZz4sIGJsb2NrVGFnPzogQmxvY2tUYWcgfCBQcm9taXNlPEJsb2NrVGFnPik6IFByb21pc2U8bnVtYmVyPjtcbiAgICBhYnN0cmFjdCBnZXRDb2RlKGFkZHJlc3NPck5hbWU6IHN0cmluZyB8IFByb21pc2U8c3RyaW5nPiwgYmxvY2tUYWc/OiBCbG9ja1RhZyB8IFByb21pc2U8QmxvY2tUYWc+KTogUHJvbWlzZTxzdHJpbmc+IDtcbiAgICBhYnN0cmFjdCBnZXRTdG9yYWdlQXQoYWRkcmVzc09yTmFtZTogc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+LCBwb3NpdGlvbjogQmlnTnVtYmVyaXNoIHwgUHJvbWlzZTxCaWdOdW1iZXJpc2g+LCBibG9ja1RhZz86IEJsb2NrVGFnIHwgUHJvbWlzZTxCbG9ja1RhZz4pOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICAvLyBFeGVjdXRpb25cbiAgICBhYnN0cmFjdCBzZW5kVHJhbnNhY3Rpb24oc2lnbmVkVHJhbnNhY3Rpb246IHN0cmluZyB8IFByb21pc2U8c3RyaW5nPik6IFByb21pc2U8VHJhbnNhY3Rpb25SZXNwb25zZT47XG4gICAgYWJzdHJhY3QgY2FsbCh0cmFuc2FjdGlvbjogRGVmZXJyYWJsZTxUcmFuc2FjdGlvblJlcXVlc3Q+LCBibG9ja1RhZz86IEJsb2NrVGFnIHwgUHJvbWlzZTxCbG9ja1RhZz4pOiBQcm9taXNlPHN0cmluZz47XG4gICAgYWJzdHJhY3QgZXN0aW1hdGVHYXModHJhbnNhY3Rpb246IERlZmVycmFibGU8VHJhbnNhY3Rpb25SZXF1ZXN0Pik6IFByb21pc2U8QmlnTnVtYmVyPjtcblxuICAgIC8vIFF1ZXJpZXNcbiAgICBhYnN0cmFjdCBnZXRCbG9jayhibG9ja0hhc2hPckJsb2NrVGFnOiBCbG9ja1RhZyB8IHN0cmluZyB8IFByb21pc2U8QmxvY2tUYWcgfCBzdHJpbmc+KTogUHJvbWlzZTxCbG9jaz47XG4gICAgYWJzdHJhY3QgZ2V0QmxvY2tXaXRoVHJhbnNhY3Rpb25zKGJsb2NrSGFzaE9yQmxvY2tUYWc6IEJsb2NrVGFnIHwgc3RyaW5nIHwgUHJvbWlzZTxCbG9ja1RhZyB8IHN0cmluZz4pOiBQcm9taXNlPEJsb2NrV2l0aFRyYW5zYWN0aW9ucz47XG4gICAgYWJzdHJhY3QgZ2V0VHJhbnNhY3Rpb24odHJhbnNhY3Rpb25IYXNoOiBzdHJpbmcpOiBQcm9taXNlPFRyYW5zYWN0aW9uUmVzcG9uc2U+O1xuICAgIGFic3RyYWN0IGdldFRyYW5zYWN0aW9uUmVjZWlwdCh0cmFuc2FjdGlvbkhhc2g6IHN0cmluZyk6IFByb21pc2U8VHJhbnNhY3Rpb25SZWNlaXB0PjtcblxuICAgIC8vIEJsb29tLWZpbHRlciBRdWVyaWVzXG4gICAgYWJzdHJhY3QgZ2V0TG9ncyhmaWx0ZXI6IEZpbHRlcik6IFByb21pc2U8QXJyYXk8TG9nPj47XG5cbiAgICAvLyBFTlNcbiAgICBhYnN0cmFjdCByZXNvbHZlTmFtZShuYW1lOiBzdHJpbmcgfCBQcm9taXNlPHN0cmluZz4pOiBQcm9taXNlPG51bGwgfCBzdHJpbmc+O1xuICAgIGFic3RyYWN0IGxvb2t1cEFkZHJlc3MoYWRkcmVzczogc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+KTogUHJvbWlzZTxudWxsIHwgc3RyaW5nPjtcblxuICAgIC8vIEV2ZW50IEVtaXR0ZXIgKGlzaClcbiAgICBhYnN0cmFjdCBvbihldmVudE5hbWU6IEV2ZW50VHlwZSwgbGlzdGVuZXI6IExpc3RlbmVyKTogUHJvdmlkZXI7XG4gICAgYWJzdHJhY3Qgb25jZShldmVudE5hbWU6IEV2ZW50VHlwZSwgbGlzdGVuZXI6IExpc3RlbmVyKTogUHJvdmlkZXI7XG4gICAgYWJzdHJhY3QgZW1pdChldmVudE5hbWU6IEV2ZW50VHlwZSwgLi4uYXJnczogQXJyYXk8YW55Pik6IGJvb2xlYW5cbiAgICBhYnN0cmFjdCBsaXN0ZW5lckNvdW50KGV2ZW50TmFtZT86IEV2ZW50VHlwZSk6IG51bWJlcjtcbiAgICBhYnN0cmFjdCBsaXN0ZW5lcnMoZXZlbnROYW1lPzogRXZlbnRUeXBlKTogQXJyYXk8TGlzdGVuZXI+O1xuICAgIGFic3RyYWN0IG9mZihldmVudE5hbWU6IEV2ZW50VHlwZSwgbGlzdGVuZXI/OiBMaXN0ZW5lcik6IFByb3ZpZGVyO1xuICAgIGFic3RyYWN0IHJlbW92ZUFsbExpc3RlbmVycyhldmVudE5hbWU/OiBFdmVudFR5cGUpOiBQcm92aWRlcjtcblxuICAgIC8vIEFsaWFzIGZvciBcIm9uXCJcbiAgICBhZGRMaXN0ZW5lcihldmVudE5hbWU6IEV2ZW50VHlwZSwgbGlzdGVuZXI6IExpc3RlbmVyKTogUHJvdmlkZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5vbihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvLyBBbGlhcyBmb3IgXCJvZmZcIlxuICAgIHJlbW92ZUxpc3RlbmVyKGV2ZW50TmFtZTogRXZlbnRUeXBlLCBsaXN0ZW5lcjogTGlzdGVuZXIpOiBQcm92aWRlciB7XG4gICAgICAgIHJldHVybiB0aGlzLm9mZihldmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvLyBAVE9ETzogVGhpcyAqY291bGQqIGJlIGltcGxlbWVudGVkIGhlcmUsIGJ1dCB3b3VsZCBwdWxsIGluIGV2ZW50cy4uLlxuICAgIGFic3RyYWN0IHdhaXRGb3JUcmFuc2FjdGlvbih0cmFuc2FjdGlvbkhhc2g6IHN0cmluZywgY29uZmlybWF0aW9ucz86IG51bWJlciwgdGltZW91dD86IG51bWJlcik6IFByb21pc2U8VHJhbnNhY3Rpb25SZWNlaXB0PjtcblxuICAgIHJlYWRvbmx5IF9pc1Byb3ZpZGVyOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGxvZ2dlci5jaGVja0Fic3RyYWN0KG5ldy50YXJnZXQsIFByb3ZpZGVyKTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfaXNQcm92aWRlclwiLCB0cnVlKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXNQcm92aWRlcih2YWx1ZTogYW55KTogdmFsdWUgaXMgUHJvdmlkZXIge1xuICAgICAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX2lzUHJvdmlkZXIpO1xuICAgIH1cblxuLypcbiAgICBzdGF0aWMgZ2V0UmVzb2x2ZXIobmV0d29yazogTmV0d29yaywgY2FsbGFibGU6IENhbGxUcmFuc2FjdGlvbmFibGUsIG5hbWVoYXNoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICAvLyBObyBFTlMuLi5cbiAgICAgICAgaWYgKCFuZXR3b3JrLmVuc0FkZHJlc3MpIHtcbiAgICAgICAgICAgIGVycm9ycy50aHJvd0Vycm9yKFxuICAgICAgICAgICAgICAgIFwibmV0d29yayBkb2VzIHN1cHBvcnQgRU5TXCIsXG4gICAgICAgICAgICAgICAgZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTixcbiAgICAgICAgICAgICAgICB7IG9wZXJhdGlvbjogXCJFTlNcIiwgbmV0d29yazogbmV0d29yay5uYW1lIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBOb3QgYSBuYW1laGFzaFxuICAgICAgICBpZiAoIWlzSGV4U3RyaW5nKG5hbWVoYXNoLCAzMikpIHtcbiAgICAgICAgICAgIGVycm9ycy50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIG5hbWUgaGFzaFwiLCBcIm5hbWVoYXNoXCIsIG5hbWVoYXNoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGtlY2NhazI1NihcInJlc29sdmVyKGJ5dGVzMzIpXCIpXG4gICAgICAgIGxldCBkYXRhID0gXCIweDAxNzhiOGJmXCIgKyBuYW1laGFzaC5zdWJzdHJpbmcoMik7XG4gICAgICAgIGxldCB0cmFuc2FjdGlvbiA9IHsgdG86IG5ldHdvcmsuZW5zQWRkcmVzcywgZGF0YTogZGF0YSB9O1xuXG4gICAgICAgIHJldHVybiBwcm92aWRlci5jYWxsKHRyYW5zYWN0aW9uKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcHJvdmlkZXIuZm9ybWF0dGVyLmNhbGxBZGRyZXNzKGRhdGEpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgcmVzb2x2ZU5hbWVoYXNoKG5ldHdvcms6IE5ldHdvcmssIGNhbGxhYmxlOiBDYWxsVHJhbnNhY3Rpb25hYmxlLCBuYW1laGFzaDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVzb2x2ZXIobmV0d29yaywgY2FsbGFibGUsIG5hbWVoYXNoKS50aGVuKChyZXNvbHZlckFkZHJlc3MpID0+IHtcbiAgICAgICAgICAgIGlmICghcmVzb2x2ZXJBZGRyZXNzKSB7IHJldHVybiBudWxsOyB9XG5cbiAgICAgICAgICAgIC8vIGtlY2NhazI1NihcImFkZHIoYnl0ZXMzMilcIilcbiAgICAgICAgICAgIGxldCBkYXRhID0gXCIweDNiM2I1N2RlXCIgKyBuYW1laGFzaChuYW1lKS5zdWJzdHJpbmcoMik7XG4gICAgICAgICAgICBsZXQgdHJhbnNhY3Rpb24gPSB7IHRvOiByZXNvbHZlckFkZHJlc3MsIGRhdGE6IGRhdGEgfTtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYWJsZS5jYWxsKHRyYW5zYWN0aW9uKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyLmNhbGxBZGRyZXNzKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSlcbiAgICB9XG4qL1xufVxuIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcImFic3RyYWN0LXByb3ZpZGVyLzUuNy4wXCI7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgQmxvY2tUYWcsIEZlZURhdGEsIFByb3ZpZGVyLCBUcmFuc2FjdGlvblJlcXVlc3QsIFRyYW5zYWN0aW9uUmVzcG9uc2UgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYWJzdHJhY3QtcHJvdmlkZXJcIjtcbmltcG9ydCB7IEJpZ051bWJlciwgQmlnTnVtYmVyaXNoIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2JpZ251bWJlclwiO1xuaW1wb3J0IHsgQnl0ZXMsIEJ5dGVzTGlrZSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgRGVmZXJyYWJsZSwgZGVmaW5lUmVhZE9ubHksIHJlc29sdmVQcm9wZXJ0aWVzLCBzaGFsbG93Q29weSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzXCI7XG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcblxuY29uc3QgYWxsb3dlZFRyYW5zYWN0aW9uS2V5czogQXJyYXk8c3RyaW5nPiA9IFtcbiAgICBcImFjY2Vzc0xpc3RcIiwgXCJjY2lwUmVhZEVuYWJsZWRcIiwgXCJjaGFpbklkXCIsIFwiY3VzdG9tRGF0YVwiLCBcImRhdGFcIiwgXCJmcm9tXCIsIFwiZ2FzTGltaXRcIiwgXCJnYXNQcmljZVwiLCBcIm1heEZlZVBlckdhc1wiLCBcIm1heFByaW9yaXR5RmVlUGVyR2FzXCIsIFwibm9uY2VcIiwgXCJ0b1wiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiXG5dO1xuXG5jb25zdCBmb3J3YXJkRXJyb3JzID0gW1xuICAgIExvZ2dlci5lcnJvcnMuSU5TVUZGSUNJRU5UX0ZVTkRTLFxuICAgIExvZ2dlci5lcnJvcnMuTk9OQ0VfRVhQSVJFRCxcbiAgICBMb2dnZXIuZXJyb3JzLlJFUExBQ0VNRU5UX1VOREVSUFJJQ0VELFxuXTtcblxuLy8gRUlQLTcxMiBUeXBlZCBEYXRhXG4vLyBTZWU6IGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtNzEyXG5cbmV4cG9ydCBpbnRlcmZhY2UgVHlwZWREYXRhRG9tYWluIHtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHZlcnNpb24/OiBzdHJpbmc7XG4gICAgY2hhaW5JZD86IEJpZ051bWJlcmlzaDtcbiAgICB2ZXJpZnlpbmdDb250cmFjdD86IHN0cmluZztcbiAgICBzYWx0PzogQnl0ZXNMaWtlO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBUeXBlZERhdGFGaWVsZCB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHR5cGU6IHN0cmluZztcbn07XG5cbi8vIFN1Yi1jbGFzc2VzIG9mIFNpZ25lciBtYXkgb3B0aW9uYWxseSBleHRlbmQgdGhpcyBpbnRlcmZhY2UgdG8gaW5kaWNhdGVcbi8vIHRoZXkgaGF2ZSBhIHByaXZhdGUga2V5IGF2YWlsYWJsZSBzeW5jaHJvbm91c2x5XG5leHBvcnQgaW50ZXJmYWNlIEV4dGVybmFsbHlPd25lZEFjY291bnQge1xuICAgIHJlYWRvbmx5IGFkZHJlc3M6IHN0cmluZztcbiAgICByZWFkb25seSBwcml2YXRlS2V5OiBzdHJpbmc7XG59XG5cbi8vIFN1Yi1DbGFzcyBOb3Rlczpcbi8vICAtIEEgU2lnbmVyIE1VU1QgYWx3YXlzIG1ha2Ugc3VyZSwgdGhhdCBpZiBwcmVzZW50LCB0aGUgXCJmcm9tXCIgZmllbGRcbi8vICAgIG1hdGNoZXMgdGhlIFNpZ25lciwgYmVmb3JlIHNlbmRpbmcgb3Igc2lnbmluZyBhIHRyYW5zYWN0aW9uXG4vLyAgLSBBIFNpZ25lciBTSE9VTEQgYWx3YXlzIHdyYXAgcHJpdmF0ZSBpbmZvcm1hdGlvbiAoc3VjaCBhcyBhIHByaXZhdGVcbi8vICAgIGtleSBvciBtbmVtb25pYykgaW4gYSBmdW5jdGlvbiwgc28gdGhhdCBjb25zb2xlLmxvZyBkb2VzIG5vdCBsZWFrXG4vLyAgICB0aGUgZGF0YVxuXG4vLyBAVE9ETzogVGhpcyBpcyBhIHRlbXBvcmFyeSBtZWFzdXJlIHRvIHByZXNlcnZlIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4vLyAgICAgICAgSW4gdjYsIHRoZSBtZXRob2Qgb24gVHlwZWREYXRhU2lnbmVyIHdpbGwgYmUgYWRkZWQgdG8gU2lnbmVyXG5leHBvcnQgaW50ZXJmYWNlIFR5cGVkRGF0YVNpZ25lciB7XG4gICAgX3NpZ25UeXBlZERhdGEoZG9tYWluOiBUeXBlZERhdGFEb21haW4sIHR5cGVzOiBSZWNvcmQ8c3RyaW5nLCBBcnJheTxUeXBlZERhdGFGaWVsZD4+LCB2YWx1ZTogUmVjb3JkPHN0cmluZywgYW55Pik6IFByb21pc2U8c3RyaW5nPjtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFNpZ25lciB7XG4gICAgcmVhZG9ubHkgcHJvdmlkZXI/OiBQcm92aWRlcjtcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBTdWItY2xhc3NlcyBNVVNUIGltcGxlbWVudCB0aGVzZVxuXG4gICAgLy8gUmV0dXJucyB0aGUgY2hlY2tzdW0gYWRkcmVzc1xuICAgIGFic3RyYWN0IGdldEFkZHJlc3MoKTogUHJvbWlzZTxzdHJpbmc+XG5cbiAgICAvLyBSZXR1cm5zIHRoZSBzaWduZWQgcHJlZml4ZWQtbWVzc2FnZS4gVGhpcyBNVVNUIHRyZWF0OlxuICAgIC8vIC0gQnl0ZXMgYXMgYSBiaW5hcnkgbWVzc2FnZVxuICAgIC8vIC0gc3RyaW5nIGFzIGEgVVRGOC1tZXNzYWdlXG4gICAgLy8gaS5lLiBcIjB4MTIzNFwiIGlzIGEgU0lYICg2KSBieXRlIHN0cmluZywgTk9UIDIgYnl0ZXMgb2YgZGF0YVxuICAgIGFic3RyYWN0IHNpZ25NZXNzYWdlKG1lc3NhZ2U6IEJ5dGVzIHwgc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgLy8gU2lnbnMgYSB0cmFuc2FjdGlvbiBhbmQgcmV0dXJucyB0aGUgZnVsbHkgc2VyaWFsaXplZCwgc2lnbmVkIHRyYW5zYWN0aW9uLlxuICAgIC8vIFRoZSBFWEFDVCB0cmFuc2FjdGlvbiBNVVNUIGJlIHNpZ25lZCwgYW5kIE5PIGFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBiZSBhZGRlZC5cbiAgICAvLyAtIFRoaXMgTUFZIHRocm93IGlmIHNpZ25pbmcgdHJhbnNhY3Rpb25zIGlzIG5vdCBzdXBwb3J0cywgYnV0IGlmXG4gICAgLy8gICBpdCBkb2VzLCBzZW50VHJhbnNhY3Rpb24gTVVTVCBiZSBvdmVycmlkZGVuLlxuICAgIGFic3RyYWN0IHNpZ25UcmFuc2FjdGlvbih0cmFuc2FjdGlvbjogRGVmZXJyYWJsZTxUcmFuc2FjdGlvblJlcXVlc3Q+KTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gICAgLy8gUmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgU2lnbmVyLCBjb25uZWN0ZWQgdG8gcHJvdmlkZXIuXG4gICAgLy8gVGhpcyBNQVkgdGhyb3cgaWYgY2hhbmdpbmcgcHJvdmlkZXJzIGlzIG5vdCBzdXBwb3J0ZWQuXG4gICAgYWJzdHJhY3QgY29ubmVjdChwcm92aWRlcjogUHJvdmlkZXIpOiBTaWduZXI7XG5cbiAgICByZWFkb25seSBfaXNTaWduZXI6IGJvb2xlYW47XG5cblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBTdWItY2xhc3NlcyBNVVNUIGNhbGwgc3VwZXJcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgbG9nZ2VyLmNoZWNrQWJzdHJhY3QobmV3LnRhcmdldCwgU2lnbmVyKTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfaXNTaWduZXJcIiwgdHJ1ZSk7XG4gICAgfVxuXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gU3ViLWNsYXNzZXMgTUFZIG92ZXJyaWRlIHRoZXNlXG5cbiAgICBhc3luYyBnZXRCYWxhbmNlKGJsb2NrVGFnPzogQmxvY2tUYWcpOiBQcm9taXNlPEJpZ051bWJlcj4ge1xuICAgICAgICB0aGlzLl9jaGVja1Byb3ZpZGVyKFwiZ2V0QmFsYW5jZVwiKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvdmlkZXIuZ2V0QmFsYW5jZSh0aGlzLmdldEFkZHJlc3MoKSwgYmxvY2tUYWcpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFRyYW5zYWN0aW9uQ291bnQoYmxvY2tUYWc/OiBCbG9ja1RhZyk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgICAgIHRoaXMuX2NoZWNrUHJvdmlkZXIoXCJnZXRUcmFuc2FjdGlvbkNvdW50XCIpO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm92aWRlci5nZXRUcmFuc2FjdGlvbkNvdW50KHRoaXMuZ2V0QWRkcmVzcygpLCBibG9ja1RhZyk7XG4gICAgfVxuXG4gICAgLy8gUG9wdWxhdGVzIFwiZnJvbVwiIGlmIHVuc3BlY2lmaWVkLCBhbmQgZXN0aW1hdGVzIHRoZSBnYXMgZm9yIHRoZSB0cmFuc2FjdGlvblxuICAgIGFzeW5jIGVzdGltYXRlR2FzKHRyYW5zYWN0aW9uOiBEZWZlcnJhYmxlPFRyYW5zYWN0aW9uUmVxdWVzdD4pOiBQcm9taXNlPEJpZ051bWJlcj4ge1xuICAgICAgICB0aGlzLl9jaGVja1Byb3ZpZGVyKFwiZXN0aW1hdGVHYXNcIik7XG4gICAgICAgIGNvbnN0IHR4ID0gYXdhaXQgcmVzb2x2ZVByb3BlcnRpZXModGhpcy5jaGVja1RyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3ZpZGVyLmVzdGltYXRlR2FzKHR4KTtcbiAgICB9XG5cbiAgICAvLyBQb3B1bGF0ZXMgXCJmcm9tXCIgaWYgdW5zcGVjaWZpZWQsIGFuZCBjYWxscyB3aXRoIHRoZSB0cmFuc2FjdGlvblxuICAgIGFzeW5jIGNhbGwodHJhbnNhY3Rpb246IERlZmVycmFibGU8VHJhbnNhY3Rpb25SZXF1ZXN0PiwgYmxvY2tUYWc/OiBCbG9ja1RhZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHRoaXMuX2NoZWNrUHJvdmlkZXIoXCJjYWxsXCIpO1xuICAgICAgICBjb25zdCB0eCA9IGF3YWl0IHJlc29sdmVQcm9wZXJ0aWVzKHRoaXMuY2hlY2tUcmFuc2FjdGlvbih0cmFuc2FjdGlvbikpO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm92aWRlci5jYWxsKHR4LCBibG9ja1RhZyk7XG4gICAgfVxuXG4gICAgLy8gUG9wdWxhdGVzIGFsbCBmaWVsZHMgaW4gYSB0cmFuc2FjdGlvbiwgc2lnbnMgaXQgYW5kIHNlbmRzIGl0IHRvIHRoZSBuZXR3b3JrXG4gICAgYXN5bmMgc2VuZFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uOiBEZWZlcnJhYmxlPFRyYW5zYWN0aW9uUmVxdWVzdD4pOiBQcm9taXNlPFRyYW5zYWN0aW9uUmVzcG9uc2U+IHtcbiAgICAgICAgdGhpcy5fY2hlY2tQcm92aWRlcihcInNlbmRUcmFuc2FjdGlvblwiKTtcbiAgICAgICAgY29uc3QgdHggPSBhd2FpdCB0aGlzLnBvcHVsYXRlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pO1xuICAgICAgICBjb25zdCBzaWduZWRUeCA9IGF3YWl0IHRoaXMuc2lnblRyYW5zYWN0aW9uKHR4KTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvdmlkZXIuc2VuZFRyYW5zYWN0aW9uKHNpZ25lZFR4KTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRDaGFpbklkKCk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgICAgIHRoaXMuX2NoZWNrUHJvdmlkZXIoXCJnZXRDaGFpbklkXCIpO1xuICAgICAgICBjb25zdCBuZXR3b3JrID0gYXdhaXQgdGhpcy5wcm92aWRlci5nZXROZXR3b3JrKCk7XG4gICAgICAgIHJldHVybiBuZXR3b3JrLmNoYWluSWQ7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0R2FzUHJpY2UoKTogUHJvbWlzZTxCaWdOdW1iZXI+IHtcbiAgICAgICAgdGhpcy5fY2hlY2tQcm92aWRlcihcImdldEdhc1ByaWNlXCIpO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm92aWRlci5nZXRHYXNQcmljZSgpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEZlZURhdGEoKTogUHJvbWlzZTxGZWVEYXRhPiB7XG4gICAgICAgIHRoaXMuX2NoZWNrUHJvdmlkZXIoXCJnZXRGZWVEYXRhXCIpO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm92aWRlci5nZXRGZWVEYXRhKCk7XG4gICAgfVxuXG5cbiAgICBhc3luYyByZXNvbHZlTmFtZShuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICB0aGlzLl9jaGVja1Byb3ZpZGVyKFwicmVzb2x2ZU5hbWVcIik7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3ZpZGVyLnJlc29sdmVOYW1lKG5hbWUpO1xuICAgIH1cblxuXG5cbiAgICAvLyBDaGVja3MgYSB0cmFuc2FjdGlvbiBkb2VzIG5vdCBjb250YWluIGludmFsaWQga2V5cyBhbmQgaWZcbiAgICAvLyBubyBcImZyb21cIiBpcyBwcm92aWRlZCwgcG9wdWxhdGVzIGl0LlxuICAgIC8vIC0gZG9lcyBOT1QgcmVxdWlyZSBhIHByb3ZpZGVyXG4gICAgLy8gLSBhZGRzIFwiZnJvbVwiIGlzIG5vdCBwcmVzZW50XG4gICAgLy8gLSByZXR1cm5zIGEgQ09QWSAoc2FmZSB0byBtdXRhdGUgdGhlIHJlc3VsdClcbiAgICAvLyBCeSBkZWZhdWx0IGNhbGxlZCBmcm9tOiAob3ZlcnJpZGluZyB0aGVzZSBwcmV2ZW50cyBpdClcbiAgICAvLyAgIC0gY2FsbFxuICAgIC8vICAgLSBlc3RpbWF0ZUdhc1xuICAgIC8vICAgLSBwb3B1bGF0ZVRyYW5zYWN0aW9uIChhbmQgdGhlcmVmb3Igc2VuZFRyYW5zYWN0aW9uKVxuICAgIGNoZWNrVHJhbnNhY3Rpb24odHJhbnNhY3Rpb246IERlZmVycmFibGU8VHJhbnNhY3Rpb25SZXF1ZXN0Pik6IERlZmVycmFibGU8VHJhbnNhY3Rpb25SZXF1ZXN0PiB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICBpZiAoYWxsb3dlZFRyYW5zYWN0aW9uS2V5cy5pbmRleE9mKGtleSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgdHJhbnNhY3Rpb24ga2V5OiBcIiArIGtleSwgXCJ0cmFuc2FjdGlvblwiLCB0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0eCA9IHNoYWxsb3dDb3B5KHRyYW5zYWN0aW9uKTtcblxuICAgICAgICBpZiAodHguZnJvbSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0eC5mcm9tID0gdGhpcy5nZXRBZGRyZXNzKCk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBhbnkgcHJvdmlkZWQgYWRkcmVzcyBtYXRjaGVzIHRoaXMgc2lnbmVyXG4gICAgICAgICAgICB0eC5mcm9tID0gUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZSh0eC5mcm9tKSxcbiAgICAgICAgICAgICAgICB0aGlzLmdldEFkZHJlc3MoKVxuICAgICAgICAgICAgXSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdFswXS50b0xvd2VyQ2FzZSgpICE9PSByZXN1bHRbMV0udG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiZnJvbSBhZGRyZXNzIG1pc21hdGNoXCIsIFwidHJhbnNhY3Rpb25cIiwgdHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0WzBdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHg7XG4gICAgfVxuXG4gICAgLy8gUG9wdWxhdGVzIEFMTCBrZXlzIGZvciBhIHRyYW5zYWN0aW9uIGFuZCBjaGVja3MgdGhhdCBcImZyb21cIiBtYXRjaGVzXG4gICAgLy8gdGhpcyBTaWduZXIuIFNob3VsZCBiZSB1c2VkIGJ5IHNlbmRUcmFuc2FjdGlvbiBidXQgTk9UIGJ5IHNpZ25UcmFuc2FjdGlvbi5cbiAgICAvLyBCeSBkZWZhdWx0IGNhbGxlZCBmcm9tOiAob3ZlcnJpZGluZyB0aGVzZSBwcmV2ZW50cyBpdClcbiAgICAvLyAgIC0gc2VuZFRyYW5zYWN0aW9uXG4gICAgLy9cbiAgICAvLyBOb3RlczpcbiAgICAvLyAgLSBXZSBhbGxvdyBnYXNQcmljZSBmb3IgRUlQLTE1NTkgYXMgbG9uZyBhcyBpdCBtYXRjaGVzIG1heEZlZVBlckdhc1xuICAgIGFzeW5jIHBvcHVsYXRlVHJhbnNhY3Rpb24odHJhbnNhY3Rpb246IERlZmVycmFibGU8VHJhbnNhY3Rpb25SZXF1ZXN0Pik6IFByb21pc2U8VHJhbnNhY3Rpb25SZXF1ZXN0PiB7XG5cbiAgICAgICAgY29uc3QgdHg6IERlZmVycmFibGU8VHJhbnNhY3Rpb25SZXF1ZXN0PiA9IGF3YWl0IHJlc29sdmVQcm9wZXJ0aWVzKHRoaXMuY2hlY2tUcmFuc2FjdGlvbih0cmFuc2FjdGlvbikpXG5cbiAgICAgICAgaWYgKHR4LnRvICE9IG51bGwpIHtcbiAgICAgICAgICAgIHR4LnRvID0gUHJvbWlzZS5yZXNvbHZlKHR4LnRvKS50aGVuKGFzeW5jICh0bykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0byA9PSBudWxsKSB7IHJldHVybiBudWxsOyB9XG4gICAgICAgICAgICAgICAgY29uc3QgYWRkcmVzcyA9IGF3YWl0IHRoaXMucmVzb2x2ZU5hbWUodG8pO1xuICAgICAgICAgICAgICAgIGlmIChhZGRyZXNzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInByb3ZpZGVkIEVOUyBuYW1lIHJlc29sdmVzIHRvIG51bGxcIiwgXCJ0eC50b1wiLCB0byk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhZGRyZXNzO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFByZXZlbnQgdGhpcyBlcnJvciBmcm9tIGNhdXNpbmcgYW4gVW5oYW5kbGVkUHJvbWlzZUV4Y2VwdGlvblxuICAgICAgICAgICAgdHgudG8uY2F0Y2goKGVycm9yKSA9PiB7ICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERvIG5vdCBhbGxvdyBtaXhpbmcgcHJlLWVpcC0xNTU5IGFuZCBlaXAtMTU1OSBwcm9wZXJ0aWVzXG4gICAgICAgIGNvbnN0IGhhc0VpcDE1NTkgPSAodHgubWF4RmVlUGVyR2FzICE9IG51bGwgfHwgdHgubWF4UHJpb3JpdHlGZWVQZXJHYXMgIT0gbnVsbCk7XG4gICAgICAgIGlmICh0eC5nYXNQcmljZSAhPSBudWxsICYmICh0eC50eXBlID09PSAyIHx8IGhhc0VpcDE1NTkpKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiZWlwLTE1NTkgdHJhbnNhY3Rpb24gZG8gbm90IHN1cHBvcnQgZ2FzUHJpY2VcIiwgXCJ0cmFuc2FjdGlvblwiLCB0cmFuc2FjdGlvbik7XG4gICAgICAgIH0gZWxzZSBpZiAoKHR4LnR5cGUgPT09IDAgfHwgdHgudHlwZSA9PT0gMSkgJiYgaGFzRWlwMTU1OSkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInByZS1laXAtMTU1OSB0cmFuc2FjdGlvbiBkbyBub3Qgc3VwcG9ydCBtYXhGZWVQZXJHYXMvbWF4UHJpb3JpdHlGZWVQZXJHYXNcIiwgXCJ0cmFuc2FjdGlvblwiLCB0cmFuc2FjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKHR4LnR5cGUgPT09IDIgfHwgdHgudHlwZSA9PSBudWxsKSAmJiAodHgubWF4RmVlUGVyR2FzICE9IG51bGwgJiYgdHgubWF4UHJpb3JpdHlGZWVQZXJHYXMgIT0gbnVsbCkpIHtcbiAgICAgICAgICAgIC8vIEZ1bGx5LWZvcm1lZCBFSVAtMTU1OSB0cmFuc2FjdGlvbiAoc2tpcCBnZXRGZWVEYXRhKVxuICAgICAgICAgICAgdHgudHlwZSA9IDI7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0eC50eXBlID09PSAwIHx8IHR4LnR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgIC8vIEV4cGxpY2l0IExlZ2FjeSBvciBFSVAtMjkzMCB0cmFuc2FjdGlvblxuXG4gICAgICAgICAgICAvLyBQb3B1bGF0ZSBtaXNzaW5nIGdhc1ByaWNlXG4gICAgICAgICAgICBpZiAodHguZ2FzUHJpY2UgPT0gbnVsbCkgeyB0eC5nYXNQcmljZSA9IHRoaXMuZ2V0R2FzUHJpY2UoKTsgfVxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gZ2V0IGZlZSBkYXRhIHRvIGRldGVybWluZSB0aGluZ3NcbiAgICAgICAgICAgIGNvbnN0IGZlZURhdGEgPSBhd2FpdCB0aGlzLmdldEZlZURhdGEoKTtcblxuICAgICAgICAgICAgaWYgKHR4LnR5cGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gYXV0by1kZXRlY3QgdGhlIGludGVuZGVkIHR5cGUgb2YgdGhpcyB0cmFuc2FjdGlvbi4uLlxuXG4gICAgICAgICAgICAgICAgaWYgKGZlZURhdGEubWF4RmVlUGVyR2FzICE9IG51bGwgJiYgZmVlRGF0YS5tYXhQcmlvcml0eUZlZVBlckdhcyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBuZXR3b3JrIHN1cHBvcnRzIEVJUC0xNTU5IVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZ3JhZGUgdHJhbnNhY3Rpb24gZnJvbSBudWxsIHRvIGVpcC0xNTU5XG4gICAgICAgICAgICAgICAgICAgIHR4LnR5cGUgPSAyO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eC5nYXNQcmljZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2luZyBsZWdhY3kgZ2FzUHJpY2UgcHJvcGVydHkgb24gYW4gZWlwLTE1NTkgbmV0d29yayxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHVzZSBnYXNQcmljZSBhcyBib3RoIGZlZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnYXNQcmljZSA9IHR4Lmdhc1ByaWNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHR4Lmdhc1ByaWNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHgubWF4RmVlUGVyR2FzID0gZ2FzUHJpY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eC5tYXhQcmlvcml0eUZlZVBlckdhcyA9IGdhc1ByaWNlO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQb3B1bGF0ZSBtaXNzaW5nIGZlZSBkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHgubWF4RmVlUGVyR2FzID09IG51bGwpIHsgdHgubWF4RmVlUGVyR2FzID0gZmVlRGF0YS5tYXhGZWVQZXJHYXM7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eC5tYXhQcmlvcml0eUZlZVBlckdhcyA9PSBudWxsKSB7IHR4Lm1heFByaW9yaXR5RmVlUGVyR2FzID0gZmVlRGF0YS5tYXhQcmlvcml0eUZlZVBlckdhczsgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZlZURhdGEuZ2FzUHJpY2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBOZXR3b3JrIGRvZXNuJ3Qgc3VwcG9ydCBFSVAtMTU1OS4uLlxuXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uLmJ1dCB0aGV5IGFyZSB0cnlpbmcgdG8gdXNlIEVJUC0xNTU5IHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0VpcDE1NTkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwibmV0d29yayBkb2VzIG5vdCBzdXBwb3J0IEVJUC0xNTU5XCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcInBvcHVsYXRlVHJhbnNhY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBQb3B1bGF0ZSBtaXNzaW5nIGZlZSBkYXRhXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eC5nYXNQcmljZSA9PSBudWxsKSB7IHR4Lmdhc1ByaWNlID0gZmVlRGF0YS5nYXNQcmljZTsgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEV4cGxpY2l0bHkgc2V0IHVudHlwZWQgdHJhbnNhY3Rpb24gdG8gbGVnYWN5XG4gICAgICAgICAgICAgICAgICAgIHR4LnR5cGUgPSAwO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2V0RmVlRGF0YSBoYXMgZmFpbGVkIHVzLlxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImZhaWxlZCB0byBnZXQgY29uc2lzdGVudCBmZWUgZGF0YVwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcInNpZ25lci5nZXRGZWVEYXRhXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR4LnR5cGUgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAvLyBFeHBsaWNpdGx5IHVzaW5nIEVJUC0xNTU5XG5cbiAgICAgICAgICAgICAgICAvLyBQb3B1bGF0ZSBtaXNzaW5nIGZlZSBkYXRhXG4gICAgICAgICAgICAgICAgaWYgKHR4Lm1heEZlZVBlckdhcyA9PSBudWxsKSB7IHR4Lm1heEZlZVBlckdhcyA9IGZlZURhdGEubWF4RmVlUGVyR2FzOyB9XG4gICAgICAgICAgICAgICAgaWYgKHR4Lm1heFByaW9yaXR5RmVlUGVyR2FzID09IG51bGwpIHsgdHgubWF4UHJpb3JpdHlGZWVQZXJHYXMgPSBmZWVEYXRhLm1heFByaW9yaXR5RmVlUGVyR2FzOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHgubm9uY2UgPT0gbnVsbCkgeyB0eC5ub25jZSA9IHRoaXMuZ2V0VHJhbnNhY3Rpb25Db3VudChcInBlbmRpbmdcIik7IH1cblxuICAgICAgICBpZiAodHguZ2FzTGltaXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdHguZ2FzTGltaXQgPSB0aGlzLmVzdGltYXRlR2FzKHR4KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZm9yd2FyZEVycm9ycy5pbmRleE9mKGVycm9yLmNvZGUpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKFwiY2Fubm90IGVzdGltYXRlIGdhczsgdHJhbnNhY3Rpb24gbWF5IGZhaWwgb3IgbWF5IHJlcXVpcmUgbWFudWFsIGdhcyBsaW1pdFwiLCBMb2dnZXIuZXJyb3JzLlVOUFJFRElDVEFCTEVfR0FTX0xJTUlULCB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgdHg6IHR4XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eC5jaGFpbklkID09IG51bGwpIHtcbiAgICAgICAgICAgIHR4LmNoYWluSWQgPSB0aGlzLmdldENoYWluSWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHR4LmNoYWluSWQgPSBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHR4LmNoYWluSWQpLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q2hhaW5JZCgpXG4gICAgICAgICAgICBdKS50aGVuKChyZXN1bHRzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdHNbMV0gIT09IDAgJiYgcmVzdWx0c1swXSAhPT0gcmVzdWx0c1sxXSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiY2hhaW5JZCBhZGRyZXNzIG1pc21hdGNoXCIsIFwidHJhbnNhY3Rpb25cIiwgdHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0c1swXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IHJlc29sdmVQcm9wZXJ0aWVzKHR4KTtcbiAgICB9XG5cblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBTdWItY2xhc3NlcyBTSE9VTEQgbGVhdmUgdGhlc2UgYWxvbmVcblxuICAgIF9jaGVja1Byb3ZpZGVyKG9wZXJhdGlvbj86IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMucHJvdmlkZXIpIHsgbG9nZ2VyLnRocm93RXJyb3IoXCJtaXNzaW5nIHByb3ZpZGVyXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICBvcGVyYXRpb246IChvcGVyYXRpb24gfHwgXCJfY2hlY2tQcm92aWRlclwiKSB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBpc1NpZ25lcih2YWx1ZTogYW55KTogdmFsdWUgaXMgU2lnbmVyIHtcbiAgICAgICAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9pc1NpZ25lcik7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVm9pZFNpZ25lciBleHRlbmRzIFNpZ25lciBpbXBsZW1lbnRzIFR5cGVkRGF0YVNpZ25lciB7XG4gICAgcmVhZG9ubHkgYWRkcmVzczogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoYWRkcmVzczogc3RyaW5nLCBwcm92aWRlcj86IFByb3ZpZGVyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiYWRkcmVzc1wiLCBhZGRyZXNzKTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJwcm92aWRlclwiLCBwcm92aWRlciB8fCBudWxsKTtcbiAgICB9XG5cbiAgICBnZXRBZGRyZXNzKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5hZGRyZXNzKTtcbiAgICB9XG5cbiAgICBfZmFpbChtZXNzYWdlOiBzdHJpbmcsIG9wZXJhdGlvbjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IobWVzc2FnZSwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHsgb3BlcmF0aW9uOiBvcGVyYXRpb24gfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNpZ25NZXNzYWdlKG1lc3NhZ2U6IEJ5dGVzIHwgc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZhaWwoXCJWb2lkU2lnbmVyIGNhbm5vdCBzaWduIG1lc3NhZ2VzXCIsIFwic2lnbk1lc3NhZ2VcIik7XG4gICAgfVxuXG4gICAgc2lnblRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uOiBEZWZlcnJhYmxlPFRyYW5zYWN0aW9uUmVxdWVzdD4pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmFpbChcIlZvaWRTaWduZXIgY2Fubm90IHNpZ24gdHJhbnNhY3Rpb25zXCIsIFwic2lnblRyYW5zYWN0aW9uXCIpO1xuICAgIH1cblxuICAgIF9zaWduVHlwZWREYXRhKGRvbWFpbjogVHlwZWREYXRhRG9tYWluLCB0eXBlczogUmVjb3JkPHN0cmluZywgQXJyYXk8VHlwZWREYXRhRmllbGQ+PiwgdmFsdWU6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmFpbChcIlZvaWRTaWduZXIgY2Fubm90IHNpZ24gdHlwZWQgZGF0YVwiLCBcInNpZ25UeXBlZERhdGFcIik7XG4gICAgfVxuXG4gICAgY29ubmVjdChwcm92aWRlcjogUHJvdmlkZXIpOiBWb2lkU2lnbmVyIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWb2lkU2lnbmVyKHRoaXMuYWRkcmVzcywgcHJvdmlkZXIpO1xuICAgIH1cbn1cblxuIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcImFic3RyYWN0LXNpZ25lci81LjcuMFwiO1xuIiwidmFyIGhhc2ggPSBleHBvcnRzO1xuXG5oYXNoLnV0aWxzID0gcmVxdWlyZSgnLi9oYXNoL3V0aWxzJyk7XG5oYXNoLmNvbW1vbiA9IHJlcXVpcmUoJy4vaGFzaC9jb21tb24nKTtcbmhhc2guc2hhID0gcmVxdWlyZSgnLi9oYXNoL3NoYScpO1xuaGFzaC5yaXBlbWQgPSByZXF1aXJlKCcuL2hhc2gvcmlwZW1kJyk7XG5oYXNoLmhtYWMgPSByZXF1aXJlKCcuL2hhc2gvaG1hYycpO1xuXG4vLyBQcm94eSBoYXNoIGZ1bmN0aW9ucyB0byB0aGUgbWFpbiBvYmplY3Rcbmhhc2guc2hhMSA9IGhhc2guc2hhLnNoYTE7XG5oYXNoLnNoYTI1NiA9IGhhc2guc2hhLnNoYTI1Njtcbmhhc2guc2hhMjI0ID0gaGFzaC5zaGEuc2hhMjI0O1xuaGFzaC5zaGEzODQgPSBoYXNoLnNoYS5zaGEzODQ7XG5oYXNoLnNoYTUxMiA9IGhhc2guc2hhLnNoYTUxMjtcbmhhc2gucmlwZW1kMTYwID0gaGFzaC5yaXBlbWQucmlwZW1kMTYwO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBhc3NlcnQ7XG5cbmZ1bmN0aW9uIGFzc2VydCh2YWwsIG1zZykge1xuICBpZiAoIXZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG59XG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGFzc2VydEVxdWFsKGwsIHIsIG1zZykge1xuICBpZiAobCAhPSByKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgKCdBc3NlcnRpb24gZmFpbGVkOiAnICsgbCArICcgIT0gJyArIHIpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IGV4cG9ydHM7XG5cbmZ1bmN0aW9uIHRvQXJyYXkobXNnLCBlbmMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkobXNnKSlcbiAgICByZXR1cm4gbXNnLnNsaWNlKCk7XG4gIGlmICghbXNnKVxuICAgIHJldHVybiBbXTtcbiAgdmFyIHJlcyA9IFtdO1xuICBpZiAodHlwZW9mIG1zZyAhPT0gJ3N0cmluZycpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICAgIHJlc1tpXSA9IG1zZ1tpXSB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICBpZiAoZW5jID09PSAnaGV4Jykge1xuICAgIG1zZyA9IG1zZy5yZXBsYWNlKC9bXmEtejAtOV0rL2lnLCAnJyk7XG4gICAgaWYgKG1zZy5sZW5ndGggJSAyICE9PSAwKVxuICAgICAgbXNnID0gJzAnICsgbXNnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSAyKVxuICAgICAgcmVzLnB1c2gocGFyc2VJbnQobXNnW2ldICsgbXNnW2kgKyAxXSwgMTYpKTtcbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBtc2cuY2hhckNvZGVBdChpKTtcbiAgICAgIHZhciBoaSA9IGMgPj4gODtcbiAgICAgIHZhciBsbyA9IGMgJiAweGZmO1xuICAgICAgaWYgKGhpKVxuICAgICAgICByZXMucHVzaChoaSwgbG8pO1xuICAgICAgZWxzZVxuICAgICAgICByZXMucHVzaChsbyk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG51dGlscy50b0FycmF5ID0gdG9BcnJheTtcblxuZnVuY3Rpb24gemVybzIod29yZCkge1xuICBpZiAod29yZC5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuICcwJyArIHdvcmQ7XG4gIGVsc2VcbiAgICByZXR1cm4gd29yZDtcbn1cbnV0aWxzLnplcm8yID0gemVybzI7XG5cbmZ1bmN0aW9uIHRvSGV4KG1zZykge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKVxuICAgIHJlcyArPSB6ZXJvMihtc2dbaV0udG9TdHJpbmcoMTYpKTtcbiAgcmV0dXJuIHJlcztcbn1cbnV0aWxzLnRvSGV4ID0gdG9IZXg7XG5cbnV0aWxzLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShhcnIsIGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdG9IZXgoYXJyKTtcbiAgZWxzZVxuICAgIHJldHVybiBhcnI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSBleHBvcnRzO1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBtaW5Bc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG52YXIgbWluVXRpbHMgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtY3J5cHRvLXV0aWxzJyk7XG5cbnV0aWxzLmFzc2VydCA9IG1pbkFzc2VydDtcbnV0aWxzLnRvQXJyYXkgPSBtaW5VdGlscy50b0FycmF5O1xudXRpbHMuemVybzIgPSBtaW5VdGlscy56ZXJvMjtcbnV0aWxzLnRvSGV4ID0gbWluVXRpbHMudG9IZXg7XG51dGlscy5lbmNvZGUgPSBtaW5VdGlscy5lbmNvZGU7XG5cbi8vIFJlcHJlc2VudCBudW0gaW4gYSB3LU5BRiBmb3JtXG5mdW5jdGlvbiBnZXROQUYobnVtLCB3LCBiaXRzKSB7XG4gIHZhciBuYWYgPSBuZXcgQXJyYXkoTWF0aC5tYXgobnVtLmJpdExlbmd0aCgpLCBiaXRzKSArIDEpO1xuICBuYWYuZmlsbCgwKTtcblxuICB2YXIgd3MgPSAxIDw8ICh3ICsgMSk7XG4gIHZhciBrID0gbnVtLmNsb25lKCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYWYubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgejtcbiAgICB2YXIgbW9kID0gay5hbmRsbih3cyAtIDEpO1xuICAgIGlmIChrLmlzT2RkKCkpIHtcbiAgICAgIGlmIChtb2QgPiAod3MgPj4gMSkgLSAxKVxuICAgICAgICB6ID0gKHdzID4+IDEpIC0gbW9kO1xuICAgICAgZWxzZVxuICAgICAgICB6ID0gbW9kO1xuICAgICAgay5pc3Vibih6KTtcbiAgICB9IGVsc2Uge1xuICAgICAgeiA9IDA7XG4gICAgfVxuXG4gICAgbmFmW2ldID0gejtcbiAgICBrLml1c2hybigxKTtcbiAgfVxuXG4gIHJldHVybiBuYWY7XG59XG51dGlscy5nZXROQUYgPSBnZXROQUY7XG5cbi8vIFJlcHJlc2VudCBrMSwgazIgaW4gYSBKb2ludCBTcGFyc2UgRm9ybVxuZnVuY3Rpb24gZ2V0SlNGKGsxLCBrMikge1xuICB2YXIganNmID0gW1xuICAgIFtdLFxuICAgIFtdLFxuICBdO1xuXG4gIGsxID0gazEuY2xvbmUoKTtcbiAgazIgPSBrMi5jbG9uZSgpO1xuICB2YXIgZDEgPSAwO1xuICB2YXIgZDIgPSAwO1xuICB2YXIgbTg7XG4gIHdoaWxlIChrMS5jbXBuKC1kMSkgPiAwIHx8IGsyLmNtcG4oLWQyKSA+IDApIHtcbiAgICAvLyBGaXJzdCBwaGFzZVxuICAgIHZhciBtMTQgPSAoazEuYW5kbG4oMykgKyBkMSkgJiAzO1xuICAgIHZhciBtMjQgPSAoazIuYW5kbG4oMykgKyBkMikgJiAzO1xuICAgIGlmIChtMTQgPT09IDMpXG4gICAgICBtMTQgPSAtMTtcbiAgICBpZiAobTI0ID09PSAzKVxuICAgICAgbTI0ID0gLTE7XG4gICAgdmFyIHUxO1xuICAgIGlmICgobTE0ICYgMSkgPT09IDApIHtcbiAgICAgIHUxID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgbTggPSAoazEuYW5kbG4oNykgKyBkMSkgJiA3O1xuICAgICAgaWYgKChtOCA9PT0gMyB8fCBtOCA9PT0gNSkgJiYgbTI0ID09PSAyKVxuICAgICAgICB1MSA9IC1tMTQ7XG4gICAgICBlbHNlXG4gICAgICAgIHUxID0gbTE0O1xuICAgIH1cbiAgICBqc2ZbMF0ucHVzaCh1MSk7XG5cbiAgICB2YXIgdTI7XG4gICAgaWYgKChtMjQgJiAxKSA9PT0gMCkge1xuICAgICAgdTIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBtOCA9IChrMi5hbmRsbig3KSArIGQyKSAmIDc7XG4gICAgICBpZiAoKG04ID09PSAzIHx8IG04ID09PSA1KSAmJiBtMTQgPT09IDIpXG4gICAgICAgIHUyID0gLW0yNDtcbiAgICAgIGVsc2VcbiAgICAgICAgdTIgPSBtMjQ7XG4gICAgfVxuICAgIGpzZlsxXS5wdXNoKHUyKTtcblxuICAgIC8vIFNlY29uZCBwaGFzZVxuICAgIGlmICgyICogZDEgPT09IHUxICsgMSlcbiAgICAgIGQxID0gMSAtIGQxO1xuICAgIGlmICgyICogZDIgPT09IHUyICsgMSlcbiAgICAgIGQyID0gMSAtIGQyO1xuICAgIGsxLml1c2hybigxKTtcbiAgICBrMi5pdXNocm4oMSk7XG4gIH1cblxuICByZXR1cm4ganNmO1xufVxudXRpbHMuZ2V0SlNGID0gZ2V0SlNGO1xuXG5mdW5jdGlvbiBjYWNoZWRQcm9wZXJ0eShvYmosIG5hbWUsIGNvbXB1dGVyKSB7XG4gIHZhciBrZXkgPSAnXycgKyBuYW1lO1xuICBvYmoucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gY2FjaGVkUHJvcGVydHkoKSB7XG4gICAgcmV0dXJuIHRoaXNba2V5XSAhPT0gdW5kZWZpbmVkID8gdGhpc1trZXldIDpcbiAgICAgIHRoaXNba2V5XSA9IGNvbXB1dGVyLmNhbGwodGhpcyk7XG4gIH07XG59XG51dGlscy5jYWNoZWRQcm9wZXJ0eSA9IGNhY2hlZFByb3BlcnR5O1xuXG5mdW5jdGlvbiBwYXJzZUJ5dGVzKGJ5dGVzKSB7XG4gIHJldHVybiB0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnID8gdXRpbHMudG9BcnJheShieXRlcywgJ2hleCcpIDpcbiAgICBieXRlcztcbn1cbnV0aWxzLnBhcnNlQnl0ZXMgPSBwYXJzZUJ5dGVzO1xuXG5mdW5jdGlvbiBpbnRGcm9tTEUoYnl0ZXMpIHtcbiAgcmV0dXJuIG5ldyBCTihieXRlcywgJ2hleCcsICdsZScpO1xufVxudXRpbHMuaW50RnJvbUxFID0gaW50RnJvbUxFO1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGdldE5BRiA9IHV0aWxzLmdldE5BRjtcbnZhciBnZXRKU0YgPSB1dGlscy5nZXRKU0Y7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBCYXNlQ3VydmUodHlwZSwgY29uZikge1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnAgPSBuZXcgQk4oY29uZi5wLCAxNik7XG5cbiAgLy8gVXNlIE1vbnRnb21lcnksIHdoZW4gdGhlcmUgaXMgbm8gZmFzdCByZWR1Y3Rpb24gZm9yIHRoZSBwcmltZVxuICB0aGlzLnJlZCA9IGNvbmYucHJpbWUgPyBCTi5yZWQoY29uZi5wcmltZSkgOiBCTi5tb250KHRoaXMucCk7XG5cbiAgLy8gVXNlZnVsIGZvciBtYW55IGN1cnZlc1xuICB0aGlzLnplcm8gPSBuZXcgQk4oMCkudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLm9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMudHdvID0gbmV3IEJOKDIpLnRvUmVkKHRoaXMucmVkKTtcblxuICAvLyBDdXJ2ZSBjb25maWd1cmF0aW9uLCBvcHRpb25hbFxuICB0aGlzLm4gPSBjb25mLm4gJiYgbmV3IEJOKGNvbmYubiwgMTYpO1xuICB0aGlzLmcgPSBjb25mLmcgJiYgdGhpcy5wb2ludEZyb21KU09OKGNvbmYuZywgY29uZi5nUmVkKTtcblxuICAvLyBUZW1wb3JhcnkgYXJyYXlzXG4gIHRoaXMuX3duYWZUMSA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fd25hZlQyID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl93bmFmVDMgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX3duYWZUNCA9IG5ldyBBcnJheSg0KTtcblxuICB0aGlzLl9iaXRMZW5ndGggPSB0aGlzLm4gPyB0aGlzLm4uYml0TGVuZ3RoKCkgOiAwO1xuXG4gIC8vIEdlbmVyYWxpemVkIEdyZWcgTWF4d2VsbCdzIHRyaWNrXG4gIHZhciBhZGp1c3RDb3VudCA9IHRoaXMubiAmJiB0aGlzLnAuZGl2KHRoaXMubik7XG4gIGlmICghYWRqdXN0Q291bnQgfHwgYWRqdXN0Q291bnQuY21wbigxMDApID4gMCkge1xuICAgIHRoaXMucmVkTiA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbWF4d2VsbFRyaWNrID0gdHJ1ZTtcbiAgICB0aGlzLnJlZE4gPSB0aGlzLm4udG9SZWQodGhpcy5yZWQpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VDdXJ2ZTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5fZml4ZWROYWZNdWwgPSBmdW5jdGlvbiBfZml4ZWROYWZNdWwocCwgaykge1xuICBhc3NlcnQocC5wcmVjb21wdXRlZCk7XG4gIHZhciBkb3VibGVzID0gcC5fZ2V0RG91YmxlcygpO1xuXG4gIHZhciBuYWYgPSBnZXROQUYoaywgMSwgdGhpcy5fYml0TGVuZ3RoKTtcbiAgdmFyIEkgPSAoMSA8PCAoZG91Ymxlcy5zdGVwICsgMSkpIC0gKGRvdWJsZXMuc3RlcCAlIDIgPT09IDAgPyAyIDogMSk7XG4gIEkgLz0gMztcblxuICAvLyBUcmFuc2xhdGUgaW50byBtb3JlIHdpbmRvd2VkIGZvcm1cbiAgdmFyIHJlcHIgPSBbXTtcbiAgdmFyIGo7XG4gIHZhciBuYWZXO1xuICBmb3IgKGogPSAwOyBqIDwgbmFmLmxlbmd0aDsgaiArPSBkb3VibGVzLnN0ZXApIHtcbiAgICBuYWZXID0gMDtcbiAgICBmb3IgKHZhciBsID0gaiArIGRvdWJsZXMuc3RlcCAtIDE7IGwgPj0gajsgbC0tKVxuICAgICAgbmFmVyA9IChuYWZXIDw8IDEpICsgbmFmW2xdO1xuICAgIHJlcHIucHVzaChuYWZXKTtcbiAgfVxuXG4gIHZhciBhID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIHZhciBiID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIGZvciAodmFyIGkgPSBJOyBpID4gMDsgaS0tKSB7XG4gICAgZm9yIChqID0gMDsgaiA8IHJlcHIubGVuZ3RoOyBqKyspIHtcbiAgICAgIG5hZlcgPSByZXByW2pdO1xuICAgICAgaWYgKG5hZlcgPT09IGkpXG4gICAgICAgIGIgPSBiLm1peGVkQWRkKGRvdWJsZXMucG9pbnRzW2pdKTtcbiAgICAgIGVsc2UgaWYgKG5hZlcgPT09IC1pKVxuICAgICAgICBiID0gYi5taXhlZEFkZChkb3VibGVzLnBvaW50c1tqXS5uZWcoKSk7XG4gICAgfVxuICAgIGEgPSBhLmFkZChiKTtcbiAgfVxuICByZXR1cm4gYS50b1AoKTtcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUuX3duYWZNdWwgPSBmdW5jdGlvbiBfd25hZk11bChwLCBrKSB7XG4gIHZhciB3ID0gNDtcblxuICAvLyBQcmVjb21wdXRlIHdpbmRvd1xuICB2YXIgbmFmUG9pbnRzID0gcC5fZ2V0TkFGUG9pbnRzKHcpO1xuICB3ID0gbmFmUG9pbnRzLnduZDtcbiAgdmFyIHduZCA9IG5hZlBvaW50cy5wb2ludHM7XG5cbiAgLy8gR2V0IE5BRiBmb3JtXG4gIHZhciBuYWYgPSBnZXROQUYoaywgdywgdGhpcy5fYml0TGVuZ3RoKTtcblxuICAvLyBBZGQgYHRoaXNgKihOKzEpIGZvciBldmVyeSB3LU5BRiBpbmRleFxuICB2YXIgYWNjID0gdGhpcy5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gIGZvciAodmFyIGkgPSBuYWYubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAvLyBDb3VudCB6ZXJvZXNcbiAgICBmb3IgKHZhciBsID0gMDsgaSA+PSAwICYmIG5hZltpXSA9PT0gMDsgaS0tKVxuICAgICAgbCsrO1xuICAgIGlmIChpID49IDApXG4gICAgICBsKys7XG4gICAgYWNjID0gYWNjLmRibHAobCk7XG5cbiAgICBpZiAoaSA8IDApXG4gICAgICBicmVhaztcbiAgICB2YXIgeiA9IG5hZltpXTtcbiAgICBhc3NlcnQoeiAhPT0gMCk7XG4gICAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpIHtcbiAgICAgIC8vIEogKy0gUFxuICAgICAgaWYgKHogPiAwKVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQod25kWyh6IC0gMSkgPj4gMV0pO1xuICAgICAgZWxzZVxuICAgICAgICBhY2MgPSBhY2MubWl4ZWRBZGQod25kWygteiAtIDEpID4+IDFdLm5lZygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSiArLSBKXG4gICAgICBpZiAoeiA+IDApXG4gICAgICAgIGFjYyA9IGFjYy5hZGQod25kWyh6IC0gMSkgPj4gMV0pO1xuICAgICAgZWxzZVxuICAgICAgICBhY2MgPSBhY2MuYWRkKHduZFsoLXogLSAxKSA+PiAxXS5uZWcoKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwLnR5cGUgPT09ICdhZmZpbmUnID8gYWNjLnRvUCgpIDogYWNjO1xufTtcblxuQmFzZUN1cnZlLnByb3RvdHlwZS5fd25hZk11bEFkZCA9IGZ1bmN0aW9uIF93bmFmTXVsQWRkKGRlZlcsXG4gIHBvaW50cyxcbiAgY29lZmZzLFxuICBsZW4sXG4gIGphY29iaWFuUmVzdWx0KSB7XG4gIHZhciB3bmRXaWR0aCA9IHRoaXMuX3duYWZUMTtcbiAgdmFyIHduZCA9IHRoaXMuX3duYWZUMjtcbiAgdmFyIG5hZiA9IHRoaXMuX3duYWZUMztcblxuICAvLyBGaWxsIGFsbCBhcnJheXNcbiAgdmFyIG1heCA9IDA7XG4gIHZhciBpO1xuICB2YXIgajtcbiAgdmFyIHA7XG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHAgPSBwb2ludHNbaV07XG4gICAgdmFyIG5hZlBvaW50cyA9IHAuX2dldE5BRlBvaW50cyhkZWZXKTtcbiAgICB3bmRXaWR0aFtpXSA9IG5hZlBvaW50cy53bmQ7XG4gICAgd25kW2ldID0gbmFmUG9pbnRzLnBvaW50cztcbiAgfVxuXG4gIC8vIENvbWIgc21hbGwgd2luZG93IE5BRnNcbiAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAxOyBpIC09IDIpIHtcbiAgICB2YXIgYSA9IGkgLSAxO1xuICAgIHZhciBiID0gaTtcbiAgICBpZiAod25kV2lkdGhbYV0gIT09IDEgfHwgd25kV2lkdGhbYl0gIT09IDEpIHtcbiAgICAgIG5hZlthXSA9IGdldE5BRihjb2VmZnNbYV0sIHduZFdpZHRoW2FdLCB0aGlzLl9iaXRMZW5ndGgpO1xuICAgICAgbmFmW2JdID0gZ2V0TkFGKGNvZWZmc1tiXSwgd25kV2lkdGhbYl0sIHRoaXMuX2JpdExlbmd0aCk7XG4gICAgICBtYXggPSBNYXRoLm1heChuYWZbYV0ubGVuZ3RoLCBtYXgpO1xuICAgICAgbWF4ID0gTWF0aC5tYXgobmFmW2JdLmxlbmd0aCwgbWF4KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBjb21iID0gW1xuICAgICAgcG9pbnRzW2FdLCAvKiAxICovXG4gICAgICBudWxsLCAvKiAzICovXG4gICAgICBudWxsLCAvKiA1ICovXG4gICAgICBwb2ludHNbYl0sIC8qIDcgKi9cbiAgICBdO1xuXG4gICAgLy8gVHJ5IHRvIGF2b2lkIFByb2plY3RpdmUgcG9pbnRzLCBpZiBwb3NzaWJsZVxuICAgIGlmIChwb2ludHNbYV0ueS5jbXAocG9pbnRzW2JdLnkpID09PSAwKSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLmFkZChwb2ludHNbYl0pO1xuICAgICAgY29tYlsyXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH0gZWxzZSBpZiAocG9pbnRzW2FdLnkuY21wKHBvaW50c1tiXS55LnJlZE5lZygpKSA9PT0gMCkge1xuICAgICAgY29tYlsxXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0pO1xuICAgICAgY29tYlsyXSA9IHBvaW50c1thXS5hZGQocG9pbnRzW2JdLm5lZygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tYlsxXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0pO1xuICAgICAgY29tYlsyXSA9IHBvaW50c1thXS50b0ooKS5taXhlZEFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IFtcbiAgICAgIC0zLCAvKiAtMSAtMSAqL1xuICAgICAgLTEsIC8qIC0xIDAgKi9cbiAgICAgIC01LCAvKiAtMSAxICovXG4gICAgICAtNywgLyogMCAtMSAqL1xuICAgICAgMCwgLyogMCAwICovXG4gICAgICA3LCAvKiAwIDEgKi9cbiAgICAgIDUsIC8qIDEgLTEgKi9cbiAgICAgIDEsIC8qIDEgMCAqL1xuICAgICAgMywgIC8qIDEgMSAqL1xuICAgIF07XG5cbiAgICB2YXIganNmID0gZ2V0SlNGKGNvZWZmc1thXSwgY29lZmZzW2JdKTtcbiAgICBtYXggPSBNYXRoLm1heChqc2ZbMF0ubGVuZ3RoLCBtYXgpO1xuICAgIG5hZlthXSA9IG5ldyBBcnJheShtYXgpO1xuICAgIG5hZltiXSA9IG5ldyBBcnJheShtYXgpO1xuICAgIGZvciAoaiA9IDA7IGogPCBtYXg7IGorKykge1xuICAgICAgdmFyIGphID0ganNmWzBdW2pdIHwgMDtcbiAgICAgIHZhciBqYiA9IGpzZlsxXVtqXSB8IDA7XG5cbiAgICAgIG5hZlthXVtqXSA9IGluZGV4WyhqYSArIDEpICogMyArIChqYiArIDEpXTtcbiAgICAgIG5hZltiXVtqXSA9IDA7XG4gICAgICB3bmRbYV0gPSBjb21iO1xuICAgIH1cbiAgfVxuXG4gIHZhciBhY2MgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgdmFyIHRtcCA9IHRoaXMuX3duYWZUNDtcbiAgZm9yIChpID0gbWF4OyBpID49IDA7IGktLSkge1xuICAgIHZhciBrID0gMDtcblxuICAgIHdoaWxlIChpID49IDApIHtcbiAgICAgIHZhciB6ZXJvID0gdHJ1ZTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBsZW47IGorKykge1xuICAgICAgICB0bXBbal0gPSBuYWZbal1baV0gfCAwO1xuICAgICAgICBpZiAodG1wW2pdICE9PSAwKVxuICAgICAgICAgIHplcm8gPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghemVybylcbiAgICAgICAgYnJlYWs7XG4gICAgICBrKys7XG4gICAgICBpLS07XG4gICAgfVxuICAgIGlmIChpID49IDApXG4gICAgICBrKys7XG4gICAgYWNjID0gYWNjLmRibHAoayk7XG4gICAgaWYgKGkgPCAwKVxuICAgICAgYnJlYWs7XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIHZhciB6ID0gdG1wW2pdO1xuICAgICAgcDtcbiAgICAgIGlmICh6ID09PSAwKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGVsc2UgaWYgKHogPiAwKVxuICAgICAgICBwID0gd25kW2pdWyh6IC0gMSkgPj4gMV07XG4gICAgICBlbHNlIGlmICh6IDwgMClcbiAgICAgICAgcCA9IHduZFtqXVsoLXogLSAxKSA+PiAxXS5uZWcoKTtcblxuICAgICAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZChwKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYWNjID0gYWNjLmFkZChwKTtcbiAgICB9XG4gIH1cbiAgLy8gWmVyb2lmeSByZWZlcmVuY2VzXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICB3bmRbaV0gPSBudWxsO1xuXG4gIGlmIChqYWNvYmlhblJlc3VsdClcbiAgICByZXR1cm4gYWNjO1xuICBlbHNlXG4gICAgcmV0dXJuIGFjYy50b1AoKTtcbn07XG5cbmZ1bmN0aW9uIEJhc2VQb2ludChjdXJ2ZSwgdHlwZSkge1xuICB0aGlzLmN1cnZlID0gY3VydmU7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMucHJlY29tcHV0ZWQgPSBudWxsO1xufVxuQmFzZUN1cnZlLkJhc2VQb2ludCA9IEJhc2VQb2ludDtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKC8qb3RoZXIqLykge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKCkge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS52YWxpZGF0ZSh0aGlzKTtcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUuZGVjb2RlUG9pbnQgPSBmdW5jdGlvbiBkZWNvZGVQb2ludChieXRlcywgZW5jKSB7XG4gIGJ5dGVzID0gdXRpbHMudG9BcnJheShieXRlcywgZW5jKTtcblxuICB2YXIgbGVuID0gdGhpcy5wLmJ5dGVMZW5ndGgoKTtcblxuICAvLyB1bmNvbXByZXNzZWQsIGh5YnJpZC1vZGQsIGh5YnJpZC1ldmVuXG4gIGlmICgoYnl0ZXNbMF0gPT09IDB4MDQgfHwgYnl0ZXNbMF0gPT09IDB4MDYgfHwgYnl0ZXNbMF0gPT09IDB4MDcpICYmXG4gICAgICBieXRlcy5sZW5ndGggLSAxID09PSAyICogbGVuKSB7XG4gICAgaWYgKGJ5dGVzWzBdID09PSAweDA2KVxuICAgICAgYXNzZXJ0KGJ5dGVzW2J5dGVzLmxlbmd0aCAtIDFdICUgMiA9PT0gMCk7XG4gICAgZWxzZSBpZiAoYnl0ZXNbMF0gPT09IDB4MDcpXG4gICAgICBhc3NlcnQoYnl0ZXNbYnl0ZXMubGVuZ3RoIC0gMV0gJSAyID09PSAxKTtcblxuICAgIHZhciByZXMgPSAgdGhpcy5wb2ludChieXRlcy5zbGljZSgxLCAxICsgbGVuKSxcbiAgICAgIGJ5dGVzLnNsaWNlKDEgKyBsZW4sIDEgKyAyICogbGVuKSk7XG5cbiAgICByZXR1cm4gcmVzO1xuICB9IGVsc2UgaWYgKChieXRlc1swXSA9PT0gMHgwMiB8fCBieXRlc1swXSA9PT0gMHgwMykgJiZcbiAgICAgICAgICAgICAgYnl0ZXMubGVuZ3RoIC0gMSA9PT0gbGVuKSB7XG4gICAgcmV0dXJuIHRoaXMucG9pbnRGcm9tWChieXRlcy5zbGljZSgxLCAxICsgbGVuKSwgYnl0ZXNbMF0gPT09IDB4MDMpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwb2ludCBmb3JtYXQnKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZW5jb2RlQ29tcHJlc3NlZCA9IGZ1bmN0aW9uIGVuY29kZUNvbXByZXNzZWQoZW5jKSB7XG4gIHJldHVybiB0aGlzLmVuY29kZShlbmMsIHRydWUpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZW5jb2RlID0gZnVuY3Rpb24gX2VuY29kZShjb21wYWN0KSB7XG4gIHZhciBsZW4gPSB0aGlzLmN1cnZlLnAuYnl0ZUxlbmd0aCgpO1xuICB2YXIgeCA9IHRoaXMuZ2V0WCgpLnRvQXJyYXkoJ2JlJywgbGVuKTtcblxuICBpZiAoY29tcGFjdClcbiAgICByZXR1cm4gWyB0aGlzLmdldFkoKS5pc0V2ZW4oKSA/IDB4MDIgOiAweDAzIF0uY29uY2F0KHgpO1xuXG4gIHJldHVybiBbIDB4MDQgXS5jb25jYXQoeCwgdGhpcy5nZXRZKCkudG9BcnJheSgnYmUnLCBsZW4pKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGVuYywgY29tcGFjdCkge1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHRoaXMuX2VuY29kZShjb21wYWN0KSwgZW5jKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUucHJlY29tcHV0ZSA9IGZ1bmN0aW9uIHByZWNvbXB1dGUocG93ZXIpIHtcbiAgaWYgKHRoaXMucHJlY29tcHV0ZWQpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgdmFyIHByZWNvbXB1dGVkID0ge1xuICAgIGRvdWJsZXM6IG51bGwsXG4gICAgbmFmOiBudWxsLFxuICAgIGJldGE6IG51bGwsXG4gIH07XG4gIHByZWNvbXB1dGVkLm5hZiA9IHRoaXMuX2dldE5BRlBvaW50cyg4KTtcbiAgcHJlY29tcHV0ZWQuZG91YmxlcyA9IHRoaXMuX2dldERvdWJsZXMoNCwgcG93ZXIpO1xuICBwcmVjb21wdXRlZC5iZXRhID0gdGhpcy5fZ2V0QmV0YSgpO1xuICB0aGlzLnByZWNvbXB1dGVkID0gcHJlY29tcHV0ZWQ7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9oYXNEb3VibGVzID0gZnVuY3Rpb24gX2hhc0RvdWJsZXMoaykge1xuICBpZiAoIXRoaXMucHJlY29tcHV0ZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBkb3VibGVzID0gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO1xuICBpZiAoIWRvdWJsZXMpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiBkb3VibGVzLnBvaW50cy5sZW5ndGggPj0gTWF0aC5jZWlsKChrLmJpdExlbmd0aCgpICsgMSkgLyBkb3VibGVzLnN0ZXApO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0RG91YmxlcyA9IGZ1bmN0aW9uIF9nZXREb3VibGVzKHN0ZXAsIHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkICYmIHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcylcbiAgICByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO1xuXG4gIHZhciBkb3VibGVzID0gWyB0aGlzIF07XG4gIHZhciBhY2MgPSB0aGlzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvd2VyOyBpICs9IHN0ZXApIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN0ZXA7IGorKylcbiAgICAgIGFjYyA9IGFjYy5kYmwoKTtcbiAgICBkb3VibGVzLnB1c2goYWNjKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0ZXA6IHN0ZXAsXG4gICAgcG9pbnRzOiBkb3VibGVzLFxuICB9O1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0TkFGUG9pbnRzID0gZnVuY3Rpb24gX2dldE5BRlBvaW50cyh3bmQpIHtcbiAgaWYgKHRoaXMucHJlY29tcHV0ZWQgJiYgdGhpcy5wcmVjb21wdXRlZC5uYWYpXG4gICAgcmV0dXJuIHRoaXMucHJlY29tcHV0ZWQubmFmO1xuXG4gIHZhciByZXMgPSBbIHRoaXMgXTtcbiAgdmFyIG1heCA9ICgxIDw8IHduZCkgLSAxO1xuICB2YXIgZGJsID0gbWF4ID09PSAxID8gbnVsbCA6IHRoaXMuZGJsKCk7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgbWF4OyBpKyspXG4gICAgcmVzW2ldID0gcmVzW2kgLSAxXS5hZGQoZGJsKTtcbiAgcmV0dXJuIHtcbiAgICB3bmQ6IHduZCxcbiAgICBwb2ludHM6IHJlcyxcbiAgfTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuX2dldEJldGEgPSBmdW5jdGlvbiBfZ2V0QmV0YSgpIHtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLmRibHAgPSBmdW5jdGlvbiBkYmxwKGspIHtcbiAgdmFyIHIgPSB0aGlzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGs7IGkrKylcbiAgICByID0gci5kYmwoKTtcbiAgcmV0dXJuIHI7XG59O1xuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xuXG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBTaG9ydEN1cnZlKGNvbmYpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdzaG9ydCcsIGNvbmYpO1xuXG4gIHRoaXMuYSA9IG5ldyBCTihjb25mLmEsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYiA9IG5ldyBCTihjb25mLmIsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMudGludiA9IHRoaXMudHdvLnJlZEludm0oKTtcblxuICB0aGlzLnplcm9BID0gdGhpcy5hLmZyb21SZWQoKS5jbXBuKDApID09PSAwO1xuICB0aGlzLnRocmVlQSA9IHRoaXMuYS5mcm9tUmVkKCkuc3ViKHRoaXMucCkuY21wbigtMykgPT09IDA7XG5cbiAgLy8gSWYgdGhlIGN1cnZlIGlzIGVuZG9tb3JwaGljLCBwcmVjYWxjdWxhdGUgYmV0YSBhbmQgbGFtYmRhXG4gIHRoaXMuZW5kbyA9IHRoaXMuX2dldEVuZG9tb3JwaGlzbShjb25mKTtcbiAgdGhpcy5fZW5kb1duYWZUMSA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fZW5kb1duYWZUMiA9IG5ldyBBcnJheSg0KTtcbn1cbmluaGVyaXRzKFNob3J0Q3VydmUsIEJhc2UpO1xubW9kdWxlLmV4cG9ydHMgPSBTaG9ydEN1cnZlO1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZ2V0RW5kb21vcnBoaXNtID0gZnVuY3Rpb24gX2dldEVuZG9tb3JwaGlzbShjb25mKSB7XG4gIC8vIE5vIGVmZmljaWVudCBlbmRvbW9ycGhpc21cbiAgaWYgKCF0aGlzLnplcm9BIHx8ICF0aGlzLmcgfHwgIXRoaXMubiB8fCB0aGlzLnAubW9kbigzKSAhPT0gMSlcbiAgICByZXR1cm47XG5cbiAgLy8gQ29tcHV0ZSBiZXRhIGFuZCBsYW1iZGEsIHRoYXQgbGFtYmRhICogUCA9IChiZXRhICogUHg7IFB5KVxuICB2YXIgYmV0YTtcbiAgdmFyIGxhbWJkYTtcbiAgaWYgKGNvbmYuYmV0YSkge1xuICAgIGJldGEgPSBuZXcgQk4oY29uZi5iZXRhLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB9IGVsc2Uge1xuICAgIHZhciBiZXRhcyA9IHRoaXMuX2dldEVuZG9Sb290cyh0aGlzLnApO1xuICAgIC8vIENob29zZSB0aGUgc21hbGxlc3QgYmV0YVxuICAgIGJldGEgPSBiZXRhc1swXS5jbXAoYmV0YXNbMV0pIDwgMCA/IGJldGFzWzBdIDogYmV0YXNbMV07XG4gICAgYmV0YSA9IGJldGEudG9SZWQodGhpcy5yZWQpO1xuICB9XG4gIGlmIChjb25mLmxhbWJkYSkge1xuICAgIGxhbWJkYSA9IG5ldyBCTihjb25mLmxhbWJkYSwgMTYpO1xuICB9IGVsc2Uge1xuICAgIC8vIENob29zZSB0aGUgbGFtYmRhIHRoYXQgaXMgbWF0Y2hpbmcgc2VsZWN0ZWQgYmV0YVxuICAgIHZhciBsYW1iZGFzID0gdGhpcy5fZ2V0RW5kb1Jvb3RzKHRoaXMubik7XG4gICAgaWYgKHRoaXMuZy5tdWwobGFtYmRhc1swXSkueC5jbXAodGhpcy5nLngucmVkTXVsKGJldGEpKSA9PT0gMCkge1xuICAgICAgbGFtYmRhID0gbGFtYmRhc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFtYmRhID0gbGFtYmRhc1sxXTtcbiAgICAgIGFzc2VydCh0aGlzLmcubXVsKGxhbWJkYSkueC5jbXAodGhpcy5nLngucmVkTXVsKGJldGEpKSA9PT0gMCk7XG4gICAgfVxuICB9XG5cbiAgLy8gR2V0IGJhc2lzIHZlY3RvcnMsIHVzZWQgZm9yIGJhbGFuY2VkIGxlbmd0aC10d28gcmVwcmVzZW50YXRpb25cbiAgdmFyIGJhc2lzO1xuICBpZiAoY29uZi5iYXNpcykge1xuICAgIGJhc2lzID0gY29uZi5iYXNpcy5tYXAoZnVuY3Rpb24odmVjKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhOiBuZXcgQk4odmVjLmEsIDE2KSxcbiAgICAgICAgYjogbmV3IEJOKHZlYy5iLCAxNiksXG4gICAgICB9O1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGJhc2lzID0gdGhpcy5fZ2V0RW5kb0Jhc2lzKGxhbWJkYSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJldGE6IGJldGEsXG4gICAgbGFtYmRhOiBsYW1iZGEsXG4gICAgYmFzaXM6IGJhc2lzLFxuICB9O1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9Sb290cyA9IGZ1bmN0aW9uIF9nZXRFbmRvUm9vdHMobnVtKSB7XG4gIC8vIEZpbmQgcm9vdHMgb2YgZm9yIHheMiArIHggKyAxIGluIEZcbiAgLy8gUm9vdCA9ICgtMSArLSBTcXJ0KC0zKSkgLyAyXG4gIC8vXG4gIHZhciByZWQgPSBudW0gPT09IHRoaXMucCA/IHRoaXMucmVkIDogQk4ubW9udChudW0pO1xuICB2YXIgdGludiA9IG5ldyBCTigyKS50b1JlZChyZWQpLnJlZEludm0oKTtcbiAgdmFyIG50aW52ID0gdGludi5yZWROZWcoKTtcblxuICB2YXIgcyA9IG5ldyBCTigzKS50b1JlZChyZWQpLnJlZE5lZygpLnJlZFNxcnQoKS5yZWRNdWwodGludik7XG5cbiAgdmFyIGwxID0gbnRpbnYucmVkQWRkKHMpLmZyb21SZWQoKTtcbiAgdmFyIGwyID0gbnRpbnYucmVkU3ViKHMpLmZyb21SZWQoKTtcbiAgcmV0dXJuIFsgbDEsIGwyIF07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZ2V0RW5kb0Jhc2lzID0gZnVuY3Rpb24gX2dldEVuZG9CYXNpcyhsYW1iZGEpIHtcbiAgLy8gYXByeFNxcnQgPj0gc3FydCh0aGlzLm4pXG4gIHZhciBhcHJ4U3FydCA9IHRoaXMubi51c2hybihNYXRoLmZsb29yKHRoaXMubi5iaXRMZW5ndGgoKSAvIDIpKTtcblxuICAvLyAzLjc0XG4gIC8vIFJ1biBFR0NELCB1bnRpbCByKEwgKyAxKSA8IGFwcnhTcXJ0XG4gIHZhciB1ID0gbGFtYmRhO1xuICB2YXIgdiA9IHRoaXMubi5jbG9uZSgpO1xuICB2YXIgeDEgPSBuZXcgQk4oMSk7XG4gIHZhciB5MSA9IG5ldyBCTigwKTtcbiAgdmFyIHgyID0gbmV3IEJOKDApO1xuICB2YXIgeTIgPSBuZXcgQk4oMSk7XG5cbiAgLy8gTk9URTogYWxsIHZlY3RvcnMgYXJlIHJvb3RzIG9mOiBhICsgYiAqIGxhbWJkYSA9IDAgKG1vZCBuKVxuICB2YXIgYTA7XG4gIHZhciBiMDtcbiAgLy8gRmlyc3QgdmVjdG9yXG4gIHZhciBhMTtcbiAgdmFyIGIxO1xuICAvLyBTZWNvbmQgdmVjdG9yXG4gIHZhciBhMjtcbiAgdmFyIGIyO1xuXG4gIHZhciBwcmV2UjtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcjtcbiAgdmFyIHg7XG4gIHdoaWxlICh1LmNtcG4oMCkgIT09IDApIHtcbiAgICB2YXIgcSA9IHYuZGl2KHUpO1xuICAgIHIgPSB2LnN1YihxLm11bCh1KSk7XG4gICAgeCA9IHgyLnN1YihxLm11bCh4MSkpO1xuICAgIHZhciB5ID0geTIuc3ViKHEubXVsKHkxKSk7XG5cbiAgICBpZiAoIWExICYmIHIuY21wKGFwcnhTcXJ0KSA8IDApIHtcbiAgICAgIGEwID0gcHJldlIubmVnKCk7XG4gICAgICBiMCA9IHgxO1xuICAgICAgYTEgPSByLm5lZygpO1xuICAgICAgYjEgPSB4O1xuICAgIH0gZWxzZSBpZiAoYTEgJiYgKytpID09PSAyKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcHJldlIgPSByO1xuXG4gICAgdiA9IHU7XG4gICAgdSA9IHI7XG4gICAgeDIgPSB4MTtcbiAgICB4MSA9IHg7XG4gICAgeTIgPSB5MTtcbiAgICB5MSA9IHk7XG4gIH1cbiAgYTIgPSByLm5lZygpO1xuICBiMiA9IHg7XG5cbiAgdmFyIGxlbjEgPSBhMS5zcXIoKS5hZGQoYjEuc3FyKCkpO1xuICB2YXIgbGVuMiA9IGEyLnNxcigpLmFkZChiMi5zcXIoKSk7XG4gIGlmIChsZW4yLmNtcChsZW4xKSA+PSAwKSB7XG4gICAgYTIgPSBhMDtcbiAgICBiMiA9IGIwO1xuICB9XG5cbiAgLy8gTm9ybWFsaXplIHNpZ25zXG4gIGlmIChhMS5uZWdhdGl2ZSkge1xuICAgIGExID0gYTEubmVnKCk7XG4gICAgYjEgPSBiMS5uZWcoKTtcbiAgfVxuICBpZiAoYTIubmVnYXRpdmUpIHtcbiAgICBhMiA9IGEyLm5lZygpO1xuICAgIGIyID0gYjIubmVnKCk7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIHsgYTogYTEsIGI6IGIxIH0sXG4gICAgeyBhOiBhMiwgYjogYjIgfSxcbiAgXTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9lbmRvU3BsaXQgPSBmdW5jdGlvbiBfZW5kb1NwbGl0KGspIHtcbiAgdmFyIGJhc2lzID0gdGhpcy5lbmRvLmJhc2lzO1xuICB2YXIgdjEgPSBiYXNpc1swXTtcbiAgdmFyIHYyID0gYmFzaXNbMV07XG5cbiAgdmFyIGMxID0gdjIuYi5tdWwoaykuZGl2Um91bmQodGhpcy5uKTtcbiAgdmFyIGMyID0gdjEuYi5uZWcoKS5tdWwoaykuZGl2Um91bmQodGhpcy5uKTtcblxuICB2YXIgcDEgPSBjMS5tdWwodjEuYSk7XG4gIHZhciBwMiA9IGMyLm11bCh2Mi5hKTtcbiAgdmFyIHExID0gYzEubXVsKHYxLmIpO1xuICB2YXIgcTIgPSBjMi5tdWwodjIuYik7XG5cbiAgLy8gQ2FsY3VsYXRlIGFuc3dlclxuICB2YXIgazEgPSBrLnN1YihwMSkuc3ViKHAyKTtcbiAgdmFyIGsyID0gcTEuYWRkKHEyKS5uZWcoKTtcbiAgcmV0dXJuIHsgazE6IGsxLCBrMjogazIgfTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnBvaW50RnJvbVggPSBmdW5jdGlvbiBwb2ludEZyb21YKHgsIG9kZCkge1xuICB4ID0gbmV3IEJOKHgsIDE2KTtcbiAgaWYgKCF4LnJlZClcbiAgICB4ID0geC50b1JlZCh0aGlzLnJlZCk7XG5cbiAgdmFyIHkyID0geC5yZWRTcXIoKS5yZWRNdWwoeCkucmVkSUFkZCh4LnJlZE11bCh0aGlzLmEpKS5yZWRJQWRkKHRoaXMuYik7XG4gIHZhciB5ID0geTIucmVkU3FydCgpO1xuICBpZiAoeS5yZWRTcXIoKS5yZWRTdWIoeTIpLmNtcCh0aGlzLnplcm8pICE9PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwb2ludCcpO1xuXG4gIC8vIFhYWCBJcyB0aGVyZSBhbnkgd2F5IHRvIHRlbGwgaWYgdGhlIG51bWJlciBpcyBvZGQgd2l0aG91dCBjb252ZXJ0aW5nIGl0XG4gIC8vIHRvIG5vbi1yZWQgZm9ybT9cbiAgdmFyIGlzT2RkID0geS5mcm9tUmVkKCkuaXNPZGQoKTtcbiAgaWYgKG9kZCAmJiAhaXNPZGQgfHwgIW9kZCAmJiBpc09kZClcbiAgICB5ID0geS5yZWROZWcoKTtcblxuICByZXR1cm4gdGhpcy5wb2ludCh4LCB5KTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHtcbiAgaWYgKHBvaW50LmluZilcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB2YXIgeCA9IHBvaW50Lng7XG4gIHZhciB5ID0gcG9pbnQueTtcblxuICB2YXIgYXggPSB0aGlzLmEucmVkTXVsKHgpO1xuICB2YXIgcmhzID0geC5yZWRTcXIoKS5yZWRNdWwoeCkucmVkSUFkZChheCkucmVkSUFkZCh0aGlzLmIpO1xuICByZXR1cm4geS5yZWRTcXIoKS5yZWRJU3ViKHJocykuY21wbigwKSA9PT0gMDtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9lbmRvV25hZk11bEFkZCA9XG4gICAgZnVuY3Rpb24gX2VuZG9XbmFmTXVsQWRkKHBvaW50cywgY29lZmZzLCBqYWNvYmlhblJlc3VsdCkge1xuICAgICAgdmFyIG5wb2ludHMgPSB0aGlzLl9lbmRvV25hZlQxO1xuICAgICAgdmFyIG5jb2VmZnMgPSB0aGlzLl9lbmRvV25hZlQyO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNwbGl0ID0gdGhpcy5fZW5kb1NwbGl0KGNvZWZmc1tpXSk7XG4gICAgICAgIHZhciBwID0gcG9pbnRzW2ldO1xuICAgICAgICB2YXIgYmV0YSA9IHAuX2dldEJldGEoKTtcblxuICAgICAgICBpZiAoc3BsaXQuazEubmVnYXRpdmUpIHtcbiAgICAgICAgICBzcGxpdC5rMS5pbmVnKCk7XG4gICAgICAgICAgcCA9IHAubmVnKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzcGxpdC5rMi5uZWdhdGl2ZSkge1xuICAgICAgICAgIHNwbGl0LmsyLmluZWcoKTtcbiAgICAgICAgICBiZXRhID0gYmV0YS5uZWcodHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBucG9pbnRzW2kgKiAyXSA9IHA7XG4gICAgICAgIG5wb2ludHNbaSAqIDIgKyAxXSA9IGJldGE7XG4gICAgICAgIG5jb2VmZnNbaSAqIDJdID0gc3BsaXQuazE7XG4gICAgICAgIG5jb2VmZnNbaSAqIDIgKyAxXSA9IHNwbGl0LmsyO1xuICAgICAgfVxuICAgICAgdmFyIHJlcyA9IHRoaXMuX3duYWZNdWxBZGQoMSwgbnBvaW50cywgbmNvZWZmcywgaSAqIDIsIGphY29iaWFuUmVzdWx0KTtcblxuICAgICAgLy8gQ2xlYW4tdXAgcmVmZXJlbmNlcyB0byBwb2ludHMgYW5kIGNvZWZmaWNpZW50c1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpICogMjsgaisrKSB7XG4gICAgICAgIG5wb2ludHNbal0gPSBudWxsO1xuICAgICAgICBuY29lZmZzW2pdID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXM7XG4gICAgfTtcblxuZnVuY3Rpb24gUG9pbnQoY3VydmUsIHgsIHksIGlzUmVkKSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdhZmZpbmUnKTtcbiAgaWYgKHggPT09IG51bGwgJiYgeSA9PT0gbnVsbCkge1xuICAgIHRoaXMueCA9IG51bGw7XG4gICAgdGhpcy55ID0gbnVsbDtcbiAgICB0aGlzLmluZiA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTtcbiAgICB0aGlzLnkgPSBuZXcgQk4oeSwgMTYpO1xuICAgIC8vIEZvcmNlIHJlZGdvbWVyeSByZXByZXNlbnRhdGlvbiB3aGVuIGxvYWRpbmcgZnJvbSBKU09OXG4gICAgaWYgKGlzUmVkKSB7XG4gICAgICB0aGlzLnguZm9yY2VSZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgICAgdGhpcy55LmZvcmNlUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLngucmVkKVxuICAgICAgdGhpcy54ID0gdGhpcy54LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAoIXRoaXMueS5yZWQpXG4gICAgICB0aGlzLnkgPSB0aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIHRoaXMuaW5mID0gZmFsc2U7XG4gIH1cbn1cbmluaGVyaXRzKFBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoeCwgeSwgaXNSZWQpIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB5LCBpc1JlZCk7XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5wb2ludEZyb21KU09OID0gZnVuY3Rpb24gcG9pbnRGcm9tSlNPTihvYmosIHJlZCkge1xuICByZXR1cm4gUG9pbnQuZnJvbUpTT04odGhpcywgb2JqLCByZWQpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9nZXRCZXRhID0gZnVuY3Rpb24gX2dldEJldGEoKSB7XG4gIGlmICghdGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybjtcblxuICB2YXIgcHJlID0gdGhpcy5wcmVjb21wdXRlZDtcbiAgaWYgKHByZSAmJiBwcmUuYmV0YSlcbiAgICByZXR1cm4gcHJlLmJldGE7XG5cbiAgdmFyIGJldGEgPSB0aGlzLmN1cnZlLnBvaW50KHRoaXMueC5yZWRNdWwodGhpcy5jdXJ2ZS5lbmRvLmJldGEpLCB0aGlzLnkpO1xuICBpZiAocHJlKSB7XG4gICAgdmFyIGN1cnZlID0gdGhpcy5jdXJ2ZTtcbiAgICB2YXIgZW5kb011bCA9IGZ1bmN0aW9uKHApIHtcbiAgICAgIHJldHVybiBjdXJ2ZS5wb2ludChwLngucmVkTXVsKGN1cnZlLmVuZG8uYmV0YSksIHAueSk7XG4gICAgfTtcbiAgICBwcmUuYmV0YSA9IGJldGE7XG4gICAgYmV0YS5wcmVjb21wdXRlZCA9IHtcbiAgICAgIGJldGE6IG51bGwsXG4gICAgICBuYWY6IHByZS5uYWYgJiYge1xuICAgICAgICB3bmQ6IHByZS5uYWYud25kLFxuICAgICAgICBwb2ludHM6IHByZS5uYWYucG9pbnRzLm1hcChlbmRvTXVsKSxcbiAgICAgIH0sXG4gICAgICBkb3VibGVzOiBwcmUuZG91YmxlcyAmJiB7XG4gICAgICAgIHN0ZXA6IHByZS5kb3VibGVzLnN0ZXAsXG4gICAgICAgIHBvaW50czogcHJlLmRvdWJsZXMucG9pbnRzLm1hcChlbmRvTXVsKSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuICByZXR1cm4gYmV0YTtcbn07XG5cblBvaW50LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gIGlmICghdGhpcy5wcmVjb21wdXRlZClcbiAgICByZXR1cm4gWyB0aGlzLngsIHRoaXMueSBdO1xuXG4gIHJldHVybiBbIHRoaXMueCwgdGhpcy55LCB0aGlzLnByZWNvbXB1dGVkICYmIHtcbiAgICBkb3VibGVzOiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMgJiYge1xuICAgICAgc3RlcDogdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzLnN0ZXAsXG4gICAgICBwb2ludHM6IHRoaXMucHJlY29tcHV0ZWQuZG91Ymxlcy5wb2ludHMuc2xpY2UoMSksXG4gICAgfSxcbiAgICBuYWY6IHRoaXMucHJlY29tcHV0ZWQubmFmICYmIHtcbiAgICAgIHduZDogdGhpcy5wcmVjb21wdXRlZC5uYWYud25kLFxuICAgICAgcG9pbnRzOiB0aGlzLnByZWNvbXB1dGVkLm5hZi5wb2ludHMuc2xpY2UoMSksXG4gICAgfSxcbiAgfSBdO1xufTtcblxuUG9pbnQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihjdXJ2ZSwgb2JqLCByZWQpIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKVxuICAgIG9iaiA9IEpTT04ucGFyc2Uob2JqKTtcbiAgdmFyIHJlcyA9IGN1cnZlLnBvaW50KG9ialswXSwgb2JqWzFdLCByZWQpO1xuICBpZiAoIW9ialsyXSlcbiAgICByZXR1cm4gcmVzO1xuXG4gIGZ1bmN0aW9uIG9iajJwb2ludChvYmopIHtcbiAgICByZXR1cm4gY3VydmUucG9pbnQob2JqWzBdLCBvYmpbMV0sIHJlZCk7XG4gIH1cblxuICB2YXIgcHJlID0gb2JqWzJdO1xuICByZXMucHJlY29tcHV0ZWQgPSB7XG4gICAgYmV0YTogbnVsbCxcbiAgICBkb3VibGVzOiBwcmUuZG91YmxlcyAmJiB7XG4gICAgICBzdGVwOiBwcmUuZG91Ymxlcy5zdGVwLFxuICAgICAgcG9pbnRzOiBbIHJlcyBdLmNvbmNhdChwcmUuZG91Ymxlcy5wb2ludHMubWFwKG9iajJwb2ludCkpLFxuICAgIH0sXG4gICAgbmFmOiBwcmUubmFmICYmIHtcbiAgICAgIHduZDogcHJlLm5hZi53bmQsXG4gICAgICBwb2ludHM6IFsgcmVzIF0uY29uY2F0KHByZS5uYWYucG9pbnRzLm1hcChvYmoycG9pbnQpKSxcbiAgICB9LFxuICB9O1xuICByZXR1cm4gcmVzO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgUG9pbnQgSW5maW5pdHk+JztcbiAgcmV0dXJuICc8RUMgUG9pbnQgeDogJyArIHRoaXMueC5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgeTogJyArIHRoaXMueS5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICsgJz4nO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICByZXR1cm4gdGhpcy5pbmY7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHApIHtcbiAgLy8gTyArIFAgPSBQXG4gIGlmICh0aGlzLmluZilcbiAgICByZXR1cm4gcDtcblxuICAvLyBQICsgTyA9IFBcbiAgaWYgKHAuaW5mKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIFAgKyBQID0gMlBcbiAgaWYgKHRoaXMuZXEocCkpXG4gICAgcmV0dXJuIHRoaXMuZGJsKCk7XG5cbiAgLy8gUCArICgtUCkgPSBPXG4gIGlmICh0aGlzLm5lZygpLmVxKHApKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpO1xuXG4gIC8vIFAgKyBRID0gT1xuICBpZiAodGhpcy54LmNtcChwLngpID09PSAwKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpO1xuXG4gIHZhciBjID0gdGhpcy55LnJlZFN1YihwLnkpO1xuICBpZiAoYy5jbXBuKDApICE9PSAwKVxuICAgIGMgPSBjLnJlZE11bCh0aGlzLngucmVkU3ViKHAueCkucmVkSW52bSgpKTtcbiAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHRoaXMueCkucmVkSVN1YihwLngpO1xuICB2YXIgbnkgPSBjLnJlZE11bCh0aGlzLngucmVkU3ViKG54KSkucmVkSVN1Yih0aGlzLnkpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnkpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmRibCA9IGZ1bmN0aW9uIGRibCgpIHtcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIDJQID0gT1xuICB2YXIgeXMxID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICBpZiAoeXMxLmNtcG4oMCkgPT09IDApXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgdmFyIGEgPSB0aGlzLmN1cnZlLmE7XG5cbiAgdmFyIHgyID0gdGhpcy54LnJlZFNxcigpO1xuICB2YXIgZHlpbnYgPSB5czEucmVkSW52bSgpO1xuICB2YXIgYyA9IHgyLnJlZEFkZCh4MikucmVkSUFkZCh4MikucmVkSUFkZChhKS5yZWRNdWwoZHlpbnYpO1xuXG4gIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0aGlzLngucmVkQWRkKHRoaXMueCkpO1xuICB2YXIgbnkgPSBjLnJlZE11bCh0aGlzLngucmVkU3ViKG54KSkucmVkSVN1Yih0aGlzLnkpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnkpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFggPSBmdW5jdGlvbiBnZXRYKCkge1xuICByZXR1cm4gdGhpcy54LmZyb21SZWQoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRZID0gZnVuY3Rpb24gZ2V0WSgpIHtcbiAgcmV0dXJuIHRoaXMueS5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGspIHtcbiAgayA9IG5ldyBCTihrLCAxNik7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcbiAgZWxzZSBpZiAodGhpcy5faGFzRG91YmxlcyhrKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZml4ZWROYWZNdWwodGhpcywgayk7XG4gIGVsc2UgaWYgKHRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQoWyB0aGlzIF0sIFsgayBdKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZChrMSwgcDIsIGsyKSB7XG4gIHZhciBwb2ludHMgPSBbIHRoaXMsIHAyIF07XG4gIHZhciBjb2VmZnMgPSBbIGsxLCBrMiBdO1xuICBpZiAodGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChwb2ludHMsIGNvZWZmcyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBwb2ludHMsIGNvZWZmcywgMik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuam11bEFkZCA9IGZ1bmN0aW9uIGptdWxBZGQoazEsIHAyLCBrMikge1xuICB2YXIgcG9pbnRzID0gWyB0aGlzLCBwMiBdO1xuICB2YXIgY29lZmZzID0gWyBrMSwgazIgXTtcbiAgaWYgKHRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQocG9pbnRzLCBjb2VmZnMsIHRydWUpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgcG9pbnRzLCBjb2VmZnMsIDIsIHRydWUpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEocCkge1xuICByZXR1cm4gdGhpcyA9PT0gcCB8fFxuICAgICAgICAgdGhpcy5pbmYgPT09IHAuaW5mICYmXG4gICAgICAgICAgICAgKHRoaXMuaW5mIHx8IHRoaXMueC5jbXAocC54KSA9PT0gMCAmJiB0aGlzLnkuY21wKHAueSkgPT09IDApO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyhfcHJlY29tcHV0ZSkge1xuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgdmFyIHJlcyA9IHRoaXMuY3VydmUucG9pbnQodGhpcy54LCB0aGlzLnkucmVkTmVnKCkpO1xuICBpZiAoX3ByZWNvbXB1dGUgJiYgdGhpcy5wcmVjb21wdXRlZCkge1xuICAgIHZhciBwcmUgPSB0aGlzLnByZWNvbXB1dGVkO1xuICAgIHZhciBuZWdhdGUgPSBmdW5jdGlvbihwKSB7XG4gICAgICByZXR1cm4gcC5uZWcoKTtcbiAgICB9O1xuICAgIHJlcy5wcmVjb21wdXRlZCA9IHtcbiAgICAgIG5hZjogcHJlLm5hZiAmJiB7XG4gICAgICAgIHduZDogcHJlLm5hZi53bmQsXG4gICAgICAgIHBvaW50czogcHJlLm5hZi5wb2ludHMubWFwKG5lZ2F0ZSksXG4gICAgICB9LFxuICAgICAgZG91YmxlczogcHJlLmRvdWJsZXMgJiYge1xuICAgICAgICBzdGVwOiBwcmUuZG91Ymxlcy5zdGVwLFxuICAgICAgICBwb2ludHM6IHByZS5kb3VibGVzLnBvaW50cy5tYXAobmVnYXRlKSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnRvSiA9IGZ1bmN0aW9uIHRvSigpIHtcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcblxuICB2YXIgcmVzID0gdGhpcy5jdXJ2ZS5qcG9pbnQodGhpcy54LCB0aGlzLnksIHRoaXMuY3VydmUub25lKTtcbiAgcmV0dXJuIHJlcztcbn07XG5cbmZ1bmN0aW9uIEpQb2ludChjdXJ2ZSwgeCwgeSwgeikge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAnamFjb2JpYW4nKTtcbiAgaWYgKHggPT09IG51bGwgJiYgeSA9PT0gbnVsbCAmJiB6ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy55ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy56ID0gbmV3IEJOKDApO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IG5ldyBCTih4LCAxNik7XG4gICAgdGhpcy55ID0gbmV3IEJOKHksIDE2KTtcbiAgICB0aGlzLnogPSBuZXcgQk4oeiwgMTYpO1xuICB9XG4gIGlmICghdGhpcy54LnJlZClcbiAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICBpZiAoIXRoaXMueS5yZWQpXG4gICAgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgaWYgKCF0aGlzLnoucmVkKVxuICAgIHRoaXMueiA9IHRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG5cbiAgdGhpcy56T25lID0gdGhpcy56ID09PSB0aGlzLmN1cnZlLm9uZTtcbn1cbmluaGVyaXRzKEpQb2ludCwgQmFzZS5CYXNlUG9pbnQpO1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5qcG9pbnQgPSBmdW5jdGlvbiBqcG9pbnQoeCwgeSwgeikge1xuICByZXR1cm4gbmV3IEpQb2ludCh0aGlzLCB4LCB5LCB6KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUudG9QID0gZnVuY3Rpb24gdG9QKCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgdmFyIHppbnYgPSB0aGlzLnoucmVkSW52bSgpO1xuICB2YXIgemludjIgPSB6aW52LnJlZFNxcigpO1xuICB2YXIgYXggPSB0aGlzLngucmVkTXVsKHppbnYyKTtcbiAgdmFyIGF5ID0gdGhpcy55LnJlZE11bCh6aW52MikucmVkTXVsKHppbnYpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KGF4LCBheSk7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZygpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KHRoaXMueCwgdGhpcy55LnJlZE5lZygpLCB0aGlzLnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQocCkge1xuICAvLyBPICsgUCA9IFBcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwO1xuXG4gIC8vIFAgKyBPID0gUFxuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gMTJNICsgNFMgKyA3QVxuICB2YXIgcHoyID0gcC56LnJlZFNxcigpO1xuICB2YXIgejIgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciB1MSA9IHRoaXMueC5yZWRNdWwocHoyKTtcbiAgdmFyIHUyID0gcC54LnJlZE11bCh6Mik7XG4gIHZhciBzMSA9IHRoaXMueS5yZWRNdWwocHoyLnJlZE11bChwLnopKTtcbiAgdmFyIHMyID0gcC55LnJlZE11bCh6Mi5yZWRNdWwodGhpcy56KSk7XG5cbiAgdmFyIGggPSB1MS5yZWRTdWIodTIpO1xuICB2YXIgciA9IHMxLnJlZFN1YihzMik7XG4gIGlmIChoLmNtcG4oMCkgPT09IDApIHtcbiAgICBpZiAoci5jbXBuKDApICE9PSAwKVxuICAgICAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiB0aGlzLmRibCgpO1xuICB9XG5cbiAgdmFyIGgyID0gaC5yZWRTcXIoKTtcbiAgdmFyIGgzID0gaDIucmVkTXVsKGgpO1xuICB2YXIgdiA9IHUxLnJlZE11bChoMik7XG5cbiAgdmFyIG54ID0gci5yZWRTcXIoKS5yZWRJQWRkKGgzKS5yZWRJU3ViKHYpLnJlZElTdWIodik7XG4gIHZhciBueSA9IHIucmVkTXVsKHYucmVkSVN1YihueCkpLnJlZElTdWIoczEucmVkTXVsKGgzKSk7XG4gIHZhciBueiA9IHRoaXMuei5yZWRNdWwocC56KS5yZWRNdWwoaCk7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5taXhlZEFkZCA9IGZ1bmN0aW9uIG1peGVkQWRkKHApIHtcbiAgLy8gTyArIFAgPSBQXG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gcC50b0ooKTtcblxuICAvLyBQICsgTyA9IFBcbiAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIDhNICsgM1MgKyA3QVxuICB2YXIgejIgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciB1MSA9IHRoaXMueDtcbiAgdmFyIHUyID0gcC54LnJlZE11bCh6Mik7XG4gIHZhciBzMSA9IHRoaXMueTtcbiAgdmFyIHMyID0gcC55LnJlZE11bCh6MikucmVkTXVsKHRoaXMueik7XG5cbiAgdmFyIGggPSB1MS5yZWRTdWIodTIpO1xuICB2YXIgciA9IHMxLnJlZFN1YihzMik7XG4gIGlmIChoLmNtcG4oMCkgPT09IDApIHtcbiAgICBpZiAoci5jbXBuKDApICE9PSAwKVxuICAgICAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiB0aGlzLmRibCgpO1xuICB9XG5cbiAgdmFyIGgyID0gaC5yZWRTcXIoKTtcbiAgdmFyIGgzID0gaDIucmVkTXVsKGgpO1xuICB2YXIgdiA9IHUxLnJlZE11bChoMik7XG5cbiAgdmFyIG54ID0gci5yZWRTcXIoKS5yZWRJQWRkKGgzKS5yZWRJU3ViKHYpLnJlZElTdWIodik7XG4gIHZhciBueSA9IHIucmVkTXVsKHYucmVkSVN1YihueCkpLnJlZElTdWIoczEucmVkTXVsKGgzKSk7XG4gIHZhciBueiA9IHRoaXMuei5yZWRNdWwoaCk7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5kYmxwID0gZnVuY3Rpb24gZGJscChwb3cpIHtcbiAgaWYgKHBvdyA9PT0gMClcbiAgICByZXR1cm4gdGhpcztcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuICBpZiAoIXBvdylcbiAgICByZXR1cm4gdGhpcy5kYmwoKTtcblxuICB2YXIgaTtcbiAgaWYgKHRoaXMuY3VydmUuemVyb0EgfHwgdGhpcy5jdXJ2ZS50aHJlZUEpIHtcbiAgICB2YXIgciA9IHRoaXM7XG4gICAgZm9yIChpID0gMDsgaSA8IHBvdzsgaSsrKVxuICAgICAgciA9IHIuZGJsKCk7XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICAvLyAxTSArIDJTICsgMUEgKyBOICogKDRTICsgNU0gKyA4QSlcbiAgLy8gTiA9IDEgPT4gNk0gKyA2UyArIDlBXG4gIHZhciBhID0gdGhpcy5jdXJ2ZS5hO1xuICB2YXIgdGludiA9IHRoaXMuY3VydmUudGludjtcblxuICB2YXIganggPSB0aGlzLng7XG4gIHZhciBqeSA9IHRoaXMueTtcbiAgdmFyIGp6ID0gdGhpcy56O1xuICB2YXIgano0ID0ganoucmVkU3FyKCkucmVkU3FyKCk7XG5cbiAgLy8gUmV1c2UgcmVzdWx0c1xuICB2YXIganlkID0gankucmVkQWRkKGp5KTtcbiAgZm9yIChpID0gMDsgaSA8IHBvdzsgaSsrKSB7XG4gICAgdmFyIGp4MiA9IGp4LnJlZFNxcigpO1xuICAgIHZhciBqeWQyID0ganlkLnJlZFNxcigpO1xuICAgIHZhciBqeWQ0ID0ganlkMi5yZWRTcXIoKTtcbiAgICB2YXIgYyA9IGp4Mi5yZWRBZGQoangyKS5yZWRJQWRkKGp4MikucmVkSUFkZChhLnJlZE11bChqejQpKTtcblxuICAgIHZhciB0MSA9IGp4LnJlZE11bChqeWQyKTtcbiAgICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodDEucmVkQWRkKHQxKSk7XG4gICAgdmFyIHQyID0gdDEucmVkSVN1YihueCk7XG4gICAgdmFyIGRueSA9IGMucmVkTXVsKHQyKTtcbiAgICBkbnkgPSBkbnkucmVkSUFkZChkbnkpLnJlZElTdWIoanlkNCk7XG4gICAgdmFyIG56ID0ganlkLnJlZE11bChqeik7XG4gICAgaWYgKGkgKyAxIDwgcG93KVxuICAgICAgano0ID0gano0LnJlZE11bChqeWQ0KTtcblxuICAgIGp4ID0gbng7XG4gICAganogPSBuejtcbiAgICBqeWQgPSBkbnk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQoangsIGp5ZC5yZWRNdWwodGludiksIGp6KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgaWYgKHRoaXMuY3VydmUuemVyb0EpXG4gICAgcmV0dXJuIHRoaXMuX3plcm9EYmwoKTtcbiAgZWxzZSBpZiAodGhpcy5jdXJ2ZS50aHJlZUEpXG4gICAgcmV0dXJuIHRoaXMuX3RocmVlRGJsKCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fZGJsKCk7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLl96ZXJvRGJsID0gZnVuY3Rpb24gX3plcm9EYmwoKSB7XG4gIHZhciBueDtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIC8vIFogPSAxXG4gIGlmICh0aGlzLnpPbmUpIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbFxuICAgIC8vICAgICAjZG91YmxpbmctbWRibC0yMDA3LWJsXG4gICAgLy8gMU0gKyA1UyArIDE0QVxuXG4gICAgLy8gWFggPSBYMV4yXG4gICAgdmFyIHh4ID0gdGhpcy54LnJlZFNxcigpO1xuICAgIC8vIFlZID0gWTFeMlxuICAgIHZhciB5eSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBZWVlZID0gWVleMlxuICAgIHZhciB5eXl5ID0geXkucmVkU3FyKCk7XG4gICAgLy8gUyA9IDIgKiAoKFgxICsgWVkpXjIgLSBYWCAtIFlZWVkpXG4gICAgdmFyIHMgPSB0aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpO1xuICAgIHMgPSBzLnJlZElBZGQocyk7XG4gICAgLy8gTSA9IDMgKiBYWCArIGE7IGEgPSAwXG4gICAgdmFyIG0gPSB4eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpO1xuICAgIC8vIFQgPSBNIF4gMiAtIDIqU1xuICAgIHZhciB0ID0gbS5yZWRTcXIoKS5yZWRJU3ViKHMpLnJlZElTdWIocyk7XG5cbiAgICAvLyA4ICogWVlZWVxuICAgIHZhciB5eXl5OCA9IHl5eXkucmVkSUFkZCh5eXl5KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG5cbiAgICAvLyBYMyA9IFRcbiAgICBueCA9IHQ7XG4gICAgLy8gWTMgPSBNICogKFMgLSBUKSAtIDggKiBZWVlZXG4gICAgbnkgPSBtLnJlZE11bChzLnJlZElTdWIodCkpLnJlZElTdWIoeXl5eTgpO1xuICAgIC8vIFozID0gMipZMVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMC5odG1sXG4gICAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwOS1sXG4gICAgLy8gMk0gKyA1UyArIDEzQVxuXG4gICAgLy8gQSA9IFgxXjJcbiAgICB2YXIgYSA9IHRoaXMueC5yZWRTcXIoKTtcbiAgICAvLyBCID0gWTFeMlxuICAgIHZhciBiID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIEMgPSBCXjJcbiAgICB2YXIgYyA9IGIucmVkU3FyKCk7XG4gICAgLy8gRCA9IDIgKiAoKFgxICsgQileMiAtIEEgLSBDKVxuICAgIHZhciBkID0gdGhpcy54LnJlZEFkZChiKS5yZWRTcXIoKS5yZWRJU3ViKGEpLnJlZElTdWIoYyk7XG4gICAgZCA9IGQucmVkSUFkZChkKTtcbiAgICAvLyBFID0gMyAqIEFcbiAgICB2YXIgZSA9IGEucmVkQWRkKGEpLnJlZElBZGQoYSk7XG4gICAgLy8gRiA9IEVeMlxuICAgIHZhciBmID0gZS5yZWRTcXIoKTtcblxuICAgIC8vIDggKiBDXG4gICAgdmFyIGM4ID0gYy5yZWRJQWRkKGMpO1xuICAgIGM4ID0gYzgucmVkSUFkZChjOCk7XG4gICAgYzggPSBjOC5yZWRJQWRkKGM4KTtcblxuICAgIC8vIFgzID0gRiAtIDIgKiBEXG4gICAgbnggPSBmLnJlZElTdWIoZCkucmVkSVN1YihkKTtcbiAgICAvLyBZMyA9IEUgKiAoRCAtIFgzKSAtIDggKiBDXG4gICAgbnkgPSBlLnJlZE11bChkLnJlZElTdWIobngpKS5yZWRJU3ViKGM4KTtcbiAgICAvLyBaMyA9IDIgKiBZMSAqIFoxXG4gICAgbnogPSB0aGlzLnkucmVkTXVsKHRoaXMueik7XG4gICAgbnogPSBuei5yZWRJQWRkKG56KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuX3RocmVlRGJsID0gZnVuY3Rpb24gX3RocmVlRGJsKCkge1xuICB2YXIgbng7XG4gIHZhciBueTtcbiAgdmFyIG56O1xuICAvLyBaID0gMVxuICBpZiAodGhpcy56T25lKSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0zLmh0bWxcbiAgICAvLyAgICAgI2RvdWJsaW5nLW1kYmwtMjAwNy1ibFxuICAgIC8vIDFNICsgNVMgKyAxNUFcblxuICAgIC8vIFhYID0gWDFeMlxuICAgIHZhciB4eCA9IHRoaXMueC5yZWRTcXIoKTtcbiAgICAvLyBZWSA9IFkxXjJcbiAgICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gWVlZWSA9IFlZXjJcbiAgICB2YXIgeXl5eSA9IHl5LnJlZFNxcigpO1xuICAgIC8vIFMgPSAyICogKChYMSArIFlZKV4yIC0gWFggLSBZWVlZKVxuICAgIHZhciBzID0gdGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtcbiAgICBzID0gcy5yZWRJQWRkKHMpO1xuICAgIC8vIE0gPSAzICogWFggKyBhXG4gICAgdmFyIG0gPSB4eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpLnJlZElBZGQodGhpcy5jdXJ2ZS5hKTtcbiAgICAvLyBUID0gTV4yIC0gMiAqIFNcbiAgICB2YXIgdCA9IG0ucmVkU3FyKCkucmVkSVN1YihzKS5yZWRJU3ViKHMpO1xuICAgIC8vIFgzID0gVFxuICAgIG54ID0gdDtcbiAgICAvLyBZMyA9IE0gKiAoUyAtIFQpIC0gOCAqIFlZWVlcbiAgICB2YXIgeXl5eTggPSB5eXl5LnJlZElBZGQoeXl5eSk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuICAgIG55ID0gbS5yZWRNdWwocy5yZWRJU3ViKHQpKS5yZWRJU3ViKHl5eXk4KTtcbiAgICAvLyBaMyA9IDIgKiBZMVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMy5odG1sI2RvdWJsaW5nLWRibC0yMDAxLWJcbiAgICAvLyAzTSArIDVTXG5cbiAgICAvLyBkZWx0YSA9IFoxXjJcbiAgICB2YXIgZGVsdGEgPSB0aGlzLnoucmVkU3FyKCk7XG4gICAgLy8gZ2FtbWEgPSBZMV4yXG4gICAgdmFyIGdhbW1hID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIGJldGEgPSBYMSAqIGdhbW1hXG4gICAgdmFyIGJldGEgPSB0aGlzLngucmVkTXVsKGdhbW1hKTtcbiAgICAvLyBhbHBoYSA9IDMgKiAoWDEgLSBkZWx0YSkgKiAoWDEgKyBkZWx0YSlcbiAgICB2YXIgYWxwaGEgPSB0aGlzLngucmVkU3ViKGRlbHRhKS5yZWRNdWwodGhpcy54LnJlZEFkZChkZWx0YSkpO1xuICAgIGFscGhhID0gYWxwaGEucmVkQWRkKGFscGhhKS5yZWRJQWRkKGFscGhhKTtcbiAgICAvLyBYMyA9IGFscGhhXjIgLSA4ICogYmV0YVxuICAgIHZhciBiZXRhNCA9IGJldGEucmVkSUFkZChiZXRhKTtcbiAgICBiZXRhNCA9IGJldGE0LnJlZElBZGQoYmV0YTQpO1xuICAgIHZhciBiZXRhOCA9IGJldGE0LnJlZEFkZChiZXRhNCk7XG4gICAgbnggPSBhbHBoYS5yZWRTcXIoKS5yZWRJU3ViKGJldGE4KTtcbiAgICAvLyBaMyA9IChZMSArIFoxKV4yIC0gZ2FtbWEgLSBkZWx0YVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnopLnJlZFNxcigpLnJlZElTdWIoZ2FtbWEpLnJlZElTdWIoZGVsdGEpO1xuICAgIC8vIFkzID0gYWxwaGEgKiAoNCAqIGJldGEgLSBYMykgLSA4ICogZ2FtbWFeMlxuICAgIHZhciBnZ2FtbWE4ID0gZ2FtbWEucmVkU3FyKCk7XG4gICAgZ2dhbW1hOCA9IGdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTtcbiAgICBnZ2FtbWE4ID0gZ2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpO1xuICAgIGdnYW1tYTggPSBnZ2FtbWE4LnJlZElBZGQoZ2dhbW1hOCk7XG4gICAgbnkgPSBhbHBoYS5yZWRNdWwoYmV0YTQucmVkSVN1YihueCkpLnJlZElTdWIoZ2dhbW1hOCk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLl9kYmwgPSBmdW5jdGlvbiBfZGJsKCkge1xuICB2YXIgYSA9IHRoaXMuY3VydmUuYTtcblxuICAvLyA0TSArIDZTICsgMTBBXG4gIHZhciBqeCA9IHRoaXMueDtcbiAgdmFyIGp5ID0gdGhpcy55O1xuICB2YXIganogPSB0aGlzLno7XG4gIHZhciBqejQgPSBqei5yZWRTcXIoKS5yZWRTcXIoKTtcblxuICB2YXIgangyID0gangucmVkU3FyKCk7XG4gIHZhciBqeTIgPSBqeS5yZWRTcXIoKTtcblxuICB2YXIgYyA9IGp4Mi5yZWRBZGQoangyKS5yZWRJQWRkKGp4MikucmVkSUFkZChhLnJlZE11bChqejQpKTtcblxuICB2YXIganhkNCA9IGp4LnJlZEFkZChqeCk7XG4gIGp4ZDQgPSBqeGQ0LnJlZElBZGQoanhkNCk7XG4gIHZhciB0MSA9IGp4ZDQucmVkTXVsKGp5Mik7XG4gIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0MS5yZWRBZGQodDEpKTtcbiAgdmFyIHQyID0gdDEucmVkSVN1YihueCk7XG5cbiAgdmFyIGp5ZDggPSBqeTIucmVkU3FyKCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIHZhciBueSA9IGMucmVkTXVsKHQyKS5yZWRJU3ViKGp5ZDgpO1xuICB2YXIgbnogPSBqeS5yZWRBZGQoankpLnJlZE11bChqeik7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS50cnBsID0gZnVuY3Rpb24gdHJwbCgpIHtcbiAgaWYgKCF0aGlzLmN1cnZlLnplcm9BKVxuICAgIHJldHVybiB0aGlzLmRibCgpLmFkZCh0aGlzKTtcblxuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbCN0cmlwbGluZy10cGwtMjAwNy1ibFxuICAvLyA1TSArIDEwUyArIC4uLlxuXG4gIC8vIFhYID0gWDFeMlxuICB2YXIgeHggPSB0aGlzLngucmVkU3FyKCk7XG4gIC8vIFlZID0gWTFeMlxuICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7XG4gIC8vIFpaID0gWjFeMlxuICB2YXIgenogPSB0aGlzLnoucmVkU3FyKCk7XG4gIC8vIFlZWVkgPSBZWV4yXG4gIHZhciB5eXl5ID0geXkucmVkU3FyKCk7XG4gIC8vIE0gPSAzICogWFggKyBhICogWloyOyBhID0gMFxuICB2YXIgbSA9IHh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCk7XG4gIC8vIE1NID0gTV4yXG4gIHZhciBtbSA9IG0ucmVkU3FyKCk7XG4gIC8vIEUgPSA2ICogKChYMSArIFlZKV4yIC0gWFggLSBZWVlZKSAtIE1NXG4gIHZhciBlID0gdGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtcbiAgZSA9IGUucmVkSUFkZChlKTtcbiAgZSA9IGUucmVkQWRkKGUpLnJlZElBZGQoZSk7XG4gIGUgPSBlLnJlZElTdWIobW0pO1xuICAvLyBFRSA9IEVeMlxuICB2YXIgZWUgPSBlLnJlZFNxcigpO1xuICAvLyBUID0gMTYqWVlZWVxuICB2YXIgdCA9IHl5eXkucmVkSUFkZCh5eXl5KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgLy8gVSA9IChNICsgRSleMiAtIE1NIC0gRUUgLSBUXG4gIHZhciB1ID0gbS5yZWRJQWRkKGUpLnJlZFNxcigpLnJlZElTdWIobW0pLnJlZElTdWIoZWUpLnJlZElTdWIodCk7XG4gIC8vIFgzID0gNCAqIChYMSAqIEVFIC0gNCAqIFlZICogVSlcbiAgdmFyIHl5dTQgPSB5eS5yZWRNdWwodSk7XG4gIHl5dTQgPSB5eXU0LnJlZElBZGQoeXl1NCk7XG4gIHl5dTQgPSB5eXU0LnJlZElBZGQoeXl1NCk7XG4gIHZhciBueCA9IHRoaXMueC5yZWRNdWwoZWUpLnJlZElTdWIoeXl1NCk7XG4gIG54ID0gbngucmVkSUFkZChueCk7XG4gIG54ID0gbngucmVkSUFkZChueCk7XG4gIC8vIFkzID0gOCAqIFkxICogKFUgKiAoVCAtIFUpIC0gRSAqIEVFKVxuICB2YXIgbnkgPSB0aGlzLnkucmVkTXVsKHUucmVkTXVsKHQucmVkSVN1Yih1KSkucmVkSVN1YihlLnJlZE11bChlZSkpKTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgLy8gWjMgPSAoWjEgKyBFKV4yIC0gWlogLSBFRVxuICB2YXIgbnogPSB0aGlzLnoucmVkQWRkKGUpLnJlZFNxcigpLnJlZElTdWIoenopLnJlZElTdWIoZWUpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGssIGtiYXNlKSB7XG4gIGsgPSBuZXcgQk4oaywga2Jhc2UpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKHApIHtcbiAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpXG4gICAgcmV0dXJuIHRoaXMuZXEocC50b0ooKSk7XG5cbiAgaWYgKHRoaXMgPT09IHApXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgLy8geDEgKiB6Ml4yID09IHgyICogejFeMlxuICB2YXIgejIgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciBwejIgPSBwLnoucmVkU3FyKCk7XG4gIGlmICh0aGlzLngucmVkTXVsKHB6MikucmVkSVN1YihwLngucmVkTXVsKHoyKSkuY21wbigwKSAhPT0gMClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8geTEgKiB6Ml4zID09IHkyICogejFeM1xuICB2YXIgejMgPSB6Mi5yZWRNdWwodGhpcy56KTtcbiAgdmFyIHB6MyA9IHB6Mi5yZWRNdWwocC56KTtcbiAgcmV0dXJuIHRoaXMueS5yZWRNdWwocHozKS5yZWRJU3ViKHAueS5yZWRNdWwoejMpKS5jbXBuKDApID09PSAwO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5lcVhUb1AgPSBmdW5jdGlvbiBlcVhUb1AoeCkge1xuICB2YXIgenMgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciByeCA9IHgudG9SZWQodGhpcy5jdXJ2ZS5yZWQpLnJlZE11bCh6cyk7XG4gIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB2YXIgeGMgPSB4LmNsb25lKCk7XG4gIHZhciB0ID0gdGhpcy5jdXJ2ZS5yZWROLnJlZE11bCh6cyk7XG4gIGZvciAoOzspIHtcbiAgICB4Yy5pYWRkKHRoaXMuY3VydmUubik7XG4gICAgaWYgKHhjLmNtcCh0aGlzLmN1cnZlLnApID49IDApXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByeC5yZWRJQWRkKHQpO1xuICAgIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgSlBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIEpQb2ludCB4OiAnICsgdGhpcy54LnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHk6ICcgKyB0aGlzLnkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgejogJyArIHRoaXMuei50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICAvLyBYWFggVGhpcyBjb2RlIGFzc3VtZXMgdGhhdCB6ZXJvIGlzIGFsd2F5cyB6ZXJvIGluIHJlZFxuICByZXR1cm4gdGhpcy56LmNtcG4oMCkgPT09IDA7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmUgPSBleHBvcnRzO1xuXG5jdXJ2ZS5iYXNlID0gcmVxdWlyZSgnLi9iYXNlJyk7XG5jdXJ2ZS5zaG9ydCA9IHJlcXVpcmUoJy4vc2hvcnQnKTtcbmN1cnZlLm1vbnQgPSByZXF1aXJlKCcuL21vbnQnKTtcbmN1cnZlLmVkd2FyZHMgPSByZXF1aXJlKCcuL2Vkd2FyZHMnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlcyA9IGV4cG9ydHM7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnaGFzaC5qcycpO1xudmFyIGN1cnZlID0gcmVxdWlyZSgnLi9jdXJ2ZScpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBQcmVzZXRDdXJ2ZShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLnR5cGUgPT09ICdzaG9ydCcpXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBjdXJ2ZS5zaG9ydChvcHRpb25zKTtcbiAgZWxzZSBpZiAob3B0aW9ucy50eXBlID09PSAnZWR3YXJkcycpXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBjdXJ2ZS5lZHdhcmRzKG9wdGlvbnMpO1xuICBlbHNlXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBjdXJ2ZS5tb250KG9wdGlvbnMpO1xuICB0aGlzLmcgPSB0aGlzLmN1cnZlLmc7XG4gIHRoaXMubiA9IHRoaXMuY3VydmUubjtcbiAgdGhpcy5oYXNoID0gb3B0aW9ucy5oYXNoO1xuXG4gIGFzc2VydCh0aGlzLmcudmFsaWRhdGUoKSwgJ0ludmFsaWQgY3VydmUnKTtcbiAgYXNzZXJ0KHRoaXMuZy5tdWwodGhpcy5uKS5pc0luZmluaXR5KCksICdJbnZhbGlkIGN1cnZlLCBHKk4gIT0gTycpO1xufVxuY3VydmVzLlByZXNldEN1cnZlID0gUHJlc2V0Q3VydmU7XG5cbmZ1bmN0aW9uIGRlZmluZUN1cnZlKG5hbWUsIG9wdGlvbnMpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1cnZlcywgbmFtZSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY3VydmUgPSBuZXcgUHJlc2V0Q3VydmUob3B0aW9ucyk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VydmVzLCBuYW1lLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGN1cnZlLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gY3VydmU7XG4gICAgfSxcbiAgfSk7XG59XG5cbmRlZmluZUN1cnZlKCdwMTkyJywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogJ3AxOTInLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnLFxuICBhOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmMnLFxuICBiOiAnNjQyMTA1MTkgZTU5YzgwZTcgMGZhN2U5YWIgNzIyNDMwNDkgZmViOGRlZWMgYzE0NmI5YjEnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgOTlkZWY4MzYgMTQ2YmM5YjEgYjRkMjI4MzEnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMTg4ZGE4MGUgYjAzMDkwZjYgN2NiZjIwZWIgNDNhMTg4MDAgZjRmZjBhZmQgODJmZjEwMTInLFxuICAgICcwNzE5MmI5NSBmZmM4ZGE3OCA2MzEwMTFlZCA2YjI0Y2RkNSA3M2Y5NzdhMSAxZTc5NDgxMScsXG4gIF0sXG59KTtcblxuZGVmaW5lQ3VydmUoJ3AyMjQnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiAncDIyNCcsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMScsXG4gIGE6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZScsXG4gIGI6ICdiNDA1MGE4NSAwYzA0YjNhYiBmNTQxMzI1NiA1MDQ0YjBiNyBkN2JmZDhiYSAyNzBiMzk0MyAyMzU1ZmZiNCcsXG4gIG46ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmMTZhMiBlMGI4ZjAzZSAxM2RkMjk0NSA1YzVjMmEzZCcsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICdiNzBlMGNiZCA2YmI0YmY3ZiAzMjEzOTBiOSA0YTAzYzFkMyA1NmMyMTEyMiAzNDMyODBkNiAxMTVjMWQyMScsXG4gICAgJ2JkMzc2Mzg4IGI1ZjcyM2ZiIDRjMjJkZmU2IGNkNDM3NWEwIDVhMDc0NzY0IDQ0ZDU4MTk5IDg1MDA3ZTM0JyxcbiAgXSxcbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDI1NicsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6IG51bGwsXG4gIHA6ICdmZmZmZmZmZiAwMDAwMDAwMSAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZicsXG4gIGE6ICdmZmZmZmZmZiAwMDAwMDAwMSAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmYycsXG4gIGI6ICc1YWM2MzVkOCBhYTNhOTNlNyBiM2ViYmQ1NSA3Njk4ODZiYyA2NTFkMDZiMCBjYzUzYjBmNiAzYmNlM2MzZSAyN2QyNjA0YicsXG4gIG46ICdmZmZmZmZmZiAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBiY2U2ZmFhZCBhNzE3OWU4NCBmM2I5Y2FjMiBmYzYzMjU1MScsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICc2YjE3ZDFmMiBlMTJjNDI0NyBmOGJjZTZlNSA2M2E0NDBmMiA3NzAzN2Q4MSAyZGViMzNhMCBmNGExMzk0NSBkODk4YzI5NicsXG4gICAgJzRmZTM0MmUyIGZlMWE3ZjliIDhlZTdlYjRhIDdjMGY5ZTE2IDJiY2UzMzU3IDZiMzE1ZWNlIGNiYjY0MDY4IDM3YmY1MWY1JyxcbiAgXSxcbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDM4NCcsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6IG51bGwsXG4gIHA6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZlIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZmJyxcbiAgYTogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmUgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgZmZmZmZmZmMnLFxuICBiOiAnYjMzMTJmYTcgZTIzZWU3ZTQgOTg4ZTA1NmIgZTNmODJkMTkgMTgxZDljNmUgZmU4MTQxMTIgMDMxNDA4OGYgJyArXG4gICAgICc1MDEzODc1YSBjNjU2Mzk4ZCA4YTJlZDE5ZCAyYTg1YzhlZCBkM2VjMmFlZicsXG4gIG46ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBjNzYzNGQ4MSAnICtcbiAgICAgJ2Y0MzcyZGRmIDU4MWEwZGIyIDQ4YjBhNzdhIGVjZWMxOTZhIGNjYzUyOTczJyxcbiAgaGFzaDogaGFzaC5zaGEzODQsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJ2FhODdjYTIyIGJlOGIwNTM3IDhlYjFjNzFlIGYzMjBhZDc0IDZlMWQzYjYyIDhiYTc5Yjk4IDU5Zjc0MWUwIDgyNTQyYTM4ICcgK1xuICAgICc1NTAyZjI1ZCBiZjU1Mjk2YyAzYTU0NWUzOCA3Mjc2MGFiNycsXG4gICAgJzM2MTdkZTRhIDk2MjYyYzZmIDVkOWU5OGJmIDkyOTJkYzI5IGY4ZjQxZGJkIDI4OWExNDdjIGU5ZGEzMTEzIGI1ZjBiOGMwICcgK1xuICAgICcwYTYwYjFjZSAxZDdlODE5ZCA3YTQzMWQ3YyA5MGVhMGU1ZicsXG4gIF0sXG59KTtcblxuZGVmaW5lQ3VydmUoJ3A1MjEnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiBudWxsLFxuICBwOiAnMDAwMDAxZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmJyxcbiAgYTogJzAwMDAwMWZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmYycsXG4gIGI6ICcwMDAwMDA1MSA5NTNlYjk2MSA4ZTFjOWExZiA5MjlhMjFhMCBiNjg1NDBlZSBhMmRhNzI1YiAnICtcbiAgICAgJzk5YjMxNWYzIGI4YjQ4OTkxIDhlZjEwOWUxIDU2MTkzOTUxIGVjN2U5MzdiIDE2NTJjMGJkICcgK1xuICAgICAnM2JiMWJmMDcgMzU3M2RmODggM2QyYzM0ZjEgZWY0NTFmZDQgNmI1MDNmMDAnLFxuICBuOiAnMDAwMDAxZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmYSA1MTg2ODc4MyBiZjJmOTY2YiA3ZmNjMDE0OCAnICtcbiAgICAgJ2Y3MDlhNWQwIDNiYjVjOWI4IDg5OWM0N2FlIGJiNmZiNzFlIDkxMzg2NDA5JyxcbiAgaGFzaDogaGFzaC5zaGE1MTIsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzAwMDAwMGM2IDg1OGUwNmI3IDA0MDRlOWNkIDllM2VjYjY2IDIzOTViNDQyIDljNjQ4MTM5ICcgK1xuICAgICcwNTNmYjUyMSBmODI4YWY2MCA2YjRkM2RiYSBhMTRiNWU3NyBlZmU3NTkyOCBmZTFkYzEyNyAnICtcbiAgICAnYTJmZmE4ZGUgMzM0OGIzYzEgODU2YTQyOWIgZjk3ZTdlMzEgYzJlNWJkNjYnLFxuICAgICcwMDAwMDExOCAzOTI5NmE3OCA5YTNiYzAwNCA1YzhhNWZiNCAyYzdkMWJkOSA5OGY1NDQ0OSAnICtcbiAgICAnNTc5YjQ0NjggMTdhZmJkMTcgMjczZTY2MmMgOTdlZTcyOTkgNWVmNDI2NDAgYzU1MGI5MDEgJyArXG4gICAgJzNmYWQwNzYxIDM1M2M3MDg2IGEyNzJjMjQwIDg4YmU5NDc2IDlmZDE2NjUwJyxcbiAgXSxcbn0pO1xuXG5kZWZpbmVDdXJ2ZSgnY3VydmUyNTUxOScsIHtcbiAgdHlwZTogJ21vbnQnLFxuICBwcmltZTogJ3AyNTUxOScsXG4gIHA6ICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyxcbiAgYTogJzc2ZDA2JyxcbiAgYjogJzEnLFxuICBuOiAnMTAwMDAwMDAwMDAwMDAwMCAwMDAwMDAwMDAwMDAwMDAwIDE0ZGVmOWRlYTJmNzljZDYgNTgxMjYzMWE1Y2Y1ZDNlZCcsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICc5JyxcbiAgXSxcbn0pO1xuXG5kZWZpbmVDdXJ2ZSgnZWQyNTUxOScsIHtcbiAgdHlwZTogJ2Vkd2FyZHMnLFxuICBwcmltZTogJ3AyNTUxOScsXG4gIHA6ICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyxcbiAgYTogJy0xJyxcbiAgYzogJzEnLFxuICAvLyAtMTIxNjY1ICogKDEyMTY2Nl4oLTEpKSAobW9kIFApXG4gIGQ6ICc1MjAzNmNlZTJiNmZmZTczIDhjYzc0MDc5Nzc3OWU4OTggMDA3MDBhNGQ0MTQxZDhhYiA3NWViNGRjYTEzNTk3OGEzJyxcbiAgbjogJzEwMDAwMDAwMDAwMDAwMDAgMDAwMDAwMDAwMDAwMDAwMCAxNGRlZjlkZWEyZjc5Y2Q2IDU4MTI2MzFhNWNmNWQzZWQnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMjE2OTM2ZDNjZDZlNTNmZWMwYTRlMjMxZmRkNmRjNWM2OTJjYzc2MDk1MjVhN2IyYzk1NjJkNjA4ZjI1ZDUxYScsXG5cbiAgICAvLyA0LzVcbiAgICAnNjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY1OCcsXG4gIF0sXG59KTtcblxudmFyIHByZTtcbnRyeSB7XG4gIHByZSA9IHJlcXVpcmUoJy4vcHJlY29tcHV0ZWQvc2VjcDI1NmsxJyk7XG59IGNhdGNoIChlKSB7XG4gIHByZSA9IHVuZGVmaW5lZDtcbn1cblxuZGVmaW5lQ3VydmUoJ3NlY3AyNTZrMScsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6ICdrMjU2JyxcbiAgcDogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmJyxcbiAgYTogJzAnLFxuICBiOiAnNycsXG4gIG46ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBiYWFlZGNlNiBhZjQ4YTAzYiBiZmQyNWU4YyBkMDM2NDE0MScsXG4gIGg6ICcxJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG5cbiAgLy8gUHJlY29tcHV0ZWQgZW5kb21vcnBoaXNtXG4gIGJldGE6ICc3YWU5NmEyYjY1N2MwNzEwNmU2NDQ3OWVhYzM0MzRlOTljZjA0OTc1MTJmNTg5OTVjMTM5NmMyODcxOTUwMWVlJyxcbiAgbGFtYmRhOiAnNTM2M2FkNGNjMDVjMzBlMGE1MjYxYzAyODgxMjY0NWExMjJlMjJlYTIwODE2Njc4ZGYwMjk2N2MxYjIzYmQ3MicsXG4gIGJhc2lzOiBbXG4gICAge1xuICAgICAgYTogJzMwODZkMjIxYTdkNDZiY2RlODZjOTBlNDkyODRlYjE1JyxcbiAgICAgIGI6ICctZTQ0MzdlZDYwMTBlODgyODZmNTQ3ZmE5MGFiZmU0YzMnLFxuICAgIH0sXG4gICAge1xuICAgICAgYTogJzExNGNhNTBmN2E4ZTJmM2Y2NTdjMTEwOGQ5ZDQ0Y2ZkOCcsXG4gICAgICBiOiAnMzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTUnLFxuICAgIH0sXG4gIF0sXG5cbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnNzliZTY2N2VmOWRjYmJhYzU1YTA2Mjk1Y2U4NzBiMDcwMjliZmNkYjJkY2UyOGQ5NTlmMjgxNWIxNmY4MTc5OCcsXG4gICAgJzQ4M2FkYTc3MjZhM2M0NjU1ZGE0ZmJmYzBlMTEwOGE4ZmQxN2I0NDhhNjg1NTQxOTljNDdkMDhmZmIxMGQ0YjgnLFxuICAgIHByZSxcbiAgXSxcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzaCA9IHJlcXVpcmUoJ2hhc2guanMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1jcnlwdG8tdXRpbHMnKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbmZ1bmN0aW9uIEhtYWNEUkJHKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEhtYWNEUkJHKSlcbiAgICByZXR1cm4gbmV3IEhtYWNEUkJHKG9wdGlvbnMpO1xuICB0aGlzLmhhc2ggPSBvcHRpb25zLmhhc2g7XG4gIHRoaXMucHJlZFJlc2lzdCA9ICEhb3B0aW9ucy5wcmVkUmVzaXN0O1xuXG4gIHRoaXMub3V0TGVuID0gdGhpcy5oYXNoLm91dFNpemU7XG4gIHRoaXMubWluRW50cm9weSA9IG9wdGlvbnMubWluRW50cm9weSB8fCB0aGlzLmhhc2guaG1hY1N0cmVuZ3RoO1xuXG4gIHRoaXMuX3Jlc2VlZCA9IG51bGw7XG4gIHRoaXMucmVzZWVkSW50ZXJ2YWwgPSBudWxsO1xuICB0aGlzLksgPSBudWxsO1xuICB0aGlzLlYgPSBudWxsO1xuXG4gIHZhciBlbnRyb3B5ID0gdXRpbHMudG9BcnJheShvcHRpb25zLmVudHJvcHksIG9wdGlvbnMuZW50cm9weUVuYyB8fCAnaGV4Jyk7XG4gIHZhciBub25jZSA9IHV0aWxzLnRvQXJyYXkob3B0aW9ucy5ub25jZSwgb3B0aW9ucy5ub25jZUVuYyB8fCAnaGV4Jyk7XG4gIHZhciBwZXJzID0gdXRpbHMudG9BcnJheShvcHRpb25zLnBlcnMsIG9wdGlvbnMucGVyc0VuYyB8fCAnaGV4Jyk7XG4gIGFzc2VydChlbnRyb3B5Lmxlbmd0aCA+PSAodGhpcy5taW5FbnRyb3B5IC8gOCksXG4gICAgICAgICAnTm90IGVub3VnaCBlbnRyb3B5LiBNaW5pbXVtIGlzOiAnICsgdGhpcy5taW5FbnRyb3B5ICsgJyBiaXRzJyk7XG4gIHRoaXMuX2luaXQoZW50cm9weSwgbm9uY2UsIHBlcnMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBIbWFjRFJCRztcblxuSG1hY0RSQkcucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdChlbnRyb3B5LCBub25jZSwgcGVycykge1xuICB2YXIgc2VlZCA9IGVudHJvcHkuY29uY2F0KG5vbmNlKS5jb25jYXQocGVycyk7XG5cbiAgdGhpcy5LID0gbmV3IEFycmF5KHRoaXMub3V0TGVuIC8gOCk7XG4gIHRoaXMuViA9IG5ldyBBcnJheSh0aGlzLm91dExlbiAvIDgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuVi5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMuS1tpXSA9IDB4MDA7XG4gICAgdGhpcy5WW2ldID0gMHgwMTtcbiAgfVxuXG4gIHRoaXMuX3VwZGF0ZShzZWVkKTtcbiAgdGhpcy5fcmVzZWVkID0gMTtcbiAgdGhpcy5yZXNlZWRJbnRlcnZhbCA9IDB4MTAwMDAwMDAwMDAwMDsgIC8vIDJeNDhcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5faG1hYyA9IGZ1bmN0aW9uIGhtYWMoKSB7XG4gIHJldHVybiBuZXcgaGFzaC5obWFjKHRoaXMuaGFzaCwgdGhpcy5LKTtcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKHNlZWQpIHtcbiAgdmFyIGttYWMgPSB0aGlzLl9obWFjKClcbiAgICAgICAgICAgICAgICAgLnVwZGF0ZSh0aGlzLlYpXG4gICAgICAgICAgICAgICAgIC51cGRhdGUoWyAweDAwIF0pO1xuICBpZiAoc2VlZClcbiAgICBrbWFjID0ga21hYy51cGRhdGUoc2VlZCk7XG4gIHRoaXMuSyA9IGttYWMuZGlnZXN0KCk7XG4gIHRoaXMuViA9IHRoaXMuX2htYWMoKS51cGRhdGUodGhpcy5WKS5kaWdlc3QoKTtcbiAgaWYgKCFzZWVkKVxuICAgIHJldHVybjtcblxuICB0aGlzLksgPSB0aGlzLl9obWFjKClcbiAgICAgICAgICAgICAgIC51cGRhdGUodGhpcy5WKVxuICAgICAgICAgICAgICAgLnVwZGF0ZShbIDB4MDEgXSlcbiAgICAgICAgICAgICAgIC51cGRhdGUoc2VlZClcbiAgICAgICAgICAgICAgIC5kaWdlc3QoKTtcbiAgdGhpcy5WID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpO1xufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLnJlc2VlZCA9IGZ1bmN0aW9uIHJlc2VlZChlbnRyb3B5LCBlbnRyb3B5RW5jLCBhZGQsIGFkZEVuYykge1xuICAvLyBPcHRpb25hbCBlbnRyb3B5IGVuY1xuICBpZiAodHlwZW9mIGVudHJvcHlFbmMgIT09ICdzdHJpbmcnKSB7XG4gICAgYWRkRW5jID0gYWRkO1xuICAgIGFkZCA9IGVudHJvcHlFbmM7XG4gICAgZW50cm9weUVuYyA9IG51bGw7XG4gIH1cblxuICBlbnRyb3B5ID0gdXRpbHMudG9BcnJheShlbnRyb3B5LCBlbnRyb3B5RW5jKTtcbiAgYWRkID0gdXRpbHMudG9BcnJheShhZGQsIGFkZEVuYyk7XG5cbiAgYXNzZXJ0KGVudHJvcHkubGVuZ3RoID49ICh0aGlzLm1pbkVudHJvcHkgLyA4KSxcbiAgICAgICAgICdOb3QgZW5vdWdoIGVudHJvcHkuIE1pbmltdW0gaXM6ICcgKyB0aGlzLm1pbkVudHJvcHkgKyAnIGJpdHMnKTtcblxuICB0aGlzLl91cGRhdGUoZW50cm9weS5jb25jYXQoYWRkIHx8IFtdKSk7XG4gIHRoaXMuX3Jlc2VlZCA9IDE7XG59O1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuZ2VuZXJhdGUgPSBmdW5jdGlvbiBnZW5lcmF0ZShsZW4sIGVuYywgYWRkLCBhZGRFbmMpIHtcbiAgaWYgKHRoaXMuX3Jlc2VlZCA+IHRoaXMucmVzZWVkSW50ZXJ2YWwpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdSZXNlZWQgaXMgcmVxdWlyZWQnKTtcblxuICAvLyBPcHRpb25hbCBlbmNvZGluZ1xuICBpZiAodHlwZW9mIGVuYyAhPT0gJ3N0cmluZycpIHtcbiAgICBhZGRFbmMgPSBhZGQ7XG4gICAgYWRkID0gZW5jO1xuICAgIGVuYyA9IG51bGw7XG4gIH1cblxuICAvLyBPcHRpb25hbCBhZGRpdGlvbmFsIGRhdGFcbiAgaWYgKGFkZCkge1xuICAgIGFkZCA9IHV0aWxzLnRvQXJyYXkoYWRkLCBhZGRFbmMgfHwgJ2hleCcpO1xuICAgIHRoaXMuX3VwZGF0ZShhZGQpO1xuICB9XG5cbiAgdmFyIHRlbXAgPSBbXTtcbiAgd2hpbGUgKHRlbXAubGVuZ3RoIDwgbGVuKSB7XG4gICAgdGhpcy5WID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpO1xuICAgIHRlbXAgPSB0ZW1wLmNvbmNhdCh0aGlzLlYpO1xuICB9XG5cbiAgdmFyIHJlcyA9IHRlbXAuc2xpY2UoMCwgbGVuKTtcbiAgdGhpcy5fdXBkYXRlKGFkZCk7XG4gIHRoaXMuX3Jlc2VlZCsrO1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHJlcywgZW5jKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gS2V5UGFpcihlYywgb3B0aW9ucykge1xuICB0aGlzLmVjID0gZWM7XG4gIHRoaXMucHJpdiA9IG51bGw7XG4gIHRoaXMucHViID0gbnVsbDtcblxuICAvLyBLZXlQYWlyKGVjLCB7IHByaXY6IC4uLiwgcHViOiAuLi4gfSlcbiAgaWYgKG9wdGlvbnMucHJpdilcbiAgICB0aGlzLl9pbXBvcnRQcml2YXRlKG9wdGlvbnMucHJpdiwgb3B0aW9ucy5wcml2RW5jKTtcbiAgaWYgKG9wdGlvbnMucHViKVxuICAgIHRoaXMuX2ltcG9ydFB1YmxpYyhvcHRpb25zLnB1Yiwgb3B0aW9ucy5wdWJFbmMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBLZXlQYWlyO1xuXG5LZXlQYWlyLmZyb21QdWJsaWMgPSBmdW5jdGlvbiBmcm9tUHVibGljKGVjLCBwdWIsIGVuYykge1xuICBpZiAocHViIGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gcHViO1xuXG4gIHJldHVybiBuZXcgS2V5UGFpcihlYywge1xuICAgIHB1YjogcHViLFxuICAgIHB1YkVuYzogZW5jLFxuICB9KTtcbn07XG5cbktleVBhaXIuZnJvbVByaXZhdGUgPSBmdW5jdGlvbiBmcm9tUHJpdmF0ZShlYywgcHJpdiwgZW5jKSB7XG4gIGlmIChwcml2IGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gcHJpdjtcblxuICByZXR1cm4gbmV3IEtleVBhaXIoZWMsIHtcbiAgICBwcml2OiBwcml2LFxuICAgIHByaXZFbmM6IGVuYyxcbiAgfSk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKCkge1xuICB2YXIgcHViID0gdGhpcy5nZXRQdWJsaWMoKTtcblxuICBpZiAocHViLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4geyByZXN1bHQ6IGZhbHNlLCByZWFzb246ICdJbnZhbGlkIHB1YmxpYyBrZXknIH07XG4gIGlmICghcHViLnZhbGlkYXRlKCkpXG4gICAgcmV0dXJuIHsgcmVzdWx0OiBmYWxzZSwgcmVhc29uOiAnUHVibGljIGtleSBpcyBub3QgYSBwb2ludCcgfTtcbiAgaWYgKCFwdWIubXVsKHRoaXMuZWMuY3VydmUubikuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB7IHJlc3VsdDogZmFsc2UsIHJlYXNvbjogJ1B1YmxpYyBrZXkgKiBOICE9IE8nIH07XG5cbiAgcmV0dXJuIHsgcmVzdWx0OiB0cnVlLCByZWFzb246IG51bGwgfTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFB1YmxpYyA9IGZ1bmN0aW9uIGdldFB1YmxpYyhjb21wYWN0LCBlbmMpIHtcbiAgLy8gY29tcGFjdCBpcyBvcHRpb25hbCBhcmd1bWVudFxuICBpZiAodHlwZW9mIGNvbXBhY3QgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jID0gY29tcGFjdDtcbiAgICBjb21wYWN0ID0gbnVsbDtcbiAgfVxuXG4gIGlmICghdGhpcy5wdWIpXG4gICAgdGhpcy5wdWIgPSB0aGlzLmVjLmcubXVsKHRoaXMucHJpdik7XG5cbiAgaWYgKCFlbmMpXG4gICAgcmV0dXJuIHRoaXMucHViO1xuXG4gIHJldHVybiB0aGlzLnB1Yi5lbmNvZGUoZW5jLCBjb21wYWN0KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFByaXZhdGUgPSBmdW5jdGlvbiBnZXRQcml2YXRlKGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdGhpcy5wcml2LnRvU3RyaW5nKDE2LCAyKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLnByaXY7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5faW1wb3J0UHJpdmF0ZSA9IGZ1bmN0aW9uIF9pbXBvcnRQcml2YXRlKGtleSwgZW5jKSB7XG4gIHRoaXMucHJpdiA9IG5ldyBCTihrZXksIGVuYyB8fCAxNik7XG5cbiAgLy8gRW5zdXJlIHRoYXQgdGhlIHByaXYgd29uJ3QgYmUgYmlnZ2VyIHRoYW4gbiwgb3RoZXJ3aXNlIHdlIG1heSBmYWlsXG4gIC8vIGluIGZpeGVkIG11bHRpcGxpY2F0aW9uIG1ldGhvZFxuICB0aGlzLnByaXYgPSB0aGlzLnByaXYudW1vZCh0aGlzLmVjLmN1cnZlLm4pO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuX2ltcG9ydFB1YmxpYyA9IGZ1bmN0aW9uIF9pbXBvcnRQdWJsaWMoa2V5LCBlbmMpIHtcbiAgaWYgKGtleS54IHx8IGtleS55KSB7XG4gICAgLy8gTW9udGdvbWVyeSBwb2ludHMgb25seSBoYXZlIGFuIGB4YCBjb29yZGluYXRlLlxuICAgIC8vIFdlaWVyc3RyYXNzL0Vkd2FyZHMgcG9pbnRzIG9uIHRoZSBvdGhlciBoYW5kIGhhdmUgYm90aCBgeGAgYW5kXG4gICAgLy8gYHlgIGNvb3JkaW5hdGVzLlxuICAgIGlmICh0aGlzLmVjLmN1cnZlLnR5cGUgPT09ICdtb250Jykge1xuICAgICAgYXNzZXJ0KGtleS54LCAnTmVlZCB4IGNvb3JkaW5hdGUnKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZWMuY3VydmUudHlwZSA9PT0gJ3Nob3J0JyB8fFxuICAgICAgICAgICAgICAgdGhpcy5lYy5jdXJ2ZS50eXBlID09PSAnZWR3YXJkcycpIHtcbiAgICAgIGFzc2VydChrZXkueCAmJiBrZXkueSwgJ05lZWQgYm90aCB4IGFuZCB5IGNvb3JkaW5hdGUnKTtcbiAgICB9XG4gICAgdGhpcy5wdWIgPSB0aGlzLmVjLmN1cnZlLnBvaW50KGtleS54LCBrZXkueSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMucHViID0gdGhpcy5lYy5jdXJ2ZS5kZWNvZGVQb2ludChrZXksIGVuYyk7XG59O1xuXG4vLyBFQ0RIXG5LZXlQYWlyLnByb3RvdHlwZS5kZXJpdmUgPSBmdW5jdGlvbiBkZXJpdmUocHViKSB7XG4gIGlmKCFwdWIudmFsaWRhdGUoKSkge1xuICAgIGFzc2VydChwdWIudmFsaWRhdGUoKSwgJ3B1YmxpYyBwb2ludCBub3QgdmFsaWRhdGVkJyk7XG4gIH1cbiAgcmV0dXJuIHB1Yi5tdWwodGhpcy5wcml2KS5nZXRYKCk7XG59O1xuXG4vLyBFQ0RTQVxuS2V5UGFpci5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obXNnLCBlbmMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRoaXMuZWMuc2lnbihtc2csIHRoaXMsIGVuYywgb3B0aW9ucyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobXNnLCBzaWduYXR1cmUpIHtcbiAgcmV0dXJuIHRoaXMuZWMudmVyaWZ5KG1zZywgc2lnbmF0dXJlLCB0aGlzKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICByZXR1cm4gJzxLZXkgcHJpdjogJyArICh0aGlzLnByaXYgJiYgdGhpcy5wcml2LnRvU3RyaW5nKDE2LCAyKSkgK1xuICAgICAgICAgJyBwdWI6ICcgKyAodGhpcy5wdWIgJiYgdGhpcy5wdWIuaW5zcGVjdCgpKSArICcgPic7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gU2lnbmF0dXJlKG9wdGlvbnMsIGVuYykge1xuICBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIFNpZ25hdHVyZSlcbiAgICByZXR1cm4gb3B0aW9ucztcblxuICBpZiAodGhpcy5faW1wb3J0REVSKG9wdGlvbnMsIGVuYykpXG4gICAgcmV0dXJuO1xuXG4gIGFzc2VydChvcHRpb25zLnIgJiYgb3B0aW9ucy5zLCAnU2lnbmF0dXJlIHdpdGhvdXQgciBvciBzJyk7XG4gIHRoaXMuciA9IG5ldyBCTihvcHRpb25zLnIsIDE2KTtcbiAgdGhpcy5zID0gbmV3IEJOKG9wdGlvbnMucywgMTYpO1xuICBpZiAob3B0aW9ucy5yZWNvdmVyeVBhcmFtID09PSB1bmRlZmluZWQpXG4gICAgdGhpcy5yZWNvdmVyeVBhcmFtID0gbnVsbDtcbiAgZWxzZVxuICAgIHRoaXMucmVjb3ZlcnlQYXJhbSA9IG9wdGlvbnMucmVjb3ZlcnlQYXJhbTtcbn1cbm1vZHVsZS5leHBvcnRzID0gU2lnbmF0dXJlO1xuXG5mdW5jdGlvbiBQb3NpdGlvbigpIHtcbiAgdGhpcy5wbGFjZSA9IDA7XG59XG5cbmZ1bmN0aW9uIGdldExlbmd0aChidWYsIHApIHtcbiAgdmFyIGluaXRpYWwgPSBidWZbcC5wbGFjZSsrXTtcbiAgaWYgKCEoaW5pdGlhbCAmIDB4ODApKSB7XG4gICAgcmV0dXJuIGluaXRpYWw7XG4gIH1cbiAgdmFyIG9jdGV0TGVuID0gaW5pdGlhbCAmIDB4ZjtcblxuICAvLyBJbmRlZmluaXRlIGxlbmd0aCBvciBvdmVyZmxvd1xuICBpZiAob2N0ZXRMZW4gPT09IDAgfHwgb2N0ZXRMZW4gPiA0KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHZhbCA9IDA7XG4gIGZvciAodmFyIGkgPSAwLCBvZmYgPSBwLnBsYWNlOyBpIDwgb2N0ZXRMZW47IGkrKywgb2ZmKyspIHtcbiAgICB2YWwgPDw9IDg7XG4gICAgdmFsIHw9IGJ1ZltvZmZdO1xuICAgIHZhbCA+Pj49IDA7XG4gIH1cblxuICAvLyBMZWFkaW5nIHplcm9lc1xuICBpZiAodmFsIDw9IDB4N2YpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwLnBsYWNlID0gb2ZmO1xuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBybVBhZGRpbmcoYnVmKSB7XG4gIHZhciBpID0gMDtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGggLSAxO1xuICB3aGlsZSAoIWJ1ZltpXSAmJiAhKGJ1ZltpICsgMV0gJiAweDgwKSAmJiBpIDwgbGVuKSB7XG4gICAgaSsrO1xuICB9XG4gIGlmIChpID09PSAwKSB7XG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxuICByZXR1cm4gYnVmLnNsaWNlKGkpO1xufVxuXG5TaWduYXR1cmUucHJvdG90eXBlLl9pbXBvcnRERVIgPSBmdW5jdGlvbiBfaW1wb3J0REVSKGRhdGEsIGVuYykge1xuICBkYXRhID0gdXRpbHMudG9BcnJheShkYXRhLCBlbmMpO1xuICB2YXIgcCA9IG5ldyBQb3NpdGlvbigpO1xuICBpZiAoZGF0YVtwLnBsYWNlKytdICE9PSAweDMwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsZW4gPSBnZXRMZW5ndGgoZGF0YSwgcCk7XG4gIGlmIChsZW4gPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICgobGVuICsgcC5wbGFjZSkgIT09IGRhdGEubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChkYXRhW3AucGxhY2UrK10gIT09IDB4MDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHJsZW4gPSBnZXRMZW5ndGgoZGF0YSwgcCk7XG4gIGlmIChybGVuID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgciA9IGRhdGEuc2xpY2UocC5wbGFjZSwgcmxlbiArIHAucGxhY2UpO1xuICBwLnBsYWNlICs9IHJsZW47XG4gIGlmIChkYXRhW3AucGxhY2UrK10gIT09IDB4MDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHNsZW4gPSBnZXRMZW5ndGgoZGF0YSwgcCk7XG4gIGlmIChzbGVuID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZGF0YS5sZW5ndGggIT09IHNsZW4gKyBwLnBsYWNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBzID0gZGF0YS5zbGljZShwLnBsYWNlLCBzbGVuICsgcC5wbGFjZSk7XG4gIGlmIChyWzBdID09PSAwKSB7XG4gICAgaWYgKHJbMV0gJiAweDgwKSB7XG4gICAgICByID0gci5zbGljZSgxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGVhZGluZyB6ZXJvZXNcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKHNbMF0gPT09IDApIHtcbiAgICBpZiAoc1sxXSAmIDB4ODApIHtcbiAgICAgIHMgPSBzLnNsaWNlKDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMZWFkaW5nIHplcm9lc1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuciA9IG5ldyBCTihyKTtcbiAgdGhpcy5zID0gbmV3IEJOKHMpO1xuICB0aGlzLnJlY292ZXJ5UGFyYW0gPSBudWxsO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gY29uc3RydWN0TGVuZ3RoKGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPCAweDgwKSB7XG4gICAgYXJyLnB1c2gobGVuKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG9jdGV0cyA9IDEgKyAoTWF0aC5sb2cobGVuKSAvIE1hdGguTE4yID4+PiAzKTtcbiAgYXJyLnB1c2gob2N0ZXRzIHwgMHg4MCk7XG4gIHdoaWxlICgtLW9jdGV0cykge1xuICAgIGFyci5wdXNoKChsZW4gPj4+IChvY3RldHMgPDwgMykpICYgMHhmZik7XG4gIH1cbiAgYXJyLnB1c2gobGVuKTtcbn1cblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b0RFUiA9IGZ1bmN0aW9uIHRvREVSKGVuYykge1xuICB2YXIgciA9IHRoaXMuci50b0FycmF5KCk7XG4gIHZhciBzID0gdGhpcy5zLnRvQXJyYXkoKTtcblxuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChyWzBdICYgMHg4MClcbiAgICByID0gWyAwIF0uY29uY2F0KHIpO1xuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChzWzBdICYgMHg4MClcbiAgICBzID0gWyAwIF0uY29uY2F0KHMpO1xuXG4gIHIgPSBybVBhZGRpbmcocik7XG4gIHMgPSBybVBhZGRpbmcocyk7XG5cbiAgd2hpbGUgKCFzWzBdICYmICEoc1sxXSAmIDB4ODApKSB7XG4gICAgcyA9IHMuc2xpY2UoMSk7XG4gIH1cbiAgdmFyIGFyciA9IFsgMHgwMiBdO1xuICBjb25zdHJ1Y3RMZW5ndGgoYXJyLCByLmxlbmd0aCk7XG4gIGFyciA9IGFyci5jb25jYXQocik7XG4gIGFyci5wdXNoKDB4MDIpO1xuICBjb25zdHJ1Y3RMZW5ndGgoYXJyLCBzLmxlbmd0aCk7XG4gIHZhciBiYWNrSGFsZiA9IGFyci5jb25jYXQocyk7XG4gIHZhciByZXMgPSBbIDB4MzAgXTtcbiAgY29uc3RydWN0TGVuZ3RoKHJlcywgYmFja0hhbGYubGVuZ3RoKTtcbiAgcmVzID0gcmVzLmNvbmNhdChiYWNrSGFsZik7XG4gIHJldHVybiB1dGlscy5lbmNvZGUocmVzLCBlbmMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBIbWFjRFJCRyA9IHJlcXVpcmUoJ2htYWMtZHJiZycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjdXJ2ZXMgPSByZXF1aXJlKCcuLi9jdXJ2ZXMnKTtcbnZhciByYW5kID0gcmVxdWlyZSgnYnJvcmFuZCcpO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxudmFyIEtleVBhaXIgPSByZXF1aXJlKCcuL2tleScpO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4vc2lnbmF0dXJlJyk7XG5cbmZ1bmN0aW9uIEVDKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEVDKSlcbiAgICByZXR1cm4gbmV3IEVDKG9wdGlvbnMpO1xuXG4gIC8vIFNob3J0Y3V0IGBlbGxpcHRpYy5lYyhjdXJ2ZS1uYW1lKWBcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgIGFzc2VydChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY3VydmVzLCBvcHRpb25zKSxcbiAgICAgICdVbmtub3duIGN1cnZlICcgKyBvcHRpb25zKTtcblxuICAgIG9wdGlvbnMgPSBjdXJ2ZXNbb3B0aW9uc107XG4gIH1cblxuICAvLyBTaG9ydGN1dCBmb3IgYGVsbGlwdGljLmVjKGVsbGlwdGljLmN1cnZlcy5jdXJ2ZU5hbWUpYFxuICBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIGN1cnZlcy5QcmVzZXRDdXJ2ZSlcbiAgICBvcHRpb25zID0geyBjdXJ2ZTogb3B0aW9ucyB9O1xuXG4gIHRoaXMuY3VydmUgPSBvcHRpb25zLmN1cnZlLmN1cnZlO1xuICB0aGlzLm4gPSB0aGlzLmN1cnZlLm47XG4gIHRoaXMubmggPSB0aGlzLm4udXNocm4oMSk7XG4gIHRoaXMuZyA9IHRoaXMuY3VydmUuZztcblxuICAvLyBQb2ludCBvbiBjdXJ2ZVxuICB0aGlzLmcgPSBvcHRpb25zLmN1cnZlLmc7XG4gIHRoaXMuZy5wcmVjb21wdXRlKG9wdGlvbnMuY3VydmUubi5iaXRMZW5ndGgoKSArIDEpO1xuXG4gIC8vIEhhc2ggZm9yIGZ1bmN0aW9uIGZvciBEUkJHXG4gIHRoaXMuaGFzaCA9IG9wdGlvbnMuaGFzaCB8fCBvcHRpb25zLmN1cnZlLmhhc2g7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEVDO1xuXG5FQy5wcm90b3R5cGUua2V5UGFpciA9IGZ1bmN0aW9uIGtleVBhaXIob3B0aW9ucykge1xuICByZXR1cm4gbmV3IEtleVBhaXIodGhpcywgb3B0aW9ucyk7XG59O1xuXG5FQy5wcm90b3R5cGUua2V5RnJvbVByaXZhdGUgPSBmdW5jdGlvbiBrZXlGcm9tUHJpdmF0ZShwcml2LCBlbmMpIHtcbiAgcmV0dXJuIEtleVBhaXIuZnJvbVByaXZhdGUodGhpcywgcHJpdiwgZW5jKTtcbn07XG5cbkVDLnByb3RvdHlwZS5rZXlGcm9tUHVibGljID0gZnVuY3Rpb24ga2V5RnJvbVB1YmxpYyhwdWIsIGVuYykge1xuICByZXR1cm4gS2V5UGFpci5mcm9tUHVibGljKHRoaXMsIHB1YiwgZW5jKTtcbn07XG5cbkVDLnByb3RvdHlwZS5nZW5LZXlQYWlyID0gZnVuY3Rpb24gZ2VuS2V5UGFpcihvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucylcbiAgICBvcHRpb25zID0ge307XG5cbiAgLy8gSW5zdGFudGlhdGUgSG1hY19EUkJHXG4gIHZhciBkcmJnID0gbmV3IEhtYWNEUkJHKHtcbiAgICBoYXNoOiB0aGlzLmhhc2gsXG4gICAgcGVyczogb3B0aW9ucy5wZXJzLFxuICAgIHBlcnNFbmM6IG9wdGlvbnMucGVyc0VuYyB8fCAndXRmOCcsXG4gICAgZW50cm9weTogb3B0aW9ucy5lbnRyb3B5IHx8IHJhbmQodGhpcy5oYXNoLmhtYWNTdHJlbmd0aCksXG4gICAgZW50cm9weUVuYzogb3B0aW9ucy5lbnRyb3B5ICYmIG9wdGlvbnMuZW50cm9weUVuYyB8fCAndXRmOCcsXG4gICAgbm9uY2U6IHRoaXMubi50b0FycmF5KCksXG4gIH0pO1xuXG4gIHZhciBieXRlcyA9IHRoaXMubi5ieXRlTGVuZ3RoKCk7XG4gIHZhciBuczIgPSB0aGlzLm4uc3ViKG5ldyBCTigyKSk7XG4gIGZvciAoOzspIHtcbiAgICB2YXIgcHJpdiA9IG5ldyBCTihkcmJnLmdlbmVyYXRlKGJ5dGVzKSk7XG4gICAgaWYgKHByaXYuY21wKG5zMikgPiAwKVxuICAgICAgY29udGludWU7XG5cbiAgICBwcml2LmlhZGRuKDEpO1xuICAgIHJldHVybiB0aGlzLmtleUZyb21Qcml2YXRlKHByaXYpO1xuICB9XG59O1xuXG5FQy5wcm90b3R5cGUuX3RydW5jYXRlVG9OID0gZnVuY3Rpb24gX3RydW5jYXRlVG9OKG1zZywgdHJ1bmNPbmx5KSB7XG4gIHZhciBkZWx0YSA9IG1zZy5ieXRlTGVuZ3RoKCkgKiA4IC0gdGhpcy5uLmJpdExlbmd0aCgpO1xuICBpZiAoZGVsdGEgPiAwKVxuICAgIG1zZyA9IG1zZy51c2hybihkZWx0YSk7XG4gIGlmICghdHJ1bmNPbmx5ICYmIG1zZy5jbXAodGhpcy5uKSA+PSAwKVxuICAgIHJldHVybiBtc2cuc3ViKHRoaXMubik7XG4gIGVsc2VcbiAgICByZXR1cm4gbXNnO1xufTtcblxuRUMucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKG1zZywga2V5LCBlbmMsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBlbmMgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0aW9ucyA9IGVuYztcbiAgICBlbmMgPSBudWxsO1xuICB9XG4gIGlmICghb3B0aW9ucylcbiAgICBvcHRpb25zID0ge307XG5cbiAga2V5ID0gdGhpcy5rZXlGcm9tUHJpdmF0ZShrZXksIGVuYyk7XG4gIG1zZyA9IHRoaXMuX3RydW5jYXRlVG9OKG5ldyBCTihtc2csIDE2KSk7XG5cbiAgLy8gWmVyby1leHRlbmQga2V5IHRvIHByb3ZpZGUgZW5vdWdoIGVudHJvcHlcbiAgdmFyIGJ5dGVzID0gdGhpcy5uLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIGJrZXkgPSBrZXkuZ2V0UHJpdmF0ZSgpLnRvQXJyYXkoJ2JlJywgYnl0ZXMpO1xuXG4gIC8vIFplcm8tZXh0ZW5kIG5vbmNlIHRvIGhhdmUgdGhlIHNhbWUgYnl0ZSBzaXplIGFzIE5cbiAgdmFyIG5vbmNlID0gbXNnLnRvQXJyYXkoJ2JlJywgYnl0ZXMpO1xuXG4gIC8vIEluc3RhbnRpYXRlIEhtYWNfRFJCR1xuICB2YXIgZHJiZyA9IG5ldyBIbWFjRFJCRyh7XG4gICAgaGFzaDogdGhpcy5oYXNoLFxuICAgIGVudHJvcHk6IGJrZXksXG4gICAgbm9uY2U6IG5vbmNlLFxuICAgIHBlcnM6IG9wdGlvbnMucGVycyxcbiAgICBwZXJzRW5jOiBvcHRpb25zLnBlcnNFbmMgfHwgJ3V0ZjgnLFxuICB9KTtcblxuICAvLyBOdW1iZXIgb2YgYnl0ZXMgdG8gZ2VuZXJhdGVcbiAgdmFyIG5zMSA9IHRoaXMubi5zdWIobmV3IEJOKDEpKTtcblxuICBmb3IgKHZhciBpdGVyID0gMDsgOyBpdGVyKyspIHtcbiAgICB2YXIgayA9IG9wdGlvbnMuayA/XG4gICAgICBvcHRpb25zLmsoaXRlcikgOlxuICAgICAgbmV3IEJOKGRyYmcuZ2VuZXJhdGUodGhpcy5uLmJ5dGVMZW5ndGgoKSkpO1xuICAgIGsgPSB0aGlzLl90cnVuY2F0ZVRvTihrLCB0cnVlKTtcbiAgICBpZiAoay5jbXBuKDEpIDw9IDAgfHwgay5jbXAobnMxKSA+PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICB2YXIga3AgPSB0aGlzLmcubXVsKGspO1xuICAgIGlmIChrcC5pc0luZmluaXR5KCkpXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBrcFggPSBrcC5nZXRYKCk7XG4gICAgdmFyIHIgPSBrcFgudW1vZCh0aGlzLm4pO1xuICAgIGlmIChyLmNtcG4oMCkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBzID0gay5pbnZtKHRoaXMubikubXVsKHIubXVsKGtleS5nZXRQcml2YXRlKCkpLmlhZGQobXNnKSk7XG4gICAgcyA9IHMudW1vZCh0aGlzLm4pO1xuICAgIGlmIChzLmNtcG4oMCkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciByZWNvdmVyeVBhcmFtID0gKGtwLmdldFkoKS5pc09kZCgpID8gMSA6IDApIHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChrcFguY21wKHIpICE9PSAwID8gMiA6IDApO1xuXG4gICAgLy8gVXNlIGNvbXBsZW1lbnQgb2YgYHNgLCBpZiBpdCBpcyA+IGBuIC8gMmBcbiAgICBpZiAob3B0aW9ucy5jYW5vbmljYWwgJiYgcy5jbXAodGhpcy5uaCkgPiAwKSB7XG4gICAgICBzID0gdGhpcy5uLnN1YihzKTtcbiAgICAgIHJlY292ZXJ5UGFyYW0gXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNpZ25hdHVyZSh7IHI6IHIsIHM6IHMsIHJlY292ZXJ5UGFyYW06IHJlY292ZXJ5UGFyYW0gfSk7XG4gIH1cbn07XG5cbkVDLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobXNnLCBzaWduYXR1cmUsIGtleSwgZW5jKSB7XG4gIG1zZyA9IHRoaXMuX3RydW5jYXRlVG9OKG5ldyBCTihtc2csIDE2KSk7XG4gIGtleSA9IHRoaXMua2V5RnJvbVB1YmxpYyhrZXksIGVuYyk7XG4gIHNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoc2lnbmF0dXJlLCAnaGV4Jyk7XG5cbiAgLy8gUGVyZm9ybSBwcmltaXRpdmUgdmFsdWVzIHZhbGlkYXRpb25cbiAgdmFyIHIgPSBzaWduYXR1cmUucjtcbiAgdmFyIHMgPSBzaWduYXR1cmUucztcbiAgaWYgKHIuY21wbigxKSA8IDAgfHwgci5jbXAodGhpcy5uKSA+PSAwKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKHMuY21wbigxKSA8IDAgfHwgcy5jbXAodGhpcy5uKSA+PSAwKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBWYWxpZGF0ZSBzaWduYXR1cmVcbiAgdmFyIHNpbnYgPSBzLmludm0odGhpcy5uKTtcbiAgdmFyIHUxID0gc2ludi5tdWwobXNnKS51bW9kKHRoaXMubik7XG4gIHZhciB1MiA9IHNpbnYubXVsKHIpLnVtb2QodGhpcy5uKTtcbiAgdmFyIHA7XG5cbiAgaWYgKCF0aGlzLmN1cnZlLl9tYXh3ZWxsVHJpY2spIHtcbiAgICBwID0gdGhpcy5nLm11bEFkZCh1MSwga2V5LmdldFB1YmxpYygpLCB1Mik7XG4gICAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIHAuZ2V0WCgpLnVtb2QodGhpcy5uKS5jbXAocikgPT09IDA7XG4gIH1cblxuICAvLyBOT1RFOiBHcmVnIE1heHdlbGwncyB0cmljaywgaW5zcGlyZWQgYnk6XG4gIC8vIGh0dHBzOi8vZ2l0LmlvL3ZhZDNLXG5cbiAgcCA9IHRoaXMuZy5qbXVsQWRkKHUxLCBrZXkuZ2V0UHVibGljKCksIHUyKTtcbiAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBDb21wYXJlIGBwLnhgIG9mIEphY29iaWFuIHBvaW50IHdpdGggYHJgLFxuICAvLyB0aGlzIHdpbGwgZG8gYHAueCA9PSByICogcC56XjJgIGluc3RlYWQgb2YgbXVsdGlwbHlpbmcgYHAueGAgYnkgdGhlXG4gIC8vIGludmVyc2Ugb2YgYHAuel4yYFxuICByZXR1cm4gcC5lcVhUb1Aocik7XG59O1xuXG5FQy5wcm90b3R5cGUucmVjb3ZlclB1YktleSA9IGZ1bmN0aW9uKG1zZywgc2lnbmF0dXJlLCBqLCBlbmMpIHtcbiAgYXNzZXJ0KCgzICYgaikgPT09IGosICdUaGUgcmVjb3ZlcnkgcGFyYW0gaXMgbW9yZSB0aGFuIHR3byBiaXRzJyk7XG4gIHNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoc2lnbmF0dXJlLCBlbmMpO1xuXG4gIHZhciBuID0gdGhpcy5uO1xuICB2YXIgZSA9IG5ldyBCTihtc2cpO1xuICB2YXIgciA9IHNpZ25hdHVyZS5yO1xuICB2YXIgcyA9IHNpZ25hdHVyZS5zO1xuXG4gIC8vIEEgc2V0IExTQiBzaWduaWZpZXMgdGhhdCB0aGUgeS1jb29yZGluYXRlIGlzIG9kZFxuICB2YXIgaXNZT2RkID0gaiAmIDE7XG4gIHZhciBpc1NlY29uZEtleSA9IGogPj4gMTtcbiAgaWYgKHIuY21wKHRoaXMuY3VydmUucC51bW9kKHRoaXMuY3VydmUubikpID49IDAgJiYgaXNTZWNvbmRLZXkpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCBzZW5jb25kIGtleSBjYW5kaW5hdGUnKTtcblxuICAvLyAxLjEuIExldCB4ID0gciArIGpuLlxuICBpZiAoaXNTZWNvbmRLZXkpXG4gICAgciA9IHRoaXMuY3VydmUucG9pbnRGcm9tWChyLmFkZCh0aGlzLmN1cnZlLm4pLCBpc1lPZGQpO1xuICBlbHNlXG4gICAgciA9IHRoaXMuY3VydmUucG9pbnRGcm9tWChyLCBpc1lPZGQpO1xuXG4gIHZhciBySW52ID0gc2lnbmF0dXJlLnIuaW52bShuKTtcbiAgdmFyIHMxID0gbi5zdWIoZSkubXVsKHJJbnYpLnVtb2Qobik7XG4gIHZhciBzMiA9IHMubXVsKHJJbnYpLnVtb2Qobik7XG5cbiAgLy8gMS42LjEgQ29tcHV0ZSBRID0gcl4tMSAoc1IgLSAgZUcpXG4gIC8vICAgICAgICAgICAgICAgUSA9IHJeLTEgKHNSICsgLWVHKVxuICByZXR1cm4gdGhpcy5nLm11bEFkZChzMSwgciwgczIpO1xufTtcblxuRUMucHJvdG90eXBlLmdldEtleVJlY292ZXJ5UGFyYW0gPSBmdW5jdGlvbihlLCBzaWduYXR1cmUsIFEsIGVuYykge1xuICBzaWduYXR1cmUgPSBuZXcgU2lnbmF0dXJlKHNpZ25hdHVyZSwgZW5jKTtcbiAgaWYgKHNpZ25hdHVyZS5yZWNvdmVyeVBhcmFtICE9PSBudWxsKVxuICAgIHJldHVybiBzaWduYXR1cmUucmVjb3ZlcnlQYXJhbTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIHZhciBRcHJpbWU7XG4gICAgdHJ5IHtcbiAgICAgIFFwcmltZSA9IHRoaXMucmVjb3ZlclB1YktleShlLCBzaWduYXR1cmUsIGkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChRcHJpbWUuZXEoUSkpXG4gICAgICByZXR1cm4gaTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIHZhbGlkIHJlY292ZXJ5IGZhY3RvcicpO1xufTtcbiIsImltcG9ydCBfZWMgZnJvbSBcImVsbGlwdGljXCI7XG52YXIgRUMgPSBfZWMuZWM7XG5leHBvcnQgeyBFQyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWxsaXB0aWMuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWxsaXB0aWMgPSBleHBvcnRzO1xuXG5lbGxpcHRpYy52ZXJzaW9uID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcbmVsbGlwdGljLnV0aWxzID0gcmVxdWlyZSgnLi9lbGxpcHRpYy91dGlscycpO1xuZWxsaXB0aWMucmFuZCA9IHJlcXVpcmUoJ2Jyb3JhbmQnKTtcbmVsbGlwdGljLmN1cnZlID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9jdXJ2ZScpO1xuZWxsaXB0aWMuY3VydmVzID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9jdXJ2ZXMnKTtcblxuLy8gUHJvdG9jb2xzXG5lbGxpcHRpYy5lYyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvZWMnKTtcbmVsbGlwdGljLmVkZHNhID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9lZGRzYScpO1xuIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcInNpZ25pbmcta2V5LzUuNy4wXCI7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgRUMgfSBmcm9tIFwiLi9lbGxpcHRpY1wiO1xuXG5pbXBvcnQgeyBhcnJheWlmeSwgQnl0ZXNMaWtlLCBoZXhEYXRhTGVuZ3RoLCBoZXhsaWZ5LCBoZXhaZXJvUGFkLCBTaWduYXR1cmUsIFNpZ25hdHVyZUxpa2UsIHNwbGl0U2lnbmF0dXJlIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBkZWZpbmVSZWFkT25seSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzXCI7XG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcblxubGV0IF9jdXJ2ZTogRUMgPSBudWxsXG5mdW5jdGlvbiBnZXRDdXJ2ZSgpIHtcbiAgICBpZiAoIV9jdXJ2ZSkge1xuICAgICAgICBfY3VydmUgPSBuZXcgRUMoXCJzZWNwMjU2azFcIik7XG4gICAgfVxuICAgIHJldHVybiBfY3VydmU7XG59XG5cbmV4cG9ydCBjbGFzcyBTaWduaW5nS2V5IHtcblxuICAgIHJlYWRvbmx5IGN1cnZlOiBzdHJpbmc7XG5cbiAgICByZWFkb25seSBwcml2YXRlS2V5OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgcHVibGljS2V5OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgY29tcHJlc3NlZFB1YmxpY0tleTogc3RyaW5nO1xuXG4gICAgLy9yZWFkb25seSBhZGRyZXNzOiBzdHJpbmc7XG5cbiAgICByZWFkb25seSBfaXNTaWduaW5nS2V5OiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZUtleTogQnl0ZXNMaWtlKSB7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiY3VydmVcIiwgXCJzZWNwMjU2azFcIik7XG5cbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJwcml2YXRlS2V5XCIsIGhleGxpZnkocHJpdmF0ZUtleSkpO1xuICAgICAgICBpZiAoaGV4RGF0YUxlbmd0aCh0aGlzLnByaXZhdGVLZXkpICE9PSAzMikge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgcHJpdmF0ZSBrZXlcIiwgXCJwcml2YXRlS2V5XCIsIFwiW1sgUkVEQUNURUQgXV1cIik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBrZXlQYWlyID0gZ2V0Q3VydmUoKS5rZXlGcm9tUHJpdmF0ZShhcnJheWlmeSh0aGlzLnByaXZhdGVLZXkpKTtcblxuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcInB1YmxpY0tleVwiLCBcIjB4XCIgKyBrZXlQYWlyLmdldFB1YmxpYyhmYWxzZSwgXCJoZXhcIikpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImNvbXByZXNzZWRQdWJsaWNLZXlcIiwgXCIweFwiICsga2V5UGFpci5nZXRQdWJsaWModHJ1ZSwgXCJoZXhcIikpO1xuXG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiX2lzU2lnbmluZ0tleVwiLCB0cnVlKTtcbiAgICB9XG5cbiAgICBfYWRkUG9pbnQob3RoZXI6IEJ5dGVzTGlrZSk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHAwID0gIGdldEN1cnZlKCkua2V5RnJvbVB1YmxpYyhhcnJheWlmeSh0aGlzLnB1YmxpY0tleSkpO1xuICAgICAgICBjb25zdCBwMSA9ICBnZXRDdXJ2ZSgpLmtleUZyb21QdWJsaWMoYXJyYXlpZnkob3RoZXIpKTtcbiAgICAgICAgcmV0dXJuIFwiMHhcIiArIHAwLnB1Yi5hZGQocDEucHViKS5lbmNvZGVDb21wcmVzc2VkKFwiaGV4XCIpO1xuICAgIH1cblxuICAgIHNpZ25EaWdlc3QoZGlnZXN0OiBCeXRlc0xpa2UpOiBTaWduYXR1cmUge1xuICAgICAgICBjb25zdCBrZXlQYWlyID0gZ2V0Q3VydmUoKS5rZXlGcm9tUHJpdmF0ZShhcnJheWlmeSh0aGlzLnByaXZhdGVLZXkpKTtcbiAgICAgICAgY29uc3QgZGlnZXN0Qnl0ZXMgPSBhcnJheWlmeShkaWdlc3QpO1xuICAgICAgICBpZiAoZGlnZXN0Qnl0ZXMubGVuZ3RoICE9PSAzMikge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImJhZCBkaWdlc3QgbGVuZ3RoXCIsIFwiZGlnZXN0XCIsIGRpZ2VzdCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0ga2V5UGFpci5zaWduKGRpZ2VzdEJ5dGVzLCB7IGNhbm9uaWNhbDogdHJ1ZSB9KTtcbiAgICAgICAgcmV0dXJuIHNwbGl0U2lnbmF0dXJlKHtcbiAgICAgICAgICAgIHJlY292ZXJ5UGFyYW06IHNpZ25hdHVyZS5yZWNvdmVyeVBhcmFtLFxuICAgICAgICAgICAgcjogaGV4WmVyb1BhZChcIjB4XCIgKyBzaWduYXR1cmUuci50b1N0cmluZygxNiksIDMyKSxcbiAgICAgICAgICAgIHM6IGhleFplcm9QYWQoXCIweFwiICsgc2lnbmF0dXJlLnMudG9TdHJpbmcoMTYpLCAzMiksXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgY29tcHV0ZVNoYXJlZFNlY3JldChvdGhlcktleTogQnl0ZXNMaWtlKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3Qga2V5UGFpciA9IGdldEN1cnZlKCkua2V5RnJvbVByaXZhdGUoYXJyYXlpZnkodGhpcy5wcml2YXRlS2V5KSk7XG4gICAgICAgIGNvbnN0IG90aGVyS2V5UGFpciA9IGdldEN1cnZlKCkua2V5RnJvbVB1YmxpYyhhcnJheWlmeShjb21wdXRlUHVibGljS2V5KG90aGVyS2V5KSkpO1xuICAgICAgICByZXR1cm4gaGV4WmVyb1BhZChcIjB4XCIgKyBrZXlQYWlyLmRlcml2ZShvdGhlcktleVBhaXIuZ2V0UHVibGljKCkpLnRvU3RyaW5nKDE2KSwgMzIpO1xuICAgIH1cblxuICAgIHN0YXRpYyBpc1NpZ25pbmdLZXkodmFsdWU6IGFueSk6IHZhbHVlIGlzIFNpZ25pbmdLZXkge1xuICAgICAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX2lzU2lnbmluZ0tleSk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVjb3ZlclB1YmxpY0tleShkaWdlc3Q6IEJ5dGVzTGlrZSwgc2lnbmF0dXJlOiBTaWduYXR1cmVMaWtlKTogc3RyaW5nIHtcbiAgICBjb25zdCBzaWcgPSBzcGxpdFNpZ25hdHVyZShzaWduYXR1cmUpO1xuICAgIGNvbnN0IHJzID0geyByOiBhcnJheWlmeShzaWcuciksIHM6IGFycmF5aWZ5KHNpZy5zKSB9O1xuICAgIHJldHVybiBcIjB4XCIgKyBnZXRDdXJ2ZSgpLnJlY292ZXJQdWJLZXkoYXJyYXlpZnkoZGlnZXN0KSwgcnMsIHNpZy5yZWNvdmVyeVBhcmFtKS5lbmNvZGUoXCJoZXhcIiwgZmFsc2UpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZVB1YmxpY0tleShrZXk6IEJ5dGVzTGlrZSwgY29tcHJlc3NlZD86IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgIGNvbnN0IGJ5dGVzID0gYXJyYXlpZnkoa2V5KTtcblxuICAgIGlmIChieXRlcy5sZW5ndGggPT09IDMyKSB7XG4gICAgICAgIGNvbnN0IHNpZ25pbmdLZXkgPSBuZXcgU2lnbmluZ0tleShieXRlcyk7XG4gICAgICAgIGlmIChjb21wcmVzc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gXCIweFwiICsgZ2V0Q3VydmUoKS5rZXlGcm9tUHJpdmF0ZShieXRlcykuZ2V0UHVibGljKHRydWUsIFwiaGV4XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaWduaW5nS2V5LnB1YmxpY0tleTtcblxuICAgIH0gZWxzZSBpZiAoYnl0ZXMubGVuZ3RoID09PSAzMykge1xuICAgICAgICBpZiAoY29tcHJlc3NlZCkgeyByZXR1cm4gaGV4bGlmeShieXRlcyk7IH1cbiAgICAgICAgcmV0dXJuIFwiMHhcIiArIGdldEN1cnZlKCkua2V5RnJvbVB1YmxpYyhieXRlcykuZ2V0UHVibGljKGZhbHNlLCBcImhleFwiKTtcblxuICAgIH0gZWxzZSBpZiAoYnl0ZXMubGVuZ3RoID09PSA2NSkge1xuICAgICAgICBpZiAoIWNvbXByZXNzZWQpIHsgcmV0dXJuIGhleGxpZnkoYnl0ZXMpOyB9XG4gICAgICAgIHJldHVybiBcIjB4XCIgKyBnZXRDdXJ2ZSgpLmtleUZyb21QdWJsaWMoYnl0ZXMpLmdldFB1YmxpYyh0cnVlLCBcImhleFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgcHVibGljIG9yIHByaXZhdGUga2V5XCIsIFwia2V5XCIsIFwiW1JFREFDVEVEXVwiKTtcbn1cblxuIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcInRyYW5zYWN0aW9ucy81LjcuMFwiO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGdldEFkZHJlc3MgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYWRkcmVzc1wiO1xuaW1wb3J0IHsgQmlnTnVtYmVyLCBCaWdOdW1iZXJpc2ggfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYmlnbnVtYmVyXCI7XG5pbXBvcnQgeyBhcnJheWlmeSwgQnl0ZXNMaWtlLCBEYXRhT3B0aW9ucywgaGV4Q29uY2F0LCBoZXhEYXRhTGVuZ3RoLCBoZXhEYXRhU2xpY2UsIGhleGxpZnksIGhleFplcm9QYWQsIGlzQnl0ZXNMaWtlLCBTaWduYXR1cmVMaWtlLCBzcGxpdFNpZ25hdHVyZSwgc3RyaXBaZXJvcywgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IFplcm8gfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qva2VjY2FrMjU2XCI7XG5pbXBvcnQgeyBjaGVja1Byb3BlcnRpZXMgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUkxQIGZyb20gXCJAZXRoZXJzcHJvamVjdC9ybHBcIjtcbmltcG9ydCB7IGNvbXB1dGVQdWJsaWNLZXksIHJlY292ZXJQdWJsaWNLZXkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvc2lnbmluZy1rZXlcIjtcblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBFeHBvcnRlZCBUeXBlc1xuXG5leHBvcnQgdHlwZSBBY2Nlc3NMaXN0ID0gQXJyYXk8eyBhZGRyZXNzOiBzdHJpbmcsIHN0b3JhZ2VLZXlzOiBBcnJheTxzdHJpbmc+IH0+O1xuXG4vLyBJbnB1dCBhbGxvd3MgZmxleGliaWxpdHkgaW4gZGVzY3JpYmluZyBhbiBhY2Nlc3MgbGlzdFxuZXhwb3J0IHR5cGUgQWNjZXNzTGlzdGlzaCA9IEFjY2Vzc0xpc3QgfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5PFsgc3RyaW5nLCBBcnJheTxzdHJpbmc+IF0+IHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWNvcmQ8c3RyaW5nLCBBcnJheTxzdHJpbmc+PjtcblxuZXhwb3J0IGVudW0gVHJhbnNhY3Rpb25UeXBlcyB7XG4gICAgbGVnYWN5ID0gMCxcbiAgICBlaXAyOTMwID0gMSxcbiAgICBlaXAxNTU5ID0gMixcbn07XG5cbmV4cG9ydCB0eXBlIFVuc2lnbmVkVHJhbnNhY3Rpb24gPSB7XG4gICAgdG8/OiBzdHJpbmc7XG4gICAgbm9uY2U/OiBudW1iZXI7XG5cbiAgICBnYXNMaW1pdD86IEJpZ051bWJlcmlzaDtcbiAgICBnYXNQcmljZT86IEJpZ051bWJlcmlzaDtcblxuICAgIGRhdGE/OiBCeXRlc0xpa2U7XG4gICAgdmFsdWU/OiBCaWdOdW1iZXJpc2g7XG4gICAgY2hhaW5JZD86IG51bWJlcjtcblxuICAgIC8vIFR5cGVkLVRyYW5zYWN0aW9uIGZlYXR1cmVzXG4gICAgdHlwZT86IG51bWJlciB8IG51bGw7XG5cbiAgICAvLyBFSVAtMjkzMDsgVHlwZSAxICYgRUlQLTE1NTk7IFR5cGUgMlxuICAgIGFjY2Vzc0xpc3Q/OiBBY2Nlc3NMaXN0aXNoO1xuXG4gICAgLy8gRUlQLTE1NTk7IFR5cGUgMlxuICAgIG1heFByaW9yaXR5RmVlUGVyR2FzPzogQmlnTnVtYmVyaXNoO1xuICAgIG1heEZlZVBlckdhcz86IEJpZ051bWJlcmlzaDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2FjdGlvbiB7XG4gICAgaGFzaD86IHN0cmluZztcblxuICAgIHRvPzogc3RyaW5nO1xuICAgIGZyb20/OiBzdHJpbmc7XG4gICAgbm9uY2U6IG51bWJlcjtcblxuICAgIGdhc0xpbWl0OiBCaWdOdW1iZXI7XG4gICAgZ2FzUHJpY2U/OiBCaWdOdW1iZXI7XG5cbiAgICBkYXRhOiBzdHJpbmc7XG4gICAgdmFsdWU6IEJpZ051bWJlcjtcbiAgICBjaGFpbklkOiBudW1iZXI7XG5cbiAgICByPzogc3RyaW5nO1xuICAgIHM/OiBzdHJpbmc7XG4gICAgdj86IG51bWJlcjtcblxuICAgIC8vIFR5cGVkLVRyYW5zYWN0aW9uIGZlYXR1cmVzXG4gICAgdHlwZT86IG51bWJlciB8IG51bGw7XG5cbiAgICAvLyBFSVAtMjkzMDsgVHlwZSAxICYgRUlQLTE1NTk7IFR5cGUgMlxuICAgIGFjY2Vzc0xpc3Q/OiBBY2Nlc3NMaXN0O1xuXG4gICAgLy8gRUlQLTE1NTk7IFR5cGUgMlxuICAgIG1heFByaW9yaXR5RmVlUGVyR2FzPzogQmlnTnVtYmVyO1xuICAgIG1heEZlZVBlckdhcz86IEJpZ051bWJlcjtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5mdW5jdGlvbiBoYW5kbGVBZGRyZXNzKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICh2YWx1ZSA9PT0gXCIweFwiKSB7IHJldHVybiBudWxsOyB9XG4gICAgcmV0dXJuIGdldEFkZHJlc3ModmFsdWUpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVOdW1iZXIodmFsdWU6IHN0cmluZyk6IEJpZ051bWJlciB7XG4gICAgaWYgKHZhbHVlID09PSBcIjB4XCIpIHsgcmV0dXJuIFplcm87IH1cbiAgICByZXR1cm4gQmlnTnVtYmVyLmZyb20odmFsdWUpO1xufVxuXG4vLyBMZWdhY3kgVHJhbnNhY3Rpb24gRmllbGRzXG5jb25zdCB0cmFuc2FjdGlvbkZpZWxkcyA9IFtcbiAgICB7IG5hbWU6IFwibm9uY2VcIiwgICAgbWF4TGVuZ3RoOiAzMiwgbnVtZXJpYzogdHJ1ZSB9LFxuICAgIHsgbmFtZTogXCJnYXNQcmljZVwiLCBtYXhMZW5ndGg6IDMyLCBudW1lcmljOiB0cnVlIH0sXG4gICAgeyBuYW1lOiBcImdhc0xpbWl0XCIsIG1heExlbmd0aDogMzIsIG51bWVyaWM6IHRydWUgfSxcbiAgICB7IG5hbWU6IFwidG9cIiwgICAgICAgICAgbGVuZ3RoOiAyMCB9LFxuICAgIHsgbmFtZTogXCJ2YWx1ZVwiLCAgICBtYXhMZW5ndGg6IDMyLCBudW1lcmljOiB0cnVlIH0sXG4gICAgeyBuYW1lOiBcImRhdGFcIiB9LFxuXTtcblxuY29uc3QgYWxsb3dlZFRyYW5zYWN0aW9uS2V5czogeyBbIGtleTogc3RyaW5nIF06IGJvb2xlYW4gfSA9IHtcbiAgICBjaGFpbklkOiB0cnVlLCBkYXRhOiB0cnVlLCBnYXNMaW1pdDogdHJ1ZSwgZ2FzUHJpY2U6dHJ1ZSwgbm9uY2U6IHRydWUsIHRvOiB0cnVlLCB0eXBlOiB0cnVlLCB2YWx1ZTogdHJ1ZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUFkZHJlc3Moa2V5OiBCeXRlc0xpa2UgfCBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IHB1YmxpY0tleSA9IGNvbXB1dGVQdWJsaWNLZXkoa2V5KTtcbiAgICByZXR1cm4gZ2V0QWRkcmVzcyhoZXhEYXRhU2xpY2Uoa2VjY2FrMjU2KGhleERhdGFTbGljZShwdWJsaWNLZXksIDEpKSwgMTIpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY292ZXJBZGRyZXNzKGRpZ2VzdDogQnl0ZXNMaWtlLCBzaWduYXR1cmU6IFNpZ25hdHVyZUxpa2UpOiBzdHJpbmcge1xuICAgIHJldHVybiBjb21wdXRlQWRkcmVzcyhyZWNvdmVyUHVibGljS2V5KGFycmF5aWZ5KGRpZ2VzdCksIHNpZ25hdHVyZSkpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXROdW1iZXIodmFsdWU6IEJpZ051bWJlcmlzaCwgbmFtZTogc3RyaW5nKTogVWludDhBcnJheSB7XG4gICAgY29uc3QgcmVzdWx0ID0gc3RyaXBaZXJvcyhCaWdOdW1iZXIuZnJvbSh2YWx1ZSkudG9IZXhTdHJpbmcoKSk7XG4gICAgaWYgKHJlc3VsdC5sZW5ndGggPiAzMikge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBsZW5ndGggZm9yIFwiICsgbmFtZSwgKFwidHJhbnNhY3Rpb246XCIgKyBuYW1lKSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBhY2Nlc3NTZXRpZnkoYWRkcjogc3RyaW5nLCBzdG9yYWdlS2V5czogQXJyYXk8c3RyaW5nPik6IHsgYWRkcmVzczogc3RyaW5nLHN0b3JhZ2VLZXlzOiBBcnJheTxzdHJpbmc+IH0ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFkZHJlc3M6IGdldEFkZHJlc3MoYWRkciksXG4gICAgICAgIHN0b3JhZ2VLZXlzOiAoc3RvcmFnZUtleXMgfHwgW10pLm1hcCgoc3RvcmFnZUtleSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChoZXhEYXRhTGVuZ3RoKHN0b3JhZ2VLZXkpICE9PSAzMikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGFjY2VzcyBsaXN0IHN0b3JhZ2VLZXlcIiwgYGFjY2Vzc0xpc3RbJHsgYWRkciB9OiR7IGluZGV4IH1dYCwgc3RvcmFnZUtleSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdG9yYWdlS2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0pXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFjY2Vzc0xpc3RpZnkodmFsdWU6IEFjY2Vzc0xpc3Rpc2gpOiBBY2Nlc3NMaXN0IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICg8QXJyYXk8WyBzdHJpbmcsIEFycmF5PHN0cmluZz5dIHwgeyBhZGRyZXNzOiBzdHJpbmcsIHN0b3JhZ2VLZXlzOiBBcnJheTxzdHJpbmc+fT4+dmFsdWUpLm1hcCgoc2V0LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2V0KSkge1xuICAgICAgICAgICAgICAgIGlmIChzZXQubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiYWNjZXNzIGxpc3QgZXhwZWN0ZWQgdG8gYmUgWyBhZGRyZXNzLCBzdG9yYWdlS2V5c1tdIF1cIiwgYHZhbHVlWyR7IGluZGV4IH1dYCwgc2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY2Vzc1NldGlmeShzZXRbMF0sIHNldFsxXSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhY2Nlc3NTZXRpZnkoc2V0LmFkZHJlc3MsIHNldC5zdG9yYWdlS2V5cyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdDogQXJyYXk8eyBhZGRyZXNzOiBzdHJpbmcsIHN0b3JhZ2VLZXlzOiBBcnJheTxzdHJpbmc+IH0+ID0gT2JqZWN0LmtleXModmFsdWUpLm1hcCgoYWRkcikgPT4ge1xuICAgICAgICBjb25zdCBzdG9yYWdlS2V5czogUmVjb3JkPHN0cmluZywgdHJ1ZT4gPSB2YWx1ZVthZGRyXS5yZWR1Y2UoKGFjY3VtLCBzdG9yYWdlS2V5KSA9PiB7XG4gICAgICAgICAgICBhY2N1bVtzdG9yYWdlS2V5XSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gYWNjdW07XG4gICAgICAgIH0sIDxSZWNvcmQ8c3RyaW5nLCB0cnVlPj57IH0pO1xuICAgICAgICByZXR1cm4gYWNjZXNzU2V0aWZ5KGFkZHIsIE9iamVjdC5rZXlzKHN0b3JhZ2VLZXlzKS5zb3J0KCkpXG4gICAgfSk7XG4gICAgcmVzdWx0LnNvcnQoKGEsIGIpID0+IChhLmFkZHJlc3MubG9jYWxlQ29tcGFyZShiLmFkZHJlc3MpKSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZm9ybWF0QWNjZXNzTGlzdCh2YWx1ZTogQWNjZXNzTGlzdGlzaCk6IEFycmF5PFsgc3RyaW5nLCBBcnJheTxzdHJpbmc+IF0+IHtcbiAgICByZXR1cm4gYWNjZXNzTGlzdGlmeSh2YWx1ZSkubWFwKChzZXQpID0+IFsgc2V0LmFkZHJlc3MsIHNldC5zdG9yYWdlS2V5cyBdKTtcbn1cblxuZnVuY3Rpb24gX3NlcmlhbGl6ZUVpcDE1NTkodHJhbnNhY3Rpb246IFVuc2lnbmVkVHJhbnNhY3Rpb24sIHNpZ25hdHVyZT86IFNpZ25hdHVyZUxpa2UpOiBzdHJpbmcge1xuICAgIC8vIElmIHRoZXJlIGlzIGFuIGV4cGxpY2l0IGdhc1ByaWNlLCBtYWtlIHN1cmUgaXQgbWF0Y2hlcyB0aGVcbiAgICAvLyBFSVAtMTU1OSBmZWVzOyBvdGhlcndpc2UgdGhleSBtYXkgbm90IHVuZGVyc3RhbmQgd2hhdCB0aGV5XG4gICAgLy8gdGhpbmsgdGhleSBhcmUgc2V0dGluZyBpbiB0ZXJtcyBvZiBmZWUuXG4gICAgaWYgKHRyYW5zYWN0aW9uLmdhc1ByaWNlICE9IG51bGwpIHtcbiAgICAgICAgY29uc3QgZ2FzUHJpY2UgPSBCaWdOdW1iZXIuZnJvbSh0cmFuc2FjdGlvbi5nYXNQcmljZSk7XG4gICAgICAgIGNvbnN0IG1heEZlZVBlckdhcyA9IEJpZ051bWJlci5mcm9tKHRyYW5zYWN0aW9uLm1heEZlZVBlckdhcyB8fCAwKTtcbiAgICAgICAgaWYgKCFnYXNQcmljZS5lcShtYXhGZWVQZXJHYXMpKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwibWlzbWF0Y2ggRUlQLTE1NTkgZ2FzUHJpY2UgIT0gbWF4RmVlUGVyR2FzXCIsIFwidHhcIiwge1xuICAgICAgICAgICAgICAgIGdhc1ByaWNlLCBtYXhGZWVQZXJHYXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZmllbGRzOiBhbnkgPSBbXG4gICAgICAgIGZvcm1hdE51bWJlcih0cmFuc2FjdGlvbi5jaGFpbklkIHx8IDAsIFwiY2hhaW5JZFwiKSxcbiAgICAgICAgZm9ybWF0TnVtYmVyKHRyYW5zYWN0aW9uLm5vbmNlIHx8IDAsIFwibm9uY2VcIiksXG4gICAgICAgIGZvcm1hdE51bWJlcih0cmFuc2FjdGlvbi5tYXhQcmlvcml0eUZlZVBlckdhcyB8fCAwLCBcIm1heFByaW9yaXR5RmVlUGVyR2FzXCIpLFxuICAgICAgICBmb3JtYXROdW1iZXIodHJhbnNhY3Rpb24ubWF4RmVlUGVyR2FzIHx8IDAsIFwibWF4RmVlUGVyR2FzXCIpLFxuICAgICAgICBmb3JtYXROdW1iZXIodHJhbnNhY3Rpb24uZ2FzTGltaXQgfHwgMCwgXCJnYXNMaW1pdFwiKSxcbiAgICAgICAgKCh0cmFuc2FjdGlvbi50byAhPSBudWxsKSA/IGdldEFkZHJlc3ModHJhbnNhY3Rpb24udG8pOiBcIjB4XCIpLFxuICAgICAgICBmb3JtYXROdW1iZXIodHJhbnNhY3Rpb24udmFsdWUgfHwgMCwgXCJ2YWx1ZVwiKSxcbiAgICAgICAgKHRyYW5zYWN0aW9uLmRhdGEgfHwgXCIweFwiKSxcbiAgICAgICAgKGZvcm1hdEFjY2Vzc0xpc3QodHJhbnNhY3Rpb24uYWNjZXNzTGlzdCB8fCBbXSkpXG4gICAgXTtcblxuICAgIGlmIChzaWduYXR1cmUpIHtcbiAgICAgICAgY29uc3Qgc2lnID0gc3BsaXRTaWduYXR1cmUoc2lnbmF0dXJlKTtcbiAgICAgICAgZmllbGRzLnB1c2goZm9ybWF0TnVtYmVyKHNpZy5yZWNvdmVyeVBhcmFtLCBcInJlY292ZXJ5UGFyYW1cIikpO1xuICAgICAgICBmaWVsZHMucHVzaChzdHJpcFplcm9zKHNpZy5yKSk7XG4gICAgICAgIGZpZWxkcy5wdXNoKHN0cmlwWmVyb3Moc2lnLnMpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGV4Q29uY2F0KFsgXCIweDAyXCIsIFJMUC5lbmNvZGUoZmllbGRzKV0pO1xufVxuXG5mdW5jdGlvbiBfc2VyaWFsaXplRWlwMjkzMCh0cmFuc2FjdGlvbjogVW5zaWduZWRUcmFuc2FjdGlvbiwgc2lnbmF0dXJlPzogU2lnbmF0dXJlTGlrZSk6IHN0cmluZyB7XG4gICAgY29uc3QgZmllbGRzOiBhbnkgPSBbXG4gICAgICAgIGZvcm1hdE51bWJlcih0cmFuc2FjdGlvbi5jaGFpbklkIHx8IDAsIFwiY2hhaW5JZFwiKSxcbiAgICAgICAgZm9ybWF0TnVtYmVyKHRyYW5zYWN0aW9uLm5vbmNlIHx8IDAsIFwibm9uY2VcIiksXG4gICAgICAgIGZvcm1hdE51bWJlcih0cmFuc2FjdGlvbi5nYXNQcmljZSB8fCAwLCBcImdhc1ByaWNlXCIpLFxuICAgICAgICBmb3JtYXROdW1iZXIodHJhbnNhY3Rpb24uZ2FzTGltaXQgfHwgMCwgXCJnYXNMaW1pdFwiKSxcbiAgICAgICAgKCh0cmFuc2FjdGlvbi50byAhPSBudWxsKSA/IGdldEFkZHJlc3ModHJhbnNhY3Rpb24udG8pOiBcIjB4XCIpLFxuICAgICAgICBmb3JtYXROdW1iZXIodHJhbnNhY3Rpb24udmFsdWUgfHwgMCwgXCJ2YWx1ZVwiKSxcbiAgICAgICAgKHRyYW5zYWN0aW9uLmRhdGEgfHwgXCIweFwiKSxcbiAgICAgICAgKGZvcm1hdEFjY2Vzc0xpc3QodHJhbnNhY3Rpb24uYWNjZXNzTGlzdCB8fCBbXSkpXG4gICAgXTtcblxuICAgIGlmIChzaWduYXR1cmUpIHtcbiAgICAgICAgY29uc3Qgc2lnID0gc3BsaXRTaWduYXR1cmUoc2lnbmF0dXJlKTtcbiAgICAgICAgZmllbGRzLnB1c2goZm9ybWF0TnVtYmVyKHNpZy5yZWNvdmVyeVBhcmFtLCBcInJlY292ZXJ5UGFyYW1cIikpO1xuICAgICAgICBmaWVsZHMucHVzaChzdHJpcFplcm9zKHNpZy5yKSk7XG4gICAgICAgIGZpZWxkcy5wdXNoKHN0cmlwWmVyb3Moc2lnLnMpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGV4Q29uY2F0KFsgXCIweDAxXCIsIFJMUC5lbmNvZGUoZmllbGRzKV0pO1xufVxuXG4vLyBMZWdhY3kgVHJhbnNhY3Rpb25zIGFuZCBFSVAtMTU1XG5mdW5jdGlvbiBfc2VyaWFsaXplKHRyYW5zYWN0aW9uOiBVbnNpZ25lZFRyYW5zYWN0aW9uLCBzaWduYXR1cmU/OiBTaWduYXR1cmVMaWtlKTogc3RyaW5nIHtcbiAgICBjaGVja1Byb3BlcnRpZXModHJhbnNhY3Rpb24sIGFsbG93ZWRUcmFuc2FjdGlvbktleXMpO1xuXG4gICAgY29uc3QgcmF3OiBBcnJheTxzdHJpbmcgfCBVaW50OEFycmF5PiA9IFtdO1xuXG4gICAgdHJhbnNhY3Rpb25GaWVsZHMuZm9yRWFjaChmdW5jdGlvbihmaWVsZEluZm8pIHtcbiAgICAgICAgbGV0IHZhbHVlID0gKDxhbnk+dHJhbnNhY3Rpb24pW2ZpZWxkSW5mby5uYW1lXSB8fCAoW10pO1xuICAgICAgICBjb25zdCBvcHRpb25zOiBEYXRhT3B0aW9ucyA9IHsgfTtcbiAgICAgICAgaWYgKGZpZWxkSW5mby5udW1lcmljKSB7IG9wdGlvbnMuaGV4UGFkID0gXCJsZWZ0XCI7IH1cbiAgICAgICAgdmFsdWUgPSBhcnJheWlmeShoZXhsaWZ5KHZhbHVlLCBvcHRpb25zKSk7XG5cbiAgICAgICAgLy8gRml4ZWQtd2lkdGggZmllbGRcbiAgICAgICAgaWYgKGZpZWxkSW5mby5sZW5ndGggJiYgdmFsdWUubGVuZ3RoICE9PSBmaWVsZEluZm8ubGVuZ3RoICYmIHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGxlbmd0aCBmb3IgXCIgKyBmaWVsZEluZm8ubmFtZSwgKFwidHJhbnNhY3Rpb246XCIgKyBmaWVsZEluZm8ubmFtZSksIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFZhcmlhYmxlLXdpZHRoICh3aXRoIGEgbWF4aW11bSlcbiAgICAgICAgaWYgKGZpZWxkSW5mby5tYXhMZW5ndGgpIHtcbiAgICAgICAgICAgIHZhbHVlID0gc3RyaXBaZXJvcyh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID4gZmllbGRJbmZvLm1heExlbmd0aCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGxlbmd0aCBmb3IgXCIgKyBmaWVsZEluZm8ubmFtZSwgKFwidHJhbnNhY3Rpb246XCIgKyBmaWVsZEluZm8ubmFtZSksIHZhbHVlICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByYXcucHVzaChoZXhsaWZ5KHZhbHVlKSk7XG4gICAgfSk7XG5cbiAgICBsZXQgY2hhaW5JZCA9IDA7XG4gICAgaWYgKHRyYW5zYWN0aW9uLmNoYWluSWQgIT0gbnVsbCkge1xuICAgICAgICAvLyBBIGNoYWluSWQgd2FzIHByb3ZpZGVkOyBpZiBub24temVybyB3ZSdsbCB1c2UgRUlQLTE1NVxuICAgICAgICBjaGFpbklkID0gdHJhbnNhY3Rpb24uY2hhaW5JZDtcblxuICAgICAgICBpZiAodHlwZW9mKGNoYWluSWQpICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCB0cmFuc2FjdGlvbi5jaGFpbklkXCIsIFwidHJhbnNhY3Rpb25cIiwgdHJhbnNhY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKHNpZ25hdHVyZSAmJiAhaXNCeXRlc0xpa2Uoc2lnbmF0dXJlKSAmJiBzaWduYXR1cmUudiA+IDI4KSB7XG4gICAgICAgIC8vIE5vIGNoYWluSWQgcHJvdmlkZWQsIGJ1dCB0aGUgc2lnbmF0dXJlIGlzIHNpZ25pbmcgd2l0aCBFSVAtMTU1OyBkZXJpdmUgY2hhaW5JZFxuICAgICAgICBjaGFpbklkID0gTWF0aC5mbG9vcigoc2lnbmF0dXJlLnYgLSAzNSkgLyAyKTtcbiAgICB9XG5cbiAgICAvLyBXZSBoYXZlIGFuIEVJUC0xNTUgdHJhbnNhY3Rpb24gKGNoYWluSWQgd2FzIHNwZWNpZmllZCBhbmQgbm9uLXplcm8pXG4gICAgaWYgKGNoYWluSWQgIT09IDApIHtcbiAgICAgICAgcmF3LnB1c2goaGV4bGlmeShjaGFpbklkKSk7IC8vIEBUT0RPOiBoZXhWYWx1ZT9cbiAgICAgICAgcmF3LnB1c2goXCIweFwiKTtcbiAgICAgICAgcmF3LnB1c2goXCIweFwiKTtcbiAgICB9XG5cbiAgICAvLyBSZXF1ZXN0aW5nIGFuIHVuc2lnbmVkIHRyYW5zYWN0aW9uXG4gICAgaWYgKCFzaWduYXR1cmUpIHtcbiAgICAgICAgcmV0dXJuIFJMUC5lbmNvZGUocmF3KTtcbiAgICB9XG5cbiAgICAvLyBUaGUgc3BsaXRTaWduYXR1cmUgd2lsbCBlbnN1cmUgdGhlIHRyYW5zYWN0aW9uIGhhcyBhIHJlY292ZXJ5UGFyYW0gaW4gdGhlXG4gICAgLy8gY2FzZSB0aGF0IHRoZSBzaWduVHJhbnNhY3Rpb24gZnVuY3Rpb24gb25seSBhZGRzIGEgdi5cbiAgICBjb25zdCBzaWcgPSBzcGxpdFNpZ25hdHVyZShzaWduYXR1cmUpO1xuXG4gICAgLy8gV2UgcHVzaGVkIGEgY2hhaW5JZCBhbmQgbnVsbCByLCBzIG9uIGZvciBoYXNoaW5nIG9ubHk7IHJlbW92ZSB0aG9zZVxuICAgIGxldCB2ID0gMjcgKyBzaWcucmVjb3ZlcnlQYXJhbVxuICAgIGlmIChjaGFpbklkICE9PSAwKSB7XG4gICAgICAgIHJhdy5wb3AoKTtcbiAgICAgICAgcmF3LnBvcCgpO1xuICAgICAgICByYXcucG9wKCk7XG4gICAgICAgIHYgKz0gY2hhaW5JZCAqIDIgKyA4O1xuXG4gICAgICAgIC8vIElmIGFuIEVJUC0xNTUgdiAoZGlyZWN0bHkgb3IgaW5kaXJlY3RseTsgbWF5YmUgX3ZzKSB3YXMgcHJvdmlkZWQsIGNoZWNrIGl0IVxuICAgICAgICBpZiAoc2lnLnYgPiAyOCAmJiBzaWcudiAhPT0gdikge1xuICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ0cmFuc2FjdGlvbi5jaGFpbklkL3NpZ25hdHVyZS52IG1pc21hdGNoXCIsIFwic2lnbmF0dXJlXCIsIHNpZ25hdHVyZSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNpZy52ICE9PSB2KSB7XG4gICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidHJhbnNhY3Rpb24uY2hhaW5JZC9zaWduYXR1cmUudiBtaXNtYXRjaFwiLCBcInNpZ25hdHVyZVwiLCBzaWduYXR1cmUpO1xuICAgIH1cblxuICAgIHJhdy5wdXNoKGhleGxpZnkodikpO1xuICAgIHJhdy5wdXNoKHN0cmlwWmVyb3MoYXJyYXlpZnkoc2lnLnIpKSk7XG4gICAgcmF3LnB1c2goc3RyaXBaZXJvcyhhcnJheWlmeShzaWcucykpKTtcblxuICAgIHJldHVybiBSTFAuZW5jb2RlKHJhdyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemUodHJhbnNhY3Rpb246IFVuc2lnbmVkVHJhbnNhY3Rpb24sIHNpZ25hdHVyZT86IFNpZ25hdHVyZUxpa2UpOiBzdHJpbmcge1xuICAgIC8vIExlZ2FjeSBhbmQgRUlQLTE1NSBUcmFuc2FjdGlvbnNcbiAgICBpZiAodHJhbnNhY3Rpb24udHlwZSA9PSBudWxsIHx8IHRyYW5zYWN0aW9uLnR5cGUgPT09IDApIHtcbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLmFjY2Vzc0xpc3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVudHlwZWQgdHJhbnNhY3Rpb25zIGRvIG5vdCBzdXBwb3J0IGFjY2Vzc0xpc3Q7IGluY2x1ZGUgdHlwZTogMVwiLCBcInRyYW5zYWN0aW9uXCIsIHRyYW5zYWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3NlcmlhbGl6ZSh0cmFuc2FjdGlvbiwgc2lnbmF0dXJlKTtcbiAgICB9XG5cbiAgICAvLyBUeXBlZCBUcmFuc2FjdGlvbnMgKEVJUC0yNzE4KVxuICAgIHN3aXRjaCAodHJhbnNhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICByZXR1cm4gX3NlcmlhbGl6ZUVpcDI5MzAodHJhbnNhY3Rpb24sIHNpZ25hdHVyZSk7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiBfc2VyaWFsaXplRWlwMTU1OSh0cmFuc2FjdGlvbiwgc2lnbmF0dXJlKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihgdW5zdXBwb3J0ZWQgdHJhbnNhY3Rpb24gdHlwZTogJHsgdHJhbnNhY3Rpb24udHlwZSB9YCwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgb3BlcmF0aW9uOiBcInNlcmlhbGl6ZVRyYW5zYWN0aW9uXCIsXG4gICAgICAgIHRyYW5zYWN0aW9uVHlwZTogdHJhbnNhY3Rpb24udHlwZVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBfcGFyc2VFaXBTaWduYXR1cmUodHg6IFRyYW5zYWN0aW9uLCBmaWVsZHM6IEFycmF5PHN0cmluZz4sIHNlcmlhbGl6ZTogKHR4OiBVbnNpZ25lZFRyYW5zYWN0aW9uKSA9PiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZWNpZCA9IGhhbmRsZU51bWJlcihmaWVsZHNbMF0pLnRvTnVtYmVyKCk7XG4gICAgICAgIGlmIChyZWNpZCAhPT0gMCAmJiByZWNpZCAhPT0gMSkgeyB0aHJvdyBuZXcgRXJyb3IoXCJiYWQgcmVjaWRcIik7IH1cbiAgICAgICAgdHgudiA9IHJlY2lkO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHYgZm9yIHRyYW5zYWN0aW9uIHR5cGU6IDFcIiwgXCJ2XCIsIGZpZWxkc1swXSk7XG4gICAgfVxuXG4gICAgdHguciA9IGhleFplcm9QYWQoZmllbGRzWzFdLCAzMik7XG4gICAgdHgucyA9IGhleFplcm9QYWQoZmllbGRzWzJdLCAzMik7XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBkaWdlc3QgPSBrZWNjYWsyNTYoc2VyaWFsaXplKHR4KSk7XG4gICAgICAgIHR4LmZyb20gPSByZWNvdmVyQWRkcmVzcyhkaWdlc3QsIHsgcjogdHguciwgczogdHgucywgcmVjb3ZlcnlQYXJhbTogdHgudiB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikgeyB9XG59XG5cbmZ1bmN0aW9uIF9wYXJzZUVpcDE1NTkocGF5bG9hZDogVWludDhBcnJheSk6IFRyYW5zYWN0aW9uIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IFJMUC5kZWNvZGUocGF5bG9hZC5zbGljZSgxKSk7XG5cbiAgICBpZiAodHJhbnNhY3Rpb24ubGVuZ3RoICE9PSA5ICYmIHRyYW5zYWN0aW9uLmxlbmd0aCAhPT0gMTIpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgY29tcG9uZW50IGNvdW50IGZvciB0cmFuc2FjdGlvbiB0eXBlOiAyXCIsIFwicGF5bG9hZFwiLCBoZXhsaWZ5KHBheWxvYWQpKTtcbiAgICB9XG5cbiAgICBjb25zdCBtYXhQcmlvcml0eUZlZVBlckdhcyA9IGhhbmRsZU51bWJlcih0cmFuc2FjdGlvblsyXSk7XG4gICAgY29uc3QgbWF4RmVlUGVyR2FzID0gaGFuZGxlTnVtYmVyKHRyYW5zYWN0aW9uWzNdKTtcbiAgICBjb25zdCB0eDogVHJhbnNhY3Rpb24gPSB7XG4gICAgICAgIHR5cGU6ICAgICAgICAgICAgICAgICAgMixcbiAgICAgICAgY2hhaW5JZDogICAgICAgICAgICAgICBoYW5kbGVOdW1iZXIodHJhbnNhY3Rpb25bMF0pLnRvTnVtYmVyKCksXG4gICAgICAgIG5vbmNlOiAgICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyKHRyYW5zYWN0aW9uWzFdKS50b051bWJlcigpLFxuICAgICAgICBtYXhQcmlvcml0eUZlZVBlckdhczogIG1heFByaW9yaXR5RmVlUGVyR2FzLFxuICAgICAgICBtYXhGZWVQZXJHYXM6ICAgICAgICAgIG1heEZlZVBlckdhcyxcbiAgICAgICAgZ2FzUHJpY2U6ICAgICAgICAgICAgICBudWxsLFxuICAgICAgICBnYXNMaW1pdDogICAgICAgICAgICAgIGhhbmRsZU51bWJlcih0cmFuc2FjdGlvbls0XSksXG4gICAgICAgIHRvOiAgICAgICAgICAgICAgICAgICAgaGFuZGxlQWRkcmVzcyh0cmFuc2FjdGlvbls1XSksXG4gICAgICAgIHZhbHVlOiAgICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyKHRyYW5zYWN0aW9uWzZdKSxcbiAgICAgICAgZGF0YTogICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbls3XSxcbiAgICAgICAgYWNjZXNzTGlzdDogICAgICAgICAgICBhY2Nlc3NMaXN0aWZ5KHRyYW5zYWN0aW9uWzhdKSxcbiAgICB9O1xuXG4gICAgLy8gVW5zaWduZWQgRUlQLTE1NTkgVHJhbnNhY3Rpb25cbiAgICBpZiAodHJhbnNhY3Rpb24ubGVuZ3RoID09PSA5KSB7IHJldHVybiB0eDsgfVxuXG4gICAgdHguaGFzaCA9IGtlY2NhazI1NihwYXlsb2FkKTtcblxuICAgIF9wYXJzZUVpcFNpZ25hdHVyZSh0eCwgdHJhbnNhY3Rpb24uc2xpY2UoOSksIF9zZXJpYWxpemVFaXAxNTU5KTtcblxuICAgIHJldHVybiB0eDtcbn1cblxuZnVuY3Rpb24gX3BhcnNlRWlwMjkzMChwYXlsb2FkOiBVaW50OEFycmF5KTogVHJhbnNhY3Rpb24ge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gUkxQLmRlY29kZShwYXlsb2FkLnNsaWNlKDEpKTtcblxuICAgIGlmICh0cmFuc2FjdGlvbi5sZW5ndGggIT09IDggJiYgdHJhbnNhY3Rpb24ubGVuZ3RoICE9PSAxMSkge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBjb21wb25lbnQgY291bnQgZm9yIHRyYW5zYWN0aW9uIHR5cGU6IDFcIiwgXCJwYXlsb2FkXCIsIGhleGxpZnkocGF5bG9hZCkpO1xuICAgIH1cblxuICAgIGNvbnN0IHR4OiBUcmFuc2FjdGlvbiA9IHtcbiAgICAgICAgdHlwZTogICAgICAgMSxcbiAgICAgICAgY2hhaW5JZDogICAgaGFuZGxlTnVtYmVyKHRyYW5zYWN0aW9uWzBdKS50b051bWJlcigpLFxuICAgICAgICBub25jZTogICAgICBoYW5kbGVOdW1iZXIodHJhbnNhY3Rpb25bMV0pLnRvTnVtYmVyKCksXG4gICAgICAgIGdhc1ByaWNlOiAgIGhhbmRsZU51bWJlcih0cmFuc2FjdGlvblsyXSksXG4gICAgICAgIGdhc0xpbWl0OiAgIGhhbmRsZU51bWJlcih0cmFuc2FjdGlvblszXSksXG4gICAgICAgIHRvOiAgICAgICAgIGhhbmRsZUFkZHJlc3ModHJhbnNhY3Rpb25bNF0pLFxuICAgICAgICB2YWx1ZTogICAgICBoYW5kbGVOdW1iZXIodHJhbnNhY3Rpb25bNV0pLFxuICAgICAgICBkYXRhOiAgICAgICB0cmFuc2FjdGlvbls2XSxcbiAgICAgICAgYWNjZXNzTGlzdDogYWNjZXNzTGlzdGlmeSh0cmFuc2FjdGlvbls3XSlcbiAgICB9O1xuXG4gICAgLy8gVW5zaWduZWQgRUlQLTI5MzAgVHJhbnNhY3Rpb25cbiAgICBpZiAodHJhbnNhY3Rpb24ubGVuZ3RoID09PSA4KSB7IHJldHVybiB0eDsgfVxuXG4gICAgdHguaGFzaCA9IGtlY2NhazI1NihwYXlsb2FkKTtcblxuICAgIF9wYXJzZUVpcFNpZ25hdHVyZSh0eCwgdHJhbnNhY3Rpb24uc2xpY2UoOCksIF9zZXJpYWxpemVFaXAyOTMwKTtcblxuICAgIHJldHVybiB0eDtcbn1cblxuLy8gTGVnYWN5IFRyYW5zYWN0aW9ucyBhbmQgRUlQLTE1NVxuZnVuY3Rpb24gX3BhcnNlKHJhd1RyYW5zYWN0aW9uOiBVaW50OEFycmF5KTogVHJhbnNhY3Rpb24ge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gUkxQLmRlY29kZShyYXdUcmFuc2FjdGlvbik7XG5cbiAgICBpZiAodHJhbnNhY3Rpb24ubGVuZ3RoICE9PSA5ICYmIHRyYW5zYWN0aW9uLmxlbmd0aCAhPT0gNikge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCByYXcgdHJhbnNhY3Rpb25cIiwgXCJyYXdUcmFuc2FjdGlvblwiLCByYXdUcmFuc2FjdGlvbik7XG4gICAgfVxuXG4gICAgY29uc3QgdHg6IFRyYW5zYWN0aW9uID0ge1xuICAgICAgICBub25jZTogICAgaGFuZGxlTnVtYmVyKHRyYW5zYWN0aW9uWzBdKS50b051bWJlcigpLFxuICAgICAgICBnYXNQcmljZTogaGFuZGxlTnVtYmVyKHRyYW5zYWN0aW9uWzFdKSxcbiAgICAgICAgZ2FzTGltaXQ6IGhhbmRsZU51bWJlcih0cmFuc2FjdGlvblsyXSksXG4gICAgICAgIHRvOiAgICAgICBoYW5kbGVBZGRyZXNzKHRyYW5zYWN0aW9uWzNdKSxcbiAgICAgICAgdmFsdWU6ICAgIGhhbmRsZU51bWJlcih0cmFuc2FjdGlvbls0XSksXG4gICAgICAgIGRhdGE6ICAgICB0cmFuc2FjdGlvbls1XSxcbiAgICAgICAgY2hhaW5JZDogIDBcbiAgICB9O1xuXG4gICAgLy8gTGVnYWN5IHVuc2lnbmVkIHRyYW5zYWN0aW9uXG4gICAgaWYgKHRyYW5zYWN0aW9uLmxlbmd0aCA9PT0gNikgeyByZXR1cm4gdHg7IH1cblxuICAgIHRyeSB7XG4gICAgICAgIHR4LnYgPSBCaWdOdW1iZXIuZnJvbSh0cmFuc2FjdGlvbls2XSkudG9OdW1iZXIoKTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIEBUT0RPOiBXaGF0IG1ha2VzIHNuZXNlIHRvIGRvPyBUaGUgdiBpcyB0b28gYmlnXG4gICAgICAgIHJldHVybiB0eDtcbiAgICB9XG5cbiAgICB0eC5yID0gaGV4WmVyb1BhZCh0cmFuc2FjdGlvbls3XSwgMzIpO1xuICAgIHR4LnMgPSBoZXhaZXJvUGFkKHRyYW5zYWN0aW9uWzhdLCAzMik7XG5cbiAgICBpZiAoQmlnTnVtYmVyLmZyb20odHgucikuaXNaZXJvKCkgJiYgQmlnTnVtYmVyLmZyb20odHgucykuaXNaZXJvKCkpIHtcbiAgICAgICAgLy8gRUlQLTE1NSB1bnNpZ25lZCB0cmFuc2FjdGlvblxuICAgICAgICB0eC5jaGFpbklkID0gdHgudjtcbiAgICAgICAgdHgudiA9IDA7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTaWduZWQgVHJhbnNhY3Rpb25cblxuICAgICAgICB0eC5jaGFpbklkID0gTWF0aC5mbG9vcigodHgudiAtIDM1KSAvIDIpO1xuICAgICAgICBpZiAodHguY2hhaW5JZCA8IDApIHsgdHguY2hhaW5JZCA9IDA7IH1cblxuICAgICAgICBsZXQgcmVjb3ZlcnlQYXJhbSA9IHR4LnYgLSAyNztcblxuICAgICAgICBjb25zdCByYXcgPSB0cmFuc2FjdGlvbi5zbGljZSgwLCA2KTtcblxuICAgICAgICBpZiAodHguY2hhaW5JZCAhPT0gMCkge1xuICAgICAgICAgICAgcmF3LnB1c2goaGV4bGlmeSh0eC5jaGFpbklkKSk7XG4gICAgICAgICAgICByYXcucHVzaChcIjB4XCIpO1xuICAgICAgICAgICAgcmF3LnB1c2goXCIweFwiKTtcbiAgICAgICAgICAgIHJlY292ZXJ5UGFyYW0gLT0gdHguY2hhaW5JZCAqIDIgKyA4O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGlnZXN0ID0ga2VjY2FrMjU2KFJMUC5lbmNvZGUocmF3KSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0eC5mcm9tID0gcmVjb3ZlckFkZHJlc3MoZGlnZXN0LCB7IHI6IGhleGxpZnkodHguciksIHM6IGhleGxpZnkodHgucyksIHJlY292ZXJ5UGFyYW06IHJlY292ZXJ5UGFyYW0gfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IH1cblxuICAgICAgICB0eC5oYXNoID0ga2VjY2FrMjU2KHJhd1RyYW5zYWN0aW9uKTtcbiAgICB9XG5cbiAgICB0eC50eXBlID0gbnVsbDtcblxuICAgIHJldHVybiB0eDtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UocmF3VHJhbnNhY3Rpb246IEJ5dGVzTGlrZSk6IFRyYW5zYWN0aW9uIHtcbiAgICBjb25zdCBwYXlsb2FkID0gYXJyYXlpZnkocmF3VHJhbnNhY3Rpb24pO1xuXG4gICAgLy8gTGVnYWN5IGFuZCBFSVAtMTU1IFRyYW5zYWN0aW9uc1xuICAgIGlmIChwYXlsb2FkWzBdID4gMHg3ZikgeyByZXR1cm4gX3BhcnNlKHBheWxvYWQpOyB9XG5cbiAgICAvLyBUeXBlZCBUcmFuc2FjdGlvbiAoRUlQLTI3MTgpXG4gICAgc3dpdGNoIChwYXlsb2FkWzBdKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJldHVybiBfcGFyc2VFaXAyOTMwKHBheWxvYWQpO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gX3BhcnNlRWlwMTU1OShwYXlsb2FkKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihgdW5zdXBwb3J0ZWQgdHJhbnNhY3Rpb24gdHlwZTogJHsgcGF5bG9hZFswXSB9YCwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgb3BlcmF0aW9uOiBcInBhcnNlVHJhbnNhY3Rpb25cIixcbiAgICAgICAgdHJhbnNhY3Rpb25UeXBlOiBwYXlsb2FkWzBdXG4gICAgfSk7XG59XG5cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBjaGVja1Jlc3VsdEVycm9ycywgRXZlbnRGcmFnbWVudCwgRnJhZ21lbnQsIEZ1bmN0aW9uRnJhZ21lbnQsIEluZGV4ZWQsIEludGVyZmFjZSwgSnNvbkZyYWdtZW50LCBMb2dEZXNjcmlwdGlvbiwgUGFyYW1UeXBlLCBSZXN1bHQgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYWJpXCI7XG5pbXBvcnQgeyBCbG9jaywgQmxvY2tUYWcsIEZpbHRlciwgRmlsdGVyQnlCbG9ja0hhc2gsIExpc3RlbmVyLCBMb2csIFByb3ZpZGVyLCBUcmFuc2FjdGlvblJlY2VpcHQsIFRyYW5zYWN0aW9uUmVxdWVzdCwgVHJhbnNhY3Rpb25SZXNwb25zZSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1wcm92aWRlclwiO1xuaW1wb3J0IHsgU2lnbmVyLCBWb2lkU2lnbmVyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2Fic3RyYWN0LXNpZ25lclwiO1xuaW1wb3J0IHsgZ2V0QWRkcmVzcywgZ2V0Q29udHJhY3RBZGRyZXNzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2FkZHJlc3NcIjtcbmltcG9ydCB7IEJpZ051bWJlciwgQmlnTnVtYmVyaXNoIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2JpZ251bWJlclwiO1xuaW1wb3J0IHsgYXJyYXlpZnksIEJ5dGVzTGlrZSwgY29uY2F0LCBoZXhsaWZ5LCBpc0J5dGVzLCBpc0hleFN0cmluZyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgRGVmZXJyYWJsZSwgZGVmaW5lUmVhZE9ubHksIGRlZXBDb3B5LCBnZXRTdGF0aWMsIHJlc29sdmVQcm9wZXJ0aWVzLCBzaGFsbG93Q29weSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBBY2Nlc3NMaXN0LCBhY2Nlc3NMaXN0aWZ5LCBBY2Nlc3NMaXN0aXNoIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3RyYW5zYWN0aW9uc1wiO1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcblxuZXhwb3J0IGludGVyZmFjZSBPdmVycmlkZXMge1xuICAgIGdhc0xpbWl0PzogQmlnTnVtYmVyaXNoIHwgUHJvbWlzZTxCaWdOdW1iZXJpc2g+O1xuICAgIGdhc1ByaWNlPzogQmlnTnVtYmVyaXNoIHwgUHJvbWlzZTxCaWdOdW1iZXJpc2g+O1xuICAgIG1heEZlZVBlckdhcz86IEJpZ051bWJlcmlzaCB8IFByb21pc2U8QmlnTnVtYmVyaXNoPjtcbiAgICBtYXhQcmlvcml0eUZlZVBlckdhcz86IEJpZ051bWJlcmlzaCB8IFByb21pc2U8QmlnTnVtYmVyaXNoPjtcbiAgICBub25jZT86IEJpZ051bWJlcmlzaCB8IFByb21pc2U8QmlnTnVtYmVyaXNoPjtcbiAgICB0eXBlPzogbnVtYmVyO1xuICAgIGFjY2Vzc0xpc3Q/OiBBY2Nlc3NMaXN0aXNoO1xuICAgIGN1c3RvbURhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICAgIGNjaXBSZWFkRW5hYmxlZD86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIFBheWFibGVPdmVycmlkZXMgZXh0ZW5kcyBPdmVycmlkZXMge1xuICAgIHZhbHVlPzogQmlnTnVtYmVyaXNoIHwgUHJvbWlzZTxCaWdOdW1iZXJpc2g+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENhbGxPdmVycmlkZXMgZXh0ZW5kcyBQYXlhYmxlT3ZlcnJpZGVzIHtcbiAgICBibG9ja1RhZz86IEJsb2NrVGFnIHwgUHJvbWlzZTxCbG9ja1RhZz47XG4gICAgZnJvbT86IHN0cmluZyB8IFByb21pc2U8c3RyaW5nPjtcbn1cblxuLy8gQFRPRE86IEJldHRlciBoaWVyYXJjaHkgd2l0aDogKGluIHY2KVxuLy8gIC0gYWJzdHJhY3QtcHJvdmlkZXI6VHJhbnNhY3Rpb25SZXF1ZXN0XG4vLyAgLSB0cmFuc2FjdGlvbnM6VHJhbnNhY3Rpb25cbi8vICAtIHRyYW5zYWN0aW9uOlVuc2lnbmVkVHJhbnNhY3Rpb25cblxuZXhwb3J0IGludGVyZmFjZSBQb3B1bGF0ZWRUcmFuc2FjdGlvbiB7XG4gICAgdG8/OiBzdHJpbmc7XG4gICAgZnJvbT86IHN0cmluZztcbiAgICBub25jZT86IG51bWJlcjtcblxuICAgIGdhc0xpbWl0PzogQmlnTnVtYmVyO1xuICAgIGdhc1ByaWNlPzogQmlnTnVtYmVyO1xuXG4gICAgZGF0YT86IHN0cmluZztcbiAgICB2YWx1ZT86IEJpZ051bWJlcjtcbiAgICBjaGFpbklkPzogbnVtYmVyO1xuXG4gICAgdHlwZT86IG51bWJlcjtcbiAgICBhY2Nlc3NMaXN0PzogQWNjZXNzTGlzdDtcblxuICAgIG1heEZlZVBlckdhcz86IEJpZ051bWJlcjtcbiAgICBtYXhQcmlvcml0eUZlZVBlckdhcz86IEJpZ051bWJlcjtcblxuICAgIGN1c3RvbURhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICAgIGNjaXBSZWFkRW5hYmxlZD86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgdHlwZSBFdmVudEZpbHRlciA9IHtcbiAgICBhZGRyZXNzPzogc3RyaW5nO1xuICAgIHRvcGljcz86IEFycmF5PHN0cmluZ3xBcnJheTxzdHJpbmc+Pjtcbn07XG5cblxuZXhwb3J0IHR5cGUgQ29udHJhY3RGdW5jdGlvbjxUID0gYW55PiA9ICguLi5hcmdzOiBBcnJheTxhbnk+KSA9PiBQcm9taXNlPFQ+O1xuXG5cbi8vIFRoZSAobiArIDEpdGggcGFyYW1ldGVyIHBhc3NlZCB0byBjb250cmFjdCBldmVudCBjYWxsYmFja3NcbmV4cG9ydCBpbnRlcmZhY2UgRXZlbnQgZXh0ZW5kcyBMb2cge1xuXG4gICAgLy8gVGhlIGV2ZW50IG5hbWVcbiAgICBldmVudD86IHN0cmluZztcblxuICAgIC8vIFRoZSBldmVudCBzaWduYXR1cmVcbiAgICBldmVudFNpZ25hdHVyZT86IHN0cmluZztcblxuICAgIC8vIFRoZSBwYXJzZWQgYXJndW1lbnRzIHRvIHRoZSBldmVudFxuICAgIGFyZ3M/OiBSZXN1bHQ7XG5cbiAgICAvLyBJZiBwYXJzaW5nIHRoZSBhcmd1bWVudHMgZmFpbGVkLCB0aGlzIGlzIHRoZSBlcnJvclxuICAgIGRlY29kZUVycm9yPzogRXJyb3I7XG5cbiAgICAvLyBBIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gZGVjb2RlIGV2ZW50IGRhdGEgYW5kIHRvcGljc1xuICAgIGRlY29kZT86IChkYXRhOiBzdHJpbmcsIHRvcGljcz86IEFycmF5PHN0cmluZz4pID0+IGFueTtcblxuICAgIC8vIEEgZnVuY3Rpb24gdGhhdCB3aWxsIHJlbW92ZSB0aGUgbGlzdGVuZXIgcmVzcG9uc2libGUgZm9yIHRoaXMgZXZlbnQgKGlmIGFueSlcbiAgICByZW1vdmVMaXN0ZW5lcjogKCkgPT4gdm9pZDtcblxuICAgIC8vIEdldCBibG9ja2NoYWluIGRldGFpbHMgYWJvdXQgdGhpcyBldmVudCdzIGJsb2NrIGFuZCB0cmFuc2FjdGlvblxuICAgIGdldEJsb2NrOiAoKSA9PiBQcm9taXNlPEJsb2NrPjtcbiAgICBnZXRUcmFuc2FjdGlvbjogKCkgPT4gUHJvbWlzZTxUcmFuc2FjdGlvblJlc3BvbnNlPjtcbiAgICBnZXRUcmFuc2FjdGlvblJlY2VpcHQ6ICgpID0+IFByb21pc2U8VHJhbnNhY3Rpb25SZWNlaXB0Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb250cmFjdFJlY2VpcHQgZXh0ZW5kcyBUcmFuc2FjdGlvblJlY2VpcHQge1xuICAgIGV2ZW50cz86IEFycmF5PEV2ZW50Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb250cmFjdFRyYW5zYWN0aW9uIGV4dGVuZHMgVHJhbnNhY3Rpb25SZXNwb25zZSB7XG4gICAgd2FpdChjb25maXJtYXRpb25zPzogbnVtYmVyKTogUHJvbWlzZTxDb250cmFjdFJlY2VpcHQ+O1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmNvbnN0IGFsbG93ZWRUcmFuc2FjdGlvbktleXM6IHsgWyBrZXk6IHN0cmluZyBdOiBib29sZWFuIH0gPSB7XG4gICAgY2hhaW5JZDogdHJ1ZSwgZGF0YTogdHJ1ZSwgZnJvbTogdHJ1ZSwgZ2FzTGltaXQ6IHRydWUsIGdhc1ByaWNlOnRydWUsIG5vbmNlOiB0cnVlLCB0bzogdHJ1ZSwgdmFsdWU6IHRydWUsXG4gICAgdHlwZTogdHJ1ZSwgYWNjZXNzTGlzdDogdHJ1ZSxcbiAgICBtYXhGZWVQZXJHYXM6IHRydWUsIG1heFByaW9yaXR5RmVlUGVyR2FzOiB0cnVlLFxuICAgIGN1c3RvbURhdGE6IHRydWUsXG4gICAgY2NpcFJlYWRFbmFibGVkOiB0cnVlXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVOYW1lKHJlc29sdmVyOiBTaWduZXIgfCBQcm92aWRlciwgbmFtZU9yUHJvbWlzZTogc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBuYW1lID0gYXdhaXQgbmFtZU9yUHJvbWlzZTtcblxuICAgIGlmICh0eXBlb2YobmFtZSkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYWRkcmVzcyBvciBFTlMgbmFtZVwiLCBcIm5hbWVcIiwgbmFtZSk7XG4gICAgfVxuXG4gICAgLy8gSWYgaXQgaXMgYWxyZWFkeSBhbiBhZGRyZXNzLCBqdXN0IHVzZSBpdCAoYWZ0ZXIgYWRkaW5nIGNoZWNrc3VtKVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBnZXRBZGRyZXNzKG5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IH1cblxuICAgIGlmICghcmVzb2x2ZXIpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJhIHByb3ZpZGVyIG9yIHNpZ25lciBpcyBuZWVkZWQgdG8gcmVzb2x2ZSBFTlMgbmFtZXNcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJyZXNvbHZlTmFtZVwiXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGFkZHJlc3MgPSBhd2FpdCByZXNvbHZlci5yZXNvbHZlTmFtZShuYW1lKTtcblxuICAgIGlmIChhZGRyZXNzID09IG51bGwpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInJlc29sdmVyIG9yIGFkZHIgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIEVOUyBuYW1lXCIsIFwibmFtZVwiLCBuYW1lKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkcmVzcztcbn1cblxuLy8gUmVjdXJzaXZlbHkgcmVwbGFjZXMgRU5TIG5hbWVzIHdpdGggcHJvbWlzZXMgdG8gcmVzb2x2ZSB0aGUgbmFtZSBhbmQgcmVzb2x2ZXMgYWxsIHByb3BlcnRpZXNcbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVBZGRyZXNzZXMocmVzb2x2ZXI6IFNpZ25lciB8IFByb3ZpZGVyLCB2YWx1ZTogYW55LCBwYXJhbVR5cGU6IFBhcmFtVHlwZSB8IEFycmF5PFBhcmFtVHlwZT4pOiBQcm9taXNlPGFueT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmFtVHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKHBhcmFtVHlwZS5tYXAoKHBhcmFtVHlwZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlQWRkcmVzc2VzKFxuICAgICAgICAgICAgICAgIHJlc29sdmVyLFxuICAgICAgICAgICAgICAgICgoQXJyYXkuaXNBcnJheSh2YWx1ZSkpID8gdmFsdWVbaW5kZXhdOiB2YWx1ZVtwYXJhbVR5cGUubmFtZV0pLFxuICAgICAgICAgICAgICAgIHBhcmFtVHlwZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbVR5cGUudHlwZSA9PT0gXCJhZGRyZXNzXCIpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHJlc29sdmVOYW1lKHJlc29sdmVyLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtVHlwZS50eXBlID09PSBcInR1cGxlXCIpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHJlc29sdmVBZGRyZXNzZXMocmVzb2x2ZXIsIHZhbHVlLCBwYXJhbVR5cGUuY29tcG9uZW50cyk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtVHlwZS5iYXNlVHlwZSA9PT0gXCJhcnJheVwiKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChsb2dnZXIubWFrZUVycm9yKFwiaW52YWxpZCB2YWx1ZSBmb3IgYXJyYXlcIiwgTG9nZ2VyLmVycm9ycy5JTlZBTElEX0FSR1VNRU5ULCB7XG4gICAgICAgICAgICAgICAgYXJndW1lbnQ6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbCh2YWx1ZS5tYXAoKHYpID0+IHJlc29sdmVBZGRyZXNzZXMocmVzb2x2ZXIsIHYsIHBhcmFtVHlwZS5hcnJheUNoaWxkcmVuKSkpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcG9wdWxhdGVUcmFuc2FjdGlvbihjb250cmFjdDogQ29udHJhY3QsIGZyYWdtZW50OiBGdW5jdGlvbkZyYWdtZW50LCBhcmdzOiBBcnJheTxhbnk+KTogUHJvbWlzZTxQb3B1bGF0ZWRUcmFuc2FjdGlvbj4ge1xuICAgIC8vIElmIGFuIGV4dHJhIGFyZ3VtZW50IGlzIGdpdmVuLCBpdCBpcyBvdmVycmlkZXNcbiAgICBsZXQgb3ZlcnJpZGVzOiBDYWxsT3ZlcnJpZGVzID0geyB9O1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gZnJhZ21lbnQuaW5wdXRzLmxlbmd0aCArIDEgJiYgdHlwZW9mKGFyZ3NbYXJncy5sZW5ndGggLSAxXSkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgb3ZlcnJpZGVzID0gc2hhbGxvd0NvcHkoYXJncy5wb3AoKSk7XG4gICAgfVxuXG4gICAgLy8gTWFrZSBzdXJlIHRoZSBwYXJhbWV0ZXIgY291bnQgbWF0Y2hlc1xuICAgIGxvZ2dlci5jaGVja0FyZ3VtZW50Q291bnQoYXJncy5sZW5ndGgsIGZyYWdtZW50LmlucHV0cy5sZW5ndGgsIFwicGFzc2VkIHRvIGNvbnRyYWN0XCIpO1xuXG4gICAgLy8gUG9wdWxhdGUgXCJmcm9tXCIgb3ZlcnJpZGUgKGFsbG93IHByb21pc2VzKVxuICAgIGlmIChjb250cmFjdC5zaWduZXIpIHtcbiAgICAgICAgaWYgKG92ZXJyaWRlcy5mcm9tKSB7XG4gICAgICAgICAgICAvLyBDb250cmFjdHMgd2l0aCBhIFNpZ25lciBhcmUgZnJvbSB0aGUgU2lnbmVyJ3MgZnJhbWUtb2YtcmVmZXJlbmNlO1xuICAgICAgICAgICAgLy8gYnV0IHdlIGFsbG93IG92ZXJyaWRpbmcgXCJmcm9tXCIgaWYgaXQgbWF0Y2hlcyB0aGUgc2lnbmVyXG4gICAgICAgICAgICBvdmVycmlkZXMuZnJvbSA9IHJlc29sdmVQcm9wZXJ0aWVzKHtcbiAgICAgICAgICAgICAgICBvdmVycmlkZTogcmVzb2x2ZU5hbWUoY29udHJhY3Quc2lnbmVyLCBvdmVycmlkZXMuZnJvbSksXG4gICAgICAgICAgICAgICAgc2lnbmVyOiBjb250cmFjdC5zaWduZXIuZ2V0QWRkcmVzcygpXG4gICAgICAgICAgICB9KS50aGVuKGFzeW5jIChjaGVjaykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChnZXRBZGRyZXNzKGNoZWNrLnNpZ25lcikgIT09IGNoZWNrLm92ZXJyaWRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiQ29udHJhY3Qgd2l0aCBhIFNpZ25lciBjYW5ub3Qgb3ZlcnJpZGUgZnJvbVwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcIm92ZXJyaWRlcy5mcm9tXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrLm92ZXJyaWRlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG92ZXJyaWRlcy5mcm9tID0gY29udHJhY3Quc2lnbmVyLmdldEFkZHJlc3MoKTtcbiAgICAgICAgfVxuXG4gICAgfSBlbHNlIGlmIChvdmVycmlkZXMuZnJvbSkge1xuICAgICAgICBvdmVycmlkZXMuZnJvbSA9IHJlc29sdmVOYW1lKGNvbnRyYWN0LnByb3ZpZGVyLCBvdmVycmlkZXMuZnJvbSk7XG5cbiAgICAvL30gZWxzZSB7XG4gICAgICAgIC8vIENvbnRyYWN0cyB3aXRob3V0IGEgc2lnbmVyIGNhbiBvdmVycmlkZSBcImZyb21cIiwgYW5kIGlmXG4gICAgICAgIC8vIHVuc3BlY2lmaWVkIHRoZSB6ZXJvIGFkZHJlc3MgaXMgdXNlZFxuICAgICAgICAvL292ZXJyaWRlcy5mcm9tID0gQWRkcmVzc1plcm87XG4gICAgfVxuXG4gICAgLy8gV2FpdCBmb3IgYWxsIGRlcGVuZGVuY2llcyB0byBiZSByZXNvbHZlZCAocHJlZmVyIHRoZSBzaWduZXIgb3ZlciB0aGUgcHJvdmlkZXIpXG4gICAgY29uc3QgcmVzb2x2ZWQgPSBhd2FpdCByZXNvbHZlUHJvcGVydGllcyh7XG4gICAgICAgIGFyZ3M6IHJlc29sdmVBZGRyZXNzZXMoY29udHJhY3Quc2lnbmVyIHx8IGNvbnRyYWN0LnByb3ZpZGVyLCBhcmdzLCBmcmFnbWVudC5pbnB1dHMpLFxuICAgICAgICBhZGRyZXNzOiBjb250cmFjdC5yZXNvbHZlZEFkZHJlc3MsXG4gICAgICAgIG92ZXJyaWRlczogKHJlc29sdmVQcm9wZXJ0aWVzKG92ZXJyaWRlcykgfHwgeyB9KVxuICAgIH0pO1xuXG4gICAgLy8gVGhlIEFCSSBjb2RlZCB0cmFuc2FjdGlvblxuICAgIGNvbnN0IGRhdGEgPSBjb250cmFjdC5pbnRlcmZhY2UuZW5jb2RlRnVuY3Rpb25EYXRhKGZyYWdtZW50LCByZXNvbHZlZC5hcmdzKTtcbiAgICBjb25zdCB0eDogUG9wdWxhdGVkVHJhbnNhY3Rpb24gPSB7XG4gICAgICBkYXRhOiBkYXRhLFxuICAgICAgdG86IHJlc29sdmVkLmFkZHJlc3NcbiAgICB9O1xuXG4gICAgLy8gUmVzb2x2ZWQgT3ZlcnJpZGVzXG4gICAgY29uc3Qgcm8gPSByZXNvbHZlZC5vdmVycmlkZXM7XG5cbiAgICAvLyBQb3B1bGF0ZSBzaW1wbGUgb3ZlcnJpZGVzXG4gICAgaWYgKHJvLm5vbmNlICE9IG51bGwpIHsgdHgubm9uY2UgPSBCaWdOdW1iZXIuZnJvbShyby5ub25jZSkudG9OdW1iZXIoKTsgfVxuICAgIGlmIChyby5nYXNMaW1pdCAhPSBudWxsKSB7IHR4Lmdhc0xpbWl0ID0gQmlnTnVtYmVyLmZyb20ocm8uZ2FzTGltaXQpOyB9XG4gICAgaWYgKHJvLmdhc1ByaWNlICE9IG51bGwpIHsgdHguZ2FzUHJpY2UgPSBCaWdOdW1iZXIuZnJvbShyby5nYXNQcmljZSk7IH1cbiAgICBpZiAocm8ubWF4RmVlUGVyR2FzICE9IG51bGwpIHsgdHgubWF4RmVlUGVyR2FzID0gQmlnTnVtYmVyLmZyb20ocm8ubWF4RmVlUGVyR2FzKTsgfVxuICAgIGlmIChyby5tYXhQcmlvcml0eUZlZVBlckdhcyAhPSBudWxsKSB7IHR4Lm1heFByaW9yaXR5RmVlUGVyR2FzID0gQmlnTnVtYmVyLmZyb20ocm8ubWF4UHJpb3JpdHlGZWVQZXJHYXMpOyB9XG4gICAgaWYgKHJvLmZyb20gIT0gbnVsbCkgeyB0eC5mcm9tID0gcm8uZnJvbTsgfVxuXG4gICAgaWYgKHJvLnR5cGUgIT0gbnVsbCkgeyB0eC50eXBlID0gcm8udHlwZTsgfVxuICAgIGlmIChyby5hY2Nlc3NMaXN0ICE9IG51bGwpIHsgdHguYWNjZXNzTGlzdCA9IGFjY2Vzc0xpc3RpZnkocm8uYWNjZXNzTGlzdCk7IH1cblxuICAgIC8vIElmIHRoZXJlIHdhcyBubyBcImdhc0xpbWl0XCIgb3ZlcnJpZGUsIGJ1dCB0aGUgQUJJIHNwZWNpZmllcyBhIGRlZmF1bHQsIHVzZSBpdFxuICAgIGlmICh0eC5nYXNMaW1pdCA9PSBudWxsICYmIGZyYWdtZW50LmdhcyAhPSBudWxsKSB7XG4gICAgICAgIC8vIENvbXB1dGUgdGhlIGludHJpbnNpYyBnYXMgY29zdCBmb3IgdGhpcyB0cmFuc2FjdGlvblxuICAgICAgICAvLyBAVE9ETzogVGhpcyBpcyBiYXNlZCBvbiB0aGUgeWVsbG93IHBhcGVyIGFzIG9mIFBldGVyc2J1cmc7IHRoaXMgaXMgc29tZXRoaW5nXG4gICAgICAgIC8vIHdlIG1heSB3aXNoIHRvIHBhcmFtZXRlcml6ZSBpbiB2NiBhcyBwYXJ0IG9mIHRoZSBOZXR3b3JrIG9iamVjdC4gU2luY2UgdGhpc1xuICAgICAgICAvLyBpcyBhbHdheXMgYSBub24tbmlsIHRvIGFkZHJlc3MsIHdlIGNhbiBpZ25vcmUgR19jcmVhdGUsIGJ1dCBtYXkgd2lzaCB0byBhZGRcbiAgICAgICAgLy8gc2ltaWxhciBsb2dpYyB0byB0aGUgQ29udHJhY3RGYWN0b3J5LlxuICAgICAgICBsZXQgaW50cmluc2ljID0gMjEwMDA7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gYXJyYXlpZnkoZGF0YSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGludHJpbnNpYyArPSA0O1xuICAgICAgICAgICAgaWYgKGJ5dGVzW2ldKSB7IGludHJpbnNpYyArPSA2NDsgfVxuICAgICAgICB9XG4gICAgICAgIHR4Lmdhc0xpbWl0ID0gQmlnTnVtYmVyLmZyb20oZnJhZ21lbnQuZ2FzKS5hZGQoaW50cmluc2ljKTtcbiAgICB9XG5cbiAgICAvLyBQb3B1bGF0ZSBcInZhbHVlXCIgb3ZlcnJpZGVcbiAgICBpZiAocm8udmFsdWUpIHtcbiAgICAgICAgY29uc3Qgcm9WYWx1ZSA9IEJpZ051bWJlci5mcm9tKHJvLnZhbHVlKTtcbiAgICAgICAgaWYgKCFyb1ZhbHVlLmlzWmVybygpICYmICFmcmFnbWVudC5wYXlhYmxlKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcIm5vbi1wYXlhYmxlIG1ldGhvZCBjYW5ub3Qgb3ZlcnJpZGUgdmFsdWVcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwib3ZlcnJpZGVzLnZhbHVlXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IG92ZXJyaWRlcy52YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdHgudmFsdWUgPSByb1ZhbHVlO1xuICAgIH1cblxuICAgIGlmIChyby5jdXN0b21EYXRhKSB7XG4gICAgICAgIHR4LmN1c3RvbURhdGEgPSBzaGFsbG93Q29weShyby5jdXN0b21EYXRhKTtcbiAgICB9XG5cbiAgICBpZiAocm8uY2NpcFJlYWRFbmFibGVkKSB7XG4gICAgICAgIHR4LmNjaXBSZWFkRW5hYmxlZCA9ICEhcm8uY2NpcFJlYWRFbmFibGVkO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSB0aGUgb3ZlcnJpZGVzXG4gICAgZGVsZXRlIG92ZXJyaWRlcy5ub25jZTtcbiAgICBkZWxldGUgb3ZlcnJpZGVzLmdhc0xpbWl0O1xuICAgIGRlbGV0ZSBvdmVycmlkZXMuZ2FzUHJpY2U7XG4gICAgZGVsZXRlIG92ZXJyaWRlcy5mcm9tO1xuICAgIGRlbGV0ZSBvdmVycmlkZXMudmFsdWU7XG5cbiAgICBkZWxldGUgb3ZlcnJpZGVzLnR5cGU7XG4gICAgZGVsZXRlIG92ZXJyaWRlcy5hY2Nlc3NMaXN0O1xuXG4gICAgZGVsZXRlIG92ZXJyaWRlcy5tYXhGZWVQZXJHYXM7XG4gICAgZGVsZXRlIG92ZXJyaWRlcy5tYXhQcmlvcml0eUZlZVBlckdhcztcblxuICAgIGRlbGV0ZSBvdmVycmlkZXMuY3VzdG9tRGF0YTtcbiAgICBkZWxldGUgb3ZlcnJpZGVzLmNjaXBSZWFkRW5hYmxlZDtcblxuICAgIC8vIE1ha2Ugc3VyZSB0aGVyZSBhcmUgbm8gc3RyYXkgb3ZlcnJpZGVzLCB3aGljaCBtYXkgaW5kaWNhdGUgYVxuICAgIC8vIHR5cG8gb3IgdXNpbmcgYW4gdW5zdXBwb3J0ZWQga2V5LlxuICAgIGNvbnN0IGxlZnRvdmVycyA9IE9iamVjdC5rZXlzKG92ZXJyaWRlcykuZmlsdGVyKChrZXkpID0+ICgoPGFueT5vdmVycmlkZXMpW2tleV0gIT0gbnVsbCkpO1xuICAgIGlmIChsZWZ0b3ZlcnMubGVuZ3RoKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKGBjYW5ub3Qgb3ZlcnJpZGUgJHsgbGVmdG92ZXJzLm1hcCgobCkgPT4gSlNPTi5zdHJpbmdpZnkobCkpLmpvaW4oXCIsXCIpIH1gLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBcIm92ZXJyaWRlc1wiLFxuICAgICAgICAgICAgb3ZlcnJpZGVzOiBsZWZ0b3ZlcnNcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHR4O1xufVxuXG5cbmZ1bmN0aW9uIGJ1aWxkUG9wdWxhdGUoY29udHJhY3Q6IENvbnRyYWN0LCBmcmFnbWVudDogRnVuY3Rpb25GcmFnbWVudCk6IENvbnRyYWN0RnVuY3Rpb248UG9wdWxhdGVkVHJhbnNhY3Rpb24+IHtcbiAgICByZXR1cm4gZnVuY3Rpb24oLi4uYXJnczogQXJyYXk8YW55Pik6IFByb21pc2U8UG9wdWxhdGVkVHJhbnNhY3Rpb24+IHtcbiAgICAgICAgcmV0dXJuIHBvcHVsYXRlVHJhbnNhY3Rpb24oY29udHJhY3QsIGZyYWdtZW50LCBhcmdzKTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBidWlsZEVzdGltYXRlKGNvbnRyYWN0OiBDb250cmFjdCwgZnJhZ21lbnQ6IEZ1bmN0aW9uRnJhZ21lbnQpOiBDb250cmFjdEZ1bmN0aW9uPEJpZ051bWJlcj4ge1xuICAgIGNvbnN0IHNpZ25lck9yUHJvdmlkZXIgPSAoY29udHJhY3Quc2lnbmVyIHx8IGNvbnRyYWN0LnByb3ZpZGVyKTtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24oLi4uYXJnczogQXJyYXk8YW55Pik6IFByb21pc2U8QmlnTnVtYmVyPiB7XG4gICAgICAgIGlmICghc2lnbmVyT3JQcm92aWRlcikge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJlc3RpbWF0ZSByZXF1aXJlIGEgcHJvdmlkZXIgb3Igc2lnbmVyXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcImVzdGltYXRlR2FzXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0eCA9IGF3YWl0IHBvcHVsYXRlVHJhbnNhY3Rpb24oY29udHJhY3QsIGZyYWdtZW50LCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHNpZ25lck9yUHJvdmlkZXIuZXN0aW1hdGVHYXModHgpO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGFkZENvbnRyYWN0V2FpdChjb250cmFjdDogQ29udHJhY3QsIHR4OiBUcmFuc2FjdGlvblJlc3BvbnNlKSB7XG4gICAgY29uc3Qgd2FpdCA9IHR4LndhaXQuYmluZCh0eCk7XG4gICAgdHgud2FpdCA9IChjb25maXJtYXRpb25zPzogbnVtYmVyKSA9PiB7XG4gICAgICAgIHJldHVybiB3YWl0KGNvbmZpcm1hdGlvbnMpLnRoZW4oKHJlY2VpcHQ6IENvbnRyYWN0UmVjZWlwdCkgPT4ge1xuICAgICAgICAgICAgcmVjZWlwdC5ldmVudHMgPSByZWNlaXB0LmxvZ3MubWFwKChsb2cpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnQ6IEV2ZW50ID0gKDxFdmVudD5kZWVwQ29weShsb2cpKTtcbiAgICAgICAgICAgICAgICBsZXQgcGFyc2VkOiBMb2dEZXNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkID0gY29udHJhY3QuaW50ZXJmYWNlLnBhcnNlTG9nKGxvZyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSl7IH1cblxuICAgICAgICAgICAgICAgIC8vIFN1Y2Nlc3NmdWxseSBwYXJzZWQgdGhlIGV2ZW50IGxvZzsgaW5jbHVkZSBpdFxuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuYXJncyA9IHBhcnNlZC5hcmdzO1xuICAgICAgICAgICAgICAgICAgICBldmVudC5kZWNvZGUgPSAoZGF0YTogQnl0ZXNMaWtlLCB0b3BpY3M/OiBBcnJheTxhbnk+KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udHJhY3QuaW50ZXJmYWNlLmRlY29kZUV2ZW50TG9nKHBhcnNlZC5ldmVudEZyYWdtZW50LCBkYXRhLCB0b3BpY3MpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBldmVudC5ldmVudCA9IHBhcnNlZC5uYW1lO1xuICAgICAgICAgICAgICAgICAgICBldmVudC5ldmVudFNpZ25hdHVyZSA9IHBhcnNlZC5zaWduYXR1cmU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIG9wZXJhdGlvbnNcbiAgICAgICAgICAgICAgICBldmVudC5yZW1vdmVMaXN0ZW5lciA9ICgpID0+IHsgcmV0dXJuIGNvbnRyYWN0LnByb3ZpZGVyOyB9XG4gICAgICAgICAgICAgICAgZXZlbnQuZ2V0QmxvY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250cmFjdC5wcm92aWRlci5nZXRCbG9jayhyZWNlaXB0LmJsb2NrSGFzaCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGV2ZW50LmdldFRyYW5zYWN0aW9uID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udHJhY3QucHJvdmlkZXIuZ2V0VHJhbnNhY3Rpb24ocmVjZWlwdC50cmFuc2FjdGlvbkhhc2gpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBldmVudC5nZXRUcmFuc2FjdGlvblJlY2VpcHQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVjZWlwdCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZWNlaXB0O1xuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBidWlsZENhbGwoY29udHJhY3Q6IENvbnRyYWN0LCBmcmFnbWVudDogRnVuY3Rpb25GcmFnbWVudCwgY29sbGFwc2VTaW1wbGU6IGJvb2xlYW4pOiBDb250cmFjdEZ1bmN0aW9uIHtcbiAgICBjb25zdCBzaWduZXJPclByb3ZpZGVyID0gKGNvbnRyYWN0LnNpZ25lciB8fCBjb250cmFjdC5wcm92aWRlcik7XG5cbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24oLi4uYXJnczogQXJyYXk8YW55Pik6IFByb21pc2U8YW55PiB7XG4gICAgICAgIC8vIEV4dHJhY3QgdGhlIFwiYmxvY2tUYWdcIiBvdmVycmlkZSBpZiBwcmVzZW50XG4gICAgICAgIGxldCBibG9ja1RhZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSBmcmFnbWVudC5pbnB1dHMubGVuZ3RoICsgMSAmJiB0eXBlb2YoYXJnc1thcmdzLmxlbmd0aCAtIDFdKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgY29uc3Qgb3ZlcnJpZGVzID0gc2hhbGxvd0NvcHkoYXJncy5wb3AoKSk7XG4gICAgICAgICAgICBpZiAob3ZlcnJpZGVzLmJsb2NrVGFnICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBibG9ja1RhZyA9IGF3YWl0IG92ZXJyaWRlcy5ibG9ja1RhZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZSBvdmVycmlkZXMuYmxvY2tUYWc7XG4gICAgICAgICAgICBhcmdzLnB1c2gob3ZlcnJpZGVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRoZSBjb250cmFjdCB3YXMganVzdCBkZXBsb3llZCwgd2FpdCB1bnRpbCBpdCBpcyBtaW5lZFxuICAgICAgICBpZiAoY29udHJhY3QuZGVwbG95VHJhbnNhY3Rpb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgYXdhaXQgY29udHJhY3QuX2RlcGxveWVkKGJsb2NrVGFnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhbGwgYSBub2RlIGFuZCBnZXQgdGhlIHJlc3VsdFxuICAgICAgICBjb25zdCB0eCA9IGF3YWl0IHBvcHVsYXRlVHJhbnNhY3Rpb24oY29udHJhY3QsIGZyYWdtZW50LCBhcmdzKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2lnbmVyT3JQcm92aWRlci5jYWxsKHR4LCBibG9ja1RhZyk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IGNvbnRyYWN0LmludGVyZmFjZS5kZWNvZGVGdW5jdGlvblJlc3VsdChmcmFnbWVudCwgcmVzdWx0KTtcbiAgICAgICAgICAgIGlmIChjb2xsYXBzZVNpbXBsZSAmJiBmcmFnbWVudC5vdXRwdXRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG5cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvci5jb2RlID09PSBMb2dnZXIuZXJyb3JzLkNBTExfRVhDRVBUSU9OKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IuYWRkcmVzcyA9IGNvbnRyYWN0LmFkZHJlc3M7XG4gICAgICAgICAgICAgICAgZXJyb3IuYXJncyA9IGFyZ3M7XG4gICAgICAgICAgICAgICAgZXJyb3IudHJhbnNhY3Rpb24gPSB0eDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGJ1aWxkU2VuZChjb250cmFjdDogQ29udHJhY3QsIGZyYWdtZW50OiBGdW5jdGlvbkZyYWdtZW50KTogQ29udHJhY3RGdW5jdGlvbjxUcmFuc2FjdGlvblJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uKC4uLmFyZ3M6IEFycmF5PGFueT4pOiBQcm9taXNlPFRyYW5zYWN0aW9uUmVzcG9uc2U+IHtcbiAgICAgICAgaWYgKCFjb250cmFjdC5zaWduZXIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwic2VuZGluZyBhIHRyYW5zYWN0aW9uIHJlcXVpcmVzIGEgc2lnbmVyXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcInNlbmRUcmFuc2FjdGlvblwiXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlIGNvbnRyYWN0IHdhcyBqdXN0IGRlcGxveWVkLCB3YWl0IHVudGlsIGl0IGlzIG1pbmVkXG4gICAgICAgIGlmIChjb250cmFjdC5kZXBsb3lUcmFuc2FjdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICBhd2FpdCBjb250cmFjdC5fZGVwbG95ZWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHR4UmVxdWVzdCA9IGF3YWl0IHBvcHVsYXRlVHJhbnNhY3Rpb24oY29udHJhY3QsIGZyYWdtZW50LCBhcmdzKTtcblxuICAgICAgICBjb25zdCB0eCA9IGF3YWl0IGNvbnRyYWN0LnNpZ25lci5zZW5kVHJhbnNhY3Rpb24odHhSZXF1ZXN0KTtcblxuICAgICAgICAvLyBUd2VhayB0aGUgdHgud2FpdCBzbyB0aGUgcmVjZWlwdCBoYXMgZXh0cmEgcHJvcGVydGllc1xuICAgICAgICBhZGRDb250cmFjdFdhaXQoY29udHJhY3QsIHR4KTtcblxuICAgICAgICByZXR1cm4gdHg7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gYnVpbGREZWZhdWx0KGNvbnRyYWN0OiBDb250cmFjdCwgZnJhZ21lbnQ6IEZ1bmN0aW9uRnJhZ21lbnQsIGNvbGxhcHNlU2ltcGxlOiBib29sZWFuKTogQ29udHJhY3RGdW5jdGlvbiB7XG4gICAgaWYgKGZyYWdtZW50LmNvbnN0YW50KSB7XG4gICAgICAgIHJldHVybiBidWlsZENhbGwoY29udHJhY3QsIGZyYWdtZW50LCBjb2xsYXBzZVNpbXBsZSk7XG4gICAgfVxuICAgIHJldHVybiBidWlsZFNlbmQoY29udHJhY3QsIGZyYWdtZW50KTtcbn1cblxuZnVuY3Rpb24gZ2V0RXZlbnRUYWcoZmlsdGVyOiBFdmVudEZpbHRlcik6IHN0cmluZyB7XG4gICAgaWYgKGZpbHRlci5hZGRyZXNzICYmIChmaWx0ZXIudG9waWNzID09IG51bGwgfHwgZmlsdGVyLnRvcGljcy5sZW5ndGggPT09IDApKSB7XG4gICAgICAgIHJldHVybiBcIipcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gKGZpbHRlci5hZGRyZXNzIHx8IFwiKlwiKSArIFwiQFwiICsgKGZpbHRlci50b3BpY3MgPyBmaWx0ZXIudG9waWNzLm1hcCgodG9waWMpID0+IHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodG9waWMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9waWMuam9pbihcInxcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvcGljO1xuICAgIH0pLmpvaW4oXCI6XCIpOiBcIlwiKTtcbn1cblxuY2xhc3MgUnVubmluZ0V2ZW50IHtcbiAgICByZWFkb25seSB0YWc6IHN0cmluZztcbiAgICByZWFkb25seSBmaWx0ZXI6IEV2ZW50RmlsdGVyO1xuICAgIHByaXZhdGUgX2xpc3RlbmVyczogQXJyYXk8eyBsaXN0ZW5lcjogTGlzdGVuZXIsIG9uY2U6IGJvb2xlYW4gfT47XG5cbiAgICBjb25zdHJ1Y3Rvcih0YWc6IHN0cmluZywgZmlsdGVyOiBFdmVudEZpbHRlcikge1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcInRhZ1wiLCB0YWcpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImZpbHRlclwiLCBmaWx0ZXIpO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbIF07XG4gICAgfVxuXG4gICAgYWRkTGlzdGVuZXIobGlzdGVuZXI6IExpc3RlbmVyLCBvbmNlOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKHsgbGlzdGVuZXI6IGxpc3RlbmVyLCBvbmNlOiBvbmNlIH0pO1xuICAgIH1cblxuICAgIHJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyOiBMaXN0ZW5lcik6IHZvaWQge1xuICAgICAgICBsZXQgZG9uZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnMuZmlsdGVyKChpdGVtKSA9PiB7XG4gICAgICAgICAgICBpZiAoZG9uZSB8fCBpdGVtLmxpc3RlbmVyICE9PSBsaXN0ZW5lcikgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbW92ZUFsbExpc3RlbmVycygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW107XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzKCk6IEFycmF5PExpc3RlbmVyPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saXN0ZW5lcnMubWFwKChpKSA9PiBpLmxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lckNvdW50KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saXN0ZW5lcnMubGVuZ3RoO1xuICAgIH1cblxuICAgIHJ1bihhcmdzOiBBcnJheTxhbnk+KTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXJDb3VudCA9IHRoaXMubGlzdGVuZXJDb3VudCgpO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnMuZmlsdGVyKChpdGVtKSA9PiB7XG5cbiAgICAgICAgICAgIGNvbnN0IGFyZ3NDb3B5ID0gYXJncy5zbGljZSgpO1xuXG4gICAgICAgICAgICAvLyBDYWxsIHRoZSBjYWxsYmFjayBpbiB0aGUgbmV4dCBldmVudCBsb29wXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpdGVtLmxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3NDb3B5KTtcbiAgICAgICAgICAgIH0sIDApO1xuXG4gICAgICAgICAgICAvLyBSZXNjaGVkdWxlIGl0IGlmIGl0IG5vdCBcIm9uY2VcIlxuICAgICAgICAgICAgcmV0dXJuICEoaXRlbS5vbmNlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGxpc3RlbmVyQ291bnQ7XG4gICAgfVxuXG4gICAgcHJlcGFyZUV2ZW50KGV2ZW50OiBFdmVudCk6IHZvaWQge1xuICAgIH1cblxuICAgIC8vIFJldHVybnMgdGhlIGFycmF5IHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIGFuIGVtaXRcbiAgICBnZXRFbWl0KGV2ZW50OiBFdmVudCk6IEFycmF5PGFueT4ge1xuICAgICAgICByZXR1cm4gWyBldmVudCBdO1xuICAgIH1cbn1cblxuY2xhc3MgRXJyb3JSdW5uaW5nRXZlbnQgZXh0ZW5kcyBSdW5uaW5nRXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihcImVycm9yXCIsIG51bGwpO1xuICAgIH1cbn1cblxuXG4vLyBAVE9ETyBGcmFnbWVudCBzaG91bGQgaW5oZXJpdCBXaWxkY2FyZD8gYW5kIGp1c3Qgb3ZlcnJpZGUgZ2V0RW1pdD9cbi8vICAgICAgIG9yIGhhdmUgYSBjb21tb24gYWJzdHJhY3Qgc3VwZXIgY2xhc3MsIHdpdGggZW5vdWdoIGNvbnN0cnVjdG9yXG4vLyAgICAgICBvcHRpb25zIHRvIGNvbmZpZ3VyZSBib3RoLlxuXG4vLyBBIEZyYWdtZW50IEV2ZW50IHdpbGwgcG9wdWxhdGUgYWxsIHRoZSBwcm9wZXJ0aWVzIHRoYXQgV2lsZGNhcmRcbi8vIHdpbGwsIGFuZCBhZGRpdGlvbmFsbHkgZGVyZWZlcmVuY2UgdGhlIGFyZ3VtZW50cyB3aGVuIGVtaXR0aW5nXG5jbGFzcyBGcmFnbWVudFJ1bm5pbmdFdmVudCBleHRlbmRzIFJ1bm5pbmdFdmVudCB7XG4gICAgcmVhZG9ubHkgYWRkcmVzczogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGludGVyZmFjZTogSW50ZXJmYWNlO1xuICAgIHJlYWRvbmx5IGZyYWdtZW50OiBFdmVudEZyYWdtZW50O1xuXG4gICAgY29uc3RydWN0b3IoYWRkcmVzczogc3RyaW5nLCBjb250cmFjdEludGVyZmFjZTogSW50ZXJmYWNlLCBmcmFnbWVudDogRXZlbnRGcmFnbWVudCwgdG9waWNzPzogQXJyYXk8c3RyaW5nfEFycmF5PHN0cmluZz4+KSB7XG4gICAgICAgIGNvbnN0IGZpbHRlcjogRXZlbnRGaWx0ZXIgPSB7XG4gICAgICAgICAgICBhZGRyZXNzOiBhZGRyZXNzXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdG9waWMgPSBjb250cmFjdEludGVyZmFjZS5nZXRFdmVudFRvcGljKGZyYWdtZW50KTtcbiAgICAgICAgaWYgKHRvcGljcykge1xuICAgICAgICAgICAgaWYgKHRvcGljICE9PSB0b3BpY3NbMF0pIHsgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInRvcGljIG1pc21hdGNoXCIsIFwidG9waWNzXCIsIHRvcGljcyk7IH1cbiAgICAgICAgICAgIGZpbHRlci50b3BpY3MgPSB0b3BpY3Muc2xpY2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZpbHRlci50b3BpY3MgPSBbIHRvcGljIF07XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlcihnZXRFdmVudFRhZyhmaWx0ZXIpLCBmaWx0ZXIpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImFkZHJlc3NcIiwgYWRkcmVzcyk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiaW50ZXJmYWNlXCIsIGNvbnRyYWN0SW50ZXJmYWNlKTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJmcmFnbWVudFwiLCBmcmFnbWVudCk7XG4gICAgfVxuXG5cbiAgICBwcmVwYXJlRXZlbnQoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgICAgIHN1cGVyLnByZXBhcmVFdmVudChldmVudCk7XG5cbiAgICAgICAgZXZlbnQuZXZlbnQgPSB0aGlzLmZyYWdtZW50Lm5hbWU7XG4gICAgICAgIGV2ZW50LmV2ZW50U2lnbmF0dXJlID0gdGhpcy5mcmFnbWVudC5mb3JtYXQoKTtcblxuICAgICAgICBldmVudC5kZWNvZGUgPSAoZGF0YTogQnl0ZXNMaWtlLCB0b3BpY3M/OiBBcnJheTxzdHJpbmc+KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbnRlcmZhY2UuZGVjb2RlRXZlbnRMb2codGhpcy5mcmFnbWVudCwgZGF0YSwgdG9waWNzKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZXZlbnQuYXJncyA9IHRoaXMuaW50ZXJmYWNlLmRlY29kZUV2ZW50TG9nKHRoaXMuZnJhZ21lbnQsIGV2ZW50LmRhdGEsIGV2ZW50LnRvcGljcyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBldmVudC5hcmdzID0gbnVsbDtcbiAgICAgICAgICAgIGV2ZW50LmRlY29kZUVycm9yID0gZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRFbWl0KGV2ZW50OiBFdmVudCk6IEFycmF5PGFueT4ge1xuICAgICAgICBjb25zdCBlcnJvcnMgPSBjaGVja1Jlc3VsdEVycm9ycyhldmVudC5hcmdzKTtcbiAgICAgICAgaWYgKGVycm9ycy5sZW5ndGgpIHsgdGhyb3cgZXJyb3JzWzBdLmVycm9yOyB9XG5cbiAgICAgICAgY29uc3QgYXJncyA9IChldmVudC5hcmdzIHx8IFtdKS5zbGljZSgpO1xuICAgICAgICBhcmdzLnB1c2goZXZlbnQpO1xuICAgICAgICByZXR1cm4gYXJncztcbiAgICB9XG59XG5cbi8vIEEgV2lsZGNhcmQgRXZlbnQgd2lsbCBhdHRlbXB0IHRvIHBvcHVsYXRlOlxuLy8gIC0gZXZlbnQgICAgICAgICAgICBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgbmFtZVxuLy8gIC0gZXZlbnRTaWduYXR1cmUgICBUaGUgZnVsbCBzaWduYXR1cmUgb2YgdGhlIGV2ZW50XG4vLyAgLSBkZWNvZGUgICAgICAgICAgIEEgZnVuY3Rpb24gdG8gZGVjb2RlIGRhdGEgYW5kIHRvcGljc1xuLy8gIC0gYXJncyAgICAgICAgICAgICBUaGUgZGVjb2RlZCBkYXRhIGFuZCB0b3BpY3NcbmNsYXNzIFdpbGRjYXJkUnVubmluZ0V2ZW50IGV4dGVuZHMgUnVubmluZ0V2ZW50IHtcbiAgICByZWFkb25seSBhZGRyZXNzOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgaW50ZXJmYWNlOiBJbnRlcmZhY2U7XG5cbiAgICBjb25zdHJ1Y3RvcihhZGRyZXNzOiBzdHJpbmcsIGNvbnRyYWN0SW50ZXJmYWNlOiBJbnRlcmZhY2UpIHtcbiAgICAgICAgc3VwZXIoXCIqXCIsIHsgYWRkcmVzczogYWRkcmVzcyB9KTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJhZGRyZXNzXCIsIGFkZHJlc3MpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImludGVyZmFjZVwiLCBjb250cmFjdEludGVyZmFjZSk7XG4gICAgfVxuXG4gICAgcHJlcGFyZUV2ZW50KGV2ZW50OiBFdmVudCk6IHZvaWQge1xuICAgICAgICBzdXBlci5wcmVwYXJlRXZlbnQoZXZlbnQpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmludGVyZmFjZS5wYXJzZUxvZyhldmVudCk7XG4gICAgICAgICAgICBldmVudC5ldmVudCA9IHBhcnNlZC5uYW1lO1xuICAgICAgICAgICAgZXZlbnQuZXZlbnRTaWduYXR1cmUgPSBwYXJzZWQuc2lnbmF0dXJlO1xuXG4gICAgICAgICAgICBldmVudC5kZWNvZGUgPSAoZGF0YTogQnl0ZXNMaWtlLCB0b3BpY3M/OiBBcnJheTxzdHJpbmc+KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJmYWNlLmRlY29kZUV2ZW50TG9nKHBhcnNlZC5ldmVudEZyYWdtZW50LCBkYXRhLCB0b3BpY3MpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZXZlbnQuYXJncyA9IHBhcnNlZC5hcmdzO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gTm8gbWF0Y2hpbmcgZXZlbnRcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHR5cGUgQ29udHJhY3RJbnRlcmZhY2UgPSBzdHJpbmcgfCBSZWFkb25seUFycmF5PEZyYWdtZW50IHwgSnNvbkZyYWdtZW50IHwgc3RyaW5nPiB8IEludGVyZmFjZTtcblxudHlwZSBJbnRlcmZhY2VGdW5jID0gKGNvbnRyYWN0SW50ZXJmYWNlOiBDb250cmFjdEludGVyZmFjZSkgPT4gSW50ZXJmYWNlO1xuXG5cbmV4cG9ydCBjbGFzcyBCYXNlQ29udHJhY3Qge1xuICAgIHJlYWRvbmx5IGFkZHJlc3M6IHN0cmluZztcbiAgICByZWFkb25seSBpbnRlcmZhY2U6IEludGVyZmFjZTtcblxuICAgIHJlYWRvbmx5IHNpZ25lcjogU2lnbmVyO1xuICAgIHJlYWRvbmx5IHByb3ZpZGVyOiBQcm92aWRlcjtcblxuICAgIHJlYWRvbmx5IGZ1bmN0aW9uczogeyBbIG5hbWU6IHN0cmluZyBdOiBDb250cmFjdEZ1bmN0aW9uIH07XG5cbiAgICByZWFkb25seSBjYWxsU3RhdGljOiB7IFsgbmFtZTogc3RyaW5nIF06IENvbnRyYWN0RnVuY3Rpb24gfTtcbiAgICByZWFkb25seSBlc3RpbWF0ZUdhczogeyBbIG5hbWU6IHN0cmluZyBdOiBDb250cmFjdEZ1bmN0aW9uPEJpZ051bWJlcj4gfTtcbiAgICByZWFkb25seSBwb3B1bGF0ZVRyYW5zYWN0aW9uOiB7IFsgbmFtZTogc3RyaW5nIF06IENvbnRyYWN0RnVuY3Rpb248UG9wdWxhdGVkVHJhbnNhY3Rpb24+IH07XG5cbiAgICByZWFkb25seSBmaWx0ZXJzOiB7IFsgbmFtZTogc3RyaW5nIF06ICguLi5hcmdzOiBBcnJheTxhbnk+KSA9PiBFdmVudEZpbHRlciB9O1xuXG4gICAgLy8gVGhpcyB3aWxsIGFsd2F5cyBiZSBhbiBhZGRyZXNzLiBUaGlzIHdpbGwgb25seSBkaWZmZXIgZnJvbVxuICAgIC8vIGFkZHJlc3MgaWYgYW4gRU5TIG5hbWUgd2FzIHVzZWQgaW4gdGhlIGNvbnN0cnVjdG9yXG4gICAgcmVhZG9ubHkgcmVzb2x2ZWRBZGRyZXNzOiBQcm9taXNlPHN0cmluZz47XG5cbiAgICAvLyBUaGlzIGlzIG9ubHkgc2V0IGlmIHRoZSBjb250cmFjdCB3YXMgY3JlYXRlZCB3aXRoIGEgY2FsbCB0byBkZXBsb3lcbiAgICByZWFkb25seSBkZXBsb3lUcmFuc2FjdGlvbjogVHJhbnNhY3Rpb25SZXNwb25zZTtcblxuICAgIF9kZXBsb3llZFByb21pc2U6IFByb21pc2U8Q29udHJhY3Q+O1xuXG4gICAgLy8gQSBsaXN0IG9mIFJ1bm5pbmdFdmVudHMgdG8gdHJhY2sgbGlzdGVuZXJzIGZvciBlYWNoIGV2ZW50IHRhZ1xuICAgIF9ydW5uaW5nRXZlbnRzOiB7IFsgZXZlbnRUYWc6IHN0cmluZyBdOiBSdW5uaW5nRXZlbnQgfTtcblxuICAgIC8vIFdyYXBwZWQgZnVuY3Rpb25zIHRvIGNhbGwgZW1pdCBhbmQgYWxsb3cgZGVyZWdpc3RyYXRpb24gZnJvbSB0aGUgcHJvdmlkZXJcbiAgICBfd3JhcHBlZEVtaXRzOiB7IFsgZXZlbnRUYWc6IHN0cmluZyBdOiAoLi4uYXJnczogQXJyYXk8YW55PikgPT4gdm9pZCB9O1xuXG4gICAgY29uc3RydWN0b3IoYWRkcmVzc09yTmFtZTogc3RyaW5nLCBjb250cmFjdEludGVyZmFjZTogQ29udHJhY3RJbnRlcmZhY2UsIHNpZ25lck9yUHJvdmlkZXI/OiBTaWduZXIgfCBQcm92aWRlcikge1xuICAgICAgICAvLyBAVE9ETzogTWF5YmUgc3RpbGwgY2hlY2sgdGhlIGFkZHJlc3NPck5hbWUgbG9va3MgbGlrZSBhIHZhbGlkIGFkZHJlc3Mgb3IgbmFtZT9cbiAgICAgICAgLy9hZGRyZXNzID0gZ2V0QWRkcmVzcyhhZGRyZXNzKTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJpbnRlcmZhY2VcIiwgZ2V0U3RhdGljPEludGVyZmFjZUZ1bmM+KG5ldy50YXJnZXQsIFwiZ2V0SW50ZXJmYWNlXCIpKGNvbnRyYWN0SW50ZXJmYWNlKSk7XG5cbiAgICAgICAgaWYgKHNpZ25lck9yUHJvdmlkZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJwcm92aWRlclwiLCBudWxsKTtcbiAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwic2lnbmVyXCIsIG51bGwpO1xuICAgICAgICB9IGVsc2UgaWYgKFNpZ25lci5pc1NpZ25lcihzaWduZXJPclByb3ZpZGVyKSkge1xuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJwcm92aWRlclwiLCBzaWduZXJPclByb3ZpZGVyLnByb3ZpZGVyIHx8IG51bGwpO1xuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJzaWduZXJcIiwgc2lnbmVyT3JQcm92aWRlcik7XG4gICAgICAgIH0gZWxzZSBpZiAoUHJvdmlkZXIuaXNQcm92aWRlcihzaWduZXJPclByb3ZpZGVyKSkge1xuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJwcm92aWRlclwiLCBzaWduZXJPclByb3ZpZGVyKTtcbiAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwic2lnbmVyXCIsIG51bGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgc2lnbmVyIG9yIHByb3ZpZGVyXCIsIFwic2lnbmVyT3JQcm92aWRlclwiLCBzaWduZXJPclByb3ZpZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiY2FsbFN0YXRpY1wiLCB7IH0pO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImVzdGltYXRlR2FzXCIsIHsgfSk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiZnVuY3Rpb25zXCIsIHsgfSk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwicG9wdWxhdGVUcmFuc2FjdGlvblwiLCB7IH0pO1xuXG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiZmlsdGVyc1wiLCB7IH0pO1xuXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHVuaXF1ZUZpbHRlcnM6IHsgWyBuYW1lOiBzdHJpbmcgXTogQXJyYXk8c3RyaW5nPiB9ID0geyB9O1xuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5pbnRlcmZhY2UuZXZlbnRzKS5mb3JFYWNoKChldmVudFNpZ25hdHVyZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy5pbnRlcmZhY2UuZXZlbnRzW2V2ZW50U2lnbmF0dXJlXTtcbiAgICAgICAgICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLmZpbHRlcnMsIGV2ZW50U2lnbmF0dXJlLCAoLi4uYXJnczogQXJyYXk8YW55PikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9waWNzOiB0aGlzLmludGVyZmFjZS5lbmNvZGVGaWx0ZXJUb3BpY3MoZXZlbnQsIGFyZ3MpXG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICghdW5pcXVlRmlsdGVyc1tldmVudC5uYW1lXSkgeyB1bmlxdWVGaWx0ZXJzW2V2ZW50Lm5hbWVdID0gWyBdOyB9XG4gICAgICAgICAgICAgICAgdW5pcXVlRmlsdGVyc1tldmVudC5uYW1lXS5wdXNoKGV2ZW50U2lnbmF0dXJlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBPYmplY3Qua2V5cyh1bmlxdWVGaWx0ZXJzKS5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsdGVycyA9IHVuaXF1ZUZpbHRlcnNbbmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMuZmlsdGVycywgbmFtZSwgdGhpcy5maWx0ZXJzW2ZpbHRlcnNbMF1dKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybihgRHVwbGljYXRlIGRlZmluaXRpb24gb2YgJHsgbmFtZSB9ICgkeyBmaWx0ZXJzLmpvaW4oXCIsIFwiKX0pYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl9ydW5uaW5nRXZlbnRzXCIsIHsgfSk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiX3dyYXBwZWRFbWl0c1wiLCB7IH0pO1xuXG4gICAgICAgIGlmIChhZGRyZXNzT3JOYW1lID09IG51bGwpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGNvbnRyYWN0IGFkZHJlc3Mgb3IgRU5TIG5hbWVcIiwgXCJhZGRyZXNzT3JOYW1lXCIsIGFkZHJlc3NPck5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJhZGRyZXNzXCIsIGFkZHJlc3NPck5hbWUpO1xuICAgICAgICBpZiAodGhpcy5wcm92aWRlcikge1xuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJyZXNvbHZlZEFkZHJlc3NcIiwgcmVzb2x2ZU5hbWUodGhpcy5wcm92aWRlciwgYWRkcmVzc09yTmFtZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcInJlc29sdmVkQWRkcmVzc1wiLCBQcm9taXNlLnJlc29sdmUoZ2V0QWRkcmVzcyhhZGRyZXNzT3JOYW1lKSkpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBXaXRob3V0IGEgcHJvdmlkZXIsIHdlIGNhbm5vdCB1c2UgRU5TIG5hbWVzXG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJwcm92aWRlciBpcyByZXF1aXJlZCB0byB1c2UgRU5TIG5hbWUgYXMgY29udHJhY3QgYWRkcmVzc1wiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwibmV3IENvbnRyYWN0XCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN3YWxsb3cgYmFkIEVOUyBuYW1lcyB0byBwcmV2ZW50IFVuaGFuZGxlZCBFeGNlcHRpb25zXG4gICAgICAgIHRoaXMucmVzb2x2ZWRBZGRyZXNzLmNhdGNoKChlKSA9PiB7IH0pO1xuXG4gICAgICAgIGNvbnN0IHVuaXF1ZU5hbWVzOiB7IFsgbmFtZTogc3RyaW5nIF06IEFycmF5PHN0cmluZz4gfSA9IHsgfTtcbiAgICAgICAgY29uc3QgdW5pcXVlU2lnbmF0dXJlczogeyBbIHNpZ25hdHVyZTogc3RyaW5nIF06IGJvb2xlYW4gfSA9IHsgfTtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5pbnRlcmZhY2UuZnVuY3Rpb25zKS5mb3JFYWNoKChzaWduYXR1cmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZyYWdtZW50ID0gdGhpcy5pbnRlcmZhY2UuZnVuY3Rpb25zW3NpZ25hdHVyZV07XG5cbiAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgdGhlIHNpZ25hdHVyZSBpcyB1bmlxdWU7IGlmIG5vdCB0aGUgQUJJIGdlbmVyYXRpb24gaGFzXG4gICAgICAgICAgICAvLyBub3QgYmVlbiBjbGVhbmVkIG9yIG1heSBiZSBpbmNvcnJlY3RseSBnZW5lcmF0ZWRcbiAgICAgICAgICAgIGlmICh1bmlxdWVTaWduYXR1cmVzW3NpZ25hdHVyZV0pIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIud2FybihgRHVwbGljYXRlIEFCSSBlbnRyeSBmb3IgJHsgSlNPTi5zdHJpbmdpZnkoc2lnbmF0dXJlKSB9YCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdW5pcXVlU2lnbmF0dXJlc1tzaWduYXR1cmVdID0gdHJ1ZTtcblxuICAgICAgICAgICAgLy8gVHJhY2sgdW5pcXVlIG5hbWVzOyB3ZSBvbmx5IGV4cG9zZSBiYXJlIG5hbWVkIGZ1bmN0aW9ucyBpZiB0aGV5XG4gICAgICAgICAgICAvLyBhcmUgYW1iaWd1b3VzXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGZyYWdtZW50Lm5hbWU7XG4gICAgICAgICAgICAgICAgaWYgKCF1bmlxdWVOYW1lc1tgJSR7IG5hbWUgfWBdKSB7IHVuaXF1ZU5hbWVzW2AlJHsgbmFtZSB9YF0gPSBbIF07IH1cbiAgICAgICAgICAgICAgICB1bmlxdWVOYW1lc1tgJSR7IG5hbWUgfWBdLnB1c2goc2lnbmF0dXJlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCg8Q29udHJhY3Q+dGhpcylbc2lnbmF0dXJlXSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHk8YW55LCBhbnk+KHRoaXMsIHNpZ25hdHVyZSwgYnVpbGREZWZhdWx0KHRoaXMsIGZyYWdtZW50LCB0cnVlKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFdlIGRvIG5vdCBjb2xsYXBzZSBzaW1wbGUgY2FsbHMgb24gdGhpcyBidWNrZXQsIHdoaWNoIGFsbG93c1xuICAgICAgICAgICAgLy8gZnJhbWV3b3JrcyB0byBzYWZlbHkgdXNlIHRoaXMgd2l0aG91dCBpbnRyb3NwZWN0aW9uIGFzIHdlbGwgYXNcbiAgICAgICAgICAgIC8vIGFsbG93cyBkZWNvZGluZyBlcnJvciByZWNvdmVyeS5cbiAgICAgICAgICAgIGlmICh0aGlzLmZ1bmN0aW9uc1tzaWduYXR1cmVdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLmZ1bmN0aW9ucywgc2lnbmF0dXJlLCBidWlsZERlZmF1bHQodGhpcywgZnJhZ21lbnQsIGZhbHNlKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmNhbGxTdGF0aWNbc2lnbmF0dXJlXSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcy5jYWxsU3RhdGljLCBzaWduYXR1cmUsIGJ1aWxkQ2FsbCh0aGlzLCBmcmFnbWVudCwgdHJ1ZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5wb3B1bGF0ZVRyYW5zYWN0aW9uW3NpZ25hdHVyZV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMucG9wdWxhdGVUcmFuc2FjdGlvbiwgc2lnbmF0dXJlLCBidWlsZFBvcHVsYXRlKHRoaXMsIGZyYWdtZW50KSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmVzdGltYXRlR2FzW3NpZ25hdHVyZV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMuZXN0aW1hdGVHYXMsIHNpZ25hdHVyZSwgYnVpbGRFc3RpbWF0ZSh0aGlzLCBmcmFnbWVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBPYmplY3Qua2V5cyh1bmlxdWVOYW1lcykuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgICAgICAgLy8gQW1iaWd1b3VzIG5hbWVzIHRvIG5vdCBnZXQgYXR0YWNoZWQgYXMgYmFyZSBuYW1lc1xuICAgICAgICAgICAgY29uc3Qgc2lnbmF0dXJlcyA9IHVuaXF1ZU5hbWVzW25hbWVdO1xuICAgICAgICAgICAgaWYgKHNpZ25hdHVyZXMubGVuZ3RoID4gMSkgeyByZXR1cm47IH1cblxuICAgICAgICAgICAgLy8gU3RyaXAgb2ZmIHRoZSBsZWFkaW5nIFwiJVwiIHVzZWQgZm9yIHByb3RvdHlwZSBwcm90ZWN0aW9uXG4gICAgICAgICAgICBuYW1lID0gbmFtZS5zdWJzdHJpbmcoMSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IHNpZ25hdHVyZXNbMF07XG5cbiAgICAgICAgICAgIC8vIElmIG92ZXJ3cml0aW5nIGEgbWVtYmVyIHByb3BlcnR5IHRoYXQgaXMgbnVsbCwgc3dhbGxvdyB0aGUgZXJyb3JcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCg8Q29udHJhY3Q+dGhpcylbbmFtZV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVSZWFkT25seSg8Q29udHJhY3Q+dGhpcywgbmFtZSwgKDxDb250cmFjdD50aGlzKVtzaWduYXR1cmVdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7IH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuZnVuY3Rpb25zW25hbWVdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLmZ1bmN0aW9ucywgbmFtZSwgdGhpcy5mdW5jdGlvbnNbc2lnbmF0dXJlXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmNhbGxTdGF0aWNbbmFtZV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMuY2FsbFN0YXRpYywgbmFtZSwgdGhpcy5jYWxsU3RhdGljW3NpZ25hdHVyZV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5wb3B1bGF0ZVRyYW5zYWN0aW9uW25hbWVdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLnBvcHVsYXRlVHJhbnNhY3Rpb24sIG5hbWUsIHRoaXMucG9wdWxhdGVUcmFuc2FjdGlvbltzaWduYXR1cmVdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuZXN0aW1hdGVHYXNbbmFtZV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMuZXN0aW1hdGVHYXMsIG5hbWUsIHRoaXMuZXN0aW1hdGVHYXNbc2lnbmF0dXJlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRDb250cmFjdEFkZHJlc3ModHJhbnNhY3Rpb246IHsgZnJvbTogc3RyaW5nLCBub25jZTogQmlnTnVtYmVyaXNoIH0pOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gZ2V0Q29udHJhY3RBZGRyZXNzKHRyYW5zYWN0aW9uKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0SW50ZXJmYWNlKGNvbnRyYWN0SW50ZXJmYWNlOiBDb250cmFjdEludGVyZmFjZSk6IEludGVyZmFjZSB7XG4gICAgICAgIGlmIChJbnRlcmZhY2UuaXNJbnRlcmZhY2UoY29udHJhY3RJbnRlcmZhY2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udHJhY3RJbnRlcmZhY2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBJbnRlcmZhY2UoY29udHJhY3RJbnRlcmZhY2UpO1xuICAgIH1cblxuICAgIC8vIEBUT0RPOiBBbGxvdyB0aW1lb3V0P1xuICAgIGRlcGxveWVkKCk6IFByb21pc2U8Q29udHJhY3Q+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlcGxveWVkKCk7XG4gICAgfVxuXG4gICAgX2RlcGxveWVkKGJsb2NrVGFnPzogQmxvY2tUYWcpOiBQcm9taXNlPENvbnRyYWN0PiB7XG4gICAgICAgIGlmICghdGhpcy5fZGVwbG95ZWRQcm9taXNlKSB7XG5cbiAgICAgICAgICAgIC8vIElmIHdlIHdlcmUganVzdCBkZXBsb3llZCwgd2Uga25vdyB0aGUgdHJhbnNhY3Rpb24gd2Ugc2hvdWxkIG9jY3VyIGluXG4gICAgICAgICAgICBpZiAodGhpcy5kZXBsb3lUcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RlcGxveWVkUHJvbWlzZSA9IHRoaXMuZGVwbG95VHJhbnNhY3Rpb24ud2FpdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBAVE9ETzogT25jZSB3ZSBhbGxvdyBhIHRpbWVvdXQgdG8gYmUgcGFzc2VkIGluLCB3ZSB3aWxsIHdhaXRcbiAgICAgICAgICAgICAgICAvLyB1cCB0byB0aGF0IG1hbnkgYmxvY2tzIGZvciBnZXRDb2RlXG5cbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIHBvbGwgZm9yIG91ciBjb2RlIHRvIGJlIGRlcGxveWVkXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVwbG95ZWRQcm9taXNlID0gdGhpcy5wcm92aWRlci5nZXRDb2RlKHRoaXMuYWRkcmVzcywgYmxvY2tUYWcpLnRoZW4oKGNvZGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGUgPT09IFwiMHhcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJjb250cmFjdCBub3QgZGVwbG95ZWRcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cmFjdEFkZHJlc3M6IHRoaXMuYWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwiZ2V0RGVwbG95ZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fZGVwbG95ZWRQcm9taXNlO1xuICAgIH1cblxuICAgIC8vIEBUT0RPOlxuICAgIC8vIGVzdGltYXRlRmFsbGJhY2sob3ZlcnJpZGVzPzogVHJhbnNhY3Rpb25SZXF1ZXN0KTogUHJvbWlzZTxCaWdOdW1iZXI+XG5cbiAgICAvLyBAVE9ETzpcbiAgICAvLyBlc3RpbWF0ZURlcGxveShieXRlY29kZTogc3RyaW5nLCAuLi5hcmdzKTogUHJvbWlzZTxCaWdOdW1iZXI+XG5cbiAgICBmYWxsYmFjayhvdmVycmlkZXM/OiBUcmFuc2FjdGlvblJlcXVlc3QpOiBQcm9taXNlPFRyYW5zYWN0aW9uUmVzcG9uc2U+IHtcbiAgICAgICAgaWYgKCF0aGlzLnNpZ25lcikge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJzZW5kaW5nIGEgdHJhbnNhY3Rpb25zIHJlcXVpcmUgYSBzaWduZXJcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHsgb3BlcmF0aW9uOiBcInNlbmRUcmFuc2FjdGlvbihmYWxsYmFjaylcIiB9KVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHg6IERlZmVycmFibGU8VHJhbnNhY3Rpb25SZXF1ZXN0PiA9IHNoYWxsb3dDb3B5KG92ZXJyaWRlcyB8fCB7fSk7XG5cbiAgICAgICAgW1wiZnJvbVwiLCBcInRvXCJdLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBpZiAoKDxhbnk+dHgpW2tleV0gPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiY2Fubm90IG92ZXJyaWRlIFwiICsga2V5LCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwgeyBvcGVyYXRpb246IGtleSB9KVxuICAgICAgICB9KTtcblxuICAgICAgICB0eC50byA9IHRoaXMucmVzb2x2ZWRBZGRyZXNzO1xuICAgICAgICByZXR1cm4gdGhpcy5kZXBsb3llZCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2lnbmVyLnNlbmRUcmFuc2FjdGlvbih0eCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFJlY29ubmVjdCB0byBhIGRpZmZlcmVudCBzaWduZXIgb3IgcHJvdmlkZXJcbiAgICBjb25uZWN0KHNpZ25lck9yUHJvdmlkZXI6IFNpZ25lciB8IFByb3ZpZGVyIHwgc3RyaW5nKTogQ29udHJhY3Qge1xuICAgICAgICBpZiAodHlwZW9mKHNpZ25lck9yUHJvdmlkZXIpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBzaWduZXJPclByb3ZpZGVyID0gbmV3IFZvaWRTaWduZXIoc2lnbmVyT3JQcm92aWRlciwgdGhpcy5wcm92aWRlcik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb250cmFjdCA9IG5ldyAoPHsgbmV3KC4uLmFyZ3M6IGFueVtdKTogQ29udHJhY3QgfT4odGhpcy5jb25zdHJ1Y3RvcikpKHRoaXMuYWRkcmVzcywgdGhpcy5pbnRlcmZhY2UsIHNpZ25lck9yUHJvdmlkZXIpO1xuICAgICAgICBpZiAodGhpcy5kZXBsb3lUcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkoY29udHJhY3QsIFwiZGVwbG95VHJhbnNhY3Rpb25cIiwgdGhpcy5kZXBsb3lUcmFuc2FjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29udHJhY3Q7XG4gICAgfVxuXG4gICAgLy8gUmUtYXR0YWNoIHRvIGEgZGlmZmVyZW50IG9uLWNoYWluIGluc3RhbmNlIG9mIHRoaXMgY29udHJhY3RcbiAgICBhdHRhY2goYWRkcmVzc09yTmFtZTogc3RyaW5nKTogQ29udHJhY3Qge1xuICAgICAgICByZXR1cm4gbmV3ICg8eyBuZXcoLi4uYXJnczogYW55W10pOiBDb250cmFjdCB9Pih0aGlzLmNvbnN0cnVjdG9yKSkoYWRkcmVzc09yTmFtZSwgdGhpcy5pbnRlcmZhY2UsIHRoaXMuc2lnbmVyIHx8IHRoaXMucHJvdmlkZXIpO1xuICAgIH1cblxuICAgIHN0YXRpYyBpc0luZGV4ZWQodmFsdWU6IGFueSk6IHZhbHVlIGlzIEluZGV4ZWQge1xuICAgICAgICByZXR1cm4gSW5kZXhlZC5pc0luZGV4ZWQodmFsdWUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX25vcm1hbGl6ZVJ1bm5pbmdFdmVudChydW5uaW5nRXZlbnQ6IFJ1bm5pbmdFdmVudCk6IFJ1bm5pbmdFdmVudCB7XG4gICAgICAgIC8vIEFscmVhZHkgaGF2ZSBhbiBpbnN0YW5jZSBvZiB0aGlzIGV2ZW50IHJ1bm5pbmc7IHdlIGNhbiByZS11c2UgaXRcbiAgICAgICAgaWYgKHRoaXMuX3J1bm5pbmdFdmVudHNbcnVubmluZ0V2ZW50LnRhZ10pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ydW5uaW5nRXZlbnRzW3J1bm5pbmdFdmVudC50YWddO1xuICAgICAgICAgfVxuICAgICAgICAgcmV0dXJuIHJ1bm5pbmdFdmVudFxuICAgIH1cblxuICAgIHByaXZhdGUgX2dldFJ1bm5pbmdFdmVudChldmVudE5hbWU6IEV2ZW50RmlsdGVyIHwgc3RyaW5nKTogUnVubmluZ0V2ZW50IHtcbiAgICAgICAgaWYgKHR5cGVvZihldmVudE5hbWUpID09PSBcInN0cmluZ1wiKSB7XG5cbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgXCJlcnJvclwiIGV2ZW50cyAoaWYgeW91ciBjb250cmFjdCBoYXMgYW4gZXJyb3IgZXZlbnQsIGluY2x1ZGVcbiAgICAgICAgICAgIC8vIHRoZSBmdWxsIHNpZ25hdHVyZSB0byBieXBhc3MgdGhpcyBzcGVjaWFsIGV2ZW50IGtleXdvcmQpXG4gICAgICAgICAgICBpZiAoZXZlbnROYW1lID09PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsaXplUnVubmluZ0V2ZW50KG5ldyBFcnJvclJ1bm5pbmdFdmVudCgpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTGlzdGVuIGZvciBhbnkgZXZlbnQgdGhhdCBpcyByZWdpc3RlcmVkXG4gICAgICAgICAgICBpZiAoZXZlbnROYW1lID09PSBcImV2ZW50XCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsaXplUnVubmluZ0V2ZW50KG5ldyBSdW5uaW5nRXZlbnQoXCJldmVudFwiLCBudWxsKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgYW55IGV2ZW50XG4gICAgICAgICAgICBpZiAoZXZlbnROYW1lID09PSBcIipcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub3JtYWxpemVSdW5uaW5nRXZlbnQobmV3IFdpbGRjYXJkUnVubmluZ0V2ZW50KHRoaXMuYWRkcmVzcywgdGhpcy5pbnRlcmZhY2UpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2V0IHRoZSBldmVudCBGcmFnbWVudCAodGhyb3dzIGlmIGFtYmlndW91cy91bmtub3duIGV2ZW50KVxuICAgICAgICAgICAgY29uc3QgZnJhZ21lbnQgPSB0aGlzLmludGVyZmFjZS5nZXRFdmVudChldmVudE5hbWUpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsaXplUnVubmluZ0V2ZW50KG5ldyBGcmFnbWVudFJ1bm5pbmdFdmVudCh0aGlzLmFkZHJlc3MsIHRoaXMuaW50ZXJmYWNlLCBmcmFnbWVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2UgaGF2ZSB0b3BpY3MgdG8gZmlsdGVyIGJ5Li4uXG4gICAgICAgIGlmIChldmVudE5hbWUudG9waWNzICYmIGV2ZW50TmFtZS50b3BpY3MubGVuZ3RoID4gMCkge1xuXG4gICAgICAgICAgICAvLyBJcyBpdCBhIGtub3duIHRvcGljaGFzaD8gKHRocm93cyBpZiBubyBtYXRjaGluZyB0b3BpY2hhc2gpXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvcGljID0gZXZlbnROYW1lLnRvcGljc1swXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHRvcGljKSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHRvcGljXCIpOyAvLyBAVE9ETzogTWF5IGhhcHBlbiBmb3IgYW5vbnltb3VzIGV2ZW50c1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBmcmFnbWVudCA9IHRoaXMuaW50ZXJmYWNlLmdldEV2ZW50KHRvcGljKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsaXplUnVubmluZ0V2ZW50KG5ldyBGcmFnbWVudFJ1bm5pbmdFdmVudCh0aGlzLmFkZHJlc3MsIHRoaXMuaW50ZXJmYWNlLCBmcmFnbWVudCwgZXZlbnROYW1lLnRvcGljcykpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgfVxuXG4gICAgICAgICAgICAvLyBGaWx0ZXIgYnkgdGhlIHVua25vd24gdG9waWNoYXNoXG4gICAgICAgICAgICBjb25zdCBmaWx0ZXI6IEV2ZW50RmlsdGVyID0ge1xuICAgICAgICAgICAgICAgIGFkZHJlc3M6IHRoaXMuYWRkcmVzcyxcbiAgICAgICAgICAgICAgICB0b3BpY3M6IGV2ZW50TmFtZS50b3BpY3NcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25vcm1hbGl6ZVJ1bm5pbmdFdmVudChuZXcgUnVubmluZ0V2ZW50KGdldEV2ZW50VGFnKGZpbHRlciksIGZpbHRlcikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX25vcm1hbGl6ZVJ1bm5pbmdFdmVudChuZXcgV2lsZGNhcmRSdW5uaW5nRXZlbnQodGhpcy5hZGRyZXNzLCB0aGlzLmludGVyZmFjZSkpO1xuICAgIH1cblxuICAgIF9jaGVja1J1bm5pbmdFdmVudHMocnVubmluZ0V2ZW50OiBSdW5uaW5nRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKHJ1bm5pbmdFdmVudC5saXN0ZW5lckNvdW50KCkgPT09IDApIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9ydW5uaW5nRXZlbnRzW3J1bm5pbmdFdmVudC50YWddO1xuXG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgcG9sbGVyIGZvciB0aGlzLCByZW1vdmUgaXRcbiAgICAgICAgICAgIGNvbnN0IGVtaXQgPSB0aGlzLl93cmFwcGVkRW1pdHNbcnVubmluZ0V2ZW50LnRhZ107XG4gICAgICAgICAgICBpZiAoZW1pdCAmJiBydW5uaW5nRXZlbnQuZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm92aWRlci5vZmYocnVubmluZ0V2ZW50LmZpbHRlciwgZW1pdCk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3dyYXBwZWRFbWl0c1tydW5uaW5nRXZlbnQudGFnXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFN1YmNsYXNzZXMgY2FuIG92ZXJyaWRlIHRoaXMgdG8gZ3JhY2VmdWxseSByZWNvdmVyXG4gICAgLy8gZnJvbSBwYXJzZSBlcnJvcnMgaWYgdGhleSB3aXNoXG4gICAgX3dyYXBFdmVudChydW5uaW5nRXZlbnQ6IFJ1bm5pbmdFdmVudCwgbG9nOiBMb2csIGxpc3RlbmVyOiBMaXN0ZW5lcik6IEV2ZW50IHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSA8RXZlbnQ+ZGVlcENvcHkobG9nKTtcblxuICAgICAgICBldmVudC5yZW1vdmVMaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghbGlzdGVuZXIpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBydW5uaW5nRXZlbnQucmVtb3ZlTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgICAgICAgICAgdGhpcy5fY2hlY2tSdW5uaW5nRXZlbnRzKHJ1bm5pbmdFdmVudCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZXZlbnQuZ2V0QmxvY2sgPSAoKSA9PiB7IHJldHVybiB0aGlzLnByb3ZpZGVyLmdldEJsb2NrKGxvZy5ibG9ja0hhc2gpOyB9XG4gICAgICAgIGV2ZW50LmdldFRyYW5zYWN0aW9uID0gKCkgPT4geyByZXR1cm4gdGhpcy5wcm92aWRlci5nZXRUcmFuc2FjdGlvbihsb2cudHJhbnNhY3Rpb25IYXNoKTsgfVxuICAgICAgICBldmVudC5nZXRUcmFuc2FjdGlvblJlY2VpcHQgPSAoKSA9PiB7IHJldHVybiB0aGlzLnByb3ZpZGVyLmdldFRyYW5zYWN0aW9uUmVjZWlwdChsb2cudHJhbnNhY3Rpb25IYXNoKTsgfVxuXG4gICAgICAgIC8vIFRoaXMgbWF5IHRocm93IGlmIHRoZSB0b3BpY3MgYW5kIGRhdGEgbWlzbWF0Y2ggdGhlIHNpZ25hdHVyZVxuICAgICAgICBydW5uaW5nRXZlbnQucHJlcGFyZUV2ZW50KGV2ZW50KTtcblxuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfYWRkRXZlbnRMaXN0ZW5lcihydW5uaW5nRXZlbnQ6IFJ1bm5pbmdFdmVudCwgbGlzdGVuZXI6IExpc3RlbmVyLCBvbmNlOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5wcm92aWRlcikge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJldmVudHMgcmVxdWlyZSBhIHByb3ZpZGVyIG9yIGEgc2lnbmVyIHdpdGggYSBwcm92aWRlclwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwgeyBvcGVyYXRpb246IFwib25jZVwiIH0pXG4gICAgICAgIH1cblxuICAgICAgICBydW5uaW5nRXZlbnQuYWRkTGlzdGVuZXIobGlzdGVuZXIsIG9uY2UpO1xuXG4gICAgICAgIC8vIFRyYWNrIHRoaXMgcnVubmluZyBldmVudCBhbmQgaXRzIGxpc3RlbmVycyAobWF5IGFscmVhZHkgYmUgdGhlcmU7IGJ1dCBubyBoYXJkIGluIHVwZGF0aW5nKVxuICAgICAgICB0aGlzLl9ydW5uaW5nRXZlbnRzW3J1bm5pbmdFdmVudC50YWddID0gcnVubmluZ0V2ZW50O1xuXG4gICAgICAgIC8vIElmIHdlIGFyZSBub3QgcG9sbGluZyB0aGUgcHJvdmlkZXIsIHN0YXJ0IHBvbGxpbmdcbiAgICAgICAgaWYgKCF0aGlzLl93cmFwcGVkRW1pdHNbcnVubmluZ0V2ZW50LnRhZ10pIHtcbiAgICAgICAgICAgIGNvbnN0IHdyYXBwZWRFbWl0ID0gKGxvZzogTG9nKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50ID0gdGhpcy5fd3JhcEV2ZW50KHJ1bm5pbmdFdmVudCwgbG9nLCBsaXN0ZW5lcik7XG5cbiAgICAgICAgICAgICAgICAvLyBUcnkgdG8gZW1pdCB0aGUgcmVzdWx0IGZvciB0aGUgcGFyYW1ldGVyaXplZCBldmVudC4uLlxuICAgICAgICAgICAgICAgIGlmIChldmVudC5kZWNvZGVFcnJvciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhcmdzID0gcnVubmluZ0V2ZW50LmdldEVtaXQoZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KHJ1bm5pbmdFdmVudC5maWx0ZXIsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGVjb2RlRXJyb3IgPSBlcnJvci5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEFsd2F5cyBlbWl0IFwiZXZlbnRcIiBmb3IgZnJhZ21lbnQtYmFzZSBldmVudHNcbiAgICAgICAgICAgICAgICBpZiAocnVubmluZ0V2ZW50LmZpbHRlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImV2ZW50XCIsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBFbWl0IFwiZXJyb3JcIiBpZiB0aGVyZSB3YXMgYW4gZXJyb3JcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZGVjb2RlRXJyb3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBldmVudC5kZWNvZGVFcnJvciwgZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLl93cmFwcGVkRW1pdHNbcnVubmluZ0V2ZW50LnRhZ10gPSB3cmFwcGVkRW1pdDtcblxuICAgICAgICAgICAgLy8gU3BlY2lhbCBldmVudHMsIGxpa2UgXCJlcnJvclwiIGRvIG5vdCBoYXZlIGEgZmlsdGVyXG4gICAgICAgICAgICBpZiAocnVubmluZ0V2ZW50LmZpbHRlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm92aWRlci5vbihydW5uaW5nRXZlbnQuZmlsdGVyLCB3cmFwcGVkRW1pdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBxdWVyeUZpbHRlcihldmVudDogRXZlbnRGaWx0ZXIgfCBzdHJpbmcsIGZyb21CbG9ja09yQmxvY2toYXNoPzogQmxvY2tUYWcgfCBzdHJpbmcsIHRvQmxvY2s/OiBCbG9ja1RhZyk6IFByb21pc2U8QXJyYXk8RXZlbnQ+PiB7XG4gICAgICAgIGNvbnN0IHJ1bm5pbmdFdmVudCA9IHRoaXMuX2dldFJ1bm5pbmdFdmVudChldmVudCk7XG4gICAgICAgIGNvbnN0IGZpbHRlciA9IHNoYWxsb3dDb3B5KHJ1bm5pbmdFdmVudC5maWx0ZXIpO1xuXG4gICAgICAgIGlmICh0eXBlb2YoZnJvbUJsb2NrT3JCbG9ja2hhc2gpID09PSBcInN0cmluZ1wiICYmIGlzSGV4U3RyaW5nKGZyb21CbG9ja09yQmxvY2toYXNoLCAzMikpIHtcbiAgICAgICAgICAgIGlmICh0b0Jsb2NrICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiY2Fubm90IHNwZWNpZnkgdG9CbG9jayB3aXRoIGJsb2NraGFzaFwiLCBcInRvQmxvY2tcIiwgdG9CbG9jayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoPEZpbHRlckJ5QmxvY2tIYXNoPmZpbHRlcikuYmxvY2tIYXNoID0gZnJvbUJsb2NrT3JCbG9ja2hhc2g7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgKDxGaWx0ZXI+ZmlsdGVyKS5mcm9tQmxvY2sgPSAoKGZyb21CbG9ja09yQmxvY2toYXNoICE9IG51bGwpID8gZnJvbUJsb2NrT3JCbG9ja2hhc2g6IDApO1xuICAgICAgICAgICAgICg8RmlsdGVyPmZpbHRlcikudG9CbG9jayA9ICgodG9CbG9jayAhPSBudWxsKSA/IHRvQmxvY2s6IFwibGF0ZXN0XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZ2V0TG9ncyhmaWx0ZXIpLnRoZW4oKGxvZ3MpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBsb2dzLm1hcCgobG9nKSA9PiB0aGlzLl93cmFwRXZlbnQocnVubmluZ0V2ZW50LCBsb2csIG51bGwpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb24oZXZlbnQ6IEV2ZW50RmlsdGVyIHwgc3RyaW5nLCBsaXN0ZW5lcjogTGlzdGVuZXIpOiB0aGlzIHtcbiAgICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcih0aGlzLl9nZXRSdW5uaW5nRXZlbnQoZXZlbnQpLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBvbmNlKGV2ZW50OiBFdmVudEZpbHRlciB8IHN0cmluZywgbGlzdGVuZXI6IExpc3RlbmVyKTogdGhpcyB7XG4gICAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXIodGhpcy5fZ2V0UnVubmluZ0V2ZW50KGV2ZW50KSwgbGlzdGVuZXIsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBlbWl0KGV2ZW50TmFtZTogRXZlbnRGaWx0ZXIgfCBzdHJpbmcsIC4uLmFyZ3M6IEFycmF5PGFueT4pOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCF0aGlzLnByb3ZpZGVyKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgICAgIGNvbnN0IHJ1bm5pbmdFdmVudCA9IHRoaXMuX2dldFJ1bm5pbmdFdmVudChldmVudE5hbWUpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSAocnVubmluZ0V2ZW50LnJ1bihhcmdzKSA+IDApO1xuXG4gICAgICAgIC8vIE1heSBoYXZlIGRyYWluZWQgYWxsIHRoZSBcIm9uY2VcIiBldmVudHM7IGNoZWNrIGZvciBsaXZpbmcgZXZlbnRzXG4gICAgICAgIHRoaXMuX2NoZWNrUnVubmluZ0V2ZW50cyhydW5uaW5nRXZlbnQpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJDb3VudChldmVudE5hbWU/OiBFdmVudEZpbHRlciB8IHN0cmluZyk6IG51bWJlciB7XG4gICAgICAgIGlmICghdGhpcy5wcm92aWRlcikgeyByZXR1cm4gMDsgfVxuICAgICAgICBpZiAoZXZlbnROYW1lID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl9ydW5uaW5nRXZlbnRzKS5yZWR1Y2UoKGFjY3VtLCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjdW0gKyB0aGlzLl9ydW5uaW5nRXZlbnRzW2tleV0ubGlzdGVuZXJDb3VudCgpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFJ1bm5pbmdFdmVudChldmVudE5hbWUpLmxpc3RlbmVyQ291bnQoKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMoZXZlbnROYW1lPzogRXZlbnRGaWx0ZXIgfCBzdHJpbmcpOiBBcnJheTxMaXN0ZW5lcj4ge1xuICAgICAgICBpZiAoIXRoaXMucHJvdmlkZXIpIHsgcmV0dXJuIFtdOyB9XG5cbiAgICAgICAgaWYgKGV2ZW50TmFtZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQ6IEFycmF5PExpc3RlbmVyPiA9IFsgXTtcbiAgICAgICAgICAgIGZvciAobGV0IHRhZyBpbiB0aGlzLl9ydW5uaW5nRXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcnVubmluZ0V2ZW50c1t0YWddLmxpc3RlbmVycygpLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGxpc3RlbmVyKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRSdW5uaW5nRXZlbnQoZXZlbnROYW1lKS5saXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICByZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnROYW1lPzogRXZlbnRGaWx0ZXIgfCBzdHJpbmcpOiB0aGlzIHtcbiAgICAgICAgaWYgKCF0aGlzLnByb3ZpZGVyKSB7IHJldHVybiB0aGlzOyB9XG5cbiAgICAgICAgaWYgKGV2ZW50TmFtZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRhZyBpbiB0aGlzLl9ydW5uaW5nRXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcnVubmluZ0V2ZW50ID0gdGhpcy5fcnVubmluZ0V2ZW50c1t0YWddO1xuICAgICAgICAgICAgICAgIHJ1bm5pbmdFdmVudC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1J1bm5pbmdFdmVudHMocnVubmluZ0V2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVsZXRlIGFueSBsaXN0ZW5lcnNcbiAgICAgICAgY29uc3QgcnVubmluZ0V2ZW50ID0gdGhpcy5fZ2V0UnVubmluZ0V2ZW50KGV2ZW50TmFtZSk7XG4gICAgICAgIHJ1bm5pbmdFdmVudC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5fY2hlY2tSdW5uaW5nRXZlbnRzKHJ1bm5pbmdFdmVudCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgb2ZmKGV2ZW50TmFtZTogRXZlbnRGaWx0ZXIgfCBzdHJpbmcsIGxpc3RlbmVyOiBMaXN0ZW5lcik6IHRoaXMge1xuICAgICAgICBpZiAoIXRoaXMucHJvdmlkZXIpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgY29uc3QgcnVubmluZ0V2ZW50ID0gdGhpcy5fZ2V0UnVubmluZ0V2ZW50KGV2ZW50TmFtZSk7XG4gICAgICAgIHJ1bm5pbmdFdmVudC5yZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICAgIHRoaXMuX2NoZWNrUnVubmluZ0V2ZW50cyhydW5uaW5nRXZlbnQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZW1vdmVMaXN0ZW5lcihldmVudE5hbWU6IEV2ZW50RmlsdGVyIHwgc3RyaW5nLCBsaXN0ZW5lcjogTGlzdGVuZXIpOiB0aGlzIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2ZmKGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cblxufVxuXG5leHBvcnQgY2xhc3MgQ29udHJhY3QgZXh0ZW5kcyBCYXNlQ29udHJhY3Qge1xuICAgIC8vIFRoZSBtZXRhLWNsYXNzIHByb3BlcnRpZXNcbiAgICByZWFkb25seSBbIGtleTogc3RyaW5nIF06IENvbnRyYWN0RnVuY3Rpb24gfCBhbnk7XG59XG5cbmV4cG9ydCBjbGFzcyBDb250cmFjdEZhY3Rvcnkge1xuXG4gICAgcmVhZG9ubHkgaW50ZXJmYWNlOiBJbnRlcmZhY2U7XG4gICAgcmVhZG9ubHkgYnl0ZWNvZGU6IHN0cmluZztcbiAgICByZWFkb25seSBzaWduZXI6IFNpZ25lcjtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRyYWN0SW50ZXJmYWNlOiBDb250cmFjdEludGVyZmFjZSwgYnl0ZWNvZGU6IEJ5dGVzTGlrZSB8IHsgb2JqZWN0OiBzdHJpbmcgfSwgc2lnbmVyPzogU2lnbmVyKSB7XG5cbiAgICAgICAgbGV0IGJ5dGVjb2RlSGV4OiBzdHJpbmcgPSBudWxsO1xuXG4gICAgICAgIGlmICh0eXBlb2YoYnl0ZWNvZGUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBieXRlY29kZUhleCA9IGJ5dGVjb2RlO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQnl0ZXMoYnl0ZWNvZGUpKSB7XG4gICAgICAgICAgICBieXRlY29kZUhleCA9IGhleGxpZnkoYnl0ZWNvZGUpO1xuICAgICAgICB9IGVsc2UgaWYgKGJ5dGVjb2RlICYmIHR5cGVvZihieXRlY29kZS5vYmplY3QpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAvLyBBbGxvdyB0aGUgYnl0ZWNvZGUgb2JqZWN0IGZyb20gdGhlIFNvbGlkaXR5IGNvbXBpbGVyXG4gICAgICAgICAgICBieXRlY29kZUhleCA9ICg8YW55PmJ5dGVjb2RlKS5vYmplY3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBDcmFzaCBpbiB0aGUgbmV4dCB2ZXJpZmljYXRpb24gc3RlcFxuICAgICAgICAgICAgYnl0ZWNvZGVIZXggPSBcIiFcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSBpdCBpcyAweCBwcmVmaXhlZFxuICAgICAgICBpZiAoYnl0ZWNvZGVIZXguc3Vic3RyaW5nKDAsIDIpICE9PSBcIjB4XCIpIHsgYnl0ZWNvZGVIZXggPSBcIjB4XCIgKyBieXRlY29kZUhleDsgfVxuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgZmluYWwgcmVzdWx0IGlzIHZhbGlkIGJ5dGVjb2RlXG4gICAgICAgIGlmICghaXNIZXhTdHJpbmcoYnl0ZWNvZGVIZXgpIHx8IChieXRlY29kZUhleC5sZW5ndGggJSAyKSkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYnl0ZWNvZGVcIiwgXCJieXRlY29kZVwiLCBieXRlY29kZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgc2lnbmVyLCBtYWtlIHN1cmUgaXQgaXMgdmFsaWRcbiAgICAgICAgaWYgKHNpZ25lciAmJiAhU2lnbmVyLmlzU2lnbmVyKHNpZ25lcikpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHNpZ25lclwiLCBcInNpZ25lclwiLCBzaWduZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJieXRlY29kZVwiLCBieXRlY29kZUhleCk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiaW50ZXJmYWNlXCIsIGdldFN0YXRpYzxJbnRlcmZhY2VGdW5jPihuZXcudGFyZ2V0LCBcImdldEludGVyZmFjZVwiKShjb250cmFjdEludGVyZmFjZSkpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcInNpZ25lclwiLCBzaWduZXIgfHwgbnVsbCk7XG4gICAgfVxuXG4gICAgLy8gQFRPRE86IEZ1dHVyZTsgcmVuYW1lIHRvIHBvcHVsYXRlVHJhbnNhY3Rpb24/XG4gICAgZ2V0RGVwbG95VHJhbnNhY3Rpb24oLi4uYXJnczogQXJyYXk8YW55Pik6IFRyYW5zYWN0aW9uUmVxdWVzdCB7XG4gICAgICAgIGxldCB0eDogVHJhbnNhY3Rpb25SZXF1ZXN0ID0geyB9O1xuXG4gICAgICAgIC8vIElmIHdlIGhhdmUgMSBhZGRpdGlvbmFsIGFyZ3VtZW50LCB3ZSBhbGxvdyB0cmFuc2FjdGlvbiBvdmVycmlkZXNcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSB0aGlzLmludGVyZmFjZS5kZXBsb3kuaW5wdXRzLmxlbmd0aCArIDEgJiYgdHlwZW9mKGFyZ3NbYXJncy5sZW5ndGggLSAxXSkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHR4ID0gc2hhbGxvd0NvcHkoYXJncy5wb3AoKSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0eCkge1xuICAgICAgICAgICAgICAgIGlmICghYWxsb3dlZFRyYW5zYWN0aW9uS2V5c1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHJhbnNhY3Rpb24gb3ZlcnJpZGUgXCIgKyBrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERvIG5vdCBhbGxvdyB0aGVzZSB0byBiZSBvdmVycmlkZGVuIGluIGEgZGVwbG95bWVudCB0cmFuc2FjdGlvblxuICAgICAgICBbXCJkYXRhXCIsIFwiZnJvbVwiLCBcInRvXCJdLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKCg8YW55PnR4KVtrZXldID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImNhbm5vdCBvdmVycmlkZSBcIiArIGtleSwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHsgb3BlcmF0aW9uOiBrZXkgfSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHR4LnZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IEJpZ051bWJlci5mcm9tKHR4LnZhbHVlKTtcbiAgICAgICAgICAgIGlmICghdmFsdWUuaXNaZXJvKCkgJiYgIXRoaXMuaW50ZXJmYWNlLmRlcGxveS5wYXlhYmxlKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJub24tcGF5YWJsZSBjb25zdHJ1Y3RvciBjYW5ub3Qgb3ZlcnJpZGUgdmFsdWVcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcIm92ZXJyaWRlcy52YWx1ZVwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHgudmFsdWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgY2FsbCBtYXRjaGVzIHRoZSBjb25zdHJ1Y3RvciBzaWduYXR1cmVcbiAgICAgICAgbG9nZ2VyLmNoZWNrQXJndW1lbnRDb3VudChhcmdzLmxlbmd0aCwgdGhpcy5pbnRlcmZhY2UuZGVwbG95LmlucHV0cy5sZW5ndGgsIFwiIGluIENvbnRyYWN0IGNvbnN0cnVjdG9yXCIpO1xuXG4gICAgICAgIC8vIFNldCB0aGUgZGF0YSB0byB0aGUgYnl0ZWNvZGUgKyB0aGUgZW5jb2RlZCBjb25zdHJ1Y3RvciBhcmd1bWVudHNcbiAgICAgICAgdHguZGF0YSA9IGhleGxpZnkoY29uY2F0KFtcbiAgICAgICAgICAgIHRoaXMuYnl0ZWNvZGUsXG4gICAgICAgICAgICB0aGlzLmludGVyZmFjZS5lbmNvZGVEZXBsb3koYXJncylcbiAgICAgICAgXSkpO1xuXG4gICAgICAgIHJldHVybiB0eFxuICAgIH1cblxuICAgIGFzeW5jIGRlcGxveSguLi5hcmdzOiBBcnJheTxhbnk+KTogUHJvbWlzZTxDb250cmFjdD4ge1xuXG4gICAgICAgIGxldCBvdmVycmlkZXM6IGFueSA9IHsgfTtcblxuICAgICAgICAvLyBJZiAxIGV4dHJhIHBhcmFtZXRlciB3YXMgcGFzc2VkIGluLCBpdCBjb250YWlucyBvdmVycmlkZXNcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSB0aGlzLmludGVyZmFjZS5kZXBsb3kuaW5wdXRzLmxlbmd0aCArIDEpIHtcbiAgICAgICAgICAgIG92ZXJyaWRlcyA9IGFyZ3MucG9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIGNhbGwgbWF0Y2hlcyB0aGUgY29uc3RydWN0b3Igc2lnbmF0dXJlXG4gICAgICAgIGxvZ2dlci5jaGVja0FyZ3VtZW50Q291bnQoYXJncy5sZW5ndGgsIHRoaXMuaW50ZXJmYWNlLmRlcGxveS5pbnB1dHMubGVuZ3RoLCBcIiBpbiBDb250cmFjdCBjb25zdHJ1Y3RvclwiKTtcblxuICAgICAgICAvLyBSZXNvbHZlIEVOUyBuYW1lcyBhbmQgcHJvbWlzZXMgaW4gdGhlIGFyZ3VtZW50c1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBhd2FpdCByZXNvbHZlQWRkcmVzc2VzKHRoaXMuc2lnbmVyLCBhcmdzLCB0aGlzLmludGVyZmFjZS5kZXBsb3kuaW5wdXRzKTtcbiAgICAgICAgcGFyYW1zLnB1c2gob3ZlcnJpZGVzKTtcblxuICAgICAgICAvLyBHZXQgdGhlIGRlcGxveW1lbnQgdHJhbnNhY3Rpb24gKHdpdGggb3B0aW9uYWwgb3ZlcnJpZGVzKVxuICAgICAgICBjb25zdCB1bnNpZ25lZFR4ID0gdGhpcy5nZXREZXBsb3lUcmFuc2FjdGlvbiguLi5wYXJhbXMpO1xuXG4gICAgICAgIC8vIFNlbmQgdGhlIGRlcGxveW1lbnQgdHJhbnNhY3Rpb25cbiAgICAgICAgY29uc3QgdHggPSBhd2FpdCB0aGlzLnNpZ25lci5zZW5kVHJhbnNhY3Rpb24odW5zaWduZWRUeCk7XG5cbiAgICAgICAgY29uc3QgYWRkcmVzcyA9IGdldFN0YXRpYzwodHg6IFRyYW5zYWN0aW9uUmVzcG9uc2UpID0+IHN0cmluZz4odGhpcy5jb25zdHJ1Y3RvciwgXCJnZXRDb250cmFjdEFkZHJlc3NcIikodHgpO1xuICAgICAgICBjb25zdCBjb250cmFjdCA9IGdldFN0YXRpYzwoYWRkcmVzczogc3RyaW5nLCBjb250cmFjdEludGVyZmFjZTogQ29udHJhY3RJbnRlcmZhY2UsIHNpZ25lcj86IFNpZ25lcikgPT4gQ29udHJhY3Q+KHRoaXMuY29uc3RydWN0b3IsIFwiZ2V0Q29udHJhY3RcIikoYWRkcmVzcywgdGhpcy5pbnRlcmZhY2UsIHRoaXMuc2lnbmVyKTtcblxuICAgICAgICAvLyBBZGQgdGhlIG1vZGlmaWVkIHdhaXQgdGhhdCB3cmFwcyBldmVudHNcbiAgICAgICAgYWRkQ29udHJhY3RXYWl0KGNvbnRyYWN0LCB0eCk7XG5cbiAgICAgICAgZGVmaW5lUmVhZE9ubHkoY29udHJhY3QsIFwiZGVwbG95VHJhbnNhY3Rpb25cIiwgdHgpO1xuICAgICAgICByZXR1cm4gY29udHJhY3Q7XG4gICAgfVxuXG4gICAgYXR0YWNoKGFkZHJlc3M6IHN0cmluZyk6IENvbnRyYWN0IHtcbiAgICAgICAgcmV0dXJuICg8YW55Pih0aGlzLmNvbnN0cnVjdG9yKSkuZ2V0Q29udHJhY3QoYWRkcmVzcywgdGhpcy5pbnRlcmZhY2UsIHRoaXMuc2lnbmVyKTtcbiAgICB9XG5cbiAgICBjb25uZWN0KHNpZ25lcjogU2lnbmVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgKDx7IG5ldyguLi5hcmdzOiBhbnlbXSk6IENvbnRyYWN0RmFjdG9yeSB9Pih0aGlzLmNvbnN0cnVjdG9yKSkodGhpcy5pbnRlcmZhY2UsIHRoaXMuYnl0ZWNvZGUsIHNpZ25lcik7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21Tb2xpZGl0eShjb21waWxlck91dHB1dDogYW55LCBzaWduZXI/OiBTaWduZXIpOiBDb250cmFjdEZhY3Rvcnkge1xuICAgICAgICBpZiAoY29tcGlsZXJPdXRwdXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJtaXNzaW5nIGNvbXBpbGVyIG91dHB1dFwiLCBMb2dnZXIuZXJyb3JzLk1JU1NJTkdfQVJHVU1FTlQsIHsgYXJndW1lbnQ6IFwiY29tcGlsZXJPdXRwdXRcIiB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YoY29tcGlsZXJPdXRwdXQpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb21waWxlck91dHB1dCA9IEpTT04ucGFyc2UoY29tcGlsZXJPdXRwdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYWJpID0gY29tcGlsZXJPdXRwdXQuYWJpO1xuXG4gICAgICAgIGxldCBieXRlY29kZTogYW55ID0gbnVsbDtcbiAgICAgICAgaWYgKGNvbXBpbGVyT3V0cHV0LmJ5dGVjb2RlKSB7XG4gICAgICAgICAgICBieXRlY29kZSA9IGNvbXBpbGVyT3V0cHV0LmJ5dGVjb2RlO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbXBpbGVyT3V0cHV0LmV2bSAmJiBjb21waWxlck91dHB1dC5ldm0uYnl0ZWNvZGUpIHtcbiAgICAgICAgICAgIGJ5dGVjb2RlID0gY29tcGlsZXJPdXRwdXQuZXZtLmJ5dGVjb2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKGFiaSwgYnl0ZWNvZGUsIHNpZ25lcik7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldEludGVyZmFjZShjb250cmFjdEludGVyZmFjZTogQ29udHJhY3RJbnRlcmZhY2UpIHtcbiAgICAgICAgcmV0dXJuIENvbnRyYWN0LmdldEludGVyZmFjZShjb250cmFjdEludGVyZmFjZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldENvbnRyYWN0QWRkcmVzcyh0eDogeyBmcm9tOiBzdHJpbmcsIG5vbmNlOiBCeXRlc0xpa2UgfCBCaWdOdW1iZXIgfCBudW1iZXIgfSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBnZXRDb250cmFjdEFkZHJlc3ModHgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRDb250cmFjdChhZGRyZXNzOiBzdHJpbmcsIGNvbnRyYWN0SW50ZXJmYWNlOiBDb250cmFjdEludGVyZmFjZSwgc2lnbmVyPzogU2lnbmVyKTogQ29udHJhY3Qge1xuICAgICAgICByZXR1cm4gbmV3IENvbnRyYWN0KGFkZHJlc3MsIGNvbnRyYWN0SW50ZXJmYWNlLCBzaWduZXIpO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJjb250cmFjdHMvNS43LjBcIjtcbiIsIi8qKlxuICogdmFyIGJhc2V4ID0gcmVxdWlyZShcImJhc2UteFwiKTtcbiAqXG4gKiBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGhlYXZpbHkgYmFzZWQgb24gYmFzZS14LiBUaGUgbWFpbiByZWFzb24gdG9cbiAqIGRldmlhdGUgd2FzIHRvIHByZXZlbnQgdGhlIGRlcGVuZGVuY3kgb2YgQnVmZmVyLlxuICpcbiAqIENvbnRyaWJ1dG9yczpcbiAqXG4gKiBiYXNlLXggZW5jb2RpbmdcbiAqIEZvcmtlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9jcnlwdG9jb2luanMvYnM1OFxuICogT3JpZ2luYWxseSB3cml0dGVuIGJ5IE1pa2UgSGVhcm4gZm9yIEJpdGNvaW5KXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTEgR29vZ2xlIEluY1xuICogUG9ydGVkIHRvIEphdmFTY3JpcHQgYnkgU3RlZmFuIFRob21hc1xuICogTWVyZ2VkIEJ1ZmZlciByZWZhY3RvcmluZ3MgZnJvbSBiYXNlNTgtbmF0aXZlIGJ5IFN0ZXBoZW4gUGFpclxuICogQ29weXJpZ2h0IChjKSAyMDEzIEJpdFBheSBJbmNcbiAqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqXG4gKiBDb3B5cmlnaHQgYmFzZS14IGNvbnRyaWJ1dG9ycyAoYykgMjAxNlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4gKiBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksXG4gKiB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uXG4gKiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSxcbiAqIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZVxuICogU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lOR1xuICogRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HU1xuICogSU4gVEhFIFNPRlRXQVJFLlxuICpcbiAqL1xuXG5pbXBvcnQgeyBhcnJheWlmeSwgQnl0ZXNMaWtlIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBkZWZpbmVSZWFkT25seSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzXCI7XG5cbmV4cG9ydCBjbGFzcyBCYXNlWCB7XG4gICAgcmVhZG9ubHkgYWxwaGFiZXQ6IHN0cmluZztcbiAgICByZWFkb25seSBiYXNlOiBudW1iZXI7XG5cbiAgICBfYWxwaGFiZXRNYXA6IHsgWyBjaGFyYWN0ZXI6IHN0cmluZyBdOiBudW1iZXIgfTtcbiAgICBfbGVhZGVyOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihhbHBoYWJldDogc3RyaW5nKSB7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiYWxwaGFiZXRcIiwgYWxwaGFiZXQpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImJhc2VcIiwgYWxwaGFiZXQubGVuZ3RoKTtcblxuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl9hbHBoYWJldE1hcFwiLCB7IH0pO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl9sZWFkZXJcIiwgYWxwaGFiZXQuY2hhckF0KDApKTtcblxuICAgICAgICAvLyBwcmUtY29tcHV0ZSBsb29rdXAgdGFibGVcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbHBoYWJldC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fYWxwaGFiZXRNYXBbYWxwaGFiZXQuY2hhckF0KGkpXSA9IGk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbmNvZGUodmFsdWU6IEJ5dGVzTGlrZSk6IHN0cmluZyB7XG4gICAgICAgIGxldCBzb3VyY2UgPSBhcnJheWlmeSh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKHNvdXJjZS5sZW5ndGggPT09IDApIHsgcmV0dXJuIFwiXCI7IH1cblxuICAgICAgICBsZXQgZGlnaXRzID0gWyAwIF1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBjYXJyeSA9IHNvdXJjZVtpXTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZGlnaXRzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgY2FycnkgKz0gZGlnaXRzW2pdIDw8IDg7XG4gICAgICAgICAgICAgICAgZGlnaXRzW2pdID0gY2FycnkgJSB0aGlzLmJhc2U7XG4gICAgICAgICAgICAgICAgY2FycnkgPSAoY2FycnkgLyB0aGlzLmJhc2UpIHwgMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2hpbGUgKGNhcnJ5ID4gMCkge1xuICAgICAgICAgICAgICAgIGRpZ2l0cy5wdXNoKGNhcnJ5ICUgdGhpcy5iYXNlKTtcbiAgICAgICAgICAgICAgICBjYXJyeSA9IChjYXJyeSAvIHRoaXMuYmFzZSkgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHN0cmluZyA9IFwiXCJcblxuICAgICAgICAvLyBkZWFsIHdpdGggbGVhZGluZyB6ZXJvc1xuICAgICAgICBmb3IgKGxldCBrID0gMDsgc291cmNlW2tdID09PSAwICYmIGsgPCBzb3VyY2UubGVuZ3RoIC0gMTsgKytrKSB7XG4gICAgICAgICAgICBzdHJpbmcgKz0gdGhpcy5fbGVhZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29udmVydCBkaWdpdHMgdG8gYSBzdHJpbmdcbiAgICAgICAgZm9yIChsZXQgcSA9IGRpZ2l0cy5sZW5ndGggLSAxOyBxID49IDA7IC0tcSkge1xuICAgICAgICAgICAgc3RyaW5nICs9IHRoaXMuYWxwaGFiZXRbZGlnaXRzW3FdXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuXG4gICAgZGVjb2RlKHZhbHVlOiBzdHJpbmcpOiBVaW50OEFycmF5IHtcbiAgICAgICAgaWYgKHR5cGVvZih2YWx1ZSkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBTdHJpbmdcIik7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYnl0ZXM6IEFycmF5PG51bWJlcj4gPSBbXTtcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnl0ZXMpOyB9XG5cbiAgICAgICAgYnl0ZXMucHVzaCgwKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGJ5dGUgPSB0aGlzLl9hbHBoYWJldE1hcFt2YWx1ZVtpXV07XG5cbiAgICAgICAgICAgIGlmIChieXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb24tYmFzZVwiICsgdGhpcy5iYXNlICsgXCIgY2hhcmFjdGVyXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgY2FycnkgPSBieXRlO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBieXRlcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgIGNhcnJ5ICs9IGJ5dGVzW2pdICogdGhpcy5iYXNlO1xuICAgICAgICAgICAgICAgIGJ5dGVzW2pdID0gY2FycnkgJiAweGZmO1xuICAgICAgICAgICAgICAgIGNhcnJ5ID4+PSA4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aGlsZSAoY2FycnkgPiAwKSB7XG4gICAgICAgICAgICAgICAgYnl0ZXMucHVzaChjYXJyeSAmIDB4ZmYpO1xuICAgICAgICAgICAgICAgIGNhcnJ5ID4+PSA4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVhbCB3aXRoIGxlYWRpbmcgemVyb3NcbiAgICAgICAgZm9yIChsZXQgayA9IDA7IHZhbHVlW2tdID09PSB0aGlzLl9sZWFkZXIgJiYgayA8IHZhbHVlLmxlbmd0aCAtIDE7ICsraykge1xuICAgICAgICAgICAgYnl0ZXMucHVzaCgwKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFycmF5aWZ5KG5ldyBVaW50OEFycmF5KGJ5dGVzLnJldmVyc2UoKSkpXG4gICAgfVxufVxuXG5jb25zdCBCYXNlMzIgPSBuZXcgQmFzZVgoXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejIzNDU2N1wiKTtcbmNvbnN0IEJhc2U1OCA9IG5ldyBCYXNlWChcIjEyMzQ1Njc4OUFCQ0RFRkdISktMTU5QUVJTVFVWV1hZWmFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXpcIik7XG5cbmV4cG9ydCB7IEJhc2UzMiwgQmFzZTU4IH07XG5cbi8vY29uc29sZS5sb2coQmFzZTU4LmRlY29kZShcIlFtZDJWNzc3bzVYdkpiWU1lTWI4azJuVTVmOGQzY2lVUTVZcFl1V2h6djhpRGpcIikpXG4vL2NvbnNvbGUubG9nKEJhc2U1OC5lbmNvZGUoQmFzZTU4LmRlY29kZShcIlFtZDJWNzc3bzVYdkpiWU1lTWI4azJuVTVmOGQzY2lVUTVZcFl1V2h6djhpRGpcIikpKVxuIiwiZXhwb3J0IGVudW0gU3VwcG9ydGVkQWxnb3JpdGhtIHsgc2hhMjU2ID0gXCJzaGEyNTZcIiwgc2hhNTEyID0gXCJzaGE1MTJcIiB9O1xuXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlpZnksIEJ5dGVzTGlrZSwgaGV4bGlmeSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgY29tcHV0ZUhtYWMsIFN1cHBvcnRlZEFsZ29yaXRobSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9zaGEyXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYmtkZjIocGFzc3dvcmQ6IEJ5dGVzTGlrZSwgc2FsdDogQnl0ZXNMaWtlLCBpdGVyYXRpb25zOiBudW1iZXIsIGtleWxlbjogbnVtYmVyLCBoYXNoQWxnb3JpdGhtOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHBhc3N3b3JkID0gYXJyYXlpZnkocGFzc3dvcmQpO1xuICAgIHNhbHQgPSBhcnJheWlmeShzYWx0KTtcbiAgICBsZXQgaExlbjtcbiAgICBsZXQgbCA9IDE7XG4gICAgY29uc3QgREsgPSBuZXcgVWludDhBcnJheShrZXlsZW4pXG4gICAgY29uc3QgYmxvY2sxID0gbmV3IFVpbnQ4QXJyYXkoc2FsdC5sZW5ndGggKyA0KVxuICAgIGJsb2NrMS5zZXQoc2FsdCk7XG4gICAgLy9zYWx0LmNvcHkoYmxvY2sxLCAwLCAwLCBzYWx0Lmxlbmd0aClcblxuICAgIGxldCByOiBudW1iZXI7XG4gICAgbGV0IFQ6IFVpbnQ4QXJyYXk7XG5cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBsOyBpKyspIHtcbiAgICAgICAgLy9ibG9jazEud3JpdGVVSW50MzJCRShpLCBzYWx0Lmxlbmd0aClcbiAgICAgICAgYmxvY2sxW3NhbHQubGVuZ3RoXSA9IChpID4+IDI0KSAmIDB4ZmY7XG4gICAgICAgIGJsb2NrMVtzYWx0Lmxlbmd0aCArIDFdID0gKGkgPj4gMTYpICYgMHhmZjtcbiAgICAgICAgYmxvY2sxW3NhbHQubGVuZ3RoICsgMl0gPSAoaSA+PiA4KSAmIDB4ZmY7XG4gICAgICAgIGJsb2NrMVtzYWx0Lmxlbmd0aCArIDNdID0gaSAmIDB4ZmY7XG5cbiAgICAgICAgLy9sZXQgVSA9IGNyZWF0ZUhtYWMocGFzc3dvcmQpLnVwZGF0ZShibG9jazEpLmRpZ2VzdCgpO1xuICAgICAgICBsZXQgVSA9IGFycmF5aWZ5KGNvbXB1dGVIbWFjKDxTdXBwb3J0ZWRBbGdvcml0aG0+aGFzaEFsZ29yaXRobSwgcGFzc3dvcmQsIGJsb2NrMSkpO1xuXG4gICAgICAgIGlmICghaExlbikge1xuICAgICAgICAgICAgaExlbiA9IFUubGVuZ3RoXG4gICAgICAgICAgICBUID0gbmV3IFVpbnQ4QXJyYXkoaExlbilcbiAgICAgICAgICAgIGwgPSBNYXRoLmNlaWwoa2V5bGVuIC8gaExlbilcbiAgICAgICAgICAgIHIgPSBrZXlsZW4gLSAobCAtIDEpICogaExlblxuICAgICAgICB9XG5cbiAgICAgICAgLy9VLmNvcHkoVCwgMCwgMCwgaExlbilcbiAgICAgICAgVC5zZXQoVSk7XG5cblxuICAgICAgICBmb3IgKGxldCBqID0gMTsgaiA8IGl0ZXJhdGlvbnM7IGorKykge1xuICAgICAgICAgICAgLy9VID0gY3JlYXRlSG1hYyhwYXNzd29yZCkudXBkYXRlKFUpLmRpZ2VzdCgpO1xuICAgICAgICAgICAgVSA9IGFycmF5aWZ5KGNvbXB1dGVIbWFjKDxTdXBwb3J0ZWRBbGdvcml0aG0+aGFzaEFsZ29yaXRobSwgcGFzc3dvcmQsIFUpKTtcbiAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgaExlbjsgaysrKSBUW2tdIF49IFVba11cbiAgICAgICAgfVxuXG5cbiAgICAgICAgY29uc3QgZGVzdFBvcyA9IChpIC0gMSkgKiBoTGVuXG4gICAgICAgIGNvbnN0IGxlbiA9IChpID09PSBsID8gciA6IGhMZW4pXG4gICAgICAgIC8vVC5jb3B5KERLLCBkZXN0UG9zLCAwLCBsZW4pXG4gICAgICAgIERLLnNldChhcnJheWlmeShUKS5zbGljZSgwLCBsZW4pLCBkZXN0UG9zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGV4bGlmeShESylcbn1cblxuIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcInNoYTIvNS43LjBcIjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgaGFzaCBmcm9tIFwiaGFzaC5qc1wiO1xuLy9jb25zdCBfcmlwZW1kMTYwID0gX2hhc2gucmlwZW1kMTYwO1xuXG5pbXBvcnQgeyBhcnJheWlmeSwgQnl0ZXNMaWtlIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5cbmltcG9ydCB7IFN1cHBvcnRlZEFsZ29yaXRobSB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJpcGVtZDE2MChkYXRhOiBCeXRlc0xpa2UpOiBzdHJpbmcge1xuICAgIHJldHVybiBcIjB4XCIgKyAoaGFzaC5yaXBlbWQxNjAoKS51cGRhdGUoYXJyYXlpZnkoZGF0YSkpLmRpZ2VzdChcImhleFwiKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaGEyNTYoZGF0YTogQnl0ZXNMaWtlKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCIweFwiICsgKGhhc2guc2hhMjU2KCkudXBkYXRlKGFycmF5aWZ5KGRhdGEpKS5kaWdlc3QoXCJoZXhcIikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hhNTEyKGRhdGE6IEJ5dGVzTGlrZSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiMHhcIiArIChoYXNoLnNoYTUxMigpLnVwZGF0ZShhcnJheWlmeShkYXRhKSkuZGlnZXN0KFwiaGV4XCIpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVIbWFjKGFsZ29yaXRobTogU3VwcG9ydGVkQWxnb3JpdGhtLCBrZXk6IEJ5dGVzTGlrZSwgZGF0YTogQnl0ZXNMaWtlKTogc3RyaW5nIHtcbiAgICBpZiAoIVN1cHBvcnRlZEFsZ29yaXRobVthbGdvcml0aG1dKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwidW5zdXBwb3J0ZWQgYWxnb3JpdGhtIFwiICsgYWxnb3JpdGhtLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBcImhtYWNcIixcbiAgICAgICAgICAgIGFsZ29yaXRobTogYWxnb3JpdGhtXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBcIjB4XCIgKyBoYXNoLmhtYWMoKDxhbnk+aGFzaClbYWxnb3JpdGhtXSwgYXJyYXlpZnkoa2V5KSkudXBkYXRlKGFycmF5aWZ5KGRhdGEpKS5kaWdlc3QoXCJoZXhcIik7XG59XG5cbiIsImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJ3b3JkbGlzdHMvNS43LjBcIjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyBUaGlzIGdldHMgb3ZlcnJpZGRlbiBieSByb2xsdXBcbmNvbnN0IGV4cG9ydFdvcmRsaXN0ID0gZmFsc2U7XG5cbmltcG9ydCB7IGlkIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2hhc2hcIjtcbmltcG9ydCB7IGRlZmluZVJlYWRPbmx5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIjtcblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5leHBvcnQgY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFdvcmRsaXN0IHtcbiAgICByZWFkb25seSBsb2NhbGU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGxvY2FsZTogc3RyaW5nKSB7XG4gICAgICAgIGxvZ2dlci5jaGVja0Fic3RyYWN0KG5ldy50YXJnZXQsIFdvcmRsaXN0KTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJsb2NhbGVcIiwgbG9jYWxlKTtcbiAgICB9XG5cbiAgICBhYnN0cmFjdCBnZXRXb3JkKGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XG4gICAgYWJzdHJhY3QgZ2V0V29yZEluZGV4KHdvcmQ6IHN0cmluZyk6IG51bWJlcjtcblxuICAgIC8vIFN1YmNsYXNzZXMgbWF5IG92ZXJyaWRlIHRoaXNcbiAgICBzcGxpdChtbmVtb25pYzogc3RyaW5nKTogQXJyYXk8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiBtbmVtb25pYy50b0xvd2VyQ2FzZSgpLnNwbGl0KC8gKy9nKVxuICAgIH1cblxuICAgIC8vIFN1YmNsYXNzZXMgbWF5IG92ZXJyaWRlIHRoaXNcbiAgICBqb2luKHdvcmRzOiBBcnJheTxzdHJpbmc+KTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHdvcmRzLmpvaW4oXCIgXCIpO1xuICAgIH1cblxuICAgIHN0YXRpYyBjaGVjayh3b3JkbGlzdDogV29yZGxpc3QpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCB3b3JkcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDIwNDg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgd29yZCA9IHdvcmRsaXN0LmdldFdvcmQoaSk7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgIGlmIChpICE9PSB3b3JkbGlzdC5nZXRXb3JkSW5kZXgod29yZCkpIHsgcmV0dXJuIFwiMHhcIjsgfVxuICAgICAgICAgICAgd29yZHMucHVzaCh3b3JkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWQod29yZHMuam9pbihcIlxcblwiKSArIFwiXFxuXCIpO1xuICAgIH1cblxuICAgIHN0YXRpYyByZWdpc3RlcihsYW5nOiBXb3JkbGlzdCwgbmFtZT86IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAoIW5hbWUpIHsgbmFtZSA9IGxhbmcubG9jYWxlOyB9XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChleHBvcnRXb3JkbGlzdCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBhbnlHbG9iYWwgPSAod2luZG93IGFzIGFueSlcbiAgICAgICAgICAgICAgICBpZiAoYW55R2xvYmFsLl9ldGhlcnMgJiYgYW55R2xvYmFsLl9ldGhlcnMud29yZGxpc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYW55R2xvYmFsLl9ldGhlcnMud29yZGxpc3RzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkoYW55R2xvYmFsLl9ldGhlcnMud29yZGxpc3RzLCBuYW1lLCBsYW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IH1cbiAgICAgICAgfVxuICAgIH1cblxufVxuXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgV29yZGxpc3QgfSBmcm9tIFwiLi93b3JkbGlzdFwiO1xuXG5cbmNvbnN0IHdvcmRzID0gXCJBYmFuZG9uQWJpbGl0eUFibGVBYm91dEFib3ZlQWJzZW50QWJzb3JiQWJzdHJhY3RBYnN1cmRBYnVzZUFjY2Vzc0FjY2lkZW50QWNjb3VudEFjY3VzZUFjaGlldmVBY2lkQWNvdXN0aWNBY3F1aXJlQWNyb3NzQWN0QWN0aW9uQWN0b3JBY3RyZXNzQWN0dWFsQWRhcHRBZGRBZGRpY3RBZGRyZXNzQWRqdXN0QWRtaXRBZHVsdEFkdmFuY2VBZHZpY2VBZXJvYmljQWZmYWlyQWZmb3JkQWZyYWlkQWdhaW5BZ2VBZ2VudEFncmVlQWhlYWRBaW1BaXJBaXJwb3J0QWlzbGVBbGFybUFsYnVtQWxjb2hvbEFsZXJ0QWxpZW5BbGxBbGxleUFsbG93QWxtb3N0QWxvbmVBbHBoYUFscmVhZHlBbHNvQWx0ZXJBbHdheXNBbWF0ZXVyQW1hemluZ0Ftb25nQW1vdW50QW11c2VkQW5hbHlzdEFuY2hvckFuY2llbnRBbmdlckFuZ2xlQW5ncnlBbmltYWxBbmtsZUFubm91bmNlQW5udWFsQW5vdGhlckFuc3dlckFudGVubmFBbnRpcXVlQW54aWV0eUFueUFwYXJ0QXBvbG9neUFwcGVhckFwcGxlQXBwcm92ZUFwcmlsQXJjaEFyY3RpY0FyZWFBcmVuYUFyZ3VlQXJtQXJtZWRBcm1vckFybXlBcm91bmRBcnJhbmdlQXJyZXN0QXJyaXZlQXJyb3dBcnRBcnRlZmFjdEFydGlzdEFydHdvcmtBc2tBc3BlY3RBc3NhdWx0QXNzZXRBc3Npc3RBc3N1bWVBc3RobWFBdGhsZXRlQXRvbUF0dGFja0F0dGVuZEF0dGl0dWRlQXR0cmFjdEF1Y3Rpb25BdWRpdEF1Z3VzdEF1bnRBdXRob3JBdXRvQXV0dW1uQXZlcmFnZUF2b2NhZG9Bdm9pZEF3YWtlQXdhcmVBd2F5QXdlc29tZUF3ZnVsQXdrd2FyZEF4aXNCYWJ5QmFjaGVsb3JCYWNvbkJhZGdlQmFnQmFsYW5jZUJhbGNvbnlCYWxsQmFtYm9vQmFuYW5hQmFubmVyQmFyQmFyZWx5QmFyZ2FpbkJhcnJlbEJhc2VCYXNpY0Jhc2tldEJhdHRsZUJlYWNoQmVhbkJlYXV0eUJlY2F1c2VCZWNvbWVCZWVmQmVmb3JlQmVnaW5CZWhhdmVCZWhpbmRCZWxpZXZlQmVsb3dCZWx0QmVuY2hCZW5lZml0QmVzdEJldHJheUJldHRlckJldHdlZW5CZXlvbmRCaWN5Y2xlQmlkQmlrZUJpbmRCaW9sb2d5QmlyZEJpcnRoQml0dGVyQmxhY2tCbGFkZUJsYW1lQmxhbmtldEJsYXN0QmxlYWtCbGVzc0JsaW5kQmxvb2RCbG9zc29tQmxvdXNlQmx1ZUJsdXJCbHVzaEJvYXJkQm9hdEJvZHlCb2lsQm9tYkJvbmVCb251c0Jvb2tCb29zdEJvcmRlckJvcmluZ0JvcnJvd0Jvc3NCb3R0b21Cb3VuY2VCb3hCb3lCcmFja2V0QnJhaW5CcmFuZEJyYXNzQnJhdmVCcmVhZEJyZWV6ZUJyaWNrQnJpZGdlQnJpZWZCcmlnaHRCcmluZ0JyaXNrQnJvY2NvbGlCcm9rZW5Ccm9uemVCcm9vbUJyb3RoZXJCcm93bkJydXNoQnViYmxlQnVkZHlCdWRnZXRCdWZmYWxvQnVpbGRCdWxiQnVsa0J1bGxldEJ1bmRsZUJ1bmtlckJ1cmRlbkJ1cmdlckJ1cnN0QnVzQnVzaW5lc3NCdXN5QnV0dGVyQnV5ZXJCdXp6Q2FiYmFnZUNhYmluQ2FibGVDYWN0dXNDYWdlQ2FrZUNhbGxDYWxtQ2FtZXJhQ2FtcENhbkNhbmFsQ2FuY2VsQ2FuZHlDYW5ub25DYW5vZUNhbnZhc0NhbnlvbkNhcGFibGVDYXBpdGFsQ2FwdGFpbkNhckNhcmJvbkNhcmRDYXJnb0NhcnBldENhcnJ5Q2FydENhc2VDYXNoQ2FzaW5vQ2FzdGxlQ2FzdWFsQ2F0Q2F0YWxvZ0NhdGNoQ2F0ZWdvcnlDYXR0bGVDYXVnaHRDYXVzZUNhdXRpb25DYXZlQ2VpbGluZ0NlbGVyeUNlbWVudENlbnN1c0NlbnR1cnlDZXJlYWxDZXJ0YWluQ2hhaXJDaGFsa0NoYW1waW9uQ2hhbmdlQ2hhb3NDaGFwdGVyQ2hhcmdlQ2hhc2VDaGF0Q2hlYXBDaGVja0NoZWVzZUNoZWZDaGVycnlDaGVzdENoaWNrZW5DaGllZkNoaWxkQ2hpbW5leUNob2ljZUNob29zZUNocm9uaWNDaHVja2xlQ2h1bmtDaHVybkNpZ2FyQ2lubmFtb25DaXJjbGVDaXRpemVuQ2l0eUNpdmlsQ2xhaW1DbGFwQ2xhcmlmeUNsYXdDbGF5Q2xlYW5DbGVya0NsZXZlckNsaWNrQ2xpZW50Q2xpZmZDbGltYkNsaW5pY0NsaXBDbG9ja0Nsb2dDbG9zZUNsb3RoQ2xvdWRDbG93bkNsdWJDbHVtcENsdXN0ZXJDbHV0Y2hDb2FjaENvYXN0Q29jb251dENvZGVDb2ZmZWVDb2lsQ29pbkNvbGxlY3RDb2xvckNvbHVtbkNvbWJpbmVDb21lQ29tZm9ydENvbWljQ29tbW9uQ29tcGFueUNvbmNlcnRDb25kdWN0Q29uZmlybUNvbmdyZXNzQ29ubmVjdENvbnNpZGVyQ29udHJvbENvbnZpbmNlQ29va0Nvb2xDb3BwZXJDb3B5Q29yYWxDb3JlQ29ybkNvcnJlY3RDb3N0Q290dG9uQ291Y2hDb3VudHJ5Q291cGxlQ291cnNlQ291c2luQ292ZXJDb3lvdGVDcmFja0NyYWRsZUNyYWZ0Q3JhbUNyYW5lQ3Jhc2hDcmF0ZXJDcmF3bENyYXp5Q3JlYW1DcmVkaXRDcmVla0NyZXdDcmlja2V0Q3JpbWVDcmlzcENyaXRpY0Nyb3BDcm9zc0Nyb3VjaENyb3dkQ3J1Y2lhbENydWVsQ3J1aXNlQ3J1bWJsZUNydW5jaENydXNoQ3J5Q3J5c3RhbEN1YmVDdWx0dXJlQ3VwQ3VwYm9hcmRDdXJpb3VzQ3VycmVudEN1cnRhaW5DdXJ2ZUN1c2hpb25DdXN0b21DdXRlQ3ljbGVEYWREYW1hZ2VEYW1wRGFuY2VEYW5nZXJEYXJpbmdEYXNoRGF1Z2h0ZXJEYXduRGF5RGVhbERlYmF0ZURlYnJpc0RlY2FkZURlY2VtYmVyRGVjaWRlRGVjbGluZURlY29yYXRlRGVjcmVhc2VEZWVyRGVmZW5zZURlZmluZURlZnlEZWdyZWVEZWxheURlbGl2ZXJEZW1hbmREZW1pc2VEZW5pYWxEZW50aXN0RGVueURlcGFydERlcGVuZERlcG9zaXREZXB0aERlcHV0eURlcml2ZURlc2NyaWJlRGVzZXJ0RGVzaWduRGVza0Rlc3BhaXJEZXN0cm95RGV0YWlsRGV0ZWN0RGV2ZWxvcERldmljZURldm90ZURpYWdyYW1EaWFsRGlhbW9uZERpYXJ5RGljZURpZXNlbERpZXREaWZmZXJEaWdpdGFsRGlnbml0eURpbGVtbWFEaW5uZXJEaW5vc2F1ckRpcmVjdERpcnREaXNhZ3JlZURpc2NvdmVyRGlzZWFzZURpc2hEaXNtaXNzRGlzb3JkZXJEaXNwbGF5RGlzdGFuY2VEaXZlcnREaXZpZGVEaXZvcmNlRGl6enlEb2N0b3JEb2N1bWVudERvZ0RvbGxEb2xwaGluRG9tYWluRG9uYXRlRG9ua2V5RG9ub3JEb29yRG9zZURvdWJsZURvdmVEcmFmdERyYWdvbkRyYW1hRHJhc3RpY0RyYXdEcmVhbURyZXNzRHJpZnREcmlsbERyaW5rRHJpcERyaXZlRHJvcERydW1EcnlEdWNrRHVtYkR1bmVEdXJpbmdEdXN0RHV0Y2hEdXR5RHdhcmZEeW5hbWljRWFnZXJFYWdsZUVhcmx5RWFybkVhcnRoRWFzaWx5RWFzdEVhc3lFY2hvRWNvbG9neUVjb25vbXlFZGdlRWRpdEVkdWNhdGVFZmZvcnRFZ2dFaWdodEVpdGhlckVsYm93RWxkZXJFbGVjdHJpY0VsZWdhbnRFbGVtZW50RWxlcGhhbnRFbGV2YXRvckVsaXRlRWxzZUVtYmFya0VtYm9keUVtYnJhY2VFbWVyZ2VFbW90aW9uRW1wbG95RW1wb3dlckVtcHR5RW5hYmxlRW5hY3RFbmRFbmRsZXNzRW5kb3JzZUVuZW15RW5lcmd5RW5mb3JjZUVuZ2FnZUVuZ2luZUVuaGFuY2VFbmpveUVubGlzdEVub3VnaEVucmljaEVucm9sbEVuc3VyZUVudGVyRW50aXJlRW50cnlFbnZlbG9wZUVwaXNvZGVFcXVhbEVxdWlwRXJhRXJhc2VFcm9kZUVyb3Npb25FcnJvckVydXB0RXNjYXBlRXNzYXlFc3NlbmNlRXN0YXRlRXRlcm5hbEV0aGljc0V2aWRlbmNlRXZpbEV2b2tlRXZvbHZlRXhhY3RFeGFtcGxlRXhjZXNzRXhjaGFuZ2VFeGNpdGVFeGNsdWRlRXhjdXNlRXhlY3V0ZUV4ZXJjaXNlRXhoYXVzdEV4aGliaXRFeGlsZUV4aXN0RXhpdEV4b3RpY0V4cGFuZEV4cGVjdEV4cGlyZUV4cGxhaW5FeHBvc2VFeHByZXNzRXh0ZW5kRXh0cmFFeWVFeWVicm93RmFicmljRmFjZUZhY3VsdHlGYWRlRmFpbnRGYWl0aEZhbGxGYWxzZUZhbWVGYW1pbHlGYW1vdXNGYW5GYW5jeUZhbnRhc3lGYXJtRmFzaGlvbkZhdEZhdGFsRmF0aGVyRmF0aWd1ZUZhdWx0RmF2b3JpdGVGZWF0dXJlRmVicnVhcnlGZWRlcmFsRmVlRmVlZEZlZWxGZW1hbGVGZW5jZUZlc3RpdmFsRmV0Y2hGZXZlckZld0ZpYmVyRmljdGlvbkZpZWxkRmlndXJlRmlsZUZpbG1GaWx0ZXJGaW5hbEZpbmRGaW5lRmluZ2VyRmluaXNoRmlyZUZpcm1GaXJzdEZpc2NhbEZpc2hGaXRGaXRuZXNzRml4RmxhZ0ZsYW1lRmxhc2hGbGF0Rmxhdm9yRmxlZUZsaWdodEZsaXBGbG9hdEZsb2NrRmxvb3JGbG93ZXJGbHVpZEZsdXNoRmx5Rm9hbUZvY3VzRm9nRm9pbEZvbGRGb2xsb3dGb29kRm9vdEZvcmNlRm9yZXN0Rm9yZ2V0Rm9ya0ZvcnR1bmVGb3J1bUZvcndhcmRGb3NzaWxGb3N0ZXJGb3VuZEZveEZyYWdpbGVGcmFtZUZyZXF1ZW50RnJlc2hGcmllbmRGcmluZ2VGcm9nRnJvbnRGcm9zdEZyb3duRnJvemVuRnJ1aXRGdWVsRnVuRnVubnlGdXJuYWNlRnVyeUZ1dHVyZUdhZGdldEdhaW5HYWxheHlHYWxsZXJ5R2FtZUdhcEdhcmFnZUdhcmJhZ2VHYXJkZW5HYXJsaWNHYXJtZW50R2FzR2FzcEdhdGVHYXRoZXJHYXVnZUdhemVHZW5lcmFsR2VuaXVzR2VucmVHZW50bGVHZW51aW5lR2VzdHVyZUdob3N0R2lhbnRHaWZ0R2lnZ2xlR2luZ2VyR2lyYWZmZUdpcmxHaXZlR2xhZEdsYW5jZUdsYXJlR2xhc3NHbGlkZUdsaW1wc2VHbG9iZUdsb29tR2xvcnlHbG92ZUdsb3dHbHVlR29hdEdvZGRlc3NHb2xkR29vZEdvb3NlR29yaWxsYUdvc3BlbEdvc3NpcEdvdmVybkdvd25HcmFiR3JhY2VHcmFpbkdyYW50R3JhcGVHcmFzc0dyYXZpdHlHcmVhdEdyZWVuR3JpZEdyaWVmR3JpdEdyb2NlcnlHcm91cEdyb3dHcnVudEd1YXJkR3Vlc3NHdWlkZUd1aWx0R3VpdGFyR3VuR3ltSGFiaXRIYWlySGFsZkhhbW1lckhhbXN0ZXJIYW5kSGFwcHlIYXJib3JIYXJkSGFyc2hIYXJ2ZXN0SGF0SGF2ZUhhd2tIYXphcmRIZWFkSGVhbHRoSGVhcnRIZWF2eUhlZGdlaG9nSGVpZ2h0SGVsbG9IZWxtZXRIZWxwSGVuSGVyb0hpZGRlbkhpZ2hIaWxsSGludEhpcEhpcmVIaXN0b3J5SG9iYnlIb2NrZXlIb2xkSG9sZUhvbGlkYXlIb2xsb3dIb21lSG9uZXlIb29kSG9wZUhvcm5Ib3Jyb3JIb3JzZUhvc3BpdGFsSG9zdEhvdGVsSG91ckhvdmVySHViSHVnZUh1bWFuSHVtYmxlSHVtb3JIdW5kcmVkSHVuZ3J5SHVudEh1cmRsZUh1cnJ5SHVydEh1c2JhbmRIeWJyaWRJY2VJY29uSWRlYUlkZW50aWZ5SWRsZUlnbm9yZUlsbElsbGVnYWxJbGxuZXNzSW1hZ2VJbWl0YXRlSW1tZW5zZUltbXVuZUltcGFjdEltcG9zZUltcHJvdmVJbXB1bHNlSW5jaEluY2x1ZGVJbmNvbWVJbmNyZWFzZUluZGV4SW5kaWNhdGVJbmRvb3JJbmR1c3RyeUluZmFudEluZmxpY3RJbmZvcm1JbmhhbGVJbmhlcml0SW5pdGlhbEluamVjdEluanVyeUlubWF0ZUlubmVySW5ub2NlbnRJbnB1dElucXVpcnlJbnNhbmVJbnNlY3RJbnNpZGVJbnNwaXJlSW5zdGFsbEludGFjdEludGVyZXN0SW50b0ludmVzdEludml0ZUludm9sdmVJcm9uSXNsYW5kSXNvbGF0ZUlzc3VlSXRlbUl2b3J5SmFja2V0SmFndWFySmFySmF6ekplYWxvdXNKZWFuc0plbGx5SmV3ZWxKb2JKb2luSm9rZUpvdXJuZXlKb3lKdWRnZUp1aWNlSnVtcEp1bmdsZUp1bmlvckp1bmtKdXN0S2FuZ2Fyb29LZWVuS2VlcEtldGNodXBLZXlLaWNrS2lkS2lkbmV5S2luZEtpbmdkb21LaXNzS2l0S2l0Y2hlbktpdGVLaXR0ZW5LaXdpS25lZUtuaWZlS25vY2tLbm93TGFiTGFiZWxMYWJvckxhZGRlckxhZHlMYWtlTGFtcExhbmd1YWdlTGFwdG9wTGFyZ2VMYXRlckxhdGluTGF1Z2hMYXVuZHJ5TGF2YUxhd0xhd25MYXdzdWl0TGF5ZXJMYXp5TGVhZGVyTGVhZkxlYXJuTGVhdmVMZWN0dXJlTGVmdExlZ0xlZ2FsTGVnZW5kTGVpc3VyZUxlbW9uTGVuZExlbmd0aExlbnNMZW9wYXJkTGVzc29uTGV0dGVyTGV2ZWxMaWFyTGliZXJ0eUxpYnJhcnlMaWNlbnNlTGlmZUxpZnRMaWdodExpa2VMaW1iTGltaXRMaW5rTGlvbkxpcXVpZExpc3RMaXR0bGVMaXZlTGl6YXJkTG9hZExvYW5Mb2JzdGVyTG9jYWxMb2NrTG9naWNMb25lbHlMb25nTG9vcExvdHRlcnlMb3VkTG91bmdlTG92ZUxveWFsTHVja3lMdWdnYWdlTHVtYmVyTHVuYXJMdW5jaEx1eHVyeUx5cmljc01hY2hpbmVNYWRNYWdpY01hZ25ldE1haWRNYWlsTWFpbk1ham9yTWFrZU1hbW1hbE1hbk1hbmFnZU1hbmRhdGVNYW5nb01hbnNpb25NYW51YWxNYXBsZU1hcmJsZU1hcmNoTWFyZ2luTWFyaW5lTWFya2V0TWFycmlhZ2VNYXNrTWFzc01hc3Rlck1hdGNoTWF0ZXJpYWxNYXRoTWF0cml4TWF0dGVyTWF4aW11bU1hemVNZWFkb3dNZWFuTWVhc3VyZU1lYXRNZWNoYW5pY01lZGFsTWVkaWFNZWxvZHlNZWx0TWVtYmVyTWVtb3J5TWVudGlvbk1lbnVNZXJjeU1lcmdlTWVyaXRNZXJyeU1lc2hNZXNzYWdlTWV0YWxNZXRob2RNaWRkbGVNaWRuaWdodE1pbGtNaWxsaW9uTWltaWNNaW5kTWluaW11bU1pbm9yTWludXRlTWlyYWNsZU1pcnJvck1pc2VyeU1pc3NNaXN0YWtlTWl4TWl4ZWRNaXh0dXJlTW9iaWxlTW9kZWxNb2RpZnlNb21Nb21lbnRNb25pdG9yTW9ua2V5TW9uc3Rlck1vbnRoTW9vbk1vcmFsTW9yZU1vcm5pbmdNb3NxdWl0b01vdGhlck1vdGlvbk1vdG9yTW91bnRhaW5Nb3VzZU1vdmVNb3ZpZU11Y2hNdWZmaW5NdWxlTXVsdGlwbHlNdXNjbGVNdXNldW1NdXNocm9vbU11c2ljTXVzdE11dHVhbE15c2VsZk15c3RlcnlNeXRoTmFpdmVOYW1lTmFwa2luTmFycm93TmFzdHlOYXRpb25OYXR1cmVOZWFyTmVja05lZWROZWdhdGl2ZU5lZ2xlY3ROZWl0aGVyTmVwaGV3TmVydmVOZXN0TmV0TmV0d29ya05ldXRyYWxOZXZlck5ld3NOZXh0TmljZU5pZ2h0Tm9ibGVOb2lzZU5vbWluZWVOb29kbGVOb3JtYWxOb3J0aE5vc2VOb3RhYmxlTm90ZU5vdGhpbmdOb3RpY2VOb3ZlbE5vd051Y2xlYXJOdW1iZXJOdXJzZU51dE9ha09iZXlPYmplY3RPYmxpZ2VPYnNjdXJlT2JzZXJ2ZU9idGFpbk9idmlvdXNPY2N1ck9jZWFuT2N0b2Jlck9kb3JPZmZPZmZlck9mZmljZU9mdGVuT2lsT2theU9sZE9saXZlT2x5bXBpY09taXRPbmNlT25lT25pb25PbmxpbmVPbmx5T3Blbk9wZXJhT3Bpbmlvbk9wcG9zZU9wdGlvbk9yYW5nZU9yYml0T3JjaGFyZE9yZGVyT3JkaW5hcnlPcmdhbk9yaWVudE9yaWdpbmFsT3JwaGFuT3N0cmljaE90aGVyT3V0ZG9vck91dGVyT3V0cHV0T3V0c2lkZU92YWxPdmVuT3Zlck93bk93bmVyT3h5Z2VuT3lzdGVyT3pvbmVQYWN0UGFkZGxlUGFnZVBhaXJQYWxhY2VQYWxtUGFuZGFQYW5lbFBhbmljUGFudGhlclBhcGVyUGFyYWRlUGFyZW50UGFya1BhcnJvdFBhcnR5UGFzc1BhdGNoUGF0aFBhdGllbnRQYXRyb2xQYXR0ZXJuUGF1c2VQYXZlUGF5bWVudFBlYWNlUGVhbnV0UGVhclBlYXNhbnRQZWxpY2FuUGVuUGVuYWx0eVBlbmNpbFBlb3BsZVBlcHBlclBlcmZlY3RQZXJtaXRQZXJzb25QZXRQaG9uZVBob3RvUGhyYXNlUGh5c2ljYWxQaWFub1BpY25pY1BpY3R1cmVQaWVjZVBpZ1BpZ2VvblBpbGxQaWxvdFBpbmtQaW9uZWVyUGlwZVBpc3RvbFBpdGNoUGl6emFQbGFjZVBsYW5ldFBsYXN0aWNQbGF0ZVBsYXlQbGVhc2VQbGVkZ2VQbHVja1BsdWdQbHVuZ2VQb2VtUG9ldFBvaW50UG9sYXJQb2xlUG9saWNlUG9uZFBvbnlQb29sUG9wdWxhclBvcnRpb25Qb3NpdGlvblBvc3NpYmxlUG9zdFBvdGF0b1BvdHRlcnlQb3ZlcnR5UG93ZGVyUG93ZXJQcmFjdGljZVByYWlzZVByZWRpY3RQcmVmZXJQcmVwYXJlUHJlc2VudFByZXR0eVByZXZlbnRQcmljZVByaWRlUHJpbWFyeVByaW50UHJpb3JpdHlQcmlzb25Qcml2YXRlUHJpemVQcm9ibGVtUHJvY2Vzc1Byb2R1Y2VQcm9maXRQcm9ncmFtUHJvamVjdFByb21vdGVQcm9vZlByb3BlcnR5UHJvc3BlclByb3RlY3RQcm91ZFByb3ZpZGVQdWJsaWNQdWRkaW5nUHVsbFB1bHBQdWxzZVB1bXBraW5QdW5jaFB1cGlsUHVwcHlQdXJjaGFzZVB1cml0eVB1cnBvc2VQdXJzZVB1c2hQdXRQdXp6bGVQeXJhbWlkUXVhbGl0eVF1YW50dW1RdWFydGVyUXVlc3Rpb25RdWlja1F1aXRRdWl6UXVvdGVSYWJiaXRSYWNjb29uUmFjZVJhY2tSYWRhclJhZGlvUmFpbFJhaW5SYWlzZVJhbGx5UmFtcFJhbmNoUmFuZG9tUmFuZ2VSYXBpZFJhcmVSYXRlUmF0aGVyUmF2ZW5SYXdSYXpvclJlYWR5UmVhbFJlYXNvblJlYmVsUmVidWlsZFJlY2FsbFJlY2VpdmVSZWNpcGVSZWNvcmRSZWN5Y2xlUmVkdWNlUmVmbGVjdFJlZm9ybVJlZnVzZVJlZ2lvblJlZ3JldFJlZ3VsYXJSZWplY3RSZWxheFJlbGVhc2VSZWxpZWZSZWx5UmVtYWluUmVtZW1iZXJSZW1pbmRSZW1vdmVSZW5kZXJSZW5ld1JlbnRSZW9wZW5SZXBhaXJSZXBlYXRSZXBsYWNlUmVwb3J0UmVxdWlyZVJlc2N1ZVJlc2VtYmxlUmVzaXN0UmVzb3VyY2VSZXNwb25zZVJlc3VsdFJldGlyZVJldHJlYXRSZXR1cm5SZXVuaW9uUmV2ZWFsUmV2aWV3UmV3YXJkUmh5dGhtUmliUmliYm9uUmljZVJpY2hSaWRlUmlkZ2VSaWZsZVJpZ2h0UmlnaWRSaW5nUmlvdFJpcHBsZVJpc2tSaXR1YWxSaXZhbFJpdmVyUm9hZFJvYXN0Um9ib3RSb2J1c3RSb2NrZXRSb21hbmNlUm9vZlJvb2tpZVJvb21Sb3NlUm90YXRlUm91Z2hSb3VuZFJvdXRlUm95YWxSdWJiZXJSdWRlUnVnUnVsZVJ1blJ1bndheVJ1cmFsU2FkU2FkZGxlU2FkbmVzc1NhZmVTYWlsU2FsYWRTYWxtb25TYWxvblNhbHRTYWx1dGVTYW1lU2FtcGxlU2FuZFNhdGlzZnlTYXRvc2hpU2F1Y2VTYXVzYWdlU2F2ZVNheVNjYWxlU2NhblNjYXJlU2NhdHRlclNjZW5lU2NoZW1lU2Nob29sU2NpZW5jZVNjaXNzb3JzU2NvcnBpb25TY291dFNjcmFwU2NyZWVuU2NyaXB0U2NydWJTZWFTZWFyY2hTZWFzb25TZWF0U2Vjb25kU2VjcmV0U2VjdGlvblNlY3VyaXR5U2VlZFNlZWtTZWdtZW50U2VsZWN0U2VsbFNlbWluYXJTZW5pb3JTZW5zZVNlbnRlbmNlU2VyaWVzU2VydmljZVNlc3Npb25TZXR0bGVTZXR1cFNldmVuU2hhZG93U2hhZnRTaGFsbG93U2hhcmVTaGVkU2hlbGxTaGVyaWZmU2hpZWxkU2hpZnRTaGluZVNoaXBTaGl2ZXJTaG9ja1Nob2VTaG9vdFNob3BTaG9ydFNob3VsZGVyU2hvdmVTaHJpbXBTaHJ1Z1NodWZmbGVTaHlTaWJsaW5nU2lja1NpZGVTaWVnZVNpZ2h0U2lnblNpbGVudFNpbGtTaWxseVNpbHZlclNpbWlsYXJTaW1wbGVTaW5jZVNpbmdTaXJlblNpc3RlclNpdHVhdGVTaXhTaXplU2thdGVTa2V0Y2hTa2lTa2lsbFNraW5Ta2lydFNrdWxsU2xhYlNsYW1TbGVlcFNsZW5kZXJTbGljZVNsaWRlU2xpZ2h0U2xpbVNsb2dhblNsb3RTbG93U2x1c2hTbWFsbFNtYXJ0U21pbGVTbW9rZVNtb290aFNuYWNrU25ha2VTbmFwU25pZmZTbm93U29hcFNvY2NlclNvY2lhbFNvY2tTb2RhU29mdFNvbGFyU29sZGllclNvbGlkU29sdXRpb25Tb2x2ZVNvbWVvbmVTb25nU29vblNvcnJ5U29ydFNvdWxTb3VuZFNvdXBTb3VyY2VTb3V0aFNwYWNlU3BhcmVTcGF0aWFsU3Bhd25TcGVha1NwZWNpYWxTcGVlZFNwZWxsU3BlbmRTcGhlcmVTcGljZVNwaWRlclNwaWtlU3BpblNwaXJpdFNwbGl0U3BvaWxTcG9uc29yU3Bvb25TcG9ydFNwb3RTcHJheVNwcmVhZFNwcmluZ1NweVNxdWFyZVNxdWVlemVTcXVpcnJlbFN0YWJsZVN0YWRpdW1TdGFmZlN0YWdlU3RhaXJzU3RhbXBTdGFuZFN0YXJ0U3RhdGVTdGF5U3RlYWtTdGVlbFN0ZW1TdGVwU3RlcmVvU3RpY2tTdGlsbFN0aW5nU3RvY2tTdG9tYWNoU3RvbmVTdG9vbFN0b3J5U3RvdmVTdHJhdGVneVN0cmVldFN0cmlrZVN0cm9uZ1N0cnVnZ2xlU3R1ZGVudFN0dWZmU3R1bWJsZVN0eWxlU3ViamVjdFN1Ym1pdFN1YndheVN1Y2Nlc3NTdWNoU3VkZGVuU3VmZmVyU3VnYXJTdWdnZXN0U3VpdFN1bW1lclN1blN1bm55U3Vuc2V0U3VwZXJTdXBwbHlTdXByZW1lU3VyZVN1cmZhY2VTdXJnZVN1cnByaXNlU3Vycm91bmRTdXJ2ZXlTdXNwZWN0U3VzdGFpblN3YWxsb3dTd2FtcFN3YXBTd2FybVN3ZWFyU3dlZXRTd2lmdFN3aW1Td2luZ1N3aXRjaFN3b3JkU3ltYm9sU3ltcHRvbVN5cnVwU3lzdGVtVGFibGVUYWNrbGVUYWdUYWlsVGFsZW50VGFsa1RhbmtUYXBlVGFyZ2V0VGFza1Rhc3RlVGF0dG9vVGF4aVRlYWNoVGVhbVRlbGxUZW5UZW5hbnRUZW5uaXNUZW50VGVybVRlc3RUZXh0VGhhbmtUaGF0VGhlbWVUaGVuVGhlb3J5VGhlcmVUaGV5VGhpbmdUaGlzVGhvdWdodFRocmVlVGhyaXZlVGhyb3dUaHVtYlRodW5kZXJUaWNrZXRUaWRlVGlnZXJUaWx0VGltYmVyVGltZVRpbnlUaXBUaXJlZFRpc3N1ZVRpdGxlVG9hc3RUb2JhY2NvVG9kYXlUb2RkbGVyVG9lVG9nZXRoZXJUb2lsZXRUb2tlblRvbWF0b1RvbW9ycm93VG9uZVRvbmd1ZVRvbmlnaHRUb29sVG9vdGhUb3BUb3BpY1RvcHBsZVRvcmNoVG9ybmFkb1RvcnRvaXNlVG9zc1RvdGFsVG91cmlzdFRvd2FyZFRvd2VyVG93blRveVRyYWNrVHJhZGVUcmFmZmljVHJhZ2ljVHJhaW5UcmFuc2ZlclRyYXBUcmFzaFRyYXZlbFRyYXlUcmVhdFRyZWVUcmVuZFRyaWFsVHJpYmVUcmlja1RyaWdnZXJUcmltVHJpcFRyb3BoeVRyb3VibGVUcnVja1RydWVUcnVseVRydW1wZXRUcnVzdFRydXRoVHJ5VHViZVR1aXRpb25UdW1ibGVUdW5hVHVubmVsVHVya2V5VHVyblR1cnRsZVR3ZWx2ZVR3ZW50eVR3aWNlVHdpblR3aXN0VHdvVHlwZVR5cGljYWxVZ2x5VW1icmVsbGFVbmFibGVVbmF3YXJlVW5jbGVVbmNvdmVyVW5kZXJVbmRvVW5mYWlyVW5mb2xkVW5oYXBweVVuaWZvcm1VbmlxdWVVbml0VW5pdmVyc2VVbmtub3duVW5sb2NrVW50aWxVbnVzdWFsVW52ZWlsVXBkYXRlVXBncmFkZVVwaG9sZFVwb25VcHBlclVwc2V0VXJiYW5VcmdlVXNhZ2VVc2VVc2VkVXNlZnVsVXNlbGVzc1VzdWFsVXRpbGl0eVZhY2FudFZhY3V1bVZhZ3VlVmFsaWRWYWxsZXlWYWx2ZVZhblZhbmlzaFZhcG9yVmFyaW91c1Zhc3RWYXVsdFZlaGljbGVWZWx2ZXRWZW5kb3JWZW50dXJlVmVudWVWZXJiVmVyaWZ5VmVyc2lvblZlcnlWZXNzZWxWZXRlcmFuVmlhYmxlVmlicmFudFZpY2lvdXNWaWN0b3J5VmlkZW9WaWV3VmlsbGFnZVZpbnRhZ2VWaW9saW5WaXJ0dWFsVmlydXNWaXNhVmlzaXRWaXN1YWxWaXRhbFZpdmlkVm9jYWxWb2ljZVZvaWRWb2xjYW5vVm9sdW1lVm90ZVZveWFnZVdhZ2VXYWdvbldhaXRXYWxrV2FsbFdhbG51dFdhbnRXYXJmYXJlV2FybVdhcnJpb3JXYXNoV2FzcFdhc3RlV2F0ZXJXYXZlV2F5V2VhbHRoV2VhcG9uV2VhcldlYXNlbFdlYXRoZXJXZWJXZWRkaW5nV2Vla2VuZFdlaXJkV2VsY29tZVdlc3RXZXRXaGFsZVdoYXRXaGVhdFdoZWVsV2hlbldoZXJlV2hpcFdoaXNwZXJXaWRlV2lkdGhXaWZlV2lsZFdpbGxXaW5XaW5kb3dXaW5lV2luZ1dpbmtXaW5uZXJXaW50ZXJXaXJlV2lzZG9tV2lzZVdpc2hXaXRuZXNzV29sZldvbWFuV29uZGVyV29vZFdvb2xXb3JkV29ya1dvcmxkV29ycnlXb3J0aFdyYXBXcmVja1dyZXN0bGVXcmlzdFdyaXRlV3JvbmdZYXJkWWVhclllbGxvd1lvdVlvdW5nWW91dGhaZWJyYVplcm9ab25lWm9vXCI7XG5cbmxldCB3b3JkbGlzdDogQXJyYXk8c3RyaW5nPiA9IG51bGw7XG5cblxuZnVuY3Rpb24gbG9hZFdvcmRzKGxhbmc6IFdvcmRsaXN0KTogdm9pZCB7XG4gICAgaWYgKHdvcmRsaXN0ICE9IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgd29yZGxpc3QgPSB3b3Jkcy5yZXBsYWNlKC8oW0EtWl0pL2csIFwiICQxXCIpLnRvTG93ZXJDYXNlKCkuc3Vic3RyaW5nKDEpLnNwbGl0KFwiIFwiKTtcblxuICAgIC8vIFZlcmlmeSB0aGUgY29tcHV0ZWQgbGlzdCBtYXRjaGVzIHRoZSBvZmZpY2lhbCBsaXN0XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKFdvcmRsaXN0LmNoZWNrKGxhbmcpICE9PSBcIjB4M2M4YWNjMWU3YjA4ZDhlNzZmOWZkYTAxNWVmNDhkYzhjNzEwYTczY2I3ZTBmNzdiMmMxOGE5YjVhN2FkZGU2MFwiKSB7XG4gICAgICAgIHdvcmRsaXN0ID0gbnVsbDtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQklQMzkgV29yZGxpc3QgZm9yIGVuIChFbmdsaXNoKSBGQUlMRURcIik7XG4gICAgfVxufVxuXG5jbGFzcyBMYW5nRW4gZXh0ZW5kcyBXb3JkbGlzdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKFwiZW5cIik7XG4gICAgfVxuXG4gICAgZ2V0V29yZChpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgbG9hZFdvcmRzKHRoaXMpO1xuICAgICAgICByZXR1cm4gd29yZGxpc3RbaW5kZXhdO1xuICAgIH1cblxuICAgIGdldFdvcmRJbmRleCh3b3JkOiBzdHJpbmcpOiBudW1iZXIge1xuICAgICAgICBsb2FkV29yZHModGhpcyk7XG4gICAgICAgIHJldHVybiB3b3JkbGlzdC5pbmRleE9mKHdvcmQpO1xuICAgIH1cbn1cblxuY29uc3QgbGFuZ0VuID0gbmV3IExhbmdFbigpO1xuV29yZGxpc3QucmVnaXN0ZXIobGFuZ0VuKTtcblxuZXhwb3J0IHsgbGFuZ0VuIH07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gV29yZGxpc3RzXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAwMzkvYmlwLTAwMzktd29yZGxpc3RzLm1kXG5cbi8vIEJyb3dzZXI7IG9ubHkgaW5jbHVkZSBFbmdsaXNoIGJ5IGRlZmF1bHRcblxuaW1wb3J0IHsgV29yZGxpc3QgfSBmcm9tIFwiLi93b3JkbGlzdFwiO1xuXG5pbXBvcnQgeyBsYW5nRW4gYXMgZW4gfSBmcm9tIFwiLi9sYW5nLWVuXCI7XG5cbmV4cG9ydCBjb25zdCB3b3JkbGlzdHM6IHsgWyBsb2NhbGU6IHN0cmluZyBdOiBXb3JkbGlzdCB9ID0ge1xuICBlbjogZW5cbn1cbiIsImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJoZG5vZGUvNS43LjBcIjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAwMzIubWVkaWF3aWtpXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAwMzkubWVkaWF3aWtpXG5cblxuaW1wb3J0IHsgRXh0ZXJuYWxseU93bmVkQWNjb3VudCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1zaWduZXJcIjtcbmltcG9ydCB7IEJhc2U1OCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iYXNleFwiO1xuaW1wb3J0IHsgYXJyYXlpZnksIEJ5dGVzTGlrZSwgY29uY2F0LCBoZXhEYXRhU2xpY2UsIGhleFplcm9QYWQsIGhleGxpZnkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iaWdudW1iZXJcIjtcbmltcG9ydCB7IHRvVXRmOEJ5dGVzLCBVbmljb2RlTm9ybWFsaXphdGlvbkZvcm0gfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvc3RyaW5nc1wiO1xuaW1wb3J0IHsgcGJrZGYyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Bia2RmMlwiO1xuaW1wb3J0IHsgZGVmaW5lUmVhZE9ubHkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiO1xuaW1wb3J0IHsgU2lnbmluZ0tleSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9zaWduaW5nLWtleVwiO1xuaW1wb3J0IHsgY29tcHV0ZUhtYWMsIHJpcGVtZDE2MCwgc2hhMjU2LCBTdXBwb3J0ZWRBbGdvcml0aG0gfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvc2hhMlwiO1xuaW1wb3J0IHsgY29tcHV0ZUFkZHJlc3MgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvdHJhbnNhY3Rpb25zXCI7XG5pbXBvcnQgeyBXb3JkbGlzdCwgd29yZGxpc3RzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3dvcmRsaXN0c1wiO1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5cbmNvbnN0IE4gPSBCaWdOdW1iZXIuZnJvbShcIjB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmViYWFlZGNlNmFmNDhhMDNiYmZkMjVlOGNkMDM2NDE0MVwiKTtcblxuXG4vLyBcIkJpdGNvaW4gc2VlZFwiXG5jb25zdCBNYXN0ZXJTZWNyZXQgPSB0b1V0ZjhCeXRlcyhcIkJpdGNvaW4gc2VlZFwiKTtcblxuY29uc3QgSGFyZGVuZWRCaXQgPSAweDgwMDAwMDAwO1xuXG4vLyBSZXR1cm5zIGEgYnl0ZSB3aXRoIHRoZSBNU0IgYml0cyBzZXRcbmZ1bmN0aW9uIGdldFVwcGVyTWFzayhiaXRzOiBudW1iZXIpOiBudW1iZXIge1xuICAgcmV0dXJuICgoMSA8PCBiaXRzKSAtIDEpIDw8ICg4IC0gYml0cyk7XG59XG5cbi8vIFJldHVybnMgYSBieXRlIHdpdGggdGhlIExTQiBiaXRzIHNldFxuZnVuY3Rpb24gZ2V0TG93ZXJNYXNrKGJpdHM6IG51bWJlcik6IG51bWJlciB7XG4gICByZXR1cm4gKDEgPDwgYml0cykgLSAxO1xufVxuXG5mdW5jdGlvbiBieXRlczMyKHZhbHVlOiBCaWdOdW1iZXIgfCBVaW50OEFycmF5KTogc3RyaW5nIHtcbiAgICByZXR1cm4gaGV4WmVyb1BhZChoZXhsaWZ5KHZhbHVlKSwgMzIpO1xufVxuXG5mdW5jdGlvbiBiYXNlNThjaGVjayhkYXRhOiBVaW50OEFycmF5KTogc3RyaW5nIHtcbiAgICByZXR1cm4gQmFzZTU4LmVuY29kZShjb25jYXQoWyBkYXRhLCBoZXhEYXRhU2xpY2Uoc2hhMjU2KHNoYTI1NihkYXRhKSksIDAsIDQpIF0pKTtcbn1cblxuZnVuY3Rpb24gZ2V0V29yZGxpc3Qod29yZGxpc3Q6IHN0cmluZyB8IFdvcmRsaXN0KTogV29yZGxpc3Qge1xuICAgIGlmICh3b3JkbGlzdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB3b3JkbGlzdHNbXCJlblwiXTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mKHdvcmRsaXN0KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCB3b3JkcyA9IHdvcmRsaXN0c1t3b3JkbGlzdF07XG4gICAgICAgIGlmICh3b3JkcyA9PSBudWxsKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidW5rbm93biBsb2NhbGVcIiwgXCJ3b3JkbGlzdFwiLCB3b3JkbGlzdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdvcmRzO1xuICAgIH1cblxuICAgIHJldHVybiB3b3JkbGlzdDtcbn1cblxuY29uc3QgX2NvbnN0cnVjdG9yR3VhcmQ6IGFueSA9IHt9O1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdFBhdGggPSBcIm0vNDQnLzYwJy8wJy8wLzBcIjtcblxuZXhwb3J0IGludGVyZmFjZSBNbmVtb25pYyB7XG4gICAgcmVhZG9ubHkgcGhyYXNlOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgcGF0aDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGxvY2FsZTogc3RyaW5nO1xufTtcblxuZXhwb3J0IGNsYXNzIEhETm9kZSBpbXBsZW1lbnRzIEV4dGVybmFsbHlPd25lZEFjY291bnQge1xuICAgIHJlYWRvbmx5IHByaXZhdGVLZXk6IHN0cmluZztcbiAgICByZWFkb25seSBwdWJsaWNLZXk6IHN0cmluZztcblxuICAgIHJlYWRvbmx5IGZpbmdlcnByaW50OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgcGFyZW50RmluZ2VycHJpbnQ6IHN0cmluZztcblxuICAgIHJlYWRvbmx5IGFkZHJlc3M6IHN0cmluZztcblxuICAgIHJlYWRvbmx5IG1uZW1vbmljPzogTW5lbW9uaWM7XG4gICAgcmVhZG9ubHkgcGF0aDogc3RyaW5nO1xuXG4gICAgcmVhZG9ubHkgY2hhaW5Db2RlOiBzdHJpbmc7XG5cbiAgICByZWFkb25seSBpbmRleDogbnVtYmVyO1xuICAgIHJlYWRvbmx5IGRlcHRoOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiAgVGhpcyBjb25zdHJ1Y3RvciBzaG91bGQgbm90IGJlIGNhbGxlZCBkaXJlY3RseS5cbiAgICAgKlxuICAgICAqICBQbGVhc2UgdXNlOlxuICAgICAqICAgLSBmcm9tTW5lbW9uaWNcbiAgICAgKiAgIC0gZnJvbVNlZWRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25zdHJ1Y3Rvckd1YXJkOiBhbnksIHByaXZhdGVLZXk6IHN0cmluZywgcHVibGljS2V5OiBzdHJpbmcsIHBhcmVudEZpbmdlcnByaW50OiBzdHJpbmcsIGNoYWluQ29kZTogc3RyaW5nLCBpbmRleDogbnVtYmVyLCBkZXB0aDogbnVtYmVyLCBtbmVtb25pY09yUGF0aDogTW5lbW9uaWMgfCBzdHJpbmcpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChjb25zdHJ1Y3Rvckd1YXJkICE9PSBfY29uc3RydWN0b3JHdWFyZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSEROb2RlIGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgZGlyZWN0bHlcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJpdmF0ZUtleSkge1xuICAgICAgICAgICAgY29uc3Qgc2lnbmluZ0tleSA9IG5ldyBTaWduaW5nS2V5KHByaXZhdGVLZXkpO1xuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJwcml2YXRlS2V5XCIsIHNpZ25pbmdLZXkucHJpdmF0ZUtleSk7XG4gICAgICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcInB1YmxpY0tleVwiLCBzaWduaW5nS2V5LmNvbXByZXNzZWRQdWJsaWNLZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJwcml2YXRlS2V5XCIsIG51bGwpO1xuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJwdWJsaWNLZXlcIiwgaGV4bGlmeShwdWJsaWNLZXkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwicGFyZW50RmluZ2VycHJpbnRcIiwgcGFyZW50RmluZ2VycHJpbnQpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImZpbmdlcnByaW50XCIsIGhleERhdGFTbGljZShyaXBlbWQxNjAoc2hhMjU2KHRoaXMucHVibGljS2V5KSksIDAsIDQpKTtcblxuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImFkZHJlc3NcIiwgY29tcHV0ZUFkZHJlc3ModGhpcy5wdWJsaWNLZXkpKTtcblxuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImNoYWluQ29kZVwiLCBjaGFpbkNvZGUpO1xuXG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiaW5kZXhcIiwgaW5kZXgpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImRlcHRoXCIsIGRlcHRoKTtcblxuICAgICAgICBpZiAobW5lbW9uaWNPclBhdGggPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gRnJvbSBhIHNvdXJjZSB0aGF0IGRvZXMgbm90IHByZXNlcnZlIHRoZSBwYXRoIChlLmcuIGV4dGVuZGVkIGtleXMpXG4gICAgICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIm1uZW1vbmljXCIsIG51bGwpO1xuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJwYXRoXCIsIG51bGwpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mKG1uZW1vbmljT3JQYXRoKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgLy8gRnJvbSBhIHNvdXJjZSB0aGF0IGRvZXMgbm90IHByZXNlcnZlIHRoZSBtbmVtb25pYyAoZS5nLiBuZXV0ZXJlZClcbiAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwibW5lbW9uaWNcIiwgbnVsbCk7XG4gICAgICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcInBhdGhcIiwgbW5lbW9uaWNPclBhdGgpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBGcm9tIGEgZnVsbHkgcXVhbGlmaWVkIHNvdXJjZVxuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJtbmVtb25pY1wiLCBtbmVtb25pY09yUGF0aCk7XG4gICAgICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcInBhdGhcIiwgbW5lbW9uaWNPclBhdGgucGF0aCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgZXh0ZW5kZWRLZXkoKTogc3RyaW5nIHtcbiAgICAgICAgLy8gV2Ugb25seSBzdXBwb3J0IHRoZSBtYWlubmV0IHZhbHVlcyBmb3Igbm93LCBidXQgaWYgYW55b25lIG5lZWRzXG4gICAgICAgIC8vIHRlc3RuZXQgdmFsdWVzLCBsZXQgbWUga25vdy4gSSBiZWxpZXZlIGN1cnJlbnQgc2VudGltZW50IGlzIHRoYXRcbiAgICAgICAgLy8gd2Ugc2hvdWxkIGFsd2F5cyB1c2UgbWFpbm5ldCwgYW5kIHVzZSBCSVAtNDQgdG8gZGVyaXZlIHRoZSBuZXR3b3JrXG4gICAgICAgIC8vICAgLSBNYWlubmV0OiBwdWJsaWM9MHgwNDg4QjIxRSwgcHJpdmF0ZT0weDA0ODhBREU0XG4gICAgICAgIC8vICAgLSBUZXN0bmV0OiBwdWJsaWM9MHgwNDM1ODdDRiwgcHJpdmF0ZT0weDA0MzU4Mzk0XG5cbiAgICAgICAgaWYgKHRoaXMuZGVwdGggPj0gMjU2KSB7IHRocm93IG5ldyBFcnJvcihcIkRlcHRoIHRvbyBsYXJnZSFcIik7IH1cblxuICAgICAgICByZXR1cm4gYmFzZTU4Y2hlY2soY29uY2F0KFtcbiAgICAgICAgICAgICgodGhpcy5wcml2YXRlS2V5ICE9IG51bGwpID8gXCIweDA0ODhBREU0XCI6IFwiMHgwNDg4QjIxRVwiKSxcbiAgICAgICAgICAgIGhleGxpZnkodGhpcy5kZXB0aCksXG4gICAgICAgICAgICB0aGlzLnBhcmVudEZpbmdlcnByaW50LFxuICAgICAgICAgICAgaGV4WmVyb1BhZChoZXhsaWZ5KHRoaXMuaW5kZXgpLCA0KSxcbiAgICAgICAgICAgIHRoaXMuY2hhaW5Db2RlLFxuICAgICAgICAgICAgKCh0aGlzLnByaXZhdGVLZXkgIT0gbnVsbCkgPyBjb25jYXQoWyBcIjB4MDBcIiwgdGhpcy5wcml2YXRlS2V5IF0pOiB0aGlzLnB1YmxpY0tleSksXG4gICAgICAgIF0pKTtcbiAgICB9XG5cbiAgICBuZXV0ZXIoKTogSEROb2RlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIRE5vZGUoX2NvbnN0cnVjdG9yR3VhcmQsIG51bGwsIHRoaXMucHVibGljS2V5LCB0aGlzLnBhcmVudEZpbmdlcnByaW50LCB0aGlzLmNoYWluQ29kZSwgdGhpcy5pbmRleCwgdGhpcy5kZXB0aCwgdGhpcy5wYXRoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9kZXJpdmUoaW5kZXg6IG51bWJlcik6IEhETm9kZSB7XG4gICAgICAgIGlmIChpbmRleCA+IDB4ZmZmZmZmZmYpIHsgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBpbmRleCAtIFwiICsgU3RyaW5nKGluZGV4KSk7IH1cblxuICAgICAgICAvLyBCYXNlIHBhdGhcbiAgICAgICAgbGV0IHBhdGggPSB0aGlzLnBhdGg7XG4gICAgICAgIGlmIChwYXRoKSB7IHBhdGggKz0gXCIvXCIgKyAoaW5kZXggJiB+SGFyZGVuZWRCaXQpOyB9XG5cbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KDM3KTtcblxuICAgICAgICBpZiAoaW5kZXggJiBIYXJkZW5lZEJpdCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnByaXZhdGVLZXkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgZGVyaXZlIGNoaWxkIG9mIG5ldXRlcmVkIG5vZGVcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERhdGEgPSAweDAwIHx8IHNlcl8yNTYoa19wYXIpXG4gICAgICAgICAgICBkYXRhLnNldChhcnJheWlmeSh0aGlzLnByaXZhdGVLZXkpLCAxKTtcblxuICAgICAgICAgICAgLy8gSGFyZGVuZWQgcGF0aFxuICAgICAgICAgICAgaWYgKHBhdGgpIHsgcGF0aCArPSBcIidcIjsgfVxuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBEYXRhID0gc2VyX3AocG9pbnQoa19wYXIpKVxuICAgICAgICAgICAgZGF0YS5zZXQoYXJyYXlpZnkodGhpcy5wdWJsaWNLZXkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERhdGEgKz0gc2VyXzMyKGkpXG4gICAgICAgIGZvciAobGV0IGkgPSAyNDsgaSA+PSAwOyBpIC09IDgpIHsgZGF0YVszMyArIChpID4+IDMpXSA9ICgoaW5kZXggPj4gKDI0IC0gaSkpICYgMHhmZik7IH1cblxuICAgICAgICBjb25zdCBJID0gYXJyYXlpZnkoY29tcHV0ZUhtYWMoU3VwcG9ydGVkQWxnb3JpdGhtLnNoYTUxMiwgdGhpcy5jaGFpbkNvZGUsIGRhdGEpKTtcbiAgICAgICAgY29uc3QgSUwgPSBJLnNsaWNlKDAsIDMyKTtcbiAgICAgICAgY29uc3QgSVIgPSBJLnNsaWNlKDMyKTtcblxuICAgICAgICAvLyBUaGUgcHJpdmF0ZSBrZXlcbiAgICAgICAgbGV0IGtpOiBzdHJpbmcgPSBudWxsXG5cbiAgICAgICAgLy8gVGhlIHB1YmxpYyBrZXlcbiAgICAgICAgbGV0IEtpOiBzdHJpbmcgPSBudWxsO1xuXG4gICAgICAgIGlmICh0aGlzLnByaXZhdGVLZXkpIHtcbiAgICAgICAgICAgIGtpID0gYnl0ZXMzMihCaWdOdW1iZXIuZnJvbShJTCkuYWRkKHRoaXMucHJpdmF0ZUtleSkubW9kKE4pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGVrID0gbmV3IFNpZ25pbmdLZXkoaGV4bGlmeShJTCkpO1xuICAgICAgICAgICAgS2kgPSBlay5fYWRkUG9pbnQodGhpcy5wdWJsaWNLZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG1uZW1vbmljT3JQYXRoOiBNbmVtb25pYyB8IHN0cmluZyA9IHBhdGg7XG5cbiAgICAgICAgY29uc3Qgc3JjTW5lbW9uaWMgPSAgdGhpcy5tbmVtb25pYztcbiAgICAgICAgaWYgKHNyY01uZW1vbmljKSB7XG4gICAgICAgICAgICBtbmVtb25pY09yUGF0aCA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICAgICAgICAgIHBocmFzZTogc3JjTW5lbW9uaWMucGhyYXNlLFxuICAgICAgICAgICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAgICAgICAgICAgbG9jYWxlOiAoc3JjTW5lbW9uaWMubG9jYWxlIHx8IFwiZW5cIilcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBIRE5vZGUoX2NvbnN0cnVjdG9yR3VhcmQsIGtpLCBLaSwgdGhpcy5maW5nZXJwcmludCwgYnl0ZXMzMihJUiksIGluZGV4LCB0aGlzLmRlcHRoICsgMSwgbW5lbW9uaWNPclBhdGgpO1xuICAgIH1cblxuICAgIGRlcml2ZVBhdGgocGF0aDogc3RyaW5nKTogSEROb2RlIHtcbiAgICAgICAgY29uc3QgY29tcG9uZW50cyA9IHBhdGguc3BsaXQoXCIvXCIpO1xuXG4gICAgICAgIGlmIChjb21wb25lbnRzLmxlbmd0aCA9PT0gMCB8fCAoY29tcG9uZW50c1swXSA9PT0gXCJtXCIgJiYgdGhpcy5kZXB0aCAhPT0gMCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgcGF0aCAtIFwiICsgcGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29tcG9uZW50c1swXSA9PT0gXCJtXCIpIHsgY29tcG9uZW50cy5zaGlmdCgpOyB9XG5cbiAgICAgICAgbGV0IHJlc3VsdDogSEROb2RlID0gdGhpcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb21wb25lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBjb21wb25lbnRzW2ldO1xuICAgICAgICAgICAgaWYgKGNvbXBvbmVudC5tYXRjaCgvXlswLTldKyckLykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KGNvbXBvbmVudC5zdWJzdHJpbmcoMCwgY29tcG9uZW50Lmxlbmd0aCAtIDEpKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gSGFyZGVuZWRCaXQpIHsgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwYXRoIGluZGV4IC0gXCIgKyBjb21wb25lbnQpOyB9XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0Ll9kZXJpdmUoSGFyZGVuZWRCaXQgKyBpbmRleCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbXBvbmVudC5tYXRjaCgvXlswLTldKyQvKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoY29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gSGFyZGVuZWRCaXQpIHsgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwYXRoIGluZGV4IC0gXCIgKyBjb21wb25lbnQpOyB9XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0Ll9kZXJpdmUoaW5kZXgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHBhdGggY29tcG9uZW50IC0gXCIgKyBjb21wb25lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cblxuICAgIHN0YXRpYyBfZnJvbVNlZWQoc2VlZDogQnl0ZXNMaWtlLCBtbmVtb25pYzogTW5lbW9uaWMpOiBIRE5vZGUge1xuICAgICAgICBjb25zdCBzZWVkQXJyYXk6IFVpbnQ4QXJyYXkgPSBhcnJheWlmeShzZWVkKTtcbiAgICAgICAgaWYgKHNlZWRBcnJheS5sZW5ndGggPCAxNiB8fCBzZWVkQXJyYXkubGVuZ3RoID4gNjQpIHsgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBzZWVkXCIpOyB9XG5cbiAgICAgICAgY29uc3QgSTogVWludDhBcnJheSA9IGFycmF5aWZ5KGNvbXB1dGVIbWFjKFN1cHBvcnRlZEFsZ29yaXRobS5zaGE1MTIsIE1hc3RlclNlY3JldCwgc2VlZEFycmF5KSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBIRE5vZGUoX2NvbnN0cnVjdG9yR3VhcmQsIGJ5dGVzMzIoSS5zbGljZSgwLCAzMikpLCBudWxsLCBcIjB4MDAwMDAwMDBcIiwgYnl0ZXMzMihJLnNsaWNlKDMyKSksIDAsIDAsIG1uZW1vbmljKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbU1uZW1vbmljKG1uZW1vbmljOiBzdHJpbmcsIHBhc3N3b3JkPzogc3RyaW5nLCB3b3JkbGlzdD86IHN0cmluZyB8IFdvcmRsaXN0KTogSEROb2RlIHtcblxuICAgICAgICAvLyBJZiBhIGxvY2FsZSBuYW1lIHdhcyBwYXNzZWQgaW4sIGZpbmQgdGhlIGFzc29jaWF0ZWQgd29yZGxpc3RcbiAgICAgICAgd29yZGxpc3QgPSBnZXRXb3JkbGlzdCh3b3JkbGlzdCk7XG5cbiAgICAgICAgLy8gTm9ybWFsaXplIHRoZSBjYXNlIGFuZCBzcGFjaW5nIGluIHRoZSBtbmVtb25pYyAodGhyb3dzIGlmIHRoZSBtbmVtb25pYyBpcyBpbnZhbGlkKVxuICAgICAgICBtbmVtb25pYyA9IGVudHJvcHlUb01uZW1vbmljKG1uZW1vbmljVG9FbnRyb3B5KG1uZW1vbmljLCB3b3JkbGlzdCksIHdvcmRsaXN0KTtcblxuICAgICAgICByZXR1cm4gSEROb2RlLl9mcm9tU2VlZChtbmVtb25pY1RvU2VlZChtbmVtb25pYywgcGFzc3dvcmQpLCB7XG4gICAgICAgICAgICBwaHJhc2U6IG1uZW1vbmljLFxuICAgICAgICAgICAgcGF0aDogXCJtXCIsXG4gICAgICAgICAgICBsb2NhbGU6IHdvcmRsaXN0LmxvY2FsZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVNlZWQoc2VlZDogQnl0ZXNMaWtlKTogSEROb2RlIHtcbiAgICAgICAgcmV0dXJuIEhETm9kZS5fZnJvbVNlZWQoc2VlZCwgbnVsbCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21FeHRlbmRlZEtleShleHRlbmRlZEtleTogc3RyaW5nKTogSEROb2RlIHtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSBCYXNlNTguZGVjb2RlKGV4dGVuZGVkS2V5KTtcblxuICAgICAgICBpZiAoYnl0ZXMubGVuZ3RoICE9PSA4MiB8fCBiYXNlNThjaGVjayhieXRlcy5zbGljZSgwLCA3OCkpICE9PSBleHRlbmRlZEtleSkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZXh0ZW5kZWQga2V5XCIsIFwiZXh0ZW5kZWRLZXlcIiwgXCJbUkVEQUNURURdXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGVwdGggPSBieXRlc1s0XTtcbiAgICAgICAgY29uc3QgcGFyZW50RmluZ2VycHJpbnQgPSBoZXhsaWZ5KGJ5dGVzLnNsaWNlKDUsIDkpKTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBwYXJzZUludChoZXhsaWZ5KGJ5dGVzLnNsaWNlKDksIDEzKSkuc3Vic3RyaW5nKDIpLCAxNik7XG4gICAgICAgIGNvbnN0IGNoYWluQ29kZSA9IGhleGxpZnkoYnl0ZXMuc2xpY2UoMTMsIDQ1KSk7XG4gICAgICAgIGNvbnN0IGtleSA9IGJ5dGVzLnNsaWNlKDQ1LCA3OCk7XG5cbiAgICAgICAgc3dpdGNoIChoZXhsaWZ5KGJ5dGVzLnNsaWNlKDAsIDQpKSkge1xuICAgICAgICAgICAgLy8gUHVibGljIEtleVxuICAgICAgICAgICAgY2FzZSBcIjB4MDQ4OGIyMWVcIjogY2FzZSBcIjB4MDQzNTg3Y2ZcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEhETm9kZShfY29uc3RydWN0b3JHdWFyZCwgbnVsbCwgaGV4bGlmeShrZXkpLCBwYXJlbnRGaW5nZXJwcmludCwgY2hhaW5Db2RlLCBpbmRleCwgZGVwdGgsIG51bGwpO1xuXG4gICAgICAgICAgICAvLyBQcml2YXRlIEtleVxuICAgICAgICAgICAgY2FzZSBcIjB4MDQ4OGFkZTRcIjogY2FzZSBcIjB4MDQzNTgzOTQgXCI6XG4gICAgICAgICAgICAgICAgaWYgKGtleVswXSAhPT0gMCkgeyBicmVhazsgfVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSEROb2RlKF9jb25zdHJ1Y3Rvckd1YXJkLCBoZXhsaWZ5KGtleS5zbGljZSgxKSksIG51bGwsIHBhcmVudEZpbmdlcnByaW50LCBjaGFpbkNvZGUsIGluZGV4LCBkZXB0aCwgbnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgZXh0ZW5kZWQga2V5XCIsIFwiZXh0ZW5kZWRLZXlcIiwgXCJbUkVEQUNURURdXCIpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1uZW1vbmljVG9TZWVkKG1uZW1vbmljOiBzdHJpbmcsIHBhc3N3b3JkPzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAoIXBhc3N3b3JkKSB7IHBhc3N3b3JkID0gXCJcIjsgfVxuXG4gICAgY29uc3Qgc2FsdCA9IHRvVXRmOEJ5dGVzKFwibW5lbW9uaWNcIiArIHBhc3N3b3JkLCBVbmljb2RlTm9ybWFsaXphdGlvbkZvcm0uTkZLRCk7XG5cbiAgICByZXR1cm4gcGJrZGYyKHRvVXRmOEJ5dGVzKG1uZW1vbmljLCBVbmljb2RlTm9ybWFsaXphdGlvbkZvcm0uTkZLRCksIHNhbHQsIDIwNDgsIDY0LCBcInNoYTUxMlwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1uZW1vbmljVG9FbnRyb3B5KG1uZW1vbmljOiBzdHJpbmcsIHdvcmRsaXN0Pzogc3RyaW5nIHwgV29yZGxpc3QpOiBzdHJpbmcge1xuICAgIHdvcmRsaXN0ID0gZ2V0V29yZGxpc3Qod29yZGxpc3QpO1xuXG4gICAgbG9nZ2VyLmNoZWNrTm9ybWFsaXplKCk7XG5cbiAgICBjb25zdCB3b3JkcyA9IHdvcmRsaXN0LnNwbGl0KG1uZW1vbmljKTtcbiAgICBpZiAoKHdvcmRzLmxlbmd0aCAlIDMpICE9PSAwKSB7IHRocm93IG5ldyBFcnJvcihcImludmFsaWQgbW5lbW9uaWNcIik7IH1cblxuICAgIGNvbnN0IGVudHJvcHkgPSBhcnJheWlmeShuZXcgVWludDhBcnJheShNYXRoLmNlaWwoMTEgKiB3b3Jkcy5sZW5ndGggLyA4KSkpO1xuXG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3b3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgaW5kZXggPSB3b3JkbGlzdC5nZXRXb3JkSW5kZXgod29yZHNbaV0ubm9ybWFsaXplKFwiTkZLRFwiKSk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHsgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBtbmVtb25pY1wiKTsgfVxuXG4gICAgICAgIGZvciAobGV0IGJpdCA9IDA7IGJpdCA8IDExOyBiaXQrKykge1xuICAgICAgICAgICAgaWYgKGluZGV4ICYgKDEgPDwgKDEwIC0gYml0KSkpIHtcbiAgICAgICAgICAgICAgICBlbnRyb3B5W29mZnNldCA+PiAzXSB8PSAoMSA8PCAoNyAtIChvZmZzZXQgJSA4KSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBlbnRyb3B5Qml0cyA9IDMyICogd29yZHMubGVuZ3RoIC8gMztcblxuICAgIGNvbnN0IGNoZWNrc3VtQml0cyA9IHdvcmRzLmxlbmd0aCAvIDM7XG4gICAgY29uc3QgY2hlY2tzdW1NYXNrID0gZ2V0VXBwZXJNYXNrKGNoZWNrc3VtQml0cyk7XG5cbiAgICBjb25zdCBjaGVja3N1bSA9IGFycmF5aWZ5KHNoYTI1NihlbnRyb3B5LnNsaWNlKDAsIGVudHJvcHlCaXRzIC8gOCkpKVswXSAmIGNoZWNrc3VtTWFzaztcblxuICAgIGlmIChjaGVja3N1bSAhPT0gKGVudHJvcHlbZW50cm9weS5sZW5ndGggLSAxXSAmIGNoZWNrc3VtTWFzaykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjaGVja3N1bVwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGV4bGlmeShlbnRyb3B5LnNsaWNlKDAsIGVudHJvcHlCaXRzIC8gOCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW50cm9weVRvTW5lbW9uaWMoZW50cm9weTogQnl0ZXNMaWtlLCB3b3JkbGlzdD86IHN0cmluZyB8IFdvcmRsaXN0KTogc3RyaW5nIHtcbiAgICB3b3JkbGlzdCA9IGdldFdvcmRsaXN0KHdvcmRsaXN0KTtcblxuICAgIGVudHJvcHkgPSBhcnJheWlmeShlbnRyb3B5KTtcblxuICAgIGlmICgoZW50cm9weS5sZW5ndGggJSA0KSAhPT0gMCB8fCBlbnRyb3B5Lmxlbmd0aCA8IDE2IHx8IGVudHJvcHkubGVuZ3RoID4gMzIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBlbnRyb3B5XCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGluZGljZXM6IEFycmF5PG51bWJlcj4gPSBbIDAgXTtcblxuICAgIGxldCByZW1haW5pbmdCaXRzID0gMTE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbnRyb3B5Lmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgLy8gQ29uc3VtZSB0aGUgd2hvbGUgYnl0ZSAod2l0aCBzdGlsbCBtb3JlIHRvIGdvKVxuICAgICAgICBpZiAocmVtYWluaW5nQml0cyA+IDgpIHtcbiAgICAgICAgICAgIGluZGljZXNbaW5kaWNlcy5sZW5ndGggLSAxXSA8PD0gODtcbiAgICAgICAgICAgIGluZGljZXNbaW5kaWNlcy5sZW5ndGggLSAxXSB8PSBlbnRyb3B5W2ldO1xuXG4gICAgICAgICAgICByZW1haW5pbmdCaXRzIC09IDg7XG5cbiAgICAgICAgLy8gVGhpcyBieXRlIHdpbGwgY29tcGxldGUgYW4gMTEtYml0IGluZGV4XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbmRpY2VzW2luZGljZXMubGVuZ3RoIC0gMV0gPDw9IHJlbWFpbmluZ0JpdHM7XG4gICAgICAgICAgICBpbmRpY2VzW2luZGljZXMubGVuZ3RoIC0gMV0gfD0gZW50cm9weVtpXSA+PiAoOCAtIHJlbWFpbmluZ0JpdHMpO1xuXG4gICAgICAgICAgICAvLyBTdGFydCB0aGUgbmV4dCB3b3JkXG4gICAgICAgICAgICBpbmRpY2VzLnB1c2goZW50cm9weVtpXSAmIGdldExvd2VyTWFzayg4IC0gcmVtYWluaW5nQml0cykpO1xuXG4gICAgICAgICAgICByZW1haW5pbmdCaXRzICs9IDM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDb21wdXRlIHRoZSBjaGVja3N1bSBiaXRzXG4gICAgY29uc3QgY2hlY2tzdW1CaXRzID0gZW50cm9weS5sZW5ndGggLyA0O1xuICAgIGNvbnN0IGNoZWNrc3VtID0gYXJyYXlpZnkoc2hhMjU2KGVudHJvcHkpKVswXSAmIGdldFVwcGVyTWFzayhjaGVja3N1bUJpdHMpO1xuXG4gICAgLy8gU2hpZnQgdGhlIGNoZWNrc3VtIGludG8gdGhlIHdvcmQgaW5kaWNlc1xuICAgIGluZGljZXNbaW5kaWNlcy5sZW5ndGggLSAxXSA8PD0gY2hlY2tzdW1CaXRzO1xuICAgIGluZGljZXNbaW5kaWNlcy5sZW5ndGggLSAxXSB8PSAoY2hlY2tzdW0gPj4gKDggLSBjaGVja3N1bUJpdHMpKTtcblxuICAgIHJldHVybiB3b3JkbGlzdC5qb2luKGluZGljZXMubWFwKChpbmRleCkgPT4gKDxXb3JkbGlzdD53b3JkbGlzdCkuZ2V0V29yZChpbmRleCkpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRNbmVtb25pYyhtbmVtb25pYzogc3RyaW5nLCB3b3JkbGlzdD86IFdvcmRsaXN0KTogYm9vbGVhbiB7XG4gICAgdHJ5IHtcbiAgICAgICAgbW5lbW9uaWNUb0VudHJvcHkobW5lbW9uaWMsIHdvcmRsaXN0KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFjY291bnRQYXRoKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGlmICh0eXBlb2YoaW5kZXgpICE9PSBcIm51bWJlclwiIHx8IGluZGV4IDwgMCB8fCBpbmRleCA+PSBIYXJkZW5lZEJpdCB8fCBpbmRleCAlIDEpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYWNjb3VudCBpbmRleFwiLCBcImluZGV4XCIsIGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIGBtLzQ0Jy82MCcvJHsgaW5kZXggfScvMC8wYDtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheWlmeSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5cbi8vIERlYnVnZ2luZyBsaW5lIGZvciB0ZXN0aW5nIGJyb3dzZXIgbGliIGluIG5vZGVcbi8vY29uc3Qgd2luZG93ID0geyBjcnlwdG86IHsgZ2V0UmFuZG9tVmFsdWVzOiAoKSA9PiB7IH0gfSB9O1xuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9nbG9iYWxUaGlzXG5mdW5jdGlvbiBnZXRHbG9iYWwoKTogYW55IHtcbiAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gc2VsZjsgfVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIHdpbmRvdzsgfVxuICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIGdsb2JhbDsgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdCcpO1xufTtcblxuY29uc3QgYW55R2xvYmFsID0gZ2V0R2xvYmFsKCk7XG5cbmxldCBjcnlwdG86IGFueSA9IGFueUdsb2JhbC5jcnlwdG8gfHwgYW55R2xvYmFsLm1zQ3J5cHRvO1xuaWYgKCFjcnlwdG8gfHwgIWNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcblxuICAgIGxvZ2dlci53YXJuKFwiV0FSTklORzogTWlzc2luZyBzdHJvbmcgcmFuZG9tIG51bWJlciBzb3VyY2VcIik7XG5cbiAgICBjcnlwdG8gPSB7XG4gICAgICAgIGdldFJhbmRvbVZhbHVlczogZnVuY3Rpb24oYnVmZmVyOiBVaW50OEFycmF5KTogVWludDhBcnJheSB7XG4gICAgICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoXCJubyBzZWN1cmUgcmFuZG9tIHNvdXJjZSBhdmFpYWxibGVcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwiY3J5cHRvLmdldFJhbmRvbVZhbHVlc1wiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21CeXRlcyhsZW5ndGg6IG51bWJlcik6IFVpbnQ4QXJyYXkge1xuICAgIGlmIChsZW5ndGggPD0gMCB8fCBsZW5ndGggPiAxMDI0IHx8IChsZW5ndGggJSAxKSB8fCBsZW5ndGggIT0gbGVuZ3RoKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGxlbmd0aFwiLCBcImxlbmd0aFwiLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhyZXN1bHQpO1xuICAgIHJldHVybiBhcnJheWlmeShyZXN1bHQpO1xufTtcbiIsImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJyYW5kb20vNS43LjBcIjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc2h1ZmZsZWQoYXJyYXk6IEFycmF5PGFueT4pOiBBcnJheTxhbnk+IHtcbiAgICBhcnJheSA9IGFycmF5LnNsaWNlKCk7XG5cbiAgICBmb3IgKGxldCBpID0gYXJyYXkubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xuICAgICAgICBjb25zdCBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7XG4gICAgICAgIGNvbnN0IHRtcCA9IGFycmF5W2ldO1xuICAgICAgICBhcnJheVtpXSA9IGFycmF5W2pdO1xuICAgICAgICBhcnJheVtqXSA9IHRtcDtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uKHJvb3QpIHtcblxuICAgIGZ1bmN0aW9uIGNoZWNrSW50KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAocGFyc2VJbnQodmFsdWUpID09PSB2YWx1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tJbnRzKGFycmF5aXNoKSB7XG4gICAgICAgIGlmICghY2hlY2tJbnQoYXJyYXlpc2gubGVuZ3RoKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5aXNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIWNoZWNrSW50KGFycmF5aXNoW2ldKSB8fCBhcnJheWlzaFtpXSA8IDAgfHwgYXJyYXlpc2hbaV0gPiAyNTUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb2VyY2VBcnJheShhcmcsIGNvcHkpIHtcblxuICAgICAgICAvLyBBcnJheUJ1ZmZlciB2aWV3XG4gICAgICAgIGlmIChhcmcuYnVmZmVyICYmIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpICYmIGFyZy5uYW1lID09PSAnVWludDhBcnJheScpIHtcblxuICAgICAgICAgICAgaWYgKGNvcHkpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXJnLnNsaWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy5zbGljZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSXQncyBhbiBhcnJheTsgY2hlY2sgaXQgaXMgYSB2YWxpZCByZXByZXNlbnRhdGlvbiBvZiBhIGJ5dGVcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgaWYgKCFjaGVja0ludHMoYXJnKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQXJyYXkgY29udGFpbnMgaW52YWxpZCB2YWx1ZTogJyArIGFyZyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShhcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU29tZXRoaW5nIGVsc2UsIGJ1dCBiZWhhdmVzIGxpa2UgYW4gYXJyYXkgKG1heWJlIGEgQnVmZmVyPyBBcmd1bWVudHM/KVxuICAgICAgICBpZiAoY2hlY2tJbnQoYXJnLmxlbmd0aCkgJiYgY2hlY2tJbnRzKGFyZykpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShhcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCBhcnJheS1saWtlIG9iamVjdCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFycmF5KGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlQXJyYXksIHRhcmdldEFycmF5LCB0YXJnZXRTdGFydCwgc291cmNlU3RhcnQsIHNvdXJjZUVuZCkge1xuICAgICAgICBpZiAoc291cmNlU3RhcnQgIT0gbnVsbCB8fCBzb3VyY2VFbmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHNvdXJjZUFycmF5LnNsaWNlKSB7XG4gICAgICAgICAgICAgICAgc291cmNlQXJyYXkgPSBzb3VyY2VBcnJheS5zbGljZShzb3VyY2VTdGFydCwgc291cmNlRW5kKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc291cmNlQXJyYXkgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzb3VyY2VBcnJheSwgc291cmNlU3RhcnQsIHNvdXJjZUVuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0QXJyYXkuc2V0KHNvdXJjZUFycmF5LCB0YXJnZXRTdGFydCk7XG4gICAgfVxuXG5cblxuICAgIHZhciBjb252ZXJ0VXRmOCA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgZnVuY3Rpb24gdG9CeXRlcyh0ZXh0KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW10sIGkgPSAwO1xuICAgICAgICAgICAgdGV4dCA9IGVuY29kZVVSSSh0ZXh0KTtcbiAgICAgICAgICAgIHdoaWxlIChpIDwgdGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IHRleHQuY2hhckNvZGVBdChpKyspO1xuXG4gICAgICAgICAgICAgICAgLy8gaWYgaXQgaXMgYSAlIHNpZ24sIGVuY29kZSB0aGUgZm9sbG93aW5nIDIgYnl0ZXMgYXMgYSBoZXggdmFsdWVcbiAgICAgICAgICAgICAgICBpZiAoYyA9PT0gMzcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQodGV4dC5zdWJzdHIoaSwgMiksIDE2KSlcbiAgICAgICAgICAgICAgICAgICAgaSArPSAyO1xuXG4gICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlLCBqdXN0IHRoZSBhY3R1YWwgYnl0ZVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGMpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY29lcmNlQXJyYXkocmVzdWx0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGZyb21CeXRlcyhieXRlcykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdLCBpID0gMDtcblxuICAgICAgICAgICAgd2hpbGUgKGkgPCBieXRlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IGJ5dGVzW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKGMgPCAxMjgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjKSk7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMgPiAxOTEgJiYgYyA8IDIyNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYyAmIDB4MWYpIDw8IDYpIHwgKGJ5dGVzW2kgKyAxXSAmIDB4M2YpKSk7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYyAmIDB4MGYpIDw8IDEyKSB8ICgoYnl0ZXNbaSArIDFdICYgMHgzZikgPDwgNikgfCAoYnl0ZXNbaSArIDJdICYgMHgzZikpKTtcbiAgICAgICAgICAgICAgICAgICAgaSArPSAzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b0J5dGVzOiB0b0J5dGVzLFxuICAgICAgICAgICAgZnJvbUJ5dGVzOiBmcm9tQnl0ZXMsXG4gICAgICAgIH1cbiAgICB9KSgpO1xuXG4gICAgdmFyIGNvbnZlcnRIZXggPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgIGZ1bmN0aW9uIHRvQnl0ZXModGV4dCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQodGV4dC5zdWJzdHIoaSwgMiksIDE2KSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBodHRwOi8vaXh0aS5uZXQvZGV2ZWxvcG1lbnQvamF2YXNjcmlwdC8yMDExLzExLzExL2Jhc2U2NC1lbmNvZGVkZWNvZGUtb2YtdXRmOC1pbi1icm93c2VyLXdpdGgtanMuaHRtbFxuICAgICAgICB2YXIgSGV4ID0gJzAxMjM0NTY3ODlhYmNkZWYnO1xuXG4gICAgICAgIGZ1bmN0aW9uIGZyb21CeXRlcyhieXRlcykge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2ID0gYnl0ZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKEhleFsodiAmIDB4ZjApID4+IDRdICsgSGV4W3YgJiAweDBmXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9CeXRlczogdG9CeXRlcyxcbiAgICAgICAgICAgIGZyb21CeXRlczogZnJvbUJ5dGVzLFxuICAgICAgICB9XG4gICAgfSkoKTtcblxuXG4gICAgLy8gTnVtYmVyIG9mIHJvdW5kcyBieSBrZXlzaXplXG4gICAgdmFyIG51bWJlck9mUm91bmRzID0gezE2OiAxMCwgMjQ6IDEyLCAzMjogMTR9XG5cbiAgICAvLyBSb3VuZCBjb25zdGFudCB3b3Jkc1xuICAgIHZhciByY29uID0gWzB4MDEsIDB4MDIsIDB4MDQsIDB4MDgsIDB4MTAsIDB4MjAsIDB4NDAsIDB4ODAsIDB4MWIsIDB4MzYsIDB4NmMsIDB4ZDgsIDB4YWIsIDB4NGQsIDB4OWEsIDB4MmYsIDB4NWUsIDB4YmMsIDB4NjMsIDB4YzYsIDB4OTcsIDB4MzUsIDB4NmEsIDB4ZDQsIDB4YjMsIDB4N2QsIDB4ZmEsIDB4ZWYsIDB4YzUsIDB4OTFdO1xuXG4gICAgLy8gUy1ib3ggYW5kIEludmVyc2UgUy1ib3ggKFMgaXMgZm9yIFN1YnN0aXR1dGlvbilcbiAgICB2YXIgUyA9IFsweDYzLCAweDdjLCAweDc3LCAweDdiLCAweGYyLCAweDZiLCAweDZmLCAweGM1LCAweDMwLCAweDAxLCAweDY3LCAweDJiLCAweGZlLCAweGQ3LCAweGFiLCAweDc2LCAweGNhLCAweDgyLCAweGM5LCAweDdkLCAweGZhLCAweDU5LCAweDQ3LCAweGYwLCAweGFkLCAweGQ0LCAweGEyLCAweGFmLCAweDljLCAweGE0LCAweDcyLCAweGMwLCAweGI3LCAweGZkLCAweDkzLCAweDI2LCAweDM2LCAweDNmLCAweGY3LCAweGNjLCAweDM0LCAweGE1LCAweGU1LCAweGYxLCAweDcxLCAweGQ4LCAweDMxLCAweDE1LCAweDA0LCAweGM3LCAweDIzLCAweGMzLCAweDE4LCAweDk2LCAweDA1LCAweDlhLCAweDA3LCAweDEyLCAweDgwLCAweGUyLCAweGViLCAweDI3LCAweGIyLCAweDc1LCAweDA5LCAweDgzLCAweDJjLCAweDFhLCAweDFiLCAweDZlLCAweDVhLCAweGEwLCAweDUyLCAweDNiLCAweGQ2LCAweGIzLCAweDI5LCAweGUzLCAweDJmLCAweDg0LCAweDUzLCAweGQxLCAweDAwLCAweGVkLCAweDIwLCAweGZjLCAweGIxLCAweDViLCAweDZhLCAweGNiLCAweGJlLCAweDM5LCAweDRhLCAweDRjLCAweDU4LCAweGNmLCAweGQwLCAweGVmLCAweGFhLCAweGZiLCAweDQzLCAweDRkLCAweDMzLCAweDg1LCAweDQ1LCAweGY5LCAweDAyLCAweDdmLCAweDUwLCAweDNjLCAweDlmLCAweGE4LCAweDUxLCAweGEzLCAweDQwLCAweDhmLCAweDkyLCAweDlkLCAweDM4LCAweGY1LCAweGJjLCAweGI2LCAweGRhLCAweDIxLCAweDEwLCAweGZmLCAweGYzLCAweGQyLCAweGNkLCAweDBjLCAweDEzLCAweGVjLCAweDVmLCAweDk3LCAweDQ0LCAweDE3LCAweGM0LCAweGE3LCAweDdlLCAweDNkLCAweDY0LCAweDVkLCAweDE5LCAweDczLCAweDYwLCAweDgxLCAweDRmLCAweGRjLCAweDIyLCAweDJhLCAweDkwLCAweDg4LCAweDQ2LCAweGVlLCAweGI4LCAweDE0LCAweGRlLCAweDVlLCAweDBiLCAweGRiLCAweGUwLCAweDMyLCAweDNhLCAweDBhLCAweDQ5LCAweDA2LCAweDI0LCAweDVjLCAweGMyLCAweGQzLCAweGFjLCAweDYyLCAweDkxLCAweDk1LCAweGU0LCAweDc5LCAweGU3LCAweGM4LCAweDM3LCAweDZkLCAweDhkLCAweGQ1LCAweDRlLCAweGE5LCAweDZjLCAweDU2LCAweGY0LCAweGVhLCAweDY1LCAweDdhLCAweGFlLCAweDA4LCAweGJhLCAweDc4LCAweDI1LCAweDJlLCAweDFjLCAweGE2LCAweGI0LCAweGM2LCAweGU4LCAweGRkLCAweDc0LCAweDFmLCAweDRiLCAweGJkLCAweDhiLCAweDhhLCAweDcwLCAweDNlLCAweGI1LCAweDY2LCAweDQ4LCAweDAzLCAweGY2LCAweDBlLCAweDYxLCAweDM1LCAweDU3LCAweGI5LCAweDg2LCAweGMxLCAweDFkLCAweDllLCAweGUxLCAweGY4LCAweDk4LCAweDExLCAweDY5LCAweGQ5LCAweDhlLCAweDk0LCAweDliLCAweDFlLCAweDg3LCAweGU5LCAweGNlLCAweDU1LCAweDI4LCAweGRmLCAweDhjLCAweGExLCAweDg5LCAweDBkLCAweGJmLCAweGU2LCAweDQyLCAweDY4LCAweDQxLCAweDk5LCAweDJkLCAweDBmLCAweGIwLCAweDU0LCAweGJiLCAweDE2XTtcbiAgICB2YXIgU2kgPVsweDUyLCAweDA5LCAweDZhLCAweGQ1LCAweDMwLCAweDM2LCAweGE1LCAweDM4LCAweGJmLCAweDQwLCAweGEzLCAweDllLCAweDgxLCAweGYzLCAweGQ3LCAweGZiLCAweDdjLCAweGUzLCAweDM5LCAweDgyLCAweDliLCAweDJmLCAweGZmLCAweDg3LCAweDM0LCAweDhlLCAweDQzLCAweDQ0LCAweGM0LCAweGRlLCAweGU5LCAweGNiLCAweDU0LCAweDdiLCAweDk0LCAweDMyLCAweGE2LCAweGMyLCAweDIzLCAweDNkLCAweGVlLCAweDRjLCAweDk1LCAweDBiLCAweDQyLCAweGZhLCAweGMzLCAweDRlLCAweDA4LCAweDJlLCAweGExLCAweDY2LCAweDI4LCAweGQ5LCAweDI0LCAweGIyLCAweDc2LCAweDViLCAweGEyLCAweDQ5LCAweDZkLCAweDhiLCAweGQxLCAweDI1LCAweDcyLCAweGY4LCAweGY2LCAweDY0LCAweDg2LCAweDY4LCAweDk4LCAweDE2LCAweGQ0LCAweGE0LCAweDVjLCAweGNjLCAweDVkLCAweDY1LCAweGI2LCAweDkyLCAweDZjLCAweDcwLCAweDQ4LCAweDUwLCAweGZkLCAweGVkLCAweGI5LCAweGRhLCAweDVlLCAweDE1LCAweDQ2LCAweDU3LCAweGE3LCAweDhkLCAweDlkLCAweDg0LCAweDkwLCAweGQ4LCAweGFiLCAweDAwLCAweDhjLCAweGJjLCAweGQzLCAweDBhLCAweGY3LCAweGU0LCAweDU4LCAweDA1LCAweGI4LCAweGIzLCAweDQ1LCAweDA2LCAweGQwLCAweDJjLCAweDFlLCAweDhmLCAweGNhLCAweDNmLCAweDBmLCAweDAyLCAweGMxLCAweGFmLCAweGJkLCAweDAzLCAweDAxLCAweDEzLCAweDhhLCAweDZiLCAweDNhLCAweDkxLCAweDExLCAweDQxLCAweDRmLCAweDY3LCAweGRjLCAweGVhLCAweDk3LCAweGYyLCAweGNmLCAweGNlLCAweGYwLCAweGI0LCAweGU2LCAweDczLCAweDk2LCAweGFjLCAweDc0LCAweDIyLCAweGU3LCAweGFkLCAweDM1LCAweDg1LCAweGUyLCAweGY5LCAweDM3LCAweGU4LCAweDFjLCAweDc1LCAweGRmLCAweDZlLCAweDQ3LCAweGYxLCAweDFhLCAweDcxLCAweDFkLCAweDI5LCAweGM1LCAweDg5LCAweDZmLCAweGI3LCAweDYyLCAweDBlLCAweGFhLCAweDE4LCAweGJlLCAweDFiLCAweGZjLCAweDU2LCAweDNlLCAweDRiLCAweGM2LCAweGQyLCAweDc5LCAweDIwLCAweDlhLCAweGRiLCAweGMwLCAweGZlLCAweDc4LCAweGNkLCAweDVhLCAweGY0LCAweDFmLCAweGRkLCAweGE4LCAweDMzLCAweDg4LCAweDA3LCAweGM3LCAweDMxLCAweGIxLCAweDEyLCAweDEwLCAweDU5LCAweDI3LCAweDgwLCAweGVjLCAweDVmLCAweDYwLCAweDUxLCAweDdmLCAweGE5LCAweDE5LCAweGI1LCAweDRhLCAweDBkLCAweDJkLCAweGU1LCAweDdhLCAweDlmLCAweDkzLCAweGM5LCAweDljLCAweGVmLCAweGEwLCAweGUwLCAweDNiLCAweDRkLCAweGFlLCAweDJhLCAweGY1LCAweGIwLCAweGM4LCAweGViLCAweGJiLCAweDNjLCAweDgzLCAweDUzLCAweDk5LCAweDYxLCAweDE3LCAweDJiLCAweDA0LCAweDdlLCAweGJhLCAweDc3LCAweGQ2LCAweDI2LCAweGUxLCAweDY5LCAweDE0LCAweDYzLCAweDU1LCAweDIxLCAweDBjLCAweDdkXTtcblxuICAgIC8vIFRyYW5zZm9ybWF0aW9ucyBmb3IgZW5jcnlwdGlvblxuICAgIHZhciBUMSA9IFsweGM2NjM2M2E1LCAweGY4N2M3Yzg0LCAweGVlNzc3Nzk5LCAweGY2N2I3YjhkLCAweGZmZjJmMjBkLCAweGQ2NmI2YmJkLCAweGRlNmY2ZmIxLCAweDkxYzVjNTU0LCAweDYwMzAzMDUwLCAweDAyMDEwMTAzLCAweGNlNjc2N2E5LCAweDU2MmIyYjdkLCAweGU3ZmVmZTE5LCAweGI1ZDdkNzYyLCAweDRkYWJhYmU2LCAweGVjNzY3NjlhLCAweDhmY2FjYTQ1LCAweDFmODI4MjlkLCAweDg5YzljOTQwLCAweGZhN2Q3ZDg3LCAweGVmZmFmYTE1LCAweGIyNTk1OWViLCAweDhlNDc0N2M5LCAweGZiZjBmMDBiLCAweDQxYWRhZGVjLCAweGIzZDRkNDY3LCAweDVmYTJhMmZkLCAweDQ1YWZhZmVhLCAweDIzOWM5Y2JmLCAweDUzYTRhNGY3LCAweGU0NzI3Mjk2LCAweDliYzBjMDViLCAweDc1YjdiN2MyLCAweGUxZmRmZDFjLCAweDNkOTM5M2FlLCAweDRjMjYyNjZhLCAweDZjMzYzNjVhLCAweDdlM2YzZjQxLCAweGY1ZjdmNzAyLCAweDgzY2NjYzRmLCAweDY4MzQzNDVjLCAweDUxYTVhNWY0LCAweGQxZTVlNTM0LCAweGY5ZjFmMTA4LCAweGUyNzE3MTkzLCAweGFiZDhkODczLCAweDYyMzEzMTUzLCAweDJhMTUxNTNmLCAweDA4MDQwNDBjLCAweDk1YzdjNzUyLCAweDQ2MjMyMzY1LCAweDlkYzNjMzVlLCAweDMwMTgxODI4LCAweDM3OTY5NmExLCAweDBhMDUwNTBmLCAweDJmOWE5YWI1LCAweDBlMDcwNzA5LCAweDI0MTIxMjM2LCAweDFiODA4MDliLCAweGRmZTJlMjNkLCAweGNkZWJlYjI2LCAweDRlMjcyNzY5LCAweDdmYjJiMmNkLCAweGVhNzU3NTlmLCAweDEyMDkwOTFiLCAweDFkODM4MzllLCAweDU4MmMyYzc0LCAweDM0MWExYTJlLCAweDM2MWIxYjJkLCAweGRjNmU2ZWIyLCAweGI0NWE1YWVlLCAweDViYTBhMGZiLCAweGE0NTI1MmY2LCAweDc2M2IzYjRkLCAweGI3ZDZkNjYxLCAweDdkYjNiM2NlLCAweDUyMjkyOTdiLCAweGRkZTNlMzNlLCAweDVlMmYyZjcxLCAweDEzODQ4NDk3LCAweGE2NTM1M2Y1LCAweGI5ZDFkMTY4LCAweDAwMDAwMDAwLCAweGMxZWRlZDJjLCAweDQwMjAyMDYwLCAweGUzZmNmYzFmLCAweDc5YjFiMWM4LCAweGI2NWI1YmVkLCAweGQ0NmE2YWJlLCAweDhkY2JjYjQ2LCAweDY3YmViZWQ5LCAweDcyMzkzOTRiLCAweDk0NGE0YWRlLCAweDk4NGM0Y2Q0LCAweGIwNTg1OGU4LCAweDg1Y2ZjZjRhLCAweGJiZDBkMDZiLCAweGM1ZWZlZjJhLCAweDRmYWFhYWU1LCAweGVkZmJmYjE2LCAweDg2NDM0M2M1LCAweDlhNGQ0ZGQ3LCAweDY2MzMzMzU1LCAweDExODU4NTk0LCAweDhhNDU0NWNmLCAweGU5ZjlmOTEwLCAweDA0MDIwMjA2LCAweGZlN2Y3ZjgxLCAweGEwNTA1MGYwLCAweDc4M2MzYzQ0LCAweDI1OWY5ZmJhLCAweDRiYThhOGUzLCAweGEyNTE1MWYzLCAweDVkYTNhM2ZlLCAweDgwNDA0MGMwLCAweDA1OGY4ZjhhLCAweDNmOTI5MmFkLCAweDIxOWQ5ZGJjLCAweDcwMzgzODQ4LCAweGYxZjVmNTA0LCAweDYzYmNiY2RmLCAweDc3YjZiNmMxLCAweGFmZGFkYTc1LCAweDQyMjEyMTYzLCAweDIwMTAxMDMwLCAweGU1ZmZmZjFhLCAweGZkZjNmMzBlLCAweGJmZDJkMjZkLCAweDgxY2RjZDRjLCAweDE4MGMwYzE0LCAweDI2MTMxMzM1LCAweGMzZWNlYzJmLCAweGJlNWY1ZmUxLCAweDM1OTc5N2EyLCAweDg4NDQ0NGNjLCAweDJlMTcxNzM5LCAweDkzYzRjNDU3LCAweDU1YTdhN2YyLCAweGZjN2U3ZTgyLCAweDdhM2QzZDQ3LCAweGM4NjQ2NGFjLCAweGJhNWQ1ZGU3LCAweDMyMTkxOTJiLCAweGU2NzM3Mzk1LCAweGMwNjA2MGEwLCAweDE5ODE4MTk4LCAweDllNGY0ZmQxLCAweGEzZGNkYzdmLCAweDQ0MjIyMjY2LCAweDU0MmEyYTdlLCAweDNiOTA5MGFiLCAweDBiODg4ODgzLCAweDhjNDY0NmNhLCAweGM3ZWVlZTI5LCAweDZiYjhiOGQzLCAweDI4MTQxNDNjLCAweGE3ZGVkZTc5LCAweGJjNWU1ZWUyLCAweDE2MGIwYjFkLCAweGFkZGJkYjc2LCAweGRiZTBlMDNiLCAweDY0MzIzMjU2LCAweDc0M2EzYTRlLCAweDE0MGEwYTFlLCAweDkyNDk0OWRiLCAweDBjMDYwNjBhLCAweDQ4MjQyNDZjLCAweGI4NWM1Y2U0LCAweDlmYzJjMjVkLCAweGJkZDNkMzZlLCAweDQzYWNhY2VmLCAweGM0NjI2MmE2LCAweDM5OTE5MWE4LCAweDMxOTU5NWE0LCAweGQzZTRlNDM3LCAweGYyNzk3OThiLCAweGQ1ZTdlNzMyLCAweDhiYzhjODQzLCAweDZlMzczNzU5LCAweGRhNmQ2ZGI3LCAweDAxOGQ4ZDhjLCAweGIxZDVkNTY0LCAweDljNGU0ZWQyLCAweDQ5YTlhOWUwLCAweGQ4NmM2Y2I0LCAweGFjNTY1NmZhLCAweGYzZjRmNDA3LCAweGNmZWFlYTI1LCAweGNhNjU2NWFmLCAweGY0N2E3YThlLCAweDQ3YWVhZWU5LCAweDEwMDgwODE4LCAweDZmYmFiYWQ1LCAweGYwNzg3ODg4LCAweDRhMjUyNTZmLCAweDVjMmUyZTcyLCAweDM4MWMxYzI0LCAweDU3YTZhNmYxLCAweDczYjRiNGM3LCAweDk3YzZjNjUxLCAweGNiZThlODIzLCAweGExZGRkZDdjLCAweGU4NzQ3NDljLCAweDNlMWYxZjIxLCAweDk2NGI0YmRkLCAweDYxYmRiZGRjLCAweDBkOGI4Yjg2LCAweDBmOGE4YTg1LCAweGUwNzA3MDkwLCAweDdjM2UzZTQyLCAweDcxYjViNWM0LCAweGNjNjY2NmFhLCAweDkwNDg0OGQ4LCAweDA2MDMwMzA1LCAweGY3ZjZmNjAxLCAweDFjMGUwZTEyLCAweGMyNjE2MWEzLCAweDZhMzUzNTVmLCAweGFlNTc1N2Y5LCAweDY5YjliOWQwLCAweDE3ODY4NjkxLCAweDk5YzFjMTU4LCAweDNhMWQxZDI3LCAweDI3OWU5ZWI5LCAweGQ5ZTFlMTM4LCAweGViZjhmODEzLCAweDJiOTg5OGIzLCAweDIyMTExMTMzLCAweGQyNjk2OWJiLCAweGE5ZDlkOTcwLCAweDA3OGU4ZTg5LCAweDMzOTQ5NGE3LCAweDJkOWI5YmI2LCAweDNjMWUxZTIyLCAweDE1ODc4NzkyLCAweGM5ZTllOTIwLCAweDg3Y2VjZTQ5LCAweGFhNTU1NWZmLCAweDUwMjgyODc4LCAweGE1ZGZkZjdhLCAweDAzOGM4YzhmLCAweDU5YTFhMWY4LCAweDA5ODk4OTgwLCAweDFhMGQwZDE3LCAweDY1YmZiZmRhLCAweGQ3ZTZlNjMxLCAweDg0NDI0MmM2LCAweGQwNjg2OGI4LCAweDgyNDE0MWMzLCAweDI5OTk5OWIwLCAweDVhMmQyZDc3LCAweDFlMGYwZjExLCAweDdiYjBiMGNiLCAweGE4NTQ1NGZjLCAweDZkYmJiYmQ2LCAweDJjMTYxNjNhXTtcbiAgICB2YXIgVDIgPSBbMHhhNWM2NjM2MywgMHg4NGY4N2M3YywgMHg5OWVlNzc3NywgMHg4ZGY2N2I3YiwgMHgwZGZmZjJmMiwgMHhiZGQ2NmI2YiwgMHhiMWRlNmY2ZiwgMHg1NDkxYzVjNSwgMHg1MDYwMzAzMCwgMHgwMzAyMDEwMSwgMHhhOWNlNjc2NywgMHg3ZDU2MmIyYiwgMHgxOWU3ZmVmZSwgMHg2MmI1ZDdkNywgMHhlNjRkYWJhYiwgMHg5YWVjNzY3NiwgMHg0NThmY2FjYSwgMHg5ZDFmODI4MiwgMHg0MDg5YzljOSwgMHg4N2ZhN2Q3ZCwgMHgxNWVmZmFmYSwgMHhlYmIyNTk1OSwgMHhjOThlNDc0NywgMHgwYmZiZjBmMCwgMHhlYzQxYWRhZCwgMHg2N2IzZDRkNCwgMHhmZDVmYTJhMiwgMHhlYTQ1YWZhZiwgMHhiZjIzOWM5YywgMHhmNzUzYTRhNCwgMHg5NmU0NzI3MiwgMHg1YjliYzBjMCwgMHhjMjc1YjdiNywgMHgxY2UxZmRmZCwgMHhhZTNkOTM5MywgMHg2YTRjMjYyNiwgMHg1YTZjMzYzNiwgMHg0MTdlM2YzZiwgMHgwMmY1ZjdmNywgMHg0ZjgzY2NjYywgMHg1YzY4MzQzNCwgMHhmNDUxYTVhNSwgMHgzNGQxZTVlNSwgMHgwOGY5ZjFmMSwgMHg5M2UyNzE3MSwgMHg3M2FiZDhkOCwgMHg1MzYyMzEzMSwgMHgzZjJhMTUxNSwgMHgwYzA4MDQwNCwgMHg1Mjk1YzdjNywgMHg2NTQ2MjMyMywgMHg1ZTlkYzNjMywgMHgyODMwMTgxOCwgMHhhMTM3OTY5NiwgMHgwZjBhMDUwNSwgMHhiNTJmOWE5YSwgMHgwOTBlMDcwNywgMHgzNjI0MTIxMiwgMHg5YjFiODA4MCwgMHgzZGRmZTJlMiwgMHgyNmNkZWJlYiwgMHg2OTRlMjcyNywgMHhjZDdmYjJiMiwgMHg5ZmVhNzU3NSwgMHgxYjEyMDkwOSwgMHg5ZTFkODM4MywgMHg3NDU4MmMyYywgMHgyZTM0MWExYSwgMHgyZDM2MWIxYiwgMHhiMmRjNmU2ZSwgMHhlZWI0NWE1YSwgMHhmYjViYTBhMCwgMHhmNmE0NTI1MiwgMHg0ZDc2M2IzYiwgMHg2MWI3ZDZkNiwgMHhjZTdkYjNiMywgMHg3YjUyMjkyOSwgMHgzZWRkZTNlMywgMHg3MTVlMmYyZiwgMHg5NzEzODQ4NCwgMHhmNWE2NTM1MywgMHg2OGI5ZDFkMSwgMHgwMDAwMDAwMCwgMHgyY2MxZWRlZCwgMHg2MDQwMjAyMCwgMHgxZmUzZmNmYywgMHhjODc5YjFiMSwgMHhlZGI2NWI1YiwgMHhiZWQ0NmE2YSwgMHg0NjhkY2JjYiwgMHhkOTY3YmViZSwgMHg0YjcyMzkzOSwgMHhkZTk0NGE0YSwgMHhkNDk4NGM0YywgMHhlOGIwNTg1OCwgMHg0YTg1Y2ZjZiwgMHg2YmJiZDBkMCwgMHgyYWM1ZWZlZiwgMHhlNTRmYWFhYSwgMHgxNmVkZmJmYiwgMHhjNTg2NDM0MywgMHhkNzlhNGQ0ZCwgMHg1NTY2MzMzMywgMHg5NDExODU4NSwgMHhjZjhhNDU0NSwgMHgxMGU5ZjlmOSwgMHgwNjA0MDIwMiwgMHg4MWZlN2Y3ZiwgMHhmMGEwNTA1MCwgMHg0NDc4M2MzYywgMHhiYTI1OWY5ZiwgMHhlMzRiYThhOCwgMHhmM2EyNTE1MSwgMHhmZTVkYTNhMywgMHhjMDgwNDA0MCwgMHg4YTA1OGY4ZiwgMHhhZDNmOTI5MiwgMHhiYzIxOWQ5ZCwgMHg0ODcwMzgzOCwgMHgwNGYxZjVmNSwgMHhkZjYzYmNiYywgMHhjMTc3YjZiNiwgMHg3NWFmZGFkYSwgMHg2MzQyMjEyMSwgMHgzMDIwMTAxMCwgMHgxYWU1ZmZmZiwgMHgwZWZkZjNmMywgMHg2ZGJmZDJkMiwgMHg0YzgxY2RjZCwgMHgxNDE4MGMwYywgMHgzNTI2MTMxMywgMHgyZmMzZWNlYywgMHhlMWJlNWY1ZiwgMHhhMjM1OTc5NywgMHhjYzg4NDQ0NCwgMHgzOTJlMTcxNywgMHg1NzkzYzRjNCwgMHhmMjU1YTdhNywgMHg4MmZjN2U3ZSwgMHg0NzdhM2QzZCwgMHhhY2M4NjQ2NCwgMHhlN2JhNWQ1ZCwgMHgyYjMyMTkxOSwgMHg5NWU2NzM3MywgMHhhMGMwNjA2MCwgMHg5ODE5ODE4MSwgMHhkMTllNGY0ZiwgMHg3ZmEzZGNkYywgMHg2NjQ0MjIyMiwgMHg3ZTU0MmEyYSwgMHhhYjNiOTA5MCwgMHg4MzBiODg4OCwgMHhjYThjNDY0NiwgMHgyOWM3ZWVlZSwgMHhkMzZiYjhiOCwgMHgzYzI4MTQxNCwgMHg3OWE3ZGVkZSwgMHhlMmJjNWU1ZSwgMHgxZDE2MGIwYiwgMHg3NmFkZGJkYiwgMHgzYmRiZTBlMCwgMHg1NjY0MzIzMiwgMHg0ZTc0M2EzYSwgMHgxZTE0MGEwYSwgMHhkYjkyNDk0OSwgMHgwYTBjMDYwNiwgMHg2YzQ4MjQyNCwgMHhlNGI4NWM1YywgMHg1ZDlmYzJjMiwgMHg2ZWJkZDNkMywgMHhlZjQzYWNhYywgMHhhNmM0NjI2MiwgMHhhODM5OTE5MSwgMHhhNDMxOTU5NSwgMHgzN2QzZTRlNCwgMHg4YmYyNzk3OSwgMHgzMmQ1ZTdlNywgMHg0MzhiYzhjOCwgMHg1OTZlMzczNywgMHhiN2RhNmQ2ZCwgMHg4YzAxOGQ4ZCwgMHg2NGIxZDVkNSwgMHhkMjljNGU0ZSwgMHhlMDQ5YTlhOSwgMHhiNGQ4NmM2YywgMHhmYWFjNTY1NiwgMHgwN2YzZjRmNCwgMHgyNWNmZWFlYSwgMHhhZmNhNjU2NSwgMHg4ZWY0N2E3YSwgMHhlOTQ3YWVhZSwgMHgxODEwMDgwOCwgMHhkNTZmYmFiYSwgMHg4OGYwNzg3OCwgMHg2ZjRhMjUyNSwgMHg3MjVjMmUyZSwgMHgyNDM4MWMxYywgMHhmMTU3YTZhNiwgMHhjNzczYjRiNCwgMHg1MTk3YzZjNiwgMHgyM2NiZThlOCwgMHg3Y2ExZGRkZCwgMHg5Y2U4NzQ3NCwgMHgyMTNlMWYxZiwgMHhkZDk2NGI0YiwgMHhkYzYxYmRiZCwgMHg4NjBkOGI4YiwgMHg4NTBmOGE4YSwgMHg5MGUwNzA3MCwgMHg0MjdjM2UzZSwgMHhjNDcxYjViNSwgMHhhYWNjNjY2NiwgMHhkODkwNDg0OCwgMHgwNTA2MDMwMywgMHgwMWY3ZjZmNiwgMHgxMjFjMGUwZSwgMHhhM2MyNjE2MSwgMHg1ZjZhMzUzNSwgMHhmOWFlNTc1NywgMHhkMDY5YjliOSwgMHg5MTE3ODY4NiwgMHg1ODk5YzFjMSwgMHgyNzNhMWQxZCwgMHhiOTI3OWU5ZSwgMHgzOGQ5ZTFlMSwgMHgxM2ViZjhmOCwgMHhiMzJiOTg5OCwgMHgzMzIyMTExMSwgMHhiYmQyNjk2OSwgMHg3MGE5ZDlkOSwgMHg4OTA3OGU4ZSwgMHhhNzMzOTQ5NCwgMHhiNjJkOWI5YiwgMHgyMjNjMWUxZSwgMHg5MjE1ODc4NywgMHgyMGM5ZTllOSwgMHg0OTg3Y2VjZSwgMHhmZmFhNTU1NSwgMHg3ODUwMjgyOCwgMHg3YWE1ZGZkZiwgMHg4ZjAzOGM4YywgMHhmODU5YTFhMSwgMHg4MDA5ODk4OSwgMHgxNzFhMGQwZCwgMHhkYTY1YmZiZiwgMHgzMWQ3ZTZlNiwgMHhjNjg0NDI0MiwgMHhiOGQwNjg2OCwgMHhjMzgyNDE0MSwgMHhiMDI5OTk5OSwgMHg3NzVhMmQyZCwgMHgxMTFlMGYwZiwgMHhjYjdiYjBiMCwgMHhmY2E4NTQ1NCwgMHhkNjZkYmJiYiwgMHgzYTJjMTYxNl07XG4gICAgdmFyIFQzID0gWzB4NjNhNWM2NjMsIDB4N2M4NGY4N2MsIDB4Nzc5OWVlNzcsIDB4N2I4ZGY2N2IsIDB4ZjIwZGZmZjIsIDB4NmJiZGQ2NmIsIDB4NmZiMWRlNmYsIDB4YzU1NDkxYzUsIDB4MzA1MDYwMzAsIDB4MDEwMzAyMDEsIDB4NjdhOWNlNjcsIDB4MmI3ZDU2MmIsIDB4ZmUxOWU3ZmUsIDB4ZDc2MmI1ZDcsIDB4YWJlNjRkYWIsIDB4NzY5YWVjNzYsIDB4Y2E0NThmY2EsIDB4ODI5ZDFmODIsIDB4Yzk0MDg5YzksIDB4N2Q4N2ZhN2QsIDB4ZmExNWVmZmEsIDB4NTllYmIyNTksIDB4NDdjOThlNDcsIDB4ZjAwYmZiZjAsIDB4YWRlYzQxYWQsIDB4ZDQ2N2IzZDQsIDB4YTJmZDVmYTIsIDB4YWZlYTQ1YWYsIDB4OWNiZjIzOWMsIDB4YTRmNzUzYTQsIDB4NzI5NmU0NzIsIDB4YzA1YjliYzAsIDB4YjdjMjc1YjcsIDB4ZmQxY2UxZmQsIDB4OTNhZTNkOTMsIDB4MjY2YTRjMjYsIDB4MzY1YTZjMzYsIDB4M2Y0MTdlM2YsIDB4ZjcwMmY1ZjcsIDB4Y2M0ZjgzY2MsIDB4MzQ1YzY4MzQsIDB4YTVmNDUxYTUsIDB4ZTUzNGQxZTUsIDB4ZjEwOGY5ZjEsIDB4NzE5M2UyNzEsIDB4ZDg3M2FiZDgsIDB4MzE1MzYyMzEsIDB4MTUzZjJhMTUsIDB4MDQwYzA4MDQsIDB4Yzc1Mjk1YzcsIDB4MjM2NTQ2MjMsIDB4YzM1ZTlkYzMsIDB4MTgyODMwMTgsIDB4OTZhMTM3OTYsIDB4MDUwZjBhMDUsIDB4OWFiNTJmOWEsIDB4MDcwOTBlMDcsIDB4MTIzNjI0MTIsIDB4ODA5YjFiODAsIDB4ZTIzZGRmZTIsIDB4ZWIyNmNkZWIsIDB4Mjc2OTRlMjcsIDB4YjJjZDdmYjIsIDB4NzU5ZmVhNzUsIDB4MDkxYjEyMDksIDB4ODM5ZTFkODMsIDB4MmM3NDU4MmMsIDB4MWEyZTM0MWEsIDB4MWIyZDM2MWIsIDB4NmViMmRjNmUsIDB4NWFlZWI0NWEsIDB4YTBmYjViYTAsIDB4NTJmNmE0NTIsIDB4M2I0ZDc2M2IsIDB4ZDY2MWI3ZDYsIDB4YjNjZTdkYjMsIDB4Mjk3YjUyMjksIDB4ZTMzZWRkZTMsIDB4MmY3MTVlMmYsIDB4ODQ5NzEzODQsIDB4NTNmNWE2NTMsIDB4ZDE2OGI5ZDEsIDB4MDAwMDAwMDAsIDB4ZWQyY2MxZWQsIDB4MjA2MDQwMjAsIDB4ZmMxZmUzZmMsIDB4YjFjODc5YjEsIDB4NWJlZGI2NWIsIDB4NmFiZWQ0NmEsIDB4Y2I0NjhkY2IsIDB4YmVkOTY3YmUsIDB4Mzk0YjcyMzksIDB4NGFkZTk0NGEsIDB4NGNkNDk4NGMsIDB4NThlOGIwNTgsIDB4Y2Y0YTg1Y2YsIDB4ZDA2YmJiZDAsIDB4ZWYyYWM1ZWYsIDB4YWFlNTRmYWEsIDB4ZmIxNmVkZmIsIDB4NDNjNTg2NDMsIDB4NGRkNzlhNGQsIDB4MzM1NTY2MzMsIDB4ODU5NDExODUsIDB4NDVjZjhhNDUsIDB4ZjkxMGU5ZjksIDB4MDIwNjA0MDIsIDB4N2Y4MWZlN2YsIDB4NTBmMGEwNTAsIDB4M2M0NDc4M2MsIDB4OWZiYTI1OWYsIDB4YThlMzRiYTgsIDB4NTFmM2EyNTEsIDB4YTNmZTVkYTMsIDB4NDBjMDgwNDAsIDB4OGY4YTA1OGYsIDB4OTJhZDNmOTIsIDB4OWRiYzIxOWQsIDB4Mzg0ODcwMzgsIDB4ZjUwNGYxZjUsIDB4YmNkZjYzYmMsIDB4YjZjMTc3YjYsIDB4ZGE3NWFmZGEsIDB4MjE2MzQyMjEsIDB4MTAzMDIwMTAsIDB4ZmYxYWU1ZmYsIDB4ZjMwZWZkZjMsIDB4ZDI2ZGJmZDIsIDB4Y2Q0YzgxY2QsIDB4MGMxNDE4MGMsIDB4MTMzNTI2MTMsIDB4ZWMyZmMzZWMsIDB4NWZlMWJlNWYsIDB4OTdhMjM1OTcsIDB4NDRjYzg4NDQsIDB4MTczOTJlMTcsIDB4YzQ1NzkzYzQsIDB4YTdmMjU1YTcsIDB4N2U4MmZjN2UsIDB4M2Q0NzdhM2QsIDB4NjRhY2M4NjQsIDB4NWRlN2JhNWQsIDB4MTkyYjMyMTksIDB4NzM5NWU2NzMsIDB4NjBhMGMwNjAsIDB4ODE5ODE5ODEsIDB4NGZkMTllNGYsIDB4ZGM3ZmEzZGMsIDB4MjI2NjQ0MjIsIDB4MmE3ZTU0MmEsIDB4OTBhYjNiOTAsIDB4ODg4MzBiODgsIDB4NDZjYThjNDYsIDB4ZWUyOWM3ZWUsIDB4YjhkMzZiYjgsIDB4MTQzYzI4MTQsIDB4ZGU3OWE3ZGUsIDB4NWVlMmJjNWUsIDB4MGIxZDE2MGIsIDB4ZGI3NmFkZGIsIDB4ZTAzYmRiZTAsIDB4MzI1NjY0MzIsIDB4M2E0ZTc0M2EsIDB4MGExZTE0MGEsIDB4NDlkYjkyNDksIDB4MDYwYTBjMDYsIDB4MjQ2YzQ4MjQsIDB4NWNlNGI4NWMsIDB4YzI1ZDlmYzIsIDB4ZDM2ZWJkZDMsIDB4YWNlZjQzYWMsIDB4NjJhNmM0NjIsIDB4OTFhODM5OTEsIDB4OTVhNDMxOTUsIDB4ZTQzN2QzZTQsIDB4Nzk4YmYyNzksIDB4ZTczMmQ1ZTcsIDB4Yzg0MzhiYzgsIDB4Mzc1OTZlMzcsIDB4NmRiN2RhNmQsIDB4OGQ4YzAxOGQsIDB4ZDU2NGIxZDUsIDB4NGVkMjljNGUsIDB4YTllMDQ5YTksIDB4NmNiNGQ4NmMsIDB4NTZmYWFjNTYsIDB4ZjQwN2YzZjQsIDB4ZWEyNWNmZWEsIDB4NjVhZmNhNjUsIDB4N2E4ZWY0N2EsIDB4YWVlOTQ3YWUsIDB4MDgxODEwMDgsIDB4YmFkNTZmYmEsIDB4Nzg4OGYwNzgsIDB4MjU2ZjRhMjUsIDB4MmU3MjVjMmUsIDB4MWMyNDM4MWMsIDB4YTZmMTU3YTYsIDB4YjRjNzczYjQsIDB4YzY1MTk3YzYsIDB4ZTgyM2NiZTgsIDB4ZGQ3Y2ExZGQsIDB4NzQ5Y2U4NzQsIDB4MWYyMTNlMWYsIDB4NGJkZDk2NGIsIDB4YmRkYzYxYmQsIDB4OGI4NjBkOGIsIDB4OGE4NTBmOGEsIDB4NzA5MGUwNzAsIDB4M2U0MjdjM2UsIDB4YjVjNDcxYjUsIDB4NjZhYWNjNjYsIDB4NDhkODkwNDgsIDB4MDMwNTA2MDMsIDB4ZjYwMWY3ZjYsIDB4MGUxMjFjMGUsIDB4NjFhM2MyNjEsIDB4MzU1ZjZhMzUsIDB4NTdmOWFlNTcsIDB4YjlkMDY5YjksIDB4ODY5MTE3ODYsIDB4YzE1ODk5YzEsIDB4MWQyNzNhMWQsIDB4OWViOTI3OWUsIDB4ZTEzOGQ5ZTEsIDB4ZjgxM2ViZjgsIDB4OThiMzJiOTgsIDB4MTEzMzIyMTEsIDB4NjliYmQyNjksIDB4ZDk3MGE5ZDksIDB4OGU4OTA3OGUsIDB4OTRhNzMzOTQsIDB4OWJiNjJkOWIsIDB4MWUyMjNjMWUsIDB4ODc5MjE1ODcsIDB4ZTkyMGM5ZTksIDB4Y2U0OTg3Y2UsIDB4NTVmZmFhNTUsIDB4Mjg3ODUwMjgsIDB4ZGY3YWE1ZGYsIDB4OGM4ZjAzOGMsIDB4YTFmODU5YTEsIDB4ODk4MDA5ODksIDB4MGQxNzFhMGQsIDB4YmZkYTY1YmYsIDB4ZTYzMWQ3ZTYsIDB4NDJjNjg0NDIsIDB4NjhiOGQwNjgsIDB4NDFjMzgyNDEsIDB4OTliMDI5OTksIDB4MmQ3NzVhMmQsIDB4MGYxMTFlMGYsIDB4YjBjYjdiYjAsIDB4NTRmY2E4NTQsIDB4YmJkNjZkYmIsIDB4MTYzYTJjMTZdO1xuICAgIHZhciBUNCA9IFsweDYzNjNhNWM2LCAweDdjN2M4NGY4LCAweDc3Nzc5OWVlLCAweDdiN2I4ZGY2LCAweGYyZjIwZGZmLCAweDZiNmJiZGQ2LCAweDZmNmZiMWRlLCAweGM1YzU1NDkxLCAweDMwMzA1MDYwLCAweDAxMDEwMzAyLCAweDY3NjdhOWNlLCAweDJiMmI3ZDU2LCAweGZlZmUxOWU3LCAweGQ3ZDc2MmI1LCAweGFiYWJlNjRkLCAweDc2NzY5YWVjLCAweGNhY2E0NThmLCAweDgyODI5ZDFmLCAweGM5Yzk0MDg5LCAweDdkN2Q4N2ZhLCAweGZhZmExNWVmLCAweDU5NTllYmIyLCAweDQ3NDdjOThlLCAweGYwZjAwYmZiLCAweGFkYWRlYzQxLCAweGQ0ZDQ2N2IzLCAweGEyYTJmZDVmLCAweGFmYWZlYTQ1LCAweDljOWNiZjIzLCAweGE0YTRmNzUzLCAweDcyNzI5NmU0LCAweGMwYzA1YjliLCAweGI3YjdjMjc1LCAweGZkZmQxY2UxLCAweDkzOTNhZTNkLCAweDI2MjY2YTRjLCAweDM2MzY1YTZjLCAweDNmM2Y0MTdlLCAweGY3ZjcwMmY1LCAweGNjY2M0ZjgzLCAweDM0MzQ1YzY4LCAweGE1YTVmNDUxLCAweGU1ZTUzNGQxLCAweGYxZjEwOGY5LCAweDcxNzE5M2UyLCAweGQ4ZDg3M2FiLCAweDMxMzE1MzYyLCAweDE1MTUzZjJhLCAweDA0MDQwYzA4LCAweGM3Yzc1Mjk1LCAweDIzMjM2NTQ2LCAweGMzYzM1ZTlkLCAweDE4MTgyODMwLCAweDk2OTZhMTM3LCAweDA1MDUwZjBhLCAweDlhOWFiNTJmLCAweDA3MDcwOTBlLCAweDEyMTIzNjI0LCAweDgwODA5YjFiLCAweGUyZTIzZGRmLCAweGViZWIyNmNkLCAweDI3Mjc2OTRlLCAweGIyYjJjZDdmLCAweDc1NzU5ZmVhLCAweDA5MDkxYjEyLCAweDgzODM5ZTFkLCAweDJjMmM3NDU4LCAweDFhMWEyZTM0LCAweDFiMWIyZDM2LCAweDZlNmViMmRjLCAweDVhNWFlZWI0LCAweGEwYTBmYjViLCAweDUyNTJmNmE0LCAweDNiM2I0ZDc2LCAweGQ2ZDY2MWI3LCAweGIzYjNjZTdkLCAweDI5Mjk3YjUyLCAweGUzZTMzZWRkLCAweDJmMmY3MTVlLCAweDg0ODQ5NzEzLCAweDUzNTNmNWE2LCAweGQxZDE2OGI5LCAweDAwMDAwMDAwLCAweGVkZWQyY2MxLCAweDIwMjA2MDQwLCAweGZjZmMxZmUzLCAweGIxYjFjODc5LCAweDViNWJlZGI2LCAweDZhNmFiZWQ0LCAweGNiY2I0NjhkLCAweGJlYmVkOTY3LCAweDM5Mzk0YjcyLCAweDRhNGFkZTk0LCAweDRjNGNkNDk4LCAweDU4NThlOGIwLCAweGNmY2Y0YTg1LCAweGQwZDA2YmJiLCAweGVmZWYyYWM1LCAweGFhYWFlNTRmLCAweGZiZmIxNmVkLCAweDQzNDNjNTg2LCAweDRkNGRkNzlhLCAweDMzMzM1NTY2LCAweDg1ODU5NDExLCAweDQ1NDVjZjhhLCAweGY5ZjkxMGU5LCAweDAyMDIwNjA0LCAweDdmN2Y4MWZlLCAweDUwNTBmMGEwLCAweDNjM2M0NDc4LCAweDlmOWZiYTI1LCAweGE4YThlMzRiLCAweDUxNTFmM2EyLCAweGEzYTNmZTVkLCAweDQwNDBjMDgwLCAweDhmOGY4YTA1LCAweDkyOTJhZDNmLCAweDlkOWRiYzIxLCAweDM4Mzg0ODcwLCAweGY1ZjUwNGYxLCAweGJjYmNkZjYzLCAweGI2YjZjMTc3LCAweGRhZGE3NWFmLCAweDIxMjE2MzQyLCAweDEwMTAzMDIwLCAweGZmZmYxYWU1LCAweGYzZjMwZWZkLCAweGQyZDI2ZGJmLCAweGNkY2Q0YzgxLCAweDBjMGMxNDE4LCAweDEzMTMzNTI2LCAweGVjZWMyZmMzLCAweDVmNWZlMWJlLCAweDk3OTdhMjM1LCAweDQ0NDRjYzg4LCAweDE3MTczOTJlLCAweGM0YzQ1NzkzLCAweGE3YTdmMjU1LCAweDdlN2U4MmZjLCAweDNkM2Q0NzdhLCAweDY0NjRhY2M4LCAweDVkNWRlN2JhLCAweDE5MTkyYjMyLCAweDczNzM5NWU2LCAweDYwNjBhMGMwLCAweDgxODE5ODE5LCAweDRmNGZkMTllLCAweGRjZGM3ZmEzLCAweDIyMjI2NjQ0LCAweDJhMmE3ZTU0LCAweDkwOTBhYjNiLCAweDg4ODg4MzBiLCAweDQ2NDZjYThjLCAweGVlZWUyOWM3LCAweGI4YjhkMzZiLCAweDE0MTQzYzI4LCAweGRlZGU3OWE3LCAweDVlNWVlMmJjLCAweDBiMGIxZDE2LCAweGRiZGI3NmFkLCAweGUwZTAzYmRiLCAweDMyMzI1NjY0LCAweDNhM2E0ZTc0LCAweDBhMGExZTE0LCAweDQ5NDlkYjkyLCAweDA2MDYwYTBjLCAweDI0MjQ2YzQ4LCAweDVjNWNlNGI4LCAweGMyYzI1ZDlmLCAweGQzZDM2ZWJkLCAweGFjYWNlZjQzLCAweDYyNjJhNmM0LCAweDkxOTFhODM5LCAweDk1OTVhNDMxLCAweGU0ZTQzN2QzLCAweDc5Nzk4YmYyLCAweGU3ZTczMmQ1LCAweGM4Yzg0MzhiLCAweDM3Mzc1OTZlLCAweDZkNmRiN2RhLCAweDhkOGQ4YzAxLCAweGQ1ZDU2NGIxLCAweDRlNGVkMjljLCAweGE5YTllMDQ5LCAweDZjNmNiNGQ4LCAweDU2NTZmYWFjLCAweGY0ZjQwN2YzLCAweGVhZWEyNWNmLCAweDY1NjVhZmNhLCAweDdhN2E4ZWY0LCAweGFlYWVlOTQ3LCAweDA4MDgxODEwLCAweGJhYmFkNTZmLCAweDc4Nzg4OGYwLCAweDI1MjU2ZjRhLCAweDJlMmU3MjVjLCAweDFjMWMyNDM4LCAweGE2YTZmMTU3LCAweGI0YjRjNzczLCAweGM2YzY1MTk3LCAweGU4ZTgyM2NiLCAweGRkZGQ3Y2ExLCAweDc0NzQ5Y2U4LCAweDFmMWYyMTNlLCAweDRiNGJkZDk2LCAweGJkYmRkYzYxLCAweDhiOGI4NjBkLCAweDhhOGE4NTBmLCAweDcwNzA5MGUwLCAweDNlM2U0MjdjLCAweGI1YjVjNDcxLCAweDY2NjZhYWNjLCAweDQ4NDhkODkwLCAweDAzMDMwNTA2LCAweGY2ZjYwMWY3LCAweDBlMGUxMjFjLCAweDYxNjFhM2MyLCAweDM1MzU1ZjZhLCAweDU3NTdmOWFlLCAweGI5YjlkMDY5LCAweDg2ODY5MTE3LCAweGMxYzE1ODk5LCAweDFkMWQyNzNhLCAweDllOWViOTI3LCAweGUxZTEzOGQ5LCAweGY4ZjgxM2ViLCAweDk4OThiMzJiLCAweDExMTEzMzIyLCAweDY5NjliYmQyLCAweGQ5ZDk3MGE5LCAweDhlOGU4OTA3LCAweDk0OTRhNzMzLCAweDliOWJiNjJkLCAweDFlMWUyMjNjLCAweDg3ODc5MjE1LCAweGU5ZTkyMGM5LCAweGNlY2U0OTg3LCAweDU1NTVmZmFhLCAweDI4Mjg3ODUwLCAweGRmZGY3YWE1LCAweDhjOGM4ZjAzLCAweGExYTFmODU5LCAweDg5ODk4MDA5LCAweDBkMGQxNzFhLCAweGJmYmZkYTY1LCAweGU2ZTYzMWQ3LCAweDQyNDJjNjg0LCAweDY4NjhiOGQwLCAweDQxNDFjMzgyLCAweDk5OTliMDI5LCAweDJkMmQ3NzVhLCAweDBmMGYxMTFlLCAweGIwYjBjYjdiLCAweDU0NTRmY2E4LCAweGJiYmJkNjZkLCAweDE2MTYzYTJjXTtcblxuICAgIC8vIFRyYW5zZm9ybWF0aW9ucyBmb3IgZGVjcnlwdGlvblxuICAgIHZhciBUNSA9IFsweDUxZjRhNzUwLCAweDdlNDE2NTUzLCAweDFhMTdhNGMzLCAweDNhMjc1ZTk2LCAweDNiYWI2YmNiLCAweDFmOWQ0NWYxLCAweGFjZmE1OGFiLCAweDRiZTMwMzkzLCAweDIwMzBmYTU1LCAweGFkNzY2ZGY2LCAweDg4Y2M3NjkxLCAweGY1MDI0YzI1LCAweDRmZTVkN2ZjLCAweGM1MmFjYmQ3LCAweDI2MzU0NDgwLCAweGI1NjJhMzhmLCAweGRlYjE1YTQ5LCAweDI1YmExYjY3LCAweDQ1ZWEwZTk4LCAweDVkZmVjMGUxLCAweGMzMmY3NTAyLCAweDgxNGNmMDEyLCAweDhkNDY5N2EzLCAweDZiZDNmOWM2LCAweDAzOGY1ZmU3LCAweDE1OTI5Yzk1LCAweGJmNmQ3YWViLCAweDk1NTI1OWRhLCAweGQ0YmU4MzJkLCAweDU4NzQyMWQzLCAweDQ5ZTA2OTI5LCAweDhlYzljODQ0LCAweDc1YzI4OTZhLCAweGY0OGU3OTc4LCAweDk5NTgzZTZiLCAweDI3Yjk3MWRkLCAweGJlZTE0ZmI2LCAweGYwODhhZDE3LCAweGM5MjBhYzY2LCAweDdkY2UzYWI0LCAweDYzZGY0YTE4LCAweGU1MWEzMTgyLCAweDk3NTEzMzYwLCAweDYyNTM3ZjQ1LCAweGIxNjQ3N2UwLCAweGJiNmJhZTg0LCAweGZlODFhMDFjLCAweGY5MDgyYjk0LCAweDcwNDg2ODU4LCAweDhmNDVmZDE5LCAweDk0ZGU2Yzg3LCAweDUyN2JmOGI3LCAweGFiNzNkMzIzLCAweDcyNGIwMmUyLCAweGUzMWY4ZjU3LCAweDY2NTVhYjJhLCAweGIyZWIyODA3LCAweDJmYjVjMjAzLCAweDg2YzU3YjlhLCAweGQzMzcwOGE1LCAweDMwMjg4N2YyLCAweDIzYmZhNWIyLCAweDAyMDM2YWJhLCAweGVkMTY4MjVjLCAweDhhY2YxYzJiLCAweGE3NzliNDkyLCAweGYzMDdmMmYwLCAweDRlNjllMmExLCAweDY1ZGFmNGNkLCAweDA2MDViZWQ1LCAweGQxMzQ2MjFmLCAweGM0YTZmZThhLCAweDM0MmU1MzlkLCAweGEyZjM1NWEwLCAweDA1OGFlMTMyLCAweGE0ZjZlYjc1LCAweDBiODNlYzM5LCAweDQwNjBlZmFhLCAweDVlNzE5ZjA2LCAweGJkNmUxMDUxLCAweDNlMjE4YWY5LCAweDk2ZGQwNjNkLCAweGRkM2UwNWFlLCAweDRkZTZiZDQ2LCAweDkxNTQ4ZGI1LCAweDcxYzQ1ZDA1LCAweDA0MDZkNDZmLCAweDYwNTAxNWZmLCAweDE5OThmYjI0LCAweGQ2YmRlOTk3LCAweDg5NDA0M2NjLCAweDY3ZDk5ZTc3LCAweGIwZTg0MmJkLCAweDA3ODk4Yjg4LCAweGU3MTk1YjM4LCAweDc5YzhlZWRiLCAweGExN2MwYTQ3LCAweDdjNDIwZmU5LCAweGY4ODQxZWM5LCAweDAwMDAwMDAwLCAweDA5ODA4NjgzLCAweDMyMmJlZDQ4LCAweDFlMTE3MGFjLCAweDZjNWE3MjRlLCAweGZkMGVmZmZiLCAweDBmODUzODU2LCAweDNkYWVkNTFlLCAweDM2MmQzOTI3LCAweDBhMGZkOTY0LCAweDY4NWNhNjIxLCAweDliNWI1NGQxLCAweDI0MzYyZTNhLCAweDBjMGE2N2IxLCAweDkzNTdlNzBmLCAweGI0ZWU5NmQyLCAweDFiOWI5MTllLCAweDgwYzBjNTRmLCAweDYxZGMyMGEyLCAweDVhNzc0YjY5LCAweDFjMTIxYTE2LCAweGUyOTNiYTBhLCAweGMwYTAyYWU1LCAweDNjMjJlMDQzLCAweDEyMWIxNzFkLCAweDBlMDkwZDBiLCAweGYyOGJjN2FkLCAweDJkYjZhOGI5LCAweDE0MWVhOWM4LCAweDU3ZjExOTg1LCAweGFmNzUwNzRjLCAweGVlOTlkZGJiLCAweGEzN2Y2MGZkLCAweGY3MDEyNjlmLCAweDVjNzJmNWJjLCAweDQ0NjYzYmM1LCAweDViZmI3ZTM0LCAweDhiNDMyOTc2LCAweGNiMjNjNmRjLCAweGI2ZWRmYzY4LCAweGI4ZTRmMTYzLCAweGQ3MzFkY2NhLCAweDQyNjM4NTEwLCAweDEzOTcyMjQwLCAweDg0YzYxMTIwLCAweDg1NGEyNDdkLCAweGQyYmIzZGY4LCAweGFlZjkzMjExLCAweGM3MjlhMTZkLCAweDFkOWUyZjRiLCAweGRjYjIzMGYzLCAweDBkODY1MmVjLCAweDc3YzFlM2QwLCAweDJiYjMxNjZjLCAweGE5NzBiOTk5LCAweDExOTQ0OGZhLCAweDQ3ZTk2NDIyLCAweGE4ZmM4Y2M0LCAweGEwZjAzZjFhLCAweDU2N2QyY2Q4LCAweDIyMzM5MGVmLCAweDg3NDk0ZWM3LCAweGQ5MzhkMWMxLCAweDhjY2FhMmZlLCAweDk4ZDQwYjM2LCAweGE2ZjU4MWNmLCAweGE1N2FkZTI4LCAweGRhYjc4ZTI2LCAweDNmYWRiZmE0LCAweDJjM2E5ZGU0LCAweDUwNzg5MjBkLCAweDZhNWZjYzliLCAweDU0N2U0NjYyLCAweGY2OGQxM2MyLCAweDkwZDhiOGU4LCAweDJlMzlmNzVlLCAweDgyYzNhZmY1LCAweDlmNWQ4MGJlLCAweDY5ZDA5MzdjLCAweDZmZDUyZGE5LCAweGNmMjUxMmIzLCAweGM4YWM5OTNiLCAweDEwMTg3ZGE3LCAweGU4OWM2MzZlLCAweGRiM2JiYjdiLCAweGNkMjY3ODA5LCAweDZlNTkxOGY0LCAweGVjOWFiNzAxLCAweDgzNGY5YWE4LCAweGU2OTU2ZTY1LCAweGFhZmZlNjdlLCAweDIxYmNjZjA4LCAweGVmMTVlOGU2LCAweGJhZTc5YmQ5LCAweDRhNmYzNmNlLCAweGVhOWYwOWQ0LCAweDI5YjA3Y2Q2LCAweDMxYTRiMmFmLCAweDJhM2YyMzMxLCAweGM2YTU5NDMwLCAweDM1YTI2NmMwLCAweDc0NGViYzM3LCAweGZjODJjYWE2LCAweGUwOTBkMGIwLCAweDMzYTdkODE1LCAweGYxMDQ5ODRhLCAweDQxZWNkYWY3LCAweDdmY2Q1MDBlLCAweDE3OTFmNjJmLCAweDc2NGRkNjhkLCAweDQzZWZiMDRkLCAweGNjYWE0ZDU0LCAweGU0OTYwNGRmLCAweDllZDFiNWUzLCAweDRjNmE4ODFiLCAweGMxMmMxZmI4LCAweDQ2NjU1MTdmLCAweDlkNWVlYTA0LCAweDAxOGMzNTVkLCAweGZhODc3NDczLCAweGZiMGI0MTJlLCAweGIzNjcxZDVhLCAweDkyZGJkMjUyLCAweGU5MTA1NjMzLCAweDZkZDY0NzEzLCAweDlhZDc2MThjLCAweDM3YTEwYzdhLCAweDU5ZjgxNDhlLCAweGViMTMzYzg5LCAweGNlYTkyN2VlLCAweGI3NjFjOTM1LCAweGUxMWNlNWVkLCAweDdhNDdiMTNjLCAweDljZDJkZjU5LCAweDU1ZjI3MzNmLCAweDE4MTRjZTc5LCAweDczYzczN2JmLCAweDUzZjdjZGVhLCAweDVmZmRhYTViLCAweGRmM2Q2ZjE0LCAweDc4NDRkYjg2LCAweGNhYWZmMzgxLCAweGI5NjhjNDNlLCAweDM4MjQzNDJjLCAweGMyYTM0MDVmLCAweDE2MWRjMzcyLCAweGJjZTIyNTBjLCAweDI4M2M0OThiLCAweGZmMGQ5NTQxLCAweDM5YTgwMTcxLCAweDA4MGNiM2RlLCAweGQ4YjRlNDljLCAweDY0NTZjMTkwLCAweDdiY2I4NDYxLCAweGQ1MzJiNjcwLCAweDQ4NmM1Yzc0LCAweGQwYjg1NzQyXTtcbiAgICB2YXIgVDYgPSBbMHg1MDUxZjRhNywgMHg1MzdlNDE2NSwgMHhjMzFhMTdhNCwgMHg5NjNhMjc1ZSwgMHhjYjNiYWI2YiwgMHhmMTFmOWQ0NSwgMHhhYmFjZmE1OCwgMHg5MzRiZTMwMywgMHg1NTIwMzBmYSwgMHhmNmFkNzY2ZCwgMHg5MTg4Y2M3NiwgMHgyNWY1MDI0YywgMHhmYzRmZTVkNywgMHhkN2M1MmFjYiwgMHg4MDI2MzU0NCwgMHg4ZmI1NjJhMywgMHg0OWRlYjE1YSwgMHg2NzI1YmExYiwgMHg5ODQ1ZWEwZSwgMHhlMTVkZmVjMCwgMHgwMmMzMmY3NSwgMHgxMjgxNGNmMCwgMHhhMzhkNDY5NywgMHhjNjZiZDNmOSwgMHhlNzAzOGY1ZiwgMHg5NTE1OTI5YywgMHhlYmJmNmQ3YSwgMHhkYTk1NTI1OSwgMHgyZGQ0YmU4MywgMHhkMzU4NzQyMSwgMHgyOTQ5ZTA2OSwgMHg0NDhlYzljOCwgMHg2YTc1YzI4OSwgMHg3OGY0OGU3OSwgMHg2Yjk5NTgzZSwgMHhkZDI3Yjk3MSwgMHhiNmJlZTE0ZiwgMHgxN2YwODhhZCwgMHg2NmM5MjBhYywgMHhiNDdkY2UzYSwgMHgxODYzZGY0YSwgMHg4MmU1MWEzMSwgMHg2MDk3NTEzMywgMHg0NTYyNTM3ZiwgMHhlMGIxNjQ3NywgMHg4NGJiNmJhZSwgMHgxY2ZlODFhMCwgMHg5NGY5MDgyYiwgMHg1ODcwNDg2OCwgMHgxOThmNDVmZCwgMHg4Nzk0ZGU2YywgMHhiNzUyN2JmOCwgMHgyM2FiNzNkMywgMHhlMjcyNGIwMiwgMHg1N2UzMWY4ZiwgMHgyYTY2NTVhYiwgMHgwN2IyZWIyOCwgMHgwMzJmYjVjMiwgMHg5YTg2YzU3YiwgMHhhNWQzMzcwOCwgMHhmMjMwMjg4NywgMHhiMjIzYmZhNSwgMHhiYTAyMDM2YSwgMHg1Y2VkMTY4MiwgMHgyYjhhY2YxYywgMHg5MmE3NzliNCwgMHhmMGYzMDdmMiwgMHhhMTRlNjllMiwgMHhjZDY1ZGFmNCwgMHhkNTA2MDViZSwgMHgxZmQxMzQ2MiwgMHg4YWM0YTZmZSwgMHg5ZDM0MmU1MywgMHhhMGEyZjM1NSwgMHgzMjA1OGFlMSwgMHg3NWE0ZjZlYiwgMHgzOTBiODNlYywgMHhhYTQwNjBlZiwgMHgwNjVlNzE5ZiwgMHg1MWJkNmUxMCwgMHhmOTNlMjE4YSwgMHgzZDk2ZGQwNiwgMHhhZWRkM2UwNSwgMHg0NjRkZTZiZCwgMHhiNTkxNTQ4ZCwgMHgwNTcxYzQ1ZCwgMHg2ZjA0MDZkNCwgMHhmZjYwNTAxNSwgMHgyNDE5OThmYiwgMHg5N2Q2YmRlOSwgMHhjYzg5NDA0MywgMHg3NzY3ZDk5ZSwgMHhiZGIwZTg0MiwgMHg4ODA3ODk4YiwgMHgzOGU3MTk1YiwgMHhkYjc5YzhlZSwgMHg0N2ExN2MwYSwgMHhlOTdjNDIwZiwgMHhjOWY4ODQxZSwgMHgwMDAwMDAwMCwgMHg4MzA5ODA4NiwgMHg0ODMyMmJlZCwgMHhhYzFlMTE3MCwgMHg0ZTZjNWE3MiwgMHhmYmZkMGVmZiwgMHg1NjBmODUzOCwgMHgxZTNkYWVkNSwgMHgyNzM2MmQzOSwgMHg2NDBhMGZkOSwgMHgyMTY4NWNhNiwgMHhkMTliNWI1NCwgMHgzYTI0MzYyZSwgMHhiMTBjMGE2NywgMHgwZjkzNTdlNywgMHhkMmI0ZWU5NiwgMHg5ZTFiOWI5MSwgMHg0ZjgwYzBjNSwgMHhhMjYxZGMyMCwgMHg2OTVhNzc0YiwgMHgxNjFjMTIxYSwgMHgwYWUyOTNiYSwgMHhlNWMwYTAyYSwgMHg0MzNjMjJlMCwgMHgxZDEyMWIxNywgMHgwYjBlMDkwZCwgMHhhZGYyOGJjNywgMHhiOTJkYjZhOCwgMHhjODE0MWVhOSwgMHg4NTU3ZjExOSwgMHg0Y2FmNzUwNywgMHhiYmVlOTlkZCwgMHhmZGEzN2Y2MCwgMHg5ZmY3MDEyNiwgMHhiYzVjNzJmNSwgMHhjNTQ0NjYzYiwgMHgzNDViZmI3ZSwgMHg3NjhiNDMyOSwgMHhkY2NiMjNjNiwgMHg2OGI2ZWRmYywgMHg2M2I4ZTRmMSwgMHhjYWQ3MzFkYywgMHgxMDQyNjM4NSwgMHg0MDEzOTcyMiwgMHgyMDg0YzYxMSwgMHg3ZDg1NGEyNCwgMHhmOGQyYmIzZCwgMHgxMWFlZjkzMiwgMHg2ZGM3MjlhMSwgMHg0YjFkOWUyZiwgMHhmM2RjYjIzMCwgMHhlYzBkODY1MiwgMHhkMDc3YzFlMywgMHg2YzJiYjMxNiwgMHg5OWE5NzBiOSwgMHhmYTExOTQ0OCwgMHgyMjQ3ZTk2NCwgMHhjNGE4ZmM4YywgMHgxYWEwZjAzZiwgMHhkODU2N2QyYywgMHhlZjIyMzM5MCwgMHhjNzg3NDk0ZSwgMHhjMWQ5MzhkMSwgMHhmZThjY2FhMiwgMHgzNjk4ZDQwYiwgMHhjZmE2ZjU4MSwgMHgyOGE1N2FkZSwgMHgyNmRhYjc4ZSwgMHhhNDNmYWRiZiwgMHhlNDJjM2E5ZCwgMHgwZDUwNzg5MiwgMHg5YjZhNWZjYywgMHg2MjU0N2U0NiwgMHhjMmY2OGQxMywgMHhlODkwZDhiOCwgMHg1ZTJlMzlmNywgMHhmNTgyYzNhZiwgMHhiZTlmNWQ4MCwgMHg3YzY5ZDA5MywgMHhhOTZmZDUyZCwgMHhiM2NmMjUxMiwgMHgzYmM4YWM5OSwgMHhhNzEwMTg3ZCwgMHg2ZWU4OWM2MywgMHg3YmRiM2JiYiwgMHgwOWNkMjY3OCwgMHhmNDZlNTkxOCwgMHgwMWVjOWFiNywgMHhhODgzNGY5YSwgMHg2NWU2OTU2ZSwgMHg3ZWFhZmZlNiwgMHgwODIxYmNjZiwgMHhlNmVmMTVlOCwgMHhkOWJhZTc5YiwgMHhjZTRhNmYzNiwgMHhkNGVhOWYwOSwgMHhkNjI5YjA3YywgMHhhZjMxYTRiMiwgMHgzMTJhM2YyMywgMHgzMGM2YTU5NCwgMHhjMDM1YTI2NiwgMHgzNzc0NGViYywgMHhhNmZjODJjYSwgMHhiMGUwOTBkMCwgMHgxNTMzYTdkOCwgMHg0YWYxMDQ5OCwgMHhmNzQxZWNkYSwgMHgwZTdmY2Q1MCwgMHgyZjE3OTFmNiwgMHg4ZDc2NGRkNiwgMHg0ZDQzZWZiMCwgMHg1NGNjYWE0ZCwgMHhkZmU0OTYwNCwgMHhlMzllZDFiNSwgMHgxYjRjNmE4OCwgMHhiOGMxMmMxZiwgMHg3ZjQ2NjU1MSwgMHgwNDlkNWVlYSwgMHg1ZDAxOGMzNSwgMHg3M2ZhODc3NCwgMHgyZWZiMGI0MSwgMHg1YWIzNjcxZCwgMHg1MjkyZGJkMiwgMHgzM2U5MTA1NiwgMHgxMzZkZDY0NywgMHg4YzlhZDc2MSwgMHg3YTM3YTEwYywgMHg4ZTU5ZjgxNCwgMHg4OWViMTMzYywgMHhlZWNlYTkyNywgMHgzNWI3NjFjOSwgMHhlZGUxMWNlNSwgMHgzYzdhNDdiMSwgMHg1OTljZDJkZiwgMHgzZjU1ZjI3MywgMHg3OTE4MTRjZSwgMHhiZjczYzczNywgMHhlYTUzZjdjZCwgMHg1YjVmZmRhYSwgMHgxNGRmM2Q2ZiwgMHg4Njc4NDRkYiwgMHg4MWNhYWZmMywgMHgzZWI5NjhjNCwgMHgyYzM4MjQzNCwgMHg1ZmMyYTM0MCwgMHg3MjE2MWRjMywgMHgwY2JjZTIyNSwgMHg4YjI4M2M0OSwgMHg0MWZmMGQ5NSwgMHg3MTM5YTgwMSwgMHhkZTA4MGNiMywgMHg5Y2Q4YjRlNCwgMHg5MDY0NTZjMSwgMHg2MTdiY2I4NCwgMHg3MGQ1MzJiNiwgMHg3NDQ4NmM1YywgMHg0MmQwYjg1N107XG4gICAgdmFyIFQ3ID0gWzB4YTc1MDUxZjQsIDB4NjU1MzdlNDEsIDB4YTRjMzFhMTcsIDB4NWU5NjNhMjcsIDB4NmJjYjNiYWIsIDB4NDVmMTFmOWQsIDB4NThhYmFjZmEsIDB4MDM5MzRiZTMsIDB4ZmE1NTIwMzAsIDB4NmRmNmFkNzYsIDB4NzY5MTg4Y2MsIDB4NGMyNWY1MDIsIDB4ZDdmYzRmZTUsIDB4Y2JkN2M1MmEsIDB4NDQ4MDI2MzUsIDB4YTM4ZmI1NjIsIDB4NWE0OWRlYjEsIDB4MWI2NzI1YmEsIDB4MGU5ODQ1ZWEsIDB4YzBlMTVkZmUsIDB4NzUwMmMzMmYsIDB4ZjAxMjgxNGMsIDB4OTdhMzhkNDYsIDB4ZjljNjZiZDMsIDB4NWZlNzAzOGYsIDB4OWM5NTE1OTIsIDB4N2FlYmJmNmQsIDB4NTlkYTk1NTIsIDB4ODMyZGQ0YmUsIDB4MjFkMzU4NzQsIDB4NjkyOTQ5ZTAsIDB4Yzg0NDhlYzksIDB4ODk2YTc1YzIsIDB4Nzk3OGY0OGUsIDB4M2U2Yjk5NTgsIDB4NzFkZDI3YjksIDB4NGZiNmJlZTEsIDB4YWQxN2YwODgsIDB4YWM2NmM5MjAsIDB4M2FiNDdkY2UsIDB4NGExODYzZGYsIDB4MzE4MmU1MWEsIDB4MzM2MDk3NTEsIDB4N2Y0NTYyNTMsIDB4NzdlMGIxNjQsIDB4YWU4NGJiNmIsIDB4YTAxY2ZlODEsIDB4MmI5NGY5MDgsIDB4Njg1ODcwNDgsIDB4ZmQxOThmNDUsIDB4NmM4Nzk0ZGUsIDB4ZjhiNzUyN2IsIDB4ZDMyM2FiNzMsIDB4MDJlMjcyNGIsIDB4OGY1N2UzMWYsIDB4YWIyYTY2NTUsIDB4MjgwN2IyZWIsIDB4YzIwMzJmYjUsIDB4N2I5YTg2YzUsIDB4MDhhNWQzMzcsIDB4ODdmMjMwMjgsIDB4YTViMjIzYmYsIDB4NmFiYTAyMDMsIDB4ODI1Y2VkMTYsIDB4MWMyYjhhY2YsIDB4YjQ5MmE3NzksIDB4ZjJmMGYzMDcsIDB4ZTJhMTRlNjksIDB4ZjRjZDY1ZGEsIDB4YmVkNTA2MDUsIDB4NjIxZmQxMzQsIDB4ZmU4YWM0YTYsIDB4NTM5ZDM0MmUsIDB4NTVhMGEyZjMsIDB4ZTEzMjA1OGEsIDB4ZWI3NWE0ZjYsIDB4ZWMzOTBiODMsIDB4ZWZhYTQwNjAsIDB4OWYwNjVlNzEsIDB4MTA1MWJkNmUsIDB4OGFmOTNlMjEsIDB4MDYzZDk2ZGQsIDB4MDVhZWRkM2UsIDB4YmQ0NjRkZTYsIDB4OGRiNTkxNTQsIDB4NWQwNTcxYzQsIDB4ZDQ2ZjA0MDYsIDB4MTVmZjYwNTAsIDB4ZmIyNDE5OTgsIDB4ZTk5N2Q2YmQsIDB4NDNjYzg5NDAsIDB4OWU3NzY3ZDksIDB4NDJiZGIwZTgsIDB4OGI4ODA3ODksIDB4NWIzOGU3MTksIDB4ZWVkYjc5YzgsIDB4MGE0N2ExN2MsIDB4MGZlOTdjNDIsIDB4MWVjOWY4ODQsIDB4MDAwMDAwMDAsIDB4ODY4MzA5ODAsIDB4ZWQ0ODMyMmIsIDB4NzBhYzFlMTEsIDB4NzI0ZTZjNWEsIDB4ZmZmYmZkMGUsIDB4Mzg1NjBmODUsIDB4ZDUxZTNkYWUsIDB4MzkyNzM2MmQsIDB4ZDk2NDBhMGYsIDB4YTYyMTY4NWMsIDB4NTRkMTliNWIsIDB4MmUzYTI0MzYsIDB4NjdiMTBjMGEsIDB4ZTcwZjkzNTcsIDB4OTZkMmI0ZWUsIDB4OTE5ZTFiOWIsIDB4YzU0ZjgwYzAsIDB4MjBhMjYxZGMsIDB4NGI2OTVhNzcsIDB4MWExNjFjMTIsIDB4YmEwYWUyOTMsIDB4MmFlNWMwYTAsIDB4ZTA0MzNjMjIsIDB4MTcxZDEyMWIsIDB4MGQwYjBlMDksIDB4YzdhZGYyOGIsIDB4YThiOTJkYjYsIDB4YTljODE0MWUsIDB4MTk4NTU3ZjEsIDB4MDc0Y2FmNzUsIDB4ZGRiYmVlOTksIDB4NjBmZGEzN2YsIDB4MjY5ZmY3MDEsIDB4ZjViYzVjNzIsIDB4M2JjNTQ0NjYsIDB4N2UzNDViZmIsIDB4Mjk3NjhiNDMsIDB4YzZkY2NiMjMsIDB4ZmM2OGI2ZWQsIDB4ZjE2M2I4ZTQsIDB4ZGNjYWQ3MzEsIDB4ODUxMDQyNjMsIDB4MjI0MDEzOTcsIDB4MTEyMDg0YzYsIDB4MjQ3ZDg1NGEsIDB4M2RmOGQyYmIsIDB4MzIxMWFlZjksIDB4YTE2ZGM3MjksIDB4MmY0YjFkOWUsIDB4MzBmM2RjYjIsIDB4NTJlYzBkODYsIDB4ZTNkMDc3YzEsIDB4MTY2YzJiYjMsIDB4Yjk5OWE5NzAsIDB4NDhmYTExOTQsIDB4NjQyMjQ3ZTksIDB4OGNjNGE4ZmMsIDB4M2YxYWEwZjAsIDB4MmNkODU2N2QsIDB4OTBlZjIyMzMsIDB4NGVjNzg3NDksIDB4ZDFjMWQ5MzgsIDB4YTJmZThjY2EsIDB4MGIzNjk4ZDQsIDB4ODFjZmE2ZjUsIDB4ZGUyOGE1N2EsIDB4OGUyNmRhYjcsIDB4YmZhNDNmYWQsIDB4OWRlNDJjM2EsIDB4OTIwZDUwNzgsIDB4Y2M5YjZhNWYsIDB4NDY2MjU0N2UsIDB4MTNjMmY2OGQsIDB4YjhlODkwZDgsIDB4Zjc1ZTJlMzksIDB4YWZmNTgyYzMsIDB4ODBiZTlmNWQsIDB4OTM3YzY5ZDAsIDB4MmRhOTZmZDUsIDB4MTJiM2NmMjUsIDB4OTkzYmM4YWMsIDB4N2RhNzEwMTgsIDB4NjM2ZWU4OWMsIDB4YmI3YmRiM2IsIDB4NzgwOWNkMjYsIDB4MThmNDZlNTksIDB4YjcwMWVjOWEsIDB4OWFhODgzNGYsIDB4NmU2NWU2OTUsIDB4ZTY3ZWFhZmYsIDB4Y2YwODIxYmMsIDB4ZThlNmVmMTUsIDB4OWJkOWJhZTcsIDB4MzZjZTRhNmYsIDB4MDlkNGVhOWYsIDB4N2NkNjI5YjAsIDB4YjJhZjMxYTQsIDB4MjMzMTJhM2YsIDB4OTQzMGM2YTUsIDB4NjZjMDM1YTIsIDB4YmMzNzc0NGUsIDB4Y2FhNmZjODIsIDB4ZDBiMGUwOTAsIDB4ZDgxNTMzYTcsIDB4OTg0YWYxMDQsIDB4ZGFmNzQxZWMsIDB4NTAwZTdmY2QsIDB4ZjYyZjE3OTEsIDB4ZDY4ZDc2NGQsIDB4YjA0ZDQzZWYsIDB4NGQ1NGNjYWEsIDB4MDRkZmU0OTYsIDB4YjVlMzllZDEsIDB4ODgxYjRjNmEsIDB4MWZiOGMxMmMsIDB4NTE3ZjQ2NjUsIDB4ZWEwNDlkNWUsIDB4MzU1ZDAxOGMsIDB4NzQ3M2ZhODcsIDB4NDEyZWZiMGIsIDB4MWQ1YWIzNjcsIDB4ZDI1MjkyZGIsIDB4NTYzM2U5MTAsIDB4NDcxMzZkZDYsIDB4NjE4YzlhZDcsIDB4MGM3YTM3YTEsIDB4MTQ4ZTU5ZjgsIDB4M2M4OWViMTMsIDB4MjdlZWNlYTksIDB4YzkzNWI3NjEsIDB4ZTVlZGUxMWMsIDB4YjEzYzdhNDcsIDB4ZGY1OTljZDIsIDB4NzMzZjU1ZjIsIDB4Y2U3OTE4MTQsIDB4MzdiZjczYzcsIDB4Y2RlYTUzZjcsIDB4YWE1YjVmZmQsIDB4NmYxNGRmM2QsIDB4ZGI4Njc4NDQsIDB4ZjM4MWNhYWYsIDB4YzQzZWI5NjgsIDB4MzQyYzM4MjQsIDB4NDA1ZmMyYTMsIDB4YzM3MjE2MWQsIDB4MjUwY2JjZTIsIDB4NDk4YjI4M2MsIDB4OTU0MWZmMGQsIDB4MDE3MTM5YTgsIDB4YjNkZTA4MGMsIDB4ZTQ5Y2Q4YjQsIDB4YzE5MDY0NTYsIDB4ODQ2MTdiY2IsIDB4YjY3MGQ1MzIsIDB4NWM3NDQ4NmMsIDB4NTc0MmQwYjhdO1xuICAgIHZhciBUOCA9IFsweGY0YTc1MDUxLCAweDQxNjU1MzdlLCAweDE3YTRjMzFhLCAweDI3NWU5NjNhLCAweGFiNmJjYjNiLCAweDlkNDVmMTFmLCAweGZhNThhYmFjLCAweGUzMDM5MzRiLCAweDMwZmE1NTIwLCAweDc2NmRmNmFkLCAweGNjNzY5MTg4LCAweDAyNGMyNWY1LCAweGU1ZDdmYzRmLCAweDJhY2JkN2M1LCAweDM1NDQ4MDI2LCAweDYyYTM4ZmI1LCAweGIxNWE0OWRlLCAweGJhMWI2NzI1LCAweGVhMGU5ODQ1LCAweGZlYzBlMTVkLCAweDJmNzUwMmMzLCAweDRjZjAxMjgxLCAweDQ2OTdhMzhkLCAweGQzZjljNjZiLCAweDhmNWZlNzAzLCAweDkyOWM5NTE1LCAweDZkN2FlYmJmLCAweDUyNTlkYTk1LCAweGJlODMyZGQ0LCAweDc0MjFkMzU4LCAweGUwNjkyOTQ5LCAweGM5Yzg0NDhlLCAweGMyODk2YTc1LCAweDhlNzk3OGY0LCAweDU4M2U2Yjk5LCAweGI5NzFkZDI3LCAweGUxNGZiNmJlLCAweDg4YWQxN2YwLCAweDIwYWM2NmM5LCAweGNlM2FiNDdkLCAweGRmNGExODYzLCAweDFhMzE4MmU1LCAweDUxMzM2MDk3LCAweDUzN2Y0NTYyLCAweDY0NzdlMGIxLCAweDZiYWU4NGJiLCAweDgxYTAxY2ZlLCAweDA4MmI5NGY5LCAweDQ4Njg1ODcwLCAweDQ1ZmQxOThmLCAweGRlNmM4Nzk0LCAweDdiZjhiNzUyLCAweDczZDMyM2FiLCAweDRiMDJlMjcyLCAweDFmOGY1N2UzLCAweDU1YWIyYTY2LCAweGViMjgwN2IyLCAweGI1YzIwMzJmLCAweGM1N2I5YTg2LCAweDM3MDhhNWQzLCAweDI4ODdmMjMwLCAweGJmYTViMjIzLCAweDAzNmFiYTAyLCAweDE2ODI1Y2VkLCAweGNmMWMyYjhhLCAweDc5YjQ5MmE3LCAweDA3ZjJmMGYzLCAweDY5ZTJhMTRlLCAweGRhZjRjZDY1LCAweDA1YmVkNTA2LCAweDM0NjIxZmQxLCAweGE2ZmU4YWM0LCAweDJlNTM5ZDM0LCAweGYzNTVhMGEyLCAweDhhZTEzMjA1LCAweGY2ZWI3NWE0LCAweDgzZWMzOTBiLCAweDYwZWZhYTQwLCAweDcxOWYwNjVlLCAweDZlMTA1MWJkLCAweDIxOGFmOTNlLCAweGRkMDYzZDk2LCAweDNlMDVhZWRkLCAweGU2YmQ0NjRkLCAweDU0OGRiNTkxLCAweGM0NWQwNTcxLCAweDA2ZDQ2ZjA0LCAweDUwMTVmZjYwLCAweDk4ZmIyNDE5LCAweGJkZTk5N2Q2LCAweDQwNDNjYzg5LCAweGQ5OWU3NzY3LCAweGU4NDJiZGIwLCAweDg5OGI4ODA3LCAweDE5NWIzOGU3LCAweGM4ZWVkYjc5LCAweDdjMGE0N2ExLCAweDQyMGZlOTdjLCAweDg0MWVjOWY4LCAweDAwMDAwMDAwLCAweDgwODY4MzA5LCAweDJiZWQ0ODMyLCAweDExNzBhYzFlLCAweDVhNzI0ZTZjLCAweDBlZmZmYmZkLCAweDg1Mzg1NjBmLCAweGFlZDUxZTNkLCAweDJkMzkyNzM2LCAweDBmZDk2NDBhLCAweDVjYTYyMTY4LCAweDViNTRkMTliLCAweDM2MmUzYTI0LCAweDBhNjdiMTBjLCAweDU3ZTcwZjkzLCAweGVlOTZkMmI0LCAweDliOTE5ZTFiLCAweGMwYzU0ZjgwLCAweGRjMjBhMjYxLCAweDc3NGI2OTVhLCAweDEyMWExNjFjLCAweDkzYmEwYWUyLCAweGEwMmFlNWMwLCAweDIyZTA0MzNjLCAweDFiMTcxZDEyLCAweDA5MGQwYjBlLCAweDhiYzdhZGYyLCAweGI2YThiOTJkLCAweDFlYTljODE0LCAweGYxMTk4NTU3LCAweDc1MDc0Y2FmLCAweDk5ZGRiYmVlLCAweDdmNjBmZGEzLCAweDAxMjY5ZmY3LCAweDcyZjViYzVjLCAweDY2M2JjNTQ0LCAweGZiN2UzNDViLCAweDQzMjk3NjhiLCAweDIzYzZkY2NiLCAweGVkZmM2OGI2LCAweGU0ZjE2M2I4LCAweDMxZGNjYWQ3LCAweDYzODUxMDQyLCAweDk3MjI0MDEzLCAweGM2MTEyMDg0LCAweDRhMjQ3ZDg1LCAweGJiM2RmOGQyLCAweGY5MzIxMWFlLCAweDI5YTE2ZGM3LCAweDllMmY0YjFkLCAweGIyMzBmM2RjLCAweDg2NTJlYzBkLCAweGMxZTNkMDc3LCAweGIzMTY2YzJiLCAweDcwYjk5OWE5LCAweDk0NDhmYTExLCAweGU5NjQyMjQ3LCAweGZjOGNjNGE4LCAweGYwM2YxYWEwLCAweDdkMmNkODU2LCAweDMzOTBlZjIyLCAweDQ5NGVjNzg3LCAweDM4ZDFjMWQ5LCAweGNhYTJmZThjLCAweGQ0MGIzNjk4LCAweGY1ODFjZmE2LCAweDdhZGUyOGE1LCAweGI3OGUyNmRhLCAweGFkYmZhNDNmLCAweDNhOWRlNDJjLCAweDc4OTIwZDUwLCAweDVmY2M5YjZhLCAweDdlNDY2MjU0LCAweDhkMTNjMmY2LCAweGQ4YjhlODkwLCAweDM5Zjc1ZTJlLCAweGMzYWZmNTgyLCAweDVkODBiZTlmLCAweGQwOTM3YzY5LCAweGQ1MmRhOTZmLCAweDI1MTJiM2NmLCAweGFjOTkzYmM4LCAweDE4N2RhNzEwLCAweDljNjM2ZWU4LCAweDNiYmI3YmRiLCAweDI2NzgwOWNkLCAweDU5MThmNDZlLCAweDlhYjcwMWVjLCAweDRmOWFhODgzLCAweDk1NmU2NWU2LCAweGZmZTY3ZWFhLCAweGJjY2YwODIxLCAweDE1ZThlNmVmLCAweGU3OWJkOWJhLCAweDZmMzZjZTRhLCAweDlmMDlkNGVhLCAweGIwN2NkNjI5LCAweGE0YjJhZjMxLCAweDNmMjMzMTJhLCAweGE1OTQzMGM2LCAweGEyNjZjMDM1LCAweDRlYmMzNzc0LCAweDgyY2FhNmZjLCAweDkwZDBiMGUwLCAweGE3ZDgxNTMzLCAweDA0OTg0YWYxLCAweGVjZGFmNzQxLCAweGNkNTAwZTdmLCAweDkxZjYyZjE3LCAweDRkZDY4ZDc2LCAweGVmYjA0ZDQzLCAweGFhNGQ1NGNjLCAweDk2MDRkZmU0LCAweGQxYjVlMzllLCAweDZhODgxYjRjLCAweDJjMWZiOGMxLCAweDY1NTE3ZjQ2LCAweDVlZWEwNDlkLCAweDhjMzU1ZDAxLCAweDg3NzQ3M2ZhLCAweDBiNDEyZWZiLCAweDY3MWQ1YWIzLCAweGRiZDI1MjkyLCAweDEwNTYzM2U5LCAweGQ2NDcxMzZkLCAweGQ3NjE4YzlhLCAweGExMGM3YTM3LCAweGY4MTQ4ZTU5LCAweDEzM2M4OWViLCAweGE5MjdlZWNlLCAweDYxYzkzNWI3LCAweDFjZTVlZGUxLCAweDQ3YjEzYzdhLCAweGQyZGY1OTljLCAweGYyNzMzZjU1LCAweDE0Y2U3OTE4LCAweGM3MzdiZjczLCAweGY3Y2RlYTUzLCAweGZkYWE1YjVmLCAweDNkNmYxNGRmLCAweDQ0ZGI4Njc4LCAweGFmZjM4MWNhLCAweDY4YzQzZWI5LCAweDI0MzQyYzM4LCAweGEzNDA1ZmMyLCAweDFkYzM3MjE2LCAweGUyMjUwY2JjLCAweDNjNDk4YjI4LCAweDBkOTU0MWZmLCAweGE4MDE3MTM5LCAweDBjYjNkZTA4LCAweGI0ZTQ5Y2Q4LCAweDU2YzE5MDY0LCAweGNiODQ2MTdiLCAweDMyYjY3MGQ1LCAweDZjNWM3NDQ4LCAweGI4NTc0MmQwXTtcblxuICAgIC8vIFRyYW5zZm9ybWF0aW9ucyBmb3IgZGVjcnlwdGlvbiBrZXkgZXhwYW5zaW9uXG4gICAgdmFyIFUxID0gWzB4MDAwMDAwMDAsIDB4MGUwOTBkMGIsIDB4MWMxMjFhMTYsIDB4MTIxYjE3MWQsIDB4MzgyNDM0MmMsIDB4MzYyZDM5MjcsIDB4MjQzNjJlM2EsIDB4MmEzZjIzMzEsIDB4NzA0ODY4NTgsIDB4N2U0MTY1NTMsIDB4NmM1YTcyNGUsIDB4NjI1MzdmNDUsIDB4NDg2YzVjNzQsIDB4NDY2NTUxN2YsIDB4NTQ3ZTQ2NjIsIDB4NWE3NzRiNjksIDB4ZTA5MGQwYjAsIDB4ZWU5OWRkYmIsIDB4ZmM4MmNhYTYsIDB4ZjI4YmM3YWQsIDB4ZDhiNGU0OWMsIDB4ZDZiZGU5OTcsIDB4YzRhNmZlOGEsIDB4Y2FhZmYzODEsIDB4OTBkOGI4ZTgsIDB4OWVkMWI1ZTMsIDB4OGNjYWEyZmUsIDB4ODJjM2FmZjUsIDB4YThmYzhjYzQsIDB4YTZmNTgxY2YsIDB4YjRlZTk2ZDIsIDB4YmFlNzliZDksIDB4ZGIzYmJiN2IsIDB4ZDUzMmI2NzAsIDB4YzcyOWExNmQsIDB4YzkyMGFjNjYsIDB4ZTMxZjhmNTcsIDB4ZWQxNjgyNWMsIDB4ZmYwZDk1NDEsIDB4ZjEwNDk4NGEsIDB4YWI3M2QzMjMsIDB4YTU3YWRlMjgsIDB4Yjc2MWM5MzUsIDB4Yjk2OGM0M2UsIDB4OTM1N2U3MGYsIDB4OWQ1ZWVhMDQsIDB4OGY0NWZkMTksIDB4ODE0Y2YwMTIsIDB4M2JhYjZiY2IsIDB4MzVhMjY2YzAsIDB4MjdiOTcxZGQsIDB4MjliMDdjZDYsIDB4MDM4ZjVmZTcsIDB4MGQ4NjUyZWMsIDB4MWY5ZDQ1ZjEsIDB4MTE5NDQ4ZmEsIDB4NGJlMzAzOTMsIDB4NDVlYTBlOTgsIDB4NTdmMTE5ODUsIDB4NTlmODE0OGUsIDB4NzNjNzM3YmYsIDB4N2RjZTNhYjQsIDB4NmZkNTJkYTksIDB4NjFkYzIwYTIsIDB4YWQ3NjZkZjYsIDB4YTM3ZjYwZmQsIDB4YjE2NDc3ZTAsIDB4YmY2ZDdhZWIsIDB4OTU1MjU5ZGEsIDB4OWI1YjU0ZDEsIDB4ODk0MDQzY2MsIDB4ODc0OTRlYzcsIDB4ZGQzZTA1YWUsIDB4ZDMzNzA4YTUsIDB4YzEyYzFmYjgsIDB4Y2YyNTEyYjMsIDB4ZTUxYTMxODIsIDB4ZWIxMzNjODksIDB4ZjkwODJiOTQsIDB4ZjcwMTI2OWYsIDB4NGRlNmJkNDYsIDB4NDNlZmIwNGQsIDB4NTFmNGE3NTAsIDB4NWZmZGFhNWIsIDB4NzVjMjg5NmEsIDB4N2JjYjg0NjEsIDB4NjlkMDkzN2MsIDB4NjdkOTllNzcsIDB4M2RhZWQ1MWUsIDB4MzNhN2Q4MTUsIDB4MjFiY2NmMDgsIDB4MmZiNWMyMDMsIDB4MDU4YWUxMzIsIDB4MGI4M2VjMzksIDB4MTk5OGZiMjQsIDB4MTc5MWY2MmYsIDB4NzY0ZGQ2OGQsIDB4Nzg0NGRiODYsIDB4NmE1ZmNjOWIsIDB4NjQ1NmMxOTAsIDB4NGU2OWUyYTEsIDB4NDA2MGVmYWEsIDB4NTI3YmY4YjcsIDB4NWM3MmY1YmMsIDB4MDYwNWJlZDUsIDB4MDgwY2IzZGUsIDB4MWExN2E0YzMsIDB4MTQxZWE5YzgsIDB4M2UyMThhZjksIDB4MzAyODg3ZjIsIDB4MjIzMzkwZWYsIDB4MmMzYTlkZTQsIDB4OTZkZDA2M2QsIDB4OThkNDBiMzYsIDB4OGFjZjFjMmIsIDB4ODRjNjExMjAsIDB4YWVmOTMyMTEsIDB4YTBmMDNmMWEsIDB4YjJlYjI4MDcsIDB4YmNlMjI1MGMsIDB4ZTY5NTZlNjUsIDB4ZTg5YzYzNmUsIDB4ZmE4Nzc0NzMsIDB4ZjQ4ZTc5NzgsIDB4ZGViMTVhNDksIDB4ZDBiODU3NDIsIDB4YzJhMzQwNWYsIDB4Y2NhYTRkNTQsIDB4NDFlY2RhZjcsIDB4NGZlNWQ3ZmMsIDB4NWRmZWMwZTEsIDB4NTNmN2NkZWEsIDB4NzljOGVlZGIsIDB4NzdjMWUzZDAsIDB4NjVkYWY0Y2QsIDB4NmJkM2Y5YzYsIDB4MzFhNGIyYWYsIDB4M2ZhZGJmYTQsIDB4MmRiNmE4YjksIDB4MjNiZmE1YjIsIDB4MDk4MDg2ODMsIDB4MDc4OThiODgsIDB4MTU5MjljOTUsIDB4MWI5YjkxOWUsIDB4YTE3YzBhNDcsIDB4YWY3NTA3NGMsIDB4YmQ2ZTEwNTEsIDB4YjM2NzFkNWEsIDB4OTk1ODNlNmIsIDB4OTc1MTMzNjAsIDB4ODU0YTI0N2QsIDB4OGI0MzI5NzYsIDB4ZDEzNDYyMWYsIDB4ZGYzZDZmMTQsIDB4Y2QyNjc4MDksIDB4YzMyZjc1MDIsIDB4ZTkxMDU2MzMsIDB4ZTcxOTViMzgsIDB4ZjUwMjRjMjUsIDB4ZmIwYjQxMmUsIDB4OWFkNzYxOGMsIDB4OTRkZTZjODcsIDB4ODZjNTdiOWEsIDB4ODhjYzc2OTEsIDB4YTJmMzU1YTAsIDB4YWNmYTU4YWIsIDB4YmVlMTRmYjYsIDB4YjBlODQyYmQsIDB4ZWE5ZjA5ZDQsIDB4ZTQ5NjA0ZGYsIDB4ZjY4ZDEzYzIsIDB4Zjg4NDFlYzksIDB4ZDJiYjNkZjgsIDB4ZGNiMjMwZjMsIDB4Y2VhOTI3ZWUsIDB4YzBhMDJhZTUsIDB4N2E0N2IxM2MsIDB4NzQ0ZWJjMzcsIDB4NjY1NWFiMmEsIDB4Njg1Y2E2MjEsIDB4NDI2Mzg1MTAsIDB4NGM2YTg4MWIsIDB4NWU3MTlmMDYsIDB4NTA3ODkyMGQsIDB4MGEwZmQ5NjQsIDB4MDQwNmQ0NmYsIDB4MTYxZGMzNzIsIDB4MTgxNGNlNzksIDB4MzIyYmVkNDgsIDB4M2MyMmUwNDMsIDB4MmUzOWY3NWUsIDB4MjAzMGZhNTUsIDB4ZWM5YWI3MDEsIDB4ZTI5M2JhMGEsIDB4ZjA4OGFkMTcsIDB4ZmU4MWEwMWMsIDB4ZDRiZTgzMmQsIDB4ZGFiNzhlMjYsIDB4YzhhYzk5M2IsIDB4YzZhNTk0MzAsIDB4OWNkMmRmNTksIDB4OTJkYmQyNTIsIDB4ODBjMGM1NGYsIDB4OGVjOWM4NDQsIDB4YTRmNmViNzUsIDB4YWFmZmU2N2UsIDB4YjhlNGYxNjMsIDB4YjZlZGZjNjgsIDB4MGMwYTY3YjEsIDB4MDIwMzZhYmEsIDB4MTAxODdkYTcsIDB4MWUxMTcwYWMsIDB4MzQyZTUzOWQsIDB4M2EyNzVlOTYsIDB4MjgzYzQ5OGIsIDB4MjYzNTQ0ODAsIDB4N2M0MjBmZTksIDB4NzI0YjAyZTIsIDB4NjA1MDE1ZmYsIDB4NmU1OTE4ZjQsIDB4NDQ2NjNiYzUsIDB4NGE2ZjM2Y2UsIDB4NTg3NDIxZDMsIDB4NTY3ZDJjZDgsIDB4MzdhMTBjN2EsIDB4MzlhODAxNzEsIDB4MmJiMzE2NmMsIDB4MjViYTFiNjcsIDB4MGY4NTM4NTYsIDB4MDE4YzM1NWQsIDB4MTM5NzIyNDAsIDB4MWQ5ZTJmNGIsIDB4NDdlOTY0MjIsIDB4NDllMDY5MjksIDB4NWJmYjdlMzQsIDB4NTVmMjczM2YsIDB4N2ZjZDUwMGUsIDB4NzFjNDVkMDUsIDB4NjNkZjRhMTgsIDB4NmRkNjQ3MTMsIDB4ZDczMWRjY2EsIDB4ZDkzOGQxYzEsIDB4Y2IyM2M2ZGMsIDB4YzUyYWNiZDcsIDB4ZWYxNWU4ZTYsIDB4ZTExY2U1ZWQsIDB4ZjMwN2YyZjAsIDB4ZmQwZWZmZmIsIDB4YTc3OWI0OTIsIDB4YTk3MGI5OTksIDB4YmI2YmFlODQsIDB4YjU2MmEzOGYsIDB4OWY1ZDgwYmUsIDB4OTE1NDhkYjUsIDB4ODM0ZjlhYTgsIDB4OGQ0Njk3YTNdO1xuICAgIHZhciBVMiA9IFsweDAwMDAwMDAwLCAweDBiMGUwOTBkLCAweDE2MWMxMjFhLCAweDFkMTIxYjE3LCAweDJjMzgyNDM0LCAweDI3MzYyZDM5LCAweDNhMjQzNjJlLCAweDMxMmEzZjIzLCAweDU4NzA0ODY4LCAweDUzN2U0MTY1LCAweDRlNmM1YTcyLCAweDQ1NjI1MzdmLCAweDc0NDg2YzVjLCAweDdmNDY2NTUxLCAweDYyNTQ3ZTQ2LCAweDY5NWE3NzRiLCAweGIwZTA5MGQwLCAweGJiZWU5OWRkLCAweGE2ZmM4MmNhLCAweGFkZjI4YmM3LCAweDljZDhiNGU0LCAweDk3ZDZiZGU5LCAweDhhYzRhNmZlLCAweDgxY2FhZmYzLCAweGU4OTBkOGI4LCAweGUzOWVkMWI1LCAweGZlOGNjYWEyLCAweGY1ODJjM2FmLCAweGM0YThmYzhjLCAweGNmYTZmNTgxLCAweGQyYjRlZTk2LCAweGQ5YmFlNzliLCAweDdiZGIzYmJiLCAweDcwZDUzMmI2LCAweDZkYzcyOWExLCAweDY2YzkyMGFjLCAweDU3ZTMxZjhmLCAweDVjZWQxNjgyLCAweDQxZmYwZDk1LCAweDRhZjEwNDk4LCAweDIzYWI3M2QzLCAweDI4YTU3YWRlLCAweDM1Yjc2MWM5LCAweDNlYjk2OGM0LCAweDBmOTM1N2U3LCAweDA0OWQ1ZWVhLCAweDE5OGY0NWZkLCAweDEyODE0Y2YwLCAweGNiM2JhYjZiLCAweGMwMzVhMjY2LCAweGRkMjdiOTcxLCAweGQ2MjliMDdjLCAweGU3MDM4ZjVmLCAweGVjMGQ4NjUyLCAweGYxMWY5ZDQ1LCAweGZhMTE5NDQ4LCAweDkzNGJlMzAzLCAweDk4NDVlYTBlLCAweDg1NTdmMTE5LCAweDhlNTlmODE0LCAweGJmNzNjNzM3LCAweGI0N2RjZTNhLCAweGE5NmZkNTJkLCAweGEyNjFkYzIwLCAweGY2YWQ3NjZkLCAweGZkYTM3ZjYwLCAweGUwYjE2NDc3LCAweGViYmY2ZDdhLCAweGRhOTU1MjU5LCAweGQxOWI1YjU0LCAweGNjODk0MDQzLCAweGM3ODc0OTRlLCAweGFlZGQzZTA1LCAweGE1ZDMzNzA4LCAweGI4YzEyYzFmLCAweGIzY2YyNTEyLCAweDgyZTUxYTMxLCAweDg5ZWIxMzNjLCAweDk0ZjkwODJiLCAweDlmZjcwMTI2LCAweDQ2NGRlNmJkLCAweDRkNDNlZmIwLCAweDUwNTFmNGE3LCAweDViNWZmZGFhLCAweDZhNzVjMjg5LCAweDYxN2JjYjg0LCAweDdjNjlkMDkzLCAweDc3NjdkOTllLCAweDFlM2RhZWQ1LCAweDE1MzNhN2Q4LCAweDA4MjFiY2NmLCAweDAzMmZiNWMyLCAweDMyMDU4YWUxLCAweDM5MGI4M2VjLCAweDI0MTk5OGZiLCAweDJmMTc5MWY2LCAweDhkNzY0ZGQ2LCAweDg2Nzg0NGRiLCAweDliNmE1ZmNjLCAweDkwNjQ1NmMxLCAweGExNGU2OWUyLCAweGFhNDA2MGVmLCAweGI3NTI3YmY4LCAweGJjNWM3MmY1LCAweGQ1MDYwNWJlLCAweGRlMDgwY2IzLCAweGMzMWExN2E0LCAweGM4MTQxZWE5LCAweGY5M2UyMThhLCAweGYyMzAyODg3LCAweGVmMjIzMzkwLCAweGU0MmMzYTlkLCAweDNkOTZkZDA2LCAweDM2OThkNDBiLCAweDJiOGFjZjFjLCAweDIwODRjNjExLCAweDExYWVmOTMyLCAweDFhYTBmMDNmLCAweDA3YjJlYjI4LCAweDBjYmNlMjI1LCAweDY1ZTY5NTZlLCAweDZlZTg5YzYzLCAweDczZmE4Nzc0LCAweDc4ZjQ4ZTc5LCAweDQ5ZGViMTVhLCAweDQyZDBiODU3LCAweDVmYzJhMzQwLCAweDU0Y2NhYTRkLCAweGY3NDFlY2RhLCAweGZjNGZlNWQ3LCAweGUxNWRmZWMwLCAweGVhNTNmN2NkLCAweGRiNzljOGVlLCAweGQwNzdjMWUzLCAweGNkNjVkYWY0LCAweGM2NmJkM2Y5LCAweGFmMzFhNGIyLCAweGE0M2ZhZGJmLCAweGI5MmRiNmE4LCAweGIyMjNiZmE1LCAweDgzMDk4MDg2LCAweDg4MDc4OThiLCAweDk1MTU5MjljLCAweDllMWI5YjkxLCAweDQ3YTE3YzBhLCAweDRjYWY3NTA3LCAweDUxYmQ2ZTEwLCAweDVhYjM2NzFkLCAweDZiOTk1ODNlLCAweDYwOTc1MTMzLCAweDdkODU0YTI0LCAweDc2OGI0MzI5LCAweDFmZDEzNDYyLCAweDE0ZGYzZDZmLCAweDA5Y2QyNjc4LCAweDAyYzMyZjc1LCAweDMzZTkxMDU2LCAweDM4ZTcxOTViLCAweDI1ZjUwMjRjLCAweDJlZmIwYjQxLCAweDhjOWFkNzYxLCAweDg3OTRkZTZjLCAweDlhODZjNTdiLCAweDkxODhjYzc2LCAweGEwYTJmMzU1LCAweGFiYWNmYTU4LCAweGI2YmVlMTRmLCAweGJkYjBlODQyLCAweGQ0ZWE5ZjA5LCAweGRmZTQ5NjA0LCAweGMyZjY4ZDEzLCAweGM5Zjg4NDFlLCAweGY4ZDJiYjNkLCAweGYzZGNiMjMwLCAweGVlY2VhOTI3LCAweGU1YzBhMDJhLCAweDNjN2E0N2IxLCAweDM3NzQ0ZWJjLCAweDJhNjY1NWFiLCAweDIxNjg1Y2E2LCAweDEwNDI2Mzg1LCAweDFiNGM2YTg4LCAweDA2NWU3MTlmLCAweDBkNTA3ODkyLCAweDY0MGEwZmQ5LCAweDZmMDQwNmQ0LCAweDcyMTYxZGMzLCAweDc5MTgxNGNlLCAweDQ4MzIyYmVkLCAweDQzM2MyMmUwLCAweDVlMmUzOWY3LCAweDU1MjAzMGZhLCAweDAxZWM5YWI3LCAweDBhZTI5M2JhLCAweDE3ZjA4OGFkLCAweDFjZmU4MWEwLCAweDJkZDRiZTgzLCAweDI2ZGFiNzhlLCAweDNiYzhhYzk5LCAweDMwYzZhNTk0LCAweDU5OWNkMmRmLCAweDUyOTJkYmQyLCAweDRmODBjMGM1LCAweDQ0OGVjOWM4LCAweDc1YTRmNmViLCAweDdlYWFmZmU2LCAweDYzYjhlNGYxLCAweDY4YjZlZGZjLCAweGIxMGMwYTY3LCAweGJhMDIwMzZhLCAweGE3MTAxODdkLCAweGFjMWUxMTcwLCAweDlkMzQyZTUzLCAweDk2M2EyNzVlLCAweDhiMjgzYzQ5LCAweDgwMjYzNTQ0LCAweGU5N2M0MjBmLCAweGUyNzI0YjAyLCAweGZmNjA1MDE1LCAweGY0NmU1OTE4LCAweGM1NDQ2NjNiLCAweGNlNGE2ZjM2LCAweGQzNTg3NDIxLCAweGQ4NTY3ZDJjLCAweDdhMzdhMTBjLCAweDcxMzlhODAxLCAweDZjMmJiMzE2LCAweDY3MjViYTFiLCAweDU2MGY4NTM4LCAweDVkMDE4YzM1LCAweDQwMTM5NzIyLCAweDRiMWQ5ZTJmLCAweDIyNDdlOTY0LCAweDI5NDllMDY5LCAweDM0NWJmYjdlLCAweDNmNTVmMjczLCAweDBlN2ZjZDUwLCAweDA1NzFjNDVkLCAweDE4NjNkZjRhLCAweDEzNmRkNjQ3LCAweGNhZDczMWRjLCAweGMxZDkzOGQxLCAweGRjY2IyM2M2LCAweGQ3YzUyYWNiLCAweGU2ZWYxNWU4LCAweGVkZTExY2U1LCAweGYwZjMwN2YyLCAweGZiZmQwZWZmLCAweDkyYTc3OWI0LCAweDk5YTk3MGI5LCAweDg0YmI2YmFlLCAweDhmYjU2MmEzLCAweGJlOWY1ZDgwLCAweGI1OTE1NDhkLCAweGE4ODM0ZjlhLCAweGEzOGQ0Njk3XTtcbiAgICB2YXIgVTMgPSBbMHgwMDAwMDAwMCwgMHgwZDBiMGUwOSwgMHgxYTE2MWMxMiwgMHgxNzFkMTIxYiwgMHgzNDJjMzgyNCwgMHgzOTI3MzYyZCwgMHgyZTNhMjQzNiwgMHgyMzMxMmEzZiwgMHg2ODU4NzA0OCwgMHg2NTUzN2U0MSwgMHg3MjRlNmM1YSwgMHg3ZjQ1NjI1MywgMHg1Yzc0NDg2YywgMHg1MTdmNDY2NSwgMHg0NjYyNTQ3ZSwgMHg0YjY5NWE3NywgMHhkMGIwZTA5MCwgMHhkZGJiZWU5OSwgMHhjYWE2ZmM4MiwgMHhjN2FkZjI4YiwgMHhlNDljZDhiNCwgMHhlOTk3ZDZiZCwgMHhmZThhYzRhNiwgMHhmMzgxY2FhZiwgMHhiOGU4OTBkOCwgMHhiNWUzOWVkMSwgMHhhMmZlOGNjYSwgMHhhZmY1ODJjMywgMHg4Y2M0YThmYywgMHg4MWNmYTZmNSwgMHg5NmQyYjRlZSwgMHg5YmQ5YmFlNywgMHhiYjdiZGIzYiwgMHhiNjcwZDUzMiwgMHhhMTZkYzcyOSwgMHhhYzY2YzkyMCwgMHg4ZjU3ZTMxZiwgMHg4MjVjZWQxNiwgMHg5NTQxZmYwZCwgMHg5ODRhZjEwNCwgMHhkMzIzYWI3MywgMHhkZTI4YTU3YSwgMHhjOTM1Yjc2MSwgMHhjNDNlYjk2OCwgMHhlNzBmOTM1NywgMHhlYTA0OWQ1ZSwgMHhmZDE5OGY0NSwgMHhmMDEyODE0YywgMHg2YmNiM2JhYiwgMHg2NmMwMzVhMiwgMHg3MWRkMjdiOSwgMHg3Y2Q2MjliMCwgMHg1ZmU3MDM4ZiwgMHg1MmVjMGQ4NiwgMHg0NWYxMWY5ZCwgMHg0OGZhMTE5NCwgMHgwMzkzNGJlMywgMHgwZTk4NDVlYSwgMHgxOTg1NTdmMSwgMHgxNDhlNTlmOCwgMHgzN2JmNzNjNywgMHgzYWI0N2RjZSwgMHgyZGE5NmZkNSwgMHgyMGEyNjFkYywgMHg2ZGY2YWQ3NiwgMHg2MGZkYTM3ZiwgMHg3N2UwYjE2NCwgMHg3YWViYmY2ZCwgMHg1OWRhOTU1MiwgMHg1NGQxOWI1YiwgMHg0M2NjODk0MCwgMHg0ZWM3ODc0OSwgMHgwNWFlZGQzZSwgMHgwOGE1ZDMzNywgMHgxZmI4YzEyYywgMHgxMmIzY2YyNSwgMHgzMTgyZTUxYSwgMHgzYzg5ZWIxMywgMHgyYjk0ZjkwOCwgMHgyNjlmZjcwMSwgMHhiZDQ2NGRlNiwgMHhiMDRkNDNlZiwgMHhhNzUwNTFmNCwgMHhhYTViNWZmZCwgMHg4OTZhNzVjMiwgMHg4NDYxN2JjYiwgMHg5MzdjNjlkMCwgMHg5ZTc3NjdkOSwgMHhkNTFlM2RhZSwgMHhkODE1MzNhNywgMHhjZjA4MjFiYywgMHhjMjAzMmZiNSwgMHhlMTMyMDU4YSwgMHhlYzM5MGI4MywgMHhmYjI0MTk5OCwgMHhmNjJmMTc5MSwgMHhkNjhkNzY0ZCwgMHhkYjg2Nzg0NCwgMHhjYzliNmE1ZiwgMHhjMTkwNjQ1NiwgMHhlMmExNGU2OSwgMHhlZmFhNDA2MCwgMHhmOGI3NTI3YiwgMHhmNWJjNWM3MiwgMHhiZWQ1MDYwNSwgMHhiM2RlMDgwYywgMHhhNGMzMWExNywgMHhhOWM4MTQxZSwgMHg4YWY5M2UyMSwgMHg4N2YyMzAyOCwgMHg5MGVmMjIzMywgMHg5ZGU0MmMzYSwgMHgwNjNkOTZkZCwgMHgwYjM2OThkNCwgMHgxYzJiOGFjZiwgMHgxMTIwODRjNiwgMHgzMjExYWVmOSwgMHgzZjFhYTBmMCwgMHgyODA3YjJlYiwgMHgyNTBjYmNlMiwgMHg2ZTY1ZTY5NSwgMHg2MzZlZTg5YywgMHg3NDczZmE4NywgMHg3OTc4ZjQ4ZSwgMHg1YTQ5ZGViMSwgMHg1NzQyZDBiOCwgMHg0MDVmYzJhMywgMHg0ZDU0Y2NhYSwgMHhkYWY3NDFlYywgMHhkN2ZjNGZlNSwgMHhjMGUxNWRmZSwgMHhjZGVhNTNmNywgMHhlZWRiNzljOCwgMHhlM2QwNzdjMSwgMHhmNGNkNjVkYSwgMHhmOWM2NmJkMywgMHhiMmFmMzFhNCwgMHhiZmE0M2ZhZCwgMHhhOGI5MmRiNiwgMHhhNWIyMjNiZiwgMHg4NjgzMDk4MCwgMHg4Yjg4MDc4OSwgMHg5Yzk1MTU5MiwgMHg5MTllMWI5YiwgMHgwYTQ3YTE3YywgMHgwNzRjYWY3NSwgMHgxMDUxYmQ2ZSwgMHgxZDVhYjM2NywgMHgzZTZiOTk1OCwgMHgzMzYwOTc1MSwgMHgyNDdkODU0YSwgMHgyOTc2OGI0MywgMHg2MjFmZDEzNCwgMHg2ZjE0ZGYzZCwgMHg3ODA5Y2QyNiwgMHg3NTAyYzMyZiwgMHg1NjMzZTkxMCwgMHg1YjM4ZTcxOSwgMHg0YzI1ZjUwMiwgMHg0MTJlZmIwYiwgMHg2MThjOWFkNywgMHg2Yzg3OTRkZSwgMHg3YjlhODZjNSwgMHg3NjkxODhjYywgMHg1NWEwYTJmMywgMHg1OGFiYWNmYSwgMHg0ZmI2YmVlMSwgMHg0MmJkYjBlOCwgMHgwOWQ0ZWE5ZiwgMHgwNGRmZTQ5NiwgMHgxM2MyZjY4ZCwgMHgxZWM5Zjg4NCwgMHgzZGY4ZDJiYiwgMHgzMGYzZGNiMiwgMHgyN2VlY2VhOSwgMHgyYWU1YzBhMCwgMHhiMTNjN2E0NywgMHhiYzM3NzQ0ZSwgMHhhYjJhNjY1NSwgMHhhNjIxNjg1YywgMHg4NTEwNDI2MywgMHg4ODFiNGM2YSwgMHg5ZjA2NWU3MSwgMHg5MjBkNTA3OCwgMHhkOTY0MGEwZiwgMHhkNDZmMDQwNiwgMHhjMzcyMTYxZCwgMHhjZTc5MTgxNCwgMHhlZDQ4MzIyYiwgMHhlMDQzM2MyMiwgMHhmNzVlMmUzOSwgMHhmYTU1MjAzMCwgMHhiNzAxZWM5YSwgMHhiYTBhZTI5MywgMHhhZDE3ZjA4OCwgMHhhMDFjZmU4MSwgMHg4MzJkZDRiZSwgMHg4ZTI2ZGFiNywgMHg5OTNiYzhhYywgMHg5NDMwYzZhNSwgMHhkZjU5OWNkMiwgMHhkMjUyOTJkYiwgMHhjNTRmODBjMCwgMHhjODQ0OGVjOSwgMHhlYjc1YTRmNiwgMHhlNjdlYWFmZiwgMHhmMTYzYjhlNCwgMHhmYzY4YjZlZCwgMHg2N2IxMGMwYSwgMHg2YWJhMDIwMywgMHg3ZGE3MTAxOCwgMHg3MGFjMWUxMSwgMHg1MzlkMzQyZSwgMHg1ZTk2M2EyNywgMHg0OThiMjgzYywgMHg0NDgwMjYzNSwgMHgwZmU5N2M0MiwgMHgwMmUyNzI0YiwgMHgxNWZmNjA1MCwgMHgxOGY0NmU1OSwgMHgzYmM1NDQ2NiwgMHgzNmNlNGE2ZiwgMHgyMWQzNTg3NCwgMHgyY2Q4NTY3ZCwgMHgwYzdhMzdhMSwgMHgwMTcxMzlhOCwgMHgxNjZjMmJiMywgMHgxYjY3MjViYSwgMHgzODU2MGY4NSwgMHgzNTVkMDE4YywgMHgyMjQwMTM5NywgMHgyZjRiMWQ5ZSwgMHg2NDIyNDdlOSwgMHg2OTI5NDllMCwgMHg3ZTM0NWJmYiwgMHg3MzNmNTVmMiwgMHg1MDBlN2ZjZCwgMHg1ZDA1NzFjNCwgMHg0YTE4NjNkZiwgMHg0NzEzNmRkNiwgMHhkY2NhZDczMSwgMHhkMWMxZDkzOCwgMHhjNmRjY2IyMywgMHhjYmQ3YzUyYSwgMHhlOGU2ZWYxNSwgMHhlNWVkZTExYywgMHhmMmYwZjMwNywgMHhmZmZiZmQwZSwgMHhiNDkyYTc3OSwgMHhiOTk5YTk3MCwgMHhhZTg0YmI2YiwgMHhhMzhmYjU2MiwgMHg4MGJlOWY1ZCwgMHg4ZGI1OTE1NCwgMHg5YWE4ODM0ZiwgMHg5N2EzOGQ0Nl07XG4gICAgdmFyIFU0ID0gWzB4MDAwMDAwMDAsIDB4MDkwZDBiMGUsIDB4MTIxYTE2MWMsIDB4MWIxNzFkMTIsIDB4MjQzNDJjMzgsIDB4MmQzOTI3MzYsIDB4MzYyZTNhMjQsIDB4M2YyMzMxMmEsIDB4NDg2ODU4NzAsIDB4NDE2NTUzN2UsIDB4NWE3MjRlNmMsIDB4NTM3ZjQ1NjIsIDB4NmM1Yzc0NDgsIDB4NjU1MTdmNDYsIDB4N2U0NjYyNTQsIDB4Nzc0YjY5NWEsIDB4OTBkMGIwZTAsIDB4OTlkZGJiZWUsIDB4ODJjYWE2ZmMsIDB4OGJjN2FkZjIsIDB4YjRlNDljZDgsIDB4YmRlOTk3ZDYsIDB4YTZmZThhYzQsIDB4YWZmMzgxY2EsIDB4ZDhiOGU4OTAsIDB4ZDFiNWUzOWUsIDB4Y2FhMmZlOGMsIDB4YzNhZmY1ODIsIDB4ZmM4Y2M0YTgsIDB4ZjU4MWNmYTYsIDB4ZWU5NmQyYjQsIDB4ZTc5YmQ5YmEsIDB4M2JiYjdiZGIsIDB4MzJiNjcwZDUsIDB4MjlhMTZkYzcsIDB4MjBhYzY2YzksIDB4MWY4ZjU3ZTMsIDB4MTY4MjVjZWQsIDB4MGQ5NTQxZmYsIDB4MDQ5ODRhZjEsIDB4NzNkMzIzYWIsIDB4N2FkZTI4YTUsIDB4NjFjOTM1YjcsIDB4NjhjNDNlYjksIDB4NTdlNzBmOTMsIDB4NWVlYTA0OWQsIDB4NDVmZDE5OGYsIDB4NGNmMDEyODEsIDB4YWI2YmNiM2IsIDB4YTI2NmMwMzUsIDB4Yjk3MWRkMjcsIDB4YjA3Y2Q2MjksIDB4OGY1ZmU3MDMsIDB4ODY1MmVjMGQsIDB4OWQ0NWYxMWYsIDB4OTQ0OGZhMTEsIDB4ZTMwMzkzNGIsIDB4ZWEwZTk4NDUsIDB4ZjExOTg1NTcsIDB4ZjgxNDhlNTksIDB4YzczN2JmNzMsIDB4Y2UzYWI0N2QsIDB4ZDUyZGE5NmYsIDB4ZGMyMGEyNjEsIDB4NzY2ZGY2YWQsIDB4N2Y2MGZkYTMsIDB4NjQ3N2UwYjEsIDB4NmQ3YWViYmYsIDB4NTI1OWRhOTUsIDB4NWI1NGQxOWIsIDB4NDA0M2NjODksIDB4NDk0ZWM3ODcsIDB4M2UwNWFlZGQsIDB4MzcwOGE1ZDMsIDB4MmMxZmI4YzEsIDB4MjUxMmIzY2YsIDB4MWEzMTgyZTUsIDB4MTMzYzg5ZWIsIDB4MDgyYjk0ZjksIDB4MDEyNjlmZjcsIDB4ZTZiZDQ2NGQsIDB4ZWZiMDRkNDMsIDB4ZjRhNzUwNTEsIDB4ZmRhYTViNWYsIDB4YzI4OTZhNzUsIDB4Y2I4NDYxN2IsIDB4ZDA5MzdjNjksIDB4ZDk5ZTc3NjcsIDB4YWVkNTFlM2QsIDB4YTdkODE1MzMsIDB4YmNjZjA4MjEsIDB4YjVjMjAzMmYsIDB4OGFlMTMyMDUsIDB4ODNlYzM5MGIsIDB4OThmYjI0MTksIDB4OTFmNjJmMTcsIDB4NGRkNjhkNzYsIDB4NDRkYjg2NzgsIDB4NWZjYzliNmEsIDB4NTZjMTkwNjQsIDB4NjllMmExNGUsIDB4NjBlZmFhNDAsIDB4N2JmOGI3NTIsIDB4NzJmNWJjNWMsIDB4MDViZWQ1MDYsIDB4MGNiM2RlMDgsIDB4MTdhNGMzMWEsIDB4MWVhOWM4MTQsIDB4MjE4YWY5M2UsIDB4Mjg4N2YyMzAsIDB4MzM5MGVmMjIsIDB4M2E5ZGU0MmMsIDB4ZGQwNjNkOTYsIDB4ZDQwYjM2OTgsIDB4Y2YxYzJiOGEsIDB4YzYxMTIwODQsIDB4ZjkzMjExYWUsIDB4ZjAzZjFhYTAsIDB4ZWIyODA3YjIsIDB4ZTIyNTBjYmMsIDB4OTU2ZTY1ZTYsIDB4OWM2MzZlZTgsIDB4ODc3NDczZmEsIDB4OGU3OTc4ZjQsIDB4YjE1YTQ5ZGUsIDB4Yjg1NzQyZDAsIDB4YTM0MDVmYzIsIDB4YWE0ZDU0Y2MsIDB4ZWNkYWY3NDEsIDB4ZTVkN2ZjNGYsIDB4ZmVjMGUxNWQsIDB4ZjdjZGVhNTMsIDB4YzhlZWRiNzksIDB4YzFlM2QwNzcsIDB4ZGFmNGNkNjUsIDB4ZDNmOWM2NmIsIDB4YTRiMmFmMzEsIDB4YWRiZmE0M2YsIDB4YjZhOGI5MmQsIDB4YmZhNWIyMjMsIDB4ODA4NjgzMDksIDB4ODk4Yjg4MDcsIDB4OTI5Yzk1MTUsIDB4OWI5MTllMWIsIDB4N2MwYTQ3YTEsIDB4NzUwNzRjYWYsIDB4NmUxMDUxYmQsIDB4NjcxZDVhYjMsIDB4NTgzZTZiOTksIDB4NTEzMzYwOTcsIDB4NGEyNDdkODUsIDB4NDMyOTc2OGIsIDB4MzQ2MjFmZDEsIDB4M2Q2ZjE0ZGYsIDB4MjY3ODA5Y2QsIDB4MmY3NTAyYzMsIDB4MTA1NjMzZTksIDB4MTk1YjM4ZTcsIDB4MDI0YzI1ZjUsIDB4MGI0MTJlZmIsIDB4ZDc2MThjOWEsIDB4ZGU2Yzg3OTQsIDB4YzU3YjlhODYsIDB4Y2M3NjkxODgsIDB4ZjM1NWEwYTIsIDB4ZmE1OGFiYWMsIDB4ZTE0ZmI2YmUsIDB4ZTg0MmJkYjAsIDB4OWYwOWQ0ZWEsIDB4OTYwNGRmZTQsIDB4OGQxM2MyZjYsIDB4ODQxZWM5ZjgsIDB4YmIzZGY4ZDIsIDB4YjIzMGYzZGMsIDB4YTkyN2VlY2UsIDB4YTAyYWU1YzAsIDB4NDdiMTNjN2EsIDB4NGViYzM3NzQsIDB4NTVhYjJhNjYsIDB4NWNhNjIxNjgsIDB4NjM4NTEwNDIsIDB4NmE4ODFiNGMsIDB4NzE5ZjA2NWUsIDB4Nzg5MjBkNTAsIDB4MGZkOTY0MGEsIDB4MDZkNDZmMDQsIDB4MWRjMzcyMTYsIDB4MTRjZTc5MTgsIDB4MmJlZDQ4MzIsIDB4MjJlMDQzM2MsIDB4MzlmNzVlMmUsIDB4MzBmYTU1MjAsIDB4OWFiNzAxZWMsIDB4OTNiYTBhZTIsIDB4ODhhZDE3ZjAsIDB4ODFhMDFjZmUsIDB4YmU4MzJkZDQsIDB4Yjc4ZTI2ZGEsIDB4YWM5OTNiYzgsIDB4YTU5NDMwYzYsIDB4ZDJkZjU5OWMsIDB4ZGJkMjUyOTIsIDB4YzBjNTRmODAsIDB4YzljODQ0OGUsIDB4ZjZlYjc1YTQsIDB4ZmZlNjdlYWEsIDB4ZTRmMTYzYjgsIDB4ZWRmYzY4YjYsIDB4MGE2N2IxMGMsIDB4MDM2YWJhMDIsIDB4MTg3ZGE3MTAsIDB4MTE3MGFjMWUsIDB4MmU1MzlkMzQsIDB4Mjc1ZTk2M2EsIDB4M2M0OThiMjgsIDB4MzU0NDgwMjYsIDB4NDIwZmU5N2MsIDB4NGIwMmUyNzIsIDB4NTAxNWZmNjAsIDB4NTkxOGY0NmUsIDB4NjYzYmM1NDQsIDB4NmYzNmNlNGEsIDB4NzQyMWQzNTgsIDB4N2QyY2Q4NTYsIDB4YTEwYzdhMzcsIDB4YTgwMTcxMzksIDB4YjMxNjZjMmIsIDB4YmExYjY3MjUsIDB4ODUzODU2MGYsIDB4OGMzNTVkMDEsIDB4OTcyMjQwMTMsIDB4OWUyZjRiMWQsIDB4ZTk2NDIyNDcsIDB4ZTA2OTI5NDksIDB4ZmI3ZTM0NWIsIDB4ZjI3MzNmNTUsIDB4Y2Q1MDBlN2YsIDB4YzQ1ZDA1NzEsIDB4ZGY0YTE4NjMsIDB4ZDY0NzEzNmQsIDB4MzFkY2NhZDcsIDB4MzhkMWMxZDksIDB4MjNjNmRjY2IsIDB4MmFjYmQ3YzUsIDB4MTVlOGU2ZWYsIDB4MWNlNWVkZTEsIDB4MDdmMmYwZjMsIDB4MGVmZmZiZmQsIDB4NzliNDkyYTcsIDB4NzBiOTk5YTksIDB4NmJhZTg0YmIsIDB4NjJhMzhmYjUsIDB4NWQ4MGJlOWYsIDB4NTQ4ZGI1OTEsIDB4NGY5YWE4ODMsIDB4NDY5N2EzOGRdO1xuXG4gICAgZnVuY3Rpb24gY29udmVydFRvSW50MzIoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSA0KSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChcbiAgICAgICAgICAgICAgICAoYnl0ZXNbaSAgICBdIDw8IDI0KSB8XG4gICAgICAgICAgICAgICAgKGJ5dGVzW2kgKyAxXSA8PCAxNikgfFxuICAgICAgICAgICAgICAgIChieXRlc1tpICsgMl0gPDwgIDgpIHxcbiAgICAgICAgICAgICAgICAgYnl0ZXNbaSArIDNdXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdmFyIEFFUyA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQUVTKSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0FFUyBtdXN0IGJlIGluc3Rhbml0YXRlZCB3aXRoIGBuZXdgJyk7XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2tleScsIHtcbiAgICAgICAgICAgIHZhbHVlOiBjb2VyY2VBcnJheShrZXksIHRydWUpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX3ByZXBhcmUoKTtcbiAgICB9XG5cblxuICAgIEFFUy5wcm90b3R5cGUuX3ByZXBhcmUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgcm91bmRzID0gbnVtYmVyT2ZSb3VuZHNbdGhpcy5rZXkubGVuZ3RoXTtcbiAgICAgICAgaWYgKHJvdW5kcyA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQga2V5IHNpemUgKG11c3QgYmUgMTYsIDI0IG9yIDMyIGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZW5jcnlwdGlvbiByb3VuZCBrZXlzXG4gICAgICAgIHRoaXMuX0tlID0gW107XG5cbiAgICAgICAgLy8gZGVjcnlwdGlvbiByb3VuZCBrZXlzXG4gICAgICAgIHRoaXMuX0tkID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gcm91bmRzOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX0tlLnB1c2goWzAsIDAsIDAsIDBdKTtcbiAgICAgICAgICAgIHRoaXMuX0tkLnB1c2goWzAsIDAsIDAsIDBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByb3VuZEtleUNvdW50ID0gKHJvdW5kcyArIDEpICogNDtcbiAgICAgICAgdmFyIEtDID0gdGhpcy5rZXkubGVuZ3RoIC8gNDtcblxuICAgICAgICAvLyBjb252ZXJ0IHRoZSBrZXkgaW50byBpbnRzXG4gICAgICAgIHZhciB0ayA9IGNvbnZlcnRUb0ludDMyKHRoaXMua2V5KTtcblxuICAgICAgICAvLyBjb3B5IHZhbHVlcyBpbnRvIHJvdW5kIGtleSBhcnJheXNcbiAgICAgICAgdmFyIGluZGV4O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IEtDOyBpKyspIHtcbiAgICAgICAgICAgIGluZGV4ID0gaSA+PiAyO1xuICAgICAgICAgICAgdGhpcy5fS2VbaW5kZXhdW2kgJSA0XSA9IHRrW2ldO1xuICAgICAgICAgICAgdGhpcy5fS2Rbcm91bmRzIC0gaW5kZXhdW2kgJSA0XSA9IHRrW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8ga2V5IGV4cGFuc2lvbiAoZmlwcy0xOTcgc2VjdGlvbiA1LjIpXG4gICAgICAgIHZhciByY29ucG9pbnRlciA9IDA7XG4gICAgICAgIHZhciB0ID0gS0MsIHR0O1xuICAgICAgICB3aGlsZSAodCA8IHJvdW5kS2V5Q291bnQpIHtcbiAgICAgICAgICAgIHR0ID0gdGtbS0MgLSAxXTtcbiAgICAgICAgICAgIHRrWzBdIF49ICgoU1sodHQgPj4gMTYpICYgMHhGRl0gPDwgMjQpIF5cbiAgICAgICAgICAgICAgICAgICAgICAoU1sodHQgPj4gIDgpICYgMHhGRl0gPDwgMTYpIF5cbiAgICAgICAgICAgICAgICAgICAgICAoU1sgdHQgICAgICAgICYgMHhGRl0gPDwgIDgpIF5cbiAgICAgICAgICAgICAgICAgICAgICAgU1sodHQgPj4gMjQpICYgMHhGRl0gICAgICAgIF5cbiAgICAgICAgICAgICAgICAgICAgICAocmNvbltyY29ucG9pbnRlcl0gPDwgMjQpKTtcbiAgICAgICAgICAgIHJjb25wb2ludGVyICs9IDE7XG5cbiAgICAgICAgICAgIC8vIGtleSBleHBhbnNpb24gKGZvciBub24tMjU2IGJpdClcbiAgICAgICAgICAgIGlmIChLQyAhPSA4KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBLQzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRrW2ldIF49IHRrW2kgLSAxXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGtleSBleHBhbnNpb24gZm9yIDI1Ni1iaXQga2V5cyBpcyBcInNsaWdodGx5IGRpZmZlcmVudFwiIChmaXBzLTE5NylcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCAoS0MgLyAyKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRrW2ldIF49IHRrW2kgLSAxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHQgPSB0a1soS0MgLyAyKSAtIDFdO1xuXG4gICAgICAgICAgICAgICAgdGtbS0MgLyAyXSBePSAoU1sgdHQgICAgICAgICYgMHhGRl0gICAgICAgIF5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChTWyh0dCA+PiAgOCkgJiAweEZGXSA8PCAgOCkgXlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFNbKHR0ID4+IDE2KSAmIDB4RkZdIDw8IDE2KSBeXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoU1sodHQgPj4gMjQpICYgMHhGRl0gPDwgMjQpKTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAoS0MgLyAyKSArIDE7IGkgPCBLQzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRrW2ldIF49IHRrW2kgLSAxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNvcHkgdmFsdWVzIGludG8gcm91bmQga2V5IGFycmF5c1xuICAgICAgICAgICAgdmFyIGkgPSAwLCByLCBjO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCBLQyAmJiB0IDwgcm91bmRLZXlDb3VudCkge1xuICAgICAgICAgICAgICAgIHIgPSB0ID4+IDI7XG4gICAgICAgICAgICAgICAgYyA9IHQgJSA0O1xuICAgICAgICAgICAgICAgIHRoaXMuX0tlW3JdW2NdID0gdGtbaV07XG4gICAgICAgICAgICAgICAgdGhpcy5fS2Rbcm91bmRzIC0gcl1bY10gPSB0a1tpKytdO1xuICAgICAgICAgICAgICAgIHQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGludmVyc2UtY2lwaGVyLWlmeSB0aGUgZGVjcnlwdGlvbiByb3VuZCBrZXkgKGZpcHMtMTk3IHNlY3Rpb24gNS4zKVxuICAgICAgICBmb3IgKHZhciByID0gMTsgciA8IHJvdW5kczsgcisrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IDQ7IGMrKykge1xuICAgICAgICAgICAgICAgIHR0ID0gdGhpcy5fS2Rbcl1bY107XG4gICAgICAgICAgICAgICAgdGhpcy5fS2Rbcl1bY10gPSAoVTFbKHR0ID4+IDI0KSAmIDB4RkZdIF5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVMlsodHQgPj4gMTYpICYgMHhGRl0gXlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFUzWyh0dCA+PiAgOCkgJiAweEZGXSBeXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVTRbIHR0ICAgICAgICAmIDB4RkZdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIEFFUy5wcm90b3R5cGUuZW5jcnlwdCA9IGZ1bmN0aW9uKHBsYWludGV4dCkge1xuICAgICAgICBpZiAocGxhaW50ZXh0Lmxlbmd0aCAhPSAxNikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBsYWludGV4dCBzaXplIChtdXN0IGJlIDE2IGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJvdW5kcyA9IHRoaXMuX0tlLmxlbmd0aCAtIDE7XG4gICAgICAgIHZhciBhID0gWzAsIDAsIDAsIDBdO1xuXG4gICAgICAgIC8vIGNvbnZlcnQgcGxhaW50ZXh0IHRvIChpbnRzIF4ga2V5KVxuICAgICAgICB2YXIgdCA9IGNvbnZlcnRUb0ludDMyKHBsYWludGV4dCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgICB0W2ldIF49IHRoaXMuX0tlWzBdW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYXBwbHkgcm91bmQgdHJhbnNmb3Jtc1xuICAgICAgICBmb3IgKHZhciByID0gMTsgciA8IHJvdW5kczsgcisrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGFbaV0gPSAoVDFbKHRbIGkgICAgICAgICBdID4+IDI0KSAmIDB4ZmZdIF5cbiAgICAgICAgICAgICAgICAgICAgICAgIFQyWyh0WyhpICsgMSkgJSA0XSA+PiAxNikgJiAweGZmXSBeXG4gICAgICAgICAgICAgICAgICAgICAgICBUM1sodFsoaSArIDIpICUgNF0gPj4gIDgpICYgMHhmZl0gXlxuICAgICAgICAgICAgICAgICAgICAgICAgVDRbIHRbKGkgKyAzKSAlIDRdICAgICAgICAmIDB4ZmZdIF5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX0tlW3JdW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHQgPSBhLnNsaWNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGUgbGFzdCByb3VuZCBpcyBzcGVjaWFsXG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVBcnJheSgxNiksIHR0O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgdHQgPSB0aGlzLl9LZVtyb3VuZHNdW2ldO1xuICAgICAgICAgICAgcmVzdWx0WzQgKiBpICAgIF0gPSAoU1sodFsgaSAgICAgICAgIF0gPj4gMjQpICYgMHhmZl0gXiAodHQgPj4gMjQpKSAmIDB4ZmY7XG4gICAgICAgICAgICByZXN1bHRbNCAqIGkgKyAxXSA9IChTWyh0WyhpICsgMSkgJSA0XSA+PiAxNikgJiAweGZmXSBeICh0dCA+PiAxNikpICYgMHhmZjtcbiAgICAgICAgICAgIHJlc3VsdFs0ICogaSArIDJdID0gKFNbKHRbKGkgKyAyKSAlIDRdID4+ICA4KSAmIDB4ZmZdIF4gKHR0ID4+ICA4KSkgJiAweGZmO1xuICAgICAgICAgICAgcmVzdWx0WzQgKiBpICsgM10gPSAoU1sgdFsoaSArIDMpICUgNF0gICAgICAgICYgMHhmZl0gXiAgdHQgICAgICAgKSAmIDB4ZmY7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIEFFUy5wcm90b3R5cGUuZGVjcnlwdCA9IGZ1bmN0aW9uKGNpcGhlcnRleHQpIHtcbiAgICAgICAgaWYgKGNpcGhlcnRleHQubGVuZ3RoICE9IDE2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgY2lwaGVydGV4dCBzaXplIChtdXN0IGJlIDE2IGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJvdW5kcyA9IHRoaXMuX0tkLmxlbmd0aCAtIDE7XG4gICAgICAgIHZhciBhID0gWzAsIDAsIDAsIDBdO1xuXG4gICAgICAgIC8vIGNvbnZlcnQgcGxhaW50ZXh0IHRvIChpbnRzIF4ga2V5KVxuICAgICAgICB2YXIgdCA9IGNvbnZlcnRUb0ludDMyKGNpcGhlcnRleHQpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgdFtpXSBePSB0aGlzLl9LZFswXVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFwcGx5IHJvdW5kIHRyYW5zZm9ybXNcbiAgICAgICAgZm9yICh2YXIgciA9IDE7IHIgPCByb3VuZHM7IHIrKykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICAgICAgICBhW2ldID0gKFQ1Wyh0WyBpICAgICAgICAgIF0gPj4gMjQpICYgMHhmZl0gXlxuICAgICAgICAgICAgICAgICAgICAgICAgVDZbKHRbKGkgKyAzKSAlIDRdID4+IDE2KSAmIDB4ZmZdIF5cbiAgICAgICAgICAgICAgICAgICAgICAgIFQ3Wyh0WyhpICsgMikgJSA0XSA+PiAgOCkgJiAweGZmXSBeXG4gICAgICAgICAgICAgICAgICAgICAgICBUOFsgdFsoaSArIDEpICUgNF0gICAgICAgICYgMHhmZl0gXlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fS2Rbcl1baV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdCA9IGEuc2xpY2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoZSBsYXN0IHJvdW5kIGlzIHNwZWNpYWxcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUFycmF5KDE2KSwgdHQ7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgICB0dCA9IHRoaXMuX0tkW3JvdW5kc11baV07XG4gICAgICAgICAgICByZXN1bHRbNCAqIGkgICAgXSA9IChTaVsodFsgaSAgICAgICAgIF0gPj4gMjQpICYgMHhmZl0gXiAodHQgPj4gMjQpKSAmIDB4ZmY7XG4gICAgICAgICAgICByZXN1bHRbNCAqIGkgKyAxXSA9IChTaVsodFsoaSArIDMpICUgNF0gPj4gMTYpICYgMHhmZl0gXiAodHQgPj4gMTYpKSAmIDB4ZmY7XG4gICAgICAgICAgICByZXN1bHRbNCAqIGkgKyAyXSA9IChTaVsodFsoaSArIDIpICUgNF0gPj4gIDgpICYgMHhmZl0gXiAodHQgPj4gIDgpKSAmIDB4ZmY7XG4gICAgICAgICAgICByZXN1bHRbNCAqIGkgKyAzXSA9IChTaVsgdFsoaSArIDEpICUgNF0gICAgICAgICYgMHhmZl0gXiAgdHQgICAgICAgKSAmIDB4ZmY7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogIE1vZGUgT2YgT3BlcmF0aW9uIC0gRWxlY3RvbmljIENvZGVib29rIChFQ0IpXG4gICAgICovXG4gICAgdmFyIE1vZGVPZk9wZXJhdGlvbkVDQiA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTW9kZU9mT3BlcmF0aW9uRUNCKSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0FFUyBtdXN0IGJlIGluc3Rhbml0YXRlZCB3aXRoIGBuZXdgJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gXCJFbGVjdHJvbmljIENvZGUgQmxvY2tcIjtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJlY2JcIjtcblxuICAgICAgICB0aGlzLl9hZXMgPSBuZXcgQUVTKGtleSk7XG4gICAgfVxuXG4gICAgTW9kZU9mT3BlcmF0aW9uRUNCLnByb3RvdHlwZS5lbmNyeXB0ID0gZnVuY3Rpb24ocGxhaW50ZXh0KSB7XG4gICAgICAgIHBsYWludGV4dCA9IGNvZXJjZUFycmF5KHBsYWludGV4dCk7XG5cbiAgICAgICAgaWYgKChwbGFpbnRleHQubGVuZ3RoICUgMTYpICE9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcGxhaW50ZXh0IHNpemUgKG11c3QgYmUgbXVsdGlwbGUgb2YgMTYgYnl0ZXMpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2lwaGVydGV4dCA9IGNyZWF0ZUFycmF5KHBsYWludGV4dC5sZW5ndGgpO1xuICAgICAgICB2YXIgYmxvY2sgPSBjcmVhdGVBcnJheSgxNik7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGFpbnRleHQubGVuZ3RoOyBpICs9IDE2KSB7XG4gICAgICAgICAgICBjb3B5QXJyYXkocGxhaW50ZXh0LCBibG9jaywgMCwgaSwgaSArIDE2KTtcbiAgICAgICAgICAgIGJsb2NrID0gdGhpcy5fYWVzLmVuY3J5cHQoYmxvY2spO1xuICAgICAgICAgICAgY29weUFycmF5KGJsb2NrLCBjaXBoZXJ0ZXh0LCBpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaXBoZXJ0ZXh0O1xuICAgIH1cblxuICAgIE1vZGVPZk9wZXJhdGlvbkVDQi5wcm90b3R5cGUuZGVjcnlwdCA9IGZ1bmN0aW9uKGNpcGhlcnRleHQpIHtcbiAgICAgICAgY2lwaGVydGV4dCA9IGNvZXJjZUFycmF5KGNpcGhlcnRleHQpO1xuXG4gICAgICAgIGlmICgoY2lwaGVydGV4dC5sZW5ndGggJSAxNikgIT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBjaXBoZXJ0ZXh0IHNpemUgKG11c3QgYmUgbXVsdGlwbGUgb2YgMTYgYnl0ZXMpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGxhaW50ZXh0ID0gY3JlYXRlQXJyYXkoY2lwaGVydGV4dC5sZW5ndGgpO1xuICAgICAgICB2YXIgYmxvY2sgPSBjcmVhdGVBcnJheSgxNik7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaXBoZXJ0ZXh0Lmxlbmd0aDsgaSArPSAxNikge1xuICAgICAgICAgICAgY29weUFycmF5KGNpcGhlcnRleHQsIGJsb2NrLCAwLCBpLCBpICsgMTYpO1xuICAgICAgICAgICAgYmxvY2sgPSB0aGlzLl9hZXMuZGVjcnlwdChibG9jayk7XG4gICAgICAgICAgICBjb3B5QXJyYXkoYmxvY2ssIHBsYWludGV4dCwgaSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGxhaW50ZXh0O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogIE1vZGUgT2YgT3BlcmF0aW9uIC0gQ2lwaGVyIEJsb2NrIENoYWluaW5nIChDQkMpXG4gICAgICovXG4gICAgdmFyIE1vZGVPZk9wZXJhdGlvbkNCQyA9IGZ1bmN0aW9uKGtleSwgaXYpIHtcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1vZGVPZk9wZXJhdGlvbkNCQykpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdBRVMgbXVzdCBiZSBpbnN0YW5pdGF0ZWQgd2l0aCBgbmV3YCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IFwiQ2lwaGVyIEJsb2NrIENoYWluaW5nXCI7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiY2JjXCI7XG5cbiAgICAgICAgaWYgKCFpdikge1xuICAgICAgICAgICAgaXYgPSBjcmVhdGVBcnJheSgxNik7XG5cbiAgICAgICAgfSBlbHNlIGlmIChpdi5sZW5ndGggIT0gMTYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBpbml0aWFsYXRpb24gdmVjdG9yIHNpemUgKG11c3QgYmUgMTYgYnl0ZXMpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sYXN0Q2lwaGVyYmxvY2sgPSBjb2VyY2VBcnJheShpdiwgdHJ1ZSk7XG5cbiAgICAgICAgdGhpcy5fYWVzID0gbmV3IEFFUyhrZXkpO1xuICAgIH1cblxuICAgIE1vZGVPZk9wZXJhdGlvbkNCQy5wcm90b3R5cGUuZW5jcnlwdCA9IGZ1bmN0aW9uKHBsYWludGV4dCkge1xuICAgICAgICBwbGFpbnRleHQgPSBjb2VyY2VBcnJheShwbGFpbnRleHQpO1xuXG4gICAgICAgIGlmICgocGxhaW50ZXh0Lmxlbmd0aCAlIDE2KSAhPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBsYWludGV4dCBzaXplIChtdXN0IGJlIG11bHRpcGxlIG9mIDE2IGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBjcmVhdGVBcnJheShwbGFpbnRleHQubGVuZ3RoKTtcbiAgICAgICAgdmFyIGJsb2NrID0gY3JlYXRlQXJyYXkoMTYpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGxhaW50ZXh0Lmxlbmd0aDsgaSArPSAxNikge1xuICAgICAgICAgICAgY29weUFycmF5KHBsYWludGV4dCwgYmxvY2ssIDAsIGksIGkgKyAxNik7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgMTY7IGorKykge1xuICAgICAgICAgICAgICAgIGJsb2NrW2pdIF49IHRoaXMuX2xhc3RDaXBoZXJibG9ja1tqXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fbGFzdENpcGhlcmJsb2NrID0gdGhpcy5fYWVzLmVuY3J5cHQoYmxvY2spO1xuICAgICAgICAgICAgY29weUFycmF5KHRoaXMuX2xhc3RDaXBoZXJibG9jaywgY2lwaGVydGV4dCwgaSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2lwaGVydGV4dDtcbiAgICB9XG5cbiAgICBNb2RlT2ZPcGVyYXRpb25DQkMucHJvdG90eXBlLmRlY3J5cHQgPSBmdW5jdGlvbihjaXBoZXJ0ZXh0KSB7XG4gICAgICAgIGNpcGhlcnRleHQgPSBjb2VyY2VBcnJheShjaXBoZXJ0ZXh0KTtcblxuICAgICAgICBpZiAoKGNpcGhlcnRleHQubGVuZ3RoICUgMTYpICE9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgY2lwaGVydGV4dCBzaXplIChtdXN0IGJlIG11bHRpcGxlIG9mIDE2IGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBsYWludGV4dCA9IGNyZWF0ZUFycmF5KGNpcGhlcnRleHQubGVuZ3RoKTtcbiAgICAgICAgdmFyIGJsb2NrID0gY3JlYXRlQXJyYXkoMTYpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2lwaGVydGV4dC5sZW5ndGg7IGkgKz0gMTYpIHtcbiAgICAgICAgICAgIGNvcHlBcnJheShjaXBoZXJ0ZXh0LCBibG9jaywgMCwgaSwgaSArIDE2KTtcbiAgICAgICAgICAgIGJsb2NrID0gdGhpcy5fYWVzLmRlY3J5cHQoYmxvY2spO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDE2OyBqKyspIHtcbiAgICAgICAgICAgICAgICBwbGFpbnRleHRbaSArIGpdID0gYmxvY2tbal0gXiB0aGlzLl9sYXN0Q2lwaGVyYmxvY2tbal07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvcHlBcnJheShjaXBoZXJ0ZXh0LCB0aGlzLl9sYXN0Q2lwaGVyYmxvY2ssIDAsIGksIGkgKyAxNik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGxhaW50ZXh0O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogIE1vZGUgT2YgT3BlcmF0aW9uIC0gQ2lwaGVyIEZlZWRiYWNrIChDRkIpXG4gICAgICovXG4gICAgdmFyIE1vZGVPZk9wZXJhdGlvbkNGQiA9IGZ1bmN0aW9uKGtleSwgaXYsIHNlZ21lbnRTaXplKSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNb2RlT2ZPcGVyYXRpb25DRkIpKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignQUVTIG11c3QgYmUgaW5zdGFuaXRhdGVkIHdpdGggYG5ld2AnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBcIkNpcGhlciBGZWVkYmFja1wiO1xuICAgICAgICB0aGlzLm5hbWUgPSBcImNmYlwiO1xuXG4gICAgICAgIGlmICghaXYpIHtcbiAgICAgICAgICAgIGl2ID0gY3JlYXRlQXJyYXkoMTYpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoaXYubGVuZ3RoICE9IDE2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgaW5pdGlhbGF0aW9uIHZlY3RvciBzaXplIChtdXN0IGJlIDE2IHNpemUpJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNlZ21lbnRTaXplKSB7IHNlZ21lbnRTaXplID0gMTsgfVxuXG4gICAgICAgIHRoaXMuc2VnbWVudFNpemUgPSBzZWdtZW50U2l6ZTtcblxuICAgICAgICB0aGlzLl9zaGlmdFJlZ2lzdGVyID0gY29lcmNlQXJyYXkoaXYsIHRydWUpO1xuXG4gICAgICAgIHRoaXMuX2FlcyA9IG5ldyBBRVMoa2V5KTtcbiAgICB9XG5cbiAgICBNb2RlT2ZPcGVyYXRpb25DRkIucHJvdG90eXBlLmVuY3J5cHQgPSBmdW5jdGlvbihwbGFpbnRleHQpIHtcbiAgICAgICAgaWYgKChwbGFpbnRleHQubGVuZ3RoICUgdGhpcy5zZWdtZW50U2l6ZSkgIT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBsYWludGV4dCBzaXplIChtdXN0IGJlIHNlZ21lbnRTaXplIGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVuY3J5cHRlZCA9IGNvZXJjZUFycmF5KHBsYWludGV4dCwgdHJ1ZSk7XG5cbiAgICAgICAgdmFyIHhvclNlZ21lbnQ7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW5jcnlwdGVkLmxlbmd0aDsgaSArPSB0aGlzLnNlZ21lbnRTaXplKSB7XG4gICAgICAgICAgICB4b3JTZWdtZW50ID0gdGhpcy5fYWVzLmVuY3J5cHQodGhpcy5fc2hpZnRSZWdpc3Rlcik7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMuc2VnbWVudFNpemU7IGorKykge1xuICAgICAgICAgICAgICAgIGVuY3J5cHRlZFtpICsgal0gXj0geG9yU2VnbWVudFtqXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2hpZnQgdGhlIHJlZ2lzdGVyXG4gICAgICAgICAgICBjb3B5QXJyYXkodGhpcy5fc2hpZnRSZWdpc3RlciwgdGhpcy5fc2hpZnRSZWdpc3RlciwgMCwgdGhpcy5zZWdtZW50U2l6ZSk7XG4gICAgICAgICAgICBjb3B5QXJyYXkoZW5jcnlwdGVkLCB0aGlzLl9zaGlmdFJlZ2lzdGVyLCAxNiAtIHRoaXMuc2VnbWVudFNpemUsIGksIGkgKyB0aGlzLnNlZ21lbnRTaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbmNyeXB0ZWQ7XG4gICAgfVxuXG4gICAgTW9kZU9mT3BlcmF0aW9uQ0ZCLnByb3RvdHlwZS5kZWNyeXB0ID0gZnVuY3Rpb24oY2lwaGVydGV4dCkge1xuICAgICAgICBpZiAoKGNpcGhlcnRleHQubGVuZ3RoICUgdGhpcy5zZWdtZW50U2l6ZSkgIT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGNpcGhlcnRleHQgc2l6ZSAobXVzdCBiZSBzZWdtZW50U2l6ZSBieXRlcyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwbGFpbnRleHQgPSBjb2VyY2VBcnJheShjaXBoZXJ0ZXh0LCB0cnVlKTtcblxuICAgICAgICB2YXIgeG9yU2VnbWVudDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGFpbnRleHQubGVuZ3RoOyBpICs9IHRoaXMuc2VnbWVudFNpemUpIHtcbiAgICAgICAgICAgIHhvclNlZ21lbnQgPSB0aGlzLl9hZXMuZW5jcnlwdCh0aGlzLl9zaGlmdFJlZ2lzdGVyKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLnNlZ21lbnRTaXplOyBqKyspIHtcbiAgICAgICAgICAgICAgICBwbGFpbnRleHRbaSArIGpdIF49IHhvclNlZ21lbnRbal07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNoaWZ0IHRoZSByZWdpc3RlclxuICAgICAgICAgICAgY29weUFycmF5KHRoaXMuX3NoaWZ0UmVnaXN0ZXIsIHRoaXMuX3NoaWZ0UmVnaXN0ZXIsIDAsIHRoaXMuc2VnbWVudFNpemUpO1xuICAgICAgICAgICAgY29weUFycmF5KGNpcGhlcnRleHQsIHRoaXMuX3NoaWZ0UmVnaXN0ZXIsIDE2IC0gdGhpcy5zZWdtZW50U2l6ZSwgaSwgaSArIHRoaXMuc2VnbWVudFNpemUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBsYWludGV4dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgTW9kZSBPZiBPcGVyYXRpb24gLSBPdXRwdXQgRmVlZGJhY2sgKE9GQilcbiAgICAgKi9cbiAgICB2YXIgTW9kZU9mT3BlcmF0aW9uT0ZCID0gZnVuY3Rpb24oa2V5LCBpdikge1xuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTW9kZU9mT3BlcmF0aW9uT0ZCKSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0FFUyBtdXN0IGJlIGluc3Rhbml0YXRlZCB3aXRoIGBuZXdgJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gXCJPdXRwdXQgRmVlZGJhY2tcIjtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJvZmJcIjtcblxuICAgICAgICBpZiAoIWl2KSB7XG4gICAgICAgICAgICBpdiA9IGNyZWF0ZUFycmF5KDE2KTtcblxuICAgICAgICB9IGVsc2UgaWYgKGl2Lmxlbmd0aCAhPSAxNikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGluaXRpYWxhdGlvbiB2ZWN0b3Igc2l6ZSAobXVzdCBiZSAxNiBieXRlcyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xhc3RQcmVjaXBoZXIgPSBjb2VyY2VBcnJheShpdiwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuX2xhc3RQcmVjaXBoZXJJbmRleCA9IDE2O1xuXG4gICAgICAgIHRoaXMuX2FlcyA9IG5ldyBBRVMoa2V5KTtcbiAgICB9XG5cbiAgICBNb2RlT2ZPcGVyYXRpb25PRkIucHJvdG90eXBlLmVuY3J5cHQgPSBmdW5jdGlvbihwbGFpbnRleHQpIHtcbiAgICAgICAgdmFyIGVuY3J5cHRlZCA9IGNvZXJjZUFycmF5KHBsYWludGV4dCwgdHJ1ZSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNyeXB0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9sYXN0UHJlY2lwaGVySW5kZXggPT09IDE2KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdFByZWNpcGhlciA9IHRoaXMuX2Flcy5lbmNyeXB0KHRoaXMuX2xhc3RQcmVjaXBoZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RQcmVjaXBoZXJJbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbmNyeXB0ZWRbaV0gXj0gdGhpcy5fbGFzdFByZWNpcGhlclt0aGlzLl9sYXN0UHJlY2lwaGVySW5kZXgrK107XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZW5jcnlwdGVkO1xuICAgIH1cblxuICAgIC8vIERlY3J5cHRpb24gaXMgc3ltZXRyaWNcbiAgICBNb2RlT2ZPcGVyYXRpb25PRkIucHJvdG90eXBlLmRlY3J5cHQgPSBNb2RlT2ZPcGVyYXRpb25PRkIucHJvdG90eXBlLmVuY3J5cHQ7XG5cblxuICAgIC8qKlxuICAgICAqICBDb3VudGVyIG9iamVjdCBmb3IgQ1RSIGNvbW1vbiBtb2RlIG9mIG9wZXJhdGlvblxuICAgICAqL1xuICAgIHZhciBDb3VudGVyID0gZnVuY3Rpb24oaW5pdGlhbFZhbHVlKSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDb3VudGVyKSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0NvdW50ZXIgbXVzdCBiZSBpbnN0YW5pdGF0ZWQgd2l0aCBgbmV3YCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2UgYWxsb3cgMCwgYnV0IGFueXRoaW5nIGZhbHNlLWlzaCB1c2VzIHRoZSBkZWZhdWx0IDFcbiAgICAgICAgaWYgKGluaXRpYWxWYWx1ZSAhPT0gMCAmJiAhaW5pdGlhbFZhbHVlKSB7IGluaXRpYWxWYWx1ZSA9IDE7IH1cblxuICAgICAgICBpZiAodHlwZW9mKGluaXRpYWxWYWx1ZSkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLl9jb3VudGVyID0gY3JlYXRlQXJyYXkoMTYpO1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZShpbml0aWFsVmFsdWUpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldEJ5dGVzKGluaXRpYWxWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBDb3VudGVyLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YodmFsdWUpICE9PSAnbnVtYmVyJyB8fCBwYXJzZUludCh2YWx1ZSkgIT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBjb3VudGVyIHZhbHVlIChtdXN0IGJlIGFuIGludGVnZXIpJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDE1OyBpbmRleCA+PSAwOyAtLWluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLl9jb3VudGVyW2luZGV4XSA9IHZhbHVlICUgMjU2O1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSA+PiA4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQ291bnRlci5wcm90b3R5cGUuc2V0Qnl0ZXMgPSBmdW5jdGlvbihieXRlcykge1xuICAgICAgICBieXRlcyA9IGNvZXJjZUFycmF5KGJ5dGVzLCB0cnVlKTtcblxuICAgICAgICBpZiAoYnl0ZXMubGVuZ3RoICE9IDE2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgY291bnRlciBieXRlcyBzaXplIChtdXN0IGJlIDE2IGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY291bnRlciA9IGJ5dGVzO1xuICAgIH07XG5cbiAgICBDb3VudGVyLnByb3RvdHlwZS5pbmNyZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE1OyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvdW50ZXJbaV0gPT09IDI1NSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvdW50ZXJbaV0gPSAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb3VudGVyW2ldKys7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqICBNb2RlIE9mIE9wZXJhdGlvbiAtIENvdW50ZXIgKENUUilcbiAgICAgKi9cbiAgICB2YXIgTW9kZU9mT3BlcmF0aW9uQ1RSID0gZnVuY3Rpb24oa2V5LCBjb3VudGVyKSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNb2RlT2ZPcGVyYXRpb25DVFIpKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignQUVTIG11c3QgYmUgaW5zdGFuaXRhdGVkIHdpdGggYG5ld2AnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBcIkNvdW50ZXJcIjtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJjdHJcIjtcblxuICAgICAgICBpZiAoIShjb3VudGVyIGluc3RhbmNlb2YgQ291bnRlcikpIHtcbiAgICAgICAgICAgIGNvdW50ZXIgPSBuZXcgQ291bnRlcihjb3VudGVyKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY291bnRlciA9IGNvdW50ZXI7XG5cbiAgICAgICAgdGhpcy5fcmVtYWluaW5nQ291bnRlciA9IG51bGw7XG4gICAgICAgIHRoaXMuX3JlbWFpbmluZ0NvdW50ZXJJbmRleCA9IDE2O1xuXG4gICAgICAgIHRoaXMuX2FlcyA9IG5ldyBBRVMoa2V5KTtcbiAgICB9XG5cbiAgICBNb2RlT2ZPcGVyYXRpb25DVFIucHJvdG90eXBlLmVuY3J5cHQgPSBmdW5jdGlvbihwbGFpbnRleHQpIHtcbiAgICAgICAgdmFyIGVuY3J5cHRlZCA9IGNvZXJjZUFycmF5KHBsYWludGV4dCwgdHJ1ZSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNyeXB0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9yZW1haW5pbmdDb3VudGVySW5kZXggPT09IDE2KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtYWluaW5nQ291bnRlciA9IHRoaXMuX2Flcy5lbmNyeXB0KHRoaXMuX2NvdW50ZXIuX2NvdW50ZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbWFpbmluZ0NvdW50ZXJJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5fY291bnRlci5pbmNyZW1lbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVuY3J5cHRlZFtpXSBePSB0aGlzLl9yZW1haW5pbmdDb3VudGVyW3RoaXMuX3JlbWFpbmluZ0NvdW50ZXJJbmRleCsrXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbmNyeXB0ZWQ7XG4gICAgfVxuXG4gICAgLy8gRGVjcnlwdGlvbiBpcyBzeW1ldHJpY1xuICAgIE1vZGVPZk9wZXJhdGlvbkNUUi5wcm90b3R5cGUuZGVjcnlwdCA9IE1vZGVPZk9wZXJhdGlvbkNUUi5wcm90b3R5cGUuZW5jcnlwdDtcblxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBQYWRkaW5nXG5cbiAgICAvLyBTZWU6aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzIzMTVcbiAgICBmdW5jdGlvbiBwa2NzN3BhZChkYXRhKSB7XG4gICAgICAgIGRhdGEgPSBjb2VyY2VBcnJheShkYXRhLCB0cnVlKTtcbiAgICAgICAgdmFyIHBhZGRlciA9IDE2IC0gKGRhdGEubGVuZ3RoICUgMTYpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlQXJyYXkoZGF0YS5sZW5ndGggKyBwYWRkZXIpO1xuICAgICAgICBjb3B5QXJyYXkoZGF0YSwgcmVzdWx0KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IGRhdGEubGVuZ3RoOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHRbaV0gPSBwYWRkZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwa2NzN3N0cmlwKGRhdGEpIHtcbiAgICAgICAgZGF0YSA9IGNvZXJjZUFycmF5KGRhdGEsIHRydWUpO1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPCAxNikgeyB0aHJvdyBuZXcgRXJyb3IoJ1BLQ1MjNyBpbnZhbGlkIGxlbmd0aCcpOyB9XG5cbiAgICAgICAgdmFyIHBhZGRlciA9IGRhdGFbZGF0YS5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKHBhZGRlciA+IDE2KSB7IHRocm93IG5ldyBFcnJvcignUEtDUyM3IHBhZGRpbmcgYnl0ZSBvdXQgb2YgcmFuZ2UnKTsgfVxuXG4gICAgICAgIHZhciBsZW5ndGggPSBkYXRhLmxlbmd0aCAtIHBhZGRlcjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWRkZXI7IGkrKykge1xuICAgICAgICAgICAgaWYgKGRhdGFbbGVuZ3RoICsgaV0gIT09IHBhZGRlcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUEtDUyM3IGludmFsaWQgcGFkZGluZyBieXRlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlQXJyYXkobGVuZ3RoKTtcbiAgICAgICAgY29weUFycmF5KGRhdGEsIHJlc3VsdCwgMCwgMCwgbGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIEV4cG9ydGluZ1xuXG5cbiAgICAvLyBUaGUgYmxvY2sgY2lwaGVyXG4gICAgdmFyIGFlc2pzID0ge1xuICAgICAgICBBRVM6IEFFUyxcbiAgICAgICAgQ291bnRlcjogQ291bnRlcixcblxuICAgICAgICBNb2RlT2ZPcGVyYXRpb246IHtcbiAgICAgICAgICAgIGVjYjogTW9kZU9mT3BlcmF0aW9uRUNCLFxuICAgICAgICAgICAgY2JjOiBNb2RlT2ZPcGVyYXRpb25DQkMsXG4gICAgICAgICAgICBjZmI6IE1vZGVPZk9wZXJhdGlvbkNGQixcbiAgICAgICAgICAgIG9mYjogTW9kZU9mT3BlcmF0aW9uT0ZCLFxuICAgICAgICAgICAgY3RyOiBNb2RlT2ZPcGVyYXRpb25DVFJcbiAgICAgICAgfSxcblxuICAgICAgICB1dGlsczoge1xuICAgICAgICAgICAgaGV4OiBjb252ZXJ0SGV4LFxuICAgICAgICAgICAgdXRmODogY29udmVydFV0ZjhcbiAgICAgICAgfSxcblxuICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICBwa2NzNzoge1xuICAgICAgICAgICAgICAgIHBhZDogcGtjczdwYWQsXG4gICAgICAgICAgICAgICAgc3RyaXA6IHBrY3M3c3RyaXBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBfYXJyYXlUZXN0OiB7XG4gICAgICAgICAgICBjb2VyY2VBcnJheTogY29lcmNlQXJyYXksXG4gICAgICAgICAgICBjcmVhdGVBcnJheTogY3JlYXRlQXJyYXksXG4gICAgICAgICAgICBjb3B5QXJyYXk6IGNvcHlBcnJheSxcbiAgICAgICAgfVxuICAgIH07XG5cblxuICAgIC8vIG5vZGUuanNcbiAgICBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gYWVzanNcblxuICAgIC8vIFJlcXVpcmVKUy9BTURcbiAgICAvLyBodHRwOi8vd3d3LnJlcXVpcmVqcy5vcmcvZG9jcy9hcGkuaHRtbFxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbWRqcy9hbWRqcy1hcGkvd2lraS9BTURcbiAgICB9IGVsc2UgaWYgKHR5cGVvZihkZWZpbmUpID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKGFlc2pzKTtcblxuICAgIC8vIFdlYiBCcm93c2Vyc1xuICAgIH0gZWxzZSB7XG5cbiAgICAgICAgLy8gSWYgdGhlcmUgd2FzIGFuIGV4aXN0aW5nIGxpYnJhcnkgYXQgXCJhZXNqc1wiIG1ha2Ugc3VyZSBpdCdzIHN0aWxsIGF2YWlsYWJsZVxuICAgICAgICBpZiAocm9vdC5hZXNqcykge1xuICAgICAgICAgICAgYWVzanMuX2Flc2pzID0gcm9vdC5hZXNqcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJvb3QuYWVzanMgPSBhZXNqcztcbiAgICB9XG5cblxufSkodGhpcyk7XG4iLCJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwianNvbi13YWxsZXRzLzUuNy4wXCI7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlpZnksIEJ5dGVzLCBCeXRlc0xpa2UsIGhleGxpZnkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IHRvVXRmOEJ5dGVzLCBVbmljb2RlTm9ybWFsaXphdGlvbkZvcm0gfSBmcm9tICdAZXRoZXJzcHJvamVjdC9zdHJpbmdzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGxvb3NlQXJyYXlpZnkoaGV4U3RyaW5nOiBzdHJpbmcpOiBVaW50OEFycmF5IHtcbiAgICBpZiAodHlwZW9mKGhleFN0cmluZykgPT09ICdzdHJpbmcnICYmIGhleFN0cmluZy5zdWJzdHJpbmcoMCwgMikgIT09ICcweCcpIHtcbiAgICAgICAgaGV4U3RyaW5nID0gJzB4JyArIGhleFN0cmluZztcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5aWZ5KGhleFN0cmluZyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB6cGFkKHZhbHVlOiBTdHJpbmcgfCBudW1iZXIsIGxlbmd0aDogbnVtYmVyKTogU3RyaW5nIHtcbiAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSk7XG4gICAgd2hpbGUgKHZhbHVlLmxlbmd0aCA8IGxlbmd0aCkgeyB2YWx1ZSA9ICcwJyArIHZhbHVlOyB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFzc3dvcmQocGFzc3dvcmQ6IEJ5dGVzIHwgc3RyaW5nKTogVWludDhBcnJheSB7XG4gICAgaWYgKHR5cGVvZihwYXNzd29yZCkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB0b1V0ZjhCeXRlcyhwYXNzd29yZCwgVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtLk5GS0MpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXlpZnkocGFzc3dvcmQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VhcmNoUGF0aChvYmplY3Q6IGFueSwgcGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBsZXQgY3VycmVudENoaWxkID0gb2JqZWN0O1xuXG4gICAgY29uc3QgY29tcHMgPSBwYXRoLnRvTG93ZXJDYXNlKCkuc3BsaXQoJy8nKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbXBzLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgLy8gU2VhcmNoIGZvciBhIGNoaWxkIG9iamVjdCB3aXRoIGEgY2FzZS1pbnNlbnNpdGl2ZSBtYXRjaGluZyBrZXlcbiAgICAgICAgbGV0IG1hdGNoaW5nQ2hpbGQgPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBjdXJyZW50Q2hpbGQpIHtcbiAgICAgICAgICAgICBpZiAoa2V5LnRvTG93ZXJDYXNlKCkgPT09IGNvbXBzW2ldKSB7XG4gICAgICAgICAgICAgICAgIG1hdGNoaW5nQ2hpbGQgPSBjdXJyZW50Q2hpbGRba2V5XTtcbiAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGlkbid0IGZpbmQgb25lLiA6JyhcbiAgICAgICAgaWYgKG1hdGNoaW5nQ2hpbGQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTm93IGNoZWNrIHRoaXMgY2hpbGQuLi5cbiAgICAgICAgY3VycmVudENoaWxkID0gbWF0Y2hpbmdDaGlsZDtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudENoaWxkO1xufVxuXG4vLyBTZWU6IGh0dHBzOi8vd3d3LmlldGYub3JnL3JmYy9yZmM0MTIyLnR4dCAoU2VjdGlvbiA0LjQpXG5leHBvcnQgZnVuY3Rpb24gdXVpZFY0KHJhbmRvbUJ5dGVzOiBCeXRlc0xpa2UpOiBzdHJpbmcge1xuICAgIGNvbnN0IGJ5dGVzID0gYXJyYXlpZnkocmFuZG9tQnl0ZXMpO1xuXG4gICAgLy8gU2VjdGlvbjogNC4xLjM6XG4gICAgLy8gLSB0aW1lX2hpX2FuZF92ZXJzaW9uWzEyOjE2XSA9IDBiMDEwMFxuICAgIGJ5dGVzWzZdID0gKGJ5dGVzWzZdICYgMHgwZikgfCAweDQwO1xuXG4gICAgLy8gU2VjdGlvbiA0LjRcbiAgICAvLyAtIGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRbNl0gPSAwYjBcbiAgICAvLyAtIGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRbN10gPSAwYjFcbiAgICBieXRlc1s4XSA9IChieXRlc1s4XSAmIDB4M2YpIHwgMHg4MDtcblxuICAgIGNvbnN0IHZhbHVlID0gaGV4bGlmeShieXRlcyk7XG5cbiAgICByZXR1cm4gW1xuICAgICAgIHZhbHVlLnN1YnN0cmluZygyLCAxMCksXG4gICAgICAgdmFsdWUuc3Vic3RyaW5nKDEwLCAxNCksXG4gICAgICAgdmFsdWUuc3Vic3RyaW5nKDE0LCAxOCksXG4gICAgICAgdmFsdWUuc3Vic3RyaW5nKDE4LCAyMiksXG4gICAgICAgdmFsdWUuc3Vic3RyaW5nKDIyLCAzNCksXG4gICAgXS5qb2luKFwiLVwiKTtcbn1cblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBhZXMgZnJvbSBcImFlcy1qc1wiO1xuXG5pbXBvcnQgeyBFeHRlcm5hbGx5T3duZWRBY2NvdW50IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2Fic3RyYWN0LXNpZ25lclwiO1xuaW1wb3J0IHsgZ2V0QWRkcmVzcyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hZGRyZXNzXCI7XG5pbXBvcnQgeyBhcnJheWlmeSwgQnl0ZXMgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IGtlY2NhazI1NiB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9rZWNjYWsyNTZcIjtcbmltcG9ydCB7IHBia2RmMiB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wYmtkZjJcIjtcbmltcG9ydCB7IHRvVXRmOEJ5dGVzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3N0cmluZ3NcIjtcbmltcG9ydCB7IERlc2NyaXB0aW9uIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIjtcblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuXG5pbXBvcnQgeyBnZXRQYXNzd29yZCwgbG9vc2VBcnJheWlmeSwgc2VhcmNoUGF0aCB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgX0Nyb3dkc2FsZUFjY291bnQge1xuICAgIGFkZHJlc3M6IHN0cmluZztcbiAgICBwcml2YXRlS2V5OiBzdHJpbmc7XG5cbiAgICBfaXNDcm93ZHNhbGVBY2NvdW50OiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgQ3Jvd2RzYWxlQWNjb3VudCBleHRlbmRzIERlc2NyaXB0aW9uPF9Dcm93ZHNhbGVBY2NvdW50PiBpbXBsZW1lbnRzIEV4dGVybmFsbHlPd25lZEFjY291bnQge1xuICAgIHJlYWRvbmx5IGFkZHJlc3M6IHN0cmluZztcbiAgICByZWFkb25seSBwcml2YXRlS2V5OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgbW5lbW9uaWM/OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgcGF0aD86IHN0cmluZztcblxuICAgIHJlYWRvbmx5IF9pc0Nyb3dkc2FsZUFjY291bnQ6IGJvb2xlYW47XG5cbiAgICBpc0Nyb3dkc2FsZUFjY291bnQodmFsdWU6IGFueSk6IHZhbHVlIGlzIENyb3dkc2FsZUFjY291bnQge1xuICAgICAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX2lzQ3Jvd2RzYWxlQWNjb3VudCk7XG4gICAgfVxufVxuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9weWV0aHNhbGV0b29sXG5leHBvcnQgZnVuY3Rpb24gZGVjcnlwdChqc29uOiBzdHJpbmcsIHBhc3N3b3JkOiBCeXRlcyB8IHN0cmluZyk6IEV4dGVybmFsbHlPd25lZEFjY291bnQge1xuICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGpzb24pO1xuXG4gICAgcGFzc3dvcmQgPSBnZXRQYXNzd29yZChwYXNzd29yZCk7XG5cbiAgICAvLyBFdGhlcmV1bSBBZGRyZXNzXG4gICAgY29uc3QgZXRoYWRkciA9IGdldEFkZHJlc3Moc2VhcmNoUGF0aChkYXRhLCBcImV0aGFkZHJcIikpO1xuXG4gICAgLy8gRW5jcnlwdGVkIFNlZWRcbiAgICBjb25zdCBlbmNzZWVkID0gbG9vc2VBcnJheWlmeShzZWFyY2hQYXRoKGRhdGEsIFwiZW5jc2VlZFwiKSk7XG4gICAgaWYgKCFlbmNzZWVkIHx8IChlbmNzZWVkLmxlbmd0aCAlIDE2KSAhPT0gMCkge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBlbmNzZWVkXCIsIFwianNvblwiLCBqc29uKTtcbiAgICB9XG5cbiAgICBjb25zdCBrZXkgPSBhcnJheWlmeShwYmtkZjIocGFzc3dvcmQsIHBhc3N3b3JkLCAyMDAwLCAzMiwgXCJzaGEyNTZcIikpLnNsaWNlKDAsIDE2KTtcblxuICAgIGNvbnN0IGl2ID0gZW5jc2VlZC5zbGljZSgwLCAxNik7XG4gICAgY29uc3QgZW5jcnlwdGVkU2VlZCA9IGVuY3NlZWQuc2xpY2UoMTYpO1xuXG4gICAgLy8gRGVjcnlwdCB0aGUgc2VlZFxuICAgIGNvbnN0IGFlc0NiYyA9IG5ldyBhZXMuTW9kZU9mT3BlcmF0aW9uLmNiYyhrZXksIGl2KTtcbiAgICBjb25zdCBzZWVkID0gYWVzLnBhZGRpbmcucGtjczcuc3RyaXAoYXJyYXlpZnkoYWVzQ2JjLmRlY3J5cHQoZW5jcnlwdGVkU2VlZCkpKTtcblxuICAgIC8vIFRoaXMgd2FsbGV0IGZvcm1hdCBpcyB3ZWlyZC4uLiBDb252ZXJ0IHRoZSBiaW5hcnkgZW5jb2RlZCBoZXggdG8gYSBzdHJpbmcuXG4gICAgbGV0IHNlZWRIZXggPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWVkSGV4ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoc2VlZFtpXSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2VlZEhleEJ5dGVzID0gdG9VdGY4Qnl0ZXMoc2VlZEhleCk7XG5cbiAgICBjb25zdCBwcml2YXRlS2V5ID0ga2VjY2FrMjU2KHNlZWRIZXhCeXRlcyk7XG5cbiAgICByZXR1cm4gbmV3IENyb3dkc2FsZUFjY291bnQgKHtcbiAgICAgICAgX2lzQ3Jvd2RzYWxlQWNjb3VudDogdHJ1ZSxcbiAgICAgICAgYWRkcmVzczogZXRoYWRkcixcbiAgICAgICAgcHJpdmF0ZUtleTogcHJpdmF0ZUtleVxuICAgIH0pO1xufVxuXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZ2V0QWRkcmVzcyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hZGRyZXNzXCI7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ3Jvd2RzYWxlV2FsbGV0KGpzb246IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGxldCBkYXRhOiBhbnkgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGpzb24pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgcmV0dXJuIChkYXRhLmVuY3NlZWQgJiYgZGF0YS5ldGhhZGRyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzS2V5c3RvcmVXYWxsZXQoanNvbjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgbGV0IGRhdGE6IGFueSA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoanNvbik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICBpZiAoIWRhdGEudmVyc2lvbiB8fCBwYXJzZUludChkYXRhLnZlcnNpb24pICE9PSBkYXRhLnZlcnNpb24gfHwgcGFyc2VJbnQoZGF0YS52ZXJzaW9uKSAhPT0gMykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gQFRPRE86IFB1dCBtb3JlIGNoZWNrcyB0byBtYWtlIHN1cmUgaXQgaGFzIGtkZiwgaXYgYW5kIGFsbCB0aGF0IGdvb2Qgc3R1ZmZcbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuLy9leHBvcnQgZnVuY3Rpb24gaXNKc29uV2FsbGV0KGpzb246IHN0cmluZyk6IGJvb2xlYW4ge1xuLy8gICAgcmV0dXJuIChpc1NlY3JldFN0b3JhZ2VXYWxsZXQoanNvbikgfHwgaXNDcm93ZHNhbGVXYWxsZXQoanNvbikpO1xuLy99XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRKc29uV2FsbGV0QWRkcmVzcyhqc29uOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmIChpc0Nyb3dkc2FsZVdhbGxldChqc29uKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEFkZHJlc3MoSlNPTi5wYXJzZShqc29uKS5ldGhhZGRyKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgcmV0dXJuIG51bGw7IH1cbiAgICB9XG5cbiAgICBpZiAoaXNLZXlzdG9yZVdhbGxldChqc29uKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEFkZHJlc3MoSlNPTi5wYXJzZShqc29uKS5hZGRyZXNzKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgcmV0dXJuIG51bGw7IH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbihyb290KSB7XG4gICAgY29uc3QgTUFYX1ZBTFVFID0gMHg3ZmZmZmZmZjtcblxuICAgIC8vIFRoZSBTSEEyNTYgYW5kIFBCS0RGMiBpbXBsZW1lbnRhdGlvbiBhcmUgZnJvbSBzY3J5cHQtYXN5bmMtanM6XG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGNoZXN0L3NjcnlwdC1hc3luYy1qc1xuICAgIGZ1bmN0aW9uIFNIQTI1NihtKSB7XG4gICAgICAgIGNvbnN0IEsgPSBuZXcgVWludDMyQXJyYXkoW1xuICAgICAgICAgICAweDQyOGEyZjk4LCAweDcxMzc0NDkxLCAweGI1YzBmYmNmLCAweGU5YjVkYmE1LCAweDM5NTZjMjViLFxuICAgICAgICAgICAweDU5ZjExMWYxLCAweDkyM2Y4MmE0LCAweGFiMWM1ZWQ1LCAweGQ4MDdhYTk4LCAweDEyODM1YjAxLFxuICAgICAgICAgICAweDI0MzE4NWJlLCAweDU1MGM3ZGMzLCAweDcyYmU1ZDc0LCAweDgwZGViMWZlLCAweDliZGMwNmE3LFxuICAgICAgICAgICAweGMxOWJmMTc0LCAweGU0OWI2OWMxLCAweGVmYmU0Nzg2LCAweDBmYzE5ZGM2LCAweDI0MGNhMWNjLFxuICAgICAgICAgICAweDJkZTkyYzZmLCAweDRhNzQ4NGFhLCAweDVjYjBhOWRjLCAweDc2Zjk4OGRhLCAweDk4M2U1MTUyLFxuICAgICAgICAgICAweGE4MzFjNjZkLCAweGIwMDMyN2M4LCAweGJmNTk3ZmM3LCAweGM2ZTAwYmYzLCAweGQ1YTc5MTQ3LFxuICAgICAgICAgICAweDA2Y2E2MzUxLCAweDE0MjkyOTY3LCAweDI3YjcwYTg1LCAweDJlMWIyMTM4LCAweDRkMmM2ZGZjLFxuICAgICAgICAgICAweDUzMzgwZDEzLCAweDY1MGE3MzU0LCAweDc2NmEwYWJiLCAweDgxYzJjOTJlLCAweDkyNzIyYzg1LFxuICAgICAgICAgICAweGEyYmZlOGExLCAweGE4MWE2NjRiLCAweGMyNGI4YjcwLCAweGM3NmM1MWEzLCAweGQxOTJlODE5LFxuICAgICAgICAgICAweGQ2OTkwNjI0LCAweGY0MGUzNTg1LCAweDEwNmFhMDcwLCAweDE5YTRjMTE2LCAweDFlMzc2YzA4LFxuICAgICAgICAgICAweDI3NDg3NzRjLCAweDM0YjBiY2I1LCAweDM5MWMwY2IzLCAweDRlZDhhYTRhLCAweDViOWNjYTRmLFxuICAgICAgICAgICAweDY4MmU2ZmYzLCAweDc0OGY4MmVlLCAweDc4YTU2MzZmLCAweDg0Yzg3ODE0LCAweDhjYzcwMjA4LFxuICAgICAgICAgICAweDkwYmVmZmZhLCAweGE0NTA2Y2ViLCAweGJlZjlhM2Y3LCAweGM2NzE3OGYyXG4gICAgICAgXSk7XG5cbiAgICAgICAgbGV0IGgwID0gMHg2YTA5ZTY2NywgaDEgPSAweGJiNjdhZTg1LCBoMiA9IDB4M2M2ZWYzNzIsIGgzID0gMHhhNTRmZjUzYTtcbiAgICAgICAgbGV0IGg0ID0gMHg1MTBlNTI3ZiwgaDUgPSAweDliMDU2ODhjLCBoNiA9IDB4MWY4M2Q5YWIsIGg3ID0gMHg1YmUwY2QxOTtcbiAgICAgICAgY29uc3QgdyA9IG5ldyBVaW50MzJBcnJheSg2NCk7XG5cbiAgICAgICAgZnVuY3Rpb24gYmxvY2tzKHApIHtcbiAgICAgICAgICAgIGxldCBvZmYgPSAwLCBsZW4gPSBwLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChsZW4gPj0gNjQpIHtcbiAgICAgICAgICAgICAgICBsZXQgYSA9IGgwLCBiID0gaDEsIGMgPSBoMiwgZCA9IGgzLCBlID0gaDQsIGYgPSBoNSwgZyA9IGg2LCBoID0gaDcsIHUsIGksIGosIHQxLCB0MjtcblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGogPSBvZmYgKyBpKjQ7XG4gICAgICAgICAgICAgICAgICAgIHdbaV0gPSAoKHBbal0gJiAweGZmKTw8MjQpIHwgKChwW2orMV0gJiAweGZmKTw8MTYpIHxcbiAgICAgICAgICAgICAgICAgICAgKChwW2orMl0gJiAweGZmKTw8OCkgfCAocFtqKzNdICYgMHhmZik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMTY7IGkgPCA2NDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHUgPSB3W2ktMl07XG4gICAgICAgICAgICAgICAgICAgIHQxID0gKCh1Pj4+MTcpIHwgKHU8PCgzMi0xNykpKSBeICgodT4+PjE5KSB8ICh1PDwoMzItMTkpKSkgXiAodT4+PjEwKTtcblxuICAgICAgICAgICAgICAgICAgICB1ID0gd1tpLTE1XTtcbiAgICAgICAgICAgICAgICAgICAgdDIgPSAoKHU+Pj43KSB8ICh1PDwoMzItNykpKSBeICgodT4+PjE4KSB8ICh1PDwoMzItMTgpKSkgXiAodT4+PjMpO1xuXG4gICAgICAgICAgICAgICAgICAgIHdbaV0gPSAoKCh0MSArIHdbaS03XSkgfCAwKSArICgodDIgKyB3W2ktMTZdKSB8IDApKSB8IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDY0OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdDEgPSAoKCgoKChlPj4+NikgfCAoZTw8KDMyLTYpKSkgXiAoKGU+Pj4xMSkgfCAoZTw8KDMyLTExKSkpIF5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChlPj4+MjUpIHwgKGU8PCgzMi0yNSkpKSkgKyAoKGUgJiBmKSBeICh+ZSAmIGcpKSkgfCAwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgoaCArICgoS1tpXSArIHdbaV0pIHwgMCkpIHwgMCkpIHwgMDtcblxuICAgICAgICAgICAgICAgICAgICB0MiA9ICgoKChhPj4+MikgfCAoYTw8KDMyLTIpKSkgXiAoKGE+Pj4xMykgfCAoYTw8KDMyLTEzKSkpIF5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICgoYT4+PjIyKSB8IChhPDwoMzItMjIpKSkpICsgKChhICYgYikgXiAoYSAmIGMpIF4gKGIgJiBjKSkpIHwgMDtcblxuICAgICAgICAgICAgICAgICAgICBoID0gZztcbiAgICAgICAgICAgICAgICAgICAgZyA9IGY7XG4gICAgICAgICAgICAgICAgICAgIGYgPSBlO1xuICAgICAgICAgICAgICAgICAgICBlID0gKGQgKyB0MSkgfCAwO1xuICAgICAgICAgICAgICAgICAgICBkID0gYztcbiAgICAgICAgICAgICAgICAgICAgYyA9IGI7XG4gICAgICAgICAgICAgICAgICAgIGIgPSBhO1xuICAgICAgICAgICAgICAgICAgICBhID0gKHQxICsgdDIpIHwgMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBoMCA9IChoMCArIGEpIHwgMDtcbiAgICAgICAgICAgICAgICBoMSA9IChoMSArIGIpIHwgMDtcbiAgICAgICAgICAgICAgICBoMiA9IChoMiArIGMpIHwgMDtcbiAgICAgICAgICAgICAgICBoMyA9IChoMyArIGQpIHwgMDtcbiAgICAgICAgICAgICAgICBoNCA9IChoNCArIGUpIHwgMDtcbiAgICAgICAgICAgICAgICBoNSA9IChoNSArIGYpIHwgMDtcbiAgICAgICAgICAgICAgICBoNiA9IChoNiArIGcpIHwgMDtcbiAgICAgICAgICAgICAgICBoNyA9IChoNyArIGgpIHwgMDtcblxuICAgICAgICAgICAgICAgIG9mZiArPSA2NDtcbiAgICAgICAgICAgICAgICBsZW4gLT0gNjQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBibG9ja3MobSk7XG5cbiAgICAgICAgbGV0IGksIGJ5dGVzTGVmdCA9IG0ubGVuZ3RoICUgNjQsXG4gICAgICAgIGJpdExlbkhpID0gKG0ubGVuZ3RoIC8gMHgyMDAwMDAwMCkgfCAwLFxuICAgICAgICBiaXRMZW5MbyA9IG0ubGVuZ3RoIDw8IDMsXG4gICAgICAgIG51bVplcm9zID0gKGJ5dGVzTGVmdCA8IDU2KSA/IDU2IDogMTIwLFxuICAgICAgICBwID0gbS5zbGljZShtLmxlbmd0aCAtIGJ5dGVzTGVmdCwgbS5sZW5ndGgpO1xuXG4gICAgICAgIHAucHVzaCgweDgwKTtcbiAgICAgICAgZm9yIChpID0gYnl0ZXNMZWZ0ICsgMTsgaSA8IG51bVplcm9zOyBpKyspIHsgcC5wdXNoKDApOyB9XG4gICAgICAgIHAucHVzaCgoYml0TGVuSGkgPj4+IDI0KSAmIDB4ZmYpO1xuICAgICAgICBwLnB1c2goKGJpdExlbkhpID4+PiAxNikgJiAweGZmKTtcbiAgICAgICAgcC5wdXNoKChiaXRMZW5IaSA+Pj4gOCkgICYgMHhmZik7XG4gICAgICAgIHAucHVzaCgoYml0TGVuSGkgPj4+IDApICAmIDB4ZmYpO1xuICAgICAgICBwLnB1c2goKGJpdExlbkxvID4+PiAyNCkgJiAweGZmKTtcbiAgICAgICAgcC5wdXNoKChiaXRMZW5MbyA+Pj4gMTYpICYgMHhmZik7XG4gICAgICAgIHAucHVzaCgoYml0TGVuTG8gPj4+IDgpICAmIDB4ZmYpO1xuICAgICAgICBwLnB1c2goKGJpdExlbkxvID4+PiAwKSAgJiAweGZmKTtcblxuICAgICAgICBibG9ja3MocCk7XG5cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIChoMCA+Pj4gMjQpICYgMHhmZiwgKGgwID4+PiAxNikgJiAweGZmLCAoaDAgPj4+IDgpICYgMHhmZiwgKGgwID4+PiAwKSAmIDB4ZmYsXG4gICAgICAgICAgICAoaDEgPj4+IDI0KSAmIDB4ZmYsIChoMSA+Pj4gMTYpICYgMHhmZiwgKGgxID4+PiA4KSAmIDB4ZmYsIChoMSA+Pj4gMCkgJiAweGZmLFxuICAgICAgICAgICAgKGgyID4+PiAyNCkgJiAweGZmLCAoaDIgPj4+IDE2KSAmIDB4ZmYsIChoMiA+Pj4gOCkgJiAweGZmLCAoaDIgPj4+IDApICYgMHhmZixcbiAgICAgICAgICAgIChoMyA+Pj4gMjQpICYgMHhmZiwgKGgzID4+PiAxNikgJiAweGZmLCAoaDMgPj4+IDgpICYgMHhmZiwgKGgzID4+PiAwKSAmIDB4ZmYsXG4gICAgICAgICAgICAoaDQgPj4+IDI0KSAmIDB4ZmYsIChoNCA+Pj4gMTYpICYgMHhmZiwgKGg0ID4+PiA4KSAmIDB4ZmYsIChoNCA+Pj4gMCkgJiAweGZmLFxuICAgICAgICAgICAgKGg1ID4+PiAyNCkgJiAweGZmLCAoaDUgPj4+IDE2KSAmIDB4ZmYsIChoNSA+Pj4gOCkgJiAweGZmLCAoaDUgPj4+IDApICYgMHhmZixcbiAgICAgICAgICAgIChoNiA+Pj4gMjQpICYgMHhmZiwgKGg2ID4+PiAxNikgJiAweGZmLCAoaDYgPj4+IDgpICYgMHhmZiwgKGg2ID4+PiAwKSAmIDB4ZmYsXG4gICAgICAgICAgICAoaDcgPj4+IDI0KSAmIDB4ZmYsIChoNyA+Pj4gMTYpICYgMHhmZiwgKGg3ID4+PiA4KSAmIDB4ZmYsIChoNyA+Pj4gMCkgJiAweGZmXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gUEJLREYyX0hNQUNfU0hBMjU2X09uZUl0ZXIocGFzc3dvcmQsIHNhbHQsIGRrTGVuKSB7XG4gICAgICAgIC8vIGNvbXByZXNzIHBhc3N3b3JkIGlmIGl0J3MgbG9uZ2VyIHRoYW4gaGFzaCBibG9jayBsZW5ndGhcbiAgICAgICAgcGFzc3dvcmQgPSAocGFzc3dvcmQubGVuZ3RoIDw9IDY0KSA/IHBhc3N3b3JkIDogU0hBMjU2KHBhc3N3b3JkKTtcblxuICAgICAgICBjb25zdCBpbm5lckxlbiA9IDY0ICsgc2FsdC5sZW5ndGggKyA0O1xuICAgICAgICBjb25zdCBpbm5lciA9IG5ldyBBcnJheShpbm5lckxlbik7XG4gICAgICAgIGNvbnN0IG91dGVyS2V5ID0gbmV3IEFycmF5KDY0KTtcblxuICAgICAgICBsZXQgaTtcbiAgICAgICAgbGV0IGRrID0gW107XG5cbiAgICAgICAgLy8gaW5uZXIgPSAocGFzc3dvcmQgXiBpcGFkKSB8fCBzYWx0IHx8IGNvdW50ZXJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDY0OyBpKyspIHsgaW5uZXJbaV0gPSAweDM2OyB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXNzd29yZC5sZW5ndGg7IGkrKykgeyBpbm5lcltpXSBePSBwYXNzd29yZFtpXTsgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2FsdC5sZW5ndGg7IGkrKykgeyBpbm5lcls2NCArIGldID0gc2FsdFtpXTsgfVxuICAgICAgICBmb3IgKGkgPSBpbm5lckxlbiAtIDQ7IGkgPCBpbm5lckxlbjsgaSsrKSB7IGlubmVyW2ldID0gMDsgfVxuXG4gICAgICAgIC8vIG91dGVyS2V5ID0gcGFzc3dvcmQgXiBvcGFkXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA2NDsgaSsrKSBvdXRlcktleVtpXSA9IDB4NWM7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXNzd29yZC5sZW5ndGg7IGkrKykgb3V0ZXJLZXlbaV0gXj0gcGFzc3dvcmRbaV07XG5cbiAgICAgICAgLy8gaW5jcmVtZW50cyBjb3VudGVyIGluc2lkZSBpbm5lclxuICAgICAgICBmdW5jdGlvbiBpbmNyZW1lbnRDb3VudGVyKCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGlubmVyTGVuIC0gMTsgaSA+PSBpbm5lckxlbiAtIDQ7IGktLSkge1xuICAgICAgICAgICAgICAgIGlubmVyW2ldKys7XG4gICAgICAgICAgICAgICAgaWYgKGlubmVyW2ldIDw9IDB4ZmYpIHJldHVybjtcbiAgICAgICAgICAgICAgICBpbm5lcltpXSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBvdXRwdXQgYmxvY2tzID0gU0hBMjU2KG91dGVyS2V5IHx8IFNIQTI1Nihpbm5lcikpIC4uLlxuICAgICAgICB3aGlsZSAoZGtMZW4gPj0gMzIpIHtcbiAgICAgICAgICAgIGluY3JlbWVudENvdW50ZXIoKTtcbiAgICAgICAgICAgIGRrID0gZGsuY29uY2F0KFNIQTI1NihvdXRlcktleS5jb25jYXQoU0hBMjU2KGlubmVyKSkpKTtcbiAgICAgICAgICAgIGRrTGVuIC09IDMyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChka0xlbiA+IDApIHtcbiAgICAgICAgICAgIGluY3JlbWVudENvdW50ZXIoKTtcbiAgICAgICAgICAgIGRrID0gZGsuY29uY2F0KFNIQTI1NihvdXRlcktleS5jb25jYXQoU0hBMjU2KGlubmVyKSkpLnNsaWNlKDAsIGRrTGVuKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGs7XG4gICAgfVxuXG4gICAgLy8gVGhlIGZvbGxvd2luZyBpcyBhbiBhZGFwdGF0aW9uIG9mIHNjcnlwdHN5XG4gICAgLy8gU2VlOiBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9zY3J5cHRzeVxuICAgIGZ1bmN0aW9uIGJsb2NrbWl4X3NhbHNhOChCWSwgWWksIHIsIHgsIF9YKSB7XG4gICAgICAgIGxldCBpO1xuXG4gICAgICAgIGFycmF5Y29weShCWSwgKDIgKiByIC0gMSkgKiAxNiwgX1gsIDAsIDE2KTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDIgKiByOyBpKyspIHtcbiAgICAgICAgICAgIGJsb2NreG9yKEJZLCBpICogMTYsIF9YLCAxNik7XG4gICAgICAgICAgICBzYWxzYTIwXzgoX1gsIHgpO1xuICAgICAgICAgICAgYXJyYXljb3B5KF9YLCAwLCBCWSwgWWkgKyAoaSAqIDE2KSwgMTYpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHI7IGkrKykge1xuICAgICAgICAgICAgYXJyYXljb3B5KEJZLCBZaSArIChpICogMikgKiAxNiwgQlksIChpICogMTYpLCAxNik7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcjsgaSsrKSB7XG4gICAgICAgICAgICBhcnJheWNvcHkoQlksIFlpICsgKGkgKiAyICsgMSkgKiAxNiwgQlksIChpICsgcikgKiAxNiwgMTYpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gUihhLCBiKSB7XG4gICAgICAgIHJldHVybiAoYSA8PCBiKSB8IChhID4+PiAoMzIgLSBiKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2Fsc2EyMF84KEIsIHgpIHtcbiAgICAgICAgYXJyYXljb3B5KEIsIDAsIHgsIDAsIDE2KTtcblxuICAgICAgICBmb3IgKGxldCBpID0gODsgaSA+IDA7IGkgLT0gMikge1xuICAgICAgICAgICAgeFsgNF0gXj0gUih4WyAwXSArIHhbMTJdLCA3KTtcbiAgICAgICAgICAgIHhbIDhdIF49IFIoeFsgNF0gKyB4WyAwXSwgOSk7XG4gICAgICAgICAgICB4WzEyXSBePSBSKHhbIDhdICsgeFsgNF0sIDEzKTtcbiAgICAgICAgICAgIHhbIDBdIF49IFIoeFsxMl0gKyB4WyA4XSwgMTgpO1xuICAgICAgICAgICAgeFsgOV0gXj0gUih4WyA1XSArIHhbIDFdLCA3KTtcbiAgICAgICAgICAgIHhbMTNdIF49IFIoeFsgOV0gKyB4WyA1XSwgOSk7XG4gICAgICAgICAgICB4WyAxXSBePSBSKHhbMTNdICsgeFsgOV0sIDEzKTtcbiAgICAgICAgICAgIHhbIDVdIF49IFIoeFsgMV0gKyB4WzEzXSwgMTgpO1xuICAgICAgICAgICAgeFsxNF0gXj0gUih4WzEwXSArIHhbIDZdLCA3KTtcbiAgICAgICAgICAgIHhbIDJdIF49IFIoeFsxNF0gKyB4WzEwXSwgOSk7XG4gICAgICAgICAgICB4WyA2XSBePSBSKHhbIDJdICsgeFsxNF0sIDEzKTtcbiAgICAgICAgICAgIHhbMTBdIF49IFIoeFsgNl0gKyB4WyAyXSwgMTgpO1xuICAgICAgICAgICAgeFsgM10gXj0gUih4WzE1XSArIHhbMTFdLCA3KTtcbiAgICAgICAgICAgIHhbIDddIF49IFIoeFsgM10gKyB4WzE1XSwgOSk7XG4gICAgICAgICAgICB4WzExXSBePSBSKHhbIDddICsgeFsgM10sIDEzKTtcbiAgICAgICAgICAgIHhbMTVdIF49IFIoeFsxMV0gKyB4WyA3XSwgMTgpO1xuICAgICAgICAgICAgeFsgMV0gXj0gUih4WyAwXSArIHhbIDNdLCA3KTtcbiAgICAgICAgICAgIHhbIDJdIF49IFIoeFsgMV0gKyB4WyAwXSwgOSk7XG4gICAgICAgICAgICB4WyAzXSBePSBSKHhbIDJdICsgeFsgMV0sIDEzKTtcbiAgICAgICAgICAgIHhbIDBdIF49IFIoeFsgM10gKyB4WyAyXSwgMTgpO1xuICAgICAgICAgICAgeFsgNl0gXj0gUih4WyA1XSArIHhbIDRdLCA3KTtcbiAgICAgICAgICAgIHhbIDddIF49IFIoeFsgNl0gKyB4WyA1XSwgOSk7XG4gICAgICAgICAgICB4WyA0XSBePSBSKHhbIDddICsgeFsgNl0sIDEzKTtcbiAgICAgICAgICAgIHhbIDVdIF49IFIoeFsgNF0gKyB4WyA3XSwgMTgpO1xuICAgICAgICAgICAgeFsxMV0gXj0gUih4WzEwXSArIHhbIDldLCA3KTtcbiAgICAgICAgICAgIHhbIDhdIF49IFIoeFsxMV0gKyB4WzEwXSwgOSk7XG4gICAgICAgICAgICB4WyA5XSBePSBSKHhbIDhdICsgeFsxMV0sIDEzKTtcbiAgICAgICAgICAgIHhbMTBdIF49IFIoeFsgOV0gKyB4WyA4XSwgMTgpO1xuICAgICAgICAgICAgeFsxMl0gXj0gUih4WzE1XSArIHhbMTRdLCA3KTtcbiAgICAgICAgICAgIHhbMTNdIF49IFIoeFsxMl0gKyB4WzE1XSwgOSk7XG4gICAgICAgICAgICB4WzE0XSBePSBSKHhbMTNdICsgeFsxMl0sIDEzKTtcbiAgICAgICAgICAgIHhbMTVdIF49IFIoeFsxNF0gKyB4WzEzXSwgMTgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICAgICAgICBCW2ldICs9IHhbaV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBuYWl2ZSBhcHByb2FjaC4uLiBnb2luZyBiYWNrIHRvIGxvb3AgdW5yb2xsaW5nIG1heSB5aWVsZCBhZGRpdGlvbmFsIHBlcmZvcm1hbmNlXG4gICAgZnVuY3Rpb24gYmxvY2t4b3IoUywgU2ksIEQsIGxlbikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBEW2ldIF49IFNbU2kgKyBpXVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXJyYXljb3B5KHNyYywgc3JjUG9zLCBkZXN0LCBkZXN0UG9zLCBsZW5ndGgpIHtcbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgICBkZXN0W2Rlc3RQb3MrK10gPSBzcmNbc3JjUG9zKytdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tCdWZmZXJpc2gobykge1xuICAgICAgICBpZiAoIW8gfHwgdHlwZW9mKG8ubGVuZ3RoKSAhPT0gJ251bWJlcicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB2ID0gb1tpXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YodikgIT09ICdudW1iZXInIHx8IHYgJSAxIHx8IHYgPCAwIHx8IHYgPj0gMjU2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5zdXJlSW50ZWdlcih2YWx1ZSwgbmFtZSkge1xuICAgICAgICBpZiAodHlwZW9mKHZhbHVlKSAhPT0gXCJudW1iZXJcIiB8fCAodmFsdWUgJSAxKSkgeyB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgJyArIG5hbWUpOyB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBOID0gQ3B1IGNvc3QsIHIgPSBNZW1vcnkgY29zdCwgcCA9IHBhcmFsbGVsaXphdGlvbiBjb3N0XG4gICAgLy8gY2FsbGJhY2soZXJyb3IsIHByb2dyZXNzLCBrZXkpXG4gICAgZnVuY3Rpb24gX3NjcnlwdChwYXNzd29yZCwgc2FsdCwgTiwgciwgcCwgZGtMZW4sIGNhbGxiYWNrKSB7XG5cbiAgICAgICAgTiA9IGVuc3VyZUludGVnZXIoTiwgJ04nKTtcbiAgICAgICAgciA9IGVuc3VyZUludGVnZXIociwgJ3InKTtcbiAgICAgICAgcCA9IGVuc3VyZUludGVnZXIocCwgJ3AnKTtcblxuICAgICAgICBka0xlbiA9IGVuc3VyZUludGVnZXIoZGtMZW4sICdka0xlbicpO1xuXG4gICAgICAgIGlmIChOID09PSAwIHx8IChOICYgKE4gLSAxKSkgIT09IDApIHsgdGhyb3cgbmV3IEVycm9yKCdOIG11c3QgYmUgcG93ZXIgb2YgMicpOyB9XG5cbiAgICAgICAgaWYgKE4gPiBNQVhfVkFMVUUgLyAxMjggLyByKSB7IHRocm93IG5ldyBFcnJvcignTiB0b28gbGFyZ2UnKTsgfVxuICAgICAgICBpZiAociA+IE1BWF9WQUxVRSAvIDEyOCAvIHApIHsgdGhyb3cgbmV3IEVycm9yKCdyIHRvbyBsYXJnZScpOyB9XG5cbiAgICAgICAgaWYgKCFjaGVja0J1ZmZlcmlzaChwYXNzd29yZCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncGFzc3dvcmQgbXVzdCBiZSBhbiBhcnJheSBvciBidWZmZXInKTtcbiAgICAgICAgfVxuICAgICAgICBwYXNzd29yZCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHBhc3N3b3JkKTtcblxuICAgICAgICBpZiAoIWNoZWNrQnVmZmVyaXNoKHNhbHQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NhbHQgbXVzdCBiZSBhbiBhcnJheSBvciBidWZmZXInKTtcbiAgICAgICAgfVxuICAgICAgICBzYWx0ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoc2FsdCk7XG5cbiAgICAgICAgbGV0IGIgPSBQQktERjJfSE1BQ19TSEEyNTZfT25lSXRlcihwYXNzd29yZCwgc2FsdCwgcCAqIDEyOCAqIHIpO1xuICAgICAgICBjb25zdCBCID0gbmV3IFVpbnQzMkFycmF5KHAgKiAzMiAqIHIpXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaiA9IGkgKiA0O1xuICAgICAgICAgICAgQltpXSA9ICgoYltqICsgM10gJiAweGZmKSA8PCAyNCkgfFxuICAgICAgICAgICAgICAgICAgICgoYltqICsgMl0gJiAweGZmKSA8PCAxNikgfFxuICAgICAgICAgICAgICAgICAgICgoYltqICsgMV0gJiAweGZmKSA8PCA4KSB8XG4gICAgICAgICAgICAgICAgICAgKChiW2ogKyAwXSAmIDB4ZmYpIDw8IDApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgWFkgPSBuZXcgVWludDMyQXJyYXkoNjQgKiByKTtcbiAgICAgICAgY29uc3QgViA9IG5ldyBVaW50MzJBcnJheSgzMiAqIHIgKiBOKTtcblxuICAgICAgICBjb25zdCBZaSA9IDMyICogcjtcblxuICAgICAgICAvLyBzY3JhdGNoIHNwYWNlXG4gICAgICAgIGNvbnN0IHggPSBuZXcgVWludDMyQXJyYXkoMTYpOyAgICAgICAvLyBzYWxzYTIwXzhcbiAgICAgICAgY29uc3QgX1ggPSBuZXcgVWludDMyQXJyYXkoMTYpOyAgICAgIC8vIGJsb2NrbWl4X3NhbHNhOFxuXG4gICAgICAgIGNvbnN0IHRvdGFsT3BzID0gcCAqIE4gKiAyO1xuICAgICAgICBsZXQgY3VycmVudE9wID0gMDtcbiAgICAgICAgbGV0IGxhc3RQZXJjZW50MTAgPSBudWxsO1xuXG4gICAgICAgIC8vIFNldCB0aGlzIHRvIHRydWUgdG8gYWJhbmRvbiB0aGUgc2NyeXB0IG9uIHRoZSBuZXh0IHN0ZXBcbiAgICAgICAgbGV0IHN0b3AgPSBmYWxzZTtcblxuICAgICAgICAvLyBTdGF0ZSBpbmZvcm1hdGlvblxuICAgICAgICBsZXQgc3RhdGUgPSAwO1xuICAgICAgICBsZXQgaTAgPSAwLCBpMTtcbiAgICAgICAgbGV0IEJpO1xuXG4gICAgICAgIC8vIEhvdyBtYW55IGJsb2NrbWl4X3NhbHNhOCBjYW4gd2UgZG8gcGVyIHN0ZXA/XG4gICAgICAgIGNvbnN0IGxpbWl0ID0gY2FsbGJhY2sgPyBwYXJzZUludCgxMDAwIC8gcik6IDB4ZmZmZmZmZmY7XG5cbiAgICAgICAgLy8gVHJpY2sgZnJvbSBzY3J5cHQtYXN5bmM7IGlmIHRoZXJlIGlzIGEgc2V0SW1tZWRpYXRlIHNoaW0gaW4gcGxhY2UsIHVzZSBpdFxuICAgICAgICBjb25zdCBuZXh0VGljayA9ICh0eXBlb2Yoc2V0SW1tZWRpYXRlKSAhPT0gJ3VuZGVmaW5lZCcpID8gc2V0SW1tZWRpYXRlIDogc2V0VGltZW91dDtcblxuICAgICAgICAvLyBUaGlzIGlzIHJlYWxseSBhbGwgSSBjaGFuZ2VkOyBtYWtpbmcgc2NyeXB0c3kgYSBzdGF0ZSBtYWNoaW5lIHNvIHdlIG9jY2FzaW9uYWxseVxuICAgICAgICAvLyBzdG9wIGFuZCBnaXZlIG90aGVyIGV2bnRzIG9uIHRoZSBldm50IGxvb3AgYSBjaGFuY2UgdG8gcnVuLiB+UmljTW9vXG4gICAgICAgIGNvbnN0IGluY3JlbWVudGFsU01peCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHN0b3ApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKCdjYW5jZWxsZWQnKSwgY3VycmVudE9wIC8gdG90YWxPcHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgc3RlcHM7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIC8vIGZvciAodmFyIGkgPSAwOyBpIDwgcDsgaSsrKS4uLlxuICAgICAgICAgICAgICAgICAgICBCaSA9IGkwICogMzIgKiByO1xuXG4gICAgICAgICAgICAgICAgICAgIGFycmF5Y29weShCLCBCaSwgWFksIDAsIFlpKTsgICAgICAgICAgICAgICAgICAgICAgIC8vIFJPTWl4IC0gMVxuXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgdG8gUk9NaXggMlxuICAgICAgICAgICAgICAgICAgICBpMSA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRmFsbCB0aHJvdWdoXG5cbiAgICAgICAgICAgICAgICBjYXNlIDE6XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUnVuIHVwIHRvIDEwMDAgc3RlcHMgb2YgdGhlIGZpcnN0IGlubmVyIHNtaXggbG9vcFxuICAgICAgICAgICAgICAgICAgICBzdGVwcyA9IE4gLSBpMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0ZXBzID4gbGltaXQpIHsgc3RlcHMgPSBsaW1pdDsgfVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ZXBzOyBpKyspIHsgICAgICAgICAgICAgICAgICAvLyBST01peCAtIDJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5Y29weShYWSwgMCwgViwgKGkxICsgaSkgKiBZaSwgWWkpICAgICAgICAgLy8gUk9NaXggLSAzXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9ja21peF9zYWxzYTgoWFksIFlpLCByLCB4LCBfWCk7ICAgICAgICAgICAgIC8vIFJPTWl4IC0gNFxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspXG4gICAgICAgICAgICAgICAgICAgIGkxICs9IHN0ZXBzO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3AgKz0gc3RlcHM7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBjYWxsYmFjayB3aXRoIHRoZSBwcm9ncmVzcyAob3B0aW9uYWxseSBzdG9wcGluZyB1cylcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBlcmNlbnQxMCA9IHBhcnNlSW50KDEwMDAgKiBjdXJyZW50T3AgLyB0b3RhbE9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVyY2VudDEwICE9PSBsYXN0UGVyY2VudDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcCA9IGNhbGxiYWNrKG51bGwsIGN1cnJlbnRPcCAvIHRvdGFsT3BzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RvcCkgeyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RQZXJjZW50MTAgPSBwZXJjZW50MTA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoaTEgPCBOKSB7IGJyZWFrOyB9XG5cbiAgICAgICAgICAgICAgICAgICAgaTEgPSAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgdG8gUk9NaXggNlxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDI7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRmFsbCB0aHJvdWdoXG5cbiAgICAgICAgICAgICAgICBjYXNlIDI6XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUnVuIHVwIHRvIDEwMDAgc3RlcHMgb2YgdGhlIHNlY29uZCBpbm5lciBzbWl4IGxvb3BcbiAgICAgICAgICAgICAgICAgICAgc3RlcHMgPSBOIC0gaTE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGVwcyA+IGxpbWl0KSB7IHN0ZXBzID0gbGltaXQ7IH1cbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGVwczsgaSsrKSB7ICAgICAgICAgICAgICAgIC8vIFJPTWl4IC0gNlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gKDIgKiByIC0gMSkgKiAxNjsgICAgICAgICAgICAgLy8gUk9NaXggLSA3XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBqID0gWFlbb2Zmc2V0XSAmIChOIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBibG9ja3hvcihWLCBqICogWWksIFhZLCBZaSk7ICAgICAgICAgICAgICAgICAvLyBST01peCAtIDggKGlubmVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2ttaXhfc2Fsc2E4KFhZLCBZaSwgciwgeCwgX1gpOyAgICAgICAgICAgLy8gUk9NaXggLSA5IChvdXRlcilcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKS4uLlxuICAgICAgICAgICAgICAgICAgICBpMSArPSBzdGVwcztcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wICs9IHN0ZXBzO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGwgdGhlIGNhbGxiYWNrIHdpdGggdGhlIHByb2dyZXNzIChvcHRpb25hbGx5IHN0b3BwaW5nIHVzKVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBlcmNlbnQxMCA9IHBhcnNlSW50KDEwMDAgKiBjdXJyZW50T3AgLyB0b3RhbE9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVyY2VudDEwICE9PSBsYXN0UGVyY2VudDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcCA9IGNhbGxiYWNrKG51bGwsIGN1cnJlbnRPcCAvIHRvdGFsT3BzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RvcCkgeyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RQZXJjZW50MTAgPSBwZXJjZW50MTA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoaTEgPCBOKSB7IGJyZWFrOyB9XG5cbiAgICAgICAgICAgICAgICAgICAgYXJyYXljb3B5KFhZLCAwLCBCLCBCaSwgWWkpOyAgICAgICAgICAgICAgICAgICAgIC8vIFJPTWl4IC0gMTBcblxuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgKHZhciBpID0gMDsgaSA8IHA7IGkrKykuLi5cbiAgICAgICAgICAgICAgICAgICAgaTArKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkwIDwgcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBiID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYi5wdXNoKChCW2ldID4+ICAwKSAmIDB4ZmYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYi5wdXNoKChCW2ldID4+ICA4KSAmIDB4ZmYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYi5wdXNoKChCW2ldID4+IDE2KSAmIDB4ZmYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYi5wdXNoKChCW2ldID4+IDI0KSAmIDB4ZmYpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVyaXZlZEtleSA9IFBCS0RGMl9ITUFDX1NIQTI1Nl9PbmVJdGVyKHBhc3N3b3JkLCBiLCBka0xlbik7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2VuZCB0aGUgcmVzdWx0IHRvIHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsgY2FsbGJhY2sobnVsbCwgMS4wLCBkZXJpdmVkS2V5KTsgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIERvbmU7IGRvbid0IGJyZWFrICh3aGljaCB3b3VsZCByZXNjaGVkdWxlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVyaXZlZEtleTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2NoZWR1bGUgdGhlIG5leHQgc3RlcHNcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykgeyBuZXh0VGljayhpbmNyZW1lbnRhbFNNaXgpOyB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSdW4gdGhlIHNtaXggc3RhdGUgbWFjaGluZSB1bnRpbCBjb21wbGV0aW9uXG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVyaXZlZEtleSA9IGluY3JlbWVudGFsU01peCgpO1xuICAgICAgICAgICAgICAgIGlmIChkZXJpdmVkS2V5ICE9IHVuZGVmaW5lZCkgeyByZXR1cm4gZGVyaXZlZEtleTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQm9vdHN0cmFwIHRoZSBhc3luYyBpbmNyZW1lbnRhbCBzbWl4XG4gICAgICAgIGluY3JlbWVudGFsU01peCgpO1xuICAgIH1cblxuICAgIGNvbnN0IGxpYiA9IHtcbiAgICAgICAgc2NyeXB0OiBmdW5jdGlvbihwYXNzd29yZCwgc2FsdCwgTiwgciwgcCwgZGtMZW4sIHByb2dyZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICBsZXQgbGFzdFByb2dyZXNzID0gMDtcbiAgICAgICAgICAgICAgICBpZiAocHJvZ3Jlc3NDYWxsYmFjaykgeyBwcm9ncmVzc0NhbGxiYWNrKDApOyB9XG4gICAgICAgICAgICAgICAgX3NjcnlwdChwYXNzd29yZCwgc2FsdCwgTiwgciwgcCwgZGtMZW4sIGZ1bmN0aW9uKGVycm9yLCBwcm9ncmVzcywga2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9ncmVzc0NhbGxiYWNrICYmIGxhc3RQcm9ncmVzcyAhPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyZXNzQ2FsbGJhY2soMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KGtleSkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByb2dyZXNzQ2FsbGJhY2sgJiYgcHJvZ3Jlc3MgIT09IGxhc3RQcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFByb2dyZXNzID0gcHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvZ3Jlc3NDYWxsYmFjayhwcm9ncmVzcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBzeW5jU2NyeXB0OiBmdW5jdGlvbihwYXNzd29yZCwgc2FsdCwgTiwgciwgcCwgZGtMZW4pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShfc2NyeXB0KHBhc3N3b3JkLCBzYWx0LCBOLCByLCBwLCBka0xlbikpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIG5vZGUuanNcbiAgICBpZiAodHlwZW9mKGV4cG9ydHMpICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgIG1vZHVsZS5leHBvcnRzID0gbGliO1xuXG4gICAgLy8gUmVxdWlyZUpTL0FNRFxuICAgIC8vIGh0dHA6Ly93d3cucmVxdWlyZWpzLm9yZy9kb2NzL2FwaS5odG1sXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FtZGpzL2FtZGpzLWFwaS93aWtpL0FNRFxuICAgIH0gZWxzZSBpZiAodHlwZW9mKGRlZmluZSkgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUobGliKTtcblxuICAgIC8vIFdlYiBCcm93c2Vyc1xuICAgIH0gZWxzZSBpZiAocm9vdCkge1xuXG4gICAgICAgIC8vIElmIHRoZXJlIHdhcyBhbiBleGlzdGluZyBsaWJyYXJ5IFwic2NyeXB0XCIsIG1ha2Ugc3VyZSBpdCBpcyBzdGlsbCBhdmFpbGFibGVcbiAgICAgICAgaWYgKHJvb3Quc2NyeXB0KSB7XG4gICAgICAgICAgICByb290Ll9zY3J5cHQgPSByb290LnNjcnlwdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJvb3Quc2NyeXB0ID0gbGliO1xuICAgIH1cblxufSkodGhpcyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IGFlcyBmcm9tIFwiYWVzLWpzXCI7XG5pbXBvcnQgc2NyeXB0IGZyb20gXCJzY3J5cHQtanNcIjtcblxuaW1wb3J0IHsgRXh0ZXJuYWxseU93bmVkQWNjb3VudCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1zaWduZXJcIjtcbmltcG9ydCB7IGdldEFkZHJlc3MgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYWRkcmVzc1wiO1xuaW1wb3J0IHsgYXJyYXlpZnksIEJ5dGVzLCBCeXRlc0xpa2UsIGNvbmNhdCwgaGV4bGlmeSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgZGVmYXVsdFBhdGgsIGVudHJvcHlUb01uZW1vbmljLCBIRE5vZGUsIE1uZW1vbmljLCBtbmVtb25pY1RvRW50cm9weSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9oZG5vZGVcIjtcbmltcG9ydCB7IGtlY2NhazI1NiB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9rZWNjYWsyNTZcIjtcbmltcG9ydCB7IHBia2RmMiBhcyBfcGJrZGYyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Bia2RmMlwiO1xuaW1wb3J0IHsgcmFuZG9tQnl0ZXMgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcmFuZG9tXCI7XG5pbXBvcnQgeyBEZXNjcmlwdGlvbiB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBjb21wdXRlQWRkcmVzcyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC90cmFuc2FjdGlvbnNcIjtcblxuaW1wb3J0IHsgZ2V0UGFzc3dvcmQsIGxvb3NlQXJyYXlpZnksIHNlYXJjaFBhdGgsIHV1aWRWNCwgenBhZCB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcblxuLy8gRXhwb3J0ZWQgVHlwZXNcblxuZnVuY3Rpb24gaGFzTW5lbW9uaWModmFsdWU6IGFueSk6IHZhbHVlIGlzIHsgbW5lbW9uaWM6IE1uZW1vbmljIH0ge1xuICAgIHJldHVybiAodmFsdWUgIT0gbnVsbCAmJiB2YWx1ZS5tbmVtb25pYyAmJiB2YWx1ZS5tbmVtb25pYy5waHJhc2UpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIF9LZXlzdG9yZUFjY291bnQge1xuICAgIGFkZHJlc3M6IHN0cmluZztcbiAgICBwcml2YXRlS2V5OiBzdHJpbmc7XG4gICAgbW5lbW9uaWM/OiBNbmVtb25pYztcblxuICAgIF9pc0tleXN0b3JlQWNjb3VudDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIEtleXN0b3JlQWNjb3VudCBleHRlbmRzIERlc2NyaXB0aW9uPF9LZXlzdG9yZUFjY291bnQ+IGltcGxlbWVudHMgRXh0ZXJuYWxseU93bmVkQWNjb3VudCB7XG4gICAgcmVhZG9ubHkgYWRkcmVzczogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHByaXZhdGVLZXk6IHN0cmluZztcbiAgICByZWFkb25seSBtbmVtb25pYz86IE1uZW1vbmljO1xuXG4gICAgcmVhZG9ubHkgX2lzS2V5c3RvcmVBY2NvdW50OiBib29sZWFuO1xuXG4gICAgaXNLZXlzdG9yZUFjY291bnQodmFsdWU6IGFueSk6IHZhbHVlIGlzIEtleXN0b3JlQWNjb3VudCB7XG4gICAgICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5faXNLZXlzdG9yZUFjY291bnQpO1xuICAgIH1cbn1cblxuZXhwb3J0IHR5cGUgUHJvZ3Jlc3NDYWxsYmFjayA9IChwZXJjZW50OiBudW1iZXIpID0+IHZvaWQ7XG5cbmV4cG9ydCB0eXBlIEVuY3J5cHRPcHRpb25zID0ge1xuICAgaXY/OiBCeXRlc0xpa2U7XG4gICBlbnRyb3B5PzogQnl0ZXNMaWtlO1xuICAgY2xpZW50Pzogc3RyaW5nO1xuICAgc2FsdD86IEJ5dGVzTGlrZTtcbiAgIHV1aWQ/OiBzdHJpbmc7XG4gICBzY3J5cHQ/OiB7XG4gICAgICAgTj86IG51bWJlcjtcbiAgICAgICByPzogbnVtYmVyO1xuICAgICAgIHA/OiBudW1iZXI7XG4gICB9XG59XG5cbmZ1bmN0aW9uIF9kZWNyeXB0KGRhdGE6IGFueSwga2V5OiBVaW50OEFycmF5LCBjaXBoZXJ0ZXh0OiBVaW50OEFycmF5KTogVWludDhBcnJheSB7XG4gICAgY29uc3QgY2lwaGVyID0gc2VhcmNoUGF0aChkYXRhLCBcImNyeXB0by9jaXBoZXJcIik7XG4gICAgaWYgKGNpcGhlciA9PT0gXCJhZXMtMTI4LWN0clwiKSB7XG4gICAgICAgIGNvbnN0IGl2ID0gbG9vc2VBcnJheWlmeShzZWFyY2hQYXRoKGRhdGEsIFwiY3J5cHRvL2NpcGhlcnBhcmFtcy9pdlwiKSlcbiAgICAgICAgY29uc3QgY291bnRlciA9IG5ldyBhZXMuQ291bnRlcihpdik7XG5cbiAgICAgICAgY29uc3QgYWVzQ3RyID0gbmV3IGFlcy5Nb2RlT2ZPcGVyYXRpb24uY3RyKGtleSwgY291bnRlcik7XG5cbiAgICAgICAgcmV0dXJuIGFycmF5aWZ5KGFlc0N0ci5kZWNyeXB0KGNpcGhlcnRleHQpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gX2dldEFjY291bnQoZGF0YTogYW55LCBrZXk6IFVpbnQ4QXJyYXkpOiBLZXlzdG9yZUFjY291bnQge1xuICAgIGNvbnN0IGNpcGhlcnRleHQgPSBsb29zZUFycmF5aWZ5KHNlYXJjaFBhdGgoZGF0YSwgXCJjcnlwdG8vY2lwaGVydGV4dFwiKSk7XG5cbiAgICBjb25zdCBjb21wdXRlZE1BQyA9IGhleGxpZnkoa2VjY2FrMjU2KGNvbmNhdChbIGtleS5zbGljZSgxNiwgMzIpLCBjaXBoZXJ0ZXh0IF0pKSkuc3Vic3RyaW5nKDIpO1xuICAgIGlmIChjb21wdXRlZE1BQyAhPT0gc2VhcmNoUGF0aChkYXRhLCBcImNyeXB0by9tYWNcIikudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHBhc3N3b3JkXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHByaXZhdGVLZXkgPSBfZGVjcnlwdChkYXRhLCBrZXkuc2xpY2UoMCwgMTYpLCBjaXBoZXJ0ZXh0KTtcblxuICAgIGlmICghcHJpdmF0ZUtleSkge1xuICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcInVuc3VwcG9ydGVkIGNpcGhlclwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBcImRlY3J5cHRcIlxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBtbmVtb25pY0tleSA9IGtleS5zbGljZSgzMiwgNjQpO1xuXG4gICAgY29uc3QgYWRkcmVzcyA9IGNvbXB1dGVBZGRyZXNzKHByaXZhdGVLZXkpO1xuICAgIGlmIChkYXRhLmFkZHJlc3MpIHtcbiAgICAgICAgbGV0IGNoZWNrID0gZGF0YS5hZGRyZXNzLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChjaGVjay5zdWJzdHJpbmcoMCwgMikgIT09IFwiMHhcIikgeyBjaGVjayA9IFwiMHhcIiArIGNoZWNrOyB9XG5cbiAgICAgICAgaWYgKGdldEFkZHJlc3MoY2hlY2spICE9PSBhZGRyZXNzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhZGRyZXNzIG1pc21hdGNoXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgYWNjb3VudDogX0tleXN0b3JlQWNjb3VudCA9IHtcbiAgICAgICAgX2lzS2V5c3RvcmVBY2NvdW50OiB0cnVlLFxuICAgICAgICBhZGRyZXNzOiBhZGRyZXNzLFxuICAgICAgICBwcml2YXRlS2V5OiBoZXhsaWZ5KHByaXZhdGVLZXkpXG4gICAgfTtcblxuICAgIC8vIFZlcnNpb24gMC4xIHgtZXRoZXJzIG1ldGFkYXRhIG11c3QgY29udGFpbiBhbiBlbmNyeXB0ZWQgbW5lbW9uaWMgcGhyYXNlXG4gICAgaWYgKHNlYXJjaFBhdGgoZGF0YSwgXCJ4LWV0aGVycy92ZXJzaW9uXCIpID09PSBcIjAuMVwiKSB7XG4gICAgICAgIGNvbnN0IG1uZW1vbmljQ2lwaGVydGV4dCA9IGxvb3NlQXJyYXlpZnkoc2VhcmNoUGF0aChkYXRhLCBcIngtZXRoZXJzL21uZW1vbmljQ2lwaGVydGV4dFwiKSk7XG4gICAgICAgIGNvbnN0IG1uZW1vbmljSXYgPSBsb29zZUFycmF5aWZ5KHNlYXJjaFBhdGgoZGF0YSwgXCJ4LWV0aGVycy9tbmVtb25pY0NvdW50ZXJcIikpO1xuXG4gICAgICAgIGNvbnN0IG1uZW1vbmljQ291bnRlciA9IG5ldyBhZXMuQ291bnRlcihtbmVtb25pY0l2KTtcbiAgICAgICAgY29uc3QgbW5lbW9uaWNBZXNDdHIgPSBuZXcgYWVzLk1vZGVPZk9wZXJhdGlvbi5jdHIobW5lbW9uaWNLZXksIG1uZW1vbmljQ291bnRlcik7XG5cbiAgICAgICAgY29uc3QgcGF0aCA9IHNlYXJjaFBhdGgoZGF0YSwgXCJ4LWV0aGVycy9wYXRoXCIpIHx8IGRlZmF1bHRQYXRoO1xuICAgICAgICBjb25zdCBsb2NhbGUgPSBzZWFyY2hQYXRoKGRhdGEsIFwieC1ldGhlcnMvbG9jYWxlXCIpIHx8IFwiZW5cIjtcblxuICAgICAgICBjb25zdCBlbnRyb3B5ID0gYXJyYXlpZnkobW5lbW9uaWNBZXNDdHIuZGVjcnlwdChtbmVtb25pY0NpcGhlcnRleHQpKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgbW5lbW9uaWMgPSBlbnRyb3B5VG9NbmVtb25pYyhlbnRyb3B5LCBsb2NhbGUpO1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IEhETm9kZS5mcm9tTW5lbW9uaWMobW5lbW9uaWMsIG51bGwsIGxvY2FsZSkuZGVyaXZlUGF0aChwYXRoKTtcblxuICAgICAgICAgICAgaWYgKG5vZGUucHJpdmF0ZUtleSAhPSBhY2NvdW50LnByaXZhdGVLZXkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJtbmVtb25pYyBtaXNtYXRjaFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWNjb3VudC5tbmVtb25pYyA9IG5vZGUubW5lbW9uaWM7XG5cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgdGhlIGxvY2FsZSB3b3JkbGlzdCBpbnN0YWxsZWQgdG9cbiAgICAgICAgICAgIC8vIHJlYWQgdGhpcyBtbmVtb25pYywganVzdCBiYWlsIGFuZCBkb24ndCBzZXQgdGhlXG4gICAgICAgICAgICAvLyBtbmVtb25pY1xuICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgIT09IExvZ2dlci5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCB8fCBlcnJvci5hcmd1bWVudCAhPT0gXCJ3b3JkbGlzdFwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEtleXN0b3JlQWNjb3VudChhY2NvdW50KTtcbn1cblxudHlwZSBTY3J5cHRGdW5jPFQ+ID0gKHB3OiBVaW50OEFycmF5LCBzYWx0OiBVaW50OEFycmF5LCBuOiBudW1iZXIsIHI6IG51bWJlciwgcDogbnVtYmVyLCBka0xlbjogbnVtYmVyLCBjYWxsYmFjaz86IFByb2dyZXNzQ2FsbGJhY2spID0+IFQ7XG50eXBlIFBia2RmMkZ1bmM8VD4gPSAocHc6IFVpbnQ4QXJyYXksIHNhbHQ6IFVpbnQ4QXJyYXksIGM6IG51bWJlciwgZGtMZW46IG51bWJlciwgcHJmRnVuYzogc3RyaW5nKSA9PiBUO1xuXG5mdW5jdGlvbiBwYmtkZjJTeW5jKHBhc3N3b3JkQnl0ZXM6IFVpbnQ4QXJyYXksIHNhbHQ6IFVpbnQ4QXJyYXksIGNvdW50OiBudW1iZXIsIGRrTGVuOiBudW1iZXIsIHByZkZ1bmM6IHN0cmluZyk6IFVpbnQ4QXJyYXkge1xuICAgIHJldHVybiBhcnJheWlmeShfcGJrZGYyKHBhc3N3b3JkQnl0ZXMsIHNhbHQsIGNvdW50LCBka0xlbiwgcHJmRnVuYykpO1xufVxuXG5mdW5jdGlvbiBwYmtkZjIocGFzc3dvcmRCeXRlczogVWludDhBcnJheSwgc2FsdDogVWludDhBcnJheSwgY291bnQ6IG51bWJlciwgZGtMZW46IG51bWJlciwgcHJmRnVuYzogc3RyaW5nKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwYmtkZjJTeW5jKHBhc3N3b3JkQnl0ZXMsIHNhbHQsIGNvdW50LCBka0xlbiwgcHJmRnVuYykpO1xufVxuXG5mdW5jdGlvbiBfY29tcHV0ZUtkZktleTxUPihkYXRhOiBhbnksIHBhc3N3b3JkOiBCeXRlcyB8IHN0cmluZywgcGJrZGYyRnVuYzogUGJrZGYyRnVuYzxUPiwgc2NyeXB0RnVuYzogU2NyeXB0RnVuYzxUPiwgcHJvZ3Jlc3NDYWxsYmFjaz86IFByb2dyZXNzQ2FsbGJhY2spOiBUIHtcbiAgICBjb25zdCBwYXNzd29yZEJ5dGVzID0gZ2V0UGFzc3dvcmQocGFzc3dvcmQpO1xuXG4gICAgY29uc3Qga2RmID0gc2VhcmNoUGF0aChkYXRhLCBcImNyeXB0by9rZGZcIik7XG5cbiAgICBpZiAoa2RmICYmIHR5cGVvZihrZGYpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNvbnN0IHRocm93RXJyb3IgPSBmdW5jdGlvbihuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBuZXZlciB7XG4gICAgICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQga2V5LWRlcml2YXRpb24gZnVuY3Rpb24gcGFyYW1ldGVyc1wiLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2RmLnRvTG93ZXJDYXNlKCkgPT09IFwic2NyeXB0XCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHNhbHQgPSBsb29zZUFycmF5aWZ5KHNlYXJjaFBhdGgoZGF0YSwgXCJjcnlwdG8va2RmcGFyYW1zL3NhbHRcIikpO1xuICAgICAgICAgICAgY29uc3QgTiA9IHBhcnNlSW50KHNlYXJjaFBhdGgoZGF0YSwgXCJjcnlwdG8va2RmcGFyYW1zL25cIikpO1xuICAgICAgICAgICAgY29uc3QgciA9IHBhcnNlSW50KHNlYXJjaFBhdGgoZGF0YSwgXCJjcnlwdG8va2RmcGFyYW1zL3JcIikpO1xuICAgICAgICAgICAgY29uc3QgcCA9IHBhcnNlSW50KHNlYXJjaFBhdGgoZGF0YSwgXCJjcnlwdG8va2RmcGFyYW1zL3BcIikpO1xuXG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgYWxsIHJlcXVpcmVkIHBhcmFtZXRlcnNcbiAgICAgICAgICAgIGlmICghTiB8fCAhciB8fCAhcCkgeyB0aHJvd0Vycm9yKFwia2RmXCIsIGtkZik7IH1cblxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIE4gaXMgYSBwb3dlciBvZiAyXG4gICAgICAgICAgICBpZiAoKE4gJiAoTiAtIDEpKSAhPT0gMCkgeyB0aHJvd0Vycm9yKFwiTlwiLCBOKTsgfVxuXG4gICAgICAgICAgICBjb25zdCBka0xlbiA9IHBhcnNlSW50KHNlYXJjaFBhdGgoZGF0YSwgXCJjcnlwdG8va2RmcGFyYW1zL2RrbGVuXCIpKTtcbiAgICAgICAgICAgIGlmIChka0xlbiAhPT0gMzIpIHsgdGhyb3dFcnJvcihcImRrbGVuXCIsIGRrTGVuKTsgfVxuXG4gICAgICAgICAgICByZXR1cm4gc2NyeXB0RnVuYyhwYXNzd29yZEJ5dGVzLCBzYWx0LCBOLCByLCBwLCA2NCwgcHJvZ3Jlc3NDYWxsYmFjayk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChrZGYudG9Mb3dlckNhc2UoKSA9PT0gXCJwYmtkZjJcIikge1xuXG4gICAgICAgICAgICBjb25zdCBzYWx0ID0gbG9vc2VBcnJheWlmeShzZWFyY2hQYXRoKGRhdGEsIFwiY3J5cHRvL2tkZnBhcmFtcy9zYWx0XCIpKTtcblxuICAgICAgICAgICAgbGV0IHByZkZ1bmM6IHN0cmluZyA9IG51bGw7XG4gICAgICAgICAgICBjb25zdCBwcmYgPSBzZWFyY2hQYXRoKGRhdGEsIFwiY3J5cHRvL2tkZnBhcmFtcy9wcmZcIik7XG4gICAgICAgICAgICBpZiAocHJmID09PSBcImhtYWMtc2hhMjU2XCIpIHtcbiAgICAgICAgICAgICAgICBwcmZGdW5jID0gXCJzaGEyNTZcIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJmID09PSBcImhtYWMtc2hhNTEyXCIpIHtcbiAgICAgICAgICAgICAgICBwcmZGdW5jID0gXCJzaGE1MTJcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3dFcnJvcihcInByZlwiLCBwcmYpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IHBhcnNlSW50KHNlYXJjaFBhdGgoZGF0YSwgXCJjcnlwdG8va2RmcGFyYW1zL2NcIikpO1xuXG4gICAgICAgICAgICBjb25zdCBka0xlbiA9IHBhcnNlSW50KHNlYXJjaFBhdGgoZGF0YSwgXCJjcnlwdG8va2RmcGFyYW1zL2RrbGVuXCIpKTtcbiAgICAgICAgICAgIGlmIChka0xlbiAhPT0gMzIpIHsgdGhyb3dFcnJvcihcImRrbGVuXCIsIGRrTGVuKTsgfVxuXG4gICAgICAgICAgICByZXR1cm4gcGJrZGYyRnVuYyhwYXNzd29yZEJ5dGVzLCBzYWx0LCBjb3VudCwgZGtMZW4sIHByZkZ1bmMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bnN1cHBvcnRlZCBrZXktZGVyaXZhdGlvbiBmdW5jdGlvblwiLCBcImtkZlwiLCBrZGYpO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNyeXB0U3luYyhqc29uOiBzdHJpbmcsIHBhc3N3b3JkOiBCeXRlcyB8IHN0cmluZyk6IEtleXN0b3JlQWNjb3VudCB7XG4gICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoanNvbik7XG5cbiAgICBjb25zdCBrZXkgPSBfY29tcHV0ZUtkZktleShkYXRhLCBwYXNzd29yZCwgcGJrZGYyU3luYywgc2NyeXB0LnN5bmNTY3J5cHQpO1xuICAgIHJldHVybiBfZ2V0QWNjb3VudChkYXRhLCBrZXkpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVjcnlwdChqc29uOiBzdHJpbmcsIHBhc3N3b3JkOiBCeXRlcyB8IHN0cmluZywgcHJvZ3Jlc3NDYWxsYmFjaz86IFByb2dyZXNzQ2FsbGJhY2spOiBQcm9taXNlPEtleXN0b3JlQWNjb3VudD4ge1xuICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGpzb24pO1xuXG4gICAgY29uc3Qga2V5ID0gYXdhaXQgX2NvbXB1dGVLZGZLZXkoZGF0YSwgcGFzc3dvcmQsIHBia2RmMiwgc2NyeXB0LnNjcnlwdCwgcHJvZ3Jlc3NDYWxsYmFjayk7XG4gICAgcmV0dXJuIF9nZXRBY2NvdW50KGRhdGEsIGtleSk7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGVuY3J5cHQoYWNjb3VudDogRXh0ZXJuYWxseU93bmVkQWNjb3VudCwgcGFzc3dvcmQ6IEJ5dGVzIHwgc3RyaW5nLCBvcHRpb25zPzogRW5jcnlwdE9wdGlvbnMsIHByb2dyZXNzQ2FsbGJhY2s/OiBQcm9ncmVzc0NhbGxiYWNrKTogUHJvbWlzZTxzdHJpbmc+IHtcblxuICAgIHRyeSB7XG4gICAgICAgIC8vIENoZWNrIHRoZSBhZGRyZXNzIG1hdGNoZXMgdGhlIHByaXZhdGUga2V5XG4gICAgICAgIGlmIChnZXRBZGRyZXNzKGFjY291bnQuYWRkcmVzcykgIT09IGNvbXB1dGVBZGRyZXNzKGFjY291bnQucHJpdmF0ZUtleSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImFkZHJlc3MvcHJpdmF0ZUtleSBtaXNtYXRjaFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIHRoZSBtbmVtb25pYyAoaWYgYW55KSBtYXRjaGVzIHRoZSBwcml2YXRlIGtleVxuICAgICAgICBpZiAoaGFzTW5lbW9uaWMoYWNjb3VudCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1uZW1vbmljID0gYWNjb3VudC5tbmVtb25pYztcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBIRE5vZGUuZnJvbU1uZW1vbmljKG1uZW1vbmljLnBocmFzZSwgbnVsbCwgbW5lbW9uaWMubG9jYWxlKS5kZXJpdmVQYXRoKG1uZW1vbmljLnBhdGggfHwgZGVmYXVsdFBhdGgpO1xuXG4gICAgICAgICAgICBpZiAobm9kZS5wcml2YXRlS2V5ICE9IGFjY291bnQucHJpdmF0ZUtleSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1uZW1vbmljIG1pc21hdGNoXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcbiAgICB9XG5cbiAgICAvLyBUaGUgb3B0aW9ucyBhcmUgb3B0aW9uYWwsIHNvIGFkanVzdCB0aGUgY2FsbCBhcyBuZWVkZWRcbiAgICBpZiAodHlwZW9mKG9wdGlvbnMpID09PSBcImZ1bmN0aW9uXCIgJiYgIXByb2dyZXNzQ2FsbGJhY2spIHtcbiAgICAgICAgcHJvZ3Jlc3NDYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgaWYgKCFvcHRpb25zKSB7IG9wdGlvbnMgPSB7fTsgfVxuXG4gICAgY29uc3QgcHJpdmF0ZUtleTogVWludDhBcnJheSA9IGFycmF5aWZ5KGFjY291bnQucHJpdmF0ZUtleSk7XG4gICAgY29uc3QgcGFzc3dvcmRCeXRlcyA9IGdldFBhc3N3b3JkKHBhc3N3b3JkKTtcblxuICAgIGxldCBlbnRyb3B5OiBVaW50OEFycmF5ID0gbnVsbFxuICAgIGxldCBwYXRoOiBzdHJpbmcgPSBudWxsO1xuICAgIGxldCBsb2NhbGU6IHN0cmluZyA9IG51bGw7XG4gICAgaWYgKGhhc01uZW1vbmljKGFjY291bnQpKSB7XG4gICAgICAgIGNvbnN0IHNyY01uZW1vbmljID0gYWNjb3VudC5tbmVtb25pYztcbiAgICAgICAgZW50cm9weSA9IGFycmF5aWZ5KG1uZW1vbmljVG9FbnRyb3B5KHNyY01uZW1vbmljLnBocmFzZSwgc3JjTW5lbW9uaWMubG9jYWxlIHx8IFwiZW5cIikpO1xuICAgICAgICBwYXRoID0gc3JjTW5lbW9uaWMucGF0aCB8fCBkZWZhdWx0UGF0aDtcbiAgICAgICAgbG9jYWxlID0gc3JjTW5lbW9uaWMubG9jYWxlIHx8IFwiZW5cIjtcbiAgICB9XG5cbiAgICBsZXQgY2xpZW50ID0gb3B0aW9ucy5jbGllbnQ7XG4gICAgaWYgKCFjbGllbnQpIHsgY2xpZW50ID0gXCJldGhlcnMuanNcIjsgfVxuXG4gICAgLy8gQ2hlY2svZ2VuZXJhdGUgdGhlIHNhbHRcbiAgICBsZXQgc2FsdDogVWludDhBcnJheSA9IG51bGw7XG4gICAgaWYgKG9wdGlvbnMuc2FsdCkge1xuICAgICAgICBzYWx0ID0gYXJyYXlpZnkob3B0aW9ucy5zYWx0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzYWx0ID0gcmFuZG9tQnl0ZXMoMzIpOztcbiAgICB9XG5cbiAgICAvLyBPdmVycmlkZSBpbml0aWFsaXphdGlvbiB2ZWN0b3JcbiAgICBsZXQgaXY6IFVpbnQ4QXJyYXkgPSBudWxsO1xuICAgIGlmIChvcHRpb25zLml2KSB7XG4gICAgICAgIGl2ID0gYXJyYXlpZnkob3B0aW9ucy5pdik7XG4gICAgICAgIGlmIChpdi5sZW5ndGggIT09IDE2KSB7IHRocm93IG5ldyBFcnJvcihcImludmFsaWQgaXZcIik7IH1cbiAgICB9IGVsc2Uge1xuICAgICAgIGl2ID0gcmFuZG9tQnl0ZXMoMTYpO1xuICAgIH1cblxuICAgIC8vIE92ZXJyaWRlIHRoZSB1dWlkXG4gICAgbGV0IHV1aWRSYW5kb206IFVpbnQ4QXJyYXkgPSBudWxsO1xuICAgIGlmIChvcHRpb25zLnV1aWQpIHtcbiAgICAgICAgdXVpZFJhbmRvbSA9IGFycmF5aWZ5KG9wdGlvbnMudXVpZCk7XG4gICAgICAgIGlmICh1dWlkUmFuZG9tLmxlbmd0aCAhPT0gMTYpIHsgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB1dWlkXCIpOyB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdXVpZFJhbmRvbSA9IHJhbmRvbUJ5dGVzKDE2KTtcbiAgICB9XG5cbiAgICAvLyBPdmVycmlkZSB0aGUgc2NyeXB0IHBhc3N3b3JkLWJhc2VkIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uIHBhcmFtZXRlcnNcbiAgICBsZXQgTiA9ICgxIDw8IDE3KSwgciA9IDgsIHAgPSAxO1xuICAgIGlmIChvcHRpb25zLnNjcnlwdCkge1xuICAgICAgICBpZiAob3B0aW9ucy5zY3J5cHQuTikgeyBOID0gb3B0aW9ucy5zY3J5cHQuTjsgfVxuICAgICAgICBpZiAob3B0aW9ucy5zY3J5cHQucikgeyByID0gb3B0aW9ucy5zY3J5cHQucjsgfVxuICAgICAgICBpZiAob3B0aW9ucy5zY3J5cHQucCkgeyBwID0gb3B0aW9ucy5zY3J5cHQucDsgfVxuICAgIH1cblxuICAgIC8vIFdlIHRha2UgNjQgYnl0ZXM6XG4gICAgLy8gICAtIDMyIGJ5dGVzICAgQXMgbm9ybWFsIGZvciB0aGUgV2ViMyBzZWNyZXQgc3RvcmFnZSAoZGVyaXZlZEtleSwgbWFjUHJlZml4KVxuICAgIC8vICAgLSAzMiBieXRlcyAgIEFFUyBrZXkgdG8gZW5jcnlwdCBtbmVtb25pYyB3aXRoIChyZXF1aXJlZCBoZXJlIHRvIGJlIEV0aGVycyBXYWxsZXQpXG4gICAgcmV0dXJuIHNjcnlwdC5zY3J5cHQocGFzc3dvcmRCeXRlcywgc2FsdCwgTiwgciwgcCwgNjQsIHByb2dyZXNzQ2FsbGJhY2spLnRoZW4oKGtleSkgPT4ge1xuICAgICAgICBrZXkgPSBhcnJheWlmeShrZXkpO1xuXG4gICAgICAgIC8vIFRoaXMgd2lsbCBiZSB1c2VkIHRvIGVuY3J5cHQgdGhlIHdhbGxldCAoYXMgcGVyIFdlYjMgc2VjcmV0IHN0b3JhZ2UpXG4gICAgICAgIGNvbnN0IGRlcml2ZWRLZXkgPSBrZXkuc2xpY2UoMCwgMTYpO1xuICAgICAgICBjb25zdCBtYWNQcmVmaXggPSBrZXkuc2xpY2UoMTYsIDMyKTtcblxuICAgICAgICAvLyBUaGlzIHdpbGwgYmUgdXNlZCB0byBlbmNyeXB0IHRoZSBtbmVtb25pYyBwaHJhc2UgKGlmIGFueSlcbiAgICAgICAgY29uc3QgbW5lbW9uaWNLZXkgPSBrZXkuc2xpY2UoMzIsIDY0KTtcblxuICAgICAgICAvLyBFbmNyeXB0IHRoZSBwcml2YXRlIGtleVxuICAgICAgICBjb25zdCBjb3VudGVyID0gbmV3IGFlcy5Db3VudGVyKGl2KTtcbiAgICAgICAgY29uc3QgYWVzQ3RyID0gbmV3IGFlcy5Nb2RlT2ZPcGVyYXRpb24uY3RyKGRlcml2ZWRLZXksIGNvdW50ZXIpO1xuICAgICAgICBjb25zdCBjaXBoZXJ0ZXh0ID0gYXJyYXlpZnkoYWVzQ3RyLmVuY3J5cHQocHJpdmF0ZUtleSkpO1xuXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIG1lc3NhZ2UgYXV0aGVudGljYXRpb24gY29kZSwgdXNlZCB0byBjaGVjayB0aGUgcGFzc3dvcmRcbiAgICAgICAgY29uc3QgbWFjID0ga2VjY2FrMjU2KGNvbmNhdChbbWFjUHJlZml4LCBjaXBoZXJ0ZXh0XSkpXG5cbiAgICAgICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vd2lraS93aWtpL1dlYjMtU2VjcmV0LVN0b3JhZ2UtRGVmaW5pdGlvblxuICAgICAgICBjb25zdCBkYXRhOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge1xuICAgICAgICAgICAgYWRkcmVzczogYWNjb3VudC5hZGRyZXNzLnN1YnN0cmluZygyKS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgaWQ6IHV1aWRWNCh1dWlkUmFuZG9tKSxcbiAgICAgICAgICAgIHZlcnNpb246IDMsXG4gICAgICAgICAgICBjcnlwdG86IHtcbiAgICAgICAgICAgICAgICBjaXBoZXI6IFwiYWVzLTEyOC1jdHJcIixcbiAgICAgICAgICAgICAgICBjaXBoZXJwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgaXY6IGhleGxpZnkoaXYpLnN1YnN0cmluZygyKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNpcGhlcnRleHQ6IGhleGxpZnkoY2lwaGVydGV4dCkuc3Vic3RyaW5nKDIpLFxuICAgICAgICAgICAgICAgIGtkZjogXCJzY3J5cHRcIixcbiAgICAgICAgICAgICAgICBrZGZwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2FsdDogaGV4bGlmeShzYWx0KS5zdWJzdHJpbmcoMiksXG4gICAgICAgICAgICAgICAgICAgIG46IE4sXG4gICAgICAgICAgICAgICAgICAgIGRrbGVuOiAzMixcbiAgICAgICAgICAgICAgICAgICAgcDogcCxcbiAgICAgICAgICAgICAgICAgICAgcjogclxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWFjOiBtYWMuc3Vic3RyaW5nKDIpXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIG1uZW1vbmljLCBlbmNyeXB0IGl0IGludG8gdGhlIEpTT04gd2FsbGV0XG4gICAgICAgIGlmIChlbnRyb3B5KSB7XG4gICAgICAgICAgICBjb25zdCBtbmVtb25pY0l2ID0gcmFuZG9tQnl0ZXMoMTYpO1xuICAgICAgICAgICAgY29uc3QgbW5lbW9uaWNDb3VudGVyID0gbmV3IGFlcy5Db3VudGVyKG1uZW1vbmljSXYpO1xuICAgICAgICAgICAgY29uc3QgbW5lbW9uaWNBZXNDdHIgPSBuZXcgYWVzLk1vZGVPZk9wZXJhdGlvbi5jdHIobW5lbW9uaWNLZXksIG1uZW1vbmljQ291bnRlcik7XG4gICAgICAgICAgICBjb25zdCBtbmVtb25pY0NpcGhlcnRleHQgPSBhcnJheWlmeShtbmVtb25pY0Flc0N0ci5lbmNyeXB0KGVudHJvcHkpKTtcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSAobm93LmdldFVUQ0Z1bGxZZWFyKCkgKyBcIi1cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgenBhZChub3cuZ2V0VVRDTW9udGgoKSArIDEsIDIpICsgXCItXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpwYWQobm93LmdldFVUQ0RhdGUoKSwgMikgKyBcIlRcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgenBhZChub3cuZ2V0VVRDSG91cnMoKSwgMikgKyBcIi1cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgenBhZChub3cuZ2V0VVRDTWludXRlcygpLCAyKSArIFwiLVwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6cGFkKG5vdy5nZXRVVENTZWNvbmRzKCksIDIpICsgXCIuMFpcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGRhdGFbXCJ4LWV0aGVyc1wiXSA9IHtcbiAgICAgICAgICAgICAgICBjbGllbnQ6IGNsaWVudCxcbiAgICAgICAgICAgICAgICBnZXRoRmlsZW5hbWU6IChcIlVUQy0tXCIgKyB0aW1lc3RhbXAgKyBcIi0tXCIgKyBkYXRhLmFkZHJlc3MpLFxuICAgICAgICAgICAgICAgIG1uZW1vbmljQ291bnRlcjogaGV4bGlmeShtbmVtb25pY0l2KS5zdWJzdHJpbmcoMiksXG4gICAgICAgICAgICAgICAgbW5lbW9uaWNDaXBoZXJ0ZXh0OiBoZXhsaWZ5KG1uZW1vbmljQ2lwaGVydGV4dCkuc3Vic3RyaW5nKDIpLFxuICAgICAgICAgICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAgICAgICAgICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogXCIwLjFcIlxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9KTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBCeXRlcyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuaW1wb3J0IHsgRXh0ZXJuYWxseU93bmVkQWNjb3VudCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1zaWduZXJcIjtcblxuaW1wb3J0IHsgZGVjcnlwdCBhcyBkZWNyeXB0Q3Jvd2RzYWxlIH0gZnJvbSBcIi4vY3Jvd2RzYWxlXCI7XG5pbXBvcnQgeyBnZXRKc29uV2FsbGV0QWRkcmVzcywgaXNDcm93ZHNhbGVXYWxsZXQsIGlzS2V5c3RvcmVXYWxsZXQgfSBmcm9tIFwiLi9pbnNwZWN0XCI7XG5pbXBvcnQgeyBkZWNyeXB0IGFzIGRlY3J5cHRLZXlzdG9yZSwgZGVjcnlwdFN5bmMgYXMgZGVjcnlwdEtleXN0b3JlU3luYywgZW5jcnlwdCBhcyBlbmNyeXB0S2V5c3RvcmUsIEVuY3J5cHRPcHRpb25zLCBQcm9ncmVzc0NhbGxiYWNrIH0gZnJvbSBcIi4va2V5c3RvcmVcIjtcblxuZnVuY3Rpb24gZGVjcnlwdEpzb25XYWxsZXQoanNvbjogc3RyaW5nLCBwYXNzd29yZDogQnl0ZXMgfCBzdHJpbmcsIHByb2dyZXNzQ2FsbGJhY2s/OiBQcm9ncmVzc0NhbGxiYWNrKTogUHJvbWlzZTxFeHRlcm5hbGx5T3duZWRBY2NvdW50PiB7XG4gICAgaWYgKGlzQ3Jvd2RzYWxlV2FsbGV0KGpzb24pKSB7XG4gICAgICAgIGlmIChwcm9ncmVzc0NhbGxiYWNrKSB7IHByb2dyZXNzQ2FsbGJhY2soMCk7IH1cbiAgICAgICAgY29uc3QgYWNjb3VudCA9IGRlY3J5cHRDcm93ZHNhbGUoanNvbiwgcGFzc3dvcmQpXG4gICAgICAgIGlmIChwcm9ncmVzc0NhbGxiYWNrKSB7IHByb2dyZXNzQ2FsbGJhY2soMSk7IH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShhY2NvdW50KTtcbiAgICB9XG5cbiAgICBpZiAoaXNLZXlzdG9yZVdhbGxldChqc29uKSkge1xuICAgICAgICByZXR1cm4gZGVjcnlwdEtleXN0b3JlKGpzb24sIHBhc3N3b3JkLCBwcm9ncmVzc0NhbGxiYWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiaW52YWxpZCBKU09OIHdhbGxldFwiKSk7XG59XG5cbmZ1bmN0aW9uIGRlY3J5cHRKc29uV2FsbGV0U3luYyhqc29uOiBzdHJpbmcsIHBhc3N3b3JkOiBCeXRlcyB8IHN0cmluZyk6IEV4dGVybmFsbHlPd25lZEFjY291bnQge1xuICAgIGlmIChpc0Nyb3dkc2FsZVdhbGxldChqc29uKSkge1xuICAgICAgICByZXR1cm4gZGVjcnlwdENyb3dkc2FsZShqc29uLCBwYXNzd29yZClcbiAgICB9XG5cbiAgICBpZiAoaXNLZXlzdG9yZVdhbGxldChqc29uKSkge1xuICAgICAgICByZXR1cm4gZGVjcnlwdEtleXN0b3JlU3luYyhqc29uLCBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBKU09OIHdhbGxldFwiKTtcbn1cblxuZXhwb3J0IHtcbiAgICBkZWNyeXB0Q3Jvd2RzYWxlLFxuXG4gICAgZGVjcnlwdEtleXN0b3JlLFxuICAgIGRlY3J5cHRLZXlzdG9yZVN5bmMsXG4gICAgZW5jcnlwdEtleXN0b3JlLFxuXG4gICAgaXNDcm93ZHNhbGVXYWxsZXQsXG4gICAgaXNLZXlzdG9yZVdhbGxldCxcbiAgICBnZXRKc29uV2FsbGV0QWRkcmVzcyxcblxuICAgIGRlY3J5cHRKc29uV2FsbGV0LFxuICAgIGRlY3J5cHRKc29uV2FsbGV0U3luYyxcblxuICAgIFByb2dyZXNzQ2FsbGJhY2ssXG4gICAgRW5jcnlwdE9wdGlvbnMsXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGdldEFkZHJlc3MgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYWRkcmVzc1wiO1xuaW1wb3J0IHsgUHJvdmlkZXIsIFRyYW5zYWN0aW9uUmVxdWVzdCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1wcm92aWRlclwiO1xuaW1wb3J0IHsgRXh0ZXJuYWxseU93bmVkQWNjb3VudCwgU2lnbmVyLCBUeXBlZERhdGFEb21haW4sIFR5cGVkRGF0YUZpZWxkLCBUeXBlZERhdGFTaWduZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYWJzdHJhY3Qtc2lnbmVyXCI7XG5pbXBvcnQgeyBhcnJheWlmeSwgQnl0ZXMsIEJ5dGVzTGlrZSwgY29uY2F0LCBoZXhEYXRhU2xpY2UsIGlzSGV4U3RyaW5nLCBqb2luU2lnbmF0dXJlLCBTaWduYXR1cmVMaWtlIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBoYXNoTWVzc2FnZSwgX1R5cGVkRGF0YUVuY29kZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvaGFzaFwiO1xuaW1wb3J0IHsgZGVmYXVsdFBhdGgsIEhETm9kZSwgZW50cm9weVRvTW5lbW9uaWMsIE1uZW1vbmljIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2hkbm9kZVwiO1xuaW1wb3J0IHsga2VjY2FrMjU2IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2tlY2NhazI1NlwiO1xuaW1wb3J0IHsgZGVmaW5lUmVhZE9ubHksIHJlc29sdmVQcm9wZXJ0aWVzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIjtcbmltcG9ydCB7IHJhbmRvbUJ5dGVzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3JhbmRvbVwiO1xuaW1wb3J0IHsgU2lnbmluZ0tleSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9zaWduaW5nLWtleVwiO1xuaW1wb3J0IHsgZGVjcnlwdEpzb25XYWxsZXQsIGRlY3J5cHRKc29uV2FsbGV0U3luYywgZW5jcnlwdEtleXN0b3JlLCBQcm9ncmVzc0NhbGxiYWNrIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2pzb24td2FsbGV0c1wiO1xuaW1wb3J0IHsgY29tcHV0ZUFkZHJlc3MsIHJlY292ZXJBZGRyZXNzLCBzZXJpYWxpemUsIFVuc2lnbmVkVHJhbnNhY3Rpb24gfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvdHJhbnNhY3Rpb25zXCI7XG5pbXBvcnQgeyBXb3JkbGlzdCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC93b3JkbGlzdHNcIjtcblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuXG5mdW5jdGlvbiBpc0FjY291bnQodmFsdWU6IGFueSk6IHZhbHVlIGlzIEV4dGVybmFsbHlPd25lZEFjY291bnQge1xuICAgIHJldHVybiAodmFsdWUgIT0gbnVsbCAmJiBpc0hleFN0cmluZyh2YWx1ZS5wcml2YXRlS2V5LCAzMikgJiYgdmFsdWUuYWRkcmVzcyAhPSBudWxsKTtcbn1cblxuZnVuY3Rpb24gaGFzTW5lbW9uaWModmFsdWU6IGFueSk6IHZhbHVlIGlzIHsgbW5lbW9uaWM6IE1uZW1vbmljIH0ge1xuICAgIGNvbnN0IG1uZW1vbmljID0gdmFsdWUubW5lbW9uaWM7XG4gICAgcmV0dXJuIChtbmVtb25pYyAmJiBtbmVtb25pYy5waHJhc2UpO1xufVxuXG5leHBvcnQgY2xhc3MgV2FsbGV0IGV4dGVuZHMgU2lnbmVyIGltcGxlbWVudHMgRXh0ZXJuYWxseU93bmVkQWNjb3VudCwgVHlwZWREYXRhU2lnbmVyIHtcblxuICAgIHJlYWRvbmx5IGFkZHJlc3M6IHN0cmluZztcbiAgICByZWFkb25seSBwcm92aWRlcjogUHJvdmlkZXI7XG5cbiAgICAvLyBXcmFwcGluZyB0aGUgX3NpZ25pbmdLZXkgYW5kIF9tbmVtb25pYyBpbiBhIGdldHRlciBmdW5jdGlvbiBwcmV2ZW50c1xuICAgIC8vIGxlYWtpbmcgdGhlIHByaXZhdGUga2V5IGluIGNvbnNvbGUubG9nOyBzdGlsbCwgYmUgY2FyZWZ1bCEgOilcbiAgICByZWFkb25seSBfc2lnbmluZ0tleTogKCkgPT4gU2lnbmluZ0tleTtcbiAgICByZWFkb25seSBfbW5lbW9uaWM6ICgpID0+IE1uZW1vbmljO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZUtleTogQnl0ZXNMaWtlIHwgRXh0ZXJuYWxseU93bmVkQWNjb3VudCB8IFNpZ25pbmdLZXksIHByb3ZpZGVyPzogUHJvdmlkZXIpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBpZiAoaXNBY2NvdW50KHByaXZhdGVLZXkpKSB7XG4gICAgICAgICAgICBjb25zdCBzaWduaW5nS2V5ID0gbmV3IFNpZ25pbmdLZXkocHJpdmF0ZUtleS5wcml2YXRlS2V5KTtcbiAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiX3NpZ25pbmdLZXlcIiwgKCkgPT4gc2lnbmluZ0tleSk7XG4gICAgICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImFkZHJlc3NcIiwgY29tcHV0ZUFkZHJlc3ModGhpcy5wdWJsaWNLZXkpKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYWRkcmVzcyAhPT0gZ2V0QWRkcmVzcyhwcml2YXRlS2V5LmFkZHJlc3MpKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInByaXZhdGVLZXkvYWRkcmVzcyBtaXNtYXRjaFwiLCBcInByaXZhdGVLZXlcIiwgXCJbUkVEQUNURURdXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaGFzTW5lbW9uaWMocHJpdmF0ZUtleSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzcmNNbmVtb25pYyA9IHByaXZhdGVLZXkubW5lbW9uaWM7XG4gICAgICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfbW5lbW9uaWNcIiwgKCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwaHJhc2U6IHNyY01uZW1vbmljLnBocmFzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IHNyY01uZW1vbmljLnBhdGggfHwgZGVmYXVsdFBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGU6IHNyY01uZW1vbmljLmxvY2FsZSB8fCBcImVuXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1uZW1vbmljID0gdGhpcy5tbmVtb25pYztcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gSEROb2RlLmZyb21NbmVtb25pYyhtbmVtb25pYy5waHJhc2UsIG51bGwsIG1uZW1vbmljLmxvY2FsZSkuZGVyaXZlUGF0aChtbmVtb25pYy5wYXRoKTtcbiAgICAgICAgICAgICAgICBpZiAoY29tcHV0ZUFkZHJlc3Mobm9kZS5wcml2YXRlS2V5KSAhPT0gdGhpcy5hZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJtbmVtb25pYy9hZGRyZXNzIG1pc21hdGNoXCIsIFwicHJpdmF0ZUtleVwiLCBcIltSRURBQ1RFRF1cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl9tbmVtb25pY1wiLCAoKTogTW5lbW9uaWMgPT4gbnVsbCk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKFNpZ25pbmdLZXkuaXNTaWduaW5nS2V5KHByaXZhdGVLZXkpKSB7XG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgICAgaWYgKHByaXZhdGVLZXkuY3VydmUgIT09IFwic2VjcDI1NmsxXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIGN1cnZlOyBtdXN0IGJlIHNlY3AyNTZrMVwiLCBcInByaXZhdGVLZXlcIiwgXCJbUkVEQUNURURdXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl9zaWduaW5nS2V5XCIsICgpID0+ICg8U2lnbmluZ0tleT5wcml2YXRlS2V5KSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQSBsb3Qgb2YgY29tbW9uIHRvb2xzIGRvIG5vdCBwcmVmaXggcHJpdmF0ZSBrZXlzIHdpdGggYSAweCAoc2VlOiAjMTE2NilcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHByaXZhdGVLZXkpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcml2YXRlS2V5Lm1hdGNoKC9eWzAtOWEtZl0qJC9pKSAmJiBwcml2YXRlS2V5Lmxlbmd0aCA9PT0gNjQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaXZhdGVLZXkgPSBcIjB4XCIgKyBwcml2YXRlS2V5O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3Qgc2lnbmluZ0tleSA9IG5ldyBTaWduaW5nS2V5KHByaXZhdGVLZXkpO1xuICAgICAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiX3NpZ25pbmdLZXlcIiwgKCkgPT4gc2lnbmluZ0tleSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiX21uZW1vbmljXCIsICgpOiBNbmVtb25pYyA9PiBudWxsKTtcbiAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiYWRkcmVzc1wiLCBjb21wdXRlQWRkcmVzcyh0aGlzLnB1YmxpY0tleSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChwcm92aWRlciAmJiAhUHJvdmlkZXIuaXNQcm92aWRlcihwcm92aWRlcikpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHByb3ZpZGVyXCIsIFwicHJvdmlkZXJcIiwgcHJvdmlkZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJwcm92aWRlclwiLCBwcm92aWRlciB8fCBudWxsKTtcbiAgICB9XG5cbiAgICBnZXQgbW5lbW9uaWMoKTogTW5lbW9uaWMgeyByZXR1cm4gdGhpcy5fbW5lbW9uaWMoKTsgfVxuICAgIGdldCBwcml2YXRlS2V5KCk6IHN0cmluZyB7IHJldHVybiB0aGlzLl9zaWduaW5nS2V5KCkucHJpdmF0ZUtleTsgfVxuICAgIGdldCBwdWJsaWNLZXkoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuX3NpZ25pbmdLZXkoKS5wdWJsaWNLZXk7IH1cblxuICAgIGdldEFkZHJlc3MoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmFkZHJlc3MpO1xuICAgIH1cblxuICAgIGNvbm5lY3QocHJvdmlkZXI6IFByb3ZpZGVyKTogV2FsbGV0IHtcbiAgICAgICAgcmV0dXJuIG5ldyBXYWxsZXQodGhpcywgcHJvdmlkZXIpO1xuICAgIH1cblxuICAgIHNpZ25UcmFuc2FjdGlvbih0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb25SZXF1ZXN0KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVQcm9wZXJ0aWVzKHRyYW5zYWN0aW9uKS50aGVuKCh0eCkgPT4ge1xuICAgICAgICAgICAgaWYgKHR4LmZyb20gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChnZXRBZGRyZXNzKHR4LmZyb20pICE9PSB0aGlzLmFkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInRyYW5zYWN0aW9uIGZyb20gYWRkcmVzcyBtaXNtYXRjaFwiLCBcInRyYW5zYWN0aW9uLmZyb21cIiwgdHJhbnNhY3Rpb24uZnJvbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0eC5mcm9tO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBzaWduYXR1cmUgPSB0aGlzLl9zaWduaW5nS2V5KCkuc2lnbkRpZ2VzdChrZWNjYWsyNTYoc2VyaWFsaXplKDxVbnNpZ25lZFRyYW5zYWN0aW9uPnR4KSkpO1xuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZSg8VW5zaWduZWRUcmFuc2FjdGlvbj50eCwgc2lnbmF0dXJlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2lnbk1lc3NhZ2UobWVzc2FnZTogQnl0ZXMgfCBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gam9pblNpZ25hdHVyZSh0aGlzLl9zaWduaW5nS2V5KCkuc2lnbkRpZ2VzdChoYXNoTWVzc2FnZShtZXNzYWdlKSkpO1xuICAgIH1cblxuICAgIGFzeW5jIF9zaWduVHlwZWREYXRhKGRvbWFpbjogVHlwZWREYXRhRG9tYWluLCB0eXBlczogUmVjb3JkPHN0cmluZywgQXJyYXk8VHlwZWREYXRhRmllbGQ+PiwgdmFsdWU6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICAvLyBQb3B1bGF0ZSBhbnkgRU5TIG5hbWVzXG4gICAgICAgIGNvbnN0IHBvcHVsYXRlZCA9IGF3YWl0IF9UeXBlZERhdGFFbmNvZGVyLnJlc29sdmVOYW1lcyhkb21haW4sIHR5cGVzLCB2YWx1ZSwgKG5hbWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvdmlkZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiY2Fubm90IHJlc29sdmUgRU5TIG5hbWVzIHdpdGhvdXQgYSBwcm92aWRlclwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwicmVzb2x2ZU5hbWVcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5hbWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLnJlc29sdmVOYW1lKG5hbWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gam9pblNpZ25hdHVyZSh0aGlzLl9zaWduaW5nS2V5KCkuc2lnbkRpZ2VzdChfVHlwZWREYXRhRW5jb2Rlci5oYXNoKHBvcHVsYXRlZC5kb21haW4sIHR5cGVzLCBwb3B1bGF0ZWQudmFsdWUpKSk7XG4gICAgfVxuXG4gICAgZW5jcnlwdChwYXNzd29yZDogQnl0ZXMgfCBzdHJpbmcsIG9wdGlvbnM/OiBhbnksIHByb2dyZXNzQ2FsbGJhY2s/OiBQcm9ncmVzc0NhbGxiYWNrKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgaWYgKHR5cGVvZihvcHRpb25zKSA9PT0gXCJmdW5jdGlvblwiICYmICFwcm9ncmVzc0NhbGxiYWNrKSB7XG4gICAgICAgICAgICBwcm9ncmVzc0NhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9ncmVzc0NhbGxiYWNrICYmIHR5cGVvZihwcm9ncmVzc0NhbGxiYWNrKSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvcHRpb25zKSB7IG9wdGlvbnMgPSB7fTsgfVxuXG4gICAgICAgIHJldHVybiBlbmNyeXB0S2V5c3RvcmUodGhpcywgcGFzc3dvcmQsIG9wdGlvbnMsIHByb2dyZXNzQ2FsbGJhY2spO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogIFN0YXRpYyBtZXRob2RzIHRvIGNyZWF0ZSBXYWxsZXQgaW5zdGFuY2VzLlxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVSYW5kb20ob3B0aW9ucz86IGFueSk6IFdhbGxldCB7XG4gICAgICAgIGxldCBlbnRyb3B5OiBVaW50OEFycmF5ID0gcmFuZG9tQnl0ZXMoMTYpO1xuXG4gICAgICAgIGlmICghb3B0aW9ucykgeyBvcHRpb25zID0geyB9OyB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuZXh0cmFFbnRyb3B5KSB7XG4gICAgICAgICAgICBlbnRyb3B5ID0gYXJyYXlpZnkoaGV4RGF0YVNsaWNlKGtlY2NhazI1Nihjb25jYXQoWyBlbnRyb3B5LCBvcHRpb25zLmV4dHJhRW50cm9weSBdKSksIDAsIDE2KSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtbmVtb25pYyA9IGVudHJvcHlUb01uZW1vbmljKGVudHJvcHksIG9wdGlvbnMubG9jYWxlKTtcbiAgICAgICAgcmV0dXJuIFdhbGxldC5mcm9tTW5lbW9uaWMobW5lbW9uaWMsIG9wdGlvbnMucGF0aCwgb3B0aW9ucy5sb2NhbGUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tRW5jcnlwdGVkSnNvbihqc29uOiBzdHJpbmcsIHBhc3N3b3JkOiBCeXRlcyB8IHN0cmluZywgcHJvZ3Jlc3NDYWxsYmFjaz86IFByb2dyZXNzQ2FsbGJhY2spOiBQcm9taXNlPFdhbGxldD4ge1xuICAgICAgICByZXR1cm4gZGVjcnlwdEpzb25XYWxsZXQoanNvbiwgcGFzc3dvcmQsIHByb2dyZXNzQ2FsbGJhY2spLnRoZW4oKGFjY291bnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgV2FsbGV0KGFjY291bnQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbUVuY3J5cHRlZEpzb25TeW5jKGpzb246IHN0cmluZywgcGFzc3dvcmQ6IEJ5dGVzIHwgc3RyaW5nKTogV2FsbGV0IHtcbiAgICAgICAgcmV0dXJuIG5ldyBXYWxsZXQoZGVjcnlwdEpzb25XYWxsZXRTeW5jKGpzb24sIHBhc3N3b3JkKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21NbmVtb25pYyhtbmVtb25pYzogc3RyaW5nLCBwYXRoPzogc3RyaW5nLCB3b3JkbGlzdD86IFdvcmRsaXN0KTogV2FsbGV0IHtcbiAgICAgICAgaWYgKCFwYXRoKSB7IHBhdGggPSBkZWZhdWx0UGF0aDsgfVxuICAgICAgICByZXR1cm4gbmV3IFdhbGxldChIRE5vZGUuZnJvbU1uZW1vbmljKG1uZW1vbmljLCBudWxsLCB3b3JkbGlzdCkuZGVyaXZlUGF0aChwYXRoKSk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5TWVzc2FnZShtZXNzYWdlOiBCeXRlcyB8IHN0cmluZywgc2lnbmF0dXJlOiBTaWduYXR1cmVMaWtlKTogc3RyaW5nIHtcbiAgICByZXR1cm4gcmVjb3ZlckFkZHJlc3MoaGFzaE1lc3NhZ2UobWVzc2FnZSksIHNpZ25hdHVyZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2ZXJpZnlUeXBlZERhdGEoZG9tYWluOiBUeXBlZERhdGFEb21haW4sIHR5cGVzOiBSZWNvcmQ8c3RyaW5nLCBBcnJheTxUeXBlZERhdGFGaWVsZD4+LCB2YWx1ZTogUmVjb3JkPHN0cmluZywgYW55Piwgc2lnbmF0dXJlOiBTaWduYXR1cmVMaWtlKTogc3RyaW5nIHtcbiAgICByZXR1cm4gcmVjb3ZlckFkZHJlc3MoX1R5cGVkRGF0YUVuY29kZXIuaGFzaChkb21haW4sIHR5cGVzLCB2YWx1ZSksIHNpZ25hdHVyZSk7XG59XG4iLCJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwid2FsbGV0LzUuNy4wXCI7XG4iLCJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwibmV0d29ya3MvNS43LjBcIjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5cbmltcG9ydCB7IE5ldHdvcmssIE5ldHdvcmtpc2ggfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQge1xuICAgIE5ldHdvcmssXG4gICAgTmV0d29ya2lzaFxufTtcblxudHlwZSBEZWZhdWx0UHJvdmlkZXJGdW5jID0gKHByb3ZpZGVyczogYW55LCBvcHRpb25zPzogYW55KSA9PiBhbnk7XG5cbmludGVyZmFjZSBSZW5ldHdvcmthYmxlIGV4dGVuZHMgRGVmYXVsdFByb3ZpZGVyRnVuYyB7XG4gICAgcmVuZXR3b3JrOiAobmV0d29yazogTmV0d29yaykgPT4gRGVmYXVsdFByb3ZpZGVyRnVuYztcbn07XG5cbmZ1bmN0aW9uIGlzUmVuZXR3b3JrYWJsZSh2YWx1ZTogYW55KTogdmFsdWUgaXMgUmVuZXR3b3JrYWJsZSB7XG4gICAgcmV0dXJuICh2YWx1ZSAmJiB0eXBlb2YodmFsdWUucmVuZXR3b3JrKSA9PT0gXCJmdW5jdGlvblwiKTtcbn1cblxuZnVuY3Rpb24gZXRoRGVmYXVsdFByb3ZpZGVyKG5ldHdvcms6IHN0cmluZyB8IE5ldHdvcmspOiBSZW5ldHdvcmthYmxlIHtcbiAgICBjb25zdCBmdW5jID0gZnVuY3Rpb24ocHJvdmlkZXJzOiBhbnksIG9wdGlvbnM/OiBhbnkpOiBhbnkge1xuICAgICAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7IG9wdGlvbnMgPSB7IH07IH1cbiAgICAgICAgY29uc3QgcHJvdmlkZXJMaXN0OiBBcnJheTxhbnk+ID0gW107XG5cbiAgICAgICAgaWYgKHByb3ZpZGVycy5JbmZ1cmFQcm92aWRlciAmJiBvcHRpb25zLmluZnVyYSAhPT0gXCItXCIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXJMaXN0LnB1c2gobmV3IHByb3ZpZGVycy5JbmZ1cmFQcm92aWRlcihuZXR3b3JrLCBvcHRpb25zLmluZnVyYSkpO1xuICAgICAgICAgICAgfSBjYXRjaChlcnJvcikgeyB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvdmlkZXJzLkV0aGVyc2NhblByb3ZpZGVyICYmIG9wdGlvbnMuZXRoZXJzY2FuICE9PSBcIi1cIikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwcm92aWRlckxpc3QucHVzaChuZXcgcHJvdmlkZXJzLkV0aGVyc2NhblByb3ZpZGVyKG5ldHdvcmssIG9wdGlvbnMuZXRoZXJzY2FuKSk7XG4gICAgICAgICAgICB9IGNhdGNoKGVycm9yKSB7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm92aWRlcnMuQWxjaGVteVByb3ZpZGVyICYmIG9wdGlvbnMuYWxjaGVteSAhPT0gXCItXCIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXJMaXN0LnB1c2gobmV3IHByb3ZpZGVycy5BbGNoZW15UHJvdmlkZXIobmV0d29yaywgb3B0aW9ucy5hbGNoZW15KSk7XG4gICAgICAgICAgICB9IGNhdGNoKGVycm9yKSB7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm92aWRlcnMuUG9ja2V0UHJvdmlkZXIgJiYgb3B0aW9ucy5wb2NrZXQgIT09IFwiLVwiKSB7XG4gICAgICAgICAgICAvLyBUaGVzZSBuZXR3b3JrcyBhcmUgY3VycmVudGx5IGZhdWx0eSBvbiBQb2NrZXQgYXMgdGhlaXJcbiAgICAgICAgICAgIC8vIG5ldHdvcmsgZG9lcyBub3QgaGFuZGxlIHRoZSBCZXJsaW4gaGFyZGZvcmssIHdoaWNoIGlzXG4gICAgICAgICAgICAvLyBsaXZlIG9uIHRoZXNlIG9uZXMuXG4gICAgICAgICAgICAvLyBAVE9ETzogVGhpcyBnb2VzIGF3YXkgb25jZSBQb2NrZXQgaGFzIHVwZ3JhZGVkIHRoZWlyIG5vZGVzXG4gICAgICAgICAgICBjb25zdCBza2lwID0gWyBcImdvZXJsaVwiLCBcInJvcHN0ZW5cIiwgXCJyaW5rZWJ5XCIgXTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgcHJvdmlkZXJzLlBvY2tldFByb3ZpZGVyKG5ldHdvcmssIG9wdGlvbnMucG9ja2V0KTtcbiAgICAgICAgICAgICAgICBpZiAocHJvdmlkZXIubmV0d29yayAmJiBza2lwLmluZGV4T2YocHJvdmlkZXIubmV0d29yay5uYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJMaXN0LnB1c2gocHJvdmlkZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2goZXJyb3IpIHsgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb3ZpZGVycy5DbG91ZGZsYXJlUHJvdmlkZXIgJiYgb3B0aW9ucy5jbG91ZGZsYXJlICE9PSBcIi1cIikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwcm92aWRlckxpc3QucHVzaChuZXcgcHJvdmlkZXJzLkNsb3VkZmxhcmVQcm92aWRlcihuZXR3b3JrKSk7XG4gICAgICAgICAgICB9IGNhdGNoKGVycm9yKSB7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm92aWRlcnMuQW5rclByb3ZpZGVyICYmIG9wdGlvbnMuYW5rciAhPT0gXCItXCIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2tpcCA9IFsgXCJyb3BzdGVuXCIgXTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBwcm92aWRlcnMuQW5rclByb3ZpZGVyKG5ldHdvcmssIG9wdGlvbnMuYW5rcik7XG4gICAgICAgICAgICAgICAgaWYgKHByb3ZpZGVyLm5ldHdvcmsgJiYgc2tpcC5pbmRleE9mKHByb3ZpZGVyLm5ldHdvcmsubmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyTGlzdC5wdXNoKHByb3ZpZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoKGVycm9yKSB7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm92aWRlckxpc3QubGVuZ3RoID09PSAwKSB7IHJldHVybiBudWxsOyB9XG5cbiAgICAgICAgaWYgKHByb3ZpZGVycy5GYWxsYmFja1Byb3ZpZGVyKSB7XG4gICAgICAgICAgICBsZXQgcXVvcnVtID0gMTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnF1b3J1bSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcXVvcnVtID0gb3B0aW9ucy5xdW9ydW07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5ldHdvcmsgPT09IFwiaG9tZXN0ZWFkXCIpIHtcbiAgICAgICAgICAgICAgICBxdW9ydW0gPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBwcm92aWRlcnMuRmFsbGJhY2tQcm92aWRlcihwcm92aWRlckxpc3QsIHF1b3J1bSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHJvdmlkZXJMaXN0WzBdO1xuICAgIH07XG5cbiAgICBmdW5jLnJlbmV0d29yayA9IGZ1bmN0aW9uKG5ldHdvcms6IE5ldHdvcmspIHtcbiAgICAgICAgcmV0dXJuIGV0aERlZmF1bHRQcm92aWRlcihuZXR3b3JrKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZ1bmM7XG59XG5cbmZ1bmN0aW9uIGV0Y0RlZmF1bHRQcm92aWRlcih1cmw6IHN0cmluZywgbmV0d29yazogc3RyaW5nIHwgTmV0d29yayk6IFJlbmV0d29ya2FibGUge1xuICAgIGNvbnN0IGZ1bmMgPSBmdW5jdGlvbihwcm92aWRlcnM6IGFueSwgb3B0aW9ucz86IGFueSk6IGFueSB7XG4gICAgICAgIGlmIChwcm92aWRlcnMuSnNvblJwY1Byb3ZpZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHByb3ZpZGVycy5Kc29uUnBjUHJvdmlkZXIodXJsLCBuZXR3b3JrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICBmdW5jLnJlbmV0d29yayA9IGZ1bmN0aW9uKG5ldHdvcms6IE5ldHdvcmspIHtcbiAgICAgICAgcmV0dXJuIGV0Y0RlZmF1bHRQcm92aWRlcih1cmwsIG5ldHdvcmspO1xuICAgIH07XG5cbiAgICByZXR1cm4gZnVuYztcbn1cblxuY29uc3QgaG9tZXN0ZWFkOiBOZXR3b3JrID0ge1xuICAgIGNoYWluSWQ6IDEsXG4gICAgZW5zQWRkcmVzczogXCIweDAwMDAwMDAwMDAwQzJFMDc0ZUM2OUEwZEZiMjk5N0JBNkM3ZDJlMWVcIixcbiAgICBuYW1lOiBcImhvbWVzdGVhZFwiLFxuICAgIF9kZWZhdWx0UHJvdmlkZXI6IGV0aERlZmF1bHRQcm92aWRlcihcImhvbWVzdGVhZFwiKVxufTtcblxuY29uc3Qgcm9wc3RlbjogTmV0d29yayA9IHtcbiAgICBjaGFpbklkOiAzLFxuICAgIGVuc0FkZHJlc3M6IFwiMHgwMDAwMDAwMDAwMEMyRTA3NGVDNjlBMGRGYjI5OTdCQTZDN2QyZTFlXCIsXG4gICAgbmFtZTogXCJyb3BzdGVuXCIsXG4gICAgX2RlZmF1bHRQcm92aWRlcjogZXRoRGVmYXVsdFByb3ZpZGVyKFwicm9wc3RlblwiKVxufTtcblxuY29uc3QgY2xhc3NpY01vcmRvcjogTmV0d29yayA9IHtcbiAgICBjaGFpbklkOiA2MyxcbiAgICBuYW1lOiBcImNsYXNzaWNNb3Jkb3JcIixcbiAgICBfZGVmYXVsdFByb3ZpZGVyOiBldGNEZWZhdWx0UHJvdmlkZXIoXCJodHRwczovL3d3dy5ldGhlcmNsdXN0ZXIuY29tL21vcmRvclwiLCBcImNsYXNzaWNNb3Jkb3JcIilcbn07XG5cbi8vIFNlZTogaHR0cHM6Ly9jaGFpbmxpc3Qub3JnXG5jb25zdCBuZXR3b3JrczogeyBbbmFtZTogc3RyaW5nXTogTmV0d29yayB9ID0ge1xuICAgIHVuc3BlY2lmaWVkOiB7IGNoYWluSWQ6IDAsIG5hbWU6IFwidW5zcGVjaWZpZWRcIiB9LFxuXG4gICAgaG9tZXN0ZWFkOiBob21lc3RlYWQsXG4gICAgbWFpbm5ldDogaG9tZXN0ZWFkLFxuXG4gICAgbW9yZGVuOiB7IGNoYWluSWQ6IDIsIG5hbWU6IFwibW9yZGVuXCIgfSxcblxuICAgIHJvcHN0ZW46IHJvcHN0ZW4sXG4gICAgdGVzdG5ldDogcm9wc3RlbixcblxuICAgIHJpbmtlYnk6IHtcbiAgICAgICAgY2hhaW5JZDogNCxcbiAgICAgICAgZW5zQWRkcmVzczogXCIweDAwMDAwMDAwMDAwQzJFMDc0ZUM2OUEwZEZiMjk5N0JBNkM3ZDJlMWVcIixcbiAgICAgICAgbmFtZTogXCJyaW5rZWJ5XCIsXG4gICAgICAgIF9kZWZhdWx0UHJvdmlkZXI6IGV0aERlZmF1bHRQcm92aWRlcihcInJpbmtlYnlcIilcbiAgICB9LFxuXG4gICAga292YW46IHtcbiAgICAgICAgY2hhaW5JZDogNDIsXG4gICAgICAgIG5hbWU6IFwia292YW5cIixcbiAgICAgICAgX2RlZmF1bHRQcm92aWRlcjogZXRoRGVmYXVsdFByb3ZpZGVyKFwia292YW5cIilcbiAgICB9LFxuXG4gICAgZ29lcmxpOiB7XG4gICAgICAgIGNoYWluSWQ6IDUsXG4gICAgICAgIGVuc0FkZHJlc3M6IFwiMHgwMDAwMDAwMDAwMEMyRTA3NGVDNjlBMGRGYjI5OTdCQTZDN2QyZTFlXCIsXG4gICAgICAgIG5hbWU6IFwiZ29lcmxpXCIsXG4gICAgICAgIF9kZWZhdWx0UHJvdmlkZXI6IGV0aERlZmF1bHRQcm92aWRlcihcImdvZXJsaVwiKVxuICAgIH0sXG5cbiAgICBraW50c3VnaTogeyBjaGFpbklkOiAxMzM3NzAyLCBuYW1lOiBcImtpbnRzdWdpXCIgfSxcblxuXG4gICAgLy8gRVRDIChTZWU6ICMzNTEpXG4gICAgY2xhc3NpYzoge1xuICAgICAgICBjaGFpbklkOiA2MSxcbiAgICAgICAgbmFtZTogXCJjbGFzc2ljXCIsXG4gICAgICAgIF9kZWZhdWx0UHJvdmlkZXI6IGV0Y0RlZmF1bHRQcm92aWRlcihcImh0dHBzOi9cXC93d3cuZXRoZXJjbHVzdGVyLmNvbS9ldGNcIiwgXCJjbGFzc2ljXCIpXG4gICAgfSxcblxuICAgIGNsYXNzaWNNb3JkZW46IHsgY2hhaW5JZDogNjIsIG5hbWU6IFwiY2xhc3NpY01vcmRlblwiIH0sXG5cbiAgICBjbGFzc2ljTW9yZG9yOiBjbGFzc2ljTW9yZG9yLFxuICAgIGNsYXNzaWNUZXN0bmV0OiBjbGFzc2ljTW9yZG9yLFxuXG4gICAgY2xhc3NpY0tvdHRpOiB7XG4gICAgICAgIGNoYWluSWQ6IDYsXG4gICAgICAgIG5hbWU6IFwiY2xhc3NpY0tvdHRpXCIsXG4gICAgICAgIF9kZWZhdWx0UHJvdmlkZXI6IGV0Y0RlZmF1bHRQcm92aWRlcihcImh0dHBzOi9cXC93d3cuZXRoZXJjbHVzdGVyLmNvbS9rb3R0aVwiLCBcImNsYXNzaWNLb3R0aVwiKVxuICAgIH0sXG5cbiAgICB4ZGFpOiB7IGNoYWluSWQ6IDEwMCwgbmFtZTogXCJ4ZGFpXCIgfSxcblxuICAgIG1hdGljOiB7XG4gICAgICAgIGNoYWluSWQ6IDEzNyxcbiAgICAgICAgbmFtZTogXCJtYXRpY1wiLFxuICAgICAgICBfZGVmYXVsdFByb3ZpZGVyOiBldGhEZWZhdWx0UHJvdmlkZXIoXCJtYXRpY1wiKVxuICAgIH0sXG4gICAgbWF0aWNtdW06IHsgY2hhaW5JZDogODAwMDEsIG5hbWU6IFwibWF0aWNtdW1cIiB9LFxuXG4gICAgb3B0aW1pc206IHtcbiAgICAgICAgY2hhaW5JZDogMTAsXG4gICAgICAgIG5hbWU6IFwib3B0aW1pc21cIixcbiAgICAgICAgX2RlZmF1bHRQcm92aWRlcjogZXRoRGVmYXVsdFByb3ZpZGVyKFwib3B0aW1pc21cIilcbiAgICB9LFxuICAgIFwib3B0aW1pc20ta292YW5cIjogeyBjaGFpbklkOiA2OSwgbmFtZTogXCJvcHRpbWlzbS1rb3ZhblwiIH0sXG4gICAgXCJvcHRpbWlzbS1nb2VybGlcIjogeyBjaGFpbklkOiA0MjAsIG5hbWU6IFwib3B0aW1pc20tZ29lcmxpXCIgfSxcblxuICAgIGFyYml0cnVtOiB7IGNoYWluSWQ6IDQyMTYxLCBuYW1lOiBcImFyYml0cnVtXCIgfSxcbiAgICBcImFyYml0cnVtLXJpbmtlYnlcIjogeyBjaGFpbklkOiA0MjE2MTEsIG5hbWU6IFwiYXJiaXRydW0tcmlua2VieVwiIH0sXG4gICAgXCJhcmJpdHJ1bS1nb2VybGlcIjogeyBjaGFpbklkOiA0MjE2MTMsIG5hbWU6IFwiYXJiaXRydW0tZ29lcmxpXCIgfSxcblxuICAgIGJuYjogeyBjaGFpbklkOiA1NiwgbmFtZTogXCJibmJcIiB9LFxuICAgIGJuYnQ6IHsgY2hhaW5JZDogOTcsIG5hbWU6IFwiYm5idFwiIH0sXG59XG5cbi8qKlxuICogIGdldE5ldHdvcmtcbiAqXG4gKiAgQ29udmVydHMgYSBuYW1lZCBjb21tb24gbmV0d29ya3Mgb3IgY2hhaW4gSUQgKG5ldHdvcmsgSUQpIHRvIGEgTmV0d29ya1xuICogIGFuZCB2ZXJpZmllcyBhIG5ldHdvcmsgaXMgYSB2YWxpZCBOZXR3b3JrLi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE5ldHdvcmsobmV0d29yazogTmV0d29ya2lzaCk6IE5ldHdvcmsge1xuICAgIC8vIE5vIG5ldHdvcmsgKG51bGwpXG4gICAgaWYgKG5ldHdvcmsgPT0gbnVsbCkgeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgaWYgKHR5cGVvZihuZXR3b3JrKSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gbmV0d29ya3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YW5kYXJkID0gbmV0d29ya3NbbmFtZV07XG4gICAgICAgICAgICBpZiAoc3RhbmRhcmQuY2hhaW5JZCA9PT0gbmV0d29yaykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHN0YW5kYXJkLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGNoYWluSWQ6IHN0YW5kYXJkLmNoYWluSWQsXG4gICAgICAgICAgICAgICAgICAgIGVuc0FkZHJlc3M6IChzdGFuZGFyZC5lbnNBZGRyZXNzIHx8IG51bGwpLFxuICAgICAgICAgICAgICAgICAgICBfZGVmYXVsdFByb3ZpZGVyOiAoc3RhbmRhcmQuX2RlZmF1bHRQcm92aWRlciB8fCBudWxsKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2hhaW5JZDogbmV0d29yayxcbiAgICAgICAgICAgIG5hbWU6IFwidW5rbm93blwiXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZihuZXR3b3JrKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBzdGFuZGFyZCA9IG5ldHdvcmtzW25ldHdvcmtdO1xuICAgICAgICBpZiAoc3RhbmRhcmQgPT0gbnVsbCkgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogc3RhbmRhcmQubmFtZSxcbiAgICAgICAgICAgIGNoYWluSWQ6IHN0YW5kYXJkLmNoYWluSWQsXG4gICAgICAgICAgICBlbnNBZGRyZXNzOiBzdGFuZGFyZC5lbnNBZGRyZXNzLFxuICAgICAgICAgICAgX2RlZmF1bHRQcm92aWRlcjogKHN0YW5kYXJkLl9kZWZhdWx0UHJvdmlkZXIgfHwgbnVsbClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCBzdGFuZGFyZCAgPSBuZXR3b3Jrc1tuZXR3b3JrLm5hbWVdO1xuXG4gICAgLy8gTm90IGEgc3RhbmRhcmQgbmV0d29yazsgY2hlY2sgdGhhdCBpdCBpcyBhIHZhbGlkIG5ldHdvcmsgaW4gZ2VuZXJhbFxuICAgIGlmICghc3RhbmRhcmQpIHtcbiAgICAgICAgaWYgKHR5cGVvZihuZXR3b3JrLmNoYWluSWQpICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBuZXR3b3JrIGNoYWluSWRcIiwgXCJuZXR3b3JrXCIsIG5ldHdvcmspO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXR3b3JrO1xuICAgIH1cblxuICAgIC8vIE1ha2Ugc3VyZSB0aGUgY2hhaW5JZCBtYXRjaGVzIHRoZSBleHBlY3RlZCBuZXR3b3JrIGNoYWluSWQgKG9yIGlzIDA7IGRpc2FibGUgRUlQLTE1NSlcbiAgICBpZiAobmV0d29yay5jaGFpbklkICE9PSAwICYmIG5ldHdvcmsuY2hhaW5JZCAhPT0gc3RhbmRhcmQuY2hhaW5JZCkge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwibmV0d29yayBjaGFpbklkIG1pc21hdGNoXCIsIFwibmV0d29ya1wiLCBuZXR3b3JrKTtcbiAgICB9XG5cbiAgICAvLyBAVE9ETzogSW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBhZGQgYW4gYXR0YWNoIGZ1bmN0aW9uIHRvIGEgZGVmYXVsdFByb3ZpZGVyXG4gICAgLy8gY2xhc3MgYW5kIG1vdmUgdGhlIF9kZWZhdWx0UHJvdmlkZXIgaW50ZXJuYWwgdG8gdGhpcyBmaWxlIChleHRlbmQgTmV0d29yaylcbiAgICBsZXQgZGVmYXVsdFByb3ZpZGVyOiBEZWZhdWx0UHJvdmlkZXJGdW5jID0gbmV0d29yay5fZGVmYXVsdFByb3ZpZGVyIHx8IG51bGw7XG4gICAgaWYgKGRlZmF1bHRQcm92aWRlciA9PSBudWxsICYmIHN0YW5kYXJkLl9kZWZhdWx0UHJvdmlkZXIpIHtcbiAgICAgICAgaWYgKGlzUmVuZXR3b3JrYWJsZShzdGFuZGFyZC5fZGVmYXVsdFByb3ZpZGVyKSkge1xuICAgICAgICAgICAgZGVmYXVsdFByb3ZpZGVyID0gc3RhbmRhcmQuX2RlZmF1bHRQcm92aWRlci5yZW5ldHdvcmsobmV0d29yayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWZhdWx0UHJvdmlkZXIgPSBzdGFuZGFyZC5fZGVmYXVsdFByb3ZpZGVyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gU3RhbmRhcmQgTmV0d29yayAoYWxsb3cgb3ZlcnJpZGluZyB0aGUgRU5TIGFkZHJlc3MpXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogbmV0d29yay5uYW1lLFxuICAgICAgICBjaGFpbklkOiBzdGFuZGFyZC5jaGFpbklkLFxuICAgICAgICBlbnNBZGRyZXNzOiAobmV0d29yay5lbnNBZGRyZXNzIHx8IHN0YW5kYXJkLmVuc0FkZHJlc3MgfHwgbnVsbCksXG4gICAgICAgIF9kZWZhdWx0UHJvdmlkZXI6IGRlZmF1bHRQcm92aWRlclxuICAgIH07XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZGVjb2RlIGFzIGJhc2U2NERlY29kZSwgZW5jb2RlIGFzIGJhc2U2NEVuY29kZSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iYXNlNjRcIjtcbmltcG9ydCB7IGhleGxpZnksIGlzQnl0ZXNMaWtlIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBzaGFsbG93Q29weSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyB0b1V0ZjhCeXRlcywgdG9VdGY4U3RyaW5nIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3N0cmluZ3NcIjtcblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuXG5pbXBvcnQgeyBnZXRVcmwsIEdldFVybFJlc3BvbnNlLCBPcHRpb25zIH0gZnJvbSBcIi4vZ2V0dXJsXCI7XG5cbmZ1bmN0aW9uIHN0YWxsZXIoZHVyYXRpb246IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIGR1cmF0aW9uKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYm9keWlmeSh2YWx1ZTogYW55LCB0eXBlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7IHJldHVybiBudWxsOyB9XG5cbiAgICBpZiAodHlwZW9mKHZhbHVlKSA9PT0gXCJzdHJpbmdcIikgeyByZXR1cm4gdmFsdWU7IH1cblxuICAgIGlmIChpc0J5dGVzTGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKHR5cGUgJiYgKHR5cGUuc3BsaXQoXCIvXCIpWzBdID09PSBcInRleHRcIiB8fCB0eXBlLnNwbGl0KFwiO1wiKVswXS50cmltKCkgPT09IFwiYXBwbGljYXRpb24vanNvblwiKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9VdGY4U3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhleGxpZnkodmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuLy8gRXhwb3J0ZWQgVHlwZXNcbmV4cG9ydCB0eXBlIENvbm5lY3Rpb25JbmZvID0ge1xuICAgIHVybDogc3RyaW5nLFxuICAgIGhlYWRlcnM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IG51bWJlciB9XG5cbiAgICB1c2VyPzogc3RyaW5nLFxuICAgIHBhc3N3b3JkPzogc3RyaW5nLFxuXG4gICAgYWxsb3dJbnNlY3VyZUF1dGhlbnRpY2F0aW9uPzogYm9vbGVhbixcbiAgICBhbGxvd0d6aXA/OiBib29sZWFuLFxuXG4gICAgdGhyb3R0bGVMaW1pdD86IG51bWJlcixcbiAgICB0aHJvdHRsZVNsb3RJbnRlcnZhbD86IG51bWJlcjtcbiAgICB0aHJvdHRsZUNhbGxiYWNrPzogKGF0dGVtcHQ6IG51bWJlciwgdXJsOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj4sXG5cbiAgICBza2lwRmV0Y2hTZXR1cD86IGJvb2xlYW47XG4gICAgZmV0Y2hPcHRpb25zPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgICBlcnJvclBhc3NUaHJvdWdoPzogYm9vbGVhbjtcblxuICAgIHRpbWVvdXQ/OiBudW1iZXIsXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIE9uY2VCbG9ja2FibGUge1xuICAgIG9uY2UoZXZlbnROYW1lOiBcImJsb2NrXCIsIGhhbmRsZXI6ICgpID0+IHZvaWQpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9uY2VQb2xsYWJsZSB7XG4gICAgb25jZShldmVudE5hbWU6IFwicG9sbFwiLCBoYW5kbGVyOiAoKSA9PiB2b2lkKTogdm9pZDtcbn1cblxuZXhwb3J0IHR5cGUgUG9sbE9wdGlvbnMgPSB7XG4gICAgdGltZW91dD86IG51bWJlcixcbiAgICBmbG9vcj86IG51bWJlcixcbiAgICBjZWlsaW5nPzogbnVtYmVyLFxuICAgIGludGVydmFsPzogbnVtYmVyLFxuICAgIHJldHJ5TGltaXQ/OiBudW1iZXIsXG4gICAgb25jZUJsb2NrPzogT25jZUJsb2NrYWJsZVxuICAgIG9uY2VQb2xsPzogT25jZVBvbGxhYmxlXG59O1xuXG5leHBvcnQgdHlwZSBGZXRjaEpzb25SZXNwb25zZSA9IHtcbiAgICBzdGF0dXNDb2RlOiBudW1iZXI7XG4gICAgaGVhZGVyczogeyBbIGhlYWRlcjogc3RyaW5nIF06IHN0cmluZyB9O1xufTtcblxuXG50eXBlIEhlYWRlciA9IHsga2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfTtcblxuLy8gVGhpcyBBUEkgaXMgc3RpbGwgYSB3b3JrIGluIHByb2dyZXNzOyB0aGUgZnV0dXJlIGNoYW5nZXMgd2lsbCBsaWtlbHkgYmU6XG4vLyAtIENvbm5lY3Rpb25JbmZvID0+IEZldGNoRGF0YVJlcXVlc3Q8VCA9IGFueT5cbi8vIC0gRmV0Y2hEYXRhUmVxdWVzdC5ib2R5PyA9IHN0cmluZyB8IFVpbnQ4QXJyYXkgfCB7IGNvbnRlbnRUeXBlOiBzdHJpbmcsIGRhdGE6IHN0cmluZyB8IFVpbnQ4QXJyYXkgfVxuLy8gICAtIElmIHN0cmluZyA9PiB0ZXh0L3BsYWluLCBVaW50OEFycmF5ID0+IGFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSAoaWYgY29udGVudC10eXBlIHVuc3BlY2lmaWVkKVxuLy8gLSBGZXRjaERhdGFSZXF1ZXN0LnByb2Nlc3NGdW5jID0gKGJvZHk6IFVpbnQ4QXJyYXksIHJlc3BvbnNlOiBGZXRjaERhdGFSZXNwb25zZSkgPT4gVFxuLy8gRm9yIHRoaXMgcmVhc29uLCBpdCBzaG91bGQgYmUgY29uc2lkZXJlZCBpbnRlcm5hbCB1bnRpbCB0aGUgQVBJIGlzIGZpbmFsaXplZFxuZXhwb3J0IGZ1bmN0aW9uIF9mZXRjaERhdGE8VCA9IFVpbnQ4QXJyYXk+KGNvbm5lY3Rpb246IHN0cmluZyB8IENvbm5lY3Rpb25JbmZvLCBib2R5PzogVWludDhBcnJheSwgcHJvY2Vzc0Z1bmM/OiAodmFsdWU6IFVpbnQ4QXJyYXksIHJlc3BvbnNlOiBGZXRjaEpzb25SZXNwb25zZSkgPT4gVCk6IFByb21pc2U8VD4ge1xuXG4gICAgLy8gSG93IG1hbnkgdGltZXMgdG8gcmV0cnkgaW4gdGhlIGV2ZW50IG9mIGEgdGhyb3R0bGVcbiAgICBjb25zdCBhdHRlbXB0TGltaXQgPSAodHlwZW9mKGNvbm5lY3Rpb24pID09PSBcIm9iamVjdFwiICYmIGNvbm5lY3Rpb24udGhyb3R0bGVMaW1pdCAhPSBudWxsKSA/IGNvbm5lY3Rpb24udGhyb3R0bGVMaW1pdDogMTI7XG4gICAgbG9nZ2VyLmFzc2VydEFyZ3VtZW50KChhdHRlbXB0TGltaXQgPiAwICYmIChhdHRlbXB0TGltaXQgJSAxKSA9PT0gMCksXG4gICAgICAgIFwiaW52YWxpZCBjb25uZWN0aW9uIHRocm90dGxlIGxpbWl0XCIsIFwiY29ubmVjdGlvbi50aHJvdHRsZUxpbWl0XCIsIGF0dGVtcHRMaW1pdCk7XG5cbiAgICBjb25zdCB0aHJvdHRsZUNhbGxiYWNrID0gKCh0eXBlb2YoY29ubmVjdGlvbikgPT09IFwib2JqZWN0XCIpID8gY29ubmVjdGlvbi50aHJvdHRsZUNhbGxiYWNrOiBudWxsKTtcbiAgICBjb25zdCB0aHJvdHRsZVNsb3RJbnRlcnZhbCA9ICgodHlwZW9mKGNvbm5lY3Rpb24pID09PSBcIm9iamVjdFwiICYmIHR5cGVvZihjb25uZWN0aW9uLnRocm90dGxlU2xvdEludGVydmFsKSA9PT0gXCJudW1iZXJcIikgPyBjb25uZWN0aW9uLnRocm90dGxlU2xvdEludGVydmFsOiAxMDApO1xuICAgIGxvZ2dlci5hc3NlcnRBcmd1bWVudCgodGhyb3R0bGVTbG90SW50ZXJ2YWwgPiAwICYmICh0aHJvdHRsZVNsb3RJbnRlcnZhbCAlIDEpID09PSAwKSxcbiAgICAgICAgXCJpbnZhbGlkIGNvbm5lY3Rpb24gdGhyb3R0bGUgc2xvdCBpbnRlcnZhbFwiLCBcImNvbm5lY3Rpb24udGhyb3R0bGVTbG90SW50ZXJ2YWxcIiwgdGhyb3R0bGVTbG90SW50ZXJ2YWwpO1xuXG4gICAgY29uc3QgZXJyb3JQYXNzVGhyb3VnaCA9ICgodHlwZW9mKGNvbm5lY3Rpb24pID09PSBcIm9iamVjdFwiKSA/ICEhKGNvbm5lY3Rpb24uZXJyb3JQYXNzVGhyb3VnaCk6IGZhbHNlKTtcblxuICAgIGNvbnN0IGhlYWRlcnM6IHsgW2tleTogc3RyaW5nXTogSGVhZGVyIH0gPSB7IH07XG5cbiAgICBsZXQgdXJsOiBzdHJpbmcgPSBudWxsO1xuXG4gICAgLy8gQFRPRE86IEFsbG93IENvbm5lY3Rpb25JbmZvIHRvIG92ZXJyaWRlIHNvbWUgb2YgdGhlc2UgdmFsdWVzXG4gICAgY29uc3Qgb3B0aW9uczogT3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgIH07XG5cbiAgICBsZXQgYWxsb3czMDQgPSBmYWxzZTtcblxuICAgIGxldCB0aW1lb3V0ID0gMiAqIDYwICogMTAwMDtcblxuICAgIGlmICh0eXBlb2YoY29ubmVjdGlvbikgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdXJsID0gY29ubmVjdGlvbjtcblxuICAgIH0gZWxzZSBpZiAodHlwZW9mKGNvbm5lY3Rpb24pID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGlmIChjb25uZWN0aW9uID09IG51bGwgfHwgY29ubmVjdGlvbi51cmwgPT0gbnVsbCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcIm1pc3NpbmcgVVJMXCIsIFwiY29ubmVjdGlvbi51cmxcIiwgY29ubmVjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICB1cmwgPSBjb25uZWN0aW9uLnVybDtcblxuICAgICAgICBpZiAodHlwZW9mKGNvbm5lY3Rpb24udGltZW91dCkgPT09IFwibnVtYmVyXCIgJiYgY29ubmVjdGlvbi50aW1lb3V0ID4gMCkge1xuICAgICAgICAgICAgdGltZW91dCA9IGNvbm5lY3Rpb24udGltZW91dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25uZWN0aW9uLmhlYWRlcnMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGNvbm5lY3Rpb24uaGVhZGVycykge1xuICAgICAgICAgICAgICAgIGhlYWRlcnNba2V5LnRvTG93ZXJDYXNlKCldID0geyBrZXk6IGtleSwgdmFsdWU6IFN0cmluZyhjb25uZWN0aW9uLmhlYWRlcnNba2V5XSkgfTtcbiAgICAgICAgICAgICAgICBpZiAoW1wiaWYtbm9uZS1tYXRjaFwiLCBcImlmLW1vZGlmaWVkLXNpbmNlXCJdLmluZGV4T2Yoa2V5LnRvTG93ZXJDYXNlKCkpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3czMDQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMuYWxsb3dHemlwID0gISFjb25uZWN0aW9uLmFsbG93R3ppcDtcblxuICAgICAgICBpZiAoY29ubmVjdGlvbi51c2VyICE9IG51bGwgJiYgY29ubmVjdGlvbi5wYXNzd29yZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodXJsLnN1YnN0cmluZygwLCA2KSAhPT0gXCJodHRwczpcIiAmJiBjb25uZWN0aW9uLmFsbG93SW5zZWN1cmVBdXRoZW50aWNhdGlvbiAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFxuICAgICAgICAgICAgICAgICAgICBcImJhc2ljIGF1dGhlbnRpY2F0aW9uIHJlcXVpcmVzIGEgc2VjdXJlIGh0dHBzIHVybFwiLFxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuZXJyb3JzLklOVkFMSURfQVJHVU1FTlQsXG4gICAgICAgICAgICAgICAgICAgIHsgYXJndW1lbnQ6IFwidXJsXCIsIHVybDogdXJsLCB1c2VyOiBjb25uZWN0aW9uLnVzZXIsIHBhc3N3b3JkOiBcIltSRURBQ1RFRF1cIiB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgYXV0aG9yaXphdGlvbiA9IGNvbm5lY3Rpb24udXNlciArIFwiOlwiICsgY29ubmVjdGlvbi5wYXNzd29yZDtcbiAgICAgICAgICAgIGhlYWRlcnNbXCJhdXRob3JpemF0aW9uXCJdID0ge1xuICAgICAgICAgICAgICAgIGtleTogXCJBdXRob3JpemF0aW9uXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IFwiQmFzaWMgXCIgKyBiYXNlNjRFbmNvZGUodG9VdGY4Qnl0ZXMoYXV0aG9yaXphdGlvbikpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbm5lY3Rpb24uc2tpcEZldGNoU2V0dXAgIT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0aW9ucy5za2lwRmV0Y2hTZXR1cCA9ICEhY29ubmVjdGlvbi5za2lwRmV0Y2hTZXR1cDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25uZWN0aW9uLmZldGNoT3B0aW9ucyAhPSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb25zLmZldGNoT3B0aW9ucyA9IHNoYWxsb3dDb3B5KGNvbm5lY3Rpb24uZmV0Y2hPcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJlRGF0YSA9IG5ldyBSZWdFeHAoXCJeZGF0YTooW2EtejAtOS1dKy9bYS16MC05LV0rKTtiYXNlNjQsKC4qKSRcIiwgXCJpXCIpO1xuICAgIGNvbnN0IGRhdGFNYXRjaCA9ICgodXJsKSA/IHVybC5tYXRjaChyZURhdGEpOiBudWxsKTtcbiAgICBpZiAoZGF0YU1hdGNoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgICAgICAgICAgc3RhdHVzTWVzc2FnZTogXCJPS1wiLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgXCJjb250ZW50LXR5cGVcIjogZGF0YU1hdGNoWzFdIH0sXG4gICAgICAgICAgICAgICAgYm9keTogYmFzZTY0RGVjb2RlKGRhdGFNYXRjaFsyXSlcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxldCByZXN1bHQ6IFQgPSA8VD48dW5rbm93bj5yZXNwb25zZS5ib2R5O1xuICAgICAgICAgICAgaWYgKHByb2Nlc3NGdW5jKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcHJvY2Vzc0Z1bmMocmVzcG9uc2UuYm9keSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSg8VD48dW5rbm93bj5yZXN1bHQpO1xuXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcInByb2Nlc3NpbmcgcmVzcG9uc2UgZXJyb3JcIiwgTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1IsIHtcbiAgICAgICAgICAgICAgICBib2R5OiBib2R5aWZ5KGRhdGFNYXRjaFsxXSwgZGF0YU1hdGNoWzJdKSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgICAgICAgcmVxdWVzdEJvZHk6IG51bGwsXG4gICAgICAgICAgICAgICAgcmVxdWVzdE1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYm9keSkge1xuICAgICAgICBvcHRpb25zLm1ldGhvZCA9IFwiUE9TVFwiO1xuICAgICAgICBvcHRpb25zLmJvZHkgPSBib2R5O1xuICAgICAgICBpZiAoaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzW1wiY29udGVudC10eXBlXCJdID0geyBrZXk6IFwiQ29udGVudC1UeXBlXCIsIHZhbHVlOiBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhlYWRlcnNbXCJjb250ZW50LWxlbmd0aFwiXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzW1wiY29udGVudC1sZW5ndGhcIl0gPSB7IGtleTogXCJDb250ZW50LUxlbmd0aFwiLCB2YWx1ZTogU3RyaW5nKGJvZHkubGVuZ3RoKSB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZmxhdEhlYWRlcnM6IHsgWyBrZXk6IHN0cmluZyBdOiBzdHJpbmcgfSA9IHsgfTtcbiAgICBPYmplY3Qua2V5cyhoZWFkZXJzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgY29uc3QgaGVhZGVyID0gaGVhZGVyc1trZXldO1xuICAgICAgICBmbGF0SGVhZGVyc1toZWFkZXIua2V5XSA9IGhlYWRlci52YWx1ZTtcbiAgICB9KTtcbiAgICBvcHRpb25zLmhlYWRlcnMgPSBmbGF0SGVhZGVycztcblxuICAgIGNvbnN0IHJ1bm5pbmdUaW1lb3V0ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgdGltZXI6IE5vZGVKUy5UaW1lciA9IG51bGw7XG4gICAgICAgIGNvbnN0IHByb21pc2U6IFByb21pc2U8bmV2ZXI+ID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBpZiAodGltZW91dCkge1xuICAgICAgICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lciA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgICAgICAgICB0aW1lciA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGxvZ2dlci5tYWtlRXJyb3IoXCJ0aW1lb3V0XCIsIExvZ2dlci5lcnJvcnMuVElNRU9VVCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEJvZHk6IGJvZHlpZnkob3B0aW9ucy5ib2R5LCBmbGF0SGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSksXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0TWV0aG9kOiBvcHRpb25zLm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRpbWVyID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgcHJvbWlzZSwgY2FuY2VsIH07XG4gICAgfSkoKTtcblxuICAgIGNvbnN0IHJ1bm5pbmdGZXRjaCA9IChhc3luYyBmdW5jdGlvbigpIHtcblxuICAgICAgICBmb3IgKGxldCBhdHRlbXB0ID0gMDsgYXR0ZW1wdCA8IGF0dGVtcHRMaW1pdDsgYXR0ZW1wdCsrKSB7XG4gICAgICAgICAgICBsZXQgcmVzcG9uc2U6IEdldFVybFJlc3BvbnNlID0gbnVsbDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IGdldFVybCh1cmwsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGF0dGVtcHQgPCBhdHRlbXB0TGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDMwMSB8fCByZXNwb25zZS5zdGF0dXNDb2RlID09PSAzMDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlZGlyZWN0aW9uOyBmb3Igbm93IHdlIG9ubHkgc3VwcG9ydCBhYnNvbHV0ZSBsb2NhdGFpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHJlc3BvbnNlLmhlYWRlcnMubG9jYXRpb24gfHwgXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm1ldGhvZCA9PT0gXCJHRVRcIiAmJiBsb2NhdGlvbi5tYXRjaCgvXmh0dHBzOi8pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gcmVzcG9uc2UuaGVhZGVycy5sb2NhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDQyOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXhwb25lbnRpYWwgYmFjay1vZmYgdGhyb3R0bGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRyeUFnYWluID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aHJvdHRsZUNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5QWdhaW4gPSBhd2FpdCB0aHJvdHRsZUNhbGxiYWNrKGF0dGVtcHQsIHVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cnlBZ2Fpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdGFsbCA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXRyeUFmdGVyID0gcmVzcG9uc2UuaGVhZGVyc1tcInJldHJ5LWFmdGVyXCJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YocmV0cnlBZnRlcikgPT09IFwic3RyaW5nXCIgJiYgcmV0cnlBZnRlci5tYXRjaCgvXlsxLTldWzAtOV0qJC8pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWxsID0gcGFyc2VJbnQocmV0cnlBZnRlcikgKiAxMDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWxsID0gdGhyb3R0bGVTbG90SW50ZXJ2YWwgKiBwYXJzZUludChTdHJpbmcoTWF0aC5yYW5kb20oKSAqIE1hdGgucG93KDIsIGF0dGVtcHQpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIlN0YWxsaW5nIDQyOVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBzdGFsbGVyKHN0YWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9ICg8YW55PmVycm9yKS5yZXNwb25zZTtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBydW5uaW5nVGltZW91dC5jYW5jZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJtaXNzaW5nIHJlc3BvbnNlXCIsIExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Qm9keTogYm9keWlmeShvcHRpb25zLmJvZHksIGZsYXRIZWFkZXJzW1wiY29udGVudC10eXBlXCJdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RNZXRob2Q6IG9wdGlvbnMubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmVyRXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGxldCBib2R5ID0gcmVzcG9uc2UuYm9keTtcblxuICAgICAgICAgICAgaWYgKGFsbG93MzA0ICYmIHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDMwNCkge1xuICAgICAgICAgICAgICAgIGJvZHkgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghZXJyb3JQYXNzVGhyb3VnaCAmJiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA8IDIwMCB8fCByZXNwb25zZS5zdGF0dXNDb2RlID49IDMwMCkpIHtcbiAgICAgICAgICAgICAgICBydW5uaW5nVGltZW91dC5jYW5jZWwoKTtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImJhZCByZXNwb25zZVwiLCBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUiwge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1c0NvZGUsXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGJvZHlpZnkoYm9keSwgKChyZXNwb25zZS5oZWFkZXJzKSA/IHJlc3BvbnNlLmhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl06IG51bGwpKSxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEJvZHk6IGJvZHlpZnkob3B0aW9ucy5ib2R5LCBmbGF0SGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSksXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RNZXRob2Q6IG9wdGlvbnMubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocHJvY2Vzc0Z1bmMpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm9jZXNzRnVuYyhib2R5LCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdUaW1lb3V0LmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWxsb3cgdGhlIHByb2Nlc3NGdW5jIHRvIHRyaWdnZXIgYSB0aHJvdHRsZVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IudGhyb3R0bGVSZXRyeSAmJiBhdHRlbXB0IDwgYXR0ZW1wdExpbWl0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHJ5QWdhaW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRocm90dGxlQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnlBZ2FpbiA9IGF3YWl0IHRocm90dGxlQ2FsbGJhY2soYXR0ZW1wdCwgdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyeUFnYWluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IHRocm90dGxlU2xvdEludGVydmFsICogcGFyc2VJbnQoU3RyaW5nKE1hdGgucmFuZG9tKCkgKiBNYXRoLnBvdygyLCBhdHRlbXB0KSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJTdGFsbGluZyBjYWxsYmFja1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBzdGFsbGVyKHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcnVubmluZ1RpbWVvdXQuY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwicHJvY2Vzc2luZyByZXNwb25zZSBlcnJvclwiLCBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogYm9keWlmeShib2R5LCAoKHJlc3BvbnNlLmhlYWRlcnMpID8gcmVzcG9uc2UuaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXTogbnVsbCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEJvZHk6IGJvZHlpZnkob3B0aW9ucy5ib2R5LCBmbGF0SGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSksXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0TWV0aG9kOiBvcHRpb25zLm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdXJsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcnVubmluZ1RpbWVvdXQuY2FuY2VsKCk7XG5cbiAgICAgICAgICAgIC8vIElmIHdlIGhhZCBhIHByb2Nlc3NGdW5jLCBpdCBlaXRoZXIgcmV0dXJuZWQgYSBUIG9yIHRocmV3IGFib3ZlLlxuICAgICAgICAgICAgLy8gVGhlIFwiYm9keVwiIGlzIG5vdyBhIFVpbnQ4QXJyYXkuXG4gICAgICAgICAgICByZXR1cm4gPFQ+KDx1bmtub3duPmJvZHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKFwiZmFpbGVkIHJlc3BvbnNlXCIsIExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLCB7XG4gICAgICAgICAgICByZXF1ZXN0Qm9keTogYm9keWlmeShvcHRpb25zLmJvZHksIGZsYXRIZWFkZXJzW1wiY29udGVudC10eXBlXCJdKSxcbiAgICAgICAgICAgIHJlcXVlc3RNZXRob2Q6IG9wdGlvbnMubWV0aG9kLFxuICAgICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgfSk7XG4gICAgfSkoKTtcblxuICAgIHJldHVybiBQcm9taXNlLnJhY2UoWyBydW5uaW5nVGltZW91dC5wcm9taXNlLCBydW5uaW5nRmV0Y2ggXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaEpzb24oY29ubmVjdGlvbjogc3RyaW5nIHwgQ29ubmVjdGlvbkluZm8sIGpzb24/OiBzdHJpbmcsIHByb2Nlc3NGdW5jPzogKHZhbHVlOiBhbnksIHJlc3BvbnNlOiBGZXRjaEpzb25SZXNwb25zZSkgPT4gYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICBsZXQgcHJvY2Vzc0pzb25GdW5jID0gKHZhbHVlOiBVaW50OEFycmF5LCByZXNwb25zZTogRmV0Y2hKc29uUmVzcG9uc2UpID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdDogYW55ID0gbnVsbDtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZSh0b1V0ZjhTdHJpbmcodmFsdWUpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJpbnZhbGlkIEpTT05cIiwgTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1IsIHtcbiAgICAgICAgICAgICAgICAgICAgYm9keTogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb2Nlc3NGdW5jKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBwcm9jZXNzRnVuYyhyZXN1bHQsIHJlc3BvbnNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgaGF2ZSBqc29uIHRvIHNlbmQsIHdlIG11c3RcbiAgICAvLyAtIGFkZCBjb250ZW50LXR5cGUgb2YgYXBwbGljYXRpb24vanNvbiAodW5sZXNzIGFscmVhZHkgb3ZlcnJpZGRlbilcbiAgICAvLyAtIGNvbnZlcnQgdGhlIGpzb24gdG8gYnl0ZXNcbiAgICBsZXQgYm9keTogVWludDhBcnJheSA9IG51bGw7XG4gICAgaWYgKGpzb24gIT0gbnVsbCkge1xuICAgICAgICBib2R5ID0gdG9VdGY4Qnl0ZXMoanNvbik7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGEgY29ubmVjdGlvbiB3aXRoIHRoZSBjb250ZW50LXR5cGUgc2V0IGZvciBKU09OXG4gICAgICAgIGNvbnN0IHVwZGF0ZWQ6IENvbm5lY3Rpb25JbmZvID0gKHR5cGVvZihjb25uZWN0aW9uKSA9PT0gXCJzdHJpbmdcIikgPyAoeyB1cmw6IGNvbm5lY3Rpb24gfSk6IHNoYWxsb3dDb3B5KGNvbm5lY3Rpb24pO1xuICAgICAgICBpZiAodXBkYXRlZC5oZWFkZXJzKSB7XG4gICAgICAgICAgICBjb25zdCBoYXNDb250ZW50VHlwZSA9IChPYmplY3Qua2V5cyh1cGRhdGVkLmhlYWRlcnMpLmZpbHRlcigoaykgPT4gKGsudG9Mb3dlckNhc2UoKSA9PT0gXCJjb250ZW50LXR5cGVcIikpLmxlbmd0aCkgIT09IDA7XG4gICAgICAgICAgICBpZiAoIWhhc0NvbnRlbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlZC5oZWFkZXJzID0gc2hhbGxvd0NvcHkodXBkYXRlZC5oZWFkZXJzKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVkLmhlYWRlcnNbXCJjb250ZW50LXR5cGVcIl0gPSBcImFwcGxpY2F0aW9uL2pzb25cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVwZGF0ZWQuaGVhZGVycyA9IHsgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25uZWN0aW9uID0gdXBkYXRlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gX2ZldGNoRGF0YTxhbnk+KGNvbm5lY3Rpb24sIGJvZHksIHByb2Nlc3NKc29uRnVuYyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb2xsPFQ+KGZ1bmM6ICgpID0+IFByb21pc2U8VD4sIG9wdGlvbnM/OiBQb2xsT3B0aW9ucyk6IFByb21pc2U8VD4ge1xuICAgIGlmICghb3B0aW9ucykgeyBvcHRpb25zID0ge307IH1cbiAgICBvcHRpb25zID0gc2hhbGxvd0NvcHkob3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuZmxvb3IgPT0gbnVsbCkgeyBvcHRpb25zLmZsb29yID0gMDsgfVxuICAgIGlmIChvcHRpb25zLmNlaWxpbmcgPT0gbnVsbCkgeyBvcHRpb25zLmNlaWxpbmcgPSAxMDAwMDsgfVxuICAgIGlmIChvcHRpb25zLmludGVydmFsID09IG51bGwpIHsgb3B0aW9ucy5pbnRlcnZhbCA9IDI1MDsgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAgIGxldCB0aW1lcjogTm9kZUpTLlRpbWVyID0gbnVsbDtcbiAgICAgICAgbGV0IGRvbmU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgICAgICAvLyBSZXR1cm5zIHRydWUgaWYgY2FuY2VsIHdhcyBzdWNjZXNzZnVsLiBVbnN1Y2Nlc3NmdWwgY2FuY2VsIG1lYW5zIHdlJ3JlIGFscmVhZHkgZG9uZS5cbiAgICAgICAgY29uc3QgY2FuY2VsID0gKCk6IGJvb2xlYW4gPT4ge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aW1lcikgeyBjbGVhclRpbWVvdXQodGltZXIpOyB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAob3B0aW9ucy50aW1lb3V0KSB7XG4gICAgICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjYW5jZWwoKSkgeyByZWplY3QobmV3IEVycm9yKFwidGltZW91dFwiKSk7IH1cbiAgICAgICAgICAgIH0sIG9wdGlvbnMudGltZW91dClcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJldHJ5TGltaXQgPSBvcHRpb25zLnJldHJ5TGltaXQ7XG5cbiAgICAgICAgbGV0IGF0dGVtcHQgPSAwO1xuICAgICAgICBmdW5jdGlvbiBjaGVjaygpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jKCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcblxuICAgICAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgYSByZXN1bHQsIG9yIGFyZSBhbGxvd2VkIG51bGwgdGhlbiB3ZSdyZSBkb25lXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYW5jZWwoKSkgeyByZXNvbHZlKHJlc3VsdCk7IH1cblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5vbmNlUG9sbCkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uY2VQb2xsLm9uY2UoXCJwb2xsXCIsIGNoZWNrKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5vbmNlQmxvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbmNlQmxvY2sub25jZShcImJsb2NrXCIsIGNoZWNrKTtcblxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgZXhwb25lbnRpYWwgYmFjay1vZmYgKHVwIHRvIDEwcykgb3VyIG5leHQgcmVxdWVzdFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0ZW1wdCsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ZW1wdCA+IHJldHJ5TGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYW5jZWwoKSkgeyByZWplY3QobmV3IEVycm9yKFwicmV0cnkgbGltaXQgcmVhY2hlZFwiKSk7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCB0aW1lb3V0ID0gb3B0aW9ucy5pbnRlcnZhbCAqIHBhcnNlSW50KFN0cmluZyhNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMiwgYXR0ZW1wdCkpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVvdXQgPCBvcHRpb25zLmZsb29yKSB7IHRpbWVvdXQgPSBvcHRpb25zLmZsb29yOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0ID4gb3B0aW9ucy5jZWlsaW5nKSB7IHRpbWVvdXQgPSBvcHRpb25zLmNlaWxpbmc7IH1cblxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNoZWNrLCB0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbmNlbCgpKSB7IHJlamVjdChlcnJvcik7IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNoZWNrKCk7XG4gICAgfSk7XG59XG5cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheWlmeSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9ieXRlc1wiO1xuXG5pbXBvcnQgdHlwZSB7IEdldFVybFJlc3BvbnNlLCBPcHRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IHsgR2V0VXJsUmVzcG9uc2UsIE9wdGlvbnMgfTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFVybChocmVmOiBzdHJpbmcsIG9wdGlvbnM/OiBPcHRpb25zKTogUHJvbWlzZTxHZXRVcmxSZXNwb25zZT4ge1xuICAgIGlmIChvcHRpb25zID09IG51bGwpIHsgb3B0aW9ucyA9IHsgfTsgfVxuXG4gICAgY29uc3QgcmVxdWVzdDogUmVxdWVzdEluaXQgPSB7XG4gICAgICAgIG1ldGhvZDogKG9wdGlvbnMubWV0aG9kIHx8IFwiR0VUXCIpLFxuICAgICAgICBoZWFkZXJzOiAob3B0aW9ucy5oZWFkZXJzIHx8IHsgfSksXG4gICAgICAgIGJvZHk6IChvcHRpb25zLmJvZHkgfHwgdW5kZWZpbmVkKSxcbiAgICB9O1xuXG4gICAgaWYgKG9wdGlvbnMuc2tpcEZldGNoU2V0dXAgIT09IHRydWUpIHtcbiAgICAgICAgcmVxdWVzdC5tb2RlID0gPFJlcXVlc3RNb2RlPlwiY29yc1wiOyAgICAgICAgICAgICAgLy8gbm8tY29ycywgY29ycywgKnNhbWUtb3JpZ2luXG4gICAgICAgIHJlcXVlc3QuY2FjaGUgPSA8UmVxdWVzdENhY2hlPlwibm8tY2FjaGVcIjsgICAgICAgIC8vICpkZWZhdWx0LCBuby1jYWNoZSwgcmVsb2FkLCBmb3JjZS1jYWNoZSwgb25seS1pZi1jYWNoZWRcbiAgICAgICAgcmVxdWVzdC5jcmVkZW50aWFscyA9IDxSZXF1ZXN0Q3JlZGVudGlhbHM+XCJzYW1lLW9yaWdpblwiOyAgLy8gaW5jbHVkZSwgKnNhbWUtb3JpZ2luLCBvbWl0XG4gICAgICAgIHJlcXVlc3QucmVkaXJlY3QgPSA8UmVxdWVzdFJlZGlyZWN0PlwiZm9sbG93XCI7ICAgIC8vIG1hbnVhbCwgKmZvbGxvdywgZXJyb3JcbiAgICAgICAgcmVxdWVzdC5yZWZlcnJlciA9IFwiY2xpZW50XCI7ICAgICAgICAgICAgICAgICAgICAgLy8gbm8tcmVmZXJyZXIsICpjbGllbnRcbiAgICB9O1xuXG4gICAgaWYgKG9wdGlvbnMuZmV0Y2hPcHRpb25zICE9IG51bGwpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IG9wdGlvbnMuZmV0Y2hPcHRpb25zO1xuICAgICAgICBpZiAob3B0cy5tb2RlKSB7IHJlcXVlc3QubW9kZSA9IDxSZXF1ZXN0TW9kZT4ob3B0cy5tb2RlKTsgfVxuICAgICAgICBpZiAob3B0cy5jYWNoZSkgeyByZXF1ZXN0LmNhY2hlID0gPFJlcXVlc3RDYWNoZT4ob3B0cy5jYWNoZSk7IH1cbiAgICAgICAgaWYgKG9wdHMuY3JlZGVudGlhbHMpIHsgcmVxdWVzdC5jcmVkZW50aWFscyA9IDxSZXF1ZXN0Q3JlZGVudGlhbHM+KG9wdHMuY3JlZGVudGlhbHMpOyB9XG4gICAgICAgIGlmIChvcHRzLnJlZGlyZWN0KSB7IHJlcXVlc3QucmVkaXJlY3QgPSA8UmVxdWVzdFJlZGlyZWN0PihvcHRzLnJlZGlyZWN0KTsgfVxuICAgICAgICBpZiAob3B0cy5yZWZlcnJlcikgeyByZXF1ZXN0LnJlZmVycmVyID0gb3B0cy5yZWZlcnJlcjsgfVxuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goaHJlZiwgcmVxdWVzdCk7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG5cbiAgICBjb25zdCBoZWFkZXJzOiB7IFsgbmFtZTogc3RyaW5nIF06IHN0cmluZyB9ID0geyB9O1xuICAgIGlmIChyZXNwb25zZS5oZWFkZXJzLmZvckVhY2gpIHtcbiAgICAgICAgcmVzcG9uc2UuaGVhZGVycy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICBoZWFkZXJzW2tleS50b0xvd2VyQ2FzZSgpXSA9IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAoPCgpID0+IEFycmF5PHN0cmluZz4+KCg8YW55PihyZXNwb25zZS5oZWFkZXJzKSkua2V5cykpKCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBoZWFkZXJzW2tleS50b0xvd2VyQ2FzZSgpXSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KGtleSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgIHN0YXR1c0NvZGU6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzTWVzc2FnZTogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgYm9keTogYXJyYXlpZnkobmV3IFVpbnQ4QXJyYXkoYm9keSkpLFxuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJ3ZWIvNS43LjBcIjtcbiIsIid1c2Ugc3RyaWN0J1xudmFyIEFMUEhBQkVUID0gJ3FwenJ5OXg4Z2YydHZkdzBzM2puNTRraGNlNm11YTdsJ1xuXG4vLyBwcmUtY29tcHV0ZSBsb29rdXAgdGFibGVcbnZhciBBTFBIQUJFVF9NQVAgPSB7fVxuZm9yICh2YXIgeiA9IDA7IHogPCBBTFBIQUJFVC5sZW5ndGg7IHorKykge1xuICB2YXIgeCA9IEFMUEhBQkVULmNoYXJBdCh6KVxuXG4gIGlmIChBTFBIQUJFVF9NQVBbeF0gIT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IFR5cGVFcnJvcih4ICsgJyBpcyBhbWJpZ3VvdXMnKVxuICBBTFBIQUJFVF9NQVBbeF0gPSB6XG59XG5cbmZ1bmN0aW9uIHBvbHltb2RTdGVwIChwcmUpIHtcbiAgdmFyIGIgPSBwcmUgPj4gMjVcbiAgcmV0dXJuICgocHJlICYgMHgxRkZGRkZGKSA8PCA1KSBeXG4gICAgKC0oKGIgPj4gMCkgJiAxKSAmIDB4M2I2YTU3YjIpIF5cbiAgICAoLSgoYiA+PiAxKSAmIDEpICYgMHgyNjUwOGU2ZCkgXlxuICAgICgtKChiID4+IDIpICYgMSkgJiAweDFlYTExOWZhKSBeXG4gICAgKC0oKGIgPj4gMykgJiAxKSAmIDB4M2Q0MjMzZGQpIF5cbiAgICAoLSgoYiA+PiA0KSAmIDEpICYgMHgyYTE0NjJiMylcbn1cblxuZnVuY3Rpb24gcHJlZml4Q2hrIChwcmVmaXgpIHtcbiAgdmFyIGNoayA9IDFcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXgubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYyA9IHByZWZpeC5jaGFyQ29kZUF0KGkpXG4gICAgaWYgKGMgPCAzMyB8fCBjID4gMTI2KSByZXR1cm4gJ0ludmFsaWQgcHJlZml4ICgnICsgcHJlZml4ICsgJyknXG5cbiAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4gKGMgPj4gNSlcbiAgfVxuICBjaGsgPSBwb2x5bW9kU3RlcChjaGspXG5cbiAgZm9yIChpID0gMDsgaSA8IHByZWZpeC5sZW5ndGg7ICsraSkge1xuICAgIHZhciB2ID0gcHJlZml4LmNoYXJDb2RlQXQoaSlcbiAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4gKHYgJiAweDFmKVxuICB9XG4gIHJldHVybiBjaGtcbn1cblxuZnVuY3Rpb24gZW5jb2RlIChwcmVmaXgsIHdvcmRzLCBMSU1JVCkge1xuICBMSU1JVCA9IExJTUlUIHx8IDkwXG4gIGlmICgocHJlZml4Lmxlbmd0aCArIDcgKyB3b3Jkcy5sZW5ndGgpID4gTElNSVQpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4Y2VlZHMgbGVuZ3RoIGxpbWl0JylcblxuICBwcmVmaXggPSBwcmVmaXgudG9Mb3dlckNhc2UoKVxuXG4gIC8vIGRldGVybWluZSBjaGsgbW9kXG4gIHZhciBjaGsgPSBwcmVmaXhDaGsocHJlZml4KVxuICBpZiAodHlwZW9mIGNoayA9PT0gJ3N0cmluZycpIHRocm93IG5ldyBFcnJvcihjaGspXG5cbiAgdmFyIHJlc3VsdCA9IHByZWZpeCArICcxJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHdvcmRzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHggPSB3b3Jkc1tpXVxuICAgIGlmICgoeCA+PiA1KSAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKCdOb24gNS1iaXQgd29yZCcpXG5cbiAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4geFxuICAgIHJlc3VsdCArPSBBTFBIQUJFVC5jaGFyQXQoeClcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCA2OyArK2kpIHtcbiAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspXG4gIH1cbiAgY2hrIF49IDFcblxuICBmb3IgKGkgPSAwOyBpIDwgNjsgKytpKSB7XG4gICAgdmFyIHYgPSAoY2hrID4+ICgoNSAtIGkpICogNSkpICYgMHgxZlxuICAgIHJlc3VsdCArPSBBTFBIQUJFVC5jaGFyQXQodilcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gX19kZWNvZGUgKHN0ciwgTElNSVQpIHtcbiAgTElNSVQgPSBMSU1JVCB8fCA5MFxuICBpZiAoc3RyLmxlbmd0aCA8IDgpIHJldHVybiBzdHIgKyAnIHRvbyBzaG9ydCdcbiAgaWYgKHN0ci5sZW5ndGggPiBMSU1JVCkgcmV0dXJuICdFeGNlZWRzIGxlbmd0aCBsaW1pdCdcblxuICAvLyBkb24ndCBhbGxvdyBtaXhlZCBjYXNlXG4gIHZhciBsb3dlcmVkID0gc3RyLnRvTG93ZXJDYXNlKClcbiAgdmFyIHVwcGVyZWQgPSBzdHIudG9VcHBlckNhc2UoKVxuICBpZiAoc3RyICE9PSBsb3dlcmVkICYmIHN0ciAhPT0gdXBwZXJlZCkgcmV0dXJuICdNaXhlZC1jYXNlIHN0cmluZyAnICsgc3RyXG4gIHN0ciA9IGxvd2VyZWRcblxuICB2YXIgc3BsaXQgPSBzdHIubGFzdEluZGV4T2YoJzEnKVxuICBpZiAoc3BsaXQgPT09IC0xKSByZXR1cm4gJ05vIHNlcGFyYXRvciBjaGFyYWN0ZXIgZm9yICcgKyBzdHJcbiAgaWYgKHNwbGl0ID09PSAwKSByZXR1cm4gJ01pc3NpbmcgcHJlZml4IGZvciAnICsgc3RyXG5cbiAgdmFyIHByZWZpeCA9IHN0ci5zbGljZSgwLCBzcGxpdClcbiAgdmFyIHdvcmRDaGFycyA9IHN0ci5zbGljZShzcGxpdCArIDEpXG4gIGlmICh3b3JkQ2hhcnMubGVuZ3RoIDwgNikgcmV0dXJuICdEYXRhIHRvbyBzaG9ydCdcblxuICB2YXIgY2hrID0gcHJlZml4Q2hrKHByZWZpeClcbiAgaWYgKHR5cGVvZiBjaGsgPT09ICdzdHJpbmcnKSByZXR1cm4gY2hrXG5cbiAgdmFyIHdvcmRzID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB3b3JkQ2hhcnMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYyA9IHdvcmRDaGFycy5jaGFyQXQoaSlcbiAgICB2YXIgdiA9IEFMUEhBQkVUX01BUFtjXVxuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHJldHVybiAnVW5rbm93biBjaGFyYWN0ZXIgJyArIGNcbiAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4gdlxuXG4gICAgLy8gbm90IGluIHRoZSBjaGVja3N1bT9cbiAgICBpZiAoaSArIDYgPj0gd29yZENoYXJzLmxlbmd0aCkgY29udGludWVcbiAgICB3b3Jkcy5wdXNoKHYpXG4gIH1cblxuICBpZiAoY2hrICE9PSAxKSByZXR1cm4gJ0ludmFsaWQgY2hlY2tzdW0gZm9yICcgKyBzdHJcbiAgcmV0dXJuIHsgcHJlZml4OiBwcmVmaXgsIHdvcmRzOiB3b3JkcyB9XG59XG5cbmZ1bmN0aW9uIGRlY29kZVVuc2FmZSAoKSB7XG4gIHZhciByZXMgPSBfX2RlY29kZS5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gIGlmICh0eXBlb2YgcmVzID09PSAnb2JqZWN0JykgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBkZWNvZGUgKHN0cikge1xuICB2YXIgcmVzID0gX19kZWNvZGUuYXBwbHkobnVsbCwgYXJndW1lbnRzKVxuICBpZiAodHlwZW9mIHJlcyA9PT0gJ29iamVjdCcpIHJldHVybiByZXNcblxuICB0aHJvdyBuZXcgRXJyb3IocmVzKVxufVxuXG5mdW5jdGlvbiBjb252ZXJ0IChkYXRhLCBpbkJpdHMsIG91dEJpdHMsIHBhZCkge1xuICB2YXIgdmFsdWUgPSAwXG4gIHZhciBiaXRzID0gMFxuICB2YXIgbWF4ViA9ICgxIDw8IG91dEJpdHMpIC0gMVxuXG4gIHZhciByZXN1bHQgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIHtcbiAgICB2YWx1ZSA9ICh2YWx1ZSA8PCBpbkJpdHMpIHwgZGF0YVtpXVxuICAgIGJpdHMgKz0gaW5CaXRzXG5cbiAgICB3aGlsZSAoYml0cyA+PSBvdXRCaXRzKSB7XG4gICAgICBiaXRzIC09IG91dEJpdHNcbiAgICAgIHJlc3VsdC5wdXNoKCh2YWx1ZSA+PiBiaXRzKSAmIG1heFYpXG4gICAgfVxuICB9XG5cbiAgaWYgKHBhZCkge1xuICAgIGlmIChiaXRzID4gMCkge1xuICAgICAgcmVzdWx0LnB1c2goKHZhbHVlIDw8IChvdXRCaXRzIC0gYml0cykpICYgbWF4VilcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJpdHMgPj0gaW5CaXRzKSByZXR1cm4gJ0V4Y2VzcyBwYWRkaW5nJ1xuICAgIGlmICgodmFsdWUgPDwgKG91dEJpdHMgLSBiaXRzKSkgJiBtYXhWKSByZXR1cm4gJ05vbi16ZXJvIHBhZGRpbmcnXG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIHRvV29yZHNVbnNhZmUgKGJ5dGVzKSB7XG4gIHZhciByZXMgPSBjb252ZXJ0KGJ5dGVzLCA4LCA1LCB0cnVlKVxuICBpZiAoQXJyYXkuaXNBcnJheShyZXMpKSByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHRvV29yZHMgKGJ5dGVzKSB7XG4gIHZhciByZXMgPSBjb252ZXJ0KGJ5dGVzLCA4LCA1LCB0cnVlKVxuICBpZiAoQXJyYXkuaXNBcnJheShyZXMpKSByZXR1cm4gcmVzXG5cbiAgdGhyb3cgbmV3IEVycm9yKHJlcylcbn1cblxuZnVuY3Rpb24gZnJvbVdvcmRzVW5zYWZlICh3b3Jkcykge1xuICB2YXIgcmVzID0gY29udmVydCh3b3JkcywgNSwgOCwgZmFsc2UpXG4gIGlmIChBcnJheS5pc0FycmF5KHJlcykpIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZnJvbVdvcmRzICh3b3Jkcykge1xuICB2YXIgcmVzID0gY29udmVydCh3b3JkcywgNSwgOCwgZmFsc2UpXG4gIGlmIChBcnJheS5pc0FycmF5KHJlcykpIHJldHVybiByZXNcblxuICB0aHJvdyBuZXcgRXJyb3IocmVzKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVjb2RlVW5zYWZlOiBkZWNvZGVVbnNhZmUsXG4gIGRlY29kZTogZGVjb2RlLFxuICBlbmNvZGU6IGVuY29kZSxcbiAgdG9Xb3Jkc1Vuc2FmZTogdG9Xb3Jkc1Vuc2FmZSxcbiAgdG9Xb3JkczogdG9Xb3JkcyxcbiAgZnJvbVdvcmRzVW5zYWZlOiBmcm9tV29yZHNVbnNhZmUsXG4gIGZyb21Xb3JkczogZnJvbVdvcmRzXG59XG4iLCJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwicHJvdmlkZXJzLzUuNy4wXCI7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgQmxvY2ssIFRyYW5zYWN0aW9uUmVjZWlwdCwgVHJhbnNhY3Rpb25SZXNwb25zZSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1wcm92aWRlclwiO1xuaW1wb3J0IHsgZ2V0QWRkcmVzcywgZ2V0Q29udHJhY3RBZGRyZXNzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2FkZHJlc3NcIjtcbmltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iaWdudW1iZXJcIjtcbmltcG9ydCB7IGhleERhdGFMZW5ndGgsIGhleERhdGFTbGljZSwgaGV4VmFsdWUsIGhleFplcm9QYWQsIGlzSGV4U3RyaW5nIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBBZGRyZXNzWmVybyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9jb25zdGFudHNcIjtcbmltcG9ydCB7IHNoYWxsb3dDb3B5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIjtcbmltcG9ydCB7IEFjY2Vzc0xpc3QsIGFjY2Vzc0xpc3RpZnksIHBhcnNlIGFzIHBhcnNlVHJhbnNhY3Rpb24gfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvdHJhbnNhY3Rpb25zXCI7XG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcblxuZXhwb3J0IHR5cGUgRm9ybWF0RnVuYyA9ICh2YWx1ZTogYW55KSA9PiBhbnk7XG5cbmV4cG9ydCB0eXBlIEZvcm1hdEZ1bmNzID0geyBbIGtleTogc3RyaW5nIF06IEZvcm1hdEZ1bmMgfTtcblxuZXhwb3J0IHR5cGUgRm9ybWF0cyA9IHtcbiAgICB0cmFuc2FjdGlvbjogRm9ybWF0RnVuY3MsXG4gICAgdHJhbnNhY3Rpb25SZXF1ZXN0OiBGb3JtYXRGdW5jcyxcbiAgICByZWNlaXB0OiBGb3JtYXRGdW5jcyxcbiAgICByZWNlaXB0TG9nOiBGb3JtYXRGdW5jcyxcbiAgICBibG9jazogRm9ybWF0RnVuY3MsXG4gICAgYmxvY2tXaXRoVHJhbnNhY3Rpb25zOiBGb3JtYXRGdW5jcyxcbiAgICBmaWx0ZXI6IEZvcm1hdEZ1bmNzLFxuICAgIGZpbHRlckxvZzogRm9ybWF0RnVuY3MsXG59O1xuXG5leHBvcnQgY2xhc3MgRm9ybWF0dGVyIHtcbiAgICByZWFkb25seSBmb3JtYXRzOiBGb3JtYXRzO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZm9ybWF0cyA9IHRoaXMuZ2V0RGVmYXVsdEZvcm1hdHMoKTtcbiAgICB9XG5cbiAgICBnZXREZWZhdWx0Rm9ybWF0cygpOiBGb3JtYXRzIHtcbiAgICAgICAgY29uc3QgZm9ybWF0czogRm9ybWF0cyA9IDxGb3JtYXRzPih7IH0pO1xuXG4gICAgICAgIGNvbnN0IGFkZHJlc3MgPSB0aGlzLmFkZHJlc3MuYmluZCh0aGlzKTtcbiAgICAgICAgY29uc3QgYmlnTnVtYmVyID0gdGhpcy5iaWdOdW1iZXIuYmluZCh0aGlzKTtcbiAgICAgICAgY29uc3QgYmxvY2tUYWcgPSB0aGlzLmJsb2NrVGFnLmJpbmQodGhpcyk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGEuYmluZCh0aGlzKTtcbiAgICAgICAgY29uc3QgaGFzaCA9IHRoaXMuaGFzaC5iaW5kKHRoaXMpO1xuICAgICAgICBjb25zdCBoZXggPSB0aGlzLmhleC5iaW5kKHRoaXMpO1xuICAgICAgICBjb25zdCBudW1iZXIgPSB0aGlzLm51bWJlci5iaW5kKHRoaXMpO1xuICAgICAgICBjb25zdCB0eXBlID0gdGhpcy50eXBlLmJpbmQodGhpcyk7XG5cbiAgICAgICAgY29uc3Qgc3RyaWN0RGF0YSA9ICh2OiBhbnkpID0+IHsgcmV0dXJuIHRoaXMuZGF0YSh2LCB0cnVlKTsgfTtcblxuICAgICAgICBmb3JtYXRzLnRyYW5zYWN0aW9uID0ge1xuICAgICAgICAgICAgaGFzaDogaGFzaCxcblxuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIGFjY2Vzc0xpc3Q6IEZvcm1hdHRlci5hbGxvd051bGwodGhpcy5hY2Nlc3NMaXN0LmJpbmQodGhpcyksIG51bGwpLFxuXG4gICAgICAgICAgICBibG9ja0hhc2g6IEZvcm1hdHRlci5hbGxvd051bGwoaGFzaCwgbnVsbCksXG4gICAgICAgICAgICBibG9ja051bWJlcjogRm9ybWF0dGVyLmFsbG93TnVsbChudW1iZXIsIG51bGwpLFxuICAgICAgICAgICAgdHJhbnNhY3Rpb25JbmRleDogRm9ybWF0dGVyLmFsbG93TnVsbChudW1iZXIsIG51bGwpLFxuXG4gICAgICAgICAgICBjb25maXJtYXRpb25zOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKG51bWJlciwgbnVsbCksXG5cbiAgICAgICAgICAgIGZyb206IGFkZHJlc3MsXG5cbiAgICAgICAgICAgIC8vIGVpdGhlciAoZ2FzUHJpY2UpIG9yIChtYXhQcmlvcml0eUZlZVBlckdhcyArIG1heEZlZVBlckdhcylcbiAgICAgICAgICAgIC8vIG11c3QgYmUgc2V0XG4gICAgICAgICAgICBnYXNQcmljZTogRm9ybWF0dGVyLmFsbG93TnVsbChiaWdOdW1iZXIpLFxuICAgICAgICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IEZvcm1hdHRlci5hbGxvd051bGwoYmlnTnVtYmVyKSxcbiAgICAgICAgICAgIG1heEZlZVBlckdhczogRm9ybWF0dGVyLmFsbG93TnVsbChiaWdOdW1iZXIpLFxuXG4gICAgICAgICAgICBnYXNMaW1pdDogYmlnTnVtYmVyLFxuICAgICAgICAgICAgdG86IEZvcm1hdHRlci5hbGxvd051bGwoYWRkcmVzcywgbnVsbCksXG4gICAgICAgICAgICB2YWx1ZTogYmlnTnVtYmVyLFxuICAgICAgICAgICAgbm9uY2U6IG51bWJlcixcbiAgICAgICAgICAgIGRhdGE6IGRhdGEsXG5cbiAgICAgICAgICAgIHI6IEZvcm1hdHRlci5hbGxvd051bGwodGhpcy51aW50MjU2KSxcbiAgICAgICAgICAgIHM6IEZvcm1hdHRlci5hbGxvd051bGwodGhpcy51aW50MjU2KSxcbiAgICAgICAgICAgIHY6IEZvcm1hdHRlci5hbGxvd051bGwobnVtYmVyKSxcblxuICAgICAgICAgICAgY3JlYXRlczogRm9ybWF0dGVyLmFsbG93TnVsbChhZGRyZXNzLCBudWxsKSxcblxuICAgICAgICAgICAgcmF3OiBGb3JtYXR0ZXIuYWxsb3dOdWxsKGRhdGEpLFxuICAgICAgICB9O1xuXG4gICAgICAgIGZvcm1hdHMudHJhbnNhY3Rpb25SZXF1ZXN0ID0ge1xuICAgICAgICAgICAgZnJvbTogRm9ybWF0dGVyLmFsbG93TnVsbChhZGRyZXNzKSxcbiAgICAgICAgICAgIG5vbmNlOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKG51bWJlciksXG4gICAgICAgICAgICBnYXNMaW1pdDogRm9ybWF0dGVyLmFsbG93TnVsbChiaWdOdW1iZXIpLFxuICAgICAgICAgICAgZ2FzUHJpY2U6IEZvcm1hdHRlci5hbGxvd051bGwoYmlnTnVtYmVyKSxcbiAgICAgICAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKGJpZ051bWJlciksXG4gICAgICAgICAgICBtYXhGZWVQZXJHYXM6IEZvcm1hdHRlci5hbGxvd051bGwoYmlnTnVtYmVyKSxcbiAgICAgICAgICAgIHRvOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKGFkZHJlc3MpLFxuICAgICAgICAgICAgdmFsdWU6IEZvcm1hdHRlci5hbGxvd051bGwoYmlnTnVtYmVyKSxcbiAgICAgICAgICAgIGRhdGE6IEZvcm1hdHRlci5hbGxvd051bGwoc3RyaWN0RGF0YSksXG4gICAgICAgICAgICB0eXBlOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKG51bWJlciksXG4gICAgICAgICAgICBhY2Nlc3NMaXN0OiBGb3JtYXR0ZXIuYWxsb3dOdWxsKHRoaXMuYWNjZXNzTGlzdC5iaW5kKHRoaXMpLCBudWxsKSxcbiAgICAgICAgfTtcblxuICAgICAgICBmb3JtYXRzLnJlY2VpcHRMb2cgPSB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbkluZGV4OiBudW1iZXIsXG4gICAgICAgICAgICBibG9ja051bWJlcjogbnVtYmVyLFxuICAgICAgICAgICAgdHJhbnNhY3Rpb25IYXNoOiBoYXNoLFxuICAgICAgICAgICAgYWRkcmVzczogYWRkcmVzcyxcbiAgICAgICAgICAgIHRvcGljczogRm9ybWF0dGVyLmFycmF5T2YoaGFzaCksXG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgbG9nSW5kZXg6IG51bWJlcixcbiAgICAgICAgICAgIGJsb2NrSGFzaDogaGFzaCxcbiAgICAgICAgfTtcblxuICAgICAgICBmb3JtYXRzLnJlY2VpcHQgPSB7XG4gICAgICAgICAgICB0bzogRm9ybWF0dGVyLmFsbG93TnVsbCh0aGlzLmFkZHJlc3MsIG51bGwpLFxuICAgICAgICAgICAgZnJvbTogRm9ybWF0dGVyLmFsbG93TnVsbCh0aGlzLmFkZHJlc3MsIG51bGwpLFxuICAgICAgICAgICAgY29udHJhY3RBZGRyZXNzOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKGFkZHJlc3MsIG51bGwpLFxuICAgICAgICAgICAgdHJhbnNhY3Rpb25JbmRleDogbnVtYmVyLFxuICAgICAgICAgICAgLy8gc2hvdWxkIGJlIGFsbG93TnVsbChoYXNoKSwgYnV0IGJyb2tlbi1FSVAtNjU4IHN1cHBvcnQgaXMgaGFuZGxlZCBpbiByZWNlaXB0XG4gICAgICAgICAgICByb290OiBGb3JtYXR0ZXIuYWxsb3dOdWxsKGhleCksXG4gICAgICAgICAgICBnYXNVc2VkOiBiaWdOdW1iZXIsXG4gICAgICAgICAgICBsb2dzQmxvb206IEZvcm1hdHRlci5hbGxvd051bGwoZGF0YSksLy8gQFRPRE86IHNob3VsZCB0aGlzIGJlIGRhdGE/XG4gICAgICAgICAgICBibG9ja0hhc2g6IGhhc2gsXG4gICAgICAgICAgICB0cmFuc2FjdGlvbkhhc2g6IGhhc2gsXG4gICAgICAgICAgICBsb2dzOiBGb3JtYXR0ZXIuYXJyYXlPZih0aGlzLnJlY2VpcHRMb2cuYmluZCh0aGlzKSksXG4gICAgICAgICAgICBibG9ja051bWJlcjogbnVtYmVyLFxuICAgICAgICAgICAgY29uZmlybWF0aW9uczogRm9ybWF0dGVyLmFsbG93TnVsbChudW1iZXIsIG51bGwpLFxuICAgICAgICAgICAgY3VtdWxhdGl2ZUdhc1VzZWQ6IGJpZ051bWJlcixcbiAgICAgICAgICAgIGVmZmVjdGl2ZUdhc1ByaWNlOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKGJpZ051bWJlciksXG4gICAgICAgICAgICBzdGF0dXM6IEZvcm1hdHRlci5hbGxvd051bGwobnVtYmVyKSxcbiAgICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgfTtcblxuICAgICAgICBmb3JtYXRzLmJsb2NrID0ge1xuICAgICAgICAgICAgaGFzaDogRm9ybWF0dGVyLmFsbG93TnVsbChoYXNoKSxcbiAgICAgICAgICAgIHBhcmVudEhhc2g6IGhhc2gsXG4gICAgICAgICAgICBudW1iZXI6IG51bWJlcixcblxuICAgICAgICAgICAgdGltZXN0YW1wOiBudW1iZXIsXG4gICAgICAgICAgICBub25jZTogRm9ybWF0dGVyLmFsbG93TnVsbChoZXgpLFxuICAgICAgICAgICAgZGlmZmljdWx0eTogdGhpcy5kaWZmaWN1bHR5LmJpbmQodGhpcyksXG5cbiAgICAgICAgICAgIGdhc0xpbWl0OiBiaWdOdW1iZXIsXG4gICAgICAgICAgICBnYXNVc2VkOiBiaWdOdW1iZXIsXG5cbiAgICAgICAgICAgIG1pbmVyOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKGFkZHJlc3MpLFxuICAgICAgICAgICAgZXh0cmFEYXRhOiBkYXRhLFxuXG4gICAgICAgICAgICB0cmFuc2FjdGlvbnM6IEZvcm1hdHRlci5hbGxvd051bGwoRm9ybWF0dGVyLmFycmF5T2YoaGFzaCkpLFxuXG4gICAgICAgICAgICBiYXNlRmVlUGVyR2FzOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKGJpZ051bWJlcilcbiAgICAgICAgfTtcblxuICAgICAgICBmb3JtYXRzLmJsb2NrV2l0aFRyYW5zYWN0aW9ucyA9IHNoYWxsb3dDb3B5KGZvcm1hdHMuYmxvY2spO1xuICAgICAgICBmb3JtYXRzLmJsb2NrV2l0aFRyYW5zYWN0aW9ucy50cmFuc2FjdGlvbnMgPSBGb3JtYXR0ZXIuYWxsb3dOdWxsKEZvcm1hdHRlci5hcnJheU9mKHRoaXMudHJhbnNhY3Rpb25SZXNwb25zZS5iaW5kKHRoaXMpKSk7XG5cbiAgICAgICAgZm9ybWF0cy5maWx0ZXIgPSB7XG4gICAgICAgICAgICBmcm9tQmxvY2s6IEZvcm1hdHRlci5hbGxvd051bGwoYmxvY2tUYWcsIHVuZGVmaW5lZCksXG4gICAgICAgICAgICB0b0Jsb2NrOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKGJsb2NrVGFnLCB1bmRlZmluZWQpLFxuICAgICAgICAgICAgYmxvY2tIYXNoOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKGhhc2gsIHVuZGVmaW5lZCksXG4gICAgICAgICAgICBhZGRyZXNzOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKGFkZHJlc3MsIHVuZGVmaW5lZCksXG4gICAgICAgICAgICB0b3BpY3M6IEZvcm1hdHRlci5hbGxvd051bGwodGhpcy50b3BpY3MuYmluZCh0aGlzKSwgdW5kZWZpbmVkKSxcbiAgICAgICAgfTtcblxuICAgICAgICBmb3JtYXRzLmZpbHRlckxvZyA9IHtcbiAgICAgICAgICAgIGJsb2NrTnVtYmVyOiBGb3JtYXR0ZXIuYWxsb3dOdWxsKG51bWJlciksXG4gICAgICAgICAgICBibG9ja0hhc2g6IEZvcm1hdHRlci5hbGxvd051bGwoaGFzaCksXG4gICAgICAgICAgICB0cmFuc2FjdGlvbkluZGV4OiBudW1iZXIsXG5cbiAgICAgICAgICAgIHJlbW92ZWQ6IEZvcm1hdHRlci5hbGxvd051bGwodGhpcy5ib29sZWFuLmJpbmQodGhpcykpLFxuXG4gICAgICAgICAgICBhZGRyZXNzOiBhZGRyZXNzLFxuICAgICAgICAgICAgZGF0YTogRm9ybWF0dGVyLmFsbG93RmFsc2lzaChkYXRhLCBcIjB4XCIpLFxuXG4gICAgICAgICAgICB0b3BpY3M6IEZvcm1hdHRlci5hcnJheU9mKGhhc2gpLFxuXG4gICAgICAgICAgICB0cmFuc2FjdGlvbkhhc2g6IGhhc2gsXG4gICAgICAgICAgICBsb2dJbmRleDogbnVtYmVyLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBmb3JtYXRzO1xuICAgIH1cblxuICAgIGFjY2Vzc0xpc3QoYWNjZXNzTGlzdDogQXJyYXk8YW55Pik6IEFjY2Vzc0xpc3Qge1xuICAgICAgICByZXR1cm4gYWNjZXNzTGlzdGlmeShhY2Nlc3NMaXN0IHx8IFtdKTtcbiAgICB9XG5cbiAgICAvLyBSZXF1aXJlcyBhIEJpZ051bWJlcmlzaCB0aGF0IGlzIHdpdGhpbiB0aGUgSUVFRTc1NCBzYWZlIGludGVnZXIgcmFuZ2U7IHJldHVybnMgYSBudW1iZXJcbiAgICAvLyBTdHJpY3QhIFVzZWQgb24gaW5wdXQuXG4gICAgbnVtYmVyKG51bWJlcjogYW55KTogbnVtYmVyIHtcbiAgICAgICAgaWYgKG51bWJlciA9PT0gXCIweFwiKSB7IHJldHVybiAwOyB9XG4gICAgICAgIHJldHVybiBCaWdOdW1iZXIuZnJvbShudW1iZXIpLnRvTnVtYmVyKCk7XG4gICAgfVxuXG4gICAgdHlwZShudW1iZXI6IGFueSk6IG51bWJlciB7XG4gICAgICAgIGlmIChudW1iZXIgPT09IFwiMHhcIiB8fCBudW1iZXIgPT0gbnVsbCkgeyByZXR1cm4gMDsgfVxuICAgICAgICByZXR1cm4gQmlnTnVtYmVyLmZyb20obnVtYmVyKS50b051bWJlcigpO1xuICAgIH1cblxuICAgIC8vIFN0cmljdCEgVXNlZCBvbiBpbnB1dC5cbiAgICBiaWdOdW1iZXIodmFsdWU6IGFueSk6IEJpZ051bWJlciB7XG4gICAgICAgIHJldHVybiBCaWdOdW1iZXIuZnJvbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gUmVxdWlyZXMgYSBib29sZWFuLCBcInRydWVcIiBvciAgXCJmYWxzZVwiOyByZXR1cm5zIGEgYm9vbGVhblxuICAgIGJvb2xlYW4odmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodHlwZW9mKHZhbHVlKSA9PT0gXCJib29sZWFuXCIpIHsgcmV0dXJuIHZhbHVlOyB9XG4gICAgICAgIGlmICh0eXBlb2YodmFsdWUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IFwidHJ1ZVwiKSB7IHJldHVybiB0cnVlOyB9XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IFwiZmFsc2VcIikgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGJvb2xlYW4gLSBcIiArIHZhbHVlKTtcbiAgICB9XG5cbiAgICBoZXgodmFsdWU6IGFueSwgc3RyaWN0PzogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgICAgIGlmICh0eXBlb2YodmFsdWUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBpZiAoIXN0cmljdCAmJiB2YWx1ZS5zdWJzdHJpbmcoMCwgMikgIT09IFwiMHhcIikgeyB2YWx1ZSA9IFwiMHhcIiArIHZhbHVlOyB9XG4gICAgICAgICAgICBpZiAoaXNIZXhTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgICAgICAgICByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgaGFzaFwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBkYXRhKHZhbHVlOiBhbnksIHN0cmljdD86IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmhleCh2YWx1ZSwgc3RyaWN0KTtcbiAgICAgICAgaWYgKChyZXN1bHQubGVuZ3RoICUgMikgIT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZGF0YTsgb2RkLWxlbmd0aCAtIFwiICsgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gUmVxdWlyZXMgYW4gYWRkcmVzc1xuICAgIC8vIFN0cmljdCEgVXNlZCBvbiBpbnB1dC5cbiAgICBhZGRyZXNzKHZhbHVlOiBhbnkpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gZ2V0QWRkcmVzcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgY2FsbEFkZHJlc3ModmFsdWU6IGFueSk6IHN0cmluZyB7XG4gICAgICAgIGlmICghaXNIZXhTdHJpbmcodmFsdWUsIDMyKSkgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICBjb25zdCBhZGRyZXNzID0gZ2V0QWRkcmVzcyhoZXhEYXRhU2xpY2UodmFsdWUsIDEyKSk7XG4gICAgICAgIHJldHVybiAoYWRkcmVzcyA9PT0gQWRkcmVzc1plcm8pID8gbnVsbDogYWRkcmVzcztcbiAgICB9XG5cbiAgICBjb250cmFjdEFkZHJlc3ModmFsdWU6IGFueSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBnZXRDb250cmFjdEFkZHJlc3ModmFsdWUpO1xuICAgIH1cblxuICAgIC8vIFN0cmljdCEgVXNlZCBvbiBpbnB1dC5cbiAgICBibG9ja1RhZyhibG9ja1RhZzogYW55KTogc3RyaW5nIHtcbiAgICAgICAgaWYgKGJsb2NrVGFnID09IG51bGwpIHsgcmV0dXJuIFwibGF0ZXN0XCI7IH1cblxuICAgICAgICBpZiAoYmxvY2tUYWcgPT09IFwiZWFybGllc3RcIikgeyByZXR1cm4gXCIweDBcIjsgfVxuXG4gICAgICAgIHN3aXRjaCAoYmxvY2tUYWcpIHtcbiAgICAgICAgICAgIGNhc2UgXCJlYXJsaWVzdFwiOiByZXR1cm4gXCIweDBcIjtcbiAgICAgICAgICAgIGNhc2UgXCJsYXRlc3RcIjogY2FzZSBcInBlbmRpbmdcIjogY2FzZSBcInNhZmVcIjogY2FzZSBcImZpbmFsaXplZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBibG9ja1RhZztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YoYmxvY2tUYWcpID09PSBcIm51bWJlclwiIHx8IGlzSGV4U3RyaW5nKGJsb2NrVGFnKSkge1xuICAgICAgICAgICAgcmV0dXJuIGhleFZhbHVlKDxudW1iZXIgfCBzdHJpbmc+YmxvY2tUYWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBibG9ja1RhZ1wiKTtcbiAgICB9XG5cbiAgICAvLyBSZXF1aXJlcyBhIGhhc2gsIG9wdGlvbmFsbHkgcmVxdWlyZXMgMHggcHJlZml4OyByZXR1cm5zIHByZWZpeGVkIGxvd2VyY2FzZSBoYXNoLlxuICAgIGhhc2godmFsdWU6IGFueSwgc3RyaWN0PzogYm9vbGVhbik6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuaGV4KHZhbHVlLCBzdHJpY3QpO1xuICAgICAgICBpZiAoaGV4RGF0YUxlbmd0aChyZXN1bHQpICE9PSAzMikge1xuICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGhhc2hcIiwgXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm5zIHRoZSBkaWZmaWN1bHR5IGFzIGEgbnVtYmVyLCBvciBpZiB0b28gbGFyZ2UgKGkuZS4gUG9BIG5ldHdvcmspIG51bGxcbiAgICBkaWZmaWN1bHR5KHZhbHVlOiBhbnkpOiBudW1iZXIge1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgICAgIGNvbnN0IHYgPSBCaWdOdW1iZXIuZnJvbSh2YWx1ZSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB2LnRvTnVtYmVyKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IH1cblxuICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHVpbnQyNTYodmFsdWU6IGFueSk6IHN0cmluZyB7XG4gICAgICAgIGlmICghaXNIZXhTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHVpbnQyNTZcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhleFplcm9QYWQodmFsdWUsIDMyKTtcbiAgICB9XG5cbiAgICBfYmxvY2sodmFsdWU6IGFueSwgZm9ybWF0OiBhbnkpOiBCbG9jayB7XG4gICAgICAgIGlmICh2YWx1ZS5hdXRob3IgIT0gbnVsbCAmJiB2YWx1ZS5taW5lciA9PSBudWxsKSB7XG4gICAgICAgICAgICB2YWx1ZS5taW5lciA9IHZhbHVlLmF1dGhvcjtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgZGlmZmljdWx0eSBtYXkgbmVlZCB0byBjb21lIGZyb20gX2RpZmZpY3VsdHkgaW4gcmVjdXJzZWQgYmxvY2tzXG4gICAgICAgIGNvbnN0IGRpZmZpY3VsdHkgPSAodmFsdWUuX2RpZmZpY3VsdHkgIT0gbnVsbCkgPyB2YWx1ZS5fZGlmZmljdWx0eTogdmFsdWUuZGlmZmljdWx0eTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gRm9ybWF0dGVyLmNoZWNrKGZvcm1hdCwgdmFsdWUpO1xuICAgICAgICByZXN1bHQuX2RpZmZpY3VsdHkgPSAoKGRpZmZpY3VsdHkgPT0gbnVsbCkgPyBudWxsOiBCaWdOdW1iZXIuZnJvbShkaWZmaWN1bHR5KSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgYmxvY2sodmFsdWU6IGFueSk6IEJsb2NrIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrKHZhbHVlLCB0aGlzLmZvcm1hdHMuYmxvY2spO1xuICAgIH1cblxuICAgIGJsb2NrV2l0aFRyYW5zYWN0aW9ucyh2YWx1ZTogYW55KTogQmxvY2sge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmxvY2sodmFsdWUsIHRoaXMuZm9ybWF0cy5ibG9ja1dpdGhUcmFuc2FjdGlvbnMpO1xuICAgIH1cblxuICAgIC8vIFN0cmljdCEgVXNlZCBvbiBpbnB1dC5cbiAgICB0cmFuc2FjdGlvblJlcXVlc3QodmFsdWU6IGFueSk6IGFueSB7XG4gICAgICAgIHJldHVybiBGb3JtYXR0ZXIuY2hlY2sodGhpcy5mb3JtYXRzLnRyYW5zYWN0aW9uUmVxdWVzdCwgdmFsdWUpO1xuICAgIH1cblxuICAgIHRyYW5zYWN0aW9uUmVzcG9uc2UodHJhbnNhY3Rpb246IGFueSk6IFRyYW5zYWN0aW9uUmVzcG9uc2Uge1xuXG4gICAgICAgIC8vIFJlbmFtZSBnYXMgdG8gZ2FzTGltaXRcbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLmdhcyAhPSBudWxsICYmIHRyYW5zYWN0aW9uLmdhc0xpbWl0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLmdhc0xpbWl0ID0gdHJhbnNhY3Rpb24uZ2FzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU29tZSBjbGllbnRzIChUZXN0UlBDKSBkbyBzdHJhbmdlIHRoaW5ncyBsaWtlIHJldHVybiAweDAgZm9yIHRoZVxuICAgICAgICAvLyAwIGFkZHJlc3M7IGNvcnJlY3QgdGhpcyB0byBiZSBhIHJlYWwgYWRkcmVzc1xuICAgICAgICBpZiAodHJhbnNhY3Rpb24udG8gJiYgQmlnTnVtYmVyLmZyb20odHJhbnNhY3Rpb24udG8pLmlzWmVybygpKSB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi50byA9IFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW5hbWUgaW5wdXQgdG8gZGF0YVxuICAgICAgICBpZiAodHJhbnNhY3Rpb24uaW5wdXQgIT0gbnVsbCAmJiB0cmFuc2FjdGlvbi5kYXRhID09IG51bGwpIHtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLmRhdGEgPSB0cmFuc2FjdGlvbi5pbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRvIGFuZCBjcmVhdGVzIGFyZSBlbXB0eSwgcG9wdWxhdGUgdGhlIGNyZWF0ZXMgZnJvbSB0aGUgdHJhbnNhY3Rpb25cbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLnRvID09IG51bGwgJiYgdHJhbnNhY3Rpb24uY3JlYXRlcyA9PSBudWxsKSB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5jcmVhdGVzID0gdGhpcy5jb250cmFjdEFkZHJlc3ModHJhbnNhY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCh0cmFuc2FjdGlvbi50eXBlID09PSAxIHx8IHRyYW5zYWN0aW9uLnR5cGUgPT09IDIpJiYgdHJhbnNhY3Rpb24uYWNjZXNzTGlzdCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5hY2Nlc3NMaXN0ID0gWyBdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzdWx0OiBUcmFuc2FjdGlvblJlc3BvbnNlID0gRm9ybWF0dGVyLmNoZWNrKHRoaXMuZm9ybWF0cy50cmFuc2FjdGlvbiwgdHJhbnNhY3Rpb24pO1xuXG4gICAgICAgIGlmICh0cmFuc2FjdGlvbi5jaGFpbklkICE9IG51bGwpIHtcbiAgICAgICAgICAgIGxldCBjaGFpbklkID0gdHJhbnNhY3Rpb24uY2hhaW5JZDtcblxuICAgICAgICAgICAgaWYgKGlzSGV4U3RyaW5nKGNoYWluSWQpKSB7XG4gICAgICAgICAgICAgICAgY2hhaW5JZCA9IEJpZ051bWJlci5mcm9tKGNoYWluSWQpLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc3VsdC5jaGFpbklkID0gY2hhaW5JZDtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGNoYWluSWQgPSB0cmFuc2FjdGlvbi5uZXR3b3JrSWQ7XG5cbiAgICAgICAgICAgIC8vIGdldGgtZXRjIHJldHVybnMgY2hhaW5JZFxuICAgICAgICAgICAgaWYgKGNoYWluSWQgPT0gbnVsbCAmJiByZXN1bHQudiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY2hhaW5JZCA9IHRyYW5zYWN0aW9uLmNoYWluSWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc0hleFN0cmluZyhjaGFpbklkKSkge1xuICAgICAgICAgICAgICAgIGNoYWluSWQgPSBCaWdOdW1iZXIuZnJvbShjaGFpbklkKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mKGNoYWluSWQpICE9PSBcIm51bWJlclwiICYmIHJlc3VsdC52ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjaGFpbklkID0gKHJlc3VsdC52IC0gMzUpIC8gMjtcbiAgICAgICAgICAgICAgICBpZiAoY2hhaW5JZCA8IDApIHsgY2hhaW5JZCA9IDA7IH1cbiAgICAgICAgICAgICAgICBjaGFpbklkID0gcGFyc2VJbnQoY2hhaW5JZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YoY2hhaW5JZCkgIT09IFwibnVtYmVyXCIpIHsgY2hhaW5JZCA9IDA7IH1cblxuICAgICAgICAgICAgcmVzdWx0LmNoYWluSWQgPSBjaGFpbklkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gMHgwMDAwLi4uIHNob3VsZCBhY3R1YWxseSBiZSBudWxsXG4gICAgICAgIGlmIChyZXN1bHQuYmxvY2tIYXNoICYmIHJlc3VsdC5ibG9ja0hhc2gucmVwbGFjZSgvMC9nLCBcIlwiKSA9PT0gXCJ4XCIpIHtcbiAgICAgICAgICAgIHJlc3VsdC5ibG9ja0hhc2ggPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB0cmFuc2FjdGlvbih2YWx1ZTogYW55KTogYW55IHtcbiAgICAgICAgcmV0dXJuIHBhcnNlVHJhbnNhY3Rpb24odmFsdWUpO1xuICAgIH1cblxuICAgIHJlY2VpcHRMb2codmFsdWU6IGFueSk6IGFueSB7XG4gICAgICAgIHJldHVybiBGb3JtYXR0ZXIuY2hlY2sodGhpcy5mb3JtYXRzLnJlY2VpcHRMb2csIHZhbHVlKTtcbiAgICB9XG5cbiAgICByZWNlaXB0KHZhbHVlOiBhbnkpOiBUcmFuc2FjdGlvblJlY2VpcHQge1xuICAgICAgICBjb25zdCByZXN1bHQ6IFRyYW5zYWN0aW9uUmVjZWlwdCA9IEZvcm1hdHRlci5jaGVjayh0aGlzLmZvcm1hdHMucmVjZWlwdCwgdmFsdWUpO1xuXG4gICAgICAgIC8vIFJTSyBpbmNvcnJlY3RseSBpbXBsZW1lbnRlZCBFSVAtNjU4LCBzbyB3ZSBtdW5nZSB0aGluZ3MgYSBiaXQgaGVyZSBmb3IgaXRcbiAgICAgICAgaWYgKHJlc3VsdC5yb290ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQucm9vdC5sZW5ndGggPD0gNCkge1xuICAgICAgICAgICAgICAgIC8vIENvdWxkIGJlIDB4MDAsIDB4MCwgMHgwMSBvciAweDFcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IEJpZ051bWJlci5mcm9tKHJlc3VsdC5yb290KS50b051bWJlcigpO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMCB8fCB2YWx1ZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgaWYgYm90aCBhcmUgc3BlY2lmaWVkLCB0aGV5IG1hdGNoXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzICE9IG51bGwgJiYgKHJlc3VsdC5zdGF0dXMgIT09IHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImFsdC1yb290LXN0YXR1cy9zdGF0dXMgbWlzbWF0Y2hcIiwgXCJ2YWx1ZVwiLCB7IHJvb3Q6IHJlc3VsdC5yb290LCBzdGF0dXM6IHJlc3VsdC5zdGF0dXMgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXR1cyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzdWx0LnJvb3Q7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYWx0LXJvb3Qtc3RhdHVzXCIsIFwidmFsdWUucm9vdFwiLCByZXN1bHQucm9vdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQucm9vdC5sZW5ndGggIT09IDY2KSB7XG4gICAgICAgICAgICAgICAgLy8gTXVzdCBiZSBhIHZhbGlkIGJ5dGVzMzJcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCByb290IGhhc2hcIiwgXCJ2YWx1ZS5yb290XCIsIHJlc3VsdC5yb290KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXN1bHQuc3RhdHVzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5ieXphbnRpdW0gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB0b3BpY3ModmFsdWU6IGFueSk6IGFueSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLm1hcCgodikgPT4gdGhpcy50b3BpY3ModikpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFzaCh2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmaWx0ZXIodmFsdWU6IGFueSk6IGFueSB7XG4gICAgICAgIHJldHVybiBGb3JtYXR0ZXIuY2hlY2sodGhpcy5mb3JtYXRzLmZpbHRlciwgdmFsdWUpO1xuICAgIH1cblxuICAgIGZpbHRlckxvZyh2YWx1ZTogYW55KTogYW55IHtcbiAgICAgICAgcmV0dXJuIEZvcm1hdHRlci5jaGVjayh0aGlzLmZvcm1hdHMuZmlsdGVyTG9nLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNoZWNrKGZvcm1hdDogeyBbIG5hbWU6IHN0cmluZyBdOiBGb3JtYXRGdW5jIH0sIG9iamVjdDogYW55KTogYW55IHtcbiAgICAgICAgY29uc3QgcmVzdWx0OiBhbnkgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZm9ybWF0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZm9ybWF0W2tleV0ob2JqZWN0W2tleV0pO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7IHJlc3VsdFtrZXldID0gdmFsdWU7IH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IuY2hlY2tLZXkgPSBrZXk7XG4gICAgICAgICAgICAgICAgZXJyb3IuY2hlY2tWYWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gaWYgdmFsdWUgaXMgbnVsbC1pc2gsIG51bGxWYWx1ZSBpcyByZXR1cm5lZFxuICAgIHN0YXRpYyBhbGxvd051bGwoZm9ybWF0OiBGb3JtYXRGdW5jLCBudWxsVmFsdWU/OiBhbnkpOiBGb3JtYXRGdW5jIHtcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbih2YWx1ZTogYW55KSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgeyByZXR1cm4gbnVsbFZhbHVlOyB9XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0KHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdmFsdWUgaXMgZmFsc2UtaXNoLCByZXBsYWNlVmFsdWUgaXMgcmV0dXJuZWRcbiAgICBzdGF0aWMgYWxsb3dGYWxzaXNoKGZvcm1hdDogRm9ybWF0RnVuYywgcmVwbGFjZVZhbHVlOiBhbnkpOiBGb3JtYXRGdW5jIHtcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbih2YWx1ZTogYW55KSB7XG4gICAgICAgICAgICBpZiAoIXZhbHVlKSB7IHJldHVybiByZXBsYWNlVmFsdWU7IH1cbiAgICAgICAgICAgIHJldHVybiBmb3JtYXQodmFsdWUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBSZXF1aXJlcyBhbiBBcnJheSBzYXRpc2Z5aW5nIGNoZWNrXG4gICAgc3RhdGljIGFycmF5T2YoZm9ybWF0OiBGb3JtYXRGdW5jKTogRm9ybWF0RnVuYyB7XG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24oYXJyYXk6IGFueSk6IEFycmF5PGFueT4ge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkgeyB0aHJvdyBuZXcgRXJyb3IoXCJub3QgYW4gYXJyYXlcIik7IH1cblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0OiBhbnkgPSBbXTtcblxuICAgICAgICAgICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGZvcm1hdCh2YWx1ZSkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21tdW5pdHlSZXNvdXJjYWJsZSB7XG4gICAgaXNDb21tdW5pdHlSZXNvdXJjZSgpOiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb21tdW5pdHlSZXNvdXJjYWJsZSh2YWx1ZTogYW55KTogdmFsdWUgaXMgQ29tbXVuaXR5UmVzb3VyY2FibGUge1xuICAgIHJldHVybiAodmFsdWUgJiYgdHlwZW9mKHZhbHVlLmlzQ29tbXVuaXR5UmVzb3VyY2UpID09PSBcImZ1bmN0aW9uXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb21tdW5pdHlSZXNvdXJjZSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChpc0NvbW11bml0eVJlc291cmNhYmxlKHZhbHVlKSAmJiB2YWx1ZS5pc0NvbW11bml0eVJlc291cmNlKCkpO1xufVxuXG4vLyBTaG93IHRoZSB0aHJvdHRsZSBtZXNzYWdlIG9ubHkgb25jZVxubGV0IHRocm90dGxlTWVzc2FnZSA9IGZhbHNlO1xuZXhwb3J0IGZ1bmN0aW9uIHNob3dUaHJvdHRsZU1lc3NhZ2UoKSB7XG4gICAgaWYgKHRocm90dGxlTWVzc2FnZSkgeyByZXR1cm47IH1cbiAgICB0aHJvdHRsZU1lc3NhZ2UgPSB0cnVlO1xuXG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT0gTk9USUNFID09PT09PT09PVwiKVxuICAgIGNvbnNvbGUubG9nKFwiUmVxdWVzdC1SYXRlIEV4Y2VlZGVkICAodGhpcyBtZXNzYWdlIHdpbGwgbm90IGJlIHJlcGVhdGVkKVwiKTtcbiAgICBjb25zb2xlLmxvZyhcIlwiKTtcbiAgICBjb25zb2xlLmxvZyhcIlRoZSBkZWZhdWx0IEFQSSBrZXlzIGZvciBlYWNoIHNlcnZpY2UgYXJlIHByb3ZpZGVkIGFzIGEgaGlnaGx5LXRocm90dGxlZCxcIik7XG4gICAgY29uc29sZS5sb2coXCJjb21tdW5pdHkgcmVzb3VyY2UgZm9yIGxvdy10cmFmZmljIHByb2plY3RzIGFuZCBlYXJseSBwcm90b3R5cGluZy5cIik7XG4gICAgY29uc29sZS5sb2coXCJcIik7XG4gICAgY29uc29sZS5sb2coXCJXaGlsZSB5b3VyIGFwcGxpY2F0aW9uIHdpbGwgY29udGludWUgdG8gZnVuY3Rpb24sIHdlIGhpZ2hseSByZWNvbW1lbmRlZFwiKTtcbiAgICBjb25zb2xlLmxvZyhcInNpZ25pbmcgdXAgZm9yIHlvdXIgb3duIEFQSSBrZXlzIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UsIGluY3JlYXNlIHlvdXJcIik7XG4gICAgY29uc29sZS5sb2coXCJyZXF1ZXN0IHJhdGUvbGltaXQgYW5kIGVuYWJsZSBvdGhlciBwZXJrcywgc3VjaCBhcyBtZXRyaWNzIGFuZCBhZHZhbmNlZCBBUElzLlwiKTtcbiAgICBjb25zb2xlLmxvZyhcIlwiKTtcbiAgICBjb25zb2xlLmxvZyhcIkZvciBtb3JlIGRldGFpbHM6IGh0dHBzOi9cXC9kb2NzLmV0aGVycy5pby9hcGkta2V5cy9cIik7XG4gICAgY29uc29sZS5sb2coXCI9PT09PT09PT09PT09PT09PT09PT09PT09PVwiKTtcbn1cblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7XG4gICAgQmxvY2ssIEJsb2NrVGFnLCBCbG9ja1dpdGhUcmFuc2FjdGlvbnMsIEV2ZW50VHlwZSwgRmlsdGVyLCBGaWx0ZXJCeUJsb2NrSGFzaCwgRm9ya0V2ZW50LFxuICAgIExpc3RlbmVyLCBMb2csIFByb3ZpZGVyLCBUcmFuc2FjdGlvblJlY2VpcHQsIFRyYW5zYWN0aW9uUmVxdWVzdCwgVHJhbnNhY3Rpb25SZXNwb25zZVxufSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYWJzdHJhY3QtcHJvdmlkZXJcIjtcbmltcG9ydCB7IGVuY29kZSBhcyBiYXNlNjRFbmNvZGUgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYmFzZTY0XCI7XG5pbXBvcnQgeyBCYXNlNTggfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYmFzZXhcIjtcbmltcG9ydCB7IEJpZ051bWJlciwgQmlnTnVtYmVyaXNoIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2JpZ251bWJlclwiO1xuaW1wb3J0IHsgYXJyYXlpZnksIEJ5dGVzTGlrZSwgY29uY2F0LCBoZXhDb25jYXQsIGhleERhdGFMZW5ndGgsIGhleERhdGFTbGljZSwgaGV4bGlmeSwgaGV4VmFsdWUsIGhleFplcm9QYWQsIGlzSGV4U3RyaW5nIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBIYXNoWmVybyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9jb25zdGFudHNcIjtcbmltcG9ydCB7IGRuc0VuY29kZSwgbmFtZWhhc2ggfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvaGFzaFwiO1xuaW1wb3J0IHsgZ2V0TmV0d29yaywgTmV0d29yaywgTmV0d29ya2lzaCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9uZXR3b3Jrc1wiO1xuaW1wb3J0IHsgRGVmZXJyYWJsZSwgZGVmaW5lUmVhZE9ubHksIGdldFN0YXRpYywgcmVzb2x2ZVByb3BlcnRpZXMgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiO1xuaW1wb3J0IHsgVHJhbnNhY3Rpb24gfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvdHJhbnNhY3Rpb25zXCI7XG5pbXBvcnQgeyBzaGEyNTYgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvc2hhMlwiO1xuaW1wb3J0IHsgdG9VdGY4Qnl0ZXMsIHRvVXRmOFN0cmluZyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9zdHJpbmdzXCI7XG5pbXBvcnQgeyBmZXRjaEpzb24sIHBvbGwgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvd2ViXCI7XG5cbmltcG9ydCBiZWNoMzIgZnJvbSBcImJlY2gzMlwiO1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5cbmltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gXCIuL2Zvcm1hdHRlclwiO1xuXG5jb25zdCBNQVhfQ0NJUF9SRURJUkVDVFMgPSAxMDtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBFdmVudCBTZXJpYWxpemVpbmdcblxuZnVuY3Rpb24gY2hlY2tUb3BpYyh0b3BpYzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgaWYgKHRvcGljID09IG51bGwpIHsgcmV0dXJuIFwibnVsbFwiOyB9XG4gICAgIGlmIChoZXhEYXRhTGVuZ3RoKHRvcGljKSAhPT0gMzIpIHtcbiAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHRvcGljXCIsIFwidG9waWNcIiwgdG9waWMpO1xuICAgICB9XG4gICAgIHJldHVybiB0b3BpYy50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemVUb3BpY3ModG9waWNzOiBBcnJheTxzdHJpbmcgfCBBcnJheTxzdHJpbmc+Pik6IHN0cmluZyB7XG4gICAgLy8gUmVtb3ZlIHRyYWlsaW5nIG51bGwgQU5ELXRvcGljczsgdGhleSBhcmUgcmVkdW5kYW50XG4gICAgdG9waWNzID0gdG9waWNzLnNsaWNlKCk7XG4gICAgd2hpbGUgKHRvcGljcy5sZW5ndGggPiAwICYmIHRvcGljc1t0b3BpY3MubGVuZ3RoIC0gMV0gPT0gbnVsbCkgeyB0b3BpY3MucG9wKCk7IH1cblxuICAgIHJldHVybiB0b3BpY3MubWFwKCh0b3BpYykgPT4ge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0b3BpYykpIHtcblxuICAgICAgICAgICAgLy8gT25seSB0cmFjayB1bmlxdWUgT1ItdG9waWNzXG4gICAgICAgICAgICBjb25zdCB1bmlxdWU6IHsgWyB0b3BpYzogc3RyaW5nIF06IGJvb2xlYW4gfSA9IHsgfVxuICAgICAgICAgICAgdG9waWMuZm9yRWFjaCgodG9waWMpID0+IHtcbiAgICAgICAgICAgICAgICB1bmlxdWVbY2hlY2tUb3BpYyh0b3BpYyldID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBUaGUgb3JkZXIgb2YgT1ItdG9waWNzIGRvZXMgbm90IG1hdHRlclxuICAgICAgICAgICAgY29uc3Qgc29ydGVkID0gT2JqZWN0LmtleXModW5pcXVlKTtcbiAgICAgICAgICAgIHNvcnRlZC5zb3J0KCk7XG5cbiAgICAgICAgICAgIHJldHVybiBzb3J0ZWQuam9pbihcInxcIik7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVja1RvcGljKHRvcGljKTtcbiAgICAgICAgfVxuICAgIH0pLmpvaW4oXCImXCIpO1xufVxuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZVRvcGljcyhkYXRhOiBzdHJpbmcpOiBBcnJheTxzdHJpbmcgfCBBcnJheTxzdHJpbmc+PiB7XG4gICAgaWYgKGRhdGEgPT09IFwiXCIpIHsgcmV0dXJuIFsgXTsgfVxuXG4gICAgcmV0dXJuIGRhdGEuc3BsaXQoLyYvZykubWFwKCh0b3BpYykgPT4ge1xuICAgICAgICBpZiAodG9waWMgPT09IFwiXCIpIHsgcmV0dXJuIFsgXTsgfVxuXG4gICAgICAgIGNvbnN0IGNvbXBzID0gdG9waWMuc3BsaXQoXCJ8XCIpLm1hcCgodG9waWMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoKHRvcGljID09PSBcIm51bGxcIikgPyBudWxsOiB0b3BpYyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiAoKGNvbXBzLmxlbmd0aCA9PT0gMSkgPyBjb21wc1swXTogY29tcHMpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRFdmVudFRhZyhldmVudE5hbWU6IEV2ZW50VHlwZSk6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZihldmVudE5hbWUpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGV2ZW50TmFtZSA9IGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGlmIChoZXhEYXRhTGVuZ3RoKGV2ZW50TmFtZSkgPT09IDMyKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJ0eDpcIiArIGV2ZW50TmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudE5hbWUuaW5kZXhPZihcIjpcIikgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnROYW1lO1xuICAgICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnROYW1lKSkge1xuICAgICAgICByZXR1cm4gXCJmaWx0ZXI6KjpcIiArIHNlcmlhbGl6ZVRvcGljcyhldmVudE5hbWUpO1xuXG4gICAgfSBlbHNlIGlmIChGb3JrRXZlbnQuaXNGb3JrRXZlbnQoZXZlbnROYW1lKSkge1xuICAgICAgICBsb2dnZXIud2FybihcIm5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm90IGltcGxlbWVudGVkXCIpO1xuXG4gICAgfSBlbHNlIGlmIChldmVudE5hbWUgJiYgdHlwZW9mKGV2ZW50TmFtZSkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmV0dXJuIFwiZmlsdGVyOlwiICsgKGV2ZW50TmFtZS5hZGRyZXNzIHx8IFwiKlwiKSArIFwiOlwiICsgc2VyaWFsaXplVG9waWNzKGV2ZW50TmFtZS50b3BpY3MgfHwgW10pO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZXZlbnQgLSBcIiArIGV2ZW50TmFtZSk7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gSGVscGVyIE9iamVjdFxuXG5mdW5jdGlvbiBnZXRUaW1lKCkge1xuICAgIHJldHVybiAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xufVxuXG5mdW5jdGlvbiBzdGFsbChkdXJhdGlvbjogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgZHVyYXRpb24pO1xuICAgIH0pO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFByb3ZpZGVyIE9iamVjdFxuXG5cbi8qKlxuICogIEV2ZW50VHlwZVxuICogICAtIFwiYmxvY2tcIlxuICogICAtIFwicG9sbFwiXG4gKiAgIC0gXCJkaWRQb2xsXCJcbiAqICAgLSBcInBlbmRpbmdcIlxuICogICAtIFwiZXJyb3JcIlxuICogICAtIFwibmV0d29ya1wiXG4gKiAgIC0gZmlsdGVyXG4gKiAgIC0gdG9waWNzIGFycmF5XG4gKiAgIC0gdHJhbnNhY3Rpb24gaGFzaFxuICovXG5cbmNvbnN0IFBvbGxhYmxlRXZlbnRzID0gWyBcImJsb2NrXCIsIFwibmV0d29ya1wiLCBcInBlbmRpbmdcIiwgXCJwb2xsXCIgXTtcblxuZXhwb3J0IGNsYXNzIEV2ZW50IHtcbiAgICByZWFkb25seSBsaXN0ZW5lcjogTGlzdGVuZXI7XG4gICAgcmVhZG9ubHkgb25jZTogYm9vbGVhbjtcbiAgICByZWFkb25seSB0YWc6IHN0cmluZztcblxuICAgIF9sYXN0QmxvY2tOdW1iZXI6IG51bWJlclxuICAgIF9pbmZsaWdodDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHRhZzogc3RyaW5nLCBsaXN0ZW5lcjogTGlzdGVuZXIsIG9uY2U6IGJvb2xlYW4pIHtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJ0YWdcIiwgdGFnKTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJsaXN0ZW5lclwiLCBsaXN0ZW5lcik7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwib25jZVwiLCBvbmNlKTtcblxuICAgICAgICB0aGlzLl9sYXN0QmxvY2tOdW1iZXIgPSAtMjtcbiAgICAgICAgdGhpcy5faW5mbGlnaHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXQgZXZlbnQoKTogRXZlbnRUeXBlIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ0eFwiOlxuICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFzaDtcbiAgICAgICAgICAgIGNhc2UgXCJmaWx0ZXJcIjpcbiAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50YWc7XG4gICAgfVxuXG4gICAgZ2V0IHR5cGUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFnLnNwbGl0KFwiOlwiKVswXVxuICAgIH1cblxuICAgIGdldCBoYXNoKCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGNvbXBzID0gdGhpcy50YWcuc3BsaXQoXCI6XCIpO1xuICAgICAgICBpZiAoY29tcHNbMF0gIT09IFwidHhcIikgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICByZXR1cm4gY29tcHNbMV07XG4gICAgfVxuXG4gICAgZ2V0IGZpbHRlcigpOiBGaWx0ZXIge1xuICAgICAgICBjb25zdCBjb21wcyA9IHRoaXMudGFnLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgaWYgKGNvbXBzWzBdICE9PSBcImZpbHRlclwiKSB7IHJldHVybiBudWxsOyB9XG4gICAgICAgIGNvbnN0IGFkZHJlc3MgPSBjb21wc1sxXTtcblxuICAgICAgICBjb25zdCB0b3BpY3MgPSBkZXNlcmlhbGl6ZVRvcGljcyhjb21wc1syXSk7XG4gICAgICAgIGNvbnN0IGZpbHRlcjogRmlsdGVyID0geyB9O1xuXG4gICAgICAgIGlmICh0b3BpY3MubGVuZ3RoID4gMCkgeyBmaWx0ZXIudG9waWNzID0gdG9waWNzOyB9XG4gICAgICAgIGlmIChhZGRyZXNzICYmIGFkZHJlc3MgIT09IFwiKlwiKSB7IGZpbHRlci5hZGRyZXNzID0gYWRkcmVzczsgfVxuXG4gICAgICAgIHJldHVybiBmaWx0ZXI7XG4gICAgfVxuXG4gICAgcG9sbGFibGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAodGhpcy50YWcuaW5kZXhPZihcIjpcIikgPj0gMCB8fCBQb2xsYWJsZUV2ZW50cy5pbmRleE9mKHRoaXMudGFnKSA+PSAwKTtcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW5zUmVzb2x2ZXIge1xuXG4gICAgLy8gTmFtZSB0aGlzIFJlc29sdmVyIGlzIGFzc29jaWF0ZWQgd2l0aFxuICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcblxuICAgIC8vIFRoZSBhZGRyZXNzIG9mIHRoZSByZXNvbHZlclxuICAgIHJlYWRvbmx5IGFkZHJlc3M6IHN0cmluZztcblxuICAgIC8vIE11bHRpY2hhaW4gYWRkcmVzcyByZXNvbHV0aW9uIChhbHNvIG5vcm1hbCBhZGRyZXNzIHJlc29sdXRpb24pXG4gICAgLy8gU2VlOiBodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTIzMDRcbiAgICBnZXRBZGRyZXNzKGNvaW5UeXBlPzogNjApOiBQcm9taXNlPG51bGwgfCBzdHJpbmc+XG5cbiAgICAvLyBDb250ZW50aGFzaCBmaWVsZFxuICAgIC8vIFNlZTogaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0xNTc3XG4gICAgZ2V0Q29udGVudEhhc2goKTogUHJvbWlzZTxudWxsIHwgc3RyaW5nPjtcblxuICAgIC8vIFN0b3JhZ2Ugb2YgdGV4dCByZWNvcmRzXG4gICAgLy8gU2VlOiBodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTYzNFxuICAgIGdldFRleHQoa2V5OiBzdHJpbmcpOiBQcm9taXNlPG51bGwgfCBzdHJpbmc+O1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBFbnNQcm92aWRlciB7XG4gICAgcmVzb2x2ZU5hbWUobmFtZTogc3RyaW5nKTogUHJvbWlzZTxudWxsIHwgc3RyaW5nPjtcbiAgICBsb29rdXBBZGRyZXNzKGFkZHJlc3M6IHN0cmluZyk6IFByb21pc2U8bnVsbCB8IHN0cmluZz47XG4gICAgZ2V0UmVzb2x2ZXIobmFtZTogc3RyaW5nKTogUHJvbWlzZTxudWxsIHwgRW5zUmVzb2x2ZXI+O1xufVxuXG50eXBlIENvaW5JbmZvID0ge1xuICAgIHN5bWJvbDogc3RyaW5nLFxuICAgIGlsaz86IHN0cmluZywgICAgIC8vIEdlbmVyYWwgZmFtaWx5XG4gICAgcHJlZml4Pzogc3RyaW5nLCAgLy8gQmVjaDMyIHByZWZpeFxuICAgIHAycGtoPzogbnVtYmVyLCAgIC8vIFBheS10by1QdWJsaWMtS2V5LUhhc2ggVmVyc2lvblxuICAgIHAyc2g/OiBudW1iZXIsICAgIC8vIFBheS10by1TY3JpcHQtSGFzaCBWZXJzaW9uXG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2F0b3NoaWxhYnMvc2xpcHMvYmxvYi9tYXN0ZXIvc2xpcC0wMDQ0Lm1kXG5jb25zdCBjb2luSW5mb3M6IHsgWyBjb2luVHlwZTogc3RyaW5nIF06IENvaW5JbmZvIH0gPSB7XG4gICAgXCIwXCI6ICAgeyBzeW1ib2w6IFwiYnRjXCIsICBwMnBraDogMHgwMCwgcDJzaDogMHgwNSwgcHJlZml4OiBcImJjXCIgfSxcbiAgICBcIjJcIjogICB7IHN5bWJvbDogXCJsdGNcIiwgIHAycGtoOiAweDMwLCBwMnNoOiAweDMyLCBwcmVmaXg6IFwibHRjXCIgfSxcbiAgICBcIjNcIjogICB7IHN5bWJvbDogXCJkb2dlXCIsIHAycGtoOiAweDFlLCBwMnNoOiAweDE2IH0sXG4gICAgXCI2MFwiOiAgeyBzeW1ib2w6IFwiZXRoXCIsICBpbGs6IFwiZXRoXCIgfSxcbiAgICBcIjYxXCI6ICB7IHN5bWJvbDogXCJldGNcIiwgIGlsazogXCJldGhcIiB9LFxuICAgIFwiNzAwXCI6IHsgc3ltYm9sOiBcInhkYWlcIiwgaWxrOiBcImV0aFwiIH0sXG59O1xuXG5mdW5jdGlvbiBieXRlczMyaWZ5KHZhbHVlOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBoZXhaZXJvUGFkKEJpZ051bWJlci5mcm9tKHZhbHVlKS50b0hleFN0cmluZygpLCAzMik7XG59XG5cbi8vIENvbXB1dGUgdGhlIEJhc2U1OENoZWNrIGVuY29kZWQgZGF0YSAoY2hlY2tzdW0gaXMgZmlyc3QgNCBieXRlcyBvZiBzaGEyNTZkKVxuZnVuY3Rpb24gYmFzZTU4RW5jb2RlKGRhdGE6IFVpbnQ4QXJyYXkpOiBzdHJpbmcge1xuICAgIHJldHVybiBCYXNlNTguZW5jb2RlKGNvbmNhdChbIGRhdGEsIGhleERhdGFTbGljZShzaGEyNTYoc2hhMjU2KGRhdGEpKSwgMCwgNCkgXSkpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF2YXRhciB7XG4gICAgdXJsOiBzdHJpbmc7XG4gICAgbGlua2FnZTogQXJyYXk8eyB0eXBlOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZyB9Pjtcbn1cblxuY29uc3QgbWF0Y2hlcklwZnMgPSBuZXcgUmVnRXhwKFwiXihpcGZzKTovXFwvKC4qKSRcIiwgXCJpXCIpO1xuY29uc3QgbWF0Y2hlcnMgPSBbXG4gICAgbmV3IFJlZ0V4cChcIl4oaHR0cHMpOi9cXC8oLiopJFwiLCBcImlcIiksXG4gICAgbmV3IFJlZ0V4cChcIl4oZGF0YSk6KC4qKSRcIiwgXCJpXCIpLFxuICAgIG1hdGNoZXJJcGZzLFxuICAgIG5ldyBSZWdFeHAoXCJeZWlwMTU1OlswLTldKy8oZXJjWzAtOV0rKTooLiopJFwiLCBcImlcIiksXG5dO1xuXG5mdW5jdGlvbiBfcGFyc2VTdHJpbmcocmVzdWx0OiBzdHJpbmcsIHN0YXJ0OiBudW1iZXIpOiBudWxsIHwgc3RyaW5nIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gdG9VdGY4U3RyaW5nKF9wYXJzZUJ5dGVzKHJlc3VsdCwgc3RhcnQpKTtcbiAgICB9IGNhdGNoKGVycm9yKSB7IH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gX3BhcnNlQnl0ZXMocmVzdWx0OiBzdHJpbmcsIHN0YXJ0OiBudW1iZXIpOiBudWxsIHwgc3RyaW5nIHtcbiAgICBpZiAocmVzdWx0ID09PSBcIjB4XCIpIHsgcmV0dXJuIG51bGw7IH1cblxuICAgIGNvbnN0IG9mZnNldCA9IEJpZ051bWJlci5mcm9tKGhleERhdGFTbGljZShyZXN1bHQsIHN0YXJ0LCBzdGFydCArIDMyKSkudG9OdW1iZXIoKTtcbiAgICBjb25zdCBsZW5ndGggPSBCaWdOdW1iZXIuZnJvbShoZXhEYXRhU2xpY2UocmVzdWx0LCBvZmZzZXQsIG9mZnNldCArIDMyKSkudG9OdW1iZXIoKTtcblxuICAgIHJldHVybiBoZXhEYXRhU2xpY2UocmVzdWx0LCBvZmZzZXQgKyAzMiwgb2Zmc2V0ICsgMzIgKyBsZW5ndGgpO1xufVxuXG4vLyBUcmltIG9mZiB0aGUgaXBmczovLyBwcmVmaXggYW5kIHJldHVybiB0aGUgZGVmYXVsdCBnYXRld2F5IFVSTFxuZnVuY3Rpb24gZ2V0SXBmc0xpbmsobGluazogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAobGluay5tYXRjaCgvXmlwZnM6XFwvXFwvaXBmc1xcLy9pKSkge1xuICAgICAgICBsaW5rID0gbGluay5zdWJzdHJpbmcoMTIpO1xuICAgIH0gZWxzZSBpZiAobGluay5tYXRjaCgvXmlwZnM6XFwvXFwvL2kpKSB7XG4gICAgICAgIGxpbmsgPSBsaW5rLnN1YnN0cmluZyg3KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidW5zdXBwb3J0ZWQgSVBGUyBmb3JtYXRcIiwgXCJsaW5rXCIsIGxpbmspO1xuICAgIH1cblxuICAgIHJldHVybiBgaHR0cHM6L1xcL2dhdGV3YXkuaXBmcy5pby9pcGZzLyR7IGxpbmsgfWA7XG59XG5cbmZ1bmN0aW9uIG51bVBhZCh2YWx1ZTogbnVtYmVyKTogVWludDhBcnJheSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXJyYXlpZnkodmFsdWUpO1xuICAgIGlmIChyZXN1bHQubGVuZ3RoID4gMzIpIHsgdGhyb3cgbmV3IEVycm9yKFwiaW50ZXJuYWw7IHNob3VsZCBub3QgaGFwcGVuXCIpOyB9XG5cbiAgICBjb25zdCBwYWRkZWQgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgcGFkZGVkLnNldChyZXN1bHQsIDMyIC0gcmVzdWx0Lmxlbmd0aCk7XG4gICAgcmV0dXJuIHBhZGRlZDtcbn1cblxuZnVuY3Rpb24gYnl0ZXNQYWQodmFsdWU6IFVpbnQ4QXJyYXkpOiBVaW50OEFycmF5IHtcbiAgICBpZiAoKHZhbHVlLmxlbmd0aCAlIDMyKSA9PT0gMCkgeyByZXR1cm4gdmFsdWU7IH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KE1hdGguY2VpbCh2YWx1ZS5sZW5ndGggLyAzMikgKiAzMik7XG4gICAgcmVzdWx0LnNldCh2YWx1ZSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gQUJJIEVuY29kZXMgYSBzZXJpZXMgb2YgKGJ5dGVzLCBieXRlcywgLi4uKVxuZnVuY3Rpb24gZW5jb2RlQnl0ZXMoZGF0YXM6IEFycmF5PEJ5dGVzTGlrZT4pIHtcbiAgICBjb25zdCByZXN1bHQ6IEFycmF5PFVpbnQ4QXJyYXk+ID0gWyBdO1xuXG4gICAgbGV0IGJ5dGVDb3VudCA9IDA7XG5cbiAgICAvLyBBZGQgcGxhY2UtaG9sZGVycyBmb3IgcG9pbnRlcnMgYXMgd2UgYWRkIGl0ZW1zXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhcy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQucHVzaChudWxsKTtcbiAgICAgICAgYnl0ZUNvdW50ICs9IDMyO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGFycmF5aWZ5KGRhdGFzW2ldKTtcblxuICAgICAgICAvLyBVcGRhdGUgdGhlIGJ5dGVzIG9mZnNldFxuICAgICAgICByZXN1bHRbaV0gPSBudW1QYWQoYnl0ZUNvdW50KTtcblxuICAgICAgICAvLyBUaGUgbGVuZ3RoIGFuZCBwYWRkZWQgdmFsdWUgb2YgZGF0YVxuICAgICAgICByZXN1bHQucHVzaChudW1QYWQoZGF0YS5sZW5ndGgpKTtcbiAgICAgICAgcmVzdWx0LnB1c2goYnl0ZXNQYWQoZGF0YSkpO1xuICAgICAgICBieXRlQ291bnQgKz0gMzIgKyBNYXRoLmNlaWwoZGF0YS5sZW5ndGggLyAzMikgKiAzMjtcbiAgICB9XG5cbiAgICByZXR1cm4gaGV4Q29uY2F0KHJlc3VsdCk7XG59XG5cbmV4cG9ydCBjbGFzcyBSZXNvbHZlciBpbXBsZW1lbnRzIEVuc1Jlc29sdmVyIHtcbiAgICByZWFkb25seSBwcm92aWRlcjogQmFzZVByb3ZpZGVyO1xuXG4gICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGFkZHJlc3M6IHN0cmluZztcblxuICAgIHJlYWRvbmx5IF9yZXNvbHZlZEFkZHJlc3M6IG51bGwgfCBzdHJpbmc7XG5cbiAgICAvLyBGb3IgRUlQLTI1NDQgbmFtZXMsIHRoZSBhbmNlc3RvciB0aGF0IHByb3ZpZGVkIHRoZSByZXNvbHZlclxuICAgIF9zdXBwb3J0c0VpcDI1NDQ6IG51bGwgfCBQcm9taXNlPGJvb2xlYW4+O1xuXG4gICAgLy8gVGhlIHJlc29sdmVkQWRkcmVzcyBpcyBvbmx5IGZvciBjcmVhdGluZyBhIFJldmVyc2VMb29rdXAgcmVzb2x2ZXJcbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlcjogQmFzZVByb3ZpZGVyLCBhZGRyZXNzOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgcmVzb2x2ZWRBZGRyZXNzPzogc3RyaW5nKSB7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwicHJvdmlkZXJcIiwgcHJvdmlkZXIpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIm5hbWVcIiwgbmFtZSk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiYWRkcmVzc1wiLCBwcm92aWRlci5mb3JtYXR0ZXIuYWRkcmVzcyhhZGRyZXNzKSk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiX3Jlc29sdmVkQWRkcmVzc1wiLCByZXNvbHZlZEFkZHJlc3MpO1xuICAgIH1cblxuICAgIHN1cHBvcnRzV2lsZGNhcmQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGlmICghdGhpcy5fc3VwcG9ydHNFaXAyNTQ0KSB7XG4gICAgICAgICAgICAvLyBzdXBwb3J0c0ludGVyZmFjZShieXRlczQgPSBzZWxlY3RvcihcInJlc29sdmUoYnl0ZXMsYnl0ZXMpXCIpKVxuICAgICAgICAgICAgdGhpcy5fc3VwcG9ydHNFaXAyNTQ0ID0gdGhpcy5wcm92aWRlci5jYWxsKHtcbiAgICAgICAgICAgICAgICB0bzogdGhpcy5hZGRyZXNzLFxuICAgICAgICAgICAgICAgIGRhdGE6IFwiMHgwMWZmYzlhNzkwNjFiOTIzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIlxuICAgICAgICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJpZ051bWJlci5mcm9tKHJlc3VsdCkuZXEoMSk7XG4gICAgICAgICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gTG9nZ2VyLmVycm9ycy5DQUxMX0VYQ0VQVElPTikgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgICAgICAgICAvLyBSZXRocm93IHRoZSBlcnJvcjogbGluayBpcyBkb3duLCBldGMuIExldCBmdXR1cmUgYXR0ZW1wdHMgcmV0cnkuXG4gICAgICAgICAgICAgICAgdGhpcy5fc3VwcG9ydHNFaXAyNTQ0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1cHBvcnRzRWlwMjU0NDtcbiAgICB9XG5cbiAgICBhc3luYyBfZmV0Y2goc2VsZWN0b3I6IHN0cmluZywgcGFyYW1ldGVycz86IHN0cmluZyk6IFByb21pc2U8bnVsbCB8IHN0cmluZz4ge1xuXG4gICAgICAgIC8vIGUuZy4ga2VjY2FrMjU2KFwiYWRkcihieXRlczMyLHVpbnQyNTYpXCIpXG4gICAgICAgIGNvbnN0IHR4ID0ge1xuICAgICAgICAgICAgdG86IHRoaXMuYWRkcmVzcyxcbiAgICAgICAgICAgIGNjaXBSZWFkRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIGRhdGE6IGhleENvbmNhdChbIHNlbGVjdG9yLCBuYW1laGFzaCh0aGlzLm5hbWUpLCAocGFyYW1ldGVycyB8fCBcIjB4XCIpIF0pXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gV2lsZGNhcmQgc3VwcG9ydDsgdXNlIEVJUC0yNTQ0IHRvIHJlc29sdmUgdGhlIHJlcXVlc3RcbiAgICAgICAgbGV0IHBhcnNlQnl0ZXMgPSBmYWxzZTtcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMuc3VwcG9ydHNXaWxkY2FyZCgpKSB7XG4gICAgICAgICAgICBwYXJzZUJ5dGVzID0gdHJ1ZTtcblxuICAgICAgICAgICAgLy8gc2VsZWN0b3IoXCJyZXNvbHZlKGJ5dGVzLGJ5dGVzKVwiKVxuICAgICAgICAgICAgdHguZGF0YSA9IGhleENvbmNhdChbIFwiMHg5MDYxYjkyM1wiLCBlbmNvZGVCeXRlcyhbIGRuc0VuY29kZSh0aGlzLm5hbWUpLCB0eC5kYXRhIF0pIF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCB0aGlzLnByb3ZpZGVyLmNhbGwodHgpO1xuICAgICAgICAgICAgaWYgKChhcnJheWlmeShyZXN1bHQpLmxlbmd0aCAlIDMyKSA9PT0gNCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwicmVzb2x2ZXIgdGhyZXcgZXJyb3JcIiwgTG9nZ2VyLmVycm9ycy5DQUxMX0VYQ0VQVElPTiwge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjogdHgsIGRhdGE6IHJlc3VsdFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcnNlQnl0ZXMpIHsgcmVzdWx0ID0gX3BhcnNlQnl0ZXMocmVzdWx0LCAwKTsgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvci5jb2RlID09PSBMb2dnZXIuZXJyb3JzLkNBTExfRVhDRVBUSU9OKSB7IHJldHVybiBudWxsOyB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIF9mZXRjaEJ5dGVzKHNlbGVjdG9yOiBzdHJpbmcsIHBhcmFtZXRlcnM/OiBzdHJpbmcpOiBQcm9taXNlPG51bGwgfCBzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fZmV0Y2goc2VsZWN0b3IsIHBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAocmVzdWx0ICE9IG51bGwpIHsgcmV0dXJuIF9wYXJzZUJ5dGVzKHJlc3VsdCwgMCk7IH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgX2dldEFkZHJlc3MoY29pblR5cGU6IG51bWJlciwgaGV4Qnl0ZXM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGNvaW5JbmZvID0gY29pbkluZm9zW1N0cmluZyhjb2luVHlwZSldO1xuXG4gICAgICAgIGlmIChjb2luSW5mbyA9PSBudWxsKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihgdW5zdXBwb3J0ZWQgY29pbiB0eXBlOiAkeyBjb2luVHlwZSB9YCwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IGBnZXRBZGRyZXNzKCR7IGNvaW5UeXBlIH0pYFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29pbkluZm8uaWxrID09PSBcImV0aFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlci5mb3JtYXR0ZXIuYWRkcmVzcyhoZXhCeXRlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBieXRlcyA9IGFycmF5aWZ5KGhleEJ5dGVzKTtcblxuICAgICAgICAvLyBQMlBLSDogT1BfRFVQIE9QX0hBU0gxNjAgPHB1YktleUhhc2g+IE9QX0VRVUFMVkVSSUZZIE9QX0NIRUNLU0lHXG4gICAgICAgIGlmIChjb2luSW5mby5wMnBraCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBwMnBraCA9IGhleEJ5dGVzLm1hdGNoKC9eMHg3NmE5KFswLTlhLWZdWzAtOWEtZl0pKFswLTlhLWZdKik4OGFjJC8pO1xuICAgICAgICAgICAgaWYgKHAycGtoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gcGFyc2VJbnQocDJwa2hbMV0sIDE2KTtcbiAgICAgICAgICAgICAgICBpZiAocDJwa2hbMl0ubGVuZ3RoID09PSBsZW5ndGggKiAyICYmIGxlbmd0aCA+PSAxICYmIGxlbmd0aCA8PSA3NSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmFzZTU4RW5jb2RlKGNvbmNhdChbIFsgY29pbkluZm8ucDJwa2ggXSwgKFwiMHhcIiArIHAycGtoWzJdKSBdKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUDJTSDogT1BfSEFTSDE2MCA8c2NyaXB0SGFzaD4gT1BfRVFVQUxcbiAgICAgICAgaWYgKGNvaW5JbmZvLnAyc2ggIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgcDJzaCA9IGhleEJ5dGVzLm1hdGNoKC9eMHhhOShbMC05YS1mXVswLTlhLWZdKShbMC05YS1mXSopODckLyk7XG4gICAgICAgICAgICBpZiAocDJzaCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHBhcnNlSW50KHAyc2hbMV0sIDE2KTtcbiAgICAgICAgICAgICAgICBpZiAocDJzaFsyXS5sZW5ndGggPT09IGxlbmd0aCAqIDIgJiYgbGVuZ3RoID49IDEgJiYgbGVuZ3RoIDw9IDc1KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiYXNlNThFbmNvZGUoY29uY2F0KFsgWyBjb2luSW5mby5wMnNoIF0sIChcIjB4XCIgKyBwMnNoWzJdKSBdKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmVjaDMyXG4gICAgICAgIGlmIChjb2luSW5mby5wcmVmaXggIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gYnl0ZXNbMV07XG5cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAxNDEubWVkaWF3aWtpI3dpdG5lc3MtcHJvZ3JhbVxuICAgICAgICAgICAgbGV0IHZlcnNpb24gPSBieXRlc1swXTtcbiAgICAgICAgICAgIGlmICh2ZXJzaW9uID09PSAweDAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxlbmd0aCAhPT0gMjAgJiYgbGVuZ3RoICE9PSAzMikge1xuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uID0gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2ZXJzaW9uID0gLTE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2ZXJzaW9uID49IDAgJiYgYnl0ZXMubGVuZ3RoID09PSAyICsgbGVuZ3RoICYmIGxlbmd0aCA+PSAxICYmIGxlbmd0aCA8PSA3NSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHdvcmRzID0gYmVjaDMyLnRvV29yZHMoYnl0ZXMuc2xpY2UoMikpO1xuICAgICAgICAgICAgICAgIHdvcmRzLnVuc2hpZnQodmVyc2lvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJlY2gzMi5lbmNvZGUoY29pbkluZm8ucHJlZml4LCB3b3Jkcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cblxuICAgIGFzeW5jIGdldEFkZHJlc3MoY29pblR5cGU/OiBudW1iZXIpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBpZiAoY29pblR5cGUgPT0gbnVsbCkgeyBjb2luVHlwZSA9IDYwOyB9XG5cbiAgICAgICAgLy8gSWYgRXRoZXJldW0sIHVzZSB0aGUgc3RhbmRhcmQgYGFkZHIoYnl0ZXMzMilgXG4gICAgICAgIGlmIChjb2luVHlwZSA9PT0gNjApIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8ga2VjY2FrMjU2KFwiYWRkcihieXRlczMyKVwiKVxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2ZldGNoKFwiMHgzYjNiNTdkZVwiKTtcblxuICAgICAgICAgICAgICAgIC8vIE5vIGFkZHJlc3NcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSBcIjB4XCIgfHwgcmVzdWx0ID09PSBIYXNoWmVybykgeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuZm9ybWF0dGVyLmNhbGxBZGRyZXNzKHJlc3VsdCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvci5jb2RlID09PSBMb2dnZXIuZXJyb3JzLkNBTExfRVhDRVBUSU9OKSB7IHJldHVybiBudWxsOyB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBrZWNjYWsyNTYoXCJhZGRyKGJ5dGVzMzIsdWludDI1NlwiKVxuICAgICAgICBjb25zdCBoZXhCeXRlcyA9IGF3YWl0IHRoaXMuX2ZldGNoQnl0ZXMoXCIweGYxY2I3ZTA2XCIsIGJ5dGVzMzJpZnkoY29pblR5cGUpKTtcblxuICAgICAgICAvLyBObyBhZGRyZXNzXG4gICAgICAgIGlmIChoZXhCeXRlcyA9PSBudWxsIHx8IGhleEJ5dGVzID09PSBcIjB4XCIpIHsgcmV0dXJuIG51bGw7IH1cblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBhZGRyZXNzXG4gICAgICAgIGNvbnN0IGFkZHJlc3MgPSB0aGlzLl9nZXRBZGRyZXNzKGNvaW5UeXBlLCBoZXhCeXRlcyk7XG5cbiAgICAgICAgaWYgKGFkZHJlc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoYGludmFsaWQgb3IgdW5zdXBwb3J0ZWQgY29pbiBkYXRhYCwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgICAgICBvcGVyYXRpb246IGBnZXRBZGRyZXNzKCR7IGNvaW5UeXBlIH0pYCxcbiAgICAgICAgICAgICAgICBjb2luVHlwZTogY29pblR5cGUsXG4gICAgICAgICAgICAgICAgZGF0YTogaGV4Qnl0ZXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFkZHJlc3M7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QXZhdGFyKCk6IFByb21pc2U8bnVsbCB8IEF2YXRhcj4ge1xuICAgICAgICBjb25zdCBsaW5rYWdlOiBBcnJheTx7IHR5cGU6IHN0cmluZywgY29udGVudDogc3RyaW5nIH0+ID0gWyB7IHR5cGU6IFwibmFtZVwiLCBjb250ZW50OiB0aGlzLm5hbWUgfSBdO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gdGVzdCBkYXRhIGZvciByaWNtb28uZXRoXG4gICAgICAgICAgICAvL2NvbnN0IGF2YXRhciA9IFwiZWlwMTU1OjEvZXJjNzIxOjB4MjY1Mzg1YzdmNDEzMjIyOEEwZDU0RUIxQTllNzQ2MGI5MWMwY0M2OC8yOTIzM1wiO1xuICAgICAgICAgICAgY29uc3QgYXZhdGFyID0gYXdhaXQgdGhpcy5nZXRUZXh0KFwiYXZhdGFyXCIpO1xuICAgICAgICAgICAgaWYgKGF2YXRhciA9PSBudWxsKSB7IHJldHVybiBudWxsOyB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0Y2hlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaCA9IGF2YXRhci5tYXRjaChtYXRjaGVyc1tpXSk7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoID09IG51bGwpIHsgY29udGludWU7IH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHNjaGVtZSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHNjaGVtZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaHR0cHNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IFwidXJsXCIsIGNvbnRlbnQ6IGF2YXRhciB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGxpbmthZ2UsIHVybDogYXZhdGFyIH07XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImRhdGFcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IFwiZGF0YVwiLCBjb250ZW50OiBhdmF0YXIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBsaW5rYWdlLCB1cmw6IGF2YXRhciB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpcGZzXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcImlwZnNcIiwgY29udGVudDogYXZhdGFyIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgbGlua2FnZSwgdXJsOiBnZXRJcGZzTGluayhhdmF0YXIpIH07XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVyYzcyMVwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZXJjMTE1NVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXBlbmRpbmcgb24gdGhlIEVSQyB0eXBlLCB1c2UgdG9rZW5VUkkodWludDI1Nikgb3IgdXJsKHVpbnQyNTYpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RvciA9IChzY2hlbWUgPT09IFwiZXJjNzIxXCIpID8gXCIweGM4N2I1NmRkXCI6IFwiMHgwZTg5MzQxY1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogc2NoZW1lLCBjb250ZW50OiBhdmF0YXIgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBvd25lciBvZiB0aGlzIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG93bmVyID0gKHRoaXMuX3Jlc29sdmVkQWRkcmVzcyB8fCBhd2FpdCB0aGlzLmdldEFkZHJlc3MoKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBzID0gKG1hdGNoWzJdIHx8IFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb21wcy5sZW5ndGggIT09IDIpIHsgcmV0dXJuIG51bGw7IH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRkciA9IGF3YWl0IHRoaXMucHJvdmlkZXIuZm9ybWF0dGVyLmFkZHJlc3MoY29tcHNbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW5JZCA9IGhleFplcm9QYWQoQmlnTnVtYmVyLmZyb20oY29tcHNbMV0pLnRvSGV4U3RyaW5nKCksIDMyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGlzIGFjY291bnQgb3ducyB0aGUgdG9rZW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY2hlbWUgPT09IFwiZXJjNzIxXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvd25lck9mKHVpbnQyNTYgdG9rZW5JZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2tlbk93bmVyID0gdGhpcy5wcm92aWRlci5mb3JtYXR0ZXIuY2FsbEFkZHJlc3MoYXdhaXQgdGhpcy5wcm92aWRlci5jYWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG86IGFkZHIsIGRhdGE6IGhleENvbmNhdChbIFwiMHg2MzUyMjExZVwiLCB0b2tlbklkIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvd25lciAhPT0gdG9rZW5Pd25lcikgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IFwib3duZXJcIiwgY29udGVudDogdG9rZW5Pd25lciB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzY2hlbWUgPT09IFwiZXJjMTE1NVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmFsYW5jZU9mKGFkZHJlc3Mgb3duZXIsIHVpbnQyNTYgdG9rZW5JZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiYWxhbmNlID0gQmlnTnVtYmVyLmZyb20oYXdhaXQgdGhpcy5wcm92aWRlci5jYWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG86IGFkZHIsIGRhdGE6IGhleENvbmNhdChbIFwiMHgwMGZkZDU4ZVwiLCBoZXhaZXJvUGFkKG93bmVyLCAzMiksIHRva2VuSWQgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJhbGFuY2UuaXNaZXJvKCkpIHsgcmV0dXJuIG51bGw7IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcImJhbGFuY2VcIiwgY29udGVudDogYmFsYW5jZS50b1N0cmluZygpIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSB0b2tlbiBjb250cmFjdCBmb3IgdGhlIG1ldGFkYXRhIFVSTFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHggPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG86IHRoaXMucHJvdmlkZXIuZm9ybWF0dGVyLmFkZHJlc3MoY29tcHNbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGhleENvbmNhdChbIHNlbGVjdG9yLCB0b2tlbklkIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWV0YWRhdGFVcmwgPSBfcGFyc2VTdHJpbmcoYXdhaXQgdGhpcy5wcm92aWRlci5jYWxsKHR4KSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWV0YWRhdGFVcmwgPT0gbnVsbCkgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogXCJtZXRhZGF0YS11cmwtYmFzZVwiLCBjb250ZW50OiBtZXRhZGF0YVVybCB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRVJDLTExNTUgYWxsb3dzIGEgZ2VuZXJpYyB7aWR9IGluIHRoZSBVUkxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY2hlbWUgPT09IFwiZXJjMTE1NVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGFVcmwgPSBtZXRhZGF0YVVybC5yZXBsYWNlKFwie2lkfVwiLCB0b2tlbklkLnN1YnN0cmluZygyKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogXCJtZXRhZGF0YS11cmwtZXhwYW5kZWRcIiwgY29udGVudDogbWV0YWRhdGFVcmwgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyYW5zZm9ybSBJUEZTIG1ldGFkYXRhIGxpbmtzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWV0YWRhdGFVcmwubWF0Y2goL15pcGZzOi9pKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhVXJsID0gZ2V0SXBmc0xpbmsobWV0YWRhdGFVcmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5rYWdlLnB1c2goeyB0eXBlOiBcIm1ldGFkYXRhLXVybFwiLCBjb250ZW50OiBtZXRhZGF0YVVybCB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSB0b2tlbiBtZXRhZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBhd2FpdCBmZXRjaEpzb24obWV0YWRhdGFVcmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtZXRhZGF0YSkgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGlua2FnZS5wdXNoKHsgdHlwZTogXCJtZXRhZGF0YVwiLCBjb250ZW50OiBKU09OLnN0cmluZ2lmeShtZXRhZGF0YSkgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFB1bGwgdGhlIGltYWdlIFVSTCBvdXRcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbWFnZVVybCA9IG1ldGFkYXRhLmltYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZihpbWFnZVVybCkgIT09IFwic3RyaW5nXCIpIHsgcmV0dXJuIG51bGw7IH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlVXJsLm1hdGNoKC9eKGh0dHBzOlxcL1xcL3xkYXRhOikvaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbGxvd1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmFuc2Zvcm0gSVBGUyBsaW5rIHRvIGdhdGV3YXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpcGZzID0gaW1hZ2VVcmwubWF0Y2gobWF0Y2hlcklwZnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpcGZzID09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IFwidXJsLWlwZnNcIiwgY29udGVudDogaW1hZ2VVcmwgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VVcmwgPSBnZXRJcGZzTGluayhpbWFnZVVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmthZ2UucHVzaCh7IHR5cGU6IFwidXJsXCIsIGNvbnRlbnQ6IGltYWdlVXJsIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBsaW5rYWdlLCB1cmw6IGltYWdlVXJsIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRDb250ZW50SGFzaCgpOiBQcm9taXNlPHN0cmluZz4ge1xuXG4gICAgICAgIC8vIGtlY2NhazI1NihcImNvbnRlbnRoYXNoKClcIilcbiAgICAgICAgY29uc3QgaGV4Qnl0ZXMgPSBhd2FpdCB0aGlzLl9mZXRjaEJ5dGVzKFwiMHhiYzFjNThkMVwiKTtcblxuICAgICAgICAvLyBObyBjb250ZW50aGFzaFxuICAgICAgICBpZiAoaGV4Qnl0ZXMgPT0gbnVsbCB8fCBoZXhCeXRlcyA9PT0gXCIweFwiKSB7IHJldHVybiBudWxsOyB9XG5cbiAgICAgICAgLy8gSVBGUyAoQ0lEOiAxLCBUeXBlOiBEQUctUEIpXG4gICAgICAgIGNvbnN0IGlwZnMgPSBoZXhCeXRlcy5tYXRjaCgvXjB4ZTMwMTAxNzAoKFswLTlhLWZdWzAtOWEtZl0pKFswLTlhLWZdWzAtOWEtZl0pKFswLTlhLWZdKikpJC8pO1xuICAgICAgICBpZiAoaXBmcykge1xuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gcGFyc2VJbnQoaXBmc1szXSwgMTYpO1xuICAgICAgICAgICAgaWYgKGlwZnNbNF0ubGVuZ3RoID09PSBsZW5ndGggKiAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiaXBmczovXFwvXCIgKyBCYXNlNTguZW5jb2RlKFwiMHhcIiArIGlwZnNbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSVBOUyAoQ0lEOiAxLCBUeXBlOiBsaWJwMnAta2V5KVxuICAgICAgICBjb25zdCBpcG5zID0gaGV4Qnl0ZXMubWF0Y2goL14weGU1MDEwMTcyKChbMC05YS1mXVswLTlhLWZdKShbMC05YS1mXVswLTlhLWZdKShbMC05YS1mXSopKSQvKTtcbiAgICAgICAgaWYgKGlwbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHBhcnNlSW50KGlwbnNbM10sIDE2KTtcbiAgICAgICAgICAgIGlmIChpcG5zWzRdLmxlbmd0aCA9PT0gbGVuZ3RoICogMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBcImlwbnM6L1xcL1wiICsgQmFzZTU4LmVuY29kZShcIjB4XCIgKyBpcG5zWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN3YXJtIChDSUQ6IDEsIFR5cGU6IHN3YXJtLW1hbmlmZXN0OyBoYXNoL2xlbmd0aCBoYXJkLWNvZGVkIHRvIGtlY2NhazI1Ni8zMilcbiAgICAgICAgY29uc3Qgc3dhcm0gPSBoZXhCeXRlcy5tYXRjaCgvXjB4ZTQwMTAxZmEwMTFiMjAoWzAtOWEtZl0qKSQvKVxuICAgICAgICBpZiAoc3dhcm0pIHtcbiAgICAgICAgICAgIGlmIChzd2FybVsxXS5sZW5ndGggPT09ICgzMiAqIDIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiYnp6Oi9cXC9cIiArIHN3YXJtWzFdXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBza3luZXQgPSBoZXhCeXRlcy5tYXRjaCgvXjB4OTBiMmM2MDUoWzAtOWEtZl0qKSQvKTtcbiAgICAgICAgaWYgKHNreW5ldCkge1xuICAgICAgICAgICAgaWYgKHNreW5ldFsxXS5sZW5ndGggPT09ICgzNCAqIDIpKSB7XG4gICAgICAgICAgICAgICAgLy8gVVJMIFNhZmUgYmFzZTY0OyBodHRwczovL2RhdGF0cmFja2VyLmlldGYub3JnL2RvYy9odG1sL3JmYzQ2NDgjc2VjdGlvbi01XG4gICAgICAgICAgICAgICAgY29uc3QgdXJsU2FmZTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHsgXCI9XCI6IFwiXCIsIFwiK1wiOiBcIi1cIiwgXCIvXCI6IFwiX1wiIH07XG4gICAgICAgICAgICAgICAgY29uc3QgaGFzaCA9IGJhc2U2NEVuY29kZShcIjB4XCIgKyBza3luZXRbMV0pLnJlcGxhY2UoL1s9K1xcL10vZywgKGEpID0+ICh1cmxTYWZlW2FdKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic2lhOi9cXC9cIiArIGhhc2g7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoYGludmFsaWQgb3IgdW5zdXBwb3J0ZWQgY29udGVudCBoYXNoIGRhdGFgLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBcImdldENvbnRlbnRIYXNoKClcIixcbiAgICAgICAgICAgIGRhdGE6IGhleEJ5dGVzXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFRleHQoa2V5OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuXG4gICAgICAgIC8vIFRoZSBrZXkgZW5jb2RlZCBhcyBwYXJhbWV0ZXIgdG8gZmV0Y2hCeXRlc1xuICAgICAgICBsZXQga2V5Qnl0ZXMgPSB0b1V0ZjhCeXRlcyhrZXkpO1xuXG4gICAgICAgIC8vIFRoZSBub2RlaGFzaCBjb25zdW1lcyB0aGUgZmlyc3Qgc2xvdCwgc28gdGhlIHN0cmluZyBwb2ludGVyIHRhcmdldHNcbiAgICAgICAgLy8gb2Zmc2V0IDY0LCB3aXRoIHRoZSBsZW5ndGggYXQgb2Zmc2V0IDY0IGFuZCBkYXRhIHN0YXJ0aW5nIGF0IG9mZnNldCA5NlxuICAgICAgICBrZXlCeXRlcyA9IGNvbmNhdChbIGJ5dGVzMzJpZnkoNjQpLCBieXRlczMyaWZ5KGtleUJ5dGVzLmxlbmd0aCksIGtleUJ5dGVzIF0pO1xuXG4gICAgICAgIC8vIFBhZCB0byB3b3JkLXNpemUgKDMyIGJ5dGVzKVxuICAgICAgICBpZiAoKGtleUJ5dGVzLmxlbmd0aCAlIDMyKSAhPT0gMCkge1xuICAgICAgICAgICAga2V5Qnl0ZXMgPSBjb25jYXQoWyBrZXlCeXRlcywgaGV4WmVyb1BhZChcIjB4XCIsIDMyIC0gKGtleS5sZW5ndGggJSAzMikpIF0pXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoZXhCeXRlcyA9IGF3YWl0IHRoaXMuX2ZldGNoQnl0ZXMoXCIweDU5ZDFkNDNjXCIsIGhleGxpZnkoa2V5Qnl0ZXMpKTtcbiAgICAgICAgaWYgKGhleEJ5dGVzID09IG51bGwgfHwgaGV4Qnl0ZXMgPT09IFwiMHhcIikgeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgICAgIHJldHVybiB0b1V0ZjhTdHJpbmcoaGV4Qnl0ZXMpO1xuICAgIH1cbn1cblxubGV0IGRlZmF1bHRGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IG51bGw7XG5cbmxldCBuZXh0UG9sbElkID0gMTtcblxuZXhwb3J0IGNsYXNzIEJhc2VQcm92aWRlciBleHRlbmRzIFByb3ZpZGVyIGltcGxlbWVudHMgRW5zUHJvdmlkZXIge1xuICAgIF9uZXR3b3JrUHJvbWlzZTogUHJvbWlzZTxOZXR3b3JrPjtcbiAgICBfbmV0d29yazogTmV0d29yaztcblxuICAgIF9ldmVudHM6IEFycmF5PEV2ZW50PjtcblxuICAgIGZvcm1hdHRlcjogRm9ybWF0dGVyO1xuXG4gICAgLy8gVG8gaGVscCBtaXRpZ2F0ZSB0aGUgZXZlbnR1YWxseSBjb25zaXN0ZW50IG5hdHVyZSBvZiB0aGUgYmxvY2tjaGFpblxuICAgIC8vIHdlIGtlZXAgYSBtYXBwaW5nIG9mIGV2ZW50cyB3ZSBlbWl0LiBJZiB3ZSBlbWl0IGFuIGV2ZW50IFgsIHdlIGV4cGVjdFxuICAgIC8vIHRoYXQgYSB1c2VyIHNob3VsZCBiZSBhYmxlIHRvIHF1ZXJ5IGZvciB0aGF0IGV2ZW50IGluIHRoZSBjYWxsYmFjayxcbiAgICAvLyBpZiB0aGUgbm9kZSByZXR1cm5zIG51bGwsIHdlIHN0YWxsIHRoZSByZXNwb25zZSB1bnRpbCB3ZSBnZXQgYmFjayBhXG4gICAgLy8gbWVhbmluZ2Z1bCB2YWx1ZSwgc2luY2Ugd2UgbWF5IGJlIGhpdHRpbmcgYSByZS1vcmcsIG9yIGEgbm9kZSB0aGF0XG4gICAgLy8gaGFzIG5vdCBpbmRleGVkIHRoZSBldmVudCB5ZXQuXG4gICAgLy8gRXZlbnRzOlxuICAgIC8vICAgLSB0OntoYXNofSAgICAtIFRyYW5zYWN0aW9uIGhhc2hcbiAgICAvLyAgIC0gYjp7aGFzaH0gICAgLSBCbG9ja0hhc2hcbiAgICAvLyAgIC0gYmxvY2sgICAgICAgLSBUaGUgbW9zdCByZWNlbnQgZW1pdHRlZCBibG9ja1xuICAgIF9lbWl0dGVkOiB7IFsgZXZlbnROYW1lOiBzdHJpbmcgXTogbnVtYmVyIHwgXCJwZW5kaW5nXCIgfTtcblxuICAgIF9wb2xsaW5nSW50ZXJ2YWw6IG51bWJlcjtcbiAgICBfcG9sbGVyOiBOb2RlSlMuVGltZXI7XG4gICAgX2Jvb3RzdHJhcFBvbGw6IE5vZGVKUy5UaW1lcjtcblxuICAgIF9sYXN0QmxvY2tOdW1iZXI6IG51bWJlcjtcbiAgICBfbWF4RmlsdGVyQmxvY2tSYW5nZTogbnVtYmVyO1xuXG4gICAgX2Zhc3RCbG9ja051bWJlcjogbnVtYmVyO1xuICAgIF9mYXN0QmxvY2tOdW1iZXJQcm9taXNlOiBQcm9taXNlPG51bWJlcj47XG4gICAgX2Zhc3RRdWVyeURhdGU6IG51bWJlcjtcblxuICAgIF9tYXhJbnRlcm5hbEJsb2NrTnVtYmVyOiBudW1iZXI7XG4gICAgX2ludGVybmFsQmxvY2tOdW1iZXI6IFByb21pc2U8eyBibG9ja051bWJlcjogbnVtYmVyLCByZXFUaW1lOiBudW1iZXIsIHJlc3BUaW1lOiBudW1iZXIgfT47XG5cbiAgICByZWFkb25seSBhbnlOZXR3b3JrOiBib29sZWFuO1xuXG4gICAgZGlzYWJsZUNjaXBSZWFkOiBib29sZWFuO1xuXG5cbiAgICAvKipcbiAgICAgKiAgcmVhZHlcbiAgICAgKlxuICAgICAqICBBIFByb21pc2U8TmV0d29yaz4gdGhhdCByZXNvbHZlcyBvbmx5IG9uY2UgdGhlIHByb3ZpZGVyIGlzIHJlYWR5LlxuICAgICAqXG4gICAgICogIFN1Yi1jbGFzc2VzIHRoYXQgY2FsbCB0aGUgc3VwZXIgd2l0aCBhIG5ldHdvcmsgd2l0aG91dCBhIGNoYWluSWRcbiAgICAgKiAgTVVTVCBzZXQgdGhpcy4gU3RhbmRhcmQgbmFtZWQgbmV0d29ya3MgaGF2ZSBhIGtub3duIGNoYWluSWQuXG4gICAgICpcbiAgICAgKi9cblxuICAgIGNvbnN0cnVjdG9yKG5ldHdvcms6IE5ldHdvcmtpc2ggfCBQcm9taXNlPE5ldHdvcms+KSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgLy8gRXZlbnRzIGJlaW5nIGxpc3RlbmVkIHRvXG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IFtdO1xuXG4gICAgICAgIHRoaXMuX2VtaXR0ZWQgPSB7IGJsb2NrOiAtMiB9O1xuXG4gICAgICAgIHRoaXMuZGlzYWJsZUNjaXBSZWFkID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5mb3JtYXR0ZXIgPSBuZXcudGFyZ2V0LmdldEZvcm1hdHRlcigpO1xuXG4gICAgICAgIC8vIElmIG5ldHdvcmsgaXMgYW55LCB0aGlzIFByb3ZpZGVyIGFsbG93cyB0aGUgdW5kZXJseWluZ1xuICAgICAgICAvLyBuZXR3b3JrIHRvIGNoYW5nZSBkeW5hbWljYWxseSwgYW5kIHdlIGF1dG8tZGV0ZWN0IHRoZVxuICAgICAgICAvLyBjdXJyZW50IG5ldHdvcmtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJhbnlOZXR3b3JrXCIsIChuZXR3b3JrID09PSBcImFueVwiKSk7XG4gICAgICAgIGlmICh0aGlzLmFueU5ldHdvcmspIHsgbmV0d29yayA9IHRoaXMuZGV0ZWN0TmV0d29yaygpOyB9XG5cbiAgICAgICAgaWYgKG5ldHdvcmsgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICB0aGlzLl9uZXR3b3JrUHJvbWlzZSA9IG5ldHdvcms7XG5cbiAgICAgICAgICAgIC8vIFNxdWFzaCBhbnkgXCJ1bmhhbmRsZWQgcHJvbWlzZVwiIGVycm9yczsgdGhhdCBkbyBub3QgbmVlZCB0byBiZSBoYW5kbGVkXG4gICAgICAgICAgICBuZXR3b3JrLmNhdGNoKChlcnJvcikgPT4geyB9KTtcblxuICAgICAgICAgICAgLy8gVHJpZ2dlciBpbml0aWFsIG5ldHdvcmsgc2V0dGluZyAoYXN5bmMpXG4gICAgICAgICAgICB0aGlzLl9yZWFkeSgpLmNhdGNoKChlcnJvcikgPT4geyB9KTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qga25vd25OZXR3b3JrID0gZ2V0U3RhdGljPChuZXR3b3JrOiBOZXR3b3JraXNoKSA9PiBOZXR3b3JrPihuZXcudGFyZ2V0LCBcImdldE5ldHdvcmtcIikobmV0d29yayk7XG4gICAgICAgICAgICBpZiAoa25vd25OZXR3b3JrKSB7XG4gICAgICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfbmV0d29ya1wiLCBrbm93bk5ldHdvcmspO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcIm5ldHdvcmtcIiwga25vd25OZXR3b3JrLCBudWxsKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBuZXR3b3JrXCIsIFwibmV0d29ya1wiLCBuZXR3b3JrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX21heEludGVybmFsQmxvY2tOdW1iZXIgPSAtMTAyNDtcblxuICAgICAgICB0aGlzLl9sYXN0QmxvY2tOdW1iZXIgPSAtMjtcbiAgICAgICAgdGhpcy5fbWF4RmlsdGVyQmxvY2tSYW5nZSA9IDEwO1xuXG4gICAgICAgIHRoaXMuX3BvbGxpbmdJbnRlcnZhbCA9IDQwMDA7XG5cbiAgICAgICAgdGhpcy5fZmFzdFF1ZXJ5RGF0ZSA9IDA7XG4gICAgfVxuXG4gICAgYXN5bmMgX3JlYWR5KCk6IFByb21pc2U8TmV0d29yaz4ge1xuICAgICAgICBpZiAodGhpcy5fbmV0d29yayA9PSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgbmV0d29yazogTmV0d29yayA9IG51bGw7XG4gICAgICAgICAgICBpZiAodGhpcy5fbmV0d29ya1Byb21pc2UpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBuZXR3b3JrID0gYXdhaXQgdGhpcy5fbmV0d29ya1Byb21pc2U7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUcnkgdGhlIFByb3ZpZGVyJ3MgbmV0d29yayBkZXRlY3Rpb24gKHRoaXMgTVVTVCB0aHJvdyBpZiBpdCBjYW5ub3QpXG4gICAgICAgICAgICBpZiAobmV0d29yayA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbmV0d29yayA9IGF3YWl0IHRoaXMuZGV0ZWN0TmV0d29yaygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW47IGV2ZXJ5IFByb3ZpZGVyIHN1Yi1jbGFzcyBzaG91bGQgaGF2ZVxuICAgICAgICAgICAgLy8gc3VnZ2VzdGVkIGEgbmV0d29yayBieSBoZXJlIChvciBoYXZlIHRocm93bikuXG4gICAgICAgICAgICBpZiAoIW5ldHdvcmspIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcIm5vIG5ldHdvcmsgZGV0ZWN0ZWRcIiwgTG9nZ2VyLmVycm9ycy5VTktOT1dOX0VSUk9SLCB7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBQb3NzaWJsZSB0aGlzIGNhbGwgc3RhY2tlZCBzbyBkbyBub3QgY2FsbCBkZWZpbmVSZWFkT25seSBhZ2FpblxuICAgICAgICAgICAgaWYgKHRoaXMuX25ldHdvcmsgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFueU5ldHdvcmspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbmV0d29yayA9IG5ldHdvcms7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfbmV0d29ya1wiLCBuZXR3b3JrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwibmV0d29ya1wiLCBuZXR3b3JrLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9uZXR3b3JrO1xuICAgIH1cblxuICAgIC8vIFRoaXMgd2lsbCBhbHdheXMgcmV0dXJuIHRoZSBtb3N0IHJlY2VudGx5IGVzdGFibGlzaGVkIG5ldHdvcmsuXG4gICAgLy8gRm9yIFwiYW55XCIsIHRoaXMgY2FuIGNoYW5nZSAoYSBcIm5ldHdvcmtcIiBldmVudCBpcyBlbWl0dGVkIGJlZm9yZVxuICAgIC8vIGFueSBjaGFuZ2UgaXMgcmVmbGVjdGVkKTsgb3RoZXJ3aXNlIHRoaXMgY2Fubm90IGNoYW5nZVxuICAgIGdldCByZWFkeSgpOiBQcm9taXNlPE5ldHdvcms+IHtcbiAgICAgICAgcmV0dXJuIHBvbGwoKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlYWR5KCkudGhlbigobmV0d29yaykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXR3b3JrO1xuICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIG5ldHdvcmsgaXNuJ3QgcnVubmluZyB5ZXQsIHdlIHdpbGwgd2FpdFxuICAgICAgICAgICAgICAgIGlmIChlcnJvci5jb2RlID09PSBMb2dnZXIuZXJyb3JzLk5FVFdPUktfRVJST1IgJiYgZXJyb3IuZXZlbnQgPT09IFwibm9OZXR3b3JrXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQFRPRE86IFJlbW92ZSB0aGlzIGFuZCBqdXN0IGNyZWF0ZSBhIHNpbmdsZXRvbiBmb3JtYXR0ZXJcbiAgICBzdGF0aWMgZ2V0Rm9ybWF0dGVyKCk6IEZvcm1hdHRlciB7XG4gICAgICAgIGlmIChkZWZhdWx0Rm9ybWF0dGVyID09IG51bGwpIHtcbiAgICAgICAgICAgIGRlZmF1bHRGb3JtYXR0ZXIgPSBuZXcgRm9ybWF0dGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRGb3JtYXR0ZXI7XG4gICAgfVxuXG4gICAgLy8gQFRPRE86IFJlbW92ZSB0aGlzIGFuZCBqdXN0IHVzZSBnZXROZXR3b3JrXG4gICAgc3RhdGljIGdldE5ldHdvcmsobmV0d29yazogTmV0d29ya2lzaCk6IE5ldHdvcmsge1xuICAgICAgICByZXR1cm4gZ2V0TmV0d29yaygobmV0d29yayA9PSBudWxsKSA/IFwiaG9tZXN0ZWFkXCI6IG5ldHdvcmspO1xuICAgIH1cblxuICAgIGFzeW5jIGNjaXBSZWFkRmV0Y2godHg6IFRyYW5zYWN0aW9uLCBjYWxsZGF0YTogc3RyaW5nLCB1cmxzOiBBcnJheTxzdHJpbmc+KTogUHJvbWlzZTxudWxsIHwgc3RyaW5nPiB7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVDY2lwUmVhZCB8fCB1cmxzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgICAgIGNvbnN0IHNlbmRlciA9IHR4LnRvLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBjYWxsZGF0YS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZXM6IEFycmF5PHN0cmluZz4gPSBbIF07XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1cmxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSB1cmxzW2ldO1xuXG4gICAgICAgICAgICAvLyBVUkwgZXhwYW5zaW9uXG4gICAgICAgICAgICBjb25zdCBocmVmID0gdXJsLnJlcGxhY2UoXCJ7c2VuZGVyfVwiLCBzZW5kZXIpLnJlcGxhY2UoXCJ7ZGF0YX1cIiwgZGF0YSk7XG5cbiAgICAgICAgICAgIC8vIElmIG5vIHtkYXRhfSBpcyBwcmVzZW50LCB1c2UgUE9TVDsgb3RoZXJ3aXNlIEdFVFxuICAgICAgICAgICAgY29uc3QganNvbjogc3RyaW5nIHwgbnVsbCA9ICh1cmwuaW5kZXhPZihcIntkYXRhfVwiKSA+PSAwKSA/IG51bGw6IEpTT04uc3RyaW5naWZ5KHsgZGF0YSwgc2VuZGVyIH0pO1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmZXRjaEpzb24oeyB1cmw6IGhyZWYsIGVycm9yUGFzc1Rocm91Z2g6IHRydWUgfSwganNvbiwgKHZhbHVlLCByZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhbHVlLnN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1c0NvZGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChyZXN1bHQuZGF0YSkgeyByZXR1cm4gcmVzdWx0LmRhdGE7IH1cblxuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gKHJlc3VsdC5tZXNzYWdlIHx8IFwidW5rbm93biBlcnJvclwiKTtcblxuICAgICAgICAgICAgLy8gNHh4IGluZGljYXRlcyB0aGUgcmVzdWx0IGlzIG5vdCBwcmVzZW50OyBzdG9wXG4gICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA+PSA0MDAgJiYgcmVzdWx0LnN0YXR1cyA8IDUwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihgcmVzcG9uc2Ugbm90IGZvdW5kIGR1cmluZyBDQ0lQIGZldGNoOiAkeyBlcnJvck1lc3NhZ2UgfWAsIExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLCB7IHVybCwgZXJyb3JNZXNzYWdlIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyA1eHggaW5kaWNhdGVzIHNlcnZlciBpc3N1ZTsgdHJ5IHRoZSBuZXh0IHVybFxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlcy5wdXNoKGVycm9yTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoYGVycm9yIGVuY291bnRlcmVkIGR1cmluZyBDQ0lQIGZldGNoOiAkeyBlcnJvck1lc3NhZ2VzLm1hcCgobSkgPT4gSlNPTi5zdHJpbmdpZnkobSkpLmpvaW4oXCIsIFwiKSB9YCwgTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1IsIHtcbiAgICAgICAgICAgIHVybHMsIGVycm9yTWVzc2FnZXNcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gRmV0Y2hlcyB0aGUgYmxvY2tOdW1iZXIsIGJ1dCB3aWxsIHJldXNlIGFueSByZXN1bHQgdGhhdCBpcyBsZXNzXG4gICAgLy8gdGhhbiBtYXhBZ2Ugb2xkIG9yIGhhcyBiZWVuIHJlcXVlc3RlZCBzaW5jZSB0aGUgbGFzdCByZXF1ZXN0XG4gICAgYXN5bmMgX2dldEludGVybmFsQmxvY2tOdW1iZXIobWF4QWdlOiBudW1iZXIpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgICAgICBhd2FpdCB0aGlzLl9yZWFkeSgpO1xuXG4gICAgICAgIC8vIEFsbG93aW5nIHN0YWxlIGRhdGEgdXAgdG8gbWF4QWdlIG9sZFxuICAgICAgICBpZiAobWF4QWdlID4gMCkge1xuXG4gICAgICAgICAgICAvLyBXaGlsZSB0aGVyZSBhcmUgcGVuZGluZyBpbnRlcm5hbCBibG9jayByZXF1ZXN0cy4uLlxuICAgICAgICAgICAgd2hpbGUgKHRoaXMuX2ludGVybmFsQmxvY2tOdW1iZXIpIHtcblxuICAgICAgICAgICAgICAgIC8vIC4uLlwicmVtZW1iZXJcIiB3aGljaCBmZXRjaCB3ZSBzdGFydGVkIHdpdGhcbiAgICAgICAgICAgICAgICBjb25zdCBpbnRlcm5hbEJsb2NrTnVtYmVyID0gdGhpcy5faW50ZXJuYWxCbG9ja051bWJlcjtcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoZSByZXN1bHQgaXMgbm90IHRvbyBzdGFsZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBpbnRlcm5hbEJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGdldFRpbWUoKSAtIHJlc3VsdC5yZXNwVGltZSkgPD0gbWF4QWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVG9vIG9sZDsgZmV0Y2ggYSBuZXcgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICB9IGNhdGNoKGVycm9yKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGZldGNoIHJlamVjdGVkOyBpZiB3ZSBhcmUgdGhlIGZpcnN0IHRvIGdldCB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVqZWN0aW9uLCBkcm9wIHRocm91Z2ggc28gd2UgcmVwbGFjZSBpdCB3aXRoIGEgbmV3XG4gICAgICAgICAgICAgICAgICAgIC8vIGZldGNoOyBhbGwgb3RoZXJzIGJsb2NrZWQgd2lsbCB0aGVuIGdldCB0aGF0IGZldGNoXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoaWNoIHdvbid0IG1hdGNoIHRoZSBvbmUgdGhleSBcInJlbWVtYmVyZWRcIiBhbmQgbG9vcFxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxCbG9ja051bWJlciA9PT0gaW50ZXJuYWxCbG9ja051bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXFUaW1lID0gZ2V0VGltZSgpO1xuXG4gICAgICAgIGNvbnN0IGNoZWNrSW50ZXJuYWxCbG9ja051bWJlciA9IHJlc29sdmVQcm9wZXJ0aWVzKHtcbiAgICAgICAgICAgIGJsb2NrTnVtYmVyOiB0aGlzLnBlcmZvcm0oXCJnZXRCbG9ja051bWJlclwiLCB7IH0pLFxuICAgICAgICAgICAgbmV0d29ya0Vycm9yOiB0aGlzLmdldE5ldHdvcmsoKS50aGVuKChuZXR3b3JrKSA9PiAobnVsbCksIChlcnJvcikgPT4gKGVycm9yKSlcbiAgICAgICAgfSkudGhlbigoeyBibG9ja051bWJlciwgbmV0d29ya0Vycm9yIH0pID0+IHtcbiAgICAgICAgICAgIGlmIChuZXR3b3JrRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBVbnJlbWVtYmVyIHRoaXMgYmFkIGludGVybmFsIGJsb2NrIG51bWJlclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbnRlcm5hbEJsb2NrTnVtYmVyID09PSBjaGVja0ludGVybmFsQmxvY2tOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxCbG9ja051bWJlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IG5ldHdvcmtFcnJvcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmVzcFRpbWUgPSBnZXRUaW1lKCk7XG5cbiAgICAgICAgICAgIGJsb2NrTnVtYmVyID0gQmlnTnVtYmVyLmZyb20oYmxvY2tOdW1iZXIpLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICBpZiAoYmxvY2tOdW1iZXIgPCB0aGlzLl9tYXhJbnRlcm5hbEJsb2NrTnVtYmVyKSB7IGJsb2NrTnVtYmVyID0gdGhpcy5fbWF4SW50ZXJuYWxCbG9ja051bWJlcjsgfVxuXG4gICAgICAgICAgICB0aGlzLl9tYXhJbnRlcm5hbEJsb2NrTnVtYmVyID0gYmxvY2tOdW1iZXI7XG4gICAgICAgICAgICB0aGlzLl9zZXRGYXN0QmxvY2tOdW1iZXIoYmxvY2tOdW1iZXIpOyAvLyBAVE9ETzogU3RpbGwgbmVlZCB0aGlzP1xuICAgICAgICAgICAgcmV0dXJuIHsgYmxvY2tOdW1iZXIsIHJlcVRpbWUsIHJlc3BUaW1lIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX2ludGVybmFsQmxvY2tOdW1iZXIgPSBjaGVja0ludGVybmFsQmxvY2tOdW1iZXI7XG5cbiAgICAgICAgLy8gU3dhbGxvdyB1bmhhbmRsZWQgZXhjZXB0aW9uczsgaWYgbmVlZGVkIHRoZXkgYXJlIGhhbmRsZWQgZWxzZSB3aGVyZVxuICAgICAgICBjaGVja0ludGVybmFsQmxvY2tOdW1iZXIuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAvLyBEb24ndCBudWxsIHRoZSBkZWFkIChyZWplY3RlZCkgZmV0Y2gsIGlmIGl0IGhhcyBhbHJlYWR5IGJlZW4gdXBkYXRlZFxuICAgICAgICAgICAgaWYgKHRoaXMuX2ludGVybmFsQmxvY2tOdW1iZXIgPT09IGNoZWNrSW50ZXJuYWxCbG9ja051bWJlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ludGVybmFsQmxvY2tOdW1iZXIgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gKGF3YWl0IGNoZWNrSW50ZXJuYWxCbG9ja051bWJlcikuYmxvY2tOdW1iZXI7XG4gICAgfVxuXG4gICAgYXN5bmMgcG9sbCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgcG9sbElkID0gbmV4dFBvbGxJZCsrO1xuXG4gICAgICAgIC8vIFRyYWNrIGFsbCBydW5uaW5nIHByb21pc2VzLCBzbyB3ZSBjYW4gdHJpZ2dlciBhIHBvc3QtcG9sbCBvbmNlIHRoZXkgYXJlIGNvbXBsZXRlXG4gICAgICAgIGNvbnN0IHJ1bm5lcnM6IEFycmF5PFByb21pc2U8dm9pZD4+ID0gW107XG5cbiAgICAgICAgbGV0IGJsb2NrTnVtYmVyOiBudW1iZXIgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYmxvY2tOdW1iZXIgPSBhd2FpdCB0aGlzLl9nZXRJbnRlcm5hbEJsb2NrTnVtYmVyKDEwMCArIHRoaXMucG9sbGluZ0ludGVydmFsIC8gMik7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2V0RmFzdEJsb2NrTnVtYmVyKGJsb2NrTnVtYmVyKTtcblxuICAgICAgICAvLyBFbWl0IGEgcG9sbCBldmVudCBhZnRlciB3ZSBoYXZlIHRoZSBsYXRlc3QgKGZhc3QpIGJsb2NrIG51bWJlclxuICAgICAgICB0aGlzLmVtaXQoXCJwb2xsXCIsIHBvbGxJZCwgYmxvY2tOdW1iZXIpO1xuXG4gICAgICAgIC8vIElmIHRoZSBibG9jayBoYXMgbm90IGNoYW5nZWQsIG1laC5cbiAgICAgICAgaWYgKGJsb2NrTnVtYmVyID09PSB0aGlzLl9sYXN0QmxvY2tOdW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImRpZFBvbGxcIiwgcG9sbElkKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpcnN0IHBvbGxpbmcgY3ljbGUsIHRyaWdnZXIgYSBcImJsb2NrXCIgZXZlbnRzXG4gICAgICAgIGlmICh0aGlzLl9lbWl0dGVkLmJsb2NrID09PSAtMikge1xuICAgICAgICAgICAgdGhpcy5fZW1pdHRlZC5ibG9jayA9IGJsb2NrTnVtYmVyIC0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChNYXRoLmFicygoPG51bWJlcj4odGhpcy5fZW1pdHRlZC5ibG9jaykpIC0gYmxvY2tOdW1iZXIpID4gMTAwMCkge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oYG5ldHdvcmsgYmxvY2sgc2tldyBkZXRlY3RlZDsgc2tpcHBpbmcgYmxvY2sgZXZlbnRzIChlbWl0dGVkPSR7IHRoaXMuX2VtaXR0ZWQuYmxvY2sgfSBibG9ja051bWJlciR7IGJsb2NrTnVtYmVyIH0pYCk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBsb2dnZXIubWFrZUVycm9yKFwibmV0d29yayBibG9jayBza2V3IGRldGVjdGVkXCIsIExvZ2dlci5lcnJvcnMuTkVUV09SS19FUlJPUiwge1xuICAgICAgICAgICAgICAgIGJsb2NrTnVtYmVyOiBibG9ja051bWJlcixcbiAgICAgICAgICAgICAgICBldmVudDogXCJibG9ja1NrZXdcIixcbiAgICAgICAgICAgICAgICBwcmV2aW91c0Jsb2NrTnVtYmVyOiB0aGlzLl9lbWl0dGVkLmJsb2NrXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJibG9ja1wiLCBibG9ja051bWJlcik7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE5vdGlmeSBhbGwgbGlzdGVuZXIgZm9yIGVhY2ggYmxvY2sgdGhhdCBoYXMgcGFzc2VkXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gKDxudW1iZXI+dGhpcy5fZW1pdHRlZC5ibG9jaykgKyAxOyBpIDw9IGJsb2NrTnVtYmVyOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJibG9ja1wiLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBlbWl0dGVkIGJsb2NrIHdhcyB1cGRhdGVkLCBjaGVjayBmb3Igb2Jzb2xldGUgZXZlbnRzXG4gICAgICAgIGlmICgoPG51bWJlcj50aGlzLl9lbWl0dGVkLmJsb2NrKSAhPT0gYmxvY2tOdW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXR0ZWQuYmxvY2sgPSBibG9ja051bWJlcjtcblxuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5fZW1pdHRlZCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGJsb2NrIGV2ZW50IGRvZXMgbm90IGV4cGlyZVxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IFwiYmxvY2tcIikgeyByZXR1cm47IH1cblxuICAgICAgICAgICAgICAgIC8vIFRoZSBibG9jayB3ZSB3ZXJlIGF0IHdoZW4gd2UgZW1pdHRlZCB0aGlzIGV2ZW50XG4gICAgICAgICAgICAgICAgY29uc3QgZXZlbnRCbG9ja051bWJlciA9IHRoaXMuX2VtaXR0ZWRba2V5XTtcblxuICAgICAgICAgICAgICAgIC8vIFdlIGNhbm5vdCBnYXJiYWdlIGNvbGxlY3QgcGVuZGluZyB0cmFuc2FjdGlvbnMgb3IgYmxvY2tzIGhlcmVcbiAgICAgICAgICAgICAgICAvLyBUaGV5IHNob3VsZCBiZSBnYXJiYWdlIGNvbGxlY3RlZCBieSB0aGUgUHJvdmlkZXIgd2hlbiBzZXR0aW5nXG4gICAgICAgICAgICAgICAgLy8gXCJwZW5kaW5nXCIgZXZlbnRzXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50QmxvY2tOdW1iZXIgPT09IFwicGVuZGluZ1wiKSB7IHJldHVybjsgfVxuXG4gICAgICAgICAgICAgICAgLy8gRXZpY3QgYW55IHRyYW5zYWN0aW9uIGhhc2hlcyBvciBibG9jayBoYXNoZXMgb3ZlciAxMiBibG9ja3NcbiAgICAgICAgICAgICAgICAvLyBvbGQsIHNpbmNlIHRoZXkgc2hvdWxkIG5vdCByZXR1cm4gbnVsbCBhbnl3YXlzXG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrTnVtYmVyIC0gZXZlbnRCbG9ja051bWJlciA+IDEyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9lbWl0dGVkW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaXJzdCBwb2xsaW5nIGN5Y2xlXG4gICAgICAgIGlmICh0aGlzLl9sYXN0QmxvY2tOdW1iZXIgPT09IC0yKSB7XG4gICAgICAgICAgICB0aGlzLl9sYXN0QmxvY2tOdW1iZXIgPSBibG9ja051bWJlciAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmluZCBhbGwgdHJhbnNhY3Rpb24gaGFzaGVzIHdlIGFyZSB3YWl0aW5nIG9uXG4gICAgICAgIHRoaXMuX2V2ZW50cy5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInR4XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFzaCA9IGV2ZW50Lmhhc2g7XG4gICAgICAgICAgICAgICAgICAgIGxldCBydW5uZXIgPSB0aGlzLmdldFRyYW5zYWN0aW9uUmVjZWlwdChoYXNoKS50aGVuKChyZWNlaXB0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlY2VpcHQgfHwgcmVjZWlwdC5ibG9ja051bWJlciA9PSBudWxsKSB7IHJldHVybiBudWxsOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbWl0dGVkW1widDpcIiArIGhhc2hdID0gcmVjZWlwdC5ibG9ja051bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChoYXNoLCByZWNlaXB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyb3I6IEVycm9yKSA9PiB7IHRoaXMuZW1pdChcImVycm9yXCIsIGVycm9yKTsgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcnVubmVycy5wdXNoKHJ1bm5lcik7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2FzZSBcImZpbHRlclwiOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgYWxsb3cgYSBzaW5nbGUgZ2V0TG9ncyB0byBiZSBpbi1mbGlnaHQgYXQgYSB0aW1lXG4gICAgICAgICAgICAgICAgICAgIGlmICghZXZlbnQuX2luZmxpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5faW5mbGlnaHQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCBmaWx0ZXIgZm9yIHRoaXMgZXZlbnQsIHNvIHdlIHdhbnQgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlc3RyaWN0IGV2ZW50cyB0byBldmVudHMgdGhhdCBoYXBwZW5lZCBubyBlYXJsaWVyIHRoYW4gbm93XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuX2xhc3RCbG9ja051bWJlciA9PT0gLTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5fbGFzdEJsb2NrTnVtYmVyID0gYmxvY2tOdW1iZXIgLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGaWx0ZXIgZnJvbSB0aGUgbGFzdCAqa25vd24qIGV2ZW50OyBkdWUgdG8gbG9hZC1iYWxhbmNpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCBzb21lIG5vZGVzIHJldHVybmluZyB1cGRhdGVkIGJsb2NrIG51bWJlcnMgYmVmb3JlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpbmRleGluZyBldmVudHMsIGEgbG9ncyByZXN1bHQgd2l0aCAwIGVudHJpZXMgY2Fubm90IGJlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0cnVzdGVkIGFuZCB3ZSBtdXN0IHJldHJ5IGEgcmFuZ2Ugd2hpY2ggaW5jbHVkZXMgaXQgYWdhaW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlciA9IGV2ZW50LmZpbHRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlci5mcm9tQmxvY2sgPSBldmVudC5fbGFzdEJsb2NrTnVtYmVyICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlci50b0Jsb2NrID0gYmxvY2tOdW1iZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgZml0bGVyIHJhbmdlcyBmcm9tIGdyb3dpbmcgdG9vIHdpbGQsIHNpbmNlIGl0IGlzIHF1aXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsaWtlbHkgdGhlcmUganVzdCBoYXZlbid0IGJlZW4gYW55IGV2ZW50cyB0byBtb3ZlIHRoZSBsYXN0QmxvY2tOdW1iZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaW5Gcm9tQmxvY2sgPSBmaWx0ZXIudG9CbG9jayAtIHRoaXMuX21heEZpbHRlckJsb2NrUmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWluRnJvbUJsb2NrID4gZmlsdGVyLmZyb21CbG9jaykgeyBmaWx0ZXIuZnJvbUJsb2NrID0gbWluRnJvbUJsb2NrOyB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIuZnJvbUJsb2NrIDwgMCkgeyBmaWx0ZXIuZnJvbUJsb2NrID0gMDsgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBydW5uZXIgPSB0aGlzLmdldExvZ3MoZmlsdGVyKS50aGVuKChsb2dzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxsb3cgdGhlIG5leHQgZ2V0TG9nc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9pbmZsaWdodCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvZ3MubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9ncy5mb3JFYWNoKChsb2c6IExvZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IHdoZW4gd2UgZ2V0IGFuIGV2ZW50IGZvciBhIGdpdmVuIGJsb2NrIG51bWJlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYW4gd2UgdHJ1c3QgdGhlIGV2ZW50cyBhcmUgaW5kZXhlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9nLmJsb2NrTnVtYmVyID4gZXZlbnQuX2xhc3RCbG9ja051bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuX2xhc3RCbG9ja051bWJlciA9IGxvZy5ibG9ja051bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBzdGFsbCByZXF1ZXN0cyB0byBmZXRjaCBibG9ja3MgYW5kIHR4c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbWl0dGVkW1wiYjpcIiArIGxvZy5ibG9ja0hhc2hdID0gbG9nLmJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbWl0dGVkW1widDpcIiArIGxvZy50cmFuc2FjdGlvbkhhc2hdID0gbG9nLmJsb2NrTnVtYmVyO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChmaWx0ZXIsIGxvZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyb3I6IEVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxsb3cgYW5vdGhlciBnZXRMb2dzICh0aGUgcmFuZ2Ugd2FzIG5vdCB1cGRhdGVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Ll9pbmZsaWdodCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5uZXJzLnB1c2gocnVubmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fbGFzdEJsb2NrTnVtYmVyID0gYmxvY2tOdW1iZXI7XG5cbiAgICAgICAgLy8gT25jZSBhbGwgZXZlbnRzIGZvciB0aGlzIGxvb3AgaGF2ZSBiZWVuIHByb2Nlc3NlZCwgZW1pdCBcImRpZFBvbGxcIlxuICAgICAgICBQcm9taXNlLmFsbChydW5uZXJzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImRpZFBvbGxcIiwgcG9sbElkKTtcbiAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7IHRoaXMuZW1pdChcImVycm9yXCIsIGVycm9yKTsgfSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIERlcHJlY2F0ZWQ7IGRvIG5vdCB1c2UgdGhpc1xuICAgIHJlc2V0RXZlbnRzQmxvY2soYmxvY2tOdW1iZXI6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLl9sYXN0QmxvY2tOdW1iZXIgPSBibG9ja051bWJlciAtIDE7XG4gICAgICAgIGlmICh0aGlzLnBvbGxpbmcpIHsgdGhpcy5wb2xsKCk7IH1cbiAgICB9XG5cbiAgICBnZXQgbmV0d29yaygpOiBOZXR3b3JrIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25ldHdvcms7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBtZXRob2Qgc2hvdWxkIHF1ZXJ5IHRoZSBuZXR3b3JrIGlmIHRoZSB1bmRlcmx5aW5nIG5ldHdvcmtcbiAgICAvLyBjYW4gY2hhbmdlLCBzdWNoIGFzIHdoZW4gY29ubmVjdGVkIHRvIGEgSlNPTi1SUEMgYmFja2VuZFxuICAgIGFzeW5jIGRldGVjdE5ldHdvcmsoKTogUHJvbWlzZTxOZXR3b3JrPiB7XG4gICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihcInByb3ZpZGVyIGRvZXMgbm90IHN1cHBvcnQgbmV0d29yayBkZXRlY3Rpb25cIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJwcm92aWRlci5kZXRlY3ROZXR3b3JrXCJcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0TmV0d29yaygpOiBQcm9taXNlPE5ldHdvcms+IHtcbiAgICAgICAgY29uc3QgbmV0d29yayA9IGF3YWl0IHRoaXMuX3JlYWR5KCk7XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGFyZSBzdGlsbCBjb25uZWN0ZWQgdG8gdGhlIHNhbWUgbmV0d29yazsgdGhpcyBpc1xuICAgICAgICAvLyBvbmx5IGFuIGV4dGVybmFsIGNhbGwgZm9yIGJhY2tlbmRzIHdoaWNoIGNhbiBoYXZlIHRoZSB1bmRlcmx5aW5nXG4gICAgICAgIC8vIG5ldHdvcmsgY2hhbmdlIHNwb250YW5lb3VzbHlcbiAgICAgICAgY29uc3QgY3VycmVudE5ldHdvcmsgPSBhd2FpdCB0aGlzLmRldGVjdE5ldHdvcmsoKTtcbiAgICAgICAgaWYgKG5ldHdvcmsuY2hhaW5JZCAhPT0gY3VycmVudE5ldHdvcmsuY2hhaW5JZCkge1xuXG4gICAgICAgICAgICAvLyBXZSBhcmUgYWxsb3dpbmcgbmV0d29yayBjaGFuZ2VzLCB0aGluZ3MgY2FuIGdldCBjb21wbGV4IGZhc3Q7XG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgeW91IGtub3cgd2hhdCB5b3UgYXJlIGRvaW5nIGlmIHlvdSB1c2UgXCJhbnlcIlxuICAgICAgICAgICAgaWYgKHRoaXMuYW55TmV0d29yaykge1xuICAgICAgICAgICAgICAgIHRoaXMuX25ldHdvcmsgPSBjdXJyZW50TmV0d29yaztcblxuICAgICAgICAgICAgICAgIC8vIFJlc2V0IGFsbCBpbnRlcm5hbCBibG9jayBudW1iZXIgZ3VhcmRzIGFuZCBjYWNoZXNcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0QmxvY2tOdW1iZXIgPSAtMjtcbiAgICAgICAgICAgICAgICB0aGlzLl9mYXN0QmxvY2tOdW1iZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zhc3RCbG9ja051bWJlclByb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zhc3RRdWVyeURhdGUgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXR0ZWQuYmxvY2sgPSAtMjtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXhJbnRlcm5hbEJsb2NrTnVtYmVyID0gLTEwMjQ7XG4gICAgICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxCbG9ja051bWJlciA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAvLyBUaGUgXCJuZXR3b3JrXCIgZXZlbnQgTVVTVCBoYXBwZW4gYmVmb3JlIHRoaXMgbWV0aG9kIHJlc29sdmVzXG4gICAgICAgICAgICAgICAgLy8gc28gYW55IGV2ZW50cyBoYXZlIGEgY2hhbmNlIHRvIHVucmVnaXN0ZXIsIHNvIHdlIHN0YWxsIGFuXG4gICAgICAgICAgICAgICAgLy8gYWRkaXRpb25hbCBldmVudCBsb29wIGJlZm9yZSByZXR1cm5pbmcgZnJvbSAvdGhpcy8gY2FsbFxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcIm5ldHdvcmtcIiwgY3VycmVudE5ldHdvcmssIG5ldHdvcmspO1xuICAgICAgICAgICAgICAgIGF3YWl0IHN0YWxsKDApO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25ldHdvcms7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbG9nZ2VyLm1ha2VFcnJvcihcInVuZGVybHlpbmcgbmV0d29yayBjaGFuZ2VkXCIsIExvZ2dlci5lcnJvcnMuTkVUV09SS19FUlJPUiwge1xuICAgICAgICAgICAgICAgIGV2ZW50OiBcImNoYW5nZWRcIixcbiAgICAgICAgICAgICAgICBuZXR3b3JrOiBuZXR3b3JrLFxuICAgICAgICAgICAgICAgIGRldGVjdGVkTmV0d29yazogY3VycmVudE5ldHdvcmtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXR3b3JrO1xuICAgIH1cblxuICAgIGdldCBibG9ja051bWJlcigpOiBudW1iZXIge1xuICAgICAgICB0aGlzLl9nZXRJbnRlcm5hbEJsb2NrTnVtYmVyKDEwMCArIHRoaXMucG9sbGluZ0ludGVydmFsIC8gMikudGhlbigoYmxvY2tOdW1iZXIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3NldEZhc3RCbG9ja051bWJlcihibG9ja051bWJlcik7XG4gICAgICAgIH0sIChlcnJvcikgPT4geyB9KTtcblxuICAgICAgICByZXR1cm4gKHRoaXMuX2Zhc3RCbG9ja051bWJlciAhPSBudWxsKSA/IHRoaXMuX2Zhc3RCbG9ja051bWJlcjogLTE7XG4gICAgfVxuXG4gICAgZ2V0IHBvbGxpbmcoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAodGhpcy5fcG9sbGVyICE9IG51bGwpO1xuICAgIH1cblxuICAgIHNldCBwb2xsaW5nKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh2YWx1ZSAmJiAhdGhpcy5fcG9sbGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9wb2xsZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7IHRoaXMucG9sbCgpOyB9LCB0aGlzLnBvbGxpbmdJbnRlcnZhbCk7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5fYm9vdHN0cmFwUG9sbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Jvb3RzdHJhcFBvbGwgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2xsKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgYmxvY2sgYWRkaXRpb25hbCBwb2xscyB1bnRpbCB0aGUgcG9sbGluZyBpbnRlcnZhbFxuICAgICAgICAgICAgICAgICAgICAvLyBpcyBkb25lLCB0byBwcmV2ZW50IG92ZXJ3aGVsbWluZyB0aGUgcG9sbCBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ib290c3RyYXBQb2xsID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBwb2xsaW5nIHdhcyBkaXNhYmxlZCwgc29tZXRoaW5nIG1heSByZXF1aXJlIGEgcG9rZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2luY2Ugc3RhcnRpbmcgdGhlIGJvb3RzdHJhcCBwb2xsIGFuZCBpdCB3YXMgZGlzYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fcG9sbGVyKSB7IHRoaXMucG9sbCgpOyB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENsZWFyIG91dCB0aGUgYm9vdHN0cmFwIHNvIHdlIGNhbiBkbyBhbm90aGVyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ib290c3RyYXBQb2xsID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5wb2xsaW5nSW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAoIXZhbHVlICYmIHRoaXMuX3BvbGxlcikge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9wb2xsZXIpO1xuICAgICAgICAgICAgdGhpcy5fcG9sbGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBwb2xsaW5nSW50ZXJ2YWwoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvbGxpbmdJbnRlcnZhbDtcbiAgICB9XG5cbiAgICBzZXQgcG9sbGluZ0ludGVydmFsKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZih2YWx1ZSkgIT09IFwibnVtYmVyXCIgfHwgdmFsdWUgPD0gMCB8fCBwYXJzZUludChTdHJpbmcodmFsdWUpKSAhPSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBwb2xsaW5nIGludGVydmFsXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcG9sbGluZ0ludGVydmFsID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKHRoaXMuX3BvbGxlcikge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9wb2xsZXIpO1xuICAgICAgICAgICAgdGhpcy5fcG9sbGVyID0gc2V0SW50ZXJ2YWwoKCkgPT4geyB0aGlzLnBvbGwoKTsgfSwgdGhpcy5fcG9sbGluZ0ludGVydmFsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9nZXRGYXN0QmxvY2tOdW1iZXIoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAgICAgY29uc3Qgbm93ID0gZ2V0VGltZSgpO1xuXG4gICAgICAgIC8vIFN0YWxlIGJsb2NrIG51bWJlciwgcmVxdWVzdCBhIG5ld2VyIHZhbHVlXG4gICAgICAgIGlmICgobm93IC0gdGhpcy5fZmFzdFF1ZXJ5RGF0ZSkgPiAyICogdGhpcy5fcG9sbGluZ0ludGVydmFsKSB7XG4gICAgICAgICAgICB0aGlzLl9mYXN0UXVlcnlEYXRlID0gbm93O1xuICAgICAgICAgICAgdGhpcy5fZmFzdEJsb2NrTnVtYmVyUHJvbWlzZSA9IHRoaXMuZ2V0QmxvY2tOdW1iZXIoKS50aGVuKChibG9ja051bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9mYXN0QmxvY2tOdW1iZXIgPT0gbnVsbCB8fCBibG9ja051bWJlciA+IHRoaXMuX2Zhc3RCbG9ja051bWJlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mYXN0QmxvY2tOdW1iZXIgPSBibG9ja051bWJlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Zhc3RCbG9ja051bWJlcjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zhc3RCbG9ja051bWJlclByb21pc2U7XG4gICAgfVxuXG4gICAgX3NldEZhc3RCbG9ja051bWJlcihibG9ja051bWJlcjogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIC8vIE9sZGVyIGJsb2NrLCBtYXliZSBhIHN0YWxlIHJlcXVlc3RcbiAgICAgICAgaWYgKHRoaXMuX2Zhc3RCbG9ja051bWJlciAhPSBudWxsICYmIGJsb2NrTnVtYmVyIDwgdGhpcy5fZmFzdEJsb2NrTnVtYmVyKSB7IHJldHVybjsgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgdGltZSB3ZSB1cGRhdGVkIHRoZSBibG9ja251bWJlclxuICAgICAgICB0aGlzLl9mYXN0UXVlcnlEYXRlID0gZ2V0VGltZSgpO1xuXG4gICAgICAgIC8vIE5ld2VyIGJsb2NrIG51bWJlciwgdXNlICBpdFxuICAgICAgICBpZiAodGhpcy5fZmFzdEJsb2NrTnVtYmVyID09IG51bGwgfHwgYmxvY2tOdW1iZXIgPiB0aGlzLl9mYXN0QmxvY2tOdW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2Zhc3RCbG9ja051bWJlciA9IGJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgdGhpcy5fZmFzdEJsb2NrTnVtYmVyUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShibG9ja051bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyB3YWl0Rm9yVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25IYXNoOiBzdHJpbmcsIGNvbmZpcm1hdGlvbnM/OiBudW1iZXIsIHRpbWVvdXQ/OiBudW1iZXIpOiBQcm9taXNlPFRyYW5zYWN0aW9uUmVjZWlwdD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2FpdEZvclRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSGFzaCwgKGNvbmZpcm1hdGlvbnMgPT0gbnVsbCkgPyAxOiBjb25maXJtYXRpb25zLCB0aW1lb3V0IHx8IDAsIG51bGwpO1xuICAgIH1cblxuICAgIGFzeW5jIF93YWl0Rm9yVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25IYXNoOiBzdHJpbmcsIGNvbmZpcm1hdGlvbnM6IG51bWJlciwgdGltZW91dDogbnVtYmVyLCByZXBsYWNlYWJsZTogeyBkYXRhOiBzdHJpbmcsIGZyb206IHN0cmluZywgbm9uY2U6IG51bWJlciwgdG86IHN0cmluZywgdmFsdWU6IEJpZ051bWJlciwgc3RhcnRCbG9jazogbnVtYmVyIH0pOiBQcm9taXNlPFRyYW5zYWN0aW9uUmVjZWlwdD4ge1xuICAgICAgICBjb25zdCByZWNlaXB0ID0gYXdhaXQgdGhpcy5nZXRUcmFuc2FjdGlvblJlY2VpcHQodHJhbnNhY3Rpb25IYXNoKTtcblxuICAgICAgICAvLyBSZWNlaXB0IGlzIGFscmVhZHkgZ29vZFxuICAgICAgICBpZiAoKHJlY2VpcHQgPyByZWNlaXB0LmNvbmZpcm1hdGlvbnM6IDApID49IGNvbmZpcm1hdGlvbnMpIHsgcmV0dXJuIHJlY2VpcHQ7IH1cblxuICAgICAgICAvLyBQb2xsIHVudGlsIHRoZSByZWNlaXB0IGlzIGdvb2QuLi5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNhbmNlbEZ1bmNzOiBBcnJheTwoKSA9PiB2b2lkPiA9IFtdO1xuXG4gICAgICAgICAgICBsZXQgZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgYWxyZWFkeURvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNhbmNlbEZ1bmNzLmZvckVhY2goKGZ1bmMpID0+IHsgZnVuYygpOyB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBtaW5lZEhhbmRsZXIgPSAocmVjZWlwdDogVHJhbnNhY3Rpb25SZWNlaXB0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlY2VpcHQuY29uZmlybWF0aW9ucyA8IGNvbmZpcm1hdGlvbnMpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICAgICAgaWYgKGFscmVhZHlEb25lKCkpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZWNlaXB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub24odHJhbnNhY3Rpb25IYXNoLCBtaW5lZEhhbmRsZXIpO1xuICAgICAgICAgICAgY2FuY2VsRnVuY3MucHVzaCgoKSA9PiB7IHRoaXMucmVtb3ZlTGlzdGVuZXIodHJhbnNhY3Rpb25IYXNoLCBtaW5lZEhhbmRsZXIpOyB9KTtcblxuICAgICAgICAgICAgaWYgKHJlcGxhY2VhYmxlKSB7XG4gICAgICAgICAgICAgICAgbGV0IGxhc3RCbG9ja051bWJlciA9IHJlcGxhY2VhYmxlLnN0YXJ0QmxvY2s7XG4gICAgICAgICAgICAgICAgbGV0IHNjYW5uZWRCbG9jazogbnVtYmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjb25zdCByZXBsYWNlSGFuZGxlciA9IGFzeW5jIChibG9ja051bWJlcjogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb25lKSB7IHJldHVybjsgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIFdhaXQgMSBzZWNvbmQ7IHRoaXMgaXMgb25seSB1c2VkIGluIHRoZSBjYXNlIG9mIGEgZmF1bHQsIHNvXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIHdpbGwgdHJhZGUgb2ZmIGEgbGl0dGxlIGJpdCBvZiBsYXRlbmN5IGZvciBtb3JlIGNvbnNpc3RlbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVzdWx0cyBhbmQgZmV3ZXIgSlNPTi1SUEMgY2FsbHNcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgc3RhbGwoMTAwMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRUcmFuc2FjdGlvbkNvdW50KHJlcGxhY2VhYmxlLmZyb20pLnRoZW4oYXN5bmMgKG5vbmNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkgeyByZXR1cm47IH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vbmNlIDw9IHJlcGxhY2VhYmxlLm5vbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEJsb2NrTnVtYmVyID0gYmxvY2tOdW1iZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyc3QgY2hlY2sgaWYgdGhlIHRyYW5zYWN0aW9uIHdhcyBtaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWluZWQgPSBhd2FpdCB0aGlzLmdldFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSGFzaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtaW5lZCAmJiBtaW5lZC5ibG9ja051bWJlciAhPSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpcnN0IHRpbWUgc2Nhbm5pbmcuIFdlIHN0YXJ0IGEgbGl0dGxlIGVhcmxpZXIgZm9yIHNvbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aWdnbGUgcm9vbSBoZXJlIHRvIGhhbmRsZSB0aGUgZXZlbnR1YWxseSBjb25zaXN0ZW50IG5hdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9mIGJsb2NrY2hhaW4gKGUuZy4gdGhlIGdldFRyYW5zYWN0aW9uQ291bnQgd2FzIGZvciBhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGlmZmVyZW50IGJsb2NrKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY2FubmVkQmxvY2sgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FubmVkQmxvY2sgPSBsYXN0QmxvY2tOdW1iZXIgLSAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2Nhbm5lZEJsb2NrIDwgcmVwbGFjZWFibGUuc3RhcnRCbG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nhbm5lZEJsb2NrID0gcmVwbGFjZWFibGUuc3RhcnRCbG9jaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChzY2FubmVkQmxvY2sgPD0gYmxvY2tOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmxvY2sgPSBhd2FpdCB0aGlzLmdldEJsb2NrV2l0aFRyYW5zYWN0aW9ucyhzY2FubmVkQmxvY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB0aSA9IDA7IHRpIDwgYmxvY2sudHJhbnNhY3Rpb25zLmxlbmd0aDsgdGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHggPSBibG9jay50cmFuc2FjdGlvbnNbdGldO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWNjZXNzZnVsbHkgbWluZWQhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHguaGFzaCA9PT0gdHJhbnNhY3Rpb25IYXNoKSB7IHJldHVybjsgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXRjaGVzIG91ciB0cmFuc2FjdGlvbiBmcm9tIGFuZCBub25jZTsgaXRzIGEgcmVwbGFjZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eC5mcm9tID09PSByZXBsYWNlYWJsZS5mcm9tICYmIHR4Lm5vbmNlID09PSByZXBsYWNlYWJsZS5ub25jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb25lKSB7IHJldHVybjsgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSByZWNlaXB0IG9mIHRoZSByZXBsYWNlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlY2VpcHQgPSBhd2FpdCB0aGlzLndhaXRGb3JUcmFuc2FjdGlvbih0eC5oYXNoLCBjb25maXJtYXRpb25zKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFscmVhZHkgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgKHByb2xseSBhIHRpbWVvdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFscmVhZHlEb25lKCkpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmVhc29uIHdlIHdlcmUgcmVwbGFjZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVhc29uID0gXCJyZXBsYWNlZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eC5kYXRhID09PSByZXBsYWNlYWJsZS5kYXRhICYmIHR4LnRvID09PSByZXBsYWNlYWJsZS50byAmJiB0eC52YWx1ZS5lcShyZXBsYWNlYWJsZS52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uID0gXCJyZXByaWNlZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSAgaWYgKHR4LmRhdGEgPT09IFwiMHhcIiAmJiB0eC5mcm9tID09PSB0eC50byAmJiB0eC52YWx1ZS5pc1plcm8oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb24gPSBcImNhbmNlbGxlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXhwbGFpbiB3aHkgd2Ugd2VyZSByZXBsYWNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChsb2dnZXIubWFrZUVycm9yKFwidHJhbnNhY3Rpb24gd2FzIHJlcGxhY2VkXCIsIExvZ2dlci5lcnJvcnMuVFJBTlNBQ1RJT05fUkVQTEFDRUQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsbGVkOiAocmVhc29uID09PSBcInJlcGxhY2VkXCIgfHwgcmVhc29uID09PSBcImNhbmNlbGxlZFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogdGhpcy5fd3JhcFRyYW5zYWN0aW9uKHR4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzaDogdHJhbnNhY3Rpb25IYXNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXB0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYW5uZWRCbG9jaysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uY2UoXCJibG9ja1wiLCByZXBsYWNlSGFuZGxlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkgeyByZXR1cm47IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25jZShcImJsb2NrXCIsIHJlcGxhY2VIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmIChkb25lKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgICAgIHRoaXMub25jZShcImJsb2NrXCIsIHJlcGxhY2VIYW5kbGVyKTtcblxuICAgICAgICAgICAgICAgIGNhbmNlbEZ1bmNzLnB1c2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKFwiYmxvY2tcIiwgcmVwbGFjZUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mKHRpbWVvdXQpID09PSBcIm51bWJlclwiICYmIHRpbWVvdXQgPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFscmVhZHlEb25lKCkpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChsb2dnZXIubWFrZUVycm9yKFwidGltZW91dCBleGNlZWRlZFwiLCBMb2dnZXIuZXJyb3JzLlRJTUVPVVQsIHsgdGltZW91dDogdGltZW91dCB9KSk7XG4gICAgICAgICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVyLnVucmVmKSB7IHRpbWVyLnVucmVmKCk7IH1cblxuICAgICAgICAgICAgICAgIGNhbmNlbEZ1bmNzLnB1c2goKCkgPT4geyBjbGVhclRpbWVvdXQodGltZXIpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QmxvY2tOdW1iZXIoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEludGVybmFsQmxvY2tOdW1iZXIoMCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0R2FzUHJpY2UoKTogUHJvbWlzZTxCaWdOdW1iZXI+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5nZXROZXR3b3JrKCk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wZXJmb3JtKFwiZ2V0R2FzUHJpY2VcIiwgeyB9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBCaWdOdW1iZXIuZnJvbShyZXN1bHQpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKFwiYmFkIHJlc3VsdCBmcm9tIGJhY2tlbmRcIiwgTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1IsIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiZ2V0R2FzUHJpY2VcIixcbiAgICAgICAgICAgICAgICByZXN1bHQsIGVycm9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGdldEJhbGFuY2UoYWRkcmVzc09yTmFtZTogc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+LCBibG9ja1RhZz86IEJsb2NrVGFnIHwgUHJvbWlzZTxCbG9ja1RhZz4pOiBQcm9taXNlPEJpZ051bWJlcj4ge1xuICAgICAgICBhd2FpdCB0aGlzLmdldE5ldHdvcmsoKTtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gYXdhaXQgcmVzb2x2ZVByb3BlcnRpZXMoe1xuICAgICAgICAgICAgYWRkcmVzczogdGhpcy5fZ2V0QWRkcmVzcyhhZGRyZXNzT3JOYW1lKSxcbiAgICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLl9nZXRCbG9ja1RhZyhibG9ja1RhZylcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wZXJmb3JtKFwiZ2V0QmFsYW5jZVwiLCBwYXJhbXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIEJpZ051bWJlci5mcm9tKHJlc3VsdCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoXCJiYWQgcmVzdWx0IGZyb20gYmFja2VuZFwiLCBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUiwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJnZXRCYWxhbmNlXCIsXG4gICAgICAgICAgICAgICAgcGFyYW1zLCByZXN1bHQsIGVycm9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGdldFRyYW5zYWN0aW9uQ291bnQoYWRkcmVzc09yTmFtZTogc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+LCBibG9ja1RhZz86IEJsb2NrVGFnIHwgUHJvbWlzZTxCbG9ja1RhZz4pOiBQcm9taXNlPG51bWJlcj4ge1xuICAgICAgICBhd2FpdCB0aGlzLmdldE5ldHdvcmsoKTtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gYXdhaXQgcmVzb2x2ZVByb3BlcnRpZXMoe1xuICAgICAgICAgICAgYWRkcmVzczogdGhpcy5fZ2V0QWRkcmVzcyhhZGRyZXNzT3JOYW1lKSxcbiAgICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLl9nZXRCbG9ja1RhZyhibG9ja1RhZylcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wZXJmb3JtKFwiZ2V0VHJhbnNhY3Rpb25Db3VudFwiLCBwYXJhbXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIEJpZ051bWJlci5mcm9tKHJlc3VsdCkudG9OdW1iZXIoKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihcImJhZCByZXN1bHQgZnJvbSBiYWNrZW5kXCIsIExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcImdldFRyYW5zYWN0aW9uQ291bnRcIixcbiAgICAgICAgICAgICAgICBwYXJhbXMsIHJlc3VsdCwgZXJyb3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0Q29kZShhZGRyZXNzT3JOYW1lOiBzdHJpbmcgfCBQcm9taXNlPHN0cmluZz4sIGJsb2NrVGFnPzogQmxvY2tUYWcgfCBQcm9taXNlPEJsb2NrVGFnPik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZ2V0TmV0d29yaygpO1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBhd2FpdCByZXNvbHZlUHJvcGVydGllcyh7XG4gICAgICAgICAgICBhZGRyZXNzOiB0aGlzLl9nZXRBZGRyZXNzKGFkZHJlc3NPck5hbWUpLFxuICAgICAgICAgICAgYmxvY2tUYWc6IHRoaXMuX2dldEJsb2NrVGFnKGJsb2NrVGFnKVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnBlcmZvcm0oXCJnZXRDb2RlXCIsIHBhcmFtcyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gaGV4bGlmeShyZXN1bHQpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKFwiYmFkIHJlc3VsdCBmcm9tIGJhY2tlbmRcIiwgTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1IsIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiZ2V0Q29kZVwiLFxuICAgICAgICAgICAgICAgIHBhcmFtcywgcmVzdWx0LCBlcnJvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBnZXRTdG9yYWdlQXQoYWRkcmVzc09yTmFtZTogc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+LCBwb3NpdGlvbjogQmlnTnVtYmVyaXNoIHwgUHJvbWlzZTxCaWdOdW1iZXJpc2g+LCBibG9ja1RhZz86IEJsb2NrVGFnIHwgUHJvbWlzZTxCbG9ja1RhZz4pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBhd2FpdCB0aGlzLmdldE5ldHdvcmsoKTtcbiAgICAgICAgY29uc3QgcGFyYW1zID0gYXdhaXQgcmVzb2x2ZVByb3BlcnRpZXMoe1xuICAgICAgICAgICAgYWRkcmVzczogdGhpcy5fZ2V0QWRkcmVzcyhhZGRyZXNzT3JOYW1lKSxcbiAgICAgICAgICAgIGJsb2NrVGFnOiB0aGlzLl9nZXRCbG9ja1RhZyhibG9ja1RhZyksXG4gICAgICAgICAgICBwb3NpdGlvbjogUHJvbWlzZS5yZXNvbHZlKHBvc2l0aW9uKS50aGVuKChwKSA9PiBoZXhWYWx1ZShwKSlcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMucGVyZm9ybShcImdldFN0b3JhZ2VBdFwiLCBwYXJhbXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGhleGxpZnkocmVzdWx0KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihcImJhZCByZXN1bHQgZnJvbSBiYWNrZW5kXCIsIExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcImdldFN0b3JhZ2VBdFwiLFxuICAgICAgICAgICAgICAgIHBhcmFtcywgcmVzdWx0LCBlcnJvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGlzIHNob3VsZCBiZSBjYWxsZWQgYnkgYW55IHN1YmNsYXNzIHdyYXBwaW5nIGEgVHJhbnNhY3Rpb25SZXNwb25zZVxuICAgIF93cmFwVHJhbnNhY3Rpb24odHg6IFRyYW5zYWN0aW9uLCBoYXNoPzogc3RyaW5nLCBzdGFydEJsb2NrPzogbnVtYmVyKTogVHJhbnNhY3Rpb25SZXNwb25zZSB7XG4gICAgICAgIGlmIChoYXNoICE9IG51bGwgJiYgaGV4RGF0YUxlbmd0aChoYXNoKSAhPT0gMzIpIHsgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCByZXNwb25zZSAtIHNlbmRUcmFuc2FjdGlvblwiKTsgfVxuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IDxUcmFuc2FjdGlvblJlc3BvbnNlPnR4O1xuXG4gICAgICAgIC8vIENoZWNrIHRoZSBoYXNoIHdlIGV4cGVjdCBpcyB0aGUgc2FtZSBhcyB0aGUgaGFzaCB0aGUgc2VydmVyIHJlcG9ydGVkXG4gICAgICAgIGlmIChoYXNoICE9IG51bGwgJiYgdHguaGFzaCAhPT0gaGFzaCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJUcmFuc2FjdGlvbiBoYXNoIG1pc21hdGNoIGZyb20gUHJvdmlkZXIuc2VuZFRyYW5zYWN0aW9uLlwiLCBMb2dnZXIuZXJyb3JzLlVOS05PV05fRVJST1IsIHsgZXhwZWN0ZWRIYXNoOiB0eC5oYXNoLCByZXR1cm5lZEhhc2g6IGhhc2ggfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQud2FpdCA9IGFzeW5jIChjb25maXJtcz86IG51bWJlciwgdGltZW91dD86IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgaWYgKGNvbmZpcm1zID09IG51bGwpIHsgY29uZmlybXMgPSAxOyB9XG4gICAgICAgICAgICBpZiAodGltZW91dCA9PSBudWxsKSB7IHRpbWVvdXQgPSAwOyB9XG5cbiAgICAgICAgICAgIC8vIEdldCB0aGUgZGV0YWlscyB0byBkZXRlY3QgcmVwbGFjZW1lbnRcbiAgICAgICAgICAgIGxldCByZXBsYWNlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChjb25maXJtcyAhPT0gMCAmJiBzdGFydEJsb2NrICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogdHguZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogdHguZnJvbSxcbiAgICAgICAgICAgICAgICAgICAgbm9uY2U6IHR4Lm5vbmNlLFxuICAgICAgICAgICAgICAgICAgICB0bzogdHgudG8sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0eC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRCbG9ja1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHJlY2VpcHQgPSBhd2FpdCB0aGlzLl93YWl0Rm9yVHJhbnNhY3Rpb24odHguaGFzaCwgY29uZmlybXMsIHRpbWVvdXQsIHJlcGxhY2VtZW50KTtcbiAgICAgICAgICAgIGlmIChyZWNlaXB0ID09IG51bGwgJiYgY29uZmlybXMgPT09IDApIHsgcmV0dXJuIG51bGw7IH1cblxuICAgICAgICAgICAgLy8gTm8gbG9uZ2VyIHBlbmRpbmcsIGFsbG93IHRoZSBwb2xsaW5nIGxvb3AgdG8gZ2FyYmFnZSBjb2xsZWN0IHRoaXNcbiAgICAgICAgICAgIHRoaXMuX2VtaXR0ZWRbXCJ0OlwiICsgdHguaGFzaF0gPSByZWNlaXB0LmJsb2NrTnVtYmVyO1xuXG4gICAgICAgICAgICBpZiAocmVjZWlwdC5zdGF0dXMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcInRyYW5zYWN0aW9uIGZhaWxlZFwiLCBMb2dnZXIuZXJyb3JzLkNBTExfRVhDRVBUSU9OLCB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uSGFzaDogdHguaGFzaCxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IHR4LFxuICAgICAgICAgICAgICAgICAgICByZWNlaXB0OiByZWNlaXB0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVjZWlwdDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGFzeW5jIHNlbmRUcmFuc2FjdGlvbihzaWduZWRUcmFuc2FjdGlvbjogc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+KTogUHJvbWlzZTxUcmFuc2FjdGlvblJlc3BvbnNlPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZ2V0TmV0d29yaygpO1xuICAgICAgICBjb25zdCBoZXhUeCA9IGF3YWl0IFByb21pc2UucmVzb2x2ZShzaWduZWRUcmFuc2FjdGlvbikudGhlbih0ID0+IGhleGxpZnkodCkpO1xuICAgICAgICBjb25zdCB0eCA9IHRoaXMuZm9ybWF0dGVyLnRyYW5zYWN0aW9uKHNpZ25lZFRyYW5zYWN0aW9uKTtcbiAgICAgICAgaWYgKHR4LmNvbmZpcm1hdGlvbnMgPT0gbnVsbCkgeyB0eC5jb25maXJtYXRpb25zID0gMDsgfVxuICAgICAgICBjb25zdCBibG9ja051bWJlciA9IGF3YWl0IHRoaXMuX2dldEludGVybmFsQmxvY2tOdW1iZXIoMTAwICsgMiAqIHRoaXMucG9sbGluZ0ludGVydmFsKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGhhc2ggPSBhd2FpdCB0aGlzLnBlcmZvcm0oXCJzZW5kVHJhbnNhY3Rpb25cIiwgeyBzaWduZWRUcmFuc2FjdGlvbjogaGV4VHggfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd3JhcFRyYW5zYWN0aW9uKHR4LCBoYXNoLCBibG9ja051bWJlcik7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAoPGFueT5lcnJvcikudHJhbnNhY3Rpb24gPSB0eDtcbiAgICAgICAgICAgICg8YW55PmVycm9yKS50cmFuc2FjdGlvbkhhc2ggPSB0eC5oYXNoO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBfZ2V0VHJhbnNhY3Rpb25SZXF1ZXN0KHRyYW5zYWN0aW9uOiBEZWZlcnJhYmxlPFRyYW5zYWN0aW9uUmVxdWVzdD4pOiBQcm9taXNlPFRyYW5zYWN0aW9uPiB7XG4gICAgICAgIGNvbnN0IHZhbHVlczogYW55ID0gYXdhaXQgdHJhbnNhY3Rpb247XG5cbiAgICAgICAgY29uc3QgdHg6IGFueSA9IHsgfTtcblxuICAgICAgICBbXCJmcm9tXCIsIFwidG9cIl0uZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBpZiAodmFsdWVzW2tleV0gPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIHR4W2tleV0gPSBQcm9taXNlLnJlc29sdmUodmFsdWVzW2tleV0pLnRoZW4oKHYpID0+ICh2ID8gdGhpcy5fZ2V0QWRkcmVzcyh2KTogbnVsbCkpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIFtcImdhc0xpbWl0XCIsIFwiZ2FzUHJpY2VcIiwgXCJtYXhGZWVQZXJHYXNcIiwgXCJtYXhQcmlvcml0eUZlZVBlckdhc1wiLCBcInZhbHVlXCJdLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlc1trZXldID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICB0eFtrZXldID0gUHJvbWlzZS5yZXNvbHZlKHZhbHVlc1trZXldKS50aGVuKCh2KSA9PiAodiA/IEJpZ051bWJlci5mcm9tKHYpOiBudWxsKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIFtcInR5cGVcIl0uZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBpZiAodmFsdWVzW2tleV0gPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIHR4W2tleV0gPSBQcm9taXNlLnJlc29sdmUodmFsdWVzW2tleV0pLnRoZW4oKHYpID0+ICgodiAhPSBudWxsKSA/IHY6IG51bGwpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHZhbHVlcy5hY2Nlc3NMaXN0KSB7XG4gICAgICAgICAgICB0eC5hY2Nlc3NMaXN0ID0gdGhpcy5mb3JtYXR0ZXIuYWNjZXNzTGlzdCh2YWx1ZXMuYWNjZXNzTGlzdCk7XG4gICAgICAgIH1cblxuICAgICAgICBbXCJkYXRhXCJdLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlc1trZXldID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICB0eFtrZXldID0gUHJvbWlzZS5yZXNvbHZlKHZhbHVlc1trZXldKS50aGVuKCh2KSA9PiAodiA/IGhleGxpZnkodik6IG51bGwpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyLnRyYW5zYWN0aW9uUmVxdWVzdChhd2FpdCByZXNvbHZlUHJvcGVydGllcyh0eCkpO1xuICAgIH1cblxuICAgIGFzeW5jIF9nZXRGaWx0ZXIoZmlsdGVyOiBGaWx0ZXIgfCBGaWx0ZXJCeUJsb2NrSGFzaCB8IFByb21pc2U8RmlsdGVyIHwgRmlsdGVyQnlCbG9ja0hhc2g+KTogUHJvbWlzZTxGaWx0ZXIgfCBGaWx0ZXJCeUJsb2NrSGFzaD4ge1xuICAgICAgICBmaWx0ZXIgPSBhd2FpdCBmaWx0ZXI7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0OiBhbnkgPSB7IH07XG5cbiAgICAgICAgaWYgKGZpbHRlci5hZGRyZXNzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5hZGRyZXNzID0gdGhpcy5fZ2V0QWRkcmVzcyhmaWx0ZXIuYWRkcmVzcyk7XG4gICAgICAgIH1cblxuICAgICAgICBbXCJibG9ja0hhc2hcIiwgXCJ0b3BpY3NcIl0uZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBpZiAoKDxhbnk+ZmlsdGVyKVtrZXldID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9ICg8YW55PmZpbHRlcilba2V5XTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgW1wiZnJvbUJsb2NrXCIsIFwidG9CbG9ja1wiXS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGlmICgoPGFueT5maWx0ZXIpW2tleV0gPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdGhpcy5fZ2V0QmxvY2tUYWcoKDxhbnk+ZmlsdGVyKVtrZXldKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyLmZpbHRlcihhd2FpdCByZXNvbHZlUHJvcGVydGllcyhyZXN1bHQpKTtcbiAgICB9XG5cbiAgICBhc3luYyBfY2FsbCh0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb25SZXF1ZXN0LCBibG9ja1RhZzogQmxvY2tUYWcsIGF0dGVtcHQ6IG51bWJlcik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGlmIChhdHRlbXB0ID49IE1BWF9DQ0lQX1JFRElSRUNUUykge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJDQ0lQIHJlYWQgZXhjZWVkZWQgbWF4aW11bSByZWRpcmVjdGlvbnNcIiwgTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1IsIHtcbiAgICAgICAgICAgICAgICByZWRpcmVjdHM6IGF0dGVtcHQsIHRyYW5zYWN0aW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHR4U2VuZGVyID0gdHJhbnNhY3Rpb24udG87XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wZXJmb3JtKFwiY2FsbFwiLCB7IHRyYW5zYWN0aW9uLCBibG9ja1RhZyB9KTtcblxuICAgICAgICAvLyBDQ0lQIFJlYWQgcmVxdWVzdCB2aWEgT2ZmY2hhaW5Mb29rdXAoYWRkcmVzcyxzdHJpbmdbXSxieXRlcyxieXRlczQsYnl0ZXMpXG4gICAgICAgIGlmIChhdHRlbXB0ID49IDAgJiYgYmxvY2tUYWcgPT09IFwibGF0ZXN0XCIgJiYgdHhTZW5kZXIgIT0gbnVsbCAmJiByZXN1bHQuc3Vic3RyaW5nKDAsIDEwKSA9PT0gXCIweDU1NmYxODMwXCIgJiYgKGhleERhdGFMZW5ndGgocmVzdWx0KSAlIDMyID09PSA0KSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gaGV4RGF0YVNsaWNlKHJlc3VsdCwgNCk7XG5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGUgc2VuZGVyIG9mIHRoZSBPZmZjaGFpbkxvb2t1cCBtYXRjaGVzIHRoZSB0cmFuc2FjdGlvblxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbmRlciA9IGhleERhdGFTbGljZShkYXRhLCAwLCAzMik7XG4gICAgICAgICAgICAgICAgaWYgKCFCaWdOdW1iZXIuZnJvbShzZW5kZXIpLmVxKHR4U2VuZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcIkNDSVAgUmVhZCBzZW5kZXIgZGlkIG5vdCBtYXRjaFwiLCBMb2dnZXIuZXJyb3JzLkNBTExfRVhDRVBUSU9OLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk9mZmNoYWluTG9va3VwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmU6IFwiT2ZmY2hhaW5Mb29rdXAoYWRkcmVzcyxzdHJpbmdbXSxieXRlcyxieXRlczQsYnl0ZXMpXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbiwgZGF0YTogcmVzdWx0XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFJlYWQgdGhlIFVSTHMgZnJvbSB0aGUgcmVzcG9uc2VcbiAgICAgICAgICAgICAgICBjb25zdCB1cmxzOiBBcnJheTxzdHJpbmc+ID0gW107XG4gICAgICAgICAgICAgICAgY29uc3QgdXJsc09mZnNldCA9IEJpZ051bWJlci5mcm9tKGhleERhdGFTbGljZShkYXRhLCAzMiwgNjQpKS50b051bWJlcigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVybHNMZW5ndGggPSBCaWdOdW1iZXIuZnJvbShoZXhEYXRhU2xpY2UoZGF0YSwgdXJsc09mZnNldCwgdXJsc09mZnNldCArIDMyKSkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB1cmxzRGF0YSA9IGhleERhdGFTbGljZShkYXRhLCB1cmxzT2Zmc2V0ICsgMzIpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHUgPSAwOyB1IDwgdXJsc0xlbmd0aDsgdSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IF9wYXJzZVN0cmluZyh1cmxzRGF0YSwgdSAqIDMyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVybCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcIkNDSVAgUmVhZCBjb250YWluZWQgY29ycnVwdCBVUkwgc3RyaW5nXCIsIExvZ2dlci5lcnJvcnMuQ0FMTF9FWENFUFRJT04sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk9mZmNoYWluTG9va3VwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlOiBcIk9mZmNoYWluTG9va3VwKGFkZHJlc3Msc3RyaW5nW10sYnl0ZXMsYnl0ZXM0LGJ5dGVzKVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLCBkYXRhOiByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHVybHMucHVzaCh1cmwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgQ0NJUCBjYWxsZGF0YSB0byBmb3J3YXJkXG4gICAgICAgICAgICAgICAgY29uc3QgY2FsbGRhdGEgPSBfcGFyc2VCeXRlcyhkYXRhLCA2NCk7XG5cbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGNhbGxiYWNrU2VsZWN0b3IgKGJ5dGVzNClcbiAgICAgICAgICAgICAgICBpZiAoIUJpZ051bWJlci5mcm9tKGhleERhdGFTbGljZShkYXRhLCAxMDAsIDEyOCkpLmlzWmVybygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiQ0NJUCBSZWFkIGNhbGxiYWNrIHNlbGVjdG9yIGluY2x1ZGVkIGp1bmtcIiwgTG9nZ2VyLmVycm9ycy5DQUxMX0VYQ0VQVElPTiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJPZmZjaGFpbkxvb2t1cFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlOiBcIk9mZmNoYWluTG9va3VwKGFkZHJlc3Msc3RyaW5nW10sYnl0ZXMsYnl0ZXM0LGJ5dGVzKVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24sIGRhdGE6IHJlc3VsdFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2tTZWxlY3RvciA9IGhleERhdGFTbGljZShkYXRhLCA5NiwgMTAwKTtcblxuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgZXh0cmEgZGF0YSB0byBzZW5kIGJhY2sgdG8gdGhlIGNvbnRyYWN0IGFzIGNvbnRleHRcbiAgICAgICAgICAgICAgICBjb25zdCBleHRyYURhdGEgPSBfcGFyc2VCeXRlcyhkYXRhLCAxMjgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgY2NpcFJlc3VsdCA9IGF3YWl0IHRoaXMuY2NpcFJlYWRGZXRjaCg8VHJhbnNhY3Rpb24+dHJhbnNhY3Rpb24sIGNhbGxkYXRhLCB1cmxzKTtcbiAgICAgICAgICAgICAgICBpZiAoY2NpcFJlc3VsdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiQ0NJUCBSZWFkIGRpc2FibGVkIG9yIHByb3ZpZGVkIG5vIFVSTHNcIiwgTG9nZ2VyLmVycm9ycy5DQUxMX0VYQ0VQVElPTiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJPZmZjaGFpbkxvb2t1cFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlOiBcIk9mZmNoYWluTG9va3VwKGFkZHJlc3Msc3RyaW5nW10sYnl0ZXMsYnl0ZXM0LGJ5dGVzKVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24sIGRhdGE6IHJlc3VsdFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0eCA9IHtcbiAgICAgICAgICAgICAgICAgICAgdG86IHR4U2VuZGVyLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBoZXhDb25jYXQoWyBjYWxsYmFja1NlbGVjdG9yLCBlbmNvZGVCeXRlcyhbIGNjaXBSZXN1bHQsIGV4dHJhRGF0YSBdKSBdKVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FsbCh0eCwgYmxvY2tUYWcsIGF0dGVtcHQgKyAxKTtcblxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1IpIHsgdGhyb3cgZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gaGV4bGlmeShyZXN1bHQpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKFwiYmFkIHJlc3VsdCBmcm9tIGJhY2tlbmRcIiwgTG9nZ2VyLmVycm9ycy5TRVJWRVJfRVJST1IsIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiY2FsbFwiLFxuICAgICAgICAgICAgICAgIHBhcmFtczogeyB0cmFuc2FjdGlvbiwgYmxvY2tUYWcgfSwgcmVzdWx0LCBlcnJvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGFzeW5jIGNhbGwodHJhbnNhY3Rpb246IERlZmVycmFibGU8VHJhbnNhY3Rpb25SZXF1ZXN0PiwgYmxvY2tUYWc/OiBCbG9ja1RhZyB8IFByb21pc2U8QmxvY2tUYWc+KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5nZXROZXR3b3JrKCk7XG4gICAgICAgIGNvbnN0IHJlc29sdmVkID0gYXdhaXQgcmVzb2x2ZVByb3BlcnRpZXMoe1xuICAgICAgICAgICAgdHJhbnNhY3Rpb246IHRoaXMuX2dldFRyYW5zYWN0aW9uUmVxdWVzdCh0cmFuc2FjdGlvbiksXG4gICAgICAgICAgICBibG9ja1RhZzogdGhpcy5fZ2V0QmxvY2tUYWcoYmxvY2tUYWcpLFxuICAgICAgICAgICAgY2NpcFJlYWRFbmFibGVkOiBQcm9taXNlLnJlc29sdmUodHJhbnNhY3Rpb24uY2NpcFJlYWRFbmFibGVkKVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbGwocmVzb2x2ZWQudHJhbnNhY3Rpb24sIHJlc29sdmVkLmJsb2NrVGFnLCByZXNvbHZlZC5jY2lwUmVhZEVuYWJsZWQgPyAwOiAtMSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZXN0aW1hdGVHYXModHJhbnNhY3Rpb246IERlZmVycmFibGU8VHJhbnNhY3Rpb25SZXF1ZXN0Pik6IFByb21pc2U8QmlnTnVtYmVyPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZ2V0TmV0d29yaygpO1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBhd2FpdCByZXNvbHZlUHJvcGVydGllcyh7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbjogdGhpcy5fZ2V0VHJhbnNhY3Rpb25SZXF1ZXN0KHRyYW5zYWN0aW9uKVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnBlcmZvcm0oXCJlc3RpbWF0ZUdhc1wiLCBwYXJhbXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIEJpZ051bWJlci5mcm9tKHJlc3VsdCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoXCJiYWQgcmVzdWx0IGZyb20gYmFja2VuZFwiLCBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUiwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJlc3RpbWF0ZUdhc1wiLFxuICAgICAgICAgICAgICAgIHBhcmFtcywgcmVzdWx0LCBlcnJvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBfZ2V0QWRkcmVzcyhhZGRyZXNzT3JOYW1lOiBzdHJpbmcgfCBQcm9taXNlPHN0cmluZz4pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBhZGRyZXNzT3JOYW1lID0gYXdhaXQgYWRkcmVzc09yTmFtZTtcbiAgICAgICAgaWYgKHR5cGVvZihhZGRyZXNzT3JOYW1lKSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYWRkcmVzcyBvciBFTlMgbmFtZVwiLCBcIm5hbWVcIiwgYWRkcmVzc09yTmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhZGRyZXNzID0gYXdhaXQgdGhpcy5yZXNvbHZlTmFtZShhZGRyZXNzT3JOYW1lKTtcbiAgICAgICAgaWYgKGFkZHJlc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJFTlMgbmFtZSBub3QgY29uZmlndXJlZFwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogYHJlc29sdmVOYW1lKCR7IEpTT04uc3RyaW5naWZ5KGFkZHJlc3NPck5hbWUpIH0pYFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFkZHJlc3M7XG4gICAgfVxuXG4gICAgYXN5bmMgX2dldEJsb2NrKGJsb2NrSGFzaE9yQmxvY2tUYWc6IEJsb2NrVGFnIHwgc3RyaW5nIHwgUHJvbWlzZTxCbG9ja1RhZyB8IHN0cmluZz4sIGluY2x1ZGVUcmFuc2FjdGlvbnM/OiBib29sZWFuKTogUHJvbWlzZTxCbG9jayB8IEJsb2NrV2l0aFRyYW5zYWN0aW9ucz4ge1xuICAgICAgICBhd2FpdCB0aGlzLmdldE5ldHdvcmsoKTtcblxuICAgICAgICBibG9ja0hhc2hPckJsb2NrVGFnID0gYXdhaXQgYmxvY2tIYXNoT3JCbG9ja1RhZztcblxuICAgICAgICAvLyBJZiBibG9ja1RhZyBpcyBhIG51bWJlciAobm90IFwibGF0ZXN0XCIsIGV0YyksIHRoaXMgaXMgdGhlIGJsb2NrIG51bWJlclxuICAgICAgICBsZXQgYmxvY2tOdW1iZXIgPSAtMTI4O1xuXG4gICAgICAgIGNvbnN0IHBhcmFtczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHtcbiAgICAgICAgICAgIGluY2x1ZGVUcmFuc2FjdGlvbnM6ICEhaW5jbHVkZVRyYW5zYWN0aW9uc1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChpc0hleFN0cmluZyhibG9ja0hhc2hPckJsb2NrVGFnLCAzMikpIHtcbiAgICAgICAgICAgIHBhcmFtcy5ibG9ja0hhc2ggPSBibG9ja0hhc2hPckJsb2NrVGFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJhbXMuYmxvY2tUYWcgPSBhd2FpdCB0aGlzLl9nZXRCbG9ja1RhZyhibG9ja0hhc2hPckJsb2NrVGFnKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNIZXhTdHJpbmcocGFyYW1zLmJsb2NrVGFnKSkge1xuICAgICAgICAgICAgICAgICAgICBibG9ja051bWJlciA9IHBhcnNlSW50KHBhcmFtcy5ibG9ja1RhZy5zdWJzdHJpbmcoMiksIDE2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGJsb2NrIGhhc2ggb3IgYmxvY2sgdGFnXCIsIFwiYmxvY2tIYXNoT3JCbG9ja1RhZ1wiLCBibG9ja0hhc2hPckJsb2NrVGFnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwb2xsKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrID0gYXdhaXQgdGhpcy5wZXJmb3JtKFwiZ2V0QmxvY2tcIiwgcGFyYW1zKTtcblxuICAgICAgICAgICAgLy8gQmxvY2sgd2FzIG5vdCBmb3VuZFxuICAgICAgICAgICAgaWYgKGJsb2NrID09IG51bGwpIHtcblxuICAgICAgICAgICAgICAgIC8vIEZvciBibG9ja2hhc2hlcywgaWYgd2UgZGlkbid0IHNheSBpdCBleGlzdGVkLCB0aGF0IGJsb2NraGFzaCBtYXlcbiAgICAgICAgICAgICAgICAvLyBub3QgZXhpc3QuIElmIHdlIGRpZCBzZWUgaXQgdGhvdWdoLCBwZXJoYXBzIGZyb20gYSBsb2csIHdlIGtub3dcbiAgICAgICAgICAgICAgICAvLyBpdCBleGlzdHMsIGFuZCB0aGlzIG5vZGUgaXMganVzdCBub3QgY2F1Z2h0IHVwIHlldC5cbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmJsb2NrSGFzaCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9lbWl0dGVkW1wiYjpcIiArIHBhcmFtcy5ibG9ja0hhc2hdID09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBGb3IgYmxvY2sgdGFncywgaWYgd2UgYXJlIGFza2luZyBmb3IgYSBmdXR1cmUgYmxvY2ssIHdlIHJldHVybiBudWxsXG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5ibG9ja1RhZyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChibG9ja051bWJlciA+IHRoaXMuX2VtaXR0ZWQuYmxvY2spIHsgcmV0dXJuIG51bGw7IH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBSZXRyeSBvbiB0aGUgbmV4dCBibG9ja1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFkZCB0cmFuc2FjdGlvbnNcbiAgICAgICAgICAgIGlmIChpbmNsdWRlVHJhbnNhY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgbGV0IGJsb2NrTnVtYmVyOiBudW1iZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvY2sudHJhbnNhY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR4ID0gYmxvY2sudHJhbnNhY3Rpb25zW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHguYmxvY2tOdW1iZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHguY29uZmlybWF0aW9ucyA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eC5jb25maXJtYXRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChibG9ja051bWJlciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tOdW1iZXIgPSBhd2FpdCB0aGlzLl9nZXRJbnRlcm5hbEJsb2NrTnVtYmVyKDEwMCArIDIgKiB0aGlzLnBvbGxpbmdJbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgY29uZmlybWF0aW9ucyB1c2luZyB0aGUgZmFzdCBibG9jayBudW1iZXIgKHBlc3NpbWlzdGljKVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbmZpcm1hdGlvbnMgPSAoYmxvY2tOdW1iZXIgLSB0eC5ibG9ja051bWJlcikgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpcm1hdGlvbnMgPD0gMCkgeyBjb25maXJtYXRpb25zID0gMTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdHguY29uZmlybWF0aW9ucyA9IGNvbmZpcm1hdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBibG9ja1dpdGhUeHM6IGFueSA9IHRoaXMuZm9ybWF0dGVyLmJsb2NrV2l0aFRyYW5zYWN0aW9ucyhibG9jayk7XG4gICAgICAgICAgICAgICAgYmxvY2tXaXRoVHhzLnRyYW5zYWN0aW9ucyA9IGJsb2NrV2l0aFR4cy50cmFuc2FjdGlvbnMubWFwKCh0eDogVHJhbnNhY3Rpb25SZXNwb25zZSkgPT4gdGhpcy5fd3JhcFRyYW5zYWN0aW9uKHR4KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJsb2NrV2l0aFR4cztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyLmJsb2NrKGJsb2NrKTtcblxuICAgICAgICB9LCB7IG9uY2VQb2xsOiB0aGlzIH0pO1xuICAgIH1cblxuICAgIGdldEJsb2NrKGJsb2NrSGFzaE9yQmxvY2tUYWc6IEJsb2NrVGFnIHwgc3RyaW5nIHwgUHJvbWlzZTxCbG9ja1RhZyB8IHN0cmluZz4pOiBQcm9taXNlPEJsb2NrPiB7XG4gICAgICAgIHJldHVybiA8UHJvbWlzZTxCbG9jaz4+KHRoaXMuX2dldEJsb2NrKGJsb2NrSGFzaE9yQmxvY2tUYWcsIGZhbHNlKSk7XG4gICAgfVxuXG4gICAgZ2V0QmxvY2tXaXRoVHJhbnNhY3Rpb25zKGJsb2NrSGFzaE9yQmxvY2tUYWc6IEJsb2NrVGFnIHwgc3RyaW5nIHwgUHJvbWlzZTxCbG9ja1RhZyB8IHN0cmluZz4pOiBQcm9taXNlPEJsb2NrV2l0aFRyYW5zYWN0aW9ucz4ge1xuICAgICAgICByZXR1cm4gPFByb21pc2U8QmxvY2tXaXRoVHJhbnNhY3Rpb25zPj4odGhpcy5fZ2V0QmxvY2soYmxvY2tIYXNoT3JCbG9ja1RhZywgdHJ1ZSkpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uSGFzaDogc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+KTogUHJvbWlzZTxUcmFuc2FjdGlvblJlc3BvbnNlPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZ2V0TmV0d29yaygpO1xuICAgICAgICB0cmFuc2FjdGlvbkhhc2ggPSBhd2FpdCB0cmFuc2FjdGlvbkhhc2g7XG5cbiAgICAgICAgY29uc3QgcGFyYW1zID0geyB0cmFuc2FjdGlvbkhhc2g6IHRoaXMuZm9ybWF0dGVyLmhhc2godHJhbnNhY3Rpb25IYXNoLCB0cnVlKSB9O1xuXG4gICAgICAgIHJldHVybiBwb2xsKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMucGVyZm9ybShcImdldFRyYW5zYWN0aW9uXCIsIHBhcmFtcyk7XG5cbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9lbWl0dGVkW1widDpcIiArIHRyYW5zYWN0aW9uSGFzaF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdHggPSB0aGlzLmZvcm1hdHRlci50cmFuc2FjdGlvblJlc3BvbnNlKHJlc3VsdCk7XG5cbiAgICAgICAgICAgIGlmICh0eC5ibG9ja051bWJlciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHguY29uZmlybWF0aW9ucyA9IDA7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHguY29uZmlybWF0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmxvY2tOdW1iZXIgPSBhd2FpdCB0aGlzLl9nZXRJbnRlcm5hbEJsb2NrTnVtYmVyKDEwMCArIDIgKiB0aGlzLnBvbGxpbmdJbnRlcnZhbCk7XG5cbiAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIGNvbmZpcm1hdGlvbnMgdXNpbmcgdGhlIGZhc3QgYmxvY2sgbnVtYmVyIChwZXNzaW1pc3RpYylcbiAgICAgICAgICAgICAgICBsZXQgY29uZmlybWF0aW9ucyA9IChibG9ja051bWJlciAtIHR4LmJsb2NrTnVtYmVyKSArIDE7XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpcm1hdGlvbnMgPD0gMCkgeyBjb25maXJtYXRpb25zID0gMTsgfVxuICAgICAgICAgICAgICAgIHR4LmNvbmZpcm1hdGlvbnMgPSBjb25maXJtYXRpb25zO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd3JhcFRyYW5zYWN0aW9uKHR4KTtcbiAgICAgICAgfSwgeyBvbmNlUG9sbDogdGhpcyB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRUcmFuc2FjdGlvblJlY2VpcHQodHJhbnNhY3Rpb25IYXNoOiBzdHJpbmcgfCBQcm9taXNlPHN0cmluZz4pOiBQcm9taXNlPFRyYW5zYWN0aW9uUmVjZWlwdD4ge1xuICAgICAgICBhd2FpdCB0aGlzLmdldE5ldHdvcmsoKTtcblxuICAgICAgICB0cmFuc2FjdGlvbkhhc2ggPSBhd2FpdCB0cmFuc2FjdGlvbkhhc2g7XG5cbiAgICAgICAgY29uc3QgcGFyYW1zID0geyB0cmFuc2FjdGlvbkhhc2g6IHRoaXMuZm9ybWF0dGVyLmhhc2godHJhbnNhY3Rpb25IYXNoLCB0cnVlKSB9O1xuXG4gICAgICAgIHJldHVybiBwb2xsKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMucGVyZm9ybShcImdldFRyYW5zYWN0aW9uUmVjZWlwdFwiLCBwYXJhbXMpO1xuXG4gICAgICAgICAgICBpZiAocmVzdWx0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZW1pdHRlZFtcInQ6XCIgKyB0cmFuc2FjdGlvbkhhc2hdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFwiZ2V0aC1ldGNcIiByZXR1cm5zIHJlY2VpcHRzIGJlZm9yZSB0aGV5IGFyZSByZWFkeVxuICAgICAgICAgICAgaWYgKHJlc3VsdC5ibG9ja0hhc2ggPT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9XG5cbiAgICAgICAgICAgIGNvbnN0IHJlY2VpcHQgPSB0aGlzLmZvcm1hdHRlci5yZWNlaXB0KHJlc3VsdCk7XG5cbiAgICAgICAgICAgIGlmIChyZWNlaXB0LmJsb2NrTnVtYmVyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZWNlaXB0LmNvbmZpcm1hdGlvbnMgPSAwO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlY2VpcHQuY29uZmlybWF0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYmxvY2tOdW1iZXIgPSBhd2FpdCB0aGlzLl9nZXRJbnRlcm5hbEJsb2NrTnVtYmVyKDEwMCArIDIgKiB0aGlzLnBvbGxpbmdJbnRlcnZhbCk7XG5cbiAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIGNvbmZpcm1hdGlvbnMgdXNpbmcgdGhlIGZhc3QgYmxvY2sgbnVtYmVyIChwZXNzaW1pc3RpYylcbiAgICAgICAgICAgICAgICBsZXQgY29uZmlybWF0aW9ucyA9IChibG9ja051bWJlciAtIHJlY2VpcHQuYmxvY2tOdW1iZXIpICsgMTtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlybWF0aW9ucyA8PSAwKSB7IGNvbmZpcm1hdGlvbnMgPSAxOyB9XG4gICAgICAgICAgICAgICAgcmVjZWlwdC5jb25maXJtYXRpb25zID0gY29uZmlybWF0aW9ucztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlY2VpcHQ7XG4gICAgICAgIH0sIHsgb25jZVBvbGw6IHRoaXMgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0TG9ncyhmaWx0ZXI6IEZpbHRlciB8IEZpbHRlckJ5QmxvY2tIYXNoIHwgUHJvbWlzZTxGaWx0ZXIgfCBGaWx0ZXJCeUJsb2NrSGFzaD4pOiBQcm9taXNlPEFycmF5PExvZz4+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5nZXROZXR3b3JrKCk7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IGF3YWl0IHJlc29sdmVQcm9wZXJ0aWVzKHsgZmlsdGVyOiB0aGlzLl9nZXRGaWx0ZXIoZmlsdGVyKSB9KTtcbiAgICAgICAgY29uc3QgbG9nczogQXJyYXk8TG9nPiA9IGF3YWl0IHRoaXMucGVyZm9ybShcImdldExvZ3NcIiwgcGFyYW1zKTtcbiAgICAgICAgbG9ncy5mb3JFYWNoKChsb2cpID0+IHtcbiAgICAgICAgICAgIGlmIChsb2cucmVtb3ZlZCA9PSBudWxsKSB7IGxvZy5yZW1vdmVkID0gZmFsc2U7IH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBGb3JtYXR0ZXIuYXJyYXlPZih0aGlzLmZvcm1hdHRlci5maWx0ZXJMb2cuYmluZCh0aGlzLmZvcm1hdHRlcikpKGxvZ3MpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEV0aGVyUHJpY2UoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5nZXROZXR3b3JrKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnBlcmZvcm0oXCJnZXRFdGhlclByaWNlXCIsIHsgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgX2dldEJsb2NrVGFnKGJsb2NrVGFnOiBCbG9ja1RhZyB8IFByb21pc2U8QmxvY2tUYWc+KTogUHJvbWlzZTxCbG9ja1RhZz4ge1xuICAgICAgICBibG9ja1RhZyA9IGF3YWl0IGJsb2NrVGFnO1xuXG4gICAgICAgIGlmICh0eXBlb2YoYmxvY2tUYWcpID09PSBcIm51bWJlclwiICYmIGJsb2NrVGFnIDwgMCkge1xuICAgICAgICAgICAgaWYgKGJsb2NrVGFnICUgMSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIEJsb2NrVGFnXCIsIFwiYmxvY2tUYWdcIiwgYmxvY2tUYWcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgYmxvY2tOdW1iZXIgPSBhd2FpdCB0aGlzLl9nZXRJbnRlcm5hbEJsb2NrTnVtYmVyKDEwMCArIDIgKiB0aGlzLnBvbGxpbmdJbnRlcnZhbCk7XG4gICAgICAgICAgICBibG9ja051bWJlciArPSBibG9ja1RhZztcbiAgICAgICAgICAgIGlmIChibG9ja051bWJlciA8IDApIHsgYmxvY2tOdW1iZXIgPSAwOyB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXR0ZXIuYmxvY2tUYWcoYmxvY2tOdW1iZXIpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXR0ZXIuYmxvY2tUYWcoYmxvY2tUYWcpO1xuICAgIH1cblxuXG4gICAgYXN5bmMgZ2V0UmVzb2x2ZXIobmFtZTogc3RyaW5nKTogUHJvbWlzZTxudWxsIHwgUmVzb2x2ZXI+IHtcbiAgICAgICAgbGV0IGN1cnJlbnROYW1lID0gbmFtZTtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50TmFtZSA9PT0gXCJcIiB8fCBjdXJyZW50TmFtZSA9PT0gXCIuXCIpIHsgcmV0dXJuIG51bGw7IH1cblxuICAgICAgICAgICAgLy8gT3B0aW1pemF0aW9uIHNpbmNlIHRoZSBldGggbm9kZSBjYW5ub3QgY2hhbmdlIGFuZCBkb2VzXG4gICAgICAgICAgICAvLyBub3QgaGF2ZSBhIHdpbGRjYXJkIHJlc29sdmVyXG4gICAgICAgICAgICBpZiAobmFtZSAhPT0gXCJldGhcIiAmJiBjdXJyZW50TmFtZSA9PT0gXCJldGhcIikgeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgICAgICAgICAvLyBDaGVjayB0aGUgY3VycmVudCBub2RlIGZvciBhIHJlc29sdmVyXG4gICAgICAgICAgICBjb25zdCBhZGRyID0gYXdhaXQgdGhpcy5fZ2V0UmVzb2x2ZXIoY3VycmVudE5hbWUsIFwiZ2V0UmVzb2x2ZXJcIik7XG5cbiAgICAgICAgICAgIC8vIEZvdW5kIGEgcmVzb2x2ZXIhXG4gICAgICAgICAgICBpZiAoYWRkciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSBuZXcgUmVzb2x2ZXIodGhpcywgYWRkciwgbmFtZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBMZWdhY3kgcmVzb2x2ZXIgZm91bmQsIHVzaW5nIEVJUC0yNTQ0IHNvIGl0IGlzbid0IHNhZmUgdG8gdXNlXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnROYW1lICE9PSBuYW1lICYmICEoYXdhaXQgcmVzb2x2ZXIuc3VwcG9ydHNXaWxkY2FyZCgpKSkgeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZXQgdGhlIHBhcmVudCBub2RlXG4gICAgICAgICAgICBjdXJyZW50TmFtZSA9IGN1cnJlbnROYW1lLnNwbGl0KFwiLlwiKS5zbGljZSgxKS5qb2luKFwiLlwiKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgYXN5bmMgX2dldFJlc29sdmVyKG5hbWU6IHN0cmluZywgb3BlcmF0aW9uPzogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgaWYgKG9wZXJhdGlvbiA9PSBudWxsKSB7IG9wZXJhdGlvbiA9IFwiRU5TXCI7IH1cblxuICAgICAgICBjb25zdCBuZXR3b3JrID0gYXdhaXQgdGhpcy5nZXROZXR3b3JrKCk7XG5cbiAgICAgICAgLy8gTm8gRU5TLi4uXG4gICAgICAgIGlmICghbmV0d29yay5lbnNBZGRyZXNzKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcbiAgICAgICAgICAgICAgICBcIm5ldHdvcmsgZG9lcyBub3Qgc3VwcG9ydCBFTlNcIixcbiAgICAgICAgICAgICAgICBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTixcbiAgICAgICAgICAgICAgICB7IG9wZXJhdGlvbiwgbmV0d29yazogbmV0d29yay5uYW1lIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8ga2VjY2FrMjU2KFwicmVzb2x2ZXIoYnl0ZXMzMilcIilcbiAgICAgICAgICAgIGNvbnN0IGFkZHJEYXRhID0gYXdhaXQgdGhpcy5jYWxsKHtcbiAgICAgICAgICAgICAgICB0bzogbmV0d29yay5lbnNBZGRyZXNzLFxuICAgICAgICAgICAgICAgIGRhdGE6IChcIjB4MDE3OGI4YmZcIiArIG5hbWVoYXNoKG5hbWUpLnN1YnN0cmluZygyKSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyLmNhbGxBZGRyZXNzKGFkZHJEYXRhKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEVOUyByZWdpc3RyeSBjYW5ub3QgdGhyb3cgZXJyb3JzIG9uIHJlc29sdmVyKGJ5dGVzMzIpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBhc3luYyByZXNvbHZlTmFtZShuYW1lOiBzdHJpbmcgfCBQcm9taXNlPHN0cmluZz4pOiBQcm9taXNlPG51bGwgfCBzdHJpbmc+IHtcbiAgICAgICAgbmFtZSA9IGF3YWl0IG5hbWU7XG5cbiAgICAgICAgLy8gSWYgaXQgaXMgYWxyZWFkeSBhbiBhZGRyZXNzLCBub3RoaW5nIHRvIHJlc29sdmVcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5mb3JtYXR0ZXIuYWRkcmVzcyhuYW1lKSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBJZiBpcyBpcyBhIGhleHN0cmluZywgdGhlIGFkZHJlc3MgaXMgYmFkIChTZWUgIzY5NClcbiAgICAgICAgICAgIGlmIChpc0hleFN0cmluZyhuYW1lKSkgeyB0aHJvdyBlcnJvcjsgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZihuYW1lKSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgRU5TIG5hbWVcIiwgXCJuYW1lXCIsIG5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHRoZSBhZGRyIGZyb20gdGhlIHJlc29sdmVyXG4gICAgICAgIGNvbnN0IHJlc29sdmVyID0gYXdhaXQgdGhpcy5nZXRSZXNvbHZlcihuYW1lKTtcbiAgICAgICAgaWYgKCFyZXNvbHZlcikgeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgICAgIHJldHVybiBhd2FpdCByZXNvbHZlci5nZXRBZGRyZXNzKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9va3VwQWRkcmVzcyhhZGRyZXNzOiBzdHJpbmcgfCBQcm9taXNlPHN0cmluZz4pOiBQcm9taXNlPG51bGwgfCBzdHJpbmc+IHtcbiAgICAgICAgYWRkcmVzcyA9IGF3YWl0IGFkZHJlc3M7XG4gICAgICAgIGFkZHJlc3MgPSB0aGlzLmZvcm1hdHRlci5hZGRyZXNzKGFkZHJlc3MpO1xuXG4gICAgICAgIGNvbnN0IG5vZGUgPSBhZGRyZXNzLnN1YnN0cmluZygyKS50b0xvd2VyQ2FzZSgpICsgXCIuYWRkci5yZXZlcnNlXCI7XG5cbiAgICAgICAgY29uc3QgcmVzb2x2ZXJBZGRyID0gYXdhaXQgdGhpcy5fZ2V0UmVzb2x2ZXIobm9kZSwgXCJsb29rdXBBZGRyZXNzXCIpO1xuICAgICAgICBpZiAocmVzb2x2ZXJBZGRyID09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cblxuICAgICAgICAvLyBrZWNjYWsoXCJuYW1lKGJ5dGVzMzIpXCIpXG4gICAgICAgIGNvbnN0IG5hbWUgPSBfcGFyc2VTdHJpbmcoYXdhaXQgdGhpcy5jYWxsKHtcbiAgICAgICAgICAgIHRvOiByZXNvbHZlckFkZHIsXG4gICAgICAgICAgICBkYXRhOiAoXCIweDY5MWYzNDMxXCIgKyBuYW1laGFzaChub2RlKS5zdWJzdHJpbmcoMikpXG4gICAgICAgIH0pLCAwKTtcblxuICAgICAgICBjb25zdCBhZGRyID0gYXdhaXQgdGhpcy5yZXNvbHZlTmFtZShuYW1lKTtcbiAgICAgICAgaWYgKGFkZHIgIT0gYWRkcmVzcykgeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEF2YXRhcihuYW1lT3JBZGRyZXNzOiBzdHJpbmcpOiBQcm9taXNlPG51bGwgfCBzdHJpbmc+IHtcbiAgICAgICAgbGV0IHJlc29sdmVyOiBSZXNvbHZlciA9IG51bGw7XG4gICAgICAgIGlmIChpc0hleFN0cmluZyhuYW1lT3JBZGRyZXNzKSkge1xuICAgICAgICAgICAgLy8gQWRkcmVzczsgcmV2ZXJzZSBsb29rdXBcbiAgICAgICAgICAgIGNvbnN0IGFkZHJlc3MgPSB0aGlzLmZvcm1hdHRlci5hZGRyZXNzKG5hbWVPckFkZHJlc3MpO1xuXG4gICAgICAgICAgICBjb25zdCBub2RlID0gYWRkcmVzcy5zdWJzdHJpbmcoMikudG9Mb3dlckNhc2UoKSArIFwiLmFkZHIucmV2ZXJzZVwiO1xuXG4gICAgICAgICAgICBjb25zdCByZXNvbHZlckFkZHJlc3MgPSBhd2FpdCB0aGlzLl9nZXRSZXNvbHZlcihub2RlLCBcImdldEF2YXRhclwiKTtcbiAgICAgICAgICAgIGlmICghcmVzb2x2ZXJBZGRyZXNzKSB7IHJldHVybiBudWxsOyB9XG5cbiAgICAgICAgICAgIC8vIFRyeSByZXNvbHZpbmcgdGhlIGF2YXRhciBhZ2FpbnN0IHRoZSBhZGRyLnJldmVyc2UgcmVzb2x2ZXJcbiAgICAgICAgICAgIHJlc29sdmVyID0gbmV3IFJlc29sdmVyKHRoaXMsIHJlc29sdmVyQWRkcmVzcywgbm9kZSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF2YXRhciA9IGF3YWl0IHJlc29sdmVyLmdldEF2YXRhcigpO1xuICAgICAgICAgICAgICAgIGlmIChhdmF0YXIpIHsgcmV0dXJuIGF2YXRhci51cmw7IH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgIT09IExvZ2dlci5lcnJvcnMuQ0FMTF9FWENFUFRJT04pIHsgdGhyb3cgZXJyb3I7IH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVHJ5IGdldHRpbmcgdGhlIG5hbWUgYW5kIHBlcmZvcm1pbmcgZm9yd2FyZCBsb29rdXA7IGFsbG93aW5nIHdpbGRjYXJkc1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBrZWNjYWsoXCJuYW1lKGJ5dGVzMzIpXCIpXG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IF9wYXJzZVN0cmluZyhhd2FpdCB0aGlzLmNhbGwoe1xuICAgICAgICAgICAgICAgICAgICB0bzogcmVzb2x2ZXJBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiAoXCIweDY5MWYzNDMxXCIgKyBuYW1laGFzaChub2RlKS5zdWJzdHJpbmcoMikpXG4gICAgICAgICAgICAgICAgfSksIDApO1xuICAgICAgICAgICAgICAgIHJlc29sdmVyID0gYXdhaXQgdGhpcy5nZXRSZXNvbHZlcihuYW1lKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgIT09IExvZ2dlci5lcnJvcnMuQ0FMTF9FWENFUFRJT04pIHsgdGhyb3cgZXJyb3I7IH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRU5TIG5hbWU7IGZvcndhcmQgbG9va3VwIHdpdGggd2lsZGNhcmRcbiAgICAgICAgICAgIHJlc29sdmVyID0gYXdhaXQgdGhpcy5nZXRSZXNvbHZlcihuYW1lT3JBZGRyZXNzKTtcbiAgICAgICAgICAgIGlmICghcmVzb2x2ZXIpIHsgcmV0dXJuIG51bGw7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGF2YXRhciA9IGF3YWl0IHJlc29sdmVyLmdldEF2YXRhcigpO1xuICAgICAgICBpZiAoYXZhdGFyID09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cblxuICAgICAgICByZXR1cm4gYXZhdGFyLnVybDtcbiAgICB9XG5cbiAgICBwZXJmb3JtKG1ldGhvZDogc3RyaW5nLCBwYXJhbXM6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihtZXRob2QgKyBcIiBub3QgaW1wbGVtZW50ZWRcIiwgTG9nZ2VyLmVycm9ycy5OT1RfSU1QTEVNRU5URUQsIHsgb3BlcmF0aW9uOiBtZXRob2QgfSk7XG4gICAgfVxuXG4gICAgX3N0YXJ0RXZlbnQoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMucG9sbGluZyA9ICh0aGlzLl9ldmVudHMuZmlsdGVyKChlKSA9PiBlLnBvbGxhYmxlKCkpLmxlbmd0aCA+IDApO1xuICAgIH1cblxuICAgIF9zdG9wRXZlbnQoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMucG9sbGluZyA9ICh0aGlzLl9ldmVudHMuZmlsdGVyKChlKSA9PiBlLnBvbGxhYmxlKCkpLmxlbmd0aCA+IDApO1xuICAgIH1cblxuICAgIF9hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZTogRXZlbnRUeXBlLCBsaXN0ZW5lcjogTGlzdGVuZXIsIG9uY2U6IGJvb2xlYW4pOiB0aGlzIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoZ2V0RXZlbnRUYWcoZXZlbnROYW1lKSwgbGlzdGVuZXIsIG9uY2UpXG4gICAgICAgIHRoaXMuX2V2ZW50cy5wdXNoKGV2ZW50KTtcbiAgICAgICAgdGhpcy5fc3RhcnRFdmVudChldmVudCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgb24oZXZlbnROYW1lOiBFdmVudFR5cGUsIGxpc3RlbmVyOiBMaXN0ZW5lcik6IHRoaXMge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgb25jZShldmVudE5hbWU6IEV2ZW50VHlwZSwgbGlzdGVuZXI6IExpc3RlbmVyKTogdGhpcyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH1cblxuXG4gICAgZW1pdChldmVudE5hbWU6IEV2ZW50VHlwZSwgLi4uYXJnczogQXJyYXk8YW55Pik6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICAgICAgbGV0IHN0b3BwZWQ6IEFycmF5PEV2ZW50PiA9IFsgXTtcblxuICAgICAgICBsZXQgZXZlbnRUYWcgPSBnZXRFdmVudFRhZyhldmVudE5hbWUpO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMuZmlsdGVyKChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnRhZyAhPT0gZXZlbnRUYWcpIHsgcmV0dXJuIHRydWU7IH1cblxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgZXZlbnQubGlzdGVuZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICB9LCAwKTtcblxuICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKGV2ZW50Lm9uY2UpIHtcbiAgICAgICAgICAgICAgICBzdG9wcGVkLnB1c2goZXZlbnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN0b3BwZWQuZm9yRWFjaCgoZXZlbnQpID0+IHsgdGhpcy5fc3RvcEV2ZW50KGV2ZW50KTsgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBsaXN0ZW5lckNvdW50KGV2ZW50TmFtZT86IEV2ZW50VHlwZSk6IG51bWJlciB7XG4gICAgICAgIGlmICghZXZlbnROYW1lKSB7IHJldHVybiB0aGlzLl9ldmVudHMubGVuZ3RoOyB9XG5cbiAgICAgICAgbGV0IGV2ZW50VGFnID0gZ2V0RXZlbnRUYWcoZXZlbnROYW1lKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50cy5maWx0ZXIoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKGV2ZW50LnRhZyA9PT0gZXZlbnRUYWcpO1xuICAgICAgICB9KS5sZW5ndGg7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzKGV2ZW50TmFtZT86IEV2ZW50VHlwZSk6IEFycmF5PExpc3RlbmVyPiB7XG4gICAgICAgIGlmIChldmVudE5hbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50cy5tYXAoKGV2ZW50KSA9PiBldmVudC5saXN0ZW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZXZlbnRUYWcgPSBnZXRFdmVudFRhZyhldmVudE5hbWUpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnRzXG4gICAgICAgICAgICAuZmlsdGVyKChldmVudCkgPT4gKGV2ZW50LnRhZyA9PT0gZXZlbnRUYWcpKVxuICAgICAgICAgICAgLm1hcCgoZXZlbnQpID0+IGV2ZW50Lmxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICBvZmYoZXZlbnROYW1lOiBFdmVudFR5cGUsIGxpc3RlbmVyPzogTGlzdGVuZXIpOiB0aGlzIHtcbiAgICAgICAgaWYgKGxpc3RlbmVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhldmVudE5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RvcHBlZDogQXJyYXk8RXZlbnQ+ID0gWyBdO1xuXG4gICAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuXG4gICAgICAgIGxldCBldmVudFRhZyA9IGdldEV2ZW50VGFnKGV2ZW50TmFtZSk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cy5maWx0ZXIoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQudGFnICE9PSBldmVudFRhZyB8fCBldmVudC5saXN0ZW5lciAhPSBsaXN0ZW5lcikgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICAgICAgaWYgKGZvdW5kKSB7IHJldHVybiB0cnVlOyB9XG4gICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICBzdG9wcGVkLnB1c2goZXZlbnQpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICBzdG9wcGVkLmZvckVhY2goKGV2ZW50KSA9PiB7IHRoaXMuX3N0b3BFdmVudChldmVudCk7IH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJlbW92ZUFsbExpc3RlbmVycyhldmVudE5hbWU/OiBFdmVudFR5cGUpOiB0aGlzIHtcbiAgICAgICAgbGV0IHN0b3BwZWQ6IEFycmF5PEV2ZW50PiA9IFsgXTtcbiAgICAgICAgaWYgKGV2ZW50TmFtZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBzdG9wcGVkID0gdGhpcy5fZXZlbnRzO1xuXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBbIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBldmVudFRhZyA9IGdldEV2ZW50VGFnKGV2ZW50TmFtZSk7XG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMuZmlsdGVyKChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC50YWcgIT09IGV2ZW50VGFnKSB7IHJldHVybiB0cnVlOyB9XG4gICAgICAgICAgICAgICAgc3RvcHBlZC5wdXNoKGV2ZW50KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0b3BwZWQuZm9yRWFjaCgoZXZlbnQpID0+IHsgdGhpcy5fc3RvcEV2ZW50KGV2ZW50KTsgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL3dpa2kvd2lraS9KU09OLVJQQ1xuXG5pbXBvcnQgeyBQcm92aWRlciwgVHJhbnNhY3Rpb25SZXF1ZXN0LCBUcmFuc2FjdGlvblJlc3BvbnNlIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2Fic3RyYWN0LXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBTaWduZXIsIFR5cGVkRGF0YURvbWFpbiwgVHlwZWREYXRhRmllbGQsIFR5cGVkRGF0YVNpZ25lciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1zaWduZXJcIjtcbmltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iaWdudW1iZXJcIjtcbmltcG9ydCB7IEJ5dGVzLCBoZXhsaWZ5LCBoZXhWYWx1ZSwgaGV4WmVyb1BhZCwgaXNIZXhTdHJpbmcgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IF9UeXBlZERhdGFFbmNvZGVyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2hhc2hcIjtcbmltcG9ydCB7IE5ldHdvcmssIE5ldHdvcmtpc2ggfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbmV0d29ya3NcIjtcbmltcG9ydCB7IGNoZWNrUHJvcGVydGllcywgZGVlcENvcHksIERlZmVycmFibGUsIGRlZmluZVJlYWRPbmx5LCBnZXRTdGF0aWMsIHJlc29sdmVQcm9wZXJ0aWVzLCBzaGFsbG93Q29weSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyB0b1V0ZjhCeXRlcyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9zdHJpbmdzXCI7XG5pbXBvcnQgeyBBY2Nlc3NMaXN0LCBhY2Nlc3NMaXN0aWZ5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3RyYW5zYWN0aW9uc1wiO1xuaW1wb3J0IHsgQ29ubmVjdGlvbkluZm8sIGZldGNoSnNvbiwgcG9sbCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC93ZWJcIjtcblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuXG5pbXBvcnQgeyBCYXNlUHJvdmlkZXIsIEV2ZW50IH0gZnJvbSBcIi4vYmFzZS1wcm92aWRlclwiO1xuXG5cbmNvbnN0IGVycm9yR2FzID0gWyBcImNhbGxcIiwgXCJlc3RpbWF0ZUdhc1wiIF07XG5cbmZ1bmN0aW9uIHNwZWx1bmsodmFsdWU6IGFueSwgcmVxdWlyZURhdGE6IGJvb2xlYW4pOiBudWxsIHwgeyBtZXNzYWdlOiBzdHJpbmcsIGRhdGE6IG51bGwgfCBzdHJpbmcgfSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cblxuICAgIC8vIFRoZXNlICphcmUqIHRoZSBkcm9pZHMgd2UncmUgbG9va2luZyBmb3IuXG4gICAgaWYgKHR5cGVvZih2YWx1ZS5tZXNzYWdlKSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZS5tZXNzYWdlLm1hdGNoKFwicmV2ZXJ0ZWRcIikpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGlzSGV4U3RyaW5nKHZhbHVlLmRhdGEpID8gdmFsdWUuZGF0YTogbnVsbDtcbiAgICAgICAgaWYgKCFyZXF1aXJlRGF0YSB8fCBkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlOiB2YWx1ZS5tZXNzYWdlLCBkYXRhIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTcGVsdW5rIGZ1cnRoZXIuLi5cbiAgICBpZiAodHlwZW9mKHZhbHVlKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gc3BlbHVuayh2YWx1ZVtrZXldLCByZXF1aXJlRGF0YSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7IHJldHVybiByZXN1bHQ7IH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBNaWdodCBiZSBhIEpTT04gc3RyaW5nIHdlIGNhbiBmdXJ0aGVyIGRlc2NlbmQuLi5cbiAgICBpZiAodHlwZW9mKHZhbHVlKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHNwZWx1bmsoSlNPTi5wYXJzZSh2YWx1ZSksIHJlcXVpcmVEYXRhKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBjaGVja0Vycm9yKG1ldGhvZDogc3RyaW5nLCBlcnJvcjogYW55LCBwYXJhbXM6IGFueSk6IGFueSB7XG5cbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHBhcmFtcy50cmFuc2FjdGlvbiB8fCBwYXJhbXMuc2lnbmVkVHJhbnNhY3Rpb247XG5cbiAgICAvLyBVbmRvIHRoZSBcImNvbnZlbmllbmNlXCIgc29tZSBub2RlcyBhcmUgYXR0ZW1wdGluZyB0byBwcmV2ZW50IGJhY2t3YXJkc1xuICAgIC8vIGluY29tcGF0aWJpbGl0eTsgbWF5YmUgZm9yIHY2IGNvbnNpZGVyIGZvcndhcmRpbmcgcmV2ZXJ0cyBhcyBlcnJvcnNcbiAgICBpZiAobWV0aG9kID09PSBcImNhbGxcIikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzcGVsdW5rKGVycm9yLCB0cnVlKTtcbiAgICAgICAgaWYgKHJlc3VsdCkgeyByZXR1cm4gcmVzdWx0LmRhdGE7IH1cblxuICAgICAgICAvLyBOb3RoaW5nIGRlc2NyaXB0aXZlLi5cbiAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJtaXNzaW5nIHJldmVydCBkYXRhIGluIGNhbGwgZXhjZXB0aW9uOyBUcmFuc2FjdGlvbiByZXZlcnRlZCB3aXRob3V0IGEgcmVhc29uIHN0cmluZ1wiLCBMb2dnZXIuZXJyb3JzLkNBTExfRVhDRVBUSU9OLCB7XG4gICAgICAgICAgICBkYXRhOiBcIjB4XCIsIHRyYW5zYWN0aW9uLCBlcnJvclxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAobWV0aG9kID09PSBcImVzdGltYXRlR2FzXCIpIHtcbiAgICAgICAgLy8gVHJ5IHRvIGZpbmQgc29tZXRoaW5nLCB3aXRoIGEgcHJlZmVyZW5jZSBvbiBTRVJWRVJfRVJST1IgYm9keVxuICAgICAgICBsZXQgcmVzdWx0ID0gc3BlbHVuayhlcnJvci5ib2R5LCBmYWxzZSk7XG4gICAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCkgeyByZXN1bHQgPSBzcGVsdW5rKGVycm9yLCBmYWxzZSk7IH1cblxuICAgICAgICAvLyBGb3VuZCBcInJldmVydGVkXCIsIHRoaXMgaXMgYSBDQUxMX0VYQ0VQVElPTlxuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImNhbm5vdCBlc3RpbWF0ZSBnYXM7IHRyYW5zYWN0aW9uIG1heSBmYWlsIG9yIG1heSByZXF1aXJlIG1hbnVhbCBnYXMgbGltaXRcIiwgTG9nZ2VyLmVycm9ycy5VTlBSRURJQ1RBQkxFX0dBU19MSU1JVCwge1xuICAgICAgICAgICAgICAgIHJlYXNvbjogcmVzdWx0Lm1lc3NhZ2UsIG1ldGhvZCwgdHJhbnNhY3Rpb24sIGVycm9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEBUT0RPOiBTaG91bGQgd2Ugc3BlbHVuayBmb3IgbWVzc2FnZSB0b28/XG5cbiAgICBsZXQgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG4gICAgaWYgKGVycm9yLmNvZGUgPT09IExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SICYmIGVycm9yLmVycm9yICYmIHR5cGVvZihlcnJvci5lcnJvci5tZXNzYWdlKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBtZXNzYWdlID0gZXJyb3IuZXJyb3IubWVzc2FnZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZihlcnJvci5ib2R5KSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBtZXNzYWdlID0gZXJyb3IuYm9keTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZihlcnJvci5yZXNwb25zZVRleHQpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBlcnJvci5yZXNwb25zZVRleHQ7XG4gICAgfVxuICAgIG1lc3NhZ2UgPSAobWVzc2FnZSB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gXCJpbnN1ZmZpY2llbnQgZnVuZHMgZm9yIGdhcyAqIHByaWNlICsgdmFsdWUgKyBjb3N0KGRhdGEpXCJcbiAgICBpZiAobWVzc2FnZS5tYXRjaCgvaW5zdWZmaWNpZW50IGZ1bmRzfGJhc2UgZmVlIGV4Y2VlZHMgZ2FzIGxpbWl0L2kpKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiaW5zdWZmaWNpZW50IGZ1bmRzIGZvciBpbnRyaW5zaWMgdHJhbnNhY3Rpb24gY29zdFwiLCBMb2dnZXIuZXJyb3JzLklOU1VGRklDSUVOVF9GVU5EUywge1xuICAgICAgICAgICAgZXJyb3IsIG1ldGhvZCwgdHJhbnNhY3Rpb25cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gXCJub25jZSB0b28gbG93XCJcbiAgICBpZiAobWVzc2FnZS5tYXRjaCgvbm9uY2UgKGlzICk/dG9vIGxvdy9pKSkge1xuICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcIm5vbmNlIGhhcyBhbHJlYWR5IGJlZW4gdXNlZFwiLCBMb2dnZXIuZXJyb3JzLk5PTkNFX0VYUElSRUQsIHtcbiAgICAgICAgICAgIGVycm9yLCBtZXRob2QsIHRyYW5zYWN0aW9uXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFwicmVwbGFjZW1lbnQgdHJhbnNhY3Rpb24gdW5kZXJwcmljZWRcIlxuICAgIGlmIChtZXNzYWdlLm1hdGNoKC9yZXBsYWNlbWVudCB0cmFuc2FjdGlvbiB1bmRlcnByaWNlZHx0cmFuc2FjdGlvbiBnYXMgcHJpY2UuKnRvbyBsb3cvaSkpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJyZXBsYWNlbWVudCBmZWUgdG9vIGxvd1wiLCBMb2dnZXIuZXJyb3JzLlJFUExBQ0VNRU5UX1VOREVSUFJJQ0VELCB7XG4gICAgICAgICAgICBlcnJvciwgbWV0aG9kLCB0cmFuc2FjdGlvblxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBcInJlcGxhY2VtZW50IHRyYW5zYWN0aW9uIHVuZGVycHJpY2VkXCJcbiAgICBpZiAobWVzc2FnZS5tYXRjaCgvb25seSByZXBsYXktcHJvdGVjdGVkL2kpKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwibGVnYWN5IHByZS1laXAtMTU1IHRyYW5zYWN0aW9ucyBub3Qgc3VwcG9ydGVkXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICBlcnJvciwgbWV0aG9kLCB0cmFuc2FjdGlvblxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZXJyb3JHYXMuaW5kZXhPZihtZXRob2QpID49IDAgJiYgbWVzc2FnZS5tYXRjaCgvZ2FzIHJlcXVpcmVkIGV4Y2VlZHMgYWxsb3dhbmNlfGFsd2F5cyBmYWlsaW5nIHRyYW5zYWN0aW9ufGV4ZWN1dGlvbiByZXZlcnRlZC8pKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiY2Fubm90IGVzdGltYXRlIGdhczsgdHJhbnNhY3Rpb24gbWF5IGZhaWwgb3IgbWF5IHJlcXVpcmUgbWFudWFsIGdhcyBsaW1pdFwiLCBMb2dnZXIuZXJyb3JzLlVOUFJFRElDVEFCTEVfR0FTX0xJTUlULCB7XG4gICAgICAgICAgICBlcnJvciwgbWV0aG9kLCB0cmFuc2FjdGlvblxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB0aHJvdyBlcnJvcjtcbn1cblxuZnVuY3Rpb24gdGltZXIodGltZW91dDogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXQpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRSZXN1bHQocGF5bG9hZDogeyBlcnJvcj86IHsgY29kZT86IG51bWJlciwgZGF0YT86IGFueSwgbWVzc2FnZT86IHN0cmluZyB9LCByZXN1bHQ/OiBhbnkgfSk6IGFueSB7XG4gICAgaWYgKHBheWxvYWQuZXJyb3IpIHtcbiAgICAgICAgLy8gQFRPRE86IG5vdCBhbnlcbiAgICAgICAgY29uc3QgZXJyb3I6IGFueSA9IG5ldyBFcnJvcihwYXlsb2FkLmVycm9yLm1lc3NhZ2UpO1xuICAgICAgICBlcnJvci5jb2RlID0gcGF5bG9hZC5lcnJvci5jb2RlO1xuICAgICAgICBlcnJvci5kYXRhID0gcGF5bG9hZC5lcnJvci5kYXRhO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICByZXR1cm4gcGF5bG9hZC5yZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGdldExvd2VyQ2FzZSh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAodmFsdWUpIHsgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCk7IH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbmNvbnN0IF9jb25zdHJ1Y3Rvckd1YXJkID0ge307XG5cbmV4cG9ydCBjbGFzcyBKc29uUnBjU2lnbmVyIGV4dGVuZHMgU2lnbmVyIGltcGxlbWVudHMgVHlwZWREYXRhU2lnbmVyIHtcbiAgICByZWFkb25seSBwcm92aWRlcjogSnNvblJwY1Byb3ZpZGVyO1xuICAgIF9pbmRleDogbnVtYmVyO1xuICAgIF9hZGRyZXNzOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25zdHJ1Y3Rvckd1YXJkOiBhbnksIHByb3ZpZGVyOiBKc29uUnBjUHJvdmlkZXIsIGFkZHJlc3NPckluZGV4Pzogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgaWYgKGNvbnN0cnVjdG9yR3VhcmQgIT09IF9jb25zdHJ1Y3Rvckd1YXJkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkbyBub3QgY2FsbCB0aGUgSnNvblJwY1NpZ25lciBjb25zdHJ1Y3RvciBkaXJlY3RseTsgdXNlIHByb3ZpZGVyLmdldFNpZ25lclwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwicHJvdmlkZXJcIiwgcHJvdmlkZXIpO1xuXG4gICAgICAgIGlmIChhZGRyZXNzT3JJbmRleCA9PSBudWxsKSB7IGFkZHJlc3NPckluZGV4ID0gMDsgfVxuXG4gICAgICAgIGlmICh0eXBlb2YoYWRkcmVzc09ySW5kZXgpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl9hZGRyZXNzXCIsIHRoaXMucHJvdmlkZXIuZm9ybWF0dGVyLmFkZHJlc3MoYWRkcmVzc09ySW5kZXgpKTtcbiAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiX2luZGV4XCIsIG51bGwpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mKGFkZHJlc3NPckluZGV4KSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfaW5kZXhcIiwgYWRkcmVzc09ySW5kZXgpO1xuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfYWRkcmVzc1wiLCBudWxsKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImludmFsaWQgYWRkcmVzcyBvciBpbmRleFwiLCBcImFkZHJlc3NPckluZGV4XCIsIGFkZHJlc3NPckluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbm5lY3QocHJvdmlkZXI6IFByb3ZpZGVyKTogSnNvblJwY1NpZ25lciB7XG4gICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihcImNhbm5vdCBhbHRlciBKU09OLVJQQyBTaWduZXIgY29ubmVjdGlvblwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBcImNvbm5lY3RcIlxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25uZWN0VW5jaGVja2VkKCk6IEpzb25ScGNTaWduZXIge1xuICAgICAgICByZXR1cm4gbmV3IFVuY2hlY2tlZEpzb25ScGNTaWduZXIoX2NvbnN0cnVjdG9yR3VhcmQsIHRoaXMucHJvdmlkZXIsIHRoaXMuX2FkZHJlc3MgfHwgdGhpcy5faW5kZXgpO1xuICAgIH1cblxuICAgIGdldEFkZHJlc3MoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgaWYgKHRoaXMuX2FkZHJlc3MpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYWRkcmVzcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlci5zZW5kKFwiZXRoX2FjY291bnRzXCIsIFtdKS50aGVuKChhY2NvdW50cykgPT4ge1xuICAgICAgICAgICAgaWYgKGFjY291bnRzLmxlbmd0aCA8PSB0aGlzLl9pbmRleCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwidW5rbm93biBhY2NvdW50ICNcIiArIHRoaXMuX2luZGV4LCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb246IFwiZ2V0QWRkcmVzc1wiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlci5mb3JtYXR0ZXIuYWRkcmVzcyhhY2NvdW50c1t0aGlzLl9pbmRleF0pXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNlbmRVbmNoZWNrZWRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbjogRGVmZXJyYWJsZTxUcmFuc2FjdGlvblJlcXVlc3Q+KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgdHJhbnNhY3Rpb24gPSBzaGFsbG93Q29weSh0cmFuc2FjdGlvbik7XG5cbiAgICAgICAgY29uc3QgZnJvbUFkZHJlc3MgPSB0aGlzLmdldEFkZHJlc3MoKS50aGVuKChhZGRyZXNzKSA9PiB7XG4gICAgICAgICAgICBpZiAoYWRkcmVzcykgeyBhZGRyZXNzID0gYWRkcmVzcy50b0xvd2VyQ2FzZSgpOyB9XG4gICAgICAgICAgICByZXR1cm4gYWRkcmVzcztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVGhlIEpTT04tUlBDIGZvciBldGhfc2VuZFRyYW5zYWN0aW9uIHVzZXMgOTAwMDAgZ2FzOyBpZiB0aGUgdXNlclxuICAgICAgICAvLyB3aXNoZXMgdG8gdXNlIHRoaXMsIGl0IGlzIGVhc3kgdG8gc3BlY2lmeSBleHBsaWNpdGx5LCBvdGhlcndpc2VcbiAgICAgICAgLy8gd2UgbG9vayBpdCB1cCBmb3IgdGhlbS5cbiAgICAgICAgaWYgKHRyYW5zYWN0aW9uLmdhc0xpbWl0ID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGVzdGltYXRlID0gc2hhbGxvd0NvcHkodHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgZXN0aW1hdGUuZnJvbSA9IGZyb21BZGRyZXNzO1xuICAgICAgICAgICAgdHJhbnNhY3Rpb24uZ2FzTGltaXQgPSB0aGlzLnByb3ZpZGVyLmVzdGltYXRlR2FzKGVzdGltYXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFuc2FjdGlvbi50byAhPSBudWxsKSB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi50byA9IFByb21pc2UucmVzb2x2ZSh0cmFuc2FjdGlvbi50bykudGhlbihhc3luYyAodG8pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodG8gPT0gbnVsbCkgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGFkZHJlc3MgPSBhd2FpdCB0aGlzLnByb3ZpZGVyLnJlc29sdmVOYW1lKHRvKTtcbiAgICAgICAgICAgICAgICBpZiAoYWRkcmVzcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJwcm92aWRlZCBFTlMgbmFtZSByZXNvbHZlcyB0byBudWxsXCIsIFwidHgudG9cIiwgdG8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYWRkcmVzcztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc29sdmVQcm9wZXJ0aWVzKHtcbiAgICAgICAgICAgIHR4OiByZXNvbHZlUHJvcGVydGllcyh0cmFuc2FjdGlvbiksXG4gICAgICAgICAgICBzZW5kZXI6IGZyb21BZGRyZXNzXG4gICAgICAgIH0pLnRoZW4oKHsgdHgsIHNlbmRlciB9KSA9PiB7XG5cbiAgICAgICAgICAgIGlmICh0eC5mcm9tICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodHguZnJvbS50b0xvd2VyQ2FzZSgpICE9PSBzZW5kZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImZyb20gYWRkcmVzcyBtaXNtYXRjaFwiLCBcInRyYW5zYWN0aW9uXCIsIHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHR4LmZyb20gPSBzZW5kZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGhleFR4ID0gKDxhbnk+dGhpcy5wcm92aWRlci5jb25zdHJ1Y3RvcikuaGV4bGlmeVRyYW5zYWN0aW9uKHR4LCB7IGZyb206IHRydWUgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLnNlbmQoXCJldGhfc2VuZFRyYW5zYWN0aW9uXCIsIFsgaGV4VHggXSkudGhlbigoaGFzaCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBoYXNoO1xuICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZihlcnJvci5tZXNzYWdlKSA9PT0gXCJzdHJpbmdcIiAmJiBlcnJvci5tZXNzYWdlLm1hdGNoKC91c2VyIGRlbmllZC9pKSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcInVzZXIgcmVqZWN0ZWQgdHJhbnNhY3Rpb25cIiwgTG9nZ2VyLmVycm9ycy5BQ1RJT05fUkVKRUNURUQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJzZW5kVHJhbnNhY3Rpb25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uOiB0eFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gY2hlY2tFcnJvcihcInNlbmRUcmFuc2FjdGlvblwiLCBlcnJvciwgaGV4VHgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNpZ25UcmFuc2FjdGlvbih0cmFuc2FjdGlvbjogRGVmZXJyYWJsZTxUcmFuc2FjdGlvblJlcXVlc3Q+KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKFwic2lnbmluZyB0cmFuc2FjdGlvbnMgaXMgdW5zdXBwb3J0ZWRcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJzaWduVHJhbnNhY3Rpb25cIlxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBzZW5kVHJhbnNhY3Rpb24odHJhbnNhY3Rpb246IERlZmVycmFibGU8VHJhbnNhY3Rpb25SZXF1ZXN0Pik6IFByb21pc2U8VHJhbnNhY3Rpb25SZXNwb25zZT4ge1xuICAgICAgICAvLyBUaGlzIGNhbm5vdCBiZSBtaW5lZCBhbnkgZWFybGllciB0aGFuIGFueSByZWNlbnQgYmxvY2tcbiAgICAgICAgY29uc3QgYmxvY2tOdW1iZXIgPSBhd2FpdCB0aGlzLnByb3ZpZGVyLl9nZXRJbnRlcm5hbEJsb2NrTnVtYmVyKDEwMCArIDIgKiB0aGlzLnByb3ZpZGVyLnBvbGxpbmdJbnRlcnZhbCk7XG5cbiAgICAgICAgLy8gU2VuZCB0aGUgdHJhbnNhY3Rpb25cbiAgICAgICAgY29uc3QgaGFzaCA9IGF3YWl0IHRoaXMuc2VuZFVuY2hlY2tlZFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gVW5mb3J0dW5hdGVseSwgSlNPTi1SUEMgb25seSBwcm92aWRlcyBhbmQgb3BhcXVlIHRyYW5zYWN0aW9uIGhhc2hcbiAgICAgICAgICAgIC8vIGZvciBhIHJlc3BvbnNlLCBhbmQgd2UgbmVlZCB0aGUgYWN0dWFsIHRyYW5zYWN0aW9uLCBzbyB3ZSBwb2xsXG4gICAgICAgICAgICAvLyBmb3IgaXQ7IGl0IHNob3VsZCBzaG93IHVwIHZlcnkgcXVpY2tseVxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHBvbGwoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHR4ID0gYXdhaXQgdGhpcy5wcm92aWRlci5nZXRUcmFuc2FjdGlvbihoYXNoKTtcbiAgICAgICAgICAgICAgICBpZiAodHggPT09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLl93cmFwVHJhbnNhY3Rpb24odHgsIGhhc2gsIGJsb2NrTnVtYmVyKTtcbiAgICAgICAgICAgIH0sIHsgb25jZVBvbGw6IHRoaXMucHJvdmlkZXIgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAoPGFueT5lcnJvcikudHJhbnNhY3Rpb25IYXNoID0gaGFzaDtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgc2lnbk1lc3NhZ2UobWVzc2FnZTogQnl0ZXMgfCBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBkYXRhID0gKCh0eXBlb2YobWVzc2FnZSkgPT09IFwic3RyaW5nXCIpID8gdG9VdGY4Qnl0ZXMobWVzc2FnZSk6IG1lc3NhZ2UpO1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gYXdhaXQgdGhpcy5nZXRBZGRyZXNzKCk7XG5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvdmlkZXIuc2VuZChcInBlcnNvbmFsX3NpZ25cIiwgWyBoZXhsaWZ5KGRhdGEpLCBhZGRyZXNzLnRvTG93ZXJDYXNlKCkgXSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mKGVycm9yLm1lc3NhZ2UpID09PSBcInN0cmluZ1wiICYmIGVycm9yLm1lc3NhZ2UubWF0Y2goL3VzZXIgZGVuaWVkL2kpKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJ1c2VyIHJlamVjdGVkIHNpZ25pbmdcIiwgTG9nZ2VyLmVycm9ycy5BQ1RJT05fUkVKRUNURUQsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcInNpZ25NZXNzYWdlXCIsXG4gICAgICAgICAgICAgICAgICAgIGZyb206IGFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGRhdGFcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgX2xlZ2FjeVNpZ25NZXNzYWdlKG1lc3NhZ2U6IEJ5dGVzIHwgc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9ICgodHlwZW9mKG1lc3NhZ2UpID09PSBcInN0cmluZ1wiKSA/IHRvVXRmOEJ5dGVzKG1lc3NhZ2UpOiBtZXNzYWdlKTtcbiAgICAgICAgY29uc3QgYWRkcmVzcyA9IGF3YWl0IHRoaXMuZ2V0QWRkcmVzcygpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vd2lraS93aWtpL0pTT04tUlBDI2V0aF9zaWduXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm92aWRlci5zZW5kKFwiZXRoX3NpZ25cIiwgWyBhZGRyZXNzLnRvTG93ZXJDYXNlKCksIGhleGxpZnkoZGF0YSkgXSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mKGVycm9yLm1lc3NhZ2UpID09PSBcInN0cmluZ1wiICYmIGVycm9yLm1lc3NhZ2UubWF0Y2goL3VzZXIgZGVuaWVkL2kpKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJ1c2VyIHJlamVjdGVkIHNpZ25pbmdcIiwgTG9nZ2VyLmVycm9ycy5BQ1RJT05fUkVKRUNURUQsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcIl9sZWdhY3lTaWduTWVzc2FnZVwiLFxuICAgICAgICAgICAgICAgICAgICBmcm9tOiBhZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBkYXRhXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIF9zaWduVHlwZWREYXRhKGRvbWFpbjogVHlwZWREYXRhRG9tYWluLCB0eXBlczogUmVjb3JkPHN0cmluZywgQXJyYXk8VHlwZWREYXRhRmllbGQ+PiwgdmFsdWU6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICAvLyBQb3B1bGF0ZSBhbnkgRU5TIG5hbWVzIChpbi1wbGFjZSlcbiAgICAgICAgY29uc3QgcG9wdWxhdGVkID0gYXdhaXQgX1R5cGVkRGF0YUVuY29kZXIucmVzb2x2ZU5hbWVzKGRvbWFpbiwgdHlwZXMsIHZhbHVlLCAobmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlci5yZXNvbHZlTmFtZShuYW1lKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgYWRkcmVzcyA9IGF3YWl0IHRoaXMuZ2V0QWRkcmVzcygpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm92aWRlci5zZW5kKFwiZXRoX3NpZ25UeXBlZERhdGFfdjRcIiwgW1xuICAgICAgICAgICAgICAgIGFkZHJlc3MudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShfVHlwZWREYXRhRW5jb2Rlci5nZXRQYXlsb2FkKHBvcHVsYXRlZC5kb21haW4sIHR5cGVzLCBwb3B1bGF0ZWQudmFsdWUpKVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mKGVycm9yLm1lc3NhZ2UpID09PSBcInN0cmluZ1wiICYmIGVycm9yLm1lc3NhZ2UubWF0Y2goL3VzZXIgZGVuaWVkL2kpKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJ1c2VyIHJlamVjdGVkIHNpZ25pbmdcIiwgTG9nZ2VyLmVycm9ycy5BQ1RJT05fUkVKRUNURUQsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcIl9zaWduVHlwZWREYXRhXCIsXG4gICAgICAgICAgICAgICAgICAgIGZyb206IGFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHsgZG9tYWluOiBwb3B1bGF0ZWQuZG9tYWluLCB0eXBlcywgdmFsdWU6IHBvcHVsYXRlZC52YWx1ZSB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIHVubG9jayhwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5wcm92aWRlcjtcblxuICAgICAgICBjb25zdCBhZGRyZXNzID0gYXdhaXQgdGhpcy5nZXRBZGRyZXNzKCk7XG5cbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyLnNlbmQoXCJwZXJzb25hbF91bmxvY2tBY2NvdW50XCIsIFsgYWRkcmVzcy50b0xvd2VyQ2FzZSgpLCBwYXNzd29yZCwgbnVsbCBdKTtcbiAgICB9XG59XG5cbmNsYXNzIFVuY2hlY2tlZEpzb25ScGNTaWduZXIgZXh0ZW5kcyBKc29uUnBjU2lnbmVyIHtcbiAgICBzZW5kVHJhbnNhY3Rpb24odHJhbnNhY3Rpb246IERlZmVycmFibGU8VHJhbnNhY3Rpb25SZXF1ZXN0Pik6IFByb21pc2U8VHJhbnNhY3Rpb25SZXNwb25zZT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kVW5jaGVja2VkVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pLnRoZW4oKGhhc2gpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8VHJhbnNhY3Rpb25SZXNwb25zZT57XG4gICAgICAgICAgICAgICAgaGFzaDogaGFzaCxcbiAgICAgICAgICAgICAgICBub25jZTogbnVsbCxcbiAgICAgICAgICAgICAgICBnYXNMaW1pdDogbnVsbCxcbiAgICAgICAgICAgICAgICBnYXNQcmljZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgICAgIGNoYWluSWQ6IG51bGwsXG4gICAgICAgICAgICAgICAgY29uZmlybWF0aW9uczogMCxcbiAgICAgICAgICAgICAgICBmcm9tOiBudWxsLFxuICAgICAgICAgICAgICAgIHdhaXQ6IChjb25maXJtYXRpb25zPzogbnVtYmVyKSA9PiB7IHJldHVybiB0aGlzLnByb3ZpZGVyLndhaXRGb3JUcmFuc2FjdGlvbihoYXNoLCBjb25maXJtYXRpb25zKTsgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jb25zdCBhbGxvd2VkVHJhbnNhY3Rpb25LZXlzOiB7IFsga2V5OiBzdHJpbmcgXTogYm9vbGVhbiB9ID0ge1xuICAgIGNoYWluSWQ6IHRydWUsIGRhdGE6IHRydWUsIGdhc0xpbWl0OiB0cnVlLCBnYXNQcmljZTp0cnVlLCBub25jZTogdHJ1ZSwgdG86IHRydWUsIHZhbHVlOiB0cnVlLFxuICAgIHR5cGU6IHRydWUsIGFjY2Vzc0xpc3Q6IHRydWUsXG4gICAgbWF4RmVlUGVyR2FzOiB0cnVlLCBtYXhQcmlvcml0eUZlZVBlckdhczogdHJ1ZVxufVxuXG5leHBvcnQgY2xhc3MgSnNvblJwY1Byb3ZpZGVyIGV4dGVuZHMgQmFzZVByb3ZpZGVyIHtcbiAgICByZWFkb25seSBjb25uZWN0aW9uOiBDb25uZWN0aW9uSW5mbztcblxuICAgIF9wZW5kaW5nRmlsdGVyOiBQcm9taXNlPG51bWJlcj47XG4gICAgX25leHRJZDogbnVtYmVyO1xuXG4gICAgLy8gRHVyaW5nIGFueSBnaXZlbiBldmVudCBsb29wLCB0aGUgcmVzdWx0cyBmb3IgYSBnaXZlbiBjYWxsIHdpbGxcbiAgICAvLyBhbGwgYmUgdGhlIHNhbWUsIHNvIHdlIGNhbiBkZWR1cCB0aGUgY2FsbHMgdG8gc2F2ZSByZXF1ZXN0cyBhbmRcbiAgICAvLyBiYW5kd2lkdGguIEBUT0RPOiBUcnkgb3V0IGdlbmVyYWxpemluZyB0aGlzIGFnYWluc3Qgc2VuZD9cbiAgICBfZXZlbnRMb29wQ2FjaGU6IFJlY29yZDxzdHJpbmcsIFByb21pc2U8YW55Pj47XG4gICAgZ2V0IF9jYWNoZSgpOiBSZWNvcmQ8c3RyaW5nLCBQcm9taXNlPGFueT4+IHtcbiAgICAgICAgaWYgKHRoaXMuX2V2ZW50TG9vcENhY2hlID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50TG9vcENhY2hlID0geyB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudExvb3BDYWNoZTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcih1cmw/OiBDb25uZWN0aW9uSW5mbyB8IHN0cmluZywgbmV0d29yaz86IE5ldHdvcmtpc2gpIHtcbiAgICAgICAgbGV0IG5ldHdvcmtPclJlYWR5OiBOZXR3b3JraXNoIHwgUHJvbWlzZTxOZXR3b3JrPiA9IG5ldHdvcms7XG5cbiAgICAgICAgLy8gVGhlIG5ldHdvcmsgaXMgdW5rbm93biwgcXVlcnkgdGhlIEpTT04tUlBDIGZvciBpdFxuICAgICAgICBpZiAobmV0d29ya09yUmVhZHkgPT0gbnVsbCkge1xuICAgICAgICAgICAgbmV0d29ya09yUmVhZHkgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGV0ZWN0TmV0d29yaygpLnRoZW4oKG5ldHdvcmspID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobmV0d29yayk7XG4gICAgICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyKG5ldHdvcmtPclJlYWR5KTtcblxuICAgICAgICAvLyBEZWZhdWx0IFVSTFxuICAgICAgICBpZiAoIXVybCkgeyB1cmwgPSBnZXRTdGF0aWM8KCkgPT4gc3RyaW5nPih0aGlzLmNvbnN0cnVjdG9yLCBcImRlZmF1bHRVcmxcIikoKTsgfVxuXG4gICAgICAgIGlmICh0eXBlb2YodXJsKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJjb25uZWN0aW9uXCIsT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiY29ubmVjdGlvblwiLCBPYmplY3QuZnJlZXplKHNoYWxsb3dDb3B5KHVybCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX25leHRJZCA9IDQyO1xuICAgIH1cblxuICAgIHN0YXRpYyBkZWZhdWx0VXJsKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcImh0dHA6L1xcL2xvY2FsaG9zdDo4NTQ1XCI7XG4gICAgfVxuXG4gICAgZGV0ZWN0TmV0d29yaygpOiBQcm9taXNlPE5ldHdvcms+IHtcbiAgICAgICAgaWYgKCF0aGlzLl9jYWNoZVtcImRldGVjdE5ldHdvcmtcIl0pIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlW1wiZGV0ZWN0TmV0d29ya1wiXSA9IHRoaXMuX3VuY2FjaGVkRGV0ZWN0TmV0d29yaygpO1xuXG4gICAgICAgICAgICAvLyBDbGVhciB0aGlzIGNhY2hlIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIG5leHQgZXZlbnQgbG9vcFxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVbXCJkZXRlY3ROZXR3b3JrXCJdID0gbnVsbDtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZVtcImRldGVjdE5ldHdvcmtcIl07XG4gICAgfVxuXG4gICAgYXN5bmMgX3VuY2FjaGVkRGV0ZWN0TmV0d29yaygpOiBQcm9taXNlPE5ldHdvcms+IHtcbiAgICAgICAgYXdhaXQgdGltZXIoMCk7XG5cbiAgICAgICAgbGV0IGNoYWluSWQgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2hhaW5JZCA9IGF3YWl0IHRoaXMuc2VuZChcImV0aF9jaGFpbklkXCIsIFsgXSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNoYWluSWQgPSBhd2FpdCB0aGlzLnNlbmQoXCJuZXRfdmVyc2lvblwiLCBbIF0pO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoYWluSWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgZ2V0TmV0d29yayA9IGdldFN0YXRpYzwobmV0d29yazogTmV0d29ya2lzaCkgPT4gTmV0d29yaz4odGhpcy5jb25zdHJ1Y3RvciwgXCJnZXROZXR3b3JrXCIpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TmV0d29yayhCaWdOdW1iZXIuZnJvbShjaGFpbklkKS50b051bWJlcigpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKFwiY291bGQgbm90IGRldGVjdCBuZXR3b3JrXCIsIExvZ2dlci5lcnJvcnMuTkVUV09SS19FUlJPUiwge1xuICAgICAgICAgICAgICAgICAgICBjaGFpbklkOiBjaGFpbklkLFxuICAgICAgICAgICAgICAgICAgICBldmVudDogXCJpbnZhbGlkTmV0d29ya1wiLFxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJFcnJvcjogZXJyb3JcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihcImNvdWxkIG5vdCBkZXRlY3QgbmV0d29ya1wiLCBMb2dnZXIuZXJyb3JzLk5FVFdPUktfRVJST1IsIHtcbiAgICAgICAgICAgIGV2ZW50OiBcIm5vTmV0d29ya1wiXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldFNpZ25lcihhZGRyZXNzT3JJbmRleD86IHN0cmluZyB8IG51bWJlcik6IEpzb25ScGNTaWduZXIge1xuICAgICAgICByZXR1cm4gbmV3IEpzb25ScGNTaWduZXIoX2NvbnN0cnVjdG9yR3VhcmQsIHRoaXMsIGFkZHJlc3NPckluZGV4KTtcbiAgICB9XG5cbiAgICBnZXRVbmNoZWNrZWRTaWduZXIoYWRkcmVzc09ySW5kZXg/OiBzdHJpbmcgfCBudW1iZXIpOiBVbmNoZWNrZWRKc29uUnBjU2lnbmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2lnbmVyKGFkZHJlc3NPckluZGV4KS5jb25uZWN0VW5jaGVja2VkKCk7XG4gICAgfVxuXG4gICAgbGlzdEFjY291bnRzKCk6IFByb21pc2U8QXJyYXk8c3RyaW5nPj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKFwiZXRoX2FjY291bnRzXCIsIFtdKS50aGVuKChhY2NvdW50czogQXJyYXk8c3RyaW5nPikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGFjY291bnRzLm1hcCgoYSkgPT4gdGhpcy5mb3JtYXR0ZXIuYWRkcmVzcyhhKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNlbmQobWV0aG9kOiBzdHJpbmcsIHBhcmFtczogQXJyYXk8YW55Pik6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgICAgaWQ6ICh0aGlzLl9uZXh0SWQrKyksXG4gICAgICAgICAgICBqc29ucnBjOiBcIjIuMFwiXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwge1xuICAgICAgICAgICAgYWN0aW9uOiBcInJlcXVlc3RcIixcbiAgICAgICAgICAgIHJlcXVlc3Q6IGRlZXBDb3B5KHJlcXVlc3QpLFxuICAgICAgICAgICAgcHJvdmlkZXI6IHRoaXNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gV2UgY2FuIGV4cGFuZCB0aGlzIGluIHRoZSBmdXR1cmUgdG8gYW55IGNhbGwsIGJ1dCBmb3Igbm93IHRoZXNlXG4gICAgICAgIC8vIGFyZSB0aGUgYmlnZ2VzdCB3aW5zIGFuZCBkbyBub3QgcmVxdWlyZSBhbnkgc2VyaWFsaXppbmcgcGFyYW1ldGVycy5cbiAgICAgICAgY29uc3QgY2FjaGUgPSAoWyBcImV0aF9jaGFpbklkXCIsIFwiZXRoX2Jsb2NrTnVtYmVyXCIgXS5pbmRleE9mKG1ldGhvZCkgPj0gMCk7XG4gICAgICAgIGlmIChjYWNoZSAmJiB0aGlzLl9jYWNoZVttZXRob2RdKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVbbWV0aG9kXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGZldGNoSnNvbih0aGlzLmNvbm5lY3Rpb24sIEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpLCBnZXRSZXN1bHQpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZXNwb25zZVwiLFxuICAgICAgICAgICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2U6IHJlc3VsdCxcbiAgICAgICAgICAgICAgICBwcm92aWRlcjogdGhpc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcInJlc3BvbnNlXCIsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXI6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ2FjaGUgdGhlIGZldGNoLCBidXQgY2xlYXIgaXQgb24gdGhlIG5leHQgZXZlbnQgbG9vcFxuICAgICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlW21ldGhvZF0gPSByZXN1bHQ7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZVttZXRob2RdID0gbnVsbDtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBwcmVwYXJlUmVxdWVzdChtZXRob2Q6IHN0cmluZywgcGFyYW1zOiBhbnkpOiBbIHN0cmluZywgQXJyYXk8YW55PiBdIHtcbiAgICAgICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgICAgICAgIGNhc2UgXCJnZXRCbG9ja051bWJlclwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbIFwiZXRoX2Jsb2NrTnVtYmVyXCIsIFtdIF07XG5cbiAgICAgICAgICAgIGNhc2UgXCJnZXRHYXNQcmljZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbIFwiZXRoX2dhc1ByaWNlXCIsIFtdIF07XG5cbiAgICAgICAgICAgIGNhc2UgXCJnZXRCYWxhbmNlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgXCJldGhfZ2V0QmFsYW5jZVwiLCBbIGdldExvd2VyQ2FzZShwYXJhbXMuYWRkcmVzcyksIHBhcmFtcy5ibG9ja1RhZyBdIF07XG5cbiAgICAgICAgICAgIGNhc2UgXCJnZXRUcmFuc2FjdGlvbkNvdW50XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgXCJldGhfZ2V0VHJhbnNhY3Rpb25Db3VudFwiLCBbIGdldExvd2VyQ2FzZShwYXJhbXMuYWRkcmVzcyksIHBhcmFtcy5ibG9ja1RhZyBdIF07XG5cbiAgICAgICAgICAgIGNhc2UgXCJnZXRDb2RlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgXCJldGhfZ2V0Q29kZVwiLCBbIGdldExvd2VyQ2FzZShwYXJhbXMuYWRkcmVzcyksIHBhcmFtcy5ibG9ja1RhZyBdIF07XG5cbiAgICAgICAgICAgIGNhc2UgXCJnZXRTdG9yYWdlQXRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gWyBcImV0aF9nZXRTdG9yYWdlQXRcIiwgWyBnZXRMb3dlckNhc2UocGFyYW1zLmFkZHJlc3MpLCBoZXhaZXJvUGFkKHBhcmFtcy5wb3NpdGlvbiwgMzIpLCBwYXJhbXMuYmxvY2tUYWcgXSBdO1xuXG4gICAgICAgICAgICBjYXNlIFwic2VuZFRyYW5zYWN0aW9uXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgXCJldGhfc2VuZFJhd1RyYW5zYWN0aW9uXCIsIFsgcGFyYW1zLnNpZ25lZFRyYW5zYWN0aW9uIF0gXVxuXG4gICAgICAgICAgICBjYXNlIFwiZ2V0QmxvY2tcIjpcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmJsb2NrVGFnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbIFwiZXRoX2dldEJsb2NrQnlOdW1iZXJcIiwgWyBwYXJhbXMuYmxvY2tUYWcsICEhcGFyYW1zLmluY2x1ZGVUcmFuc2FjdGlvbnMgXSBdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmJsb2NrSGFzaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyBcImV0aF9nZXRCbG9ja0J5SGFzaFwiLCBbIHBhcmFtcy5ibG9ja0hhc2gsICEhcGFyYW1zLmluY2x1ZGVUcmFuc2FjdGlvbnMgXSBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgY2FzZSBcImdldFRyYW5zYWN0aW9uXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgXCJldGhfZ2V0VHJhbnNhY3Rpb25CeUhhc2hcIiwgWyBwYXJhbXMudHJhbnNhY3Rpb25IYXNoIF0gXTtcblxuICAgICAgICAgICAgY2FzZSBcImdldFRyYW5zYWN0aW9uUmVjZWlwdFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbIFwiZXRoX2dldFRyYW5zYWN0aW9uUmVjZWlwdFwiLCBbIHBhcmFtcy50cmFuc2FjdGlvbkhhc2ggXSBdO1xuXG4gICAgICAgICAgICBjYXNlIFwiY2FsbFwiOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGV4bGlmeVRyYW5zYWN0aW9uID0gZ2V0U3RhdGljPCh0OiBUcmFuc2FjdGlvblJlcXVlc3QsIGE/OiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSkgPT4geyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfT4odGhpcy5jb25zdHJ1Y3RvciwgXCJoZXhsaWZ5VHJhbnNhY3Rpb25cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgXCJldGhfY2FsbFwiLCBbIGhleGxpZnlUcmFuc2FjdGlvbihwYXJhbXMudHJhbnNhY3Rpb24sIHsgZnJvbTogdHJ1ZSB9KSwgcGFyYW1zLmJsb2NrVGFnIF0gXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FzZSBcImVzdGltYXRlR2FzXCI6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoZXhsaWZ5VHJhbnNhY3Rpb24gPSBnZXRTdGF0aWM8KHQ6IFRyYW5zYWN0aW9uUmVxdWVzdCwgYT86IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9KSA9PiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9Pih0aGlzLmNvbnN0cnVjdG9yLCBcImhleGxpZnlUcmFuc2FjdGlvblwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWyBcImV0aF9lc3RpbWF0ZUdhc1wiLCBbIGhleGxpZnlUcmFuc2FjdGlvbihwYXJhbXMudHJhbnNhY3Rpb24sIHsgZnJvbTogdHJ1ZSB9KSBdIF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhc2UgXCJnZXRMb2dzXCI6XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5maWx0ZXIgJiYgcGFyYW1zLmZpbHRlci5hZGRyZXNzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmZpbHRlci5hZGRyZXNzID0gZ2V0TG93ZXJDYXNlKHBhcmFtcy5maWx0ZXIuYWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBbIFwiZXRoX2dldExvZ3NcIiwgWyBwYXJhbXMuZmlsdGVyIF0gXTtcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIHBlcmZvcm0obWV0aG9kOiBzdHJpbmcsIHBhcmFtczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgLy8gTGVnYWN5IG5ldHdvcmtzIGRvIG5vdCBsaWtlIHRoZSB0eXBlIGZpZWxkIGJlaW5nIHBhc3NlZCBhbG9uZyAod2hpY2hcbiAgICAgICAgLy8gaXMgZmFpciksIHNvIHdlIGRlbGV0ZSB0eXBlIGlmIGl0IGlzIDAgYW5kIGEgbm9uLUVJUC0xNTU5IG5ldHdvcmtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJjYWxsXCIgfHwgbWV0aG9kID09PSBcImVzdGltYXRlR2FzXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHR4ID0gcGFyYW1zLnRyYW5zYWN0aW9uO1xuICAgICAgICAgICAgaWYgKHR4ICYmIHR4LnR5cGUgIT0gbnVsbCAmJiBCaWdOdW1iZXIuZnJvbSh0eC50eXBlKS5pc1plcm8oKSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBFSVAtMTU1OSBwcm9wZXJ0aWVzLCBpdCBtaWdodCBiZSBub24tRUlQLTE1NTlcbiAgICAgICAgICAgICAgICBpZiAodHgubWF4RmVlUGVyR2FzID09IG51bGwgJiYgdHgubWF4UHJpb3JpdHlGZWVQZXJHYXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmZWVEYXRhID0gYXdhaXQgdGhpcy5nZXRGZWVEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmZWVEYXRhLm1heEZlZVBlckdhcyA9PSBudWxsICYmIGZlZURhdGEubWF4UHJpb3JpdHlGZWVQZXJHYXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmV0d29yayBkb2Vzbid0IGtub3cgYWJvdXQgRUlQLTE1NTkgKGFuZCBoZW5jZSB0eXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zID0gc2hhbGxvd0NvcHkocGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy50cmFuc2FjdGlvbiA9IHNoYWxsb3dDb3B5KHR4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBwYXJhbXMudHJhbnNhY3Rpb24udHlwZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFyZ3MgPSB0aGlzLnByZXBhcmVSZXF1ZXN0KG1ldGhvZCwgIHBhcmFtcyk7XG5cbiAgICAgICAgaWYgKGFyZ3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IobWV0aG9kICsgXCIgbm90IGltcGxlbWVudGVkXCIsIExvZ2dlci5lcnJvcnMuTk9UX0lNUExFTUVOVEVELCB7IG9wZXJhdGlvbjogbWV0aG9kIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zZW5kKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tFcnJvcihtZXRob2QsIGVycm9yLCBwYXJhbXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3N0YXJ0RXZlbnQoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgICAgIGlmIChldmVudC50YWcgPT09IFwicGVuZGluZ1wiKSB7IHRoaXMuX3N0YXJ0UGVuZGluZygpOyB9XG4gICAgICAgIHN1cGVyLl9zdGFydEV2ZW50KGV2ZW50KTtcbiAgICB9XG5cbiAgICBfc3RhcnRQZW5kaW5nKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5fcGVuZGluZ0ZpbHRlciAhPSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICBjb25zdCBwZW5kaW5nRmlsdGVyOiBQcm9taXNlPG51bWJlcj4gPSB0aGlzLnNlbmQoXCJldGhfbmV3UGVuZGluZ1RyYW5zYWN0aW9uRmlsdGVyXCIsIFtdKTtcbiAgICAgICAgdGhpcy5fcGVuZGluZ0ZpbHRlciA9IHBlbmRpbmdGaWx0ZXI7XG5cbiAgICAgICAgcGVuZGluZ0ZpbHRlci50aGVuKGZ1bmN0aW9uKGZpbHRlcklkKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBwb2xsKCkge1xuICAgICAgICAgICAgICAgIHNlbGYuc2VuZChcImV0aF9nZXRGaWx0ZXJDaGFuZ2VzXCIsIFsgZmlsdGVySWQgXSkudGhlbihmdW5jdGlvbihoYXNoZXM6IEFycmF5PHN0cmluZz4pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuX3BlbmRpbmdGaWx0ZXIgIT0gcGVuZGluZ0ZpbHRlcikgeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCBzZXEgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaGFzaGVzLmZvckVhY2goZnVuY3Rpb24oaGFzaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQFRPRE86IFRoaXMgc2hvdWxkIGJlIGdhcmJhZ2UgY29sbGVjdGVkIGF0IHNvbWUgcG9pbnQuLi4gSG93PyBXaGVuP1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fZW1pdHRlZFtcInQ6XCIgKyBoYXNoLnRvTG93ZXJDYXNlKCldID0gXCJwZW5kaW5nXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXEgPSBzZXEudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5nZXRUcmFuc2FjdGlvbihoYXNoKS50aGVuKGZ1bmN0aW9uKHR4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZW1pdChcInBlbmRpbmdcIiwgdHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VxLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGltZXIoMTAwMCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLl9wZW5kaW5nRmlsdGVyICE9IHBlbmRpbmdGaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2VuZChcImV0aF91bmluc3RhbGxGaWx0ZXJcIiwgWyBmaWx0ZXJJZCBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBwb2xsKCk7IH0sIDApO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKChlcnJvcjogRXJyb3IpID0+IHsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb2xsKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXJJZDtcbiAgICAgICAgfSkuY2F0Y2goKGVycm9yOiBFcnJvcikgPT4geyB9KTtcbiAgICB9XG5cbiAgICBfc3RvcEV2ZW50KGV2ZW50OiBFdmVudCk6IHZvaWQge1xuICAgICAgICBpZiAoZXZlbnQudGFnID09PSBcInBlbmRpbmdcIiAmJiB0aGlzLmxpc3RlbmVyQ291bnQoXCJwZW5kaW5nXCIpID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9wZW5kaW5nRmlsdGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBzdXBlci5fc3RvcEV2ZW50KGV2ZW50KTtcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0IGFuIGV0aGVycy5qcyB0cmFuc2FjdGlvbiBpbnRvIGEgSlNPTi1SUEMgdHJhbnNhY3Rpb25cbiAgICAvLyAgLSBnYXNMaW1pdCA9PiBnYXNcbiAgICAvLyAgLSBBbGwgdmFsdWVzIGhleGxpZmllZFxuICAgIC8vICAtIEFsbCBudW1lcmljIHZhbHVlcyB6ZXJvLXN0cmlwZWRcbiAgICAvLyAgLSBBbGwgYWRkcmVzc2VzIGFyZSBsb3dlcmNhc2VkXG4gICAgLy8gTk9URTogVGhpcyBhbGxvd3MgYSBUcmFuc2FjdGlvblJlcXVlc3QsIGJ1dCBhbGwgdmFsdWVzIHNob3VsZCBiZSByZXNvbHZlZFxuICAgIC8vICAgICAgIGJlZm9yZSB0aGlzIGlzIGNhbGxlZFxuICAgIC8vIEBUT0RPOiBUaGlzIHdpbGwgbGlrZWx5IGJlIHJlbW92ZWQgaW4gZnV0dXJlIHZlcnNpb25zIGFuZCBwcmVwYXJlUmVxdWVzdFxuICAgIC8vICAgICAgICB3aWxsIGJlIHRoZSBwcmVmZXJyZWQgbWV0aG9kIGZvciB0aGlzLlxuICAgIHN0YXRpYyBoZXhsaWZ5VHJhbnNhY3Rpb24odHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uUmVxdWVzdCwgYWxsb3dFeHRyYT86IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9KTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBBY2Nlc3NMaXN0IH0ge1xuICAgICAgICAvLyBDaGVjayBvbmx5IGFsbG93ZWQgcHJvcGVydGllcyBhcmUgZ2l2ZW5cbiAgICAgICAgY29uc3QgYWxsb3dlZCA9IHNoYWxsb3dDb3B5KGFsbG93ZWRUcmFuc2FjdGlvbktleXMpO1xuICAgICAgICBpZiAoYWxsb3dFeHRyYSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYWxsb3dFeHRyYSkge1xuICAgICAgICAgICAgICAgIGlmIChhbGxvd0V4dHJhW2tleV0pIHsgYWxsb3dlZFtrZXldID0gdHJ1ZTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2hlY2tQcm9wZXJ0aWVzKHRyYW5zYWN0aW9uLCBhbGxvd2VkKTtcblxuICAgICAgICBjb25zdCByZXN1bHQ6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgQWNjZXNzTGlzdCB9ID0ge307XG5cbiAgICAgICAgLy8gSlNPTi1SUEMgbm93IHJlcXVpcmVzIG51bWVyaWMgdmFsdWVzIHRvIGJlIFwicXVhbnRpdHlcIiB2YWx1ZXNcbiAgICAgICAgW1wiY2hhaW5JZFwiLCBcImdhc0xpbWl0XCIsIFwiZ2FzUHJpY2VcIiwgXCJ0eXBlXCIsIFwibWF4RmVlUGVyR2FzXCIsIFwibWF4UHJpb3JpdHlGZWVQZXJHYXNcIiwgXCJub25jZVwiLCBcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBpZiAoKDxhbnk+dHJhbnNhY3Rpb24pW2tleV0gPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gaGV4VmFsdWUoQmlnTnVtYmVyLmZyb20oKDxhbnk+dHJhbnNhY3Rpb24pW2tleV0pKTtcbiAgICAgICAgICAgIGlmIChrZXkgPT09IFwiZ2FzTGltaXRcIikgeyBrZXkgPSBcImdhc1wiOyB9XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICBbXCJmcm9tXCIsIFwidG9cIiwgXCJkYXRhXCJdLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBpZiAoKDxhbnk+dHJhbnNhY3Rpb24pW2tleV0gPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gaGV4bGlmeSgoPGFueT50cmFuc2FjdGlvbilba2V5XSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICgoPGFueT50cmFuc2FjdGlvbikuYWNjZXNzTGlzdCkge1xuICAgICAgICAgICAgcmVzdWx0W1wiYWNjZXNzTGlzdFwiXSA9IGFjY2Vzc0xpc3RpZnkoKDxhbnk+dHJhbnNhY3Rpb24pLmFjY2Vzc0xpc3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5cbmxldCBXUzogYW55ID0gbnVsbDtcblxudHJ5IHtcbiAgICBXUyA9IChXZWJTb2NrZXQgYXMgYW55KTtcbiAgICBpZiAoV1MgPT0gbnVsbCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJpbmplY3QgcGxlYXNlXCIpOyB9XG59IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG4gICAgV1MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJXZWJTb2NrZXRzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudFwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBcIm5ldyBXZWJTb2NrZXQoKVwiXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vZXhwb3J0IGRlZmF1bHQgV1M7XG4vL21vZHVsZS5leHBvcnRzID0gV1M7XG5leHBvcnQgeyBXUyBhcyBXZWJTb2NrZXQgfTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBCaWdOdW1iZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYmlnbnVtYmVyXCI7XG5pbXBvcnQgeyBOZXR3b3JrLCBOZXR3b3JraXNoIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L25ldHdvcmtzXCI7XG5pbXBvcnQgeyBkZWZpbmVSZWFkT25seSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzXCI7XG5cbmltcG9ydCB7IEV2ZW50IH0gZnJvbSBcIi4vYmFzZS1wcm92aWRlclwiO1xuaW1wb3J0IHsgSnNvblJwY1Byb3ZpZGVyIH0gZnJvbSBcIi4vanNvbi1ycGMtcHJvdmlkZXJcIjtcbmltcG9ydCB7IFdlYlNvY2tldCB9IGZyb20gXCIuL3dzXCI7XG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcblxuLyoqXG4gKiAgTm90ZXM6XG4gKlxuICogIFRoaXMgcHJvdmlkZXIgZGlmZmVycyBhIGJpdCBmcm9tIHRoZSBwb2xsaW5nIHByb3ZpZGVycy4gT25lIG1haW5cbiAqICBkaWZmZXJlbmNlIGlzIGhvdyBpdCBoYW5kbGVzIGNvbnNpc3RlbmN5LiBUaGUgcG9sbGluZyBwcm92aWRlcnNcbiAqICB3aWxsIHN0YWxsIHJlc3BvbnNlcyB0byBlbnN1cmUgYSBjb25zaXN0ZW50IHN0YXRlLCB3aGlsZSB0aGlzXG4gKiAgV2ViU29ja2V0IHByb3ZpZGVyIGFzc3VtZXMgdGhlIGNvbm5lY3RlZCBiYWNrZW5kIHdpbGwgbWFuYWdlIHRoaXMuXG4gKlxuICogIEZvciBleGFtcGxlLCBpZiBhIHBvbGxpbmcgcHJvdmlkZXIgZW1pdHMgYW4gZXZlbnQgd2hpY2ggaW5kaWNhdGVzXG4gKiAgdGhlIGV2ZW50IG9jY3VycmVkIGluIGJsb2NraGFzaCBYWFgsIGEgY2FsbCB0byBmZXRjaCB0aGF0IGJsb2NrIGJ5XG4gKiAgaXRzIGhhc2ggWFhYLCBpZiBub3QgcHJlc2VudCB3aWxsIHJldHJ5IHVudGlsIGl0IGlzIHByZXNlbnQuIFRoaXNcbiAqICBjYW4gb2NjdXIgd2hlbiBxdWVyeWluZyBhIHBvb2wgb2Ygbm9kZXMgdGhhdCBhcmUgbWlsZGx5IG91dCBvZiBzeW5jXG4gKiAgd2l0aCBlYWNoIG90aGVyLlxuICovXG5cbmxldCBOZXh0SWQgPSAxO1xuXG5leHBvcnQgdHlwZSBJbmZsaWdodFJlcXVlc3QgPSB7XG4gICAgIGNhbGxiYWNrOiAoZXJyb3I6IEVycm9yLCByZXN1bHQ6IGFueSkgPT4gdm9pZDtcbiAgICAgcGF5bG9hZDogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgU3Vic2NyaXB0aW9uID0ge1xuICAgIHRhZzogc3RyaW5nO1xuICAgIHByb2Nlc3NGdW5jOiAocGF5bG9hZDogYW55KSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBXZWJTb2NrZXRMaWtlIHtcbiAgICBvbm9wZW46ICgoLi4uYXJnczogQXJyYXk8YW55PikgPT4gYW55KSB8IG51bGw7XG4gICAgb25tZXNzYWdlOiAoKC4uLmFyZ3M6IEFycmF5PGFueT4pID0+IGFueSkgfCBudWxsO1xuICAgIG9uZXJyb3I6ICgoLi4uYXJnczogQXJyYXk8YW55PikgPT4gYW55KSB8IG51bGw7XG5cbiAgICByZWFkeVN0YXRlOiBudW1iZXI7XG5cbiAgICBzZW5kKHBheWxvYWQ6IGFueSk6IHZvaWQ7XG4gICAgY2xvc2UoY29kZT86IG51bWJlciwgcmVhc29uPzogc3RyaW5nKTogdm9pZDtcbn1cblxuLy8gRm9yIG1vcmUgaW5mbyBhYm91dCB0aGUgUmVhbC10aW1lIEV2ZW50IEFQSSBzZWU6XG4vLyAgIGh0dHBzOi8vZ2V0aC5ldGhlcmV1bS5vcmcvZG9jcy9ycGMvcHVic3ViXG5cbmV4cG9ydCBjbGFzcyBXZWJTb2NrZXRQcm92aWRlciBleHRlbmRzIEpzb25ScGNQcm92aWRlciB7XG4gICAgcmVhZG9ubHkgX3dlYnNvY2tldDogYW55O1xuICAgIHJlYWRvbmx5IF9yZXF1ZXN0czogeyBbIG5hbWU6IHN0cmluZyBdOiBJbmZsaWdodFJlcXVlc3QgfTtcbiAgICByZWFkb25seSBfZGV0ZWN0TmV0d29yazogUHJvbWlzZTxOZXR3b3JrPjtcblxuICAgIC8vIE1hcHMgZXZlbnQgdGFnIHRvIHN1YnNjcmlwdGlvbiBJRCAod2UgZGVkdXBlIGlkZW50aWNhbCBldmVudHMpXG4gICAgcmVhZG9ubHkgX3N1YklkczogeyBbIHRhZzogc3RyaW5nIF06IFByb21pc2U8c3RyaW5nPiB9O1xuXG4gICAgLy8gTWFwcyBTdWJzY3JpcHRpb24gSUQgdG8gU3Vic2NyaXB0aW9uXG4gICAgcmVhZG9ubHkgX3N1YnM6IHsgWyBuYW1lOiBzdHJpbmcgXTogU3Vic2NyaXB0aW9uIH07XG5cbiAgICBfd3NSZWFkeTogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHVybDogc3RyaW5nIHwgV2ViU29ja2V0TGlrZSwgbmV0d29yaz86IE5ldHdvcmtpc2gpIHtcblxuICAgICAgICAvLyBUaGlzIHdpbGwgYmUgYWRkZWQgaW4gdGhlIGZ1dHVyZTsgcGxlYXNlIG9wZW4gYW4gaXNzdWUgdG8gZXhwZWRpdGVcbiAgICAgICAgaWYgKG5ldHdvcmsgPT09IFwiYW55XCIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiV2ViU29ja2V0UHJvdmlkZXIgZG9lcyBub3Qgc3VwcG9ydCAnYW55JyBuZXR3b3JrIHlldFwiLCBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTiwge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogXCJuZXR3b3JrOmFueVwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YodXJsKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgc3VwZXIodXJsLCBuZXR3b3JrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyKFwiX3dlYnNvY2tldFwiLCBuZXR3b3JrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3BvbGxpbmdJbnRlcnZhbCA9IC0xO1xuXG4gICAgICAgIHRoaXMuX3dzUmVhZHkgPSBmYWxzZTtcblxuICAgICAgICBpZiAodHlwZW9mKHVybCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiX3dlYnNvY2tldFwiLCBuZXcgV2ViU29ja2V0KHRoaXMuY29ubmVjdGlvbi51cmwpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiX3dlYnNvY2tldFwiLCB1cmwpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfcmVxdWVzdHNcIiwgeyB9KTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfc3Vic1wiLCB7IH0pO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl9zdWJJZHNcIiwgeyB9KTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJfZGV0ZWN0TmV0d29ya1wiLCBzdXBlci5kZXRlY3ROZXR3b3JrKCkpO1xuXG4gICAgICAgIC8vIFN0YWxsIHNlbmRpbmcgcmVxdWVzdHMgdW50aWwgdGhlIHNvY2tldCBpcyBvcGVuLi4uXG4gICAgICAgIHRoaXMud2Vic29ja2V0Lm9ub3BlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3dzUmVhZHkgPSB0cnVlO1xuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5fcmVxdWVzdHMpLmZvckVhY2goKGlkKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy53ZWJzb2NrZXQuc2VuZCh0aGlzLl9yZXF1ZXN0c1tpZF0ucGF5bG9hZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLndlYnNvY2tldC5vbm1lc3NhZ2UgPSAobWVzc2FnZUV2ZW50OiB7IGRhdGE6IHN0cmluZyB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gbWVzc2FnZUV2ZW50LmRhdGE7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBTdHJpbmcocmVzdWx0LmlkKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5fcmVxdWVzdHNbaWRdO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9yZXF1ZXN0c1tpZF07XG5cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuY2FsbGJhY2sobnVsbCwgcmVzdWx0LnJlc3VsdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcInJlc3BvbnNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0OiBKU09OLnBhcnNlKHJlcXVlc3QucGF5bG9hZCksXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZTogcmVzdWx0LnJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyOiB0aGlzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVycm9yOiBFcnJvciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gbmV3IEVycm9yKHJlc3VsdC5lcnJvci5tZXNzYWdlIHx8IFwidW5rbm93biBlcnJvclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KDxhbnk+ZXJyb3IsIFwiY29kZVwiLCByZXN1bHQuZXJyb3IuY29kZSB8fCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KDxhbnk+ZXJyb3IsIFwicmVzcG9uc2VcIiwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IG5ldyBFcnJvcihcInVua25vd24gZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmNhbGxiYWNrKGVycm9yLCB1bmRlZmluZWQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZXNwb25zZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdDogSlNPTi5wYXJzZShyZXF1ZXN0LnBheWxvYWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXI6IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0Lm1ldGhvZCA9PT0gXCJldGhfc3Vic2NyaXB0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBTdWJzY3JpcHRpb24uLi5cbiAgICAgICAgICAgICAgICBjb25zdCBzdWIgPSB0aGlzLl9zdWJzW3Jlc3VsdC5wYXJhbXMuc3Vic2NyaXB0aW9uXTtcbiAgICAgICAgICAgICAgICBpZiAoc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vdGhpcy5lbWl0LmFwcGx5KHRoaXMsICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgc3ViLnByb2Nlc3NGdW5jKHJlc3VsdC5wYXJhbXMucmVzdWx0KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJ0aGlzIHNob3VsZCBub3QgaGFwcGVuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFRoaXMgUHJvdmlkZXIgZG9lcyBub3QgYWN0dWFsbHkgcG9sbCwgYnV0IHdlIHdhbnQgdG8gdHJpZ2dlclxuICAgICAgICAvLyBwb2xsIGV2ZW50cyBmb3IgdGhpbmdzIHRoYXQgZGVwZW5kIG9uIHRoZW0gKGxpa2Ugc3RhbGxpbmcgZm9yXG4gICAgICAgIC8vIGJsb2NrIGFuZCB0cmFuc2FjdGlvbiBsb29rdXBzKVxuICAgICAgICBjb25zdCBmYXV4UG9sbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcInBvbGxcIik7XG4gICAgICAgIH0sIDEwMDApO1xuICAgICAgICBpZiAoZmF1eFBvbGwudW5yZWYpIHsgZmF1eFBvbGwudW5yZWYoKTsgfVxuICAgIH1cblxuICAgIC8vIENhbm5vdCBuYXJyb3cgdGhlIHR5cGUgb2YgX3dlYnNvY2tldCwgYXMgdGhhdCBpcyBub3QgYmFja3dhcmRzIGNvbXBhdGlibGVcbiAgICAvLyBzbyB3ZSBhZGQgYSBnZXR0ZXIgYW5kIGxldCB0aGUgV2ViU29ja2V0IGJlIGEgcHVibGljIEFQSS5cbiAgICBnZXQgd2Vic29ja2V0KCk6IFdlYlNvY2tldExpa2UgeyByZXR1cm4gdGhpcy5fd2Vic29ja2V0OyB9XG5cbiAgICBkZXRlY3ROZXR3b3JrKCk6IFByb21pc2U8TmV0d29yaz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGV0ZWN0TmV0d29yaztcbiAgICB9XG5cbiAgICBnZXQgcG9sbGluZ0ludGVydmFsKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJlc2V0RXZlbnRzQmxvY2soYmxvY2tOdW1iZXI6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImNhbm5vdCByZXNldCBldmVudHMgYmxvY2sgb24gV2ViU29ja2V0UHJvdmlkZXJcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJyZXNldEV2ZW50QmxvY2tcIlxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXQgcG9sbGluZ0ludGVydmFsKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJjYW5ub3Qgc2V0IHBvbGxpbmcgaW50ZXJ2YWwgb24gV2ViU29ja2V0UHJvdmlkZXJcIiwgTG9nZ2VyLmVycm9ycy5VTlNVUFBPUlRFRF9PUEVSQVRJT04sIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJzZXRQb2xsaW5nSW50ZXJ2YWxcIlxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBwb2xsKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBzZXQgcG9sbGluZyh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICBpZiAoIXZhbHVlKSB7IHJldHVybjsgfVxuXG4gICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiY2Fubm90IHNldCBwb2xsaW5nIG9uIFdlYlNvY2tldFByb3ZpZGVyXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICBvcGVyYXRpb246IFwic2V0UG9sbGluZ1wiXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNlbmQobWV0aG9kOiBzdHJpbmcsIHBhcmFtcz86IEFycmF5PGFueT4pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCByaWQgPSBOZXh0SWQrKztcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgZnVuY3Rpb24gY2FsbGJhY2soZXJyb3I6IEVycm9yLCByZXN1bHQ6IGFueSkge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikgeyByZXR1cm4gcmVqZWN0KGVycm9yKTsgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgICAgICAgICAgaWQ6IHJpZCxcbiAgICAgICAgICAgICAgICBqc29ucnBjOiBcIjIuMFwiXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZXF1ZXN0XCIsXG4gICAgICAgICAgICAgICAgcmVxdWVzdDogSlNPTi5wYXJzZShwYXlsb2FkKSxcbiAgICAgICAgICAgICAgICBwcm92aWRlcjogdGhpc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RzW1N0cmluZyhyaWQpXSA9IHsgY2FsbGJhY2ssIHBheWxvYWQgfTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX3dzUmVhZHkpIHsgdGhpcy53ZWJzb2NrZXQuc2VuZChwYXlsb2FkKTsgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVmYXVsdFVybCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJ3czovXFwvbG9jYWxob3N0Ojg1NDZcIjtcbiAgICB9XG5cbiAgICBhc3luYyBfc3Vic2NyaWJlKHRhZzogc3RyaW5nLCBwYXJhbTogQXJyYXk8YW55PiwgcHJvY2Vzc0Z1bmM6IChyZXN1bHQ6IGFueSkgPT4gdm9pZCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBsZXQgc3ViSWRQcm9taXNlID0gdGhpcy5fc3ViSWRzW3RhZ107XG4gICAgICAgIGlmIChzdWJJZFByb21pc2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgc3ViSWRQcm9taXNlID0gUHJvbWlzZS5hbGwocGFyYW0pLnRoZW4oKHBhcmFtKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VuZChcImV0aF9zdWJzY3JpYmVcIiwgcGFyYW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl9zdWJJZHNbdGFnXSA9IHN1YklkUHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdWJJZCA9IGF3YWl0IHN1YklkUHJvbWlzZTtcbiAgICAgICAgdGhpcy5fc3Vic1tzdWJJZF0gPSB7IHRhZywgcHJvY2Vzc0Z1bmMgfTtcbiAgICB9XG5cbiAgICBfc3RhcnRFdmVudChldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiYmxvY2tcIjpcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUoXCJibG9ja1wiLCBbIFwibmV3SGVhZHNcIiBdLCAocmVzdWx0OiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmxvY2tOdW1iZXIgPSBCaWdOdW1iZXIuZnJvbShyZXN1bHQubnVtYmVyKS50b051bWJlcigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbWl0dGVkLmJsb2NrID0gYmxvY2tOdW1iZXI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImJsb2NrXCIsIGJsb2NrTnVtYmVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcInBlbmRpbmdcIjpcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUoXCJwZW5kaW5nXCIsIFsgXCJuZXdQZW5kaW5nVHJhbnNhY3Rpb25zXCIgXSwgKHJlc3VsdDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcInBlbmRpbmdcIiwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcImZpbHRlclwiOlxuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZShldmVudC50YWcsIFsgXCJsb2dzXCIsIHRoaXMuX2dldEZpbHRlcihldmVudC5maWx0ZXIpIF0sIChyZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnJlbW92ZWQgPT0gbnVsbCkgeyByZXN1bHQucmVtb3ZlZCA9IGZhbHNlOyB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChldmVudC5maWx0ZXIsIHRoaXMuZm9ybWF0dGVyLmZpbHRlckxvZyhyZXN1bHQpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcInR4XCI6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbWl0UmVjZWlwdCA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFzaCA9IGV2ZW50Lmhhc2g7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KGhhc2gpLnRoZW4oKHJlY2VpcHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVjZWlwdCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChoYXNoLCByZWNlaXB0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8vIEluIGNhc2UgaXQgaXMgYWxyZWFkeSBtaW5lZFxuICAgICAgICAgICAgICAgIGVtaXRSZWNlaXB0KGV2ZW50KTtcblxuICAgICAgICAgICAgICAgIC8vIFRvIGtlZXAgdGhpbmdzIHNpbXBsZSwgd2Ugc3RhcnQgdXAgYSBzaW5nbGUgbmV3SGVhZHMgc3Vic2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgLy8gdG8ga2VlcCBhbiBleWUgb3V0IGZvciB0cmFuc2FjdGlvbnMgd2UgYXJlIHdhdGNoaW5nIGZvci5cbiAgICAgICAgICAgICAgICAvLyBTdGFydGluZyBhIHN1YnNjcmlwdGlvbiBmb3IgYW4gZXZlbnQgKGkuZS4gXCJ0eFwiKSB0aGF0IGlzIGFscmVhZHlcbiAgICAgICAgICAgICAgICAvLyBydW5uaW5nIGlzIChiYXNpY2FsbHkpIGEgbm9wLlxuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZShcInR4XCIsIFsgXCJuZXdIZWFkc1wiIF0sIChyZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMuZmlsdGVyKChlKSA9PiAoZS50eXBlID09PSBcInR4XCIpKS5mb3JFYWNoKGVtaXRSZWNlaXB0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTm90aGluZyBpcyBuZWVkZWRcbiAgICAgICAgICAgIGNhc2UgXCJkZWJ1Z1wiOlxuICAgICAgICAgICAgY2FzZSBcInBvbGxcIjpcbiAgICAgICAgICAgIGNhc2UgXCJ3aWxsUG9sbFwiOlxuICAgICAgICAgICAgY2FzZSBcImRpZFBvbGxcIjpcbiAgICAgICAgICAgIGNhc2UgXCJlcnJvclwiOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidW5oYW5kbGVkOlwiLCBldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc3RvcEV2ZW50KGV2ZW50OiBFdmVudCk6IHZvaWQge1xuICAgICAgICBsZXQgdGFnID0gZXZlbnQudGFnO1xuXG4gICAgICAgIGlmIChldmVudC50eXBlID09PSBcInR4XCIpIHtcbiAgICAgICAgICAgIC8vIFRoZXJlIGFyZSByZW1haW5pbmcgdHJhbnNhY3Rpb24gZXZlbnQgbGlzdGVuZXJzXG4gICAgICAgICAgICBpZiAodGhpcy5fZXZlbnRzLmZpbHRlcigoZSkgPT4gKGUudHlwZSA9PT0gXCJ0eFwiKSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFnID0gXCJ0eFwiO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubGlzdGVuZXJDb3VudChldmVudC5ldmVudCkpIHtcbiAgICAgICAgICAgIC8vIFRoZXJlIGFyZSByZW1haW5pbmcgZXZlbnQgbGlzdGVuZXJzXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdWJJZCA9IHRoaXMuX3N1Yklkc1t0YWddO1xuICAgICAgICBpZiAoIXN1YklkKSB7IHJldHVybjsgfVxuXG4gICAgICAgZGVsZXRlIHRoaXMuX3N1Yklkc1t0YWddO1xuICAgICAgIHN1YklkLnRoZW4oKHN1YklkKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3N1YnNbc3ViSWRdKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3N1YnNbc3ViSWRdO1xuICAgICAgICAgICAgdGhpcy5zZW5kKFwiZXRoX3Vuc3Vic2NyaWJlXCIsIFsgc3ViSWQgXSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIGRlc3Ryb3koKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIC8vIFdhaXQgdW50aWwgd2UgaGF2ZSBjb25uZWN0ZWQgYmVmb3JlIHRyeWluZyB0byBkaXNjb25uZWN0XG4gICAgICAgIGlmICh0aGlzLndlYnNvY2tldC5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuQ09OTkVDVElORykge1xuICAgICAgICAgICAgYXdhaXQgKG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy53ZWJzb2NrZXQub25vcGVuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHRoaXMud2Vic29ja2V0Lm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmd1cFxuICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DbG9zZUV2ZW50I1N0YXR1c19jb2Rlc1xuICAgICAgICB0aGlzLndlYnNvY2tldC5jbG9zZSgxMDAwKTtcbiAgICB9XG59XG4iLCJcblwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBOZXR3b3JrLCBOZXR3b3JraXNoIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L25ldHdvcmtzXCI7XG5pbXBvcnQgeyBkZWZpbmVSZWFkT25seSwgZ2V0U3RhdGljIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIjtcbmltcG9ydCB7IENvbm5lY3Rpb25JbmZvIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3dlYlwiO1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5cbmltcG9ydCB7IENvbW11bml0eVJlc291cmNhYmxlIH0gZnJvbSBcIi4vZm9ybWF0dGVyXCI7XG5pbXBvcnQgeyBKc29uUnBjUHJvdmlkZXIsIEpzb25ScGNTaWduZXIgfSBmcm9tIFwiLi9qc29uLXJwYy1wcm92aWRlclwiO1xuXG50eXBlIGdldFVybEZ1bmMgPSAobmV0d29yazogTmV0d29yaywgYXBpS2V5OiBzdHJpbmcpID0+IHN0cmluZyB8IENvbm5lY3Rpb25JbmZvO1xuXG4vLyBBIFN0YXRpY0pzb25ScGNQcm92aWRlciBpcyB1c2VmdWwgd2hlbiB5b3UgKmtub3cqIGZvciBjZXJ0YWluIHRoYXRcbi8vIHRoZSBiYWNrZW5kIHdpbGwgbmV2ZXIgY2hhbmdlLCBhcyBpdCBuZXZlciBjYWxscyBldGhfY2hhaW5JZCB0b1xuLy8gdmVyaWZ5IGl0cyBiYWNrZW5kLiBIb3dldmVyLCBpZiB0aGUgYmFja2VuZCBkb2VzIGNoYW5nZSwgdGhlIGVmZmVjdHNcbi8vIGFyZSB1bmRlZmluZWQgYW5kIG1heSBpbmNsdWRlOlxuLy8gLSBpbmNvbnNpc3RlbnQgcmVzdWx0c1xuLy8gLSBsb2NraW5nIHVwIHRoZSBVSVxuLy8gLSBibG9jayBza2V3IHdhcm5pbmdzXG4vLyAtIHdyb25nIHJlc3VsdHNcbi8vIElmIHRoZSBuZXR3b3JrIGlzIG5vdCBleHBsaWNpdCAoaS5lLiBhdXRvLWRldGVjdGlvbiBpcyBleHBlY3RlZCksIHRoZVxuLy8gbm9kZSBNVVNUIGJlIHJ1bm5pbmcgYW5kIGF2YWlsYWJsZSB0byByZXNwb25kIHRvIHJlcXVlc3RzIEJFRk9SRSB0aGlzXG4vLyBpcyBpbnN0YW50aWF0ZWQuXG5leHBvcnQgY2xhc3MgU3RhdGljSnNvblJwY1Byb3ZpZGVyIGV4dGVuZHMgSnNvblJwY1Byb3ZpZGVyIHtcbiAgICBhc3luYyBkZXRlY3ROZXR3b3JrKCk6IFByb21pc2U8TmV0d29yaz4ge1xuICAgICAgICBsZXQgbmV0d29yayA9IHRoaXMubmV0d29yaztcbiAgICAgICAgaWYgKG5ldHdvcmsgPT0gbnVsbCkge1xuICAgICAgICAgICAgbmV0d29yayA9IGF3YWl0IHN1cGVyLmRldGVjdE5ldHdvcmsoKTtcblxuICAgICAgICAgICAgaWYgKCFuZXR3b3JrKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJubyBuZXR3b3JrIGRldGVjdGVkXCIsIExvZ2dlci5lcnJvcnMuVU5LTk9XTl9FUlJPUiwgeyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgc3RpbGwgbm90IHNldCwgc2V0IGl0XG4gICAgICAgICAgICBpZiAodGhpcy5fbmV0d29yayA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gQSBzdGF0aWMgbmV0d29yayBkb2VzIG5vdCBzdXBwb3J0IFwiYW55XCJcbiAgICAgICAgICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcIl9uZXR3b3JrXCIsIG5ldHdvcmspO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwibmV0d29ya1wiLCBuZXR3b3JrLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV0d29yaztcbiAgICB9XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBVcmxKc29uUnBjUHJvdmlkZXIgZXh0ZW5kcyBTdGF0aWNKc29uUnBjUHJvdmlkZXIgaW1wbGVtZW50cyBDb21tdW5pdHlSZXNvdXJjYWJsZSB7XG4gICAgcmVhZG9ubHkgYXBpS2V5OiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihuZXR3b3JrPzogTmV0d29ya2lzaCwgYXBpS2V5PzogYW55KSB7XG4gICAgICAgIGxvZ2dlci5jaGVja0Fic3RyYWN0KG5ldy50YXJnZXQsIFVybEpzb25ScGNQcm92aWRlcik7XG5cbiAgICAgICAgLy8gTm9ybWFsaXplIHRoZSBOZXR3b3JrIGFuZCBBUEkgS2V5XG4gICAgICAgIG5ldHdvcmsgPSBnZXRTdGF0aWM8KG5ldHdvcms6IE5ldHdvcmtpc2gpID0+IE5ldHdvcms+KG5ldy50YXJnZXQsIFwiZ2V0TmV0d29ya1wiKShuZXR3b3JrKTtcbiAgICAgICAgYXBpS2V5ID0gZ2V0U3RhdGljPChhcGlLZXk6IHN0cmluZykgPT4gc3RyaW5nPihuZXcudGFyZ2V0LCBcImdldEFwaUtleVwiKShhcGlLZXkpO1xuXG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBnZXRTdGF0aWM8Z2V0VXJsRnVuYz4obmV3LnRhcmdldCwgXCJnZXRVcmxcIikobmV0d29yaywgYXBpS2V5KTtcblxuICAgICAgICBzdXBlcihjb25uZWN0aW9uLCBuZXR3b3JrKTtcblxuICAgICAgICBpZiAodHlwZW9mKGFwaUtleSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiYXBpS2V5XCIsIGFwaUtleSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYXBpS2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGFwaUtleSkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgZGVmaW5lUmVhZE9ubHk8YW55LCBhbnk+KHRoaXMsIGtleSwgYXBpS2V5W2tleV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc3RhcnRQZW5kaW5nKCk6IHZvaWQge1xuICAgICAgICBsb2dnZXIud2FybihcIldBUk5JTkc6IEFQSSBwcm92aWRlciBkb2VzIG5vdCBzdXBwb3J0IHBlbmRpbmcgZmlsdGVyc1wiKTtcbiAgICB9XG5cbiAgICBpc0NvbW11bml0eVJlc291cmNlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZ2V0U2lnbmVyKGFkZHJlc3M/OiBzdHJpbmcpOiBKc29uUnBjU2lnbmVyIHtcbiAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0Vycm9yKFxuICAgICAgICAgICAgXCJBUEkgcHJvdmlkZXIgZG9lcyBub3Qgc3VwcG9ydCBzaWduaW5nXCIsXG4gICAgICAgICAgICBMb2dnZXIuZXJyb3JzLlVOU1VQUE9SVEVEX09QRVJBVElPTixcbiAgICAgICAgICAgIHsgb3BlcmF0aW9uOiBcImdldFNpZ25lclwiIH1cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBsaXN0QWNjb3VudHMoKTogUHJvbWlzZTxBcnJheTxzdHJpbmc+PiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBhIGRlZmF1bHRBcGlLZXkgaWYgbnVsbCwgb3RoZXJ3aXNlIHZhbGlkYXRlIHRoZSBBUEkga2V5XG4gICAgc3RhdGljIGdldEFwaUtleShhcGlLZXk6IGFueSk6IGFueSB7XG4gICAgICAgIHJldHVybiBhcGlLZXk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJucyB0aGUgdXJsIG9yIGNvbm5lY3Rpb24gZm9yIHRoZSBnaXZlbiBuZXR3b3JrIGFuZCBBUEkga2V5LiBUaGVcbiAgICAvLyBBUEkga2V5IHdpbGwgaGF2ZSBiZWVuIHNhbml0aXplZCBieSB0aGUgZ2V0QXBpS2V5IGZpcnN0LCBzbyBhbnkgdmFsaWRhdGlvblxuICAgIC8vIG9yIHRyYW5zZm9ybWF0aW9ucyBjYW4gYmUgZG9uZSB0aGVyZS5cbiAgICBzdGF0aWMgZ2V0VXJsKG5ldHdvcms6IE5ldHdvcmssIGFwaUtleTogYW55KTogc3RyaW5nIHwgQ29ubmVjdGlvbkluZm8ge1xuICAgICAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoXCJub3QgaW1wbGVtZW50ZWQ7IHN1Yi1jbGFzc2VzIG11c3Qgb3ZlcnJpZGUgZ2V0VXJsXCIsIExvZ2dlci5lcnJvcnMuTk9UX0lNUExFTUVOVEVELCB7XG4gICAgICAgICAgICBvcGVyYXRpb246IFwiZ2V0VXJsXCJcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IE5ldHdvcmssIE5ldHdvcmtpc2ggfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbmV0d29ya3NcIjtcbmltcG9ydCB7IGRlZmluZVJlYWRPbmx5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIjtcbmltcG9ydCB7IENvbm5lY3Rpb25JbmZvIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3dlYlwiO1xuXG5pbXBvcnQgeyBDb21tdW5pdHlSZXNvdXJjYWJsZSwgc2hvd1Rocm90dGxlTWVzc2FnZSB9IGZyb20gXCIuL2Zvcm1hdHRlclwiO1xuaW1wb3J0IHsgV2ViU29ja2V0UHJvdmlkZXIgfSBmcm9tIFwiLi93ZWJzb2NrZXQtcHJvdmlkZXJcIjtcblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuXG5pbXBvcnQgeyBVcmxKc29uUnBjUHJvdmlkZXIgfSBmcm9tIFwiLi91cmwtanNvbi1ycGMtcHJvdmlkZXJcIjtcblxuLy8gVGhpcyBrZXkgd2FzIHByb3ZpZGVkIHRvIGV0aGVycy5qcyBieSBBbGNoZW15IHRvIGJlIHVzZWQgYnkgdGhlXG4vLyBkZWZhdWx0IHByb3ZpZGVyLCBidXQgaXQgaXMgcmVjb21tZW5kZWQgdGhhdCBmb3IgeW91ciBvd25cbi8vIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzLCB0aGF0IHlvdSBhY3F1aXJlIHlvdXIgb3duIEFQSSBrZXkgYXQ6XG4vLyAgIGh0dHBzOi8vZGFzaGJvYXJkLmFsY2hlbXlhcGkuaW9cblxuY29uc3QgZGVmYXVsdEFwaUtleSA9IFwiX2dnN3dTU2kwS01Cc2RLbkdWZkhEdWVxNnhNQjlFa0NcIlxuXG5leHBvcnQgY2xhc3MgQWxjaGVteVdlYlNvY2tldFByb3ZpZGVyIGV4dGVuZHMgV2ViU29ja2V0UHJvdmlkZXIgaW1wbGVtZW50cyBDb21tdW5pdHlSZXNvdXJjYWJsZSB7XG4gICAgcmVhZG9ubHkgYXBpS2V5OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihuZXR3b3JrPzogTmV0d29ya2lzaCwgYXBpS2V5PzogYW55KSB7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IEFsY2hlbXlQcm92aWRlcihuZXR3b3JrLCBhcGlLZXkpO1xuXG4gICAgICAgIGNvbnN0IHVybCA9IHByb3ZpZGVyLmNvbm5lY3Rpb24udXJsLnJlcGxhY2UoL15odHRwL2ksIFwid3NcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZShcIi5hbGNoZW15YXBpLlwiLCBcIi53cy5hbGNoZW15YXBpLlwiKTtcblxuICAgICAgICBzdXBlcih1cmwsIHByb3ZpZGVyLm5ldHdvcmspO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImFwaUtleVwiLCBwcm92aWRlci5hcGlLZXkpO1xuICAgIH1cblxuICAgIGlzQ29tbXVuaXR5UmVzb3VyY2UoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAodGhpcy5hcGlLZXkgPT09IGRlZmF1bHRBcGlLZXkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFsY2hlbXlQcm92aWRlciBleHRlbmRzIFVybEpzb25ScGNQcm92aWRlciB7XG5cbiAgICBzdGF0aWMgZ2V0V2ViU29ja2V0UHJvdmlkZXIobmV0d29yaz86IE5ldHdvcmtpc2gsIGFwaUtleT86IGFueSk6IEFsY2hlbXlXZWJTb2NrZXRQcm92aWRlciB7XG4gICAgICAgIHJldHVybiBuZXcgQWxjaGVteVdlYlNvY2tldFByb3ZpZGVyKG5ldHdvcmssIGFwaUtleSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldEFwaUtleShhcGlLZXk6IGFueSk6IGFueSB7XG4gICAgICAgIGlmIChhcGlLZXkgPT0gbnVsbCkgeyByZXR1cm4gZGVmYXVsdEFwaUtleTsgfVxuICAgICAgICBpZiAoYXBpS2V5ICYmIHR5cGVvZihhcGlLZXkpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBhcGlLZXlcIiwgXCJhcGlLZXlcIiwgYXBpS2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBpS2V5O1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRVcmwobmV0d29yazogTmV0d29yaywgYXBpS2V5OiBzdHJpbmcpOiBDb25uZWN0aW9uSW5mbyB7XG4gICAgICAgIGxldCBob3N0ID0gbnVsbDtcbiAgICAgICAgc3dpdGNoIChuZXR3b3JrLm5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJob21lc3RlYWRcIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJldGgtbWFpbm5ldC5hbGNoZW15YXBpLmlvL3YyL1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInJvcHN0ZW5cIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJldGgtcm9wc3Rlbi5hbGNoZW15YXBpLmlvL3YyL1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInJpbmtlYnlcIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJldGgtcmlua2VieS5hbGNoZW15YXBpLmlvL3YyL1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImdvZXJsaVwiOlxuICAgICAgICAgICAgICAgIGhvc3QgPSBcImV0aC1nb2VybGkuYWxjaGVteWFwaS5pby92Mi9cIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJrb3ZhblwiOlxuICAgICAgICAgICAgICAgIGhvc3QgPSBcImV0aC1rb3Zhbi5hbGNoZW15YXBpLmlvL3YyL1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm1hdGljXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwicG9seWdvbi1tYWlubmV0LmcuYWxjaGVteS5jb20vdjIvXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibWF0aWNtdW1cIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJwb2x5Z29uLW11bWJhaS5nLmFsY2hlbXkuY29tL3YyL1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImFyYml0cnVtXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwiYXJiLW1haW5uZXQuZy5hbGNoZW15LmNvbS92Mi9cIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJhcmJpdHJ1bS1yaW5rZWJ5XCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwiYXJiLXJpbmtlYnkuZy5hbGNoZW15LmNvbS92Mi9cIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJhcmJpdHJ1bS1nb2VybGlcIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJhcmItZ29lcmxpLmcuYWxjaGVteS5jb20vdjIvXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwib3B0aW1pc21cIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJvcHQtbWFpbm5ldC5nLmFsY2hlbXkuY29tL3YyL1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm9wdGltaXNtLWtvdmFuXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwib3B0LWtvdmFuLmcuYWxjaGVteS5jb20vdjIvXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwib3B0aW1pc20tZ29lcmxpXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwib3B0LWdvZXJsaS5nLmFsY2hlbXkuY29tL3YyL1wiXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIG5ldHdvcmtcIiwgXCJuZXR3b3JrXCIsIGFyZ3VtZW50c1swXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWxsb3dHemlwOiB0cnVlLFxuICAgICAgICAgICAgdXJsOiAoXCJodHRwczovXCIgKyBcIi9cIiArIGhvc3QgKyBhcGlLZXkpLFxuICAgICAgICAgICAgdGhyb3R0bGVDYWxsYmFjazogKGF0dGVtcHQ6IG51bWJlciwgdXJsOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYXBpS2V5ID09PSBkZWZhdWx0QXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHNob3dUaHJvdHRsZU1lc3NhZ2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpc0NvbW11bml0eVJlc291cmNlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKHRoaXMuYXBpS2V5ID09PSBkZWZhdWx0QXBpS2V5KTtcbiAgICB9XG59XG4iLCJcbmltcG9ydCB7IE5ldHdvcmsgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbmV0d29ya3NcIjtcblxuaW1wb3J0IHsgc2hvd1Rocm90dGxlTWVzc2FnZSB9IGZyb20gXCIuL2Zvcm1hdHRlclwiO1xuaW1wb3J0IHsgVXJsSnNvblJwY1Byb3ZpZGVyIH0gZnJvbSBcIi4vdXJsLWpzb24tcnBjLXByb3ZpZGVyXCI7XG5cbmltcG9ydCB0eXBlIHsgQ29ubmVjdGlvbkluZm8gfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvd2ViXCI7XG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcblxuXG5jb25zdCBkZWZhdWx0QXBpS2V5ID0gXCI5ZjdkOTI5YjAxOGNkZmZiMzM4NTE3ZWZhMDZmNTgzNTllODZmZjFmZmQzNTBiYzg4OTczODUyMzY1OWU3OTcyXCI7XG5cbmZ1bmN0aW9uIGdldEhvc3QobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgY2FzZSBcImhvbWVzdGVhZFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwicnBjLmFua3IuY29tL2V0aC9cIjtcbiAgICAgICAgY2FzZSBcInJvcHN0ZW5cIjpcbiAgICAgICAgICAgIHJldHVybiBcInJwYy5hbmtyLmNvbS9ldGhfcm9wc3Rlbi9cIjtcbiAgICAgICAgY2FzZSBcInJpbmtlYnlcIjpcbiAgICAgICAgICAgIHJldHVybiBcInJwYy5hbmtyLmNvbS9ldGhfcmlua2VieS9cIjtcbiAgICAgICAgY2FzZSBcImdvZXJsaVwiOlxuICAgICAgICAgICAgcmV0dXJuIFwicnBjLmFua3IuY29tL2V0aF9nb2VybGkvXCI7XG5cbiAgICAgICAgY2FzZSBcIm1hdGljXCI6XG4gICAgICAgICAgICByZXR1cm4gXCJycGMuYW5rci5jb20vcG9seWdvbi9cIjtcblxuICAgICAgICBjYXNlIFwiYXJiaXRydW1cIjpcbiAgICAgICAgICAgIHJldHVybiBcInJwYy5hbmtyLmNvbS9hcmJpdHJ1bS9cIjtcbiAgICB9XG4gICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bnN1cHBvcnRlZCBuZXR3b3JrXCIsIFwibmFtZVwiLCBuYW1lKTtcbn1cblxuZXhwb3J0IGNsYXNzIEFua3JQcm92aWRlciBleHRlbmRzIFVybEpzb25ScGNQcm92aWRlciB7XG4gICAgcmVhZG9ubHkgYXBpS2V5OiBzdHJpbmc7XG5cbiAgICBpc0NvbW11bml0eVJlc291cmNlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKHRoaXMuYXBpS2V5ID09PSBkZWZhdWx0QXBpS2V5KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0QXBpS2V5KGFwaUtleTogYW55KTogYW55IHtcbiAgICAgICAgaWYgKGFwaUtleSA9PSBudWxsKSB7IHJldHVybiBkZWZhdWx0QXBpS2V5OyB9XG4gICAgICAgIHJldHVybiBhcGlLZXk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFVybChuZXR3b3JrOiBOZXR3b3JrLCBhcGlLZXk6IGFueSk6IENvbm5lY3Rpb25JbmZvIHtcbiAgICAgICAgaWYgKGFwaUtleSA9PSBudWxsKSB7IGFwaUtleSA9IGRlZmF1bHRBcGlLZXk7IH1cbiAgICAgICAgY29uc3QgY29ubmVjdGlvbjogQ29ubmVjdGlvbkluZm8gPSB7XG4gICAgICAgICAgICBhbGxvd0d6aXA6IHRydWUsXG4gICAgICAgICAgICB1cmw6IChcImh0dHBzOi9cXC9cIiArIGdldEhvc3QobmV0d29yay5uYW1lKSArIGFwaUtleSksXG4gICAgICAgICAgICB0aHJvdHRsZUNhbGxiYWNrOiAoYXR0ZW1wdDogbnVtYmVyLCB1cmw6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChhcGlLZXkuYXBpS2V5ID09PSBkZWZhdWx0QXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHNob3dUaHJvdHRsZU1lc3NhZ2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoYXBpS2V5LnByb2plY3RTZWNyZXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29ubmVjdGlvbi51c2VyID0gXCJcIjtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24ucGFzc3dvcmQgPSBhcGlLZXkucHJvamVjdFNlY3JldFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb247XG4gICAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IE5ldHdvcmsgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbmV0d29ya3NcIjtcbmltcG9ydCB7IFVybEpzb25ScGNQcm92aWRlciB9IGZyb20gXCIuL3VybC1qc29uLXJwYy1wcm92aWRlclwiO1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5cbmV4cG9ydCBjbGFzcyBDbG91ZGZsYXJlUHJvdmlkZXIgZXh0ZW5kcyBVcmxKc29uUnBjUHJvdmlkZXIge1xuXG4gICAgc3RhdGljIGdldEFwaUtleShhcGlLZXk6IGFueSk6IGFueSB7XG4gICAgICAgIGlmIChhcGlLZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcImFwaUtleSBub3Qgc3VwcG9ydGVkIGZvciBjbG91ZGZsYXJlXCIsIFwiYXBpS2V5XCIsIGFwaUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFVybChuZXR3b3JrOiBOZXR3b3JrLCBhcGlLZXk/OiBhbnkpOiBzdHJpbmcge1xuICAgICAgICBsZXQgaG9zdCA9IG51bGw7XG4gICAgICAgIHN3aXRjaCAobmV0d29yay5uYW1lKSB7XG4gICAgICAgICAgICBjYXNlIFwiaG9tZXN0ZWFkXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwiaHR0cHM6Ly9jbG91ZGZsYXJlLWV0aC5jb20vXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIG5ldHdvcmtcIiwgXCJuZXR3b3JrXCIsIGFyZ3VtZW50c1swXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaG9zdDtcbiAgICB9XG5cbiAgICBhc3luYyBwZXJmb3JtKG1ldGhvZDogc3RyaW5nLCBwYXJhbXM6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIC8vIFRoZSBDbG91ZGZsYXJlIHByb3ZpZGVyIGRvZXMgbm90IHN1cHBvcnQgZXRoX2Jsb2NrTnVtYmVyLFxuICAgICAgICAvLyBzbyB3ZSBnZXQgdGhlIGxhdGVzdCBibG9jayBhbmQgcHVsbCBpdCBmcm9tIHRoYXRcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJnZXRCbG9ja051bWJlclwiKSB7XG4gICAgICAgICAgICBjb25zdCBibG9jayA9IGF3YWl0IHN1cGVyLnBlcmZvcm0oXCJnZXRCbG9ja1wiLCB7IGJsb2NrVGFnOiBcImxhdGVzdFwiIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGJsb2NrLm51bWJlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdXBlci5wZXJmb3JtKG1ldGhvZCwgcGFyYW1zKTtcbiAgICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgQmxvY2tUYWcsIFRyYW5zYWN0aW9uUmVxdWVzdCwgVHJhbnNhY3Rpb25SZXNwb25zZSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1wcm92aWRlclwiO1xuaW1wb3J0IHsgaGV4bGlmeSwgaGV4VmFsdWUsIGlzSGV4U3RyaW5nIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBOZXR3b3JrLCBOZXR3b3JraXNoIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L25ldHdvcmtzXCI7XG5pbXBvcnQgeyBkZWVwQ29weSwgZGVmaW5lUmVhZE9ubHkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiO1xuaW1wb3J0IHsgYWNjZXNzTGlzdGlmeSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC90cmFuc2FjdGlvbnNcIjtcbmltcG9ydCB7IENvbm5lY3Rpb25JbmZvLCBmZXRjaEpzb24gfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvd2ViXCI7XG5cbmltcG9ydCB7IHNob3dUaHJvdHRsZU1lc3NhZ2UgfSBmcm9tIFwiLi9mb3JtYXR0ZXJcIjtcblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuXG5pbXBvcnQgeyBCYXNlUHJvdmlkZXIgfSBmcm9tIFwiLi9iYXNlLXByb3ZpZGVyXCI7XG5cblxuLy8gVGhlIHRyYW5zYWN0aW9uIGhhcyBhbHJlYWR5IGJlZW4gc2FuaXRpemVkIGJ5IHRoZSBjYWxscyBpbiBQcm92aWRlclxuZnVuY3Rpb24gZ2V0VHJhbnNhY3Rpb25Qb3N0RGF0YSh0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb25SZXF1ZXN0KTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB7XG4gICAgY29uc3QgcmVzdWx0OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0geyB9O1xuICAgIGZvciAobGV0IGtleSBpbiB0cmFuc2FjdGlvbikge1xuICAgICAgICBpZiAoKDxhbnk+dHJhbnNhY3Rpb24pW2tleV0gPT0gbnVsbCkgeyBjb250aW51ZTsgfVxuICAgICAgICBsZXQgdmFsdWUgPSAoPGFueT50cmFuc2FjdGlvbilba2V5XTtcbiAgICAgICAgaWYgKGtleSA9PT0gXCJ0eXBlXCIgJiYgdmFsdWUgPT09IDApIHsgY29udGludWU7IH1cblxuICAgICAgICAvLyBRdWFudGl0eS10eXBlcyByZXF1aXJlIG5vIGxlYWRpbmcgemVybywgdW5sZXNzIDBcbiAgICAgICAgaWYgKCg8YW55PnsgdHlwZTogdHJ1ZSwgZ2FzTGltaXQ6IHRydWUsIGdhc1ByaWNlOiB0cnVlLCBtYXhGZWVQZXJHczogdHJ1ZSwgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IHRydWUsIG5vbmNlOiB0cnVlLCB2YWx1ZTogdHJ1ZSB9KVtrZXldKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGhleFZhbHVlKGhleGxpZnkodmFsdWUpKTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09IFwiYWNjZXNzTGlzdFwiKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IFwiW1wiICsgYWNjZXNzTGlzdGlmeSh2YWx1ZSkubWFwKChzZXQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYHthZGRyZXNzOlwiJHsgc2V0LmFkZHJlc3MgfVwiLHN0b3JhZ2VLZXlzOltcIiR7IHNldC5zdG9yYWdlS2V5cy5qb2luKCdcIixcIicpIH1cIl19YDtcbiAgICAgICAgICAgIH0pLmpvaW4oXCIsXCIpICsgXCJdXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGhleGxpZnkodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGdldFJlc3VsdChyZXN1bHQ6IHsgc3RhdHVzPzogbnVtYmVyLCBtZXNzYWdlPzogc3RyaW5nLCByZXN1bHQ/OiBhbnkgfSk6IGFueSB7XG4gICAgLy8gZ2V0TG9ncywgZ2V0SGlzdG9yeSBoYXZlIHdlaXJkIHN1Y2Nlc3MgcmVzcG9uc2VzXG4gICAgaWYgKHJlc3VsdC5zdGF0dXMgPT0gMCAmJiAocmVzdWx0Lm1lc3NhZ2UgPT09IFwiTm8gcmVjb3JkcyBmb3VuZFwiIHx8IHJlc3VsdC5tZXNzYWdlID09PSBcIk5vIHRyYW5zYWN0aW9ucyBmb3VuZFwiKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0LnJlc3VsdDtcbiAgICB9XG5cbiAgICBpZiAocmVzdWx0LnN0YXR1cyAhPSAxIHx8IHR5cGVvZihyZXN1bHQubWVzc2FnZSkgIT09IFwic3RyaW5nXCIgfHwgIXJlc3VsdC5tZXNzYWdlLm1hdGNoKC9eT0svKSkge1xuICAgICAgICBjb25zdCBlcnJvcjogYW55ID0gbmV3IEVycm9yKFwiaW52YWxpZCByZXNwb25zZVwiKTtcbiAgICAgICAgZXJyb3IucmVzdWx0ID0gSlNPTi5zdHJpbmdpZnkocmVzdWx0KTtcbiAgICAgICAgaWYgKChyZXN1bHQucmVzdWx0IHx8IFwiXCIpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcInJhdGUgbGltaXRcIikgPj0gMCkge1xuICAgICAgICAgICAgZXJyb3IudGhyb3R0bGVSZXRyeSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdC5yZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGdldEpzb25SZXN1bHQocmVzdWx0OiB7IGpzb25ycGM6IHN0cmluZywgcmVzdWx0PzogYW55LCBlcnJvcj86IHsgY29kZT86IG51bWJlciwgZGF0YT86IGFueSwgbWVzc2FnZT86IHN0cmluZ30gfSApOiBhbnkge1xuICAgIC8vIFRoaXMgcmVzcG9uc2UgaW5kaWNhdGVzIHdlIGFyZSBiZWluZyB0aHJvdHRsZWRcbiAgICBpZiAocmVzdWx0ICYmICg8YW55PnJlc3VsdCkuc3RhdHVzID09IDAgJiYgKDxhbnk+cmVzdWx0KS5tZXNzYWdlID09IFwiTk9UT0tcIiAmJiAocmVzdWx0LnJlc3VsdCB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJyYXRlIGxpbWl0XCIpID49IDApIHtcbiAgICAgICAgY29uc3QgZXJyb3I6IGFueSA9IG5ldyBFcnJvcihcInRocm90dGxlZCByZXNwb25zZVwiKTtcbiAgICAgICAgZXJyb3IucmVzdWx0ID0gSlNPTi5zdHJpbmdpZnkocmVzdWx0KTtcbiAgICAgICAgZXJyb3IudGhyb3R0bGVSZXRyeSA9IHRydWU7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cblxuICAgIGlmIChyZXN1bHQuanNvbnJwYyAhPSBcIjIuMFwiKSB7XG4gICAgICAgIC8vIEBUT0RPOiBub3QgYW55XG4gICAgICAgIGNvbnN0IGVycm9yOiBhbnkgPSBuZXcgRXJyb3IoXCJpbnZhbGlkIHJlc3BvbnNlXCIpO1xuICAgICAgICBlcnJvci5yZXN1bHQgPSBKU09OLnN0cmluZ2lmeShyZXN1bHQpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICBpZiAocmVzdWx0LmVycm9yKSB7XG4gICAgICAgIC8vIEBUT0RPOiBub3QgYW55XG4gICAgICAgIGNvbnN0IGVycm9yOiBhbnkgPSBuZXcgRXJyb3IocmVzdWx0LmVycm9yLm1lc3NhZ2UgfHwgXCJ1bmtub3duIGVycm9yXCIpO1xuICAgICAgICBpZiAocmVzdWx0LmVycm9yLmNvZGUpIHsgZXJyb3IuY29kZSA9IHJlc3VsdC5lcnJvci5jb2RlOyB9XG4gICAgICAgIGlmIChyZXN1bHQuZXJyb3IuZGF0YSkgeyBlcnJvci5kYXRhID0gcmVzdWx0LmVycm9yLmRhdGE7IH1cbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdC5yZXN1bHQ7XG59XG5cbi8vIFRoZSBibG9ja1RhZyB3YXMgbm9ybWFsaXplZCBhcyBhIHN0cmluZyBieSB0aGUgUHJvdmlkZXIgcHJlLXBlcmZvcm0gb3BlcmF0aW9uc1xuZnVuY3Rpb24gY2hlY2tMb2dUYWcoYmxvY2tUYWc6IHN0cmluZyk6IG51bWJlciB8IFwibGF0ZXN0XCIge1xuICAgIGlmIChibG9ja1RhZyA9PT0gXCJwZW5kaW5nXCIpIHsgdGhyb3cgbmV3IEVycm9yKFwicGVuZGluZyBub3Qgc3VwcG9ydGVkXCIpOyB9XG4gICAgaWYgKGJsb2NrVGFnID09PSBcImxhdGVzdFwiKSB7IHJldHVybiBibG9ja1RhZzsgfVxuXG4gICAgcmV0dXJuIHBhcnNlSW50KGJsb2NrVGFnLnN1YnN0cmluZygyKSwgMTYpO1xufVxuXG5cbmZ1bmN0aW9uIGNoZWNrRXJyb3IobWV0aG9kOiBzdHJpbmcsIGVycm9yOiBhbnksIHRyYW5zYWN0aW9uOiBhbnkpOiBhbnkge1xuICAgIC8vIFVuZG8gdGhlIFwiY29udmVuaWVuY2VcIiBzb21lIG5vZGVzIGFyZSBhdHRlbXB0aW5nIHRvIHByZXZlbnQgYmFja3dhcmRzXG4gICAgLy8gaW5jb21wYXRpYmlsaXR5OyBtYXliZSBmb3IgdjYgY29uc2lkZXIgZm9yd2FyZGluZyByZXZlcnRzIGFzIGVycm9yc1xuICAgIGlmIChtZXRob2QgPT09IFwiY2FsbFwiICYmIGVycm9yLmNvZGUgPT09IExvZ2dlci5lcnJvcnMuU0VSVkVSX0VSUk9SKSB7XG4gICAgICAgIGNvbnN0IGUgPSBlcnJvci5lcnJvcjtcblxuICAgICAgICAvLyBFdGhlcnNjYW4ga2VlcHMgY2hhbmdpbmcgdGhlaXIgc3RyaW5nXG4gICAgICAgIGlmIChlICYmIChlLm1lc3NhZ2UubWF0Y2goL3JldmVydGVkL2kpIHx8IGUubWVzc2FnZS5tYXRjaCgvVk0gZXhlY3V0aW9uIGVycm9yL2kpKSkge1xuICAgICAgICAgICAgLy8gRXRoZXJzY2FuIHByZWZpeGVzIHRoZSBkYXRhIGxpa2UgXCJSZXZlcnRlZCAweDEyMzRcIlxuICAgICAgICAgICAgbGV0IGRhdGEgPSBlLmRhdGE7XG4gICAgICAgICAgICBpZiAoZGF0YSkgeyBkYXRhID0gXCIweFwiICsgZGF0YS5yZXBsYWNlKC9eLioweC9pLCBcIlwiKTsgfVxuXG4gICAgICAgICAgICBpZiAoaXNIZXhTdHJpbmcoZGF0YSkpIHsgcmV0dXJuIGRhdGE7IH1cblxuICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJtaXNzaW5nIHJldmVydCBkYXRhIGluIGNhbGwgZXhjZXB0aW9uXCIsIExvZ2dlci5lcnJvcnMuQ0FMTF9FWENFUFRJT04sIHtcbiAgICAgICAgICAgICAgICBlcnJvciwgZGF0YTogXCIweFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdldCB0aGUgbWVzc2FnZSBmcm9tIGFueSBuZXN0ZWQgZXJyb3Igc3RydWN0dXJlXG4gICAgbGV0IG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuICAgIGlmIChlcnJvci5jb2RlID09PSBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUikge1xuICAgICAgICBpZiAoZXJyb3IuZXJyb3IgJiYgdHlwZW9mKGVycm9yLmVycm9yLm1lc3NhZ2UpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gZXJyb3IuZXJyb3IubWVzc2FnZTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YoZXJyb3IuYm9keSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBlcnJvci5ib2R5O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZihlcnJvci5yZXNwb25zZVRleHQpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gZXJyb3IucmVzcG9uc2VUZXh0O1xuICAgICAgICB9XG4gICAgfVxuICAgIG1lc3NhZ2UgPSAobWVzc2FnZSB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gXCJJbnN1ZmZpY2llbnQgZnVuZHMuIFRoZSBhY2NvdW50IHlvdSB0cmllZCB0byBzZW5kIHRyYW5zYWN0aW9uIGZyb20gZG9lcyBub3QgaGF2ZSBlbm91Z2ggZnVuZHMuIFJlcXVpcmVkIDIxNDY0MDAwMDAwMDAwIGFuZCBnb3Q6IDBcIlxuICAgIGlmIChtZXNzYWdlLm1hdGNoKC9pbnN1ZmZpY2llbnQgZnVuZHMvKSkge1xuICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcImluc3VmZmljaWVudCBmdW5kcyBmb3IgaW50cmluc2ljIHRyYW5zYWN0aW9uIGNvc3RcIiwgTG9nZ2VyLmVycm9ycy5JTlNVRkZJQ0lFTlRfRlVORFMsIHtcbiAgICAgICAgICAgZXJyb3IsIG1ldGhvZCwgdHJhbnNhY3Rpb25cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gXCJUcmFuc2FjdGlvbiB3aXRoIHRoZSBzYW1lIGhhc2ggd2FzIGFscmVhZHkgaW1wb3J0ZWQuXCJcbiAgICBpZiAobWVzc2FnZS5tYXRjaCgvc2FtZSBoYXNoIHdhcyBhbHJlYWR5IGltcG9ydGVkfHRyYW5zYWN0aW9uIG5vbmNlIGlzIHRvbyBsb3d8bm9uY2UgdG9vIGxvdy8pKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwibm9uY2UgaGFzIGFscmVhZHkgYmVlbiB1c2VkXCIsIExvZ2dlci5lcnJvcnMuTk9OQ0VfRVhQSVJFRCwge1xuICAgICAgICAgICBlcnJvciwgbWV0aG9kLCB0cmFuc2FjdGlvblxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBcIlRyYW5zYWN0aW9uIGdhcyBwcmljZSBpcyB0b28gbG93LiBUaGVyZSBpcyBhbm90aGVyIHRyYW5zYWN0aW9uIHdpdGggc2FtZSBub25jZSBpbiB0aGUgcXVldWUuIFRyeSBpbmNyZWFzaW5nIHRoZSBnYXMgcHJpY2Ugb3IgaW5jcmVtZW50aW5nIHRoZSBub25jZS5cIlxuICAgIGlmIChtZXNzYWdlLm1hdGNoKC9hbm90aGVyIHRyYW5zYWN0aW9uIHdpdGggc2FtZSBub25jZS8pKSB7XG4gICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcInJlcGxhY2VtZW50IGZlZSB0b28gbG93XCIsIExvZ2dlci5lcnJvcnMuUkVQTEFDRU1FTlRfVU5ERVJQUklDRUQsIHtcbiAgICAgICAgICAgIGVycm9yLCBtZXRob2QsIHRyYW5zYWN0aW9uXG4gICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAobWVzc2FnZS5tYXRjaCgvZXhlY3V0aW9uIGZhaWxlZCBkdWUgdG8gYW4gZXhjZXB0aW9ufGV4ZWN1dGlvbiByZXZlcnRlZC8pKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwiY2Fubm90IGVzdGltYXRlIGdhczsgdHJhbnNhY3Rpb24gbWF5IGZhaWwgb3IgbWF5IHJlcXVpcmUgbWFudWFsIGdhcyBsaW1pdFwiLCBMb2dnZXIuZXJyb3JzLlVOUFJFRElDVEFCTEVfR0FTX0xJTUlULCB7XG4gICAgICAgICAgICBlcnJvciwgbWV0aG9kLCB0cmFuc2FjdGlvblxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB0aHJvdyBlcnJvcjtcbn1cblxuZXhwb3J0IGNsYXNzIEV0aGVyc2NhblByb3ZpZGVyIGV4dGVuZHMgQmFzZVByb3ZpZGVye1xuICAgIHJlYWRvbmx5IGJhc2VVcmw6IHN0cmluZztcbiAgICByZWFkb25seSBhcGlLZXk6IHN0cmluZyB8IG51bGw7XG5cbiAgICBjb25zdHJ1Y3RvcihuZXR3b3JrPzogTmV0d29ya2lzaCwgYXBpS2V5Pzogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKG5ldHdvcmspO1xuXG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiYmFzZVVybFwiLCB0aGlzLmdldEJhc2VVcmwoKSk7XG4gICAgICAgIGRlZmluZVJlYWRPbmx5KHRoaXMsIFwiYXBpS2V5XCIsIGFwaUtleSB8fCBudWxsKTtcbiAgICB9XG5cbiAgICBnZXRCYXNlVXJsKCk6IHN0cmluZyB7XG4gICAgICAgIHN3aXRjaCh0aGlzLm5ldHdvcmsgPyB0aGlzLm5ldHdvcmsubmFtZTogXCJpbnZhbGlkXCIpIHtcbiAgICAgICAgICAgIGNhc2UgXCJob21lc3RlYWRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJodHRwczovXFwvYXBpLmV0aGVyc2Nhbi5pb1wiO1xuICAgICAgICAgICAgY2FzZSBcInJvcHN0ZW5cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJodHRwczovXFwvYXBpLXJvcHN0ZW4uZXRoZXJzY2FuLmlvXCI7XG4gICAgICAgICAgICBjYXNlIFwicmlua2VieVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcImh0dHBzOi9cXC9hcGktcmlua2VieS5ldGhlcnNjYW4uaW9cIjtcbiAgICAgICAgICAgIGNhc2UgXCJrb3ZhblwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBcImh0dHBzOi9cXC9hcGkta292YW4uZXRoZXJzY2FuLmlvXCI7XG4gICAgICAgICAgICBjYXNlIFwiZ29lcmxpXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiaHR0cHM6L1xcL2FwaS1nb2VybGkuZXRoZXJzY2FuLmlvXCI7XG4gICAgICAgICAgICBjYXNlIFwib3B0aW1pc21cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJodHRwczovXFwvYXBpLW9wdGltaXN0aWMuZXRoZXJzY2FuLmlvXCI7XG4gICAgICAgICAgICBjYXNlIFwib3B0aW1pc20ta292YW5cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJodHRwczovXFwvYXBpLWtvdmFuLW9wdGltaXN0aWMuZXRoZXJzY2FuLmlvXCI7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ1bnN1cHBvcnRlZCBuZXR3b3JrXCIsIFwibmV0d29ya1wiLCB0aGlzLm5ldHdvcmsubmFtZSk7XG4gICAgfVxuXG4gICAgZ2V0VXJsKG1vZHVsZTogc3RyaW5nLCBwYXJhbXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBxdWVyeSA9IE9iamVjdC5rZXlzKHBhcmFtcykucmVkdWNlKChhY2N1bSwga2V5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhY2N1bSArPSBgJiR7IGtleSB9PSR7IHZhbHVlIH1gXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWNjdW1cbiAgICAgICAgfSwgXCJcIik7XG4gICAgICAgIGNvbnN0IGFwaUtleSA9ICgodGhpcy5hcGlLZXkpID8gYCZhcGlrZXk9JHsgdGhpcy5hcGlLZXkgfWA6IFwiXCIpO1xuICAgICAgICByZXR1cm4gYCR7IHRoaXMuYmFzZVVybCB9L2FwaT9tb2R1bGU9JHsgbW9kdWxlIH0keyBxdWVyeSB9JHsgYXBpS2V5IH1gO1xuICAgIH1cblxuICAgIGdldFBvc3RVcmwoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAkeyB0aGlzLmJhc2VVcmwgfS9hcGlgO1xuICAgIH1cblxuICAgIGdldFBvc3REYXRhKG1vZHVsZTogc3RyaW5nLCBwYXJhbXM6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHtcbiAgICAgICAgcGFyYW1zLm1vZHVsZSA9IG1vZHVsZTtcbiAgICAgICAgcGFyYW1zLmFwaWtleSA9IHRoaXMuYXBpS2V5O1xuICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH1cblxuICAgIGFzeW5jIGZldGNoKG1vZHVsZTogc3RyaW5nLCBwYXJhbXM6IFJlY29yZDxzdHJpbmcsIGFueT4sIHBvc3Q/OiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgdXJsID0gKHBvc3QgPyB0aGlzLmdldFBvc3RVcmwoKTogdGhpcy5nZXRVcmwobW9kdWxlLCBwYXJhbXMpKTtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IChwb3N0ID8gdGhpcy5nZXRQb3N0RGF0YShtb2R1bGUsIHBhcmFtcyk6IG51bGwpO1xuICAgICAgICBjb25zdCBwcm9jRnVuYyA9IChtb2R1bGUgPT09IFwicHJveHlcIikgPyBnZXRKc29uUmVzdWx0OiBnZXRSZXN1bHQ7XG5cbiAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwge1xuICAgICAgICAgICAgYWN0aW9uOiBcInJlcXVlc3RcIixcbiAgICAgICAgICAgIHJlcXVlc3Q6IHVybCxcbiAgICAgICAgICAgIHByb3ZpZGVyOiB0aGlzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb246IENvbm5lY3Rpb25JbmZvID0ge1xuICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICB0aHJvdHRsZVNsb3RJbnRlcnZhbDogMTAwMCxcbiAgICAgICAgICAgIHRocm90dGxlQ2FsbGJhY2s6IChhdHRlbXB0OiBudW1iZXIsIHVybDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNDb21tdW5pdHlSZXNvdXJjZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNob3dUaHJvdHRsZU1lc3NhZ2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgcGF5bG9hZFN0cjogc3RyaW5nID0gbnVsbDtcbiAgICAgICAgaWYgKHBheWxvYWQpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uaGVhZGVycyA9IHsgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIiB9O1xuICAgICAgICAgICAgcGF5bG9hZFN0ciA9IE9iamVjdC5rZXlzKHBheWxvYWQpLm1hcCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAkeyBrZXkgfT0keyBwYXlsb2FkW2tleV0gfWBcbiAgICAgICAgICAgIH0pLmpvaW4oXCImXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZmV0Y2hKc29uKGNvbm5lY3Rpb24sIHBheWxvYWRTdHIsIHByb2NGdW5jIHx8IGdldEpzb25SZXN1bHQpO1xuXG4gICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHtcbiAgICAgICAgICAgIGFjdGlvbjogXCJyZXNwb25zZVwiLFxuICAgICAgICAgICAgcmVxdWVzdDogdXJsLFxuICAgICAgICAgICAgcmVzcG9uc2U6IGRlZXBDb3B5KHJlc3VsdCksXG4gICAgICAgICAgICBwcm92aWRlcjogdGhpc1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGFzeW5jIGRldGVjdE5ldHdvcmsoKTogUHJvbWlzZTxOZXR3b3JrPiB7XG4gICAgICAgIHJldHVybiB0aGlzLm5ldHdvcms7XG4gICAgfVxuXG4gICAgYXN5bmMgcGVyZm9ybShtZXRob2Q6IHN0cmluZywgcGFyYW1zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuXG4gICAgICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICAgICAgICBjYXNlIFwiZ2V0QmxvY2tOdW1iZXJcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChcInByb3h5XCIsIHsgYWN0aW9uOiBcImV0aF9ibG9ja051bWJlclwiIH0pO1xuXG4gICAgICAgICAgICBjYXNlIFwiZ2V0R2FzUHJpY2VcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChcInByb3h5XCIsIHsgYWN0aW9uOiBcImV0aF9nYXNQcmljZVwiIH0pO1xuXG4gICAgICAgICAgICBjYXNlIFwiZ2V0QmFsYW5jZVwiOlxuICAgICAgICAgICAgICAgIC8vIFJldHVybnMgYmFzZS0xMCByZXN1bHRcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChcImFjY291bnRcIiwge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiYmFsYW5jZVwiLFxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiBwYXJhbXMuYWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgdGFnOiBwYXJhbXMuYmxvY2tUYWdcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY2FzZSBcImdldFRyYW5zYWN0aW9uQ291bnRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChcInByb3h5XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImV0aF9nZXRUcmFuc2FjdGlvbkNvdW50XCIsXG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IHBhcmFtcy5hZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICB0YWc6IHBhcmFtcy5ibG9ja1RhZ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjYXNlIFwiZ2V0Q29kZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZldGNoKFwicHJveHlcIiwge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiZXRoX2dldENvZGVcIixcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogcGFyYW1zLmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgIHRhZzogcGFyYW1zLmJsb2NrVGFnXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNhc2UgXCJnZXRTdG9yYWdlQXRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChcInByb3h5XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImV0aF9nZXRTdG9yYWdlQXRcIixcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogcGFyYW1zLmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwYXJhbXMucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgIHRhZzogcGFyYW1zLmJsb2NrVGFnXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNhc2UgXCJzZW5kVHJhbnNhY3Rpb25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChcInByb3h5XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImV0aF9zZW5kUmF3VHJhbnNhY3Rpb25cIixcbiAgICAgICAgICAgICAgICAgICAgaGV4OiBwYXJhbXMuc2lnbmVkVHJhbnNhY3Rpb25cbiAgICAgICAgICAgICAgICB9LCB0cnVlKS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrRXJyb3IoXCJzZW5kVHJhbnNhY3Rpb25cIiwgZXJyb3IsIHBhcmFtcy5zaWduZWRUcmFuc2FjdGlvbik7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNhc2UgXCJnZXRCbG9ja1wiOlxuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuYmxvY2tUYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goXCJwcm94eVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiZXRoX2dldEJsb2NrQnlOdW1iZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZzogcGFyYW1zLmJsb2NrVGFnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9vbGVhbjogKHBhcmFtcy5pbmNsdWRlVHJhbnNhY3Rpb25zID8gXCJ0cnVlXCI6IFwiZmFsc2VcIilcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImdldEJsb2NrIGJ5IGJsb2NrSGFzaCBub3QgaW1wbGVtZW50ZWRcIik7XG5cbiAgICAgICAgICAgIGNhc2UgXCJnZXRUcmFuc2FjdGlvblwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZldGNoKFwicHJveHlcIiwge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiZXRoX2dldFRyYW5zYWN0aW9uQnlIYXNoXCIsXG4gICAgICAgICAgICAgICAgICAgIHR4aGFzaDogcGFyYW1zLnRyYW5zYWN0aW9uSGFzaFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjYXNlIFwiZ2V0VHJhbnNhY3Rpb25SZWNlaXB0XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2goXCJwcm94eVwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJldGhfZ2V0VHJhbnNhY3Rpb25SZWNlaXB0XCIsXG4gICAgICAgICAgICAgICAgICAgIHR4aGFzaDogcGFyYW1zLnRyYW5zYWN0aW9uSGFzaFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjYXNlIFwiY2FsbFwiOiB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5ibG9ja1RhZyAhPT0gXCJsYXRlc3RcIikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFdGhlcnNjYW5Qcm92aWRlciBkb2VzIG5vdCBzdXBwb3J0IGJsb2NrVGFnIGZvciBjYWxsXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHBvc3REYXRhID0gZ2V0VHJhbnNhY3Rpb25Qb3N0RGF0YShwYXJhbXMudHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgICAgIHBvc3REYXRhLm1vZHVsZSA9IFwicHJveHlcIjtcbiAgICAgICAgICAgICAgICBwb3N0RGF0YS5hY3Rpb24gPSBcImV0aF9jYWxsXCI7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5mZXRjaChcInByb3h5XCIsIHBvc3REYXRhLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hlY2tFcnJvcihcImNhbGxcIiwgZXJyb3IsIHBhcmFtcy50cmFuc2FjdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYXNlIFwiZXN0aW1hdGVHYXNcIjoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc3REYXRhID0gZ2V0VHJhbnNhY3Rpb25Qb3N0RGF0YShwYXJhbXMudHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgICAgIHBvc3REYXRhLm1vZHVsZSA9IFwicHJveHlcIjtcbiAgICAgICAgICAgICAgICBwb3N0RGF0YS5hY3Rpb24gPSBcImV0aF9lc3RpbWF0ZUdhc1wiO1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZmV0Y2goXCJwcm94eVwiLCBwb3N0RGF0YSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrRXJyb3IoXCJlc3RpbWF0ZUdhc1wiLCBlcnJvciwgcGFyYW1zLnRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhc2UgXCJnZXRMb2dzXCI6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBhcmdzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0geyBhY3Rpb246IFwiZ2V0TG9nc1wiIH1cblxuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuZmlsdGVyLmZyb21CbG9jaykge1xuICAgICAgICAgICAgICAgICAgICBhcmdzLmZyb21CbG9jayA9IGNoZWNrTG9nVGFnKHBhcmFtcy5maWx0ZXIuZnJvbUJsb2NrKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmZpbHRlci50b0Jsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MudG9CbG9jayA9IGNoZWNrTG9nVGFnKHBhcmFtcy5maWx0ZXIudG9CbG9jayk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5maWx0ZXIuYWRkcmVzcykge1xuICAgICAgICAgICAgICAgICAgICBhcmdzLmFkZHJlc3MgPSBwYXJhbXMuZmlsdGVyLmFkZHJlc3M7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQFRPRE86IFdlIGNhbiBoYW5kbGUgc2xpZ2h0bHkgbW9yZSBjb21wbGljYXRlZCBsb2dzIHVzaW5nIHRoZSBsb2dzIEFQSVxuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuZmlsdGVyLnRvcGljcyAmJiBwYXJhbXMuZmlsdGVyLnRvcGljcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuZmlsdGVyLnRvcGljcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcInVuc3VwcG9ydGVkIHRvcGljIGNvdW50XCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7IHRvcGljczogcGFyYW1zLmZpbHRlci50b3BpY3MgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmZpbHRlci50b3BpY3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b3BpYzAgPSBwYXJhbXMuZmlsdGVyLnRvcGljc1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YodG9waWMwKSAhPT0gXCJzdHJpbmdcIiB8fCB0b3BpYzAubGVuZ3RoICE9PSA2Nikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKFwidW5zdXBwb3J0ZWQgdG9waWMgZm9ybWF0XCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7IHRvcGljMDogdG9waWMwIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJncy50b3BpYzAgPSB0b3BpYzA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBsb2dzOiBBcnJheTxhbnk+ID0gYXdhaXQgdGhpcy5mZXRjaChcImxvZ3NcIiwgYXJncyk7XG5cbiAgICAgICAgICAgICAgICAvLyBDYWNoZSB0eEhhc2ggPT4gYmxvY2tIYXNoXG4gICAgICAgICAgICAgICAgbGV0IGJsb2NrczogeyBbdGFnOiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuXG4gICAgICAgICAgICAgICAgLy8gQWRkIGFueSBtaXNzaW5nIGJsb2NrSGFzaCB0byB0aGUgbG9nc1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2cgPSBsb2dzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAobG9nLmJsb2NrSGFzaCAhPSBudWxsKSB7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChibG9ja3NbbG9nLmJsb2NrTnVtYmVyXSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBibG9jayA9IGF3YWl0IHRoaXMuZ2V0QmxvY2sobG9nLmJsb2NrTnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChibG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2Nrc1tsb2cuYmxvY2tOdW1iZXJdID0gYmxvY2suaGFzaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsb2cuYmxvY2tIYXNoID0gYmxvY2tzW2xvZy5ibG9ja051bWJlcl07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvZ3M7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhc2UgXCJnZXRFdGhlclByaWNlXCI6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubmV0d29yay5uYW1lICE9PSBcImhvbWVzdGVhZFwiKSB7IHJldHVybiAwLjA7IH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCgoYXdhaXQgdGhpcy5mZXRjaChcInN0YXRzXCIsIHsgYWN0aW9uOiBcImV0aHByaWNlXCIgfSkpLmV0aHVzZCk7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN1cGVyLnBlcmZvcm0obWV0aG9kLCBwYXJhbXMpO1xuICAgIH1cblxuICAgIC8vIE5vdGU6IFRoZSBgcGFnZWAgcGFnZSBwYXJhbWV0ZXIgb25seSBhbGxvd3MgcGFnaW5hdGlvbiB3aXRoaW4gdGhlXG4gICAgLy8gICAgICAgMTAsMDAwIHdpbmRvdyBhdmFpbGFibGUgd2l0aG91dCBhIHBhZ2UgYW5kIG9mZnNldCBwYXJhbWV0ZXJcbiAgICAvLyAgICAgICBFcnJvcjogUmVzdWx0IHdpbmRvdyBpcyB0b28gbGFyZ2UsIFBhZ2VObyB4IE9mZnNldCBzaXplIG11c3RcbiAgICAvLyAgICAgICAgICAgICAgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIDEwMDAwXG4gICAgYXN5bmMgZ2V0SGlzdG9yeShhZGRyZXNzT3JOYW1lOiBzdHJpbmcgfCBQcm9taXNlPHN0cmluZz4sIHN0YXJ0QmxvY2s/OiBCbG9ja1RhZywgZW5kQmxvY2s/OiBCbG9ja1RhZyk6IFByb21pc2U8QXJyYXk8VHJhbnNhY3Rpb25SZXNwb25zZT4+IHtcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgYWN0aW9uOiBcInR4bGlzdFwiLFxuICAgICAgICAgICAgYWRkcmVzczogKGF3YWl0IHRoaXMucmVzb2x2ZU5hbWUoYWRkcmVzc09yTmFtZSkpLFxuICAgICAgICAgICAgc3RhcnRibG9jazogKChzdGFydEJsb2NrID09IG51bGwpID8gMDogc3RhcnRCbG9jayksXG4gICAgICAgICAgICBlbmRibG9jazogKChlbmRCbG9jayA9PSBudWxsKSA/IDk5OTk5OTk5OiBlbmRCbG9jayksXG4gICAgICAgICAgICBzb3J0OiBcImFzY1wiXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5mZXRjaChcImFjY291bnRcIiwgcGFyYW1zKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0Lm1hcCgodHg6IGFueSkgPT4ge1xuICAgICAgICAgICAgW1wiY29udHJhY3RBZGRyZXNzXCIsIFwidG9cIl0uZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAodHhba2V5XSA9PSBcIlwiKSB7IGRlbGV0ZSB0eFtrZXldOyB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh0eC5jcmVhdGVzID09IG51bGwgJiYgdHguY29udHJhY3RBZGRyZXNzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0eC5jcmVhdGVzID0gdHguY29udHJhY3RBZGRyZXNzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuZm9ybWF0dGVyLnRyYW5zYWN0aW9uUmVzcG9uc2UodHgpO1xuICAgICAgICAgICAgaWYgKHR4LnRpbWVTdGFtcCkgeyBpdGVtLnRpbWVzdGFtcCA9IHBhcnNlSW50KHR4LnRpbWVTdGFtcCk7IH1cbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpc0NvbW11bml0eVJlc291cmNlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKHRoaXMuYXBpS2V5ID09IG51bGwpO1xuICAgIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBCbG9jaywgQmxvY2tXaXRoVHJhbnNhY3Rpb25zLCBQcm92aWRlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hYnN0cmFjdC1wcm92aWRlclwiO1xuaW1wb3J0IHsgQmlnTnVtYmVyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2JpZ251bWJlclwiO1xuaW1wb3J0IHsgaXNIZXhTdHJpbmcgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IE5ldHdvcmsgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbmV0d29ya3NcIjtcbmltcG9ydCB7IGRlZXBDb3B5LCBkZWZpbmVSZWFkT25seSwgc2hhbGxvd0NvcHkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiO1xuaW1wb3J0IHsgc2h1ZmZsZWQgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcmFuZG9tXCI7XG5pbXBvcnQgeyBwb2xsIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3dlYlwiO1xuXG5pbXBvcnQgeyBCYXNlUHJvdmlkZXIgfSBmcm9tIFwiLi9iYXNlLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBpc0NvbW11bml0eVJlc291cmNlIH0gZnJvbSBcIi4vZm9ybWF0dGVyXCI7XG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcblxuZnVuY3Rpb24gbm93KCkgeyByZXR1cm4gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTsgfVxuXG4vLyBSZXR1cm5zIHRvIG5ldHdvcmsgYXMgbG9uZyBhcyBhbGwgYWdyZWUsIG9yIG51bGwgaWYgYW55IGlzIG51bGwuXG4vLyBUaHJvd3MgYW4gZXJyb3IgaWYgYW55IHR3byBuZXR3b3JrcyBkbyBub3QgbWF0Y2guXG5mdW5jdGlvbiBjaGVja05ldHdvcmtzKG5ldHdvcmtzOiBBcnJheTxOZXR3b3JrPik6IE5ldHdvcmsge1xuICAgIGxldCByZXN1bHQgPSBudWxsO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXR3b3Jrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBuZXR3b3JrID0gbmV0d29ya3NbaV07XG5cbiAgICAgICAgLy8gTnVsbCEgV2UgZG8gbm90IGtub3cgb3VyIG5ldHdvcms7IGJhaWwuXG4gICAgICAgIGlmIChuZXR3b3JrID09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cblxuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIG5ldHdvcmsgbWF0Y2hlcyB0aGUgcHJldmlvdXMgbmV0d29ya3NcbiAgICAgICAgICAgIGlmICghKHJlc3VsdC5uYW1lID09PSBuZXR3b3JrLm5hbWUgJiYgcmVzdWx0LmNoYWluSWQgPT09IG5ldHdvcmsuY2hhaW5JZCAmJlxuICAgICAgICAgICAgICAgICgocmVzdWx0LmVuc0FkZHJlc3MgPT09IG5ldHdvcmsuZW5zQWRkcmVzcykgfHwgKHJlc3VsdC5lbnNBZGRyZXNzID09IG51bGwgJiYgbmV0d29yay5lbnNBZGRyZXNzID09IG51bGwpKSkpIHtcblxuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJwcm92aWRlciBtaXNtYXRjaFwiLCBcIm5ldHdvcmtzXCIsIG5ldHdvcmtzKTtcbiAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV0d29yaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1lZGlhbih2YWx1ZXM6IEFycmF5PG51bWJlcj4sIG1heERlbHRhPzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICB2YWx1ZXMgPSB2YWx1ZXMuc2xpY2UoKS5zb3J0KCk7XG4gICAgY29uc3QgbWlkZGxlID0gTWF0aC5mbG9vcih2YWx1ZXMubGVuZ3RoIC8gMik7XG5cbiAgICAvLyBPZGQgbGVuZ3RoOyB0YWtlIHRoZSBtaWRkbGVcbiAgICBpZiAodmFsdWVzLmxlbmd0aCAlIDIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlc1ttaWRkbGVdO1xuICAgIH1cblxuICAgIC8vIEV2ZW4gbGVuZ3RoOyB0YWtlIHRoZSBhdmVyYWdlIG9mIHRoZSB0d28gbWlkZGxlXG4gICAgY29uc3QgYSA9IHZhbHVlc1ttaWRkbGUgLSAxXSwgYiA9IHZhbHVlc1ttaWRkbGVdO1xuXG4gICAgaWYgKG1heERlbHRhICE9IG51bGwgJiYgTWF0aC5hYnMoYSAtIGIpID4gbWF4RGVsdGEpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIChhICsgYikgLyAyO1xufVxuXG5mdW5jdGlvbiBzZXJpYWxpemUodmFsdWU6IGFueSk6IHN0cmluZyB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBcIm51bGxcIjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZih2YWx1ZSkgPT09IFwibnVtYmVyXCIgfHwgdHlwZW9mKHZhbHVlKSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZih2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0gZWxzZSBpZiAoQmlnTnVtYmVyLmlzQmlnTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZS5tYXAoKGkpID0+IHNlcmlhbGl6ZShpKSkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mKHZhbHVlKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICAgICAgICBrZXlzLnNvcnQoKTtcbiAgICAgICAgcmV0dXJuIFwie1wiICsga2V5cy5tYXAoKGtleSkgPT4ge1xuICAgICAgICAgICAgbGV0IHYgPSB2YWx1ZVtrZXldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZih2KSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgdiA9IFwiW2Z1bmN0aW9uXVwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2ID0gc2VyaWFsaXplKHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGtleSkgKyBcIjpcIiArIHY7XG4gICAgICAgIH0pLmpvaW4oXCIsXCIpICsgXCJ9XCI7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB2YWx1ZSB0eXBlOiBcIiArIHR5cGVvZih2YWx1ZSkpO1xufVxuXG4vLyBOZXh0IHJlcXVlc3QgSUQgdG8gdXNlIGZvciBlbWl0dGluZyBkZWJ1ZyBpbmZvXG5sZXQgbmV4dFJpZCA9IDE7XG5cblxuZXhwb3J0IGludGVyZmFjZSBGYWxsYmFja1Byb3ZpZGVyQ29uZmlnIHtcbiAgICAvLyBUaGUgUHJvdmlkZXJcbiAgICBwcm92aWRlcjogUHJvdmlkZXI7XG5cbiAgICAvLyBUaGUgcHJpb3JpdHkgdG8gZmF2b3VyIHRoaXMgUHJvdmlkZXI7IGxvd2VyIHZhbHVlcyBhcmUgdXNlZCBmaXJzdCAoaGlnaGVyIHByaW9yaXR5KVxuICAgIHByaW9yaXR5PzogbnVtYmVyO1xuXG4gICAgLy8gVGltZW91dCBiZWZvcmUgYWxzbyB0cmlnZ2VyaW5nIHRoZSBuZXh0IHByb3ZpZGVyOyB0aGlzIGRvZXMgbm90IHN0b3BcbiAgICAvLyB0aGlzIHByb3ZpZGVyIGFuZCBpZiBpdHMgcmVzdWx0IGNvbWVzIGJhY2sgYmVmb3JlIGEgcXVvcnVtIGlzIHJlYWNoZWRcbiAgICAvLyBpdCB3aWxsIGJlIGluY29ycG9yYXRlZCBpbnRvIHRoZSB2b3RlXG4gICAgLy8gLSBsb3dlciB2YWx1ZXMgd2lsbCBjYXVzZSBtb3JlIG5ldHdvcmsgdHJhZmZpYyBidXQgbWF5IHJlc3VsdCBpbiBhXG4gICAgLy8gICBmYXN0ZXIgcmVzdWx0LlxuICAgIHN0YWxsVGltZW91dD86IG51bWJlcjtcblxuICAgIC8vIEhvdyBtdWNoIHRoaXMgcHJvdmlkZXIgY29udHJpYnV0ZXMgdG8gdGhlIHF1b3J1bTsgc29tZXRpbWVzIGEgc3BlY2lmaWNcbiAgICAvLyBwcm92aWRlciBtYXkgYmUgbW9yZSByZWxpYWJsZSBvciB0cnVzdHdvcnRoeSB0aGFuIG90aGVycywgYnV0IHVzdWFsbHlcbiAgICAvLyB0aGlzIHNob3VsZCBiZSBsZWZ0IGFzIHRoZSBkZWZhdWx0XG4gICAgd2VpZ2h0PzogbnVtYmVyO1xufTtcblxuLy8gQSBTdGFsbGVyIGlzIHVzZWQgdG8gcHJvdmlkZSBhIGRlbGF5IHRvIGdpdmUgYSBQcm92aWRlciBhIGNoYW5jZSB0byByZXNwb25zZVxuLy8gYmVmb3JlIGFza2luZyB0aGUgbmV4dCBQcm92aWRlciB0byB0cnkuXG50eXBlIFN0YWxsZXIgPSB7XG4gICAgd2FpdDogKGZ1bmM6ICgpID0+IHZvaWQpID0+IFByb21pc2U8dm9pZD5cbiAgICBnZXRQcm9taXNlOiAoKSA9PiBQcm9taXNlPHZvaWQ+LFxuICAgIGNhbmNlbDogKCkgPT4gdm9pZFxufTtcblxuZnVuY3Rpb24gc3RhbGwoZHVyYXRpb246IG51bWJlcik6IFN0YWxsZXIge1xuICAgIGxldCBjYW5jZWw6ICgpID0+IHZvaWQgPSBudWxsO1xuXG4gICAgbGV0IHRpbWVyOiBOb2RlSlMuVGltZXIgPSBudWxsO1xuICAgIGxldCBwcm9taXNlID0gPFByb21pc2U8dm9pZD4+KG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRpbWVyKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGNhbmNlbCwgZHVyYXRpb24pO1xuICAgIH0pKTtcblxuICAgIGNvbnN0IHdhaXQgPSAoZnVuYzogKCkgPT4gdm9pZCkgPT4ge1xuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGZ1bmMpO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQcm9taXNlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBjYW5jZWwsIGdldFByb21pc2UsIHdhaXQgfTtcbn1cblxuY29uc3QgRm9yd2FyZEVycm9ycyA9IFtcbiAgICBMb2dnZXIuZXJyb3JzLkNBTExfRVhDRVBUSU9OLFxuICAgIExvZ2dlci5lcnJvcnMuSU5TVUZGSUNJRU5UX0ZVTkRTLFxuICAgIExvZ2dlci5lcnJvcnMuTk9OQ0VfRVhQSVJFRCxcbiAgICBMb2dnZXIuZXJyb3JzLlJFUExBQ0VNRU5UX1VOREVSUFJJQ0VELFxuICAgIExvZ2dlci5lcnJvcnMuVU5QUkVESUNUQUJMRV9HQVNfTElNSVRcbl07XG5cbmNvbnN0IEZvcndhcmRQcm9wZXJ0aWVzID0gW1xuICAgIFwiYWRkcmVzc1wiLFxuICAgIFwiYXJnc1wiLFxuICAgIFwiZXJyb3JBcmdzXCIsXG4gICAgXCJlcnJvclNpZ25hdHVyZVwiLFxuICAgIFwibWV0aG9kXCIsXG4gICAgXCJ0cmFuc2FjdGlvblwiLFxuXTtcblxuXG4vLyBAVE9ETzogTWFrZSB0aGlzIGFuIG9iamVjdCB3aXRoIHN0YWxsZXIgYW5kIGNhbmNlbCBidWlsdC1pblxuaW50ZXJmYWNlIFJ1bm5pbmdDb25maWcgZXh0ZW5kcyBGYWxsYmFja1Byb3ZpZGVyQ29uZmlnIHtcbiAgICBzdGFydD86IG51bWJlcjtcbiAgICBkb25lPzogYm9vbGVhbjtcbiAgICBjYW5jZWxsZWQ/OiBib29sZWFuO1xuICAgIHJ1bm5lcj86IFByb21pc2U8YW55PjtcbiAgICBzdGFsbGVyPzogU3RhbGxlcjtcbiAgICByZXN1bHQ/OiBhbnk7XG4gICAgZXJyb3I/OiBFcnJvcjtcbn07XG5cbmZ1bmN0aW9uIGV4cG9zZURlYnVnQ29uZmlnKGNvbmZpZzogUnVubmluZ0NvbmZpZywgbm93PzogbnVtYmVyKTogYW55IHtcbiAgICBjb25zdCByZXN1bHQ6IGFueSA9IHtcbiAgICAgICAgd2VpZ2h0OiBjb25maWcud2VpZ2h0XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzdWx0LCBcInByb3ZpZGVyXCIsIHsgZ2V0OiAoKSA9PiBjb25maWcucHJvdmlkZXIgfSk7XG4gICAgaWYgKGNvbmZpZy5zdGFydCkgeyByZXN1bHQuc3RhcnQgPSBjb25maWcuc3RhcnQ7IH1cbiAgICBpZiAobm93KSB7IHJlc3VsdC5kdXJhdGlvbiA9IChub3cgLSBjb25maWcuc3RhcnQpOyB9XG4gICAgaWYgKGNvbmZpZy5kb25lKSB7XG4gICAgICAgIGlmIChjb25maWcuZXJyb3IpIHtcbiAgICAgICAgICAgIHJlc3VsdC5lcnJvciA9IGNvbmZpZy5lcnJvcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5yZXN1bHQgPSBjb25maWcucmVzdWx0IHx8IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplZFRhbGx5KG5vcm1hbGl6ZTogKHZhbHVlOiBhbnkpID0+IHN0cmluZywgcXVvcnVtOiBudW1iZXIpOiAoY29uZmlnczogQXJyYXk8UnVubmluZ0NvbmZpZz4pID0+IGFueSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGNvbmZpZ3M6IEFycmF5PFJ1bm5pbmdDb25maWc+KTogYW55IHtcblxuICAgICAgICAvLyBDb3VudCB0aGUgdm90ZXMgZm9yIGVhY2ggcmVzdWx0XG4gICAgICAgIGNvbnN0IHRhbGx5OiB7IFsga2V5OiBzdHJpbmddOiB7IGNvdW50OiBudW1iZXIsIHJlc3VsdDogYW55IH0gfSA9IHsgfTtcbiAgICAgICAgY29uZmlncy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG5vcm1hbGl6ZShjLnJlc3VsdCk7XG4gICAgICAgICAgICBpZiAoIXRhbGx5W3ZhbHVlXSkgeyB0YWxseVt2YWx1ZV0gPSB7IGNvdW50OiAwLCByZXN1bHQ6IGMucmVzdWx0IH07IH1cbiAgICAgICAgICAgIHRhbGx5W3ZhbHVlXS5jb3VudCsrO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBDaGVjayBmb3IgYSBxdW9ydW0gb24gYW55IGdpdmVuIHJlc3VsdFxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGFsbHkpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrID0gdGFsbHlba2V5c1tpXV07XG4gICAgICAgICAgICBpZiAoY2hlY2suY291bnQgPj0gcXVvcnVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrLnJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE5vIHF1cm91bVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFByb2Nlc3NGdW5jKHByb3ZpZGVyOiBGYWxsYmFja1Byb3ZpZGVyLCBtZXRob2Q6IHN0cmluZywgcGFyYW1zOiB7IFsga2V5OiBzdHJpbmcgXTogYW55IH0pOiAoY29uZmlnczogQXJyYXk8UnVubmluZ0NvbmZpZz4pID0+IGFueSB7XG5cbiAgICBsZXQgbm9ybWFsaXplID0gc2VyaWFsaXplO1xuXG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgICAgY2FzZSBcImdldEJsb2NrTnVtYmVyXCI6XG4gICAgICAgICAgICAvLyBSZXR1cm4gdGhlIG1lZGlhbiB2YWx1ZSwgdW5sZXNzIHRoZXJlIGlzIChtZWRpYW4gKyAxKSBpcyBhbHNvXG4gICAgICAgICAgICAvLyBwcmVzZW50LCBpbiB3aGljaCBjYXNlIHRoYXQgaXMgcHJvYmFibHkgdHJ1ZSBhbmQgdGhlIG1lZGlhblxuICAgICAgICAgICAgLy8gaXMgZ29pbmcgdG8gYmUgc3RhbGUgc29vbi4gSW4gdGhlIGV2ZW50IG9mIGEgbWFsaWNpb3VzIG5vZGUsXG4gICAgICAgICAgICAvLyB0aGUgbGllIHdpbGwgYmUgdHJ1ZSBzb29uIGVub3VnaC5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihjb25maWdzOiBBcnJheTxSdW5uaW5nQ29uZmlnPik6IG51bWJlciB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gY29uZmlncy5tYXAoKGMpID0+IGMucmVzdWx0KTtcblxuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgbWVkaWFuIGJsb2NrIG51bWJlclxuICAgICAgICAgICAgICAgIGxldCBibG9ja051bWJlciA9IG1lZGlhbihjb25maWdzLm1hcCgoYykgPT4gYy5yZXN1bHQpLCAyKTtcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2tOdW1iZXIgPT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9XG5cbiAgICAgICAgICAgICAgICBibG9ja051bWJlciA9IE1hdGguY2VpbChibG9ja051bWJlcik7XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbmV4dCBibG9jayBoZWlnaHQgaXMgcHJlc2VudCwgaXRzIHByb2xseSBzYWZlIHRvIHVzZVxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXMuaW5kZXhPZihibG9ja051bWJlciArIDEpID49IDApIHsgYmxvY2tOdW1iZXIrKzsgfVxuXG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgZXZlciByb2xsIGJhY2sgdGhlIGJsb2NrTnVtYmVyXG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrTnVtYmVyID49IHByb3ZpZGVyLl9oaWdoZXN0QmxvY2tOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXIuX2hpZ2hlc3RCbG9ja051bWJlciA9IGJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBwcm92aWRlci5faGlnaGVzdEJsb2NrTnVtYmVyO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICBjYXNlIFwiZ2V0R2FzUHJpY2VcIjpcbiAgICAgICAgICAgIC8vIFJldHVybiB0aGUgbWlkZGxlIChyb3VuZCBpbmRleCB1cCkgdmFsdWUsIHNpbWlsYXIgdG8gbWVkaWFuXG4gICAgICAgICAgICAvLyBidXQgZG8gbm90IGF2ZXJhZ2UgZXZlbiBlbnRyaWVzIGFuZCBjaG9vc2UgdGhlIGhpZ2hlci5cbiAgICAgICAgICAgIC8vIE1hbGljaW91cyBhY3RvcnMgbXVzdCBjb21wcm9taXNlIDUwJSBvZiB0aGUgbm9kZXMgdG8gbGllLlxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbmZpZ3M6IEFycmF5PFJ1bm5pbmdDb25maWc+KTogQmlnTnVtYmVyIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSBjb25maWdzLm1hcCgoYykgPT4gYy5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIHZhbHVlcy5zb3J0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlc1tNYXRoLmZsb29yKHZhbHVlcy5sZW5ndGggLyAyKV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSBcImdldEV0aGVyUHJpY2VcIjpcbiAgICAgICAgICAgIC8vIFJldHVybnMgdGhlIG1lZGlhbiBwcmljZS4gTWFsaWNpb3VzIGFjdG9ycyBtdXN0IGNvbXByb21pc2UgYXRcbiAgICAgICAgICAgIC8vIGxlYXN0IDUwJSBvZiB0aGUgbm9kZXMgdG8gbGllIChpbiBhIG1lYW5pbmdmdWwgd2F5KS5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihjb25maWdzOiBBcnJheTxSdW5uaW5nQ29uZmlnPik6IG51bWJlciB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lZGlhbihjb25maWdzLm1hcCgoYykgPT4gYy5yZXN1bHQpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAvLyBObyBhZGRpdGlvbmFsIG5vcm1hbGl6aW5nIHJlcXVpcmVkOyBzZXJpYWxpemUgaXMgZW5vdWdoXG4gICAgICAgIGNhc2UgXCJnZXRCYWxhbmNlXCI6XG4gICAgICAgIGNhc2UgXCJnZXRUcmFuc2FjdGlvbkNvdW50XCI6XG4gICAgICAgIGNhc2UgXCJnZXRDb2RlXCI6XG4gICAgICAgIGNhc2UgXCJnZXRTdG9yYWdlQXRcIjpcbiAgICAgICAgY2FzZSBcImNhbGxcIjpcbiAgICAgICAgY2FzZSBcImVzdGltYXRlR2FzXCI6XG4gICAgICAgIGNhc2UgXCJnZXRMb2dzXCI6XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAvLyBXZSBkcm9wIHRoZSBjb25maXJtYXRpb25zIGZyb20gdHJhbnNhY3Rpb25zIGFzIGl0IGlzIGFwcHJveGltYXRlXG4gICAgICAgIGNhc2UgXCJnZXRUcmFuc2FjdGlvblwiOlxuICAgICAgICBjYXNlIFwiZ2V0VHJhbnNhY3Rpb25SZWNlaXB0XCI6XG4gICAgICAgICAgICBub3JtYWxpemUgPSBmdW5jdGlvbih0eDogYW55KTogc3RyaW5nIHtcbiAgICAgICAgICAgICAgICBpZiAodHggPT0gbnVsbCkgeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgICAgICAgICAgICAgdHggPSBzaGFsbG93Q29weSh0eCk7XG4gICAgICAgICAgICAgICAgdHguY29uZmlybWF0aW9ucyA9IC0xO1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemUodHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgLy8gV2UgZHJvcCB0aGUgY29uZmlybWF0aW9ucyBmcm9tIHRyYW5zYWN0aW9ucyBhcyBpdCBpcyBhcHByb3hpbWF0ZVxuICAgICAgICBjYXNlIFwiZ2V0QmxvY2tcIjpcbiAgICAgICAgICAgIC8vIFdlIGRyb3AgdGhlIGNvbmZpcm1hdGlvbnMgZnJvbSB0cmFuc2FjdGlvbnMgYXMgaXQgaXMgYXBwcm94aW1hdGVcbiAgICAgICAgICAgIGlmIChwYXJhbXMuaW5jbHVkZVRyYW5zYWN0aW9ucykge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZSA9IGZ1bmN0aW9uKGJsb2NrOiBCbG9ja1dpdGhUcmFuc2FjdGlvbnMpOiBzdHJpbmcge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmxvY2sgPT0gbnVsbCkgeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrID0gc2hhbGxvd0NvcHkoYmxvY2spO1xuICAgICAgICAgICAgICAgICAgICBibG9jay50cmFuc2FjdGlvbnMgPSBibG9jay50cmFuc2FjdGlvbnMubWFwKCh0eCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHggPSBzaGFsbG93Q29weSh0eCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eC5jb25maXJtYXRpb25zID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHg7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplKGJsb2NrKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemUgPSBmdW5jdGlvbihibG9jazogQmxvY2spOiBzdHJpbmcge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmxvY2sgPT0gbnVsbCkgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplKGJsb2NrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBtZXRob2Q6IFwiICsgbWV0aG9kKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gdGhlIHJlc3VsdCBpZiBhbmQgb25seSBpZiB0aGUgZXhwZWN0ZWQgcXVvcnVtIGlzXG4gICAgLy8gc2F0aXNmaWVkIGFuZCBhZ3JlZWQgdXBvbiBmb3IgdGhlIGZpbmFsIHJlc3VsdC5cbiAgICByZXR1cm4gbm9ybWFsaXplZFRhbGx5KG5vcm1hbGl6ZSwgcHJvdmlkZXIucXVvcnVtKTtcblxufVxuXG4vLyBJZiB3ZSBhcmUgZG9pbmcgYSBibG9ja1RhZyBxdWVyeSwgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhlIGJhY2tlbmQgaXNcbi8vIGNhdWdodCB1cCB0byB0aGUgRmFsbGJhY2tQcm92aWRlciwgYmVmb3JlIHNlbmRpbmcgYSByZXF1ZXN0IHRvIGl0LlxuYXN5bmMgZnVuY3Rpb24gd2FpdEZvclN5bmMoY29uZmlnOiBSdW5uaW5nQ29uZmlnLCBibG9ja051bWJlcjogbnVtYmVyKTogUHJvbWlzZTxCYXNlUHJvdmlkZXI+IHtcbiAgICBjb25zdCBwcm92aWRlciA9IDxCYXNlUHJvdmlkZXI+KGNvbmZpZy5wcm92aWRlcik7XG5cbiAgICBpZiAoKHByb3ZpZGVyLmJsb2NrTnVtYmVyICE9IG51bGwgJiYgcHJvdmlkZXIuYmxvY2tOdW1iZXIgPj0gYmxvY2tOdW1iZXIpIHx8IGJsb2NrTnVtYmVyID09PSAtMSkge1xuICAgICAgICByZXR1cm4gcHJvdmlkZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvbGwoKCkgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIC8vIFdlIGFyZSBzeW5jZWRcbiAgICAgICAgICAgICAgICBpZiAocHJvdmlkZXIuYmxvY2tOdW1iZXIgPj0gYmxvY2tOdW1iZXIpIHsgcmV0dXJuIHJlc29sdmUocHJvdmlkZXIpOyB9XG5cbiAgICAgICAgICAgICAgICAvLyBXZSdyZSBkb25lOyBqdXN0IHF1aXRcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmNhbmNlbGxlZCkgeyByZXR1cm4gcmVzb2x2ZShudWxsKTsgfVxuXG4gICAgICAgICAgICAgICAgLy8gVHJ5IGFnYWluLCBuZXh0IGJsb2NrXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICB9KTtcbiAgICB9LCB7IG9uY2VQb2xsOiBwcm92aWRlciB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0UnVubmVyKGNvbmZpZzogUnVubmluZ0NvbmZpZywgY3VycmVudEJsb2NrTnVtYmVyOiBudW1iZXIsIG1ldGhvZDogc3RyaW5nLCBwYXJhbXM6IHsgWyBrZXk6IHN0cmluZ106IGFueSB9KTogUHJvbWlzZTxhbnk+IHtcbiAgICBsZXQgcHJvdmlkZXIgPSBjb25maWcucHJvdmlkZXI7XG5cbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgICBjYXNlIFwiZ2V0QmxvY2tOdW1iZXJcIjpcbiAgICAgICAgY2FzZSBcImdldEdhc1ByaWNlXCI6XG4gICAgICAgICAgICByZXR1cm4gcHJvdmlkZXJbbWV0aG9kXSgpO1xuICAgICAgICBjYXNlIFwiZ2V0RXRoZXJQcmljZVwiOlxuICAgICAgICAgICAgaWYgKCg8YW55PnByb3ZpZGVyKS5nZXRFdGhlclByaWNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICg8YW55PnByb3ZpZGVyKS5nZXRFdGhlclByaWNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImdldEJhbGFuY2VcIjpcbiAgICAgICAgY2FzZSBcImdldFRyYW5zYWN0aW9uQ291bnRcIjpcbiAgICAgICAgY2FzZSBcImdldENvZGVcIjpcbiAgICAgICAgICAgIGlmIChwYXJhbXMuYmxvY2tUYWcgJiYgaXNIZXhTdHJpbmcocGFyYW1zLmJsb2NrVGFnKSkge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyID0gYXdhaXQgd2FpdEZvclN5bmMoY29uZmlnLCBjdXJyZW50QmxvY2tOdW1iZXIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJvdmlkZXJbbWV0aG9kXShwYXJhbXMuYWRkcmVzcywgcGFyYW1zLmJsb2NrVGFnIHx8IFwibGF0ZXN0XCIpO1xuICAgICAgICBjYXNlIFwiZ2V0U3RvcmFnZUF0XCI6XG4gICAgICAgICAgICBpZiAocGFyYW1zLmJsb2NrVGFnICYmIGlzSGV4U3RyaW5nKHBhcmFtcy5ibG9ja1RhZykpIHtcbiAgICAgICAgICAgICAgICBwcm92aWRlciA9IGF3YWl0IHdhaXRGb3JTeW5jKGNvbmZpZywgY3VycmVudEJsb2NrTnVtYmVyKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVyLmdldFN0b3JhZ2VBdChwYXJhbXMuYWRkcmVzcywgcGFyYW1zLnBvc2l0aW9uLCBwYXJhbXMuYmxvY2tUYWcgfHwgXCJsYXRlc3RcIik7XG4gICAgICAgIGNhc2UgXCJnZXRCbG9ja1wiOlxuICAgICAgICAgICAgaWYgKHBhcmFtcy5ibG9ja1RhZyAmJiBpc0hleFN0cmluZyhwYXJhbXMuYmxvY2tUYWcpKSB7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXIgPSBhd2FpdCB3YWl0Rm9yU3luYyhjb25maWcsIGN1cnJlbnRCbG9ja051bWJlcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcm92aWRlclsocGFyYW1zLmluY2x1ZGVUcmFuc2FjdGlvbnMgPyBcImdldEJsb2NrV2l0aFRyYW5zYWN0aW9uc1wiOiBcImdldEJsb2NrXCIpXShwYXJhbXMuYmxvY2tUYWcgfHwgcGFyYW1zLmJsb2NrSGFzaCk7XG4gICAgICAgIGNhc2UgXCJjYWxsXCI6XG4gICAgICAgIGNhc2UgXCJlc3RpbWF0ZUdhc1wiOlxuICAgICAgICAgICAgaWYgKHBhcmFtcy5ibG9ja1RhZyAmJiBpc0hleFN0cmluZyhwYXJhbXMuYmxvY2tUYWcpKSB7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXIgPSBhd2FpdCB3YWl0Rm9yU3luYyhjb25maWcsIGN1cnJlbnRCbG9ja051bWJlcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXRob2QgPT09IFwiY2FsbFwiICYmIHBhcmFtcy5ibG9ja1RhZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm92aWRlclttZXRob2RdKHBhcmFtcy50cmFuc2FjdGlvbiwgcGFyYW1zLmJsb2NrVGFnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcm92aWRlclttZXRob2RdKHBhcmFtcy50cmFuc2FjdGlvbik7XG4gICAgICAgIGNhc2UgXCJnZXRUcmFuc2FjdGlvblwiOlxuICAgICAgICBjYXNlIFwiZ2V0VHJhbnNhY3Rpb25SZWNlaXB0XCI6XG4gICAgICAgICAgICByZXR1cm4gcHJvdmlkZXJbbWV0aG9kXShwYXJhbXMudHJhbnNhY3Rpb25IYXNoKTtcbiAgICAgICAgY2FzZSBcImdldExvZ3NcIjoge1xuICAgICAgICAgICAgbGV0IGZpbHRlciA9IHBhcmFtcy5maWx0ZXI7XG4gICAgICAgICAgICBpZiAoKGZpbHRlci5mcm9tQmxvY2sgJiYgaXNIZXhTdHJpbmcoZmlsdGVyLmZyb21CbG9jaykpIHx8IChmaWx0ZXIudG9CbG9jayAmJiBpc0hleFN0cmluZyhmaWx0ZXIudG9CbG9jaykpKSB7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXIgPSBhd2FpdCB3YWl0Rm9yU3luYyhjb25maWcsIGN1cnJlbnRCbG9ja051bWJlcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcm92aWRlci5nZXRMb2dzKGZpbHRlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbG9nZ2VyLnRocm93RXJyb3IoXCJ1bmtub3duIG1ldGhvZCBlcnJvclwiLCBMb2dnZXIuZXJyb3JzLlVOS05PV05fRVJST1IsIHtcbiAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgfSk7XG59XG5cbmV4cG9ydCBjbGFzcyBGYWxsYmFja1Byb3ZpZGVyIGV4dGVuZHMgQmFzZVByb3ZpZGVyIHtcbiAgICByZWFkb25seSBwcm92aWRlckNvbmZpZ3M6IFJlYWRvbmx5QXJyYXk8RmFsbGJhY2tQcm92aWRlckNvbmZpZz47XG4gICAgcmVhZG9ubHkgcXVvcnVtOiBudW1iZXI7XG5cbiAgICAvLyBEdWUgdG8gdGhlIGhpZ2hseSBhc3luY3Jvbm91cyBuYXR1cmUgb2YgdGhlIGJsb2NrY2hhaW4sIHdlIG5lZWRcbiAgICAvLyB0byBtYWtlIHN1cmUgd2UgbmV2ZXIgdW5yb2xsIHRoZSBibG9ja051bWJlciBkdWUgdG8gb3VyIHJhbmRvbVxuICAgIC8vIHNhbXBsZSBvZiBiYWNrZW5kc1xuICAgIF9oaWdoZXN0QmxvY2tOdW1iZXI6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKHByb3ZpZGVyczogQXJyYXk8UHJvdmlkZXIgfCBGYWxsYmFja1Byb3ZpZGVyQ29uZmlnPiwgcXVvcnVtPzogbnVtYmVyKSB7XG4gICAgICAgIGlmIChwcm92aWRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwibWlzc2luZyBwcm92aWRlcnNcIiwgXCJwcm92aWRlcnNcIiwgcHJvdmlkZXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHByb3ZpZGVyQ29uZmlnczogQXJyYXk8RmFsbGJhY2tQcm92aWRlckNvbmZpZz4gPSBwcm92aWRlcnMubWFwKChjb25maWdPclByb3ZpZGVyLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKFByb3ZpZGVyLmlzUHJvdmlkZXIoY29uZmlnT3JQcm92aWRlcikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFsbFRpbWVvdXQgPSBpc0NvbW11bml0eVJlc291cmNlKGNvbmZpZ09yUHJvdmlkZXIpID8gMjAwMDogNzUwO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByaW9yaXR5ID0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7IHByb3ZpZGVyOiBjb25maWdPclByb3ZpZGVyLCB3ZWlnaHQ6IDEsIHN0YWxsVGltZW91dCwgcHJpb3JpdHkgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZzogRmFsbGJhY2tQcm92aWRlckNvbmZpZyA9IHNoYWxsb3dDb3B5KGNvbmZpZ09yUHJvdmlkZXIpO1xuXG4gICAgICAgICAgICBpZiAoY29uZmlnLnByaW9yaXR5ID09IG51bGwpIHsgY29uZmlnLnByaW9yaXR5ID0gMTsgfVxuICAgICAgICAgICAgaWYgKGNvbmZpZy5zdGFsbFRpbWVvdXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5zdGFsbFRpbWVvdXQgPSBpc0NvbW11bml0eVJlc291cmNlKGNvbmZpZ09yUHJvdmlkZXIpID8gMjAwMDogNzUwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbmZpZy53ZWlnaHQgPT0gbnVsbCkgeyBjb25maWcud2VpZ2h0ID0gMTsgfVxuXG4gICAgICAgICAgICBjb25zdCB3ZWlnaHQgPSBjb25maWcud2VpZ2h0O1xuICAgICAgICAgICAgaWYgKHdlaWdodCAlIDEgfHwgd2VpZ2h0ID4gNTEyIHx8IHdlaWdodCA8IDEpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCB3ZWlnaHQ7IG11c3QgYmUgaW50ZWdlciBpbiBbMSwgNTEyXVwiLCBgcHJvdmlkZXJzWyR7IGluZGV4IH1dLndlaWdodGAsIHdlaWdodCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuZnJlZXplKGNvbmZpZyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHRvdGFsID0gcHJvdmlkZXJDb25maWdzLnJlZHVjZSgoYWNjdW0sIGMpID0+IChhY2N1bSArIGMud2VpZ2h0KSwgMCk7XG5cbiAgICAgICAgaWYgKHF1b3J1bSA9PSBudWxsKSB7XG4gICAgICAgICAgICBxdW9ydW0gPSB0b3RhbCAvIDI7XG4gICAgICAgIH0gZWxzZSBpZiAocXVvcnVtID4gdG90YWwpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJxdW9ydW0gd2lsbCBhbHdheXMgZmFpbDsgbGFyZ2VyIHRoYW4gdG90YWwgd2VpZ2h0XCIsIFwicXVvcnVtXCIsIHF1b3J1bSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBcmUgYWxsIHByb3ZpZGVycycgbmV0d29ya3MgYXJlIGtub3duXG4gICAgICAgIGxldCBuZXR3b3JrT3JSZWFkeTogTmV0d29yayB8IFByb21pc2U8TmV0d29yaz4gPSBjaGVja05ldHdvcmtzKHByb3ZpZGVyQ29uZmlncy5tYXAoKGMpID0+ICg8YW55PihjLnByb3ZpZGVyKSkubmV0d29yaykpO1xuXG4gICAgICAgIC8vIE5vdCBhbGwgbmV0d29ya3MgYXJlIGtub3duOyB3ZSBtdXN0IHN0YWxsXG4gICAgICAgIGlmIChuZXR3b3JrT3JSZWFkeSA9PSBudWxsKSB7XG4gICAgICAgICAgICBuZXR3b3JrT3JSZWFkeSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXRlY3ROZXR3b3JrKCkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlcihuZXR3b3JrT3JSZWFkeSk7XG5cbiAgICAgICAgLy8gUHJlc2VydmUgYSBjb3B5LCBzbyB3ZSBkbyBub3QgZ2V0IG11dGF0ZWRcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJwcm92aWRlckNvbmZpZ3NcIiwgT2JqZWN0LmZyZWV6ZShwcm92aWRlckNvbmZpZ3MpKTtcbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJxdW9ydW1cIiwgcXVvcnVtKTtcblxuICAgICAgICB0aGlzLl9oaWdoZXN0QmxvY2tOdW1iZXIgPSAtMTtcbiAgICB9XG5cbiAgICBhc3luYyBkZXRlY3ROZXR3b3JrKCk6IFByb21pc2U8TmV0d29yaz4ge1xuICAgICAgICBjb25zdCBuZXR3b3JrcyA9IGF3YWl0IFByb21pc2UuYWxsKHRoaXMucHJvdmlkZXJDb25maWdzLm1hcCgoYykgPT4gYy5wcm92aWRlci5nZXROZXR3b3JrKCkpKTtcbiAgICAgICAgcmV0dXJuIGNoZWNrTmV0d29ya3MobmV0d29ya3MpO1xuICAgIH1cblxuICAgIGFzeW5jIHBlcmZvcm0obWV0aG9kOiBzdHJpbmcsIHBhcmFtczogeyBbbmFtZTogc3RyaW5nXTogYW55IH0pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICAvLyBTZW5kaW5nIHRyYW5zYWN0aW9ucyBpcyBzcGVjaWFsOyBhbHdheXMgYnJvYWRjYXN0IGl0IHRvIGFsbCBiYWNrZW5kc1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInNlbmRUcmFuc2FjdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHRzOiBBcnJheTxzdHJpbmcgfCBFcnJvcj4gPSBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLnByb3ZpZGVyQ29uZmlncy5tYXAoKGMpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYy5wcm92aWRlci5zZW5kVHJhbnNhY3Rpb24ocGFyYW1zLnNpZ25lZFRyYW5zYWN0aW9uKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5oYXNoO1xuICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIC8vIEFueSBzdWNjZXNzIGlzIGdvb2QgZW5vdWdoIChvdGhlciBlcnJvcnMgYXJlIGxpa2VseSBcImFscmVhZHkgc2VlblwiIGVycm9yc1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mKHJlc3VsdCkgPT09IFwic3RyaW5nXCIpIHsgcmV0dXJuIHJlc3VsdDsgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUaGV5IHdlcmUgYWxsIGFuIGVycm9yOyBwaWNrIHRoZSBmaXJzdCBlcnJvclxuICAgICAgICAgICAgdGhyb3cgcmVzdWx0c1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlIG5lZWQgdG8gbWFrZSBzdXJlIHdlIGFyZSBpbiBzeW5jIHdpdGggb3VyIGJhY2tlbmRzLCBzbyB3ZSBuZWVkXG4gICAgICAgIC8vIHRvIGtub3cgdGhpcyBiZWZvcmUgd2UgY2FuIG1ha2UgYSBsb3Qgb2YgY2FsbHNcbiAgICAgICAgaWYgKHRoaXMuX2hpZ2hlc3RCbG9ja051bWJlciA9PT0gLTEgJiYgbWV0aG9kICE9PSBcImdldEJsb2NrTnVtYmVyXCIpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZ2V0QmxvY2tOdW1iZXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHByb2Nlc3NGdW5jID0gZ2V0UHJvY2Vzc0Z1bmModGhpcywgbWV0aG9kLCBwYXJhbXMpO1xuXG4gICAgICAgIC8vIFNodWZmbGUgdGhlIHByb3ZpZGVycyBhbmQgdGhlbiBzb3J0IHRoZW0gYnkgdGhlaXIgcHJpb3JpdHk7IHdlXG4gICAgICAgIC8vIHNoYWxsb3dDb3B5IHRoZW0gc2luY2Ugd2Ugd2lsbCBzdG9yZSB0aGUgcmVzdWx0IGluIHRoZW0gdG9vXG4gICAgICAgIGNvbnN0IGNvbmZpZ3M6IEFycmF5PFJ1bm5pbmdDb25maWc+ID0gc2h1ZmZsZWQodGhpcy5wcm92aWRlckNvbmZpZ3MubWFwKHNoYWxsb3dDb3B5KSk7XG4gICAgICAgIGNvbmZpZ3Muc29ydCgoYSwgYikgPT4gKGEucHJpb3JpdHkgLSBiLnByaW9yaXR5KSk7XG5cbiAgICAgICAgY29uc3QgY3VycmVudEJsb2NrTnVtYmVyID0gdGhpcy5faGlnaGVzdEJsb2NrTnVtYmVyO1xuXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgbGV0IGZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHQwID0gbm93KCk7XG5cbiAgICAgICAgICAgIC8vIENvbXB1dGUgdGhlIGluZmxpZ2h0IHdlaWdodCAoZXhjbHVkZSBhbnl0aGluZyBwYXN0KVxuICAgICAgICAgICAgbGV0IGluZmxpZ2h0V2VpZ2h0ID0gY29uZmlncy5maWx0ZXIoKGMpID0+IChjLnJ1bm5lciAmJiAoKHQwIC0gYy5zdGFydCkgPCBjLnN0YWxsVGltZW91dCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZWR1Y2UoKGFjY3VtLCBjKSA9PiAoYWNjdW0gKyBjLndlaWdodCksIDApO1xuXG4gICAgICAgICAgICAvLyBTdGFydCBydW5uaW5nIGVub3VnaCB0byBtZWV0IHF1b3J1bVxuICAgICAgICAgICAgd2hpbGUgKGluZmxpZ2h0V2VpZ2h0IDwgdGhpcy5xdW9ydW0gJiYgaSA8IGNvbmZpZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29uZmlnID0gY29uZmlnc1tpKytdO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcmlkID0gbmV4dFJpZCsrO1xuXG4gICAgICAgICAgICAgICAgY29uZmlnLnN0YXJ0ID0gbm93KCk7XG4gICAgICAgICAgICAgICAgY29uZmlnLnN0YWxsZXIgPSBzdGFsbChjb25maWcuc3RhbGxUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICBjb25maWcuc3RhbGxlci53YWl0KCgpID0+IHsgY29uZmlnLnN0YWxsZXIgPSBudWxsOyB9KTtcblxuICAgICAgICAgICAgICAgIGNvbmZpZy5ydW5uZXIgPSBnZXRSdW5uZXIoY29uZmlnLCBjdXJyZW50QmxvY2tOdW1iZXIsIG1ldGhvZCwgcGFyYW1zKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLmRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjb25maWcucmVzdWx0ID0gcmVzdWx0O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxpc3RlbmVyQ291bnQoXCJkZWJ1Z1wiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZXF1ZXN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmlkOiByaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2VuZDogZXhwb3NlRGVidWdDb25maWcoY29uZmlnLCBub3coKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdDogeyBtZXRob2Q6IG1ldGhvZCwgcGFyYW1zOiBkZWVwQ29weShwYXJhbXMpIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXI6IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLmVycm9yID0gZXJyb3I7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGlzdGVuZXJDb3VudChcImRlYnVnXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcInJlcXVlc3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWQ6IHJpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZW5kOiBleHBvc2VEZWJ1Z0NvbmZpZyhjb25maWcsIG5vdygpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0OiB7IG1ldGhvZDogbWV0aG9kLCBwYXJhbXM6IGRlZXBDb3B5KHBhcmFtcykgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlcjogdGhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxpc3RlbmVyQ291bnQoXCJkZWJ1Z1wiKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwicmVxdWVzdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmlkOiByaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZW5kOiBleHBvc2VEZWJ1Z0NvbmZpZyhjb25maWcsIG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdDogeyBtZXRob2Q6IG1ldGhvZCwgcGFyYW1zOiBkZWVwQ29weShwYXJhbXMpIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlcjogdGhpc1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpbmZsaWdodFdlaWdodCArPSBjb25maWcud2VpZ2h0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXYWl0IGZvciBhbnl0aGluZyBtZWFuaW5nZnVsIHRvIGZpbmlzaCBvciBzdGFsbCBvdXRcbiAgICAgICAgICAgIGNvbnN0IHdhaXRpbmc6IEFycmF5PFByb21pc2U8YW55Pj4gPSBbIF07XG4gICAgICAgICAgICBjb25maWdzLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYy5kb25lIHx8ICFjLnJ1bm5lcikgeyByZXR1cm47IH1cbiAgICAgICAgICAgICAgICB3YWl0aW5nLnB1c2goYy5ydW5uZXIpO1xuICAgICAgICAgICAgICAgIGlmIChjLnN0YWxsZXIpIHsgd2FpdGluZy5wdXNoKGMuc3RhbGxlci5nZXRQcm9taXNlKCkpOyB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHdhaXRpbmcubGVuZ3RoKSB7IGF3YWl0IFByb21pc2UucmFjZSh3YWl0aW5nKTsgfVxuXG4gICAgICAgICAgICAvLyBDaGVjayB0aGUgcXVvcnVtIGFuZCBwcm9jZXNzIHRoZSByZXN1bHRzOyB0aGUgcHJvY2VzcyBmdW5jdGlvblxuICAgICAgICAgICAgLy8gbWF5IGFkZGl0aW9uYWxseSBkZWNpZGUgdGhlIHF1b3J1bSBpcyBub3QgbWV0XG4gICAgICAgICAgICBjb25zdCByZXN1bHRzID0gY29uZmlncy5maWx0ZXIoKGMpID0+IChjLmRvbmUgJiYgYy5lcnJvciA9PSBudWxsKSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0cy5sZW5ndGggPj0gdGhpcy5xdW9ydW0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBwcm9jZXNzRnVuYyhyZXN1bHRzKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2h1dCBkb3duIGFueSBzdGFsbGVyc1xuICAgICAgICAgICAgICAgICAgICBjb25maWdzLmZvckVhY2goYyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYy5zdGFsbGVyKSB7IGMuc3RhbGxlci5jYW5jZWwoKTsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYy5jYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFmaXJzdCkgeyBhd2FpdCBzdGFsbCgxMDApLmdldFByb21pc2UoKTsgfVxuICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE5vIHJlc3VsdCwgY2hlY2sgZm9yIGVycm9ycyB0aGF0IHNob3VsZCBiZSBmb3J3YXJkZWRcbiAgICAgICAgICAgIGNvbnN0IGVycm9ycyA9IGNvbmZpZ3MucmVkdWNlKChhY2N1bSwgYykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghYy5kb25lIHx8IGMuZXJyb3IgPT0gbnVsbCkgeyByZXR1cm4gYWNjdW07IH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGNvZGUgPSAoPGFueT4oYy5lcnJvcikpLmNvZGU7XG4gICAgICAgICAgICAgICAgaWYgKEZvcndhcmRFcnJvcnMuaW5kZXhPZihjb2RlKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYWNjdW1bY29kZV0pIHsgYWNjdW1bY29kZV0gPSB7IGVycm9yOiBjLmVycm9yLCB3ZWlnaHQ6IDAgfTsgfVxuICAgICAgICAgICAgICAgICAgICBhY2N1bVtjb2RlXS53ZWlnaHQgKz0gYy53ZWlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY3VtO1xuICAgICAgICAgICAgfSwgPHsgWyBjb2RlOiBzdHJpbmcgXTogeyBlcnJvcjogRXJyb3IsIHdlaWdodDogbnVtYmVyIH0gfT4oeyB9KSk7XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGVycm9ycykuZm9yRWFjaCgoZXJyb3JDb2RlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YWxseSA9IGVycm9yc1tlcnJvckNvZGVdO1xuICAgICAgICAgICAgICAgIGlmICh0YWxseS53ZWlnaHQgPCB0aGlzLnF1b3J1bSkgeyByZXR1cm47IH1cblxuICAgICAgICAgICAgICAgIC8vIFNodXQgZG93biBhbnkgc3RhbGxlcnNcbiAgICAgICAgICAgICAgICBjb25maWdzLmZvckVhY2goYyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjLnN0YWxsZXIpIHsgYy5zdGFsbGVyLmNhbmNlbCgpOyB9XG4gICAgICAgICAgICAgICAgICAgIGMuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSA8YW55Pih0YWxseS5lcnJvcik7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wczogeyBbIG5hbWU6IHN0cmluZyBdOiBhbnkgfSA9IHsgfTtcbiAgICAgICAgICAgICAgICBGb3J3YXJkUHJvcGVydGllcy5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlW25hbWVdID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICAgICAgICAgIHByb3BzW25hbWVdID0gZVtuYW1lXTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGxvZ2dlci50aHJvd0Vycm9yKGUucmVhc29uIHx8IGUubWVzc2FnZSwgPGFueT5lcnJvckNvZGUsIHByb3BzKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBBbGwgY29uZmlncyBoYXZlIHJ1biB0byBjb21wbGV0aW9uOyB3ZSB3aWxsIG5ldmVyIGdldCBtb3JlIGRhdGFcbiAgICAgICAgICAgIGlmIChjb25maWdzLmZpbHRlcigoYykgPT4gIWMuZG9uZSkubGVuZ3RoID09PSAwKSB7IGJyZWFrOyB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaHV0IGRvd24gYW55IHN0YWxsZXJzOyBzaG91bGRuJ3QgYmUgYW55XG4gICAgICAgIGNvbmZpZ3MuZm9yRWFjaChjID0+IHtcbiAgICAgICAgICAgIGlmIChjLnN0YWxsZXIpIHsgYy5zdGFsbGVyLmNhbmNlbCgpOyB9XG4gICAgICAgICAgICBjLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBsb2dnZXIudGhyb3dFcnJvcihcImZhaWxlZCB0byBtZWV0IHF1b3J1bVwiLCBMb2dnZXIuZXJyb3JzLlNFUlZFUl9FUlJPUiwge1xuICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICAgIC8vcmVzdWx0czogY29uZmlncy5tYXAoKGMpID0+IGMucmVzdWx0KSxcbiAgICAgICAgICAgIC8vZXJyb3JzOiBjb25maWdzLm1hcCgoYykgPT4gYy5lcnJvciksXG4gICAgICAgICAgICByZXN1bHRzOiBjb25maWdzLm1hcCgoYykgPT4gZXhwb3NlRGVidWdDb25maWcoYykpLFxuICAgICAgICAgICAgcHJvdmlkZXI6IHRoaXNcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IElwY1Byb3ZpZGVyOiBhbnkgPSBudWxsO1xuXG5leHBvcnQge1xuICAgIElwY1Byb3ZpZGVyXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IE5ldHdvcmssIE5ldHdvcmtpc2ggfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbmV0d29ya3NcIjtcbmltcG9ydCB7IGRlZmluZVJlYWRPbmx5IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3BlcnRpZXNcIjtcbmltcG9ydCB7IENvbm5lY3Rpb25JbmZvIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3dlYlwiO1xuXG5pbXBvcnQgeyBXZWJTb2NrZXRQcm92aWRlciB9IGZyb20gXCIuL3dlYnNvY2tldC1wcm92aWRlclwiO1xuaW1wb3J0IHsgQ29tbXVuaXR5UmVzb3VyY2FibGUsIHNob3dUaHJvdHRsZU1lc3NhZ2UgfSBmcm9tIFwiLi9mb3JtYXR0ZXJcIjtcblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuXG5pbXBvcnQgeyBVcmxKc29uUnBjUHJvdmlkZXIgfSBmcm9tIFwiLi91cmwtanNvbi1ycGMtcHJvdmlkZXJcIjtcblxuXG5jb25zdCBkZWZhdWx0UHJvamVjdElkID0gXCI4NDg0MjA3OGIwOTk0NjYzOGMwMzE1N2Y4MzQwNTIxM1wiXG5cbmV4cG9ydCBjbGFzcyBJbmZ1cmFXZWJTb2NrZXRQcm92aWRlciBleHRlbmRzIFdlYlNvY2tldFByb3ZpZGVyIGltcGxlbWVudHMgQ29tbXVuaXR5UmVzb3VyY2FibGUge1xuICAgIHJlYWRvbmx5IGFwaUtleTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHByb2plY3RJZDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHByb2plY3RTZWNyZXQ6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKG5ldHdvcms/OiBOZXR3b3JraXNoLCBhcGlLZXk/OiBhbnkpIHtcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgSW5mdXJhUHJvdmlkZXIobmV0d29yaywgYXBpS2V5KTtcbiAgICAgICAgY29uc3QgY29ubmVjdGlvbiA9IHByb3ZpZGVyLmNvbm5lY3Rpb247XG4gICAgICAgIGlmIChjb25uZWN0aW9uLnBhc3N3b3JkKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcIklORlVSQSBXZWJTb2NrZXQgcHJvamVjdCBzZWNyZXRzIHVuc3VwcG9ydGVkXCIsIExvZ2dlci5lcnJvcnMuVU5TVVBQT1JURURfT1BFUkFUSU9OLCB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiBcIkluZnVyYVByb3ZpZGVyLmdldFdlYlNvY2tldFByb3ZpZGVyKClcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1cmwgPSBjb25uZWN0aW9uLnVybC5yZXBsYWNlKC9eaHR0cC9pLCBcIndzXCIpLnJlcGxhY2UoXCIvdjMvXCIsIFwiL3dzL3YzL1wiKTtcbiAgICAgICAgc3VwZXIodXJsLCBuZXR3b3JrKTtcblxuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcImFwaUtleVwiLCBwcm92aWRlci5wcm9qZWN0SWQpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcInByb2plY3RJZFwiLCBwcm92aWRlci5wcm9qZWN0SWQpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcInByb2plY3RTZWNyZXRcIiwgcHJvdmlkZXIucHJvamVjdFNlY3JldCk7XG4gICAgfVxuXG4gICAgaXNDb21tdW5pdHlSZXNvdXJjZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnByb2plY3RJZCA9PT0gZGVmYXVsdFByb2plY3RJZCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgSW5mdXJhUHJvdmlkZXIgZXh0ZW5kcyBVcmxKc29uUnBjUHJvdmlkZXIge1xuICAgIHJlYWRvbmx5IHByb2plY3RJZDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHByb2plY3RTZWNyZXQ6IHN0cmluZztcblxuICAgIHN0YXRpYyBnZXRXZWJTb2NrZXRQcm92aWRlcihuZXR3b3JrPzogTmV0d29ya2lzaCwgYXBpS2V5PzogYW55KTogSW5mdXJhV2ViU29ja2V0UHJvdmlkZXIge1xuICAgICAgICByZXR1cm4gbmV3IEluZnVyYVdlYlNvY2tldFByb3ZpZGVyKG5ldHdvcmssIGFwaUtleSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldEFwaUtleShhcGlLZXk6IGFueSk6IGFueSB7XG4gICAgICAgIGNvbnN0IGFwaUtleU9iajogeyBhcGlLZXk6IHN0cmluZywgcHJvamVjdElkOiBzdHJpbmcsIHByb2plY3RTZWNyZXQ6IHN0cmluZyB9ID0ge1xuICAgICAgICAgICAgYXBpS2V5OiBkZWZhdWx0UHJvamVjdElkLFxuICAgICAgICAgICAgcHJvamVjdElkOiBkZWZhdWx0UHJvamVjdElkLFxuICAgICAgICAgICAgcHJvamVjdFNlY3JldDogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChhcGlLZXkgPT0gbnVsbCkgeyByZXR1cm4gYXBpS2V5T2JqOyB9XG5cbiAgICAgICAgaWYgKHR5cGVvZihhcGlLZXkpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBhcGlLZXlPYmoucHJvamVjdElkID0gYXBpS2V5O1xuXG4gICAgICAgIH0gZWxzZSBpZiAoYXBpS2V5LnByb2plY3RTZWNyZXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgbG9nZ2VyLmFzc2VydEFyZ3VtZW50KCh0eXBlb2YoYXBpS2V5LnByb2plY3RJZCkgPT09IFwic3RyaW5nXCIpLFxuICAgICAgICAgICAgICAgIFwicHJvamVjdFNlY3JldCByZXF1aXJlcyBhIHByb2plY3RJZFwiLCBcInByb2plY3RJZFwiLCBhcGlLZXkucHJvamVjdElkKTtcbiAgICAgICAgICAgIGxvZ2dlci5hc3NlcnRBcmd1bWVudCgodHlwZW9mKGFwaUtleS5wcm9qZWN0U2VjcmV0KSA9PT0gXCJzdHJpbmdcIiksXG4gICAgICAgICAgICAgICAgXCJpbnZhbGlkIHByb2plY3RTZWNyZXRcIiwgXCJwcm9qZWN0U2VjcmV0XCIsIFwiW1JFREFDVEVEXVwiKTtcblxuICAgICAgICAgICAgYXBpS2V5T2JqLnByb2plY3RJZCA9IGFwaUtleS5wcm9qZWN0SWQ7XG4gICAgICAgICAgICBhcGlLZXlPYmoucHJvamVjdFNlY3JldCA9IGFwaUtleS5wcm9qZWN0U2VjcmV0O1xuXG4gICAgICAgIH0gZWxzZSBpZiAoYXBpS2V5LnByb2plY3RJZCkge1xuICAgICAgICAgICAgYXBpS2V5T2JqLnByb2plY3RJZCA9IGFwaUtleS5wcm9qZWN0SWQ7XG4gICAgICAgIH1cblxuICAgICAgICBhcGlLZXlPYmouYXBpS2V5ID0gYXBpS2V5T2JqLnByb2plY3RJZDtcblxuICAgICAgICByZXR1cm4gYXBpS2V5T2JqO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRVcmwobmV0d29yazogTmV0d29yaywgYXBpS2V5OiBhbnkpOiBDb25uZWN0aW9uSW5mbyB7XG4gICAgICAgIGxldCBob3N0OiBzdHJpbmcgPSBudWxsO1xuICAgICAgICBzd2l0Y2gobmV0d29yayA/IG5ldHdvcmsubmFtZTogXCJ1bmtub3duXCIpIHtcbiAgICAgICAgICAgIGNhc2UgXCJob21lc3RlYWRcIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJtYWlubmV0LmluZnVyYS5pb1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInJvcHN0ZW5cIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJyb3BzdGVuLmluZnVyYS5pb1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInJpbmtlYnlcIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJyaW5rZWJ5LmluZnVyYS5pb1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImtvdmFuXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwia292YW4uaW5mdXJhLmlvXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZ29lcmxpXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwiZ29lcmxpLmluZnVyYS5pb1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm1hdGljXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwicG9seWdvbi1tYWlubmV0LmluZnVyYS5pb1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm1hdGljbXVtXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwicG9seWdvbi1tdW1iYWkuaW5mdXJhLmlvXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwib3B0aW1pc21cIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJvcHRpbWlzbS1tYWlubmV0LmluZnVyYS5pb1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm9wdGltaXNtLWtvdmFuXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwib3B0aW1pc20ta292YW4uaW5mdXJhLmlvXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiYXJiaXRydW1cIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJhcmJpdHJ1bS1tYWlubmV0LmluZnVyYS5pb1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImFyYml0cnVtLXJpbmtlYnlcIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJhcmJpdHJ1bS1yaW5rZWJ5LmluZnVyYS5pb1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBsb2dnZXIudGhyb3dFcnJvcihcInVuc3VwcG9ydGVkIG5ldHdvcmtcIiwgTG9nZ2VyLmVycm9ycy5JTlZBTElEX0FSR1VNRU5ULCB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50OiBcIm5ldHdvcmtcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ldHdvcmtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb246IENvbm5lY3Rpb25JbmZvID0ge1xuICAgICAgICAgICAgYWxsb3dHemlwOiB0cnVlLFxuICAgICAgICAgICAgdXJsOiAoXCJodHRwczovXCIgKyBcIi9cIiArIGhvc3QgKyBcIi92My9cIiArIGFwaUtleS5wcm9qZWN0SWQpLFxuICAgICAgICAgICAgdGhyb3R0bGVDYWxsYmFjazogKGF0dGVtcHQ6IG51bWJlciwgdXJsOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYXBpS2V5LnByb2plY3RJZCA9PT0gZGVmYXVsdFByb2plY3RJZCkge1xuICAgICAgICAgICAgICAgICAgICBzaG93VGhyb3R0bGVNZXNzYWdlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGFwaUtleS5wcm9qZWN0U2VjcmV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24udXNlciA9IFwiXCI7XG4gICAgICAgICAgICBjb25uZWN0aW9uLnBhc3N3b3JkID0gYXBpS2V5LnByb2plY3RTZWNyZXRcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25uZWN0aW9uO1xuICAgIH1cblxuICAgIGlzQ29tbXVuaXR5UmVzb3VyY2UoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAodGhpcy5wcm9qZWN0SWQgPT09IGRlZmF1bHRQcm9qZWN0SWQpO1xuICAgIH1cbn1cbiIsIlxuaW1wb3J0IHsgZGVlcENvcHkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiO1xuaW1wb3J0IHsgZmV0Y2hKc29uIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3dlYlwiO1xuXG5pbXBvcnQgeyBKc29uUnBjUHJvdmlkZXIgfSBmcm9tIFwiLi9qc29uLXJwYy1wcm92aWRlclwiO1xuXG4vLyBFeHBlcmltZW50YWxcblxuZXhwb3J0IGNsYXNzIEpzb25ScGNCYXRjaFByb3ZpZGVyIGV4dGVuZHMgSnNvblJwY1Byb3ZpZGVyIHtcbiAgICBfcGVuZGluZ0JhdGNoQWdncmVnYXRvcjogTm9kZUpTLlRpbWVyO1xuICAgIF9wZW5kaW5nQmF0Y2g6IEFycmF5PHtcbiAgICAgICAgcmVxdWVzdDogeyBtZXRob2Q6IHN0cmluZywgcGFyYW1zOiBBcnJheTxhbnk+LCBpZDogbnVtYmVyLCBqc29ucnBjOiBcIjIuMFwiIH0sXG4gICAgICAgIHJlc29sdmU6IChyZXN1bHQ6IGFueSkgPT4gdm9pZCxcbiAgICAgICAgcmVqZWN0OiAoZXJyb3I6IEVycm9yKSA9PiB2b2lkXG4gICAgfT47XG5cbiAgICBzZW5kKG1ldGhvZDogc3RyaW5nLCBwYXJhbXM6IEFycmF5PGFueT4pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICAgIGlkOiAodGhpcy5fbmV4dElkKyspLFxuICAgICAgICAgICAganNvbnJwYzogXCIyLjBcIlxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLl9wZW5kaW5nQmF0Y2ggPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcGVuZGluZ0JhdGNoID0gWyBdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaW5mbGlnaHRSZXF1ZXN0OiBhbnkgPSB7IHJlcXVlc3QsIHJlc29sdmU6IG51bGwsIHJlamVjdDogbnVsbCB9O1xuXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpbmZsaWdodFJlcXVlc3QucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgICAgICBpbmZsaWdodFJlcXVlc3QucmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9wZW5kaW5nQmF0Y2gucHVzaChpbmZsaWdodFJlcXVlc3QpO1xuXG4gICAgICAgIGlmICghdGhpcy5fcGVuZGluZ0JhdGNoQWdncmVnYXRvcikge1xuICAgICAgICAgICAgLy8gU2NoZWR1bGUgYmF0Y2ggZm9yIG5leHQgZXZlbnQgbG9vcCArIHNob3J0IGR1cmF0aW9uXG4gICAgICAgICAgICB0aGlzLl9wZW5kaW5nQmF0Y2hBZ2dyZWdhdG9yID0gc2V0VGltZW91dCgoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAvLyBHZXQgdGVoIGN1cnJlbnQgYmF0Y2ggYW5kIGNsZWFyIGl0LCBzbyBuZXcgcmVxdWVzdHNcbiAgICAgICAgICAgICAgICAvLyBnbyBpbnRvIHRoZSBuZXh0IGJhdGNoXG4gICAgICAgICAgICAgICAgY29uc3QgYmF0Y2ggPSB0aGlzLl9wZW5kaW5nQmF0Y2g7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGVuZGluZ0JhdGNoID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLl9wZW5kaW5nQmF0Y2hBZ2dyZWdhdG9yID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgcmVxdWVzdCBhcyBhbiBhcnJheSBvZiByZXF1ZXN0c1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBiYXRjaC5tYXAoKGluZmxpZ2h0KSA9PiBpbmZsaWdodC5yZXF1ZXN0KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcInJlcXVlc3RCYXRjaFwiLFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0OiBkZWVwQ29weShyZXF1ZXN0KSxcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXI6IHRoaXNcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaEpzb24odGhpcy5jb25uZWN0aW9uLCBKU09OLnN0cmluZ2lmeShyZXF1ZXN0KSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZXNwb25zZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlOiByZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlcjogdGhpc1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZWFjaCByZXN1bHQsIGZlZWQgaXQgdG8gdGhlIGNvcnJlY3QgUHJvbWlzZSwgZGVwZW5kaW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIG9uIHdoZXRoZXIgaXQgd2FzIGEgc3VjY2VzcyBvciBlcnJvclxuICAgICAgICAgICAgICAgICAgICBiYXRjaC5mb3JFYWNoKChpbmZsaWdodFJlcXVlc3QsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gcmVzdWx0W2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IocGF5bG9hZC5lcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoPGFueT5lcnJvcikuY29kZSA9IHBheWxvYWQuZXJyb3IuY29kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoPGFueT5lcnJvcikuZGF0YSA9IHBheWxvYWQuZXJyb3IuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZsaWdodFJlcXVlc3QucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mbGlnaHRSZXF1ZXN0LnJlc29sdmUocGF5bG9hZC5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwicmVzcG9uc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlcjogdGhpc1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBiYXRjaC5mb3JFYWNoKChpbmZsaWdodFJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZmxpZ2h0UmVxdWVzdC5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxufVxuIiwiLyogaXN0YW5idWwgaWdub3JlIGZpbGUgKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IE5ldHdvcmsgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbmV0d29ya3NcIjtcbmltcG9ydCB7IFVybEpzb25ScGNQcm92aWRlciB9IGZyb20gXCIuL3VybC1qc29uLXJwYy1wcm92aWRlclwiO1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5cbi8vIFNwZWNpYWwgQVBJIGtleSBwcm92aWRlZCBieSBOb2Rlc21pdGggZm9yIGV0aGVycy5qc1xuY29uc3QgZGVmYXVsdEFwaUtleSA9IFwiRVRIRVJTX0pTX1NIQVJFRFwiO1xuXG5leHBvcnQgY2xhc3MgTm9kZXNtaXRoUHJvdmlkZXIgZXh0ZW5kcyBVcmxKc29uUnBjUHJvdmlkZXIge1xuXG4gICAgc3RhdGljIGdldEFwaUtleShhcGlLZXk6IGFueSk6IGFueSB7XG4gICAgICAgIGlmIChhcGlLZXkgJiYgdHlwZW9mKGFwaUtleSkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGFwaUtleVwiLCBcImFwaUtleVwiLCBhcGlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcGlLZXkgfHwgZGVmYXVsdEFwaUtleTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0VXJsKG5ldHdvcms6IE5ldHdvcmssIGFwaUtleT86IGFueSk6IHN0cmluZyB7XG4gICAgICAgIGxvZ2dlci53YXJuKFwiTm9kZVNtaXRoIHdpbGwgYmUgZGlzY29udGludWVkIG9uIDIwMTktMTItMjA7IHBsZWFzZSBtaWdyYXRlIHRvIGFub3RoZXIgcGxhdGZvcm0uXCIpO1xuXG4gICAgICAgIGxldCBob3N0ID0gbnVsbDtcbiAgICAgICAgc3dpdGNoIChuZXR3b3JrLm5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJob21lc3RlYWRcIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJodHRwczovL2V0aGVyZXVtLmFwaS5ub2Rlc21pdGguaW8vdjEvbWFpbm5ldC9qc29ucnBjXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicm9wc3RlblwiOlxuICAgICAgICAgICAgICAgIGhvc3QgPSBcImh0dHBzOi8vZXRoZXJldW0uYXBpLm5vZGVzbWl0aC5pby92MS9yb3BzdGVuL2pzb25ycGNcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJyaW5rZWJ5XCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwiaHR0cHM6Ly9ldGhlcmV1bS5hcGkubm9kZXNtaXRoLmlvL3YxL3JpbmtlYnkvanNvbnJwY1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImdvZXJsaVwiOlxuICAgICAgICAgICAgICAgIGhvc3QgPSBcImh0dHBzOi8vZXRoZXJldW0uYXBpLm5vZGVzbWl0aC5pby92MS9nb2VybGkvanNvbnJwY1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImtvdmFuXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwiaHR0cHM6Ly9ldGhlcmV1bS5hcGkubm9kZXNtaXRoLmlvL3YxL2tvdmFuL2pzb25ycGNcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwidW5zdXBwb3J0ZWQgbmV0d29ya1wiLCBcIm5ldHdvcmtcIiwgYXJndW1lbnRzWzBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoaG9zdCArIFwiP2FwaUtleT1cIiArIGFwaUtleSk7XG4gICAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IE5ldHdvcmsgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbmV0d29ya3NcIjtcbmltcG9ydCB7IENvbm5lY3Rpb25JbmZvIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3dlYlwiO1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5cbmltcG9ydCB7IFVybEpzb25ScGNQcm92aWRlciB9IGZyb20gXCIuL3VybC1qc29uLXJwYy1wcm92aWRlclwiO1xuXG5jb25zdCBkZWZhdWx0QXBwbGljYXRpb25JZCA9IFwiNjJlMWFkNTFiMzdiOGUwMDM5NGJkYTNiXCI7XG5cblxuZXhwb3J0IGNsYXNzIFBvY2tldFByb3ZpZGVyIGV4dGVuZHMgVXJsSnNvblJwY1Byb3ZpZGVyIHtcbiAgICByZWFkb25seSBhcHBsaWNhdGlvbklkOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgYXBwbGljYXRpb25TZWNyZXRLZXk6IHN0cmluZztcbiAgICByZWFkb25seSBsb2FkQmFsYW5jZXI6IGJvb2xlYW47XG5cbiAgICBzdGF0aWMgZ2V0QXBpS2V5KGFwaUtleTogYW55KTogYW55IHtcbiAgICAgICAgY29uc3QgYXBpS2V5T2JqOiB7IGFwcGxpY2F0aW9uSWQ6IHN0cmluZywgYXBwbGljYXRpb25TZWNyZXRLZXk6IHN0cmluZywgbG9hZEJhbGFuY2VyOiBib29sZWFuIH0gPSB7XG4gICAgICAgICAgICBhcHBsaWNhdGlvbklkOiBudWxsLFxuICAgICAgICAgICAgbG9hZEJhbGFuY2VyOiB0cnVlLFxuICAgICAgICAgICAgYXBwbGljYXRpb25TZWNyZXRLZXk6IG51bGxcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBQYXJzZSBhcHBsaWNhdGlvbklkIGFuZCBhcHBsaWNhdGlvblNlY3JldEtleVxuICAgICAgICBpZiAoYXBpS2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgIGFwaUtleU9iai5hcHBsaWNhdGlvbklkID0gZGVmYXVsdEFwcGxpY2F0aW9uSWQ7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgKGFwaUtleSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGFwaUtleU9iai5hcHBsaWNhdGlvbklkID0gYXBpS2V5O1xuXG4gICAgICAgIH0gZWxzZSBpZiAoYXBpS2V5LmFwcGxpY2F0aW9uU2VjcmV0S2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGFwaUtleU9iai5hcHBsaWNhdGlvbklkID0gYXBpS2V5LmFwcGxpY2F0aW9uSWQ7XG4gICAgICAgICAgICBhcGlLZXlPYmouYXBwbGljYXRpb25TZWNyZXRLZXkgPSBhcGlLZXkuYXBwbGljYXRpb25TZWNyZXRLZXk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChhcGlLZXkuYXBwbGljYXRpb25JZCkge1xuICAgICAgICAgICAgYXBpS2V5T2JqLmFwcGxpY2F0aW9uSWQgPSBhcGlLZXkuYXBwbGljYXRpb25JZDtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIFBvY2tldFByb3ZpZGVyIGFwaUtleVwiLCBcImFwaUtleVwiLCBhcGlLZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFwaUtleU9iajtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0VXJsKG5ldHdvcms6IE5ldHdvcmssIGFwaUtleTogYW55KTogQ29ubmVjdGlvbkluZm8ge1xuICAgICAgICBsZXQgaG9zdDogc3RyaW5nID0gbnVsbDtcbiAgICAgICAgc3dpdGNoIChuZXR3b3JrID8gbmV0d29yay5uYW1lIDogXCJ1bmtub3duXCIpIHtcbiAgICAgICAgICAgIGNhc2UgXCJnb2VybGlcIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJldGgtZ29lcmxpLmdhdGV3YXkucG9rdC5uZXR3b3JrXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiaG9tZXN0ZWFkXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwiZXRoLW1haW5uZXQuZ2F0ZXdheS5wb2t0Lm5ldHdvcmtcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJrb3ZhblwiOlxuICAgICAgICAgICAgICAgIGhvc3QgPSBcInBvYS1rb3Zhbi5nYXRld2F5LnBva3QubmV0d29ya1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm1hdGljXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwicG9seS1tYWlubmV0LmdhdGV3YXkucG9rdC5uZXR3b3JrXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibWF0aWNtdW1cIjpcbiAgICAgICAgICAgICAgICBob3N0ID0gXCJwb2x5Z29uLW11bWJhaS1ycGMuZ2F0ZXdheS5wb2t0Lm5ldHdvcmtcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJyaW5rZWJ5XCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwiZXRoLXJpbmtlYnkuZ2F0ZXdheS5wb2t0Lm5ldHdvcmtcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJyb3BzdGVuXCI6XG4gICAgICAgICAgICAgICAgaG9zdCA9IFwiZXRoLXJvcHN0ZW4uZ2F0ZXdheS5wb2t0Lm5ldHdvcmtcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJ1bnN1cHBvcnRlZCBuZXR3b3JrXCIsIExvZ2dlci5lcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCwge1xuICAgICAgICAgICAgICAgICAgICBhcmd1bWVudDogXCJuZXR3b3JrXCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXR3b3JrXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6L1xcLyR7IGhvc3QgfS92MS9sYi8keyBhcGlLZXkuYXBwbGljYXRpb25JZCB9YFxuXG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb246IENvbm5lY3Rpb25JbmZvID0geyBoZWFkZXJzOiB7IH0sIHVybCB9O1xuICAgICAgICBpZiAoYXBpS2V5LmFwcGxpY2F0aW9uU2VjcmV0S2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24udXNlciA9IFwiXCI7XG4gICAgICAgICAgICBjb25uZWN0aW9uLnBhc3N3b3JkID0gYXBpS2V5LmFwcGxpY2F0aW9uU2VjcmV0S2V5XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICB9XG5cbiAgICBpc0NvbW11bml0eVJlc291cmNlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKHRoaXMuYXBwbGljYXRpb25JZCA9PT0gZGVmYXVsdEFwcGxpY2F0aW9uSWQpO1xuICAgIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBOZXR3b3JraXNoIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L25ldHdvcmtzXCI7XG5pbXBvcnQgeyBkZWVwQ29weSwgZGVmaW5lUmVhZE9ubHkgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiO1xuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIodmVyc2lvbik7XG5cbmltcG9ydCB7IEpzb25ScGNQcm92aWRlciB9IGZyb20gXCIuL2pzb24tcnBjLXByb3ZpZGVyXCI7XG5cbi8vIEV4cG9ydGVkIFR5cGVzXG5leHBvcnQgdHlwZSBFeHRlcm5hbFByb3ZpZGVyID0ge1xuICAgIGlzTWV0YU1hc2s/OiBib29sZWFuO1xuICAgIGlzU3RhdHVzPzogYm9vbGVhbjtcbiAgICBob3N0Pzogc3RyaW5nO1xuICAgIHBhdGg/OiBzdHJpbmc7XG4gICAgc2VuZEFzeW5jPzogKHJlcXVlc3Q6IHsgbWV0aG9kOiBzdHJpbmcsIHBhcmFtcz86IEFycmF5PGFueT4gfSwgY2FsbGJhY2s6IChlcnJvcjogYW55LCByZXNwb25zZTogYW55KSA9PiB2b2lkKSA9PiB2b2lkXG4gICAgc2VuZD86IChyZXF1ZXN0OiB7IG1ldGhvZDogc3RyaW5nLCBwYXJhbXM/OiBBcnJheTxhbnk+IH0sIGNhbGxiYWNrOiAoZXJyb3I6IGFueSwgcmVzcG9uc2U6IGFueSkgPT4gdm9pZCkgPT4gdm9pZFxuICAgIHJlcXVlc3Q/OiAocmVxdWVzdDogeyBtZXRob2Q6IHN0cmluZywgcGFyYW1zPzogQXJyYXk8YW55PiB9KSA9PiBQcm9taXNlPGFueT5cbn1cblxubGV0IF9uZXh0SWQgPSAxO1xuXG5leHBvcnQgdHlwZSBKc29uUnBjRmV0Y2hGdW5jID0gKG1ldGhvZDogc3RyaW5nLCBwYXJhbXM/OiBBcnJheTxhbnk+KSA9PiBQcm9taXNlPGFueT47XG5cbnR5cGUgV2ViM0xlZ2FjeVNlbmQgPSAocmVxdWVzdDogYW55LCBjYWxsYmFjazogKGVycm9yOiBFcnJvciwgcmVzcG9uc2U6IGFueSkgPT4gdm9pZCkgPT4gdm9pZDtcblxuZnVuY3Rpb24gYnVpbGRXZWIzTGVnYWN5RmV0Y2hlcihwcm92aWRlcjogRXh0ZXJuYWxQcm92aWRlciwgc2VuZEZ1bmM6IFdlYjNMZWdhY3lTZW5kKSA6IEpzb25ScGNGZXRjaEZ1bmMge1xuICAgIGNvbnN0IGZldGNoZXIgPSBcIldlYjNMZWdhY3lGZXRjaGVyXCI7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24obWV0aG9kOiBzdHJpbmcsIHBhcmFtczogQXJyYXk8YW55Pik6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICAgICAgaWQ6IChfbmV4dElkKyspLFxuICAgICAgICAgICAganNvbnJwYzogXCIyLjBcIlxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJkZWJ1Z1wiLCB7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcInJlcXVlc3RcIixcbiAgICAgICAgICAgICAgICBmZXRjaGVyLFxuICAgICAgICAgICAgICAgIHJlcXVlc3Q6IGRlZXBDb3B5KHJlcXVlc3QpLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyOiB0aGlzXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2VuZEZ1bmMocmVxdWVzdCwgKGVycm9yLCByZXNwb25zZSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZXNwb25zZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmV0Y2hlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyOiB0aGlzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcInJlc3BvbnNlXCIsXG4gICAgICAgICAgICAgICAgICAgIGZldGNoZXIsXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgICAgICAgICAgICBwcm92aWRlcjogdGhpc1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKHJlc3BvbnNlLmVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAoPGFueT5lcnJvcikuY29kZSA9IHJlc3BvbnNlLmVycm9yLmNvZGU7XG4gICAgICAgICAgICAgICAgICAgICg8YW55PmVycm9yKS5kYXRhID0gcmVzcG9uc2UuZXJyb3IuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZS5yZXN1bHQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYnVpbGRFaXAxMTkzRmV0Y2hlcihwcm92aWRlcjogRXh0ZXJuYWxQcm92aWRlcik6IEpzb25ScGNGZXRjaEZ1bmMge1xuICAgIHJldHVybiBmdW5jdGlvbihtZXRob2Q6IHN0cmluZywgcGFyYW1zOiBBcnJheTxhbnk+KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgaWYgKHBhcmFtcyA9PSBudWxsKSB7IHBhcmFtcyA9IFsgXTsgfVxuXG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB7IG1ldGhvZCwgcGFyYW1zIH07XG5cbiAgICAgICAgdGhpcy5lbWl0KFwiZGVidWdcIiwge1xuICAgICAgICAgICAgYWN0aW9uOiBcInJlcXVlc3RcIixcbiAgICAgICAgICAgIGZldGNoZXI6IFwiRWlwMTE5M0ZldGNoZXJcIixcbiAgICAgICAgICAgIHJlcXVlc3Q6IGRlZXBDb3B5KHJlcXVlc3QpLFxuICAgICAgICAgICAgcHJvdmlkZXI6IHRoaXNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyLnJlcXVlc3QocmVxdWVzdCkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwicmVzcG9uc2VcIixcbiAgICAgICAgICAgICAgICBmZXRjaGVyOiBcIkVpcDExOTNGZXRjaGVyXCIsXG4gICAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgICAgICBwcm92aWRlcjogdGhpc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcblxuICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImRlYnVnXCIsIHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwicmVzcG9uc2VcIixcbiAgICAgICAgICAgICAgICBmZXRjaGVyOiBcIkVpcDExOTNGZXRjaGVyXCIsXG4gICAgICAgICAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICBwcm92aWRlcjogdGhpc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBXZWIzUHJvdmlkZXIgZXh0ZW5kcyBKc29uUnBjUHJvdmlkZXIge1xuICAgIHJlYWRvbmx5IHByb3ZpZGVyOiBFeHRlcm5hbFByb3ZpZGVyO1xuICAgIHJlYWRvbmx5IGpzb25ScGNGZXRjaEZ1bmM6IEpzb25ScGNGZXRjaEZ1bmM7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlcjogRXh0ZXJuYWxQcm92aWRlciB8IEpzb25ScGNGZXRjaEZ1bmMsIG5ldHdvcms/OiBOZXR3b3JraXNoKSB7XG4gICAgICAgIGlmIChwcm92aWRlciA9PSBudWxsKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwibWlzc2luZyBwcm92aWRlclwiLCBcInByb3ZpZGVyXCIsIHByb3ZpZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwYXRoOiBzdHJpbmcgPSBudWxsO1xuICAgICAgICBsZXQganNvblJwY0ZldGNoRnVuYzogSnNvblJwY0ZldGNoRnVuYyA9IG51bGw7XG4gICAgICAgIGxldCBzdWJwcm92aWRlcjogRXh0ZXJuYWxQcm92aWRlciA9IG51bGw7XG5cbiAgICAgICAgaWYgKHR5cGVvZihwcm92aWRlcikgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcGF0aCA9IFwidW5rbm93bjpcIjtcbiAgICAgICAgICAgIGpzb25ScGNGZXRjaEZ1bmMgPSBwcm92aWRlcjtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGF0aCA9IHByb3ZpZGVyLmhvc3QgfHwgcHJvdmlkZXIucGF0aCB8fCBcIlwiO1xuICAgICAgICAgICAgaWYgKCFwYXRoICYmIHByb3ZpZGVyLmlzTWV0YU1hc2spIHtcbiAgICAgICAgICAgICAgICBwYXRoID0gXCJtZXRhbWFza1wiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdWJwcm92aWRlciA9IHByb3ZpZGVyO1xuXG4gICAgICAgICAgICBpZiAocHJvdmlkZXIucmVxdWVzdCkge1xuICAgICAgICAgICAgICAgIGlmIChwYXRoID09PSBcIlwiKSB7IHBhdGggPSBcImVpcC0xMTkzOlwiOyB9XG4gICAgICAgICAgICAgICAganNvblJwY0ZldGNoRnVuYyA9IGJ1aWxkRWlwMTE5M0ZldGNoZXIocHJvdmlkZXIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm92aWRlci5zZW5kQXN5bmMpIHtcbiAgICAgICAgICAgICAgICBqc29uUnBjRmV0Y2hGdW5jID0gYnVpbGRXZWIzTGVnYWN5RmV0Y2hlcihwcm92aWRlciwgcHJvdmlkZXIuc2VuZEFzeW5jLmJpbmQocHJvdmlkZXIpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvdmlkZXIuc2VuZCkge1xuICAgICAgICAgICAgICAgIGpzb25ScGNGZXRjaEZ1bmMgPSBidWlsZFdlYjNMZWdhY3lGZXRjaGVyKHByb3ZpZGVyLCBwcm92aWRlci5zZW5kLmJpbmQocHJvdmlkZXIpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIHByb3ZpZGVyXCIsIFwicHJvdmlkZXJcIiwgcHJvdmlkZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXBhdGgpIHsgcGF0aCA9IFwidW5rbm93bjpcIjsgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXIocGF0aCwgbmV0d29yayk7XG5cbiAgICAgICAgZGVmaW5lUmVhZE9ubHkodGhpcywgXCJqc29uUnBjRmV0Y2hGdW5jXCIsIGpzb25ScGNGZXRjaEZ1bmMpO1xuICAgICAgICBkZWZpbmVSZWFkT25seSh0aGlzLCBcInByb3ZpZGVyXCIsIHN1YnByb3ZpZGVyKTtcbiAgICB9XG5cbiAgICBzZW5kKG1ldGhvZDogc3RyaW5nLCBwYXJhbXM6IEFycmF5PGFueT4pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5qc29uUnBjRmV0Y2hGdW5jKG1ldGhvZCwgcGFyYW1zKTtcbiAgICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHtcbiAgICBCbG9jayxcbiAgICBCbG9ja1RhZyxcbiAgICBFdmVudFR5cGUsXG4gICAgRmVlRGF0YSxcbiAgICBGaWx0ZXIsXG4gICAgTG9nLFxuICAgIExpc3RlbmVyLFxuICAgIFByb3ZpZGVyLFxuICAgIFRyYW5zYWN0aW9uUmVjZWlwdCxcbiAgICBUcmFuc2FjdGlvblJlcXVlc3QsXG4gICAgVHJhbnNhY3Rpb25SZXNwb25zZVxufSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYWJzdHJhY3QtcHJvdmlkZXJcIjtcblxuaW1wb3J0IHsgZ2V0TmV0d29yayB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9uZXR3b3Jrc1wiO1xuaW1wb3J0IHsgTmV0d29yaywgTmV0d29ya2lzaCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9uZXR3b3Jrc1wiO1xuXG5pbXBvcnQgeyBCYXNlUHJvdmlkZXIsIEVuc1Byb3ZpZGVyLCBFbnNSZXNvbHZlciwgUmVzb2x2ZXIgfSBmcm9tIFwiLi9iYXNlLXByb3ZpZGVyXCI7XG5cbmltcG9ydCB7IEFsY2hlbXlQcm92aWRlciwgQWxjaGVteVdlYlNvY2tldFByb3ZpZGVyIH0gZnJvbSBcIi4vYWxjaGVteS1wcm92aWRlclwiO1xuaW1wb3J0IHsgQW5rclByb3ZpZGVyIH0gZnJvbSBcIi4vYW5rci1wcm92aWRlclwiO1xuaW1wb3J0IHsgQ2xvdWRmbGFyZVByb3ZpZGVyIH0gZnJvbSBcIi4vY2xvdWRmbGFyZS1wcm92aWRlclwiO1xuaW1wb3J0IHsgRXRoZXJzY2FuUHJvdmlkZXIgfSBmcm9tIFwiLi9ldGhlcnNjYW4tcHJvdmlkZXJcIjtcbmltcG9ydCB7IEZhbGxiYWNrUHJvdmlkZXIsIEZhbGxiYWNrUHJvdmlkZXJDb25maWcgfSBmcm9tIFwiLi9mYWxsYmFjay1wcm92aWRlclwiO1xuaW1wb3J0IHsgSXBjUHJvdmlkZXIgfSBmcm9tIFwiLi9pcGMtcHJvdmlkZXJcIjtcbmltcG9ydCB7IEluZnVyYVByb3ZpZGVyLCBJbmZ1cmFXZWJTb2NrZXRQcm92aWRlciB9IGZyb20gXCIuL2luZnVyYS1wcm92aWRlclwiO1xuaW1wb3J0IHsgSnNvblJwY1Byb3ZpZGVyLCBKc29uUnBjU2lnbmVyIH0gZnJvbSBcIi4vanNvbi1ycGMtcHJvdmlkZXJcIjtcbmltcG9ydCB7IEpzb25ScGNCYXRjaFByb3ZpZGVyIH0gZnJvbSBcIi4vanNvbi1ycGMtYmF0Y2gtcHJvdmlkZXJcIjtcbmltcG9ydCB7IE5vZGVzbWl0aFByb3ZpZGVyIH0gZnJvbSBcIi4vbm9kZXNtaXRoLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBQb2NrZXRQcm92aWRlciB9IGZyb20gXCIuL3BvY2tldC1wcm92aWRlclwiO1xuaW1wb3J0IHsgU3RhdGljSnNvblJwY1Byb3ZpZGVyLCBVcmxKc29uUnBjUHJvdmlkZXIgfSBmcm9tIFwiLi91cmwtanNvbi1ycGMtcHJvdmlkZXJcIjtcbmltcG9ydCB7IFdlYjNQcm92aWRlciB9IGZyb20gXCIuL3dlYjMtcHJvdmlkZXJcIjtcbmltcG9ydCB7IFdlYlNvY2tldFByb3ZpZGVyIH0gZnJvbSBcIi4vd2Vic29ja2V0LXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBFeHRlcm5hbFByb3ZpZGVyLCBKc29uUnBjRmV0Y2hGdW5jIH0gZnJvbSBcIi4vd2ViMy1wcm92aWRlclwiO1xuXG5pbXBvcnQgeyBDb21tdW5pdHlSZXNvdXJjYWJsZSwgRm9ybWF0dGVyLCBpc0NvbW11bml0eVJlc291cmNhYmxlLCBpc0NvbW11bml0eVJlc291cmNlLCBzaG93VGhyb3R0bGVNZXNzYWdlIH0gZnJvbSBcIi4vZm9ybWF0dGVyXCI7XG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBIZWxwZXIgRnVuY3Rpb25zXG5cbmZ1bmN0aW9uIGdldERlZmF1bHRQcm92aWRlcihuZXR3b3JrPzogTmV0d29ya2lzaCwgb3B0aW9ucz86IGFueSk6IEJhc2VQcm92aWRlciB7XG4gICAgaWYgKG5ldHdvcmsgPT0gbnVsbCkgeyBuZXR3b3JrID0gXCJob21lc3RlYWRcIjsgfVxuXG4gICAgLy8gSWYgcGFzc2VkIGEgVVJMLCBmaWd1cmUgb3V0IHRoZSByaWdodCB0eXBlIG9mIHByb3ZpZGVyIGJhc2VkIG9uIHRoZSBzY2hlbWVcbiAgICBpZiAodHlwZW9mKG5ldHdvcmspID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIC8vIEBUT0RPOiBBZGQgc3VwcG9ydCBmb3IgSXBjUHJvdmlkZXI7IG1heWJlIGlmIGl0IGVuZHMgaW4gXCIuaXBjXCI/XG5cbiAgICAgICAgLy8gSGFuZGxlIGh0dHAgYW5kIHdzIChhbmQgdGhlaXIgc2VjdXJlIHZhcmlhbnRzKVxuICAgICAgICBjb25zdCBtYXRjaCA9IG5ldHdvcmsubWF0Y2goL14od3N8aHR0cClzPzovaSk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgc3dpdGNoIChtYXRjaFsxXS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImh0dHBcIjogY2FzZSBcImh0dHBzXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSnNvblJwY1Byb3ZpZGVyKG5ldHdvcmspO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ3c1wiOiBjYXNlIFwid3NzXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgV2ViU29ja2V0UHJvdmlkZXIobmV0d29yayk7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLnRocm93QXJndW1lbnRFcnJvcihcInVuc3VwcG9ydGVkIFVSTCBzY2hlbWVcIiwgXCJuZXR3b3JrXCIsIG5ldHdvcmspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbiA9IGdldE5ldHdvcmsobmV0d29yayk7XG4gICAgaWYgKCFuIHx8ICFuLl9kZWZhdWx0UHJvdmlkZXIpIHtcbiAgICAgICAgbG9nZ2VyLnRocm93RXJyb3IoXCJ1bnN1cHBvcnRlZCBnZXREZWZhdWx0UHJvdmlkZXIgbmV0d29ya1wiLCBMb2dnZXIuZXJyb3JzLk5FVFdPUktfRVJST1IsIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbjogXCJnZXREZWZhdWx0UHJvdmlkZXJcIixcbiAgICAgICAgICAgIG5ldHdvcms6IG5ldHdvcmtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG4uX2RlZmF1bHRQcm92aWRlcih7XG4gICAgICAgIEZhbGxiYWNrUHJvdmlkZXIsXG5cbiAgICAgICAgQWxjaGVteVByb3ZpZGVyLFxuICAgICAgICBBbmtyUHJvdmlkZXIsXG4gICAgICAgIENsb3VkZmxhcmVQcm92aWRlcixcbiAgICAgICAgRXRoZXJzY2FuUHJvdmlkZXIsXG4gICAgICAgIEluZnVyYVByb3ZpZGVyLFxuICAgICAgICBKc29uUnBjUHJvdmlkZXIsXG4gICAgICAgIE5vZGVzbWl0aFByb3ZpZGVyLFxuICAgICAgICBQb2NrZXRQcm92aWRlcixcbiAgICAgICAgV2ViM1Byb3ZpZGVyLFxuXG4gICAgICAgIElwY1Byb3ZpZGVyLFxuICAgIH0sIG9wdGlvbnMpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEV4cG9ydHNcblxuZXhwb3J0IHtcblxuICAgIC8vIEFic3RyYWN0IFByb3ZpZGVycyAob3IgQWJzdHJhY3QtaXNoKVxuICAgIFByb3ZpZGVyLFxuICAgIEJhc2VQcm92aWRlcixcblxuICAgIFJlc29sdmVyLFxuXG4gICAgVXJsSnNvblJwY1Byb3ZpZGVyLFxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBDb25jcmV0ZSBQcm92aWRlcnNcblxuICAgIEZhbGxiYWNrUHJvdmlkZXIsXG5cbiAgICBBbGNoZW15UHJvdmlkZXIsXG4gICAgQWxjaGVteVdlYlNvY2tldFByb3ZpZGVyLFxuICAgIEFua3JQcm92aWRlcixcbiAgICBDbG91ZGZsYXJlUHJvdmlkZXIsXG4gICAgRXRoZXJzY2FuUHJvdmlkZXIsXG4gICAgSW5mdXJhUHJvdmlkZXIsXG4gICAgSW5mdXJhV2ViU29ja2V0UHJvdmlkZXIsXG4gICAgSnNvblJwY1Byb3ZpZGVyLFxuICAgIEpzb25ScGNCYXRjaFByb3ZpZGVyLFxuICAgIE5vZGVzbWl0aFByb3ZpZGVyLFxuICAgIFBvY2tldFByb3ZpZGVyLFxuICAgIFN0YXRpY0pzb25ScGNQcm92aWRlcixcbiAgICBXZWIzUHJvdmlkZXIsXG4gICAgV2ViU29ja2V0UHJvdmlkZXIsXG5cbiAgICBJcGNQcm92aWRlcixcblxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBTaWduZXJcblxuICAgIEpzb25ScGNTaWduZXIsXG5cblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gRnVuY3Rpb25zXG5cbiAgICBnZXREZWZhdWx0UHJvdmlkZXIsXG4gICAgZ2V0TmV0d29yayxcbiAgICBpc0NvbW11bml0eVJlc291cmNlLFxuICAgIGlzQ29tbXVuaXR5UmVzb3VyY2FibGUsXG4gICAgc2hvd1Rocm90dGxlTWVzc2FnZSxcblxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBPYmplY3RzXG5cbiAgICBGb3JtYXR0ZXIsXG5cblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gVHlwZXNcblxuICAgIEJsb2NrLFxuICAgIEJsb2NrVGFnLFxuICAgIEV2ZW50VHlwZSxcbiAgICBGZWVEYXRhLFxuICAgIEZpbHRlcixcbiAgICBMb2csXG4gICAgTGlzdGVuZXIsXG4gICAgVHJhbnNhY3Rpb25SZWNlaXB0LFxuICAgIFRyYW5zYWN0aW9uUmVxdWVzdCxcbiAgICBUcmFuc2FjdGlvblJlc3BvbnNlLFxuXG4gICAgRXh0ZXJuYWxQcm92aWRlcixcbiAgICBKc29uUnBjRmV0Y2hGdW5jLFxuXG4gICAgRmFsbGJhY2tQcm92aWRlckNvbmZpZyxcblxuICAgIE5ldHdvcmssXG4gICAgTmV0d29ya2lzaCxcblxuICAgIEVuc1Byb3ZpZGVyLFxuICAgIEVuc1Jlc29sdmVyLFxuXG4gICAgQ29tbXVuaXR5UmVzb3VyY2FibGVcbn07XG5cbiIsImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gXCJzb2xpZGl0eS81LjcuMFwiO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IEJpZ051bWJlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iaWdudW1iZXJcIjtcbmltcG9ydCB7IGFycmF5aWZ5LCBjb25jYXQsIGhleGxpZnksIHplcm9QYWQgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IGtlY2NhazI1NiBhcyBoYXNoS2VjY2FrMjU2IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2tlY2NhazI1NlwiO1xuaW1wb3J0IHsgc2hhMjU2IGFzIGhhc2hTaGEyNTYgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvc2hhMlwiO1xuaW1wb3J0IHsgdG9VdGY4Qnl0ZXMgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvc3RyaW5nc1wiO1xuXG5jb25zdCByZWdleEJ5dGVzID0gbmV3IFJlZ0V4cChcIl5ieXRlcyhbMC05XSspJFwiKTtcbmNvbnN0IHJlZ2V4TnVtYmVyID0gbmV3IFJlZ0V4cChcIl4odT9pbnQpKFswLTldKikkXCIpO1xuY29uc3QgcmVnZXhBcnJheSA9IG5ldyBSZWdFeHAoXCJeKC4qKVxcXFxbKFswLTldKilcXFxcXSRcIik7XG5cbmNvbnN0IFplcm9zID0gXCIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCI7XG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi9fdmVyc2lvblwiO1xuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcblxuXG5mdW5jdGlvbiBfcGFjayh0eXBlOiBzdHJpbmcsIHZhbHVlOiBhbnksIGlzQXJyYXk/OiBib29sZWFuKTogVWludDhBcnJheSB7XG4gICAgc3dpdGNoKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcImFkZHJlc3NcIjpcbiAgICAgICAgICAgIGlmIChpc0FycmF5KSB7IHJldHVybiB6ZXJvUGFkKHZhbHVlLCAzMik7IH1cbiAgICAgICAgICAgIHJldHVybiBhcnJheWlmeSh2YWx1ZSk7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgIHJldHVybiB0b1V0ZjhCeXRlcyh2YWx1ZSk7XG4gICAgICAgIGNhc2UgXCJieXRlc1wiOlxuICAgICAgICAgICAgcmV0dXJuIGFycmF5aWZ5KHZhbHVlKTtcbiAgICAgICAgY2FzZSBcImJvb2xcIjpcbiAgICAgICAgICAgIHZhbHVlID0gKHZhbHVlID8gXCIweDAxXCI6IFwiMHgwMFwiKTtcbiAgICAgICAgICAgIGlmIChpc0FycmF5KSB7IHJldHVybiB6ZXJvUGFkKHZhbHVlLCAzMik7IH1cbiAgICAgICAgICAgIHJldHVybiBhcnJheWlmeSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgbGV0IG1hdGNoID0gIHR5cGUubWF0Y2gocmVnZXhOdW1iZXIpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICAvL2xldCBzaWduZWQgPSAobWF0Y2hbMV0gPT09IFwiaW50XCIpXG4gICAgICAgIGxldCBzaXplID0gcGFyc2VJbnQobWF0Y2hbMl0gfHwgXCIyNTZcIilcblxuICAgICAgICBpZiAoKG1hdGNoWzJdICYmIFN0cmluZyhzaXplKSAhPT0gbWF0Y2hbMl0pIHx8IChzaXplICUgOCAhPT0gMCkgfHwgc2l6ZSA9PT0gMCB8fCBzaXplID4gMjU2KSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCBudW1iZXIgdHlwZVwiLCBcInR5cGVcIiwgdHlwZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0FycmF5KSB7IHNpemUgPSAyNTY7IH1cblxuICAgICAgICB2YWx1ZSA9IEJpZ051bWJlci5mcm9tKHZhbHVlKS50b1R3b3Moc2l6ZSk7XG5cbiAgICAgICAgcmV0dXJuIHplcm9QYWQodmFsdWUsIHNpemUgLyA4KTtcbiAgICB9XG5cbiAgICBtYXRjaCA9IHR5cGUubWF0Y2gocmVnZXhCeXRlcyk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGNvbnN0IHNpemUgPSBwYXJzZUludChtYXRjaFsxXSk7XG5cbiAgICAgICAgaWYgKFN0cmluZyhzaXplKSAhPT0gbWF0Y2hbMV0gfHwgc2l6ZSA9PT0gMCB8fCBzaXplID4gMzIpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIGJ5dGVzIHR5cGVcIiwgXCJ0eXBlXCIsIHR5cGUpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFycmF5aWZ5KHZhbHVlKS5ieXRlTGVuZ3RoICE9PSBzaXplKSB7XG4gICAgICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKGBpbnZhbGlkIHZhbHVlIGZvciAkeyB0eXBlIH1gLCBcInZhbHVlXCIsIHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5KSB7IHJldHVybiBhcnJheWlmeSgodmFsdWUgKyBaZXJvcykuc3Vic3RyaW5nKDAsIDY2KSk7IH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIG1hdGNoID0gdHlwZS5tYXRjaChyZWdleEFycmF5KTtcbiAgICBpZiAobWF0Y2ggJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgYmFzZVR5cGUgPSBtYXRjaFsxXTtcbiAgICAgICAgY29uc3QgY291bnQgPSBwYXJzZUludChtYXRjaFsyXSB8fCBTdHJpbmcodmFsdWUubGVuZ3RoKSk7XG4gICAgICAgIGlmIChjb3VudCAhPSB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoYGludmFsaWQgYXJyYXkgbGVuZ3RoIGZvciAkeyB0eXBlIH1gLCBcInZhbHVlXCIsIHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdDogQXJyYXk8VWludDhBcnJheT4gPSBbXTtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goX3BhY2soYmFzZVR5cGUsIHZhbHVlLCB0cnVlKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29uY2F0KHJlc3VsdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJpbnZhbGlkIHR5cGVcIiwgXCJ0eXBlXCIsIHR5cGUpXG59XG5cbi8vIEBUT0RPOiBBcnJheSBFbnVtXG5cbmV4cG9ydCBmdW5jdGlvbiBwYWNrKHR5cGVzOiBSZWFkb25seUFycmF5PHN0cmluZz4sIHZhbHVlczogUmVhZG9ubHlBcnJheTxhbnk+KSB7XG4gICAgaWYgKHR5cGVzLmxlbmd0aCAhPSB2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ3cm9uZyBudW1iZXIgb2YgdmFsdWVzOyBleHBlY3RlZCAkeyB0eXBlcy5sZW5ndGggfVwiLCBcInZhbHVlc1wiLCB2YWx1ZXMpXG4gICAgfVxuICAgIGNvbnN0IHRpZ2h0OiBBcnJheTxVaW50OEFycmF5PiA9IFtdO1xuICAgIHR5cGVzLmZvckVhY2goZnVuY3Rpb24odHlwZSwgaW5kZXgpIHtcbiAgICAgICAgdGlnaHQucHVzaChfcGFjayh0eXBlLCB2YWx1ZXNbaW5kZXhdKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGhleGxpZnkoY29uY2F0KHRpZ2h0KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBrZWNjYWsyNTYodHlwZXM6IFJlYWRvbmx5QXJyYXk8c3RyaW5nPiwgdmFsdWVzOiBSZWFkb25seUFycmF5PGFueT4pIHtcbiAgICByZXR1cm4gaGFzaEtlY2NhazI1NihwYWNrKHR5cGVzLCB2YWx1ZXMpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoYTI1Nih0eXBlczogUmVhZG9ubHlBcnJheTxzdHJpbmc+LCB2YWx1ZXM6IFJlYWRvbmx5QXJyYXk8YW55Pikge1xuICAgIHJldHVybiBoYXNoU2hhMjU2KHBhY2sodHlwZXMsIHZhbHVlcykpO1xufVxuIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcInVuaXRzLzUuNy4wXCI7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgQmlnTnVtYmVyLCBCaWdOdW1iZXJpc2ggfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYmlnbnVtYmVyXCI7XG5pbXBvcnQgeyBmb3JtYXRGaXhlZCwgcGFyc2VGaXhlZCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iaWdudW1iZXJcIjtcblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2xvZ2dlclwiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL192ZXJzaW9uXCI7XG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKHZlcnNpb24pO1xuXG5jb25zdCBuYW1lcyA9IFtcbiAgICBcIndlaVwiLFxuICAgIFwia3dlaVwiLFxuICAgIFwibXdlaVwiLFxuICAgIFwiZ3dlaVwiLFxuICAgIFwic3phYm9cIixcbiAgICBcImZpbm5leVwiLFxuICAgIFwiZXRoZXJcIixcbl07XG5cblxuLy8gU29tZSBlbnZpcm9ubWVudHMgaGF2ZSBpc3N1ZXMgd2l0aCBSZWdFeCB0aGF0IGNvbnRhaW4gYmFjay10cmFja2luZywgc28gd2UgY2Fubm90XG4vLyB1c2UgdGhlbS5cbmV4cG9ydCBmdW5jdGlvbiBjb21taWZ5KHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IGNvbXBzID0gU3RyaW5nKHZhbHVlKS5zcGxpdChcIi5cIik7XG5cbiAgICBpZiAoY29tcHMubGVuZ3RoID4gMiB8fCAhY29tcHNbMF0ubWF0Y2goL14tP1swLTldKiQvKSB8fCAoY29tcHNbMV0gJiYgIWNvbXBzWzFdLm1hdGNoKC9eWzAtOV0qJC8pKSB8fCB2YWx1ZSA9PT0gXCIuXCIgfHwgdmFsdWUgPT09IFwiLS5cIikge1xuICAgICAgICBsb2dnZXIudGhyb3dBcmd1bWVudEVycm9yKFwiaW52YWxpZCB2YWx1ZVwiLCBcInZhbHVlXCIsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBNYWtlIHN1cmUgd2UgaGF2ZSBhdCBsZWFzdCBvbmUgd2hvbGUgZGlnaXQgKDAgaWYgbm9uZSlcbiAgICBsZXQgd2hvbGUgPSBjb21wc1swXTtcblxuICAgIGxldCBuZWdhdGl2ZSA9IFwiXCI7XG4gICAgaWYgKHdob2xlLnN1YnN0cmluZygwLCAxKSA9PT0gXCItXCIpIHtcbiAgICAgICAgbmVnYXRpdmUgPSBcIi1cIjtcbiAgICAgICAgd2hvbGUgPSB3aG9sZS5zdWJzdHJpbmcoMSk7XG4gICAgfVxuXG4gICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgYXQgbGVhc3QgMSB3aG9sZSBkaWdpdCB3aXRoIG5vIGxlYWRpbmcgemVyb3NcbiAgICB3aGlsZSAod2hvbGUuc3Vic3RyaW5nKDAsIDEpID09PSBcIjBcIikgeyB3aG9sZSA9IHdob2xlLnN1YnN0cmluZygxKTsgfVxuICAgIGlmICh3aG9sZSA9PT0gXCJcIikgeyB3aG9sZSA9IFwiMFwiOyB9XG5cbiAgICBsZXQgc3VmZml4ID0gXCJcIjtcbiAgICBpZiAoY29tcHMubGVuZ3RoID09PSAyKSB7IHN1ZmZpeCA9IFwiLlwiICsgKGNvbXBzWzFdIHx8IFwiMFwiKTsgfVxuICAgIHdoaWxlIChzdWZmaXgubGVuZ3RoID4gMiAmJiBzdWZmaXhbc3VmZml4Lmxlbmd0aCAtIDFdID09PSBcIjBcIikge1xuICAgICAgICBzdWZmaXggPSBzdWZmaXguc3Vic3RyaW5nKDAsIHN1ZmZpeC5sZW5ndGggLSAxKTtcbiAgICB9XG5cbiAgICBjb25zdCBmb3JtYXR0ZWQgPSBbXTtcbiAgICB3aGlsZSAod2hvbGUubGVuZ3RoKSB7XG4gICAgICAgIGlmICh3aG9sZS5sZW5ndGggPD0gMykge1xuICAgICAgICAgICAgZm9ybWF0dGVkLnVuc2hpZnQod2hvbGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHdob2xlLmxlbmd0aCAtIDM7XG4gICAgICAgICAgICBmb3JtYXR0ZWQudW5zaGlmdCh3aG9sZS5zdWJzdHJpbmcoaW5kZXgpKTtcbiAgICAgICAgICAgIHdob2xlID0gd2hvbGUuc3Vic3RyaW5nKDAsIGluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZWdhdGl2ZSArIGZvcm1hdHRlZC5qb2luKFwiLFwiKSArIHN1ZmZpeDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFVuaXRzKHZhbHVlOiBCaWdOdW1iZXJpc2gsIHVuaXROYW1lPzogc3RyaW5nIHwgQmlnTnVtYmVyaXNoKTogc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mKHVuaXROYW1lKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBpbmRleCA9IG5hbWVzLmluZGV4T2YodW5pdE5hbWUpO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7IHVuaXROYW1lID0gMyAqIGluZGV4OyB9XG4gICAgfVxuICAgIHJldHVybiBmb3JtYXRGaXhlZCh2YWx1ZSwgKHVuaXROYW1lICE9IG51bGwpID8gdW5pdE5hbWU6IDE4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVW5pdHModmFsdWU6IHN0cmluZywgdW5pdE5hbWU/OiBCaWdOdW1iZXJpc2gpOiBCaWdOdW1iZXIge1xuICAgIGlmICh0eXBlb2YodmFsdWUpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGxvZ2dlci50aHJvd0FyZ3VtZW50RXJyb3IoXCJ2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nXCIsIFwidmFsdWVcIiwgdmFsdWUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mKHVuaXROYW1lKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBpbmRleCA9IG5hbWVzLmluZGV4T2YodW5pdE5hbWUpO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7IHVuaXROYW1lID0gMyAqIGluZGV4OyB9XG4gICAgfVxuICAgIHJldHVybiBwYXJzZUZpeGVkKHZhbHVlLCAodW5pdE5hbWUgIT0gbnVsbCkgPyB1bml0TmFtZTogMTgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RXRoZXIod2VpOiBCaWdOdW1iZXJpc2gpOiBzdHJpbmcge1xuICAgIHJldHVybiBmb3JtYXRVbml0cyh3ZWksIDE4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRXRoZXIoZXRoZXI6IHN0cmluZyk6IEJpZ051bWJlciB7XG4gICAgcmV0dXJuIHBhcnNlVW5pdHMoZXRoZXIsIDE4KTtcbn1cblxuIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcImV0aGVycy81LjcuMFwiO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IEJhc2VDb250cmFjdCwgQ29udHJhY3QsIENvbnRyYWN0RmFjdG9yeSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9jb250cmFjdHNcIjtcblxuaW1wb3J0IHsgQmlnTnVtYmVyLCBGaXhlZE51bWJlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iaWdudW1iZXJcIjtcblxuaW1wb3J0IHsgU2lnbmVyLCBWb2lkU2lnbmVyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2Fic3RyYWN0LXNpZ25lclwiO1xuaW1wb3J0IHsgV2FsbGV0IH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3dhbGxldFwiO1xuXG5pbXBvcnQgKiBhcyBjb25zdGFudHMgZnJvbSBcIkBldGhlcnNwcm9qZWN0L2NvbnN0YW50c1wiO1xuXG5pbXBvcnQgKiBhcyBwcm92aWRlcnMgZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3ZpZGVyc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdFByb3ZpZGVyIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3Byb3ZpZGVyc1wiO1xuXG5pbXBvcnQgeyBXb3JkbGlzdCwgd29yZGxpc3RzfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvd29yZGxpc3RzXCI7XG5cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gXCIuL3V0aWxzXCI7XG5cbmltcG9ydCB7IEVycm9yQ29kZSBhcyBlcnJvcnMsIExvZ2dlciB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9sb2dnZXJcIjtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBUeXBlc1xuXG5pbXBvcnQgdHlwZSB7IFR5cGVkRGF0YURvbWFpbiwgVHlwZWREYXRhRmllbGQgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYWJzdHJhY3Qtc2lnbmVyXCI7XG5pbXBvcnQgeyBCaWdOdW1iZXJpc2ggfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYmlnbnVtYmVyXCI7XG5pbXBvcnQgeyBCeXRlcywgQnl0ZXNMaWtlLCBTaWduYXR1cmUgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIjtcbmltcG9ydCB7IFRyYW5zYWN0aW9uLCBVbnNpZ25lZFRyYW5zYWN0aW9uIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3RyYW5zYWN0aW9uc1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gQ29tcGlsZS1UaW1lIENvbnN0YW50c1xuXG4vLyBUaGlzIGlzIGdlbmVyYXRlZCBieSBcIm5wbSBydW4gZGlzdFwiXG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4vX3ZlcnNpb25cIjtcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcih2ZXJzaW9uKTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBUeXBlc1xuXG5pbXBvcnQge1xuICAgIENvbnRyYWN0RnVuY3Rpb24sXG4gICAgQ29udHJhY3RSZWNlaXB0LFxuICAgIENvbnRyYWN0VHJhbnNhY3Rpb24sXG5cbiAgICBFdmVudCxcbiAgICBFdmVudEZpbHRlcixcblxuICAgIE92ZXJyaWRlcyxcbiAgICBQYXlhYmxlT3ZlcnJpZGVzLFxuICAgIENhbGxPdmVycmlkZXMsXG5cbiAgICBQb3B1bGF0ZWRUcmFuc2FjdGlvbixcblxuICAgIENvbnRyYWN0SW50ZXJmYWNlXG59IGZyb20gXCJAZXRoZXJzcHJvamVjdC9jb250cmFjdHNcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEV4cG9ydHNcblxuZXhwb3J0IHtcbiAgICBTaWduZXIsXG5cbiAgICBXYWxsZXQsXG4gICAgVm9pZFNpZ25lcixcblxuICAgIGdldERlZmF1bHRQcm92aWRlcixcbiAgICBwcm92aWRlcnMsXG5cbiAgICBCYXNlQ29udHJhY3QsXG4gICAgQ29udHJhY3QsXG4gICAgQ29udHJhY3RGYWN0b3J5LFxuXG4gICAgQmlnTnVtYmVyLFxuICAgIEZpeGVkTnVtYmVyLFxuXG4gICAgY29uc3RhbnRzLFxuICAgIGVycm9ycyxcblxuICAgIGxvZ2dlcixcblxuICAgIHV0aWxzLFxuXG4gICAgd29yZGxpc3RzLFxuXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBDb21waWxlLVRpbWUgQ29uc3RhbnRzXG5cbiAgICB2ZXJzaW9uLFxuXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBUeXBlc1xuXG4gICAgQ29udHJhY3RGdW5jdGlvbixcbiAgICBDb250cmFjdFJlY2VpcHQsXG4gICAgQ29udHJhY3RUcmFuc2FjdGlvbixcbiAgICBFdmVudCxcbiAgICBFdmVudEZpbHRlcixcblxuICAgIE92ZXJyaWRlcyxcbiAgICBQYXlhYmxlT3ZlcnJpZGVzLFxuICAgIENhbGxPdmVycmlkZXMsXG5cbiAgICBQb3B1bGF0ZWRUcmFuc2FjdGlvbixcblxuICAgIENvbnRyYWN0SW50ZXJmYWNlLFxuXG4gICAgVHlwZWREYXRhRG9tYWluLFxuICAgIFR5cGVkRGF0YUZpZWxkLFxuXG4gICAgQmlnTnVtYmVyaXNoLFxuXG4gICAgQnl0ZXMsXG4gICAgQnl0ZXNMaWtlLFxuXG4gICAgU2lnbmF0dXJlLFxuXG4gICAgVHJhbnNhY3Rpb24sXG4gICAgVW5zaWduZWRUcmFuc2FjdGlvbixcblxuICAgIFdvcmRsaXN0XG59O1xuXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gVG8gbW9kaWZ5IHRoaXMgZmlsZSwgeW91IG11c3QgdXBkYXRlIC4vbWlzYy9hZG1pbi9saWIvY21kcy91cGRhdGUtZXhwb3J0cy5qc1xuXG5pbXBvcnQgKiBhcyBldGhlcnMgZnJvbSBcIi4vZXRoZXJzXCI7XG5cbnRyeSB7XG4gICAgY29uc3QgYW55R2xvYmFsID0gKHdpbmRvdyBhcyBhbnkpO1xuXG4gICAgaWYgKGFueUdsb2JhbC5fZXRoZXJzID09IG51bGwpIHtcbiAgICAgICAgYW55R2xvYmFsLl9ldGhlcnMgPSBldGhlcnM7XG4gICAgfVxufSBjYXRjaCAoZXJyb3IpIHsgfVxuXG5leHBvcnQgeyBldGhlcnMgfTtcblxuZXhwb3J0IHtcbiAgICBTaWduZXIsXG5cbiAgICBXYWxsZXQsXG4gICAgVm9pZFNpZ25lcixcblxuICAgIGdldERlZmF1bHRQcm92aWRlcixcbiAgICBwcm92aWRlcnMsXG5cbiAgICBCYXNlQ29udHJhY3QsXG4gICAgQ29udHJhY3QsXG4gICAgQ29udHJhY3RGYWN0b3J5LFxuXG4gICAgQmlnTnVtYmVyLFxuICAgIEZpeGVkTnVtYmVyLFxuXG4gICAgY29uc3RhbnRzLFxuICAgIGVycm9ycyxcblxuICAgIGxvZ2dlcixcblxuICAgIHV0aWxzLFxuXG4gICAgd29yZGxpc3RzLFxuXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBDb21waWxlLVRpbWUgQ29uc3RhbnRzXG5cbiAgICB2ZXJzaW9uLFxuXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBUeXBlc1xuXG4gICAgQ29udHJhY3RGdW5jdGlvbixcbiAgICBDb250cmFjdFJlY2VpcHQsXG4gICAgQ29udHJhY3RUcmFuc2FjdGlvbixcbiAgICBFdmVudCxcbiAgICBFdmVudEZpbHRlcixcblxuICAgIE92ZXJyaWRlcyxcbiAgICBQYXlhYmxlT3ZlcnJpZGVzLFxuICAgIENhbGxPdmVycmlkZXMsXG5cbiAgICBQb3B1bGF0ZWRUcmFuc2FjdGlvbixcblxuICAgIENvbnRyYWN0SW50ZXJmYWNlLFxuXG4gICAgVHlwZWREYXRhRG9tYWluLFxuICAgIFR5cGVkRGF0YUZpZWxkLFxuXG4gICAgQmlnTnVtYmVyaXNoLFxuXG4gICAgQnl0ZXMsXG4gICAgQnl0ZXNMaWtlLFxuXG4gICAgU2lnbmF0dXJlLFxuXG4gICAgVHJhbnNhY3Rpb24sXG4gICAgVW5zaWduZWRUcmFuc2FjdGlvbixcblxuICAgIFdvcmRsaXN0XG59IGZyb20gXCIuL2V0aGVyc1wiO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmaW5lUHJvcGVydHk7XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSBpbiBvYmopIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn1cbiIsImV4cG9ydCBsZXQgY3JlYXRlTmFub0V2ZW50cyA9ICgpID0+ICh7XG4gIGV2ZW50czoge30sXG4gIGVtaXQoZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICA7KHRoaXMuZXZlbnRzW2V2ZW50XSB8fCBbXSkuZm9yRWFjaChpID0+IGkoLi4uYXJncykpXG4gIH0sXG4gIG9uKGV2ZW50LCBjYikge1xuICAgIDsodGhpcy5ldmVudHNbZXZlbnRdID0gdGhpcy5ldmVudHNbZXZlbnRdIHx8IFtdKS5wdXNoKGNiKVxuICAgIHJldHVybiAoKSA9PlxuICAgICAgKHRoaXMuZXZlbnRzW2V2ZW50XSA9ICh0aGlzLmV2ZW50c1tldmVudF0gfHwgW10pLmZpbHRlcihpID0+IGkgIT09IGNiKSlcbiAgfVxufSlcbiIsImltcG9ydCB7IGNyZWF0ZU5hbm9FdmVudHMgYXMgY3JlYXRlRW1pdHRlciB9IGZyb20gXCJuYW5vZXZlbnRzXCI7XG5pbXBvcnQgdHlwZSB7IEVtaXR0ZXIgfSBmcm9tIFwibmFub2V2ZW50c1wiO1xuXG5pbnRlcmZhY2UgRXZlbnRzPFN0YXRlPiB7XG4gIGNoYW5nZTogKHN0YXRlOiBTdGF0ZSwgcHJldlN0YXRlOiBTdGF0ZSkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZXRTdGF0ZUFjdGlvbjxTPiB7XG4gIChzdGF0ZTogUyk6IFM7XG59XG5cbmZ1bmN0aW9uIGlzU2V0U3RhdGVBY3Rpb248Uz4oeDogUyB8IFNldFN0YXRlQWN0aW9uPFM+KTogeCBpcyBTZXRTdGF0ZUFjdGlvbjxTPiB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiO1xufVxuXG5leHBvcnQgY2xhc3MgU3RvcmU8Uz4ge1xuICBzdGF0ZTogUztcbiAgcHJpdmF0ZSBlbWl0dGVyOiBFbWl0dGVyPEV2ZW50czxTPj47XG5cbiAgY29uc3RydWN0b3IoaW5pdGlhbFN0YXRlOiBTKSB7XG4gICAgdGhpcy5zdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICB0aGlzLmVtaXR0ZXIgPSBjcmVhdGVFbWl0dGVyPEV2ZW50czxTPj4oKTtcbiAgfVxuXG4gIG9uPEsgZXh0ZW5kcyBrZXlvZiBFdmVudHM8Uz4+KGV2ZW50OiBLLCBjYjogRXZlbnRzPFM+W0tdKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vbihldmVudCwgY2IpO1xuICB9XG5cbiAgZ2V0U3RhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGU7XG4gIH1cblxuICBzZXRTdGF0ZShzdGF0ZU9yU3RhdGVTZXR0ZXI6IFMgfCBTZXRTdGF0ZUFjdGlvbjxTPikge1xuICAgIGxldCBuZXdTdGF0ZTogUztcbiAgICBpZiAoaXNTZXRTdGF0ZUFjdGlvbihzdGF0ZU9yU3RhdGVTZXR0ZXIpKSB7XG4gICAgICBuZXdTdGF0ZSA9IHN0YXRlT3JTdGF0ZVNldHRlcih0aGlzLnN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3U3RhdGUgPSBzdGF0ZU9yU3RhdGVTZXR0ZXI7XG4gICAgfVxuICAgIGlmIChuZXdTdGF0ZSA9PT0gdGhpcy5zdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwcmV2U3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIHRoaXMuc3RhdGUgPSBuZXdTdGF0ZTtcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdChcImNoYW5nZVwiLCB0aGlzLnN0YXRlLCBwcmV2U3RhdGUpO1xuICB9XG5cbiAgc2V0U3RhdGVTaWxlbnQoc3RhdGU6IFMpIHtcbiAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZvcm1EYXRhU3RvcmU8XG4gIEZvcm1EYXRhT2JqZWN0IGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBhbnkgfVxuPiBleHRlbmRzIFN0b3JlPEZvcm1EYXRhT2JqZWN0PiB7XG4gIGluaXRpYWxTdGF0ZTogRm9ybURhdGFPYmplY3Q7XG5cbiAgY29uc3RydWN0b3IoaW5pdGlhbFN0YXRlOiBGb3JtRGF0YU9iamVjdCkge1xuICAgIHN1cGVyKGluaXRpYWxTdGF0ZSk7XG4gICAgdGhpcy5pbml0aWFsU3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gIH1cblxuICBzZXRWYWx1ZSA9IChcbiAgICBrZXk6IGtleW9mIEZvcm1EYXRhT2JqZWN0LFxuICAgIHZhbHVlOiBGb3JtRGF0YU9iamVjdFtrZXlvZiBGb3JtRGF0YU9iamVjdF1cbiAgKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSgoc3RhdGUpID0+XG4gICAgICBzdGF0ZVtrZXldID09PSB2YWx1ZSA/IHN0YXRlIDogeyAuLi5zdGF0ZSwgW2tleV06IHZhbHVlIH1cbiAgICApO1xuICB9O1xuXG4gIGhhbmRsZUNoYW5nZSA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQuY3VycmVudFRhcmdldCBhc1xuICAgICAgICB8IEhUTUxJbnB1dEVsZW1lbnRcbiAgICAgICAgfCBIVE1MU2VsZWN0RWxlbWVudDtcbiAgICAgIHRoaXMuc2V0VmFsdWUoXG4gICAgICAgIHRhcmdldC5uYW1lIGFzIGtleW9mIEZvcm1EYXRhT2JqZWN0LFxuICAgICAgICB0YXJnZXQudmFsdWUgYXMgRm9ybURhdGFPYmplY3Rba2V5b2YgRm9ybURhdGFPYmplY3RdXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICByZXNldCA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHRoaXMuaW5pdGlhbFN0YXRlKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBpc1RydXRoeTxUPih0OiBUIHwgdW5kZWZpbmVkIHwgbnVsbCB8IHZvaWQpOiB0IGlzIFQge1xuICByZXR1cm4gdCAhPSBudWxsO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGNhcGl0YWxpemU8VCBleHRlbmRzIHN0cmluZz4odmFsdWU6IFQpOiBDYXBpdGFsaXplPFQ+IHtcbiAgY29uc3QgcmVzdWx0ID0gdmFsdWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB2YWx1ZS5zbGljZSgxKTtcbiAgcmV0dXJuIHJlc3VsdCBhcyBDYXBpdGFsaXplPFQ+O1xufVxuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbjtcbiIsInZhciBjb3JlSnNEYXRhID0gcmVxdWlyZSgnLi9fY29yZUpzRGF0YScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFza2VkO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZUpzRGF0YTtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1NvdXJjZTtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNNYXNrZWQgPSByZXF1aXJlKCcuL19pc01hc2tlZCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYXRpdmU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRWYWx1ZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVDcmVhdGU7XG4iLCJ2YXIgYmFzZUlzTmF0aXZlID0gcmVxdWlyZSgnLi9fYmFzZUlzTmF0aXZlJyksXG4gICAgZ2V0VmFsdWUgPSByZXF1aXJlKCcuL19nZXRWYWx1ZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5hdGl2ZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaENsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoRGVsZXRlO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEdldDtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hIYXM7XG4iLCJ2YXIgaGFzaENsZWFyID0gcmVxdWlyZSgnLi9faGFzaENsZWFyJyksXG4gICAgaGFzaERlbGV0ZSA9IHJlcXVpcmUoJy4vX2hhc2hEZWxldGUnKSxcbiAgICBoYXNoR2V0ID0gcmVxdWlyZSgnLi9faGFzaEdldCcpLFxuICAgIGhhc2hIYXMgPSByZXF1aXJlKCcuL19oYXNoSGFzJyksXG4gICAgaGFzaFNldCA9IHJlcXVpcmUoJy4vX2hhc2hTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaDtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaFNldDtcbiIsIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVDbGVhcjtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxO1xuIiwidmFyIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc29jSW5kZXhPZjtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZURlbGV0ZTtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVHZXQ7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUhhcztcbiIsInZhciBsaXN0Q2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUNsZWFyJyksXG4gICAgbGlzdENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlRGVsZXRlJyksXG4gICAgbGlzdENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlR2V0JyksXG4gICAgbGlzdENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlSGFzJyksXG4gICAgbGlzdENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q2FjaGU7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVTZXQ7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwO1xuIiwidmFyIEhhc2ggPSByZXF1aXJlKCcuL19IYXNoJyksXG4gICAgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUNsZWFyO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5YWJsZTtcbiIsInZhciBpc0tleWFibGUgPSByZXF1aXJlKCcuL19pc0tleWFibGUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcERhdGE7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVEZWxldGU7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlR2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVIYXM7XG4iLCJ2YXIgbWFwQ2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX21hcENhY2hlQ2xlYXInKSxcbiAgICBtYXBDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX21hcENhY2hlRGVsZXRlJyksXG4gICAgbWFwQ2FjaGVHZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZUdldCcpLFxuICAgIG1hcENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVIYXMnKSxcbiAgICBtYXBDYWNoZVNldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcENhY2hlO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZVNldDtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplO1xuIiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnbG9kYXNoL21lbW9pemUnO1xuXG5leHBvcnQgY2xhc3MgQ2hhaW4ge1xuICBwcml2YXRlIHZhbHVlOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVDaGFpbiA9IG1lbW9pemUoKGNoYWluOiBzdHJpbmcpID0+IG5ldyBDaGFpbihjaGFpbikpO1xuIiwiZXhwb3J0IGNvbnN0IEFMQ0hFTVlfS0VZID0gcHJvY2Vzcy5lbnYuQUxDSEVNWV9LRVk7XG5leHBvcnQgY29uc3QgREVGSV9TREtfQVBJX1VSTCA9IHByb2Nlc3MuZW52LkRFRklfU0RLX0FQSV9VUkw7XG5leHBvcnQgY29uc3QgREVGSV9TREtfQVBJX1RPS0VOID0gcHJvY2Vzcy5lbnYuREVGSV9TREtfQVBJX1RPS0VOO1xuIiwiaW1wb3J0IHsgQUxDSEVNWV9LRVkgfSBmcm9tICdzcmMvZW52L2NvbmZpZyc7XG5cbmV4cG9ydCBjb25zdCBrZXlzID0ge1xuICBBUkJJVFJVTV9JTkZVUkFfQVBJX0tFWTogJ2UyZTQwYTMwZGM4MzQ0NWU4YjRkNWQ3Yzg4Zjg1Mjc2JyxcbiAgQVVST1JBX0FQSV9LRVk6ICcyWmFXNGVUTG9IOXdycjNONWpNZlNreUdYQTlQTEpEUmI1alpkSFY1OTFtcicsXG4gIEVUSEVSRVVNX0FMQ0hFTVlfQVBJX0tFWTogQUxDSEVNWV9LRVkgYXMgc3RyaW5nLFxuICBPUFRJTUlTTV9JTkZVUkFfQVBJX0tFWTogJ2UyZTQwYTMwZGM4MzQ0NWU4YjRkNWQ3Yzg4Zjg1Mjc2JyxcbiAgUE9MWUdPTl9JTkZVUkFfQVBJX0tFWTogJ2UyZTQwYTMwZGM4MzQ0NWU4YjRkNWQ3Yzg4Zjg1Mjc2JyxcbiAgU09MQU5BX0FQSV9LRVk6ICcnLFxufTtcblxuZXhwb3J0IHR5cGUgS2V5cyA9IHR5cGVvZiBrZXlzO1xuXG50eXBlIEtleSA9IGtleW9mIEtleXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseUtleVRvRW5kcG9pbnQoZW5kcG9pbnQ6IHN0cmluZywga2V5czogS2V5cykge1xuICAvKipcbiAgICogaW5wdXQ6IGh0dHBzOi8vZXRoLW1haW5uZXQuYWxjaGVteWFwaS5pby92Mi97RVRIRVJFVU1fQUxDSEVNWV9BUElfS0VZfVxuICAgKiBvdXRwdXQ6IGh0dHBzOi8vZXRoLW1haW5uZXQuYWxjaGVteWFwaS5pby92Mi9rZXlWYWx1ZVxuICAgKi9cbiAgbGV0IHJlc3VsdCA9IGVuZHBvaW50O1xuICBmb3IgKGNvbnN0IGtleSBpbiBrZXlzKSB7XG4gICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoYHske2tleX19YCwga2V5c1trZXkgYXMgS2V5XSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCB0eXBlIHsgQXNzZXQgfSBmcm9tICdkZWZpLXNkayc7XG5pbXBvcnQgdHlwZSB7IENoYWluIH0gZnJvbSAnLi9DaGFpbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBc3NldEltcGxlbWVudGF0aW9uSW5DaGFpbih7XG4gIGFzc2V0LFxuICBjaGFpbixcbn06IHtcbiAgYXNzZXQ/OiBBc3NldDtcbiAgY2hhaW46IENoYWluO1xufSkge1xuICByZXR1cm4gYXNzZXQ/LmltcGxlbWVudGF0aW9ucz8uW1N0cmluZyhjaGFpbildO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVjaW1hbHMoeyBhc3NldCwgY2hhaW4gfTogeyBhc3NldDogQXNzZXQ7IGNoYWluOiBDaGFpbiB9KSB7XG4gIHJldHVybiAoXG4gICAgZ2V0QXNzZXRJbXBsZW1lbnRhdGlvbkluQ2hhaW4oeyBhc3NldCwgY2hhaW4gfSk/LmRlY2ltYWxzIHx8IGFzc2V0LmRlY2ltYWxzXG4gICk7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRBZGRyZXNzID0gKHtcbiAgYXNzZXQsXG4gIGNoYWluLFxufToge1xuICBhc3NldD86IEFzc2V0O1xuICBjaGFpbjogQ2hhaW47XG59KTogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCA9PiB7XG4gIGNvbnN0IGNoYWluSW1wbGVtZW50YXRpb24gPSBnZXRBc3NldEltcGxlbWVudGF0aW9uSW5DaGFpbih7IGFzc2V0LCBjaGFpbiB9KTtcbiAgcmV0dXJuIGNoYWluSW1wbGVtZW50YXRpb24gPyBjaGFpbkltcGxlbWVudGF0aW9uLmFkZHJlc3MgOiB1bmRlZmluZWQ7XG59O1xuIiwiaW1wb3J0IHR5cGUgeyBBc3NldCB9IGZyb20gJ2RlZmktc2RrJztcbmltcG9ydCB7IGlzVHJ1dGh5IH0gZnJvbSAnaXMtdHJ1dGh5LXRzJztcbmltcG9ydCB7IGNhcGl0YWxpemUgfSBmcm9tICdjYXBpdGFsaXplLXRzJztcbmltcG9ydCB0eXBlIHsgQWRkRXRoZXJldW1DaGFpblBhcmFtZXRlciB9IGZyb20gJ3NyYy9tb2R1bGVzL2V0aGVyZXVtL3R5cGVzL0FkZEV0aGVyZXVtQ2hhaW5QYXJhbWV0ZXInO1xuaW1wb3J0IHR5cGUgeyBDaGFpbiB9IGZyb20gJy4vQ2hhaW4nO1xuaW1wb3J0IHsgY3JlYXRlQ2hhaW4gfSBmcm9tICcuL0NoYWluJztcbmltcG9ydCB7IE5ldHdvcmtDb25maWcgfSBmcm9tICcuL05ldHdvcmtDb25maWcnO1xuaW1wb3J0IHsgYXBwbHlLZXlUb0VuZHBvaW50LCBrZXlzIGFzIGRlZmF1bHRLZXlzIH0gZnJvbSAnLi9rZXlzJztcbmltcG9ydCB0eXBlIHsgS2V5cyB9IGZyb20gJy4va2V5cyc7XG5pbXBvcnQgdHlwZSB7IFRyYW5zYWN0aW9uUHVycG9zZSB9IGZyb20gJy4vVHJhbnNhY3Rpb25QdXJwb3NlJztcbmltcG9ydCB7IGdldEFkZHJlc3MgfSBmcm9tICcuL2Fzc2V0JztcblxuZnVuY3Rpb24gdG9Db2xsZWN0aW9uPFQsIEs+KFxuICBpdGVtczogVFtdLFxuICBnZXRLZXk6IChpdGVtOiBUKSA9PiBzdHJpbmcsXG4gIGdldEl0ZW06IChpdGVtOiBUKSA9PiBLXG4pIHtcbiAgY29uc3QgcmVzdWx0OiB7IFtrZXk6IHN0cmluZ106IFJldHVyblR5cGU8dHlwZW9mIGdldEl0ZW0+IH0gPSB7fTtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgcmVzdWx0W2dldEtleShpdGVtKV0gPSBnZXRJdGVtKGl0ZW0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGxvY2FsZUNvbXBhcmVXaXRoUHJpb3JpdHkoXG4gIHN0cjE6IHN0cmluZyxcbiAgc3RyMjogc3RyaW5nLFxuICBwcmlvcml0eVN0cmluZz86IHN0cmluZ1xuKSB7XG4gIGlmIChwcmlvcml0eVN0cmluZykge1xuICAgIGlmIChzdHIxID09PSBwcmlvcml0eVN0cmluZykge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBpZiAoc3RyMiA9PT0gcHJpb3JpdHlTdHJpbmcpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyMS5sb2NhbGVDb21wYXJlKHN0cjIpO1xufVxuXG5leHBvcnQgY2xhc3MgTmV0d29ya3Mge1xuICBwcml2YXRlIG5ldHdvcmtzOiBOZXR3b3JrQ29uZmlnW107XG4gIHByaXZhdGUga2V5czogS2V5cztcbiAgcHJpdmF0ZSBjb2xsZWN0aW9uOiB7IFtrZXk6IHN0cmluZ106IE5ldHdvcmtDb25maWcgfCB1bmRlZmluZWQgfTtcbiAgcHJpdmF0ZSBuYW1lVG9JZDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbiAgc3RhdGljIHB1cnBvc2VLZXlNYXAgPSB7XG4gICAgc2VuZGluZzogJ3N1cHBvcnRzX3NlbmRpbmcnLFxuICAgIHRyYWRpbmc6ICdzdXBwb3J0c190cmFkaW5nJyxcbiAgICBicmlkZ2U6ICdzdXBwb3J0c19icmlkZ2UnLFxuICB9IGFzIGNvbnN0O1xuXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBuZXR3b3JrcyxcbiAgICBrZXlzID0gZGVmYXVsdEtleXMsXG4gIH06IHtcbiAgICBuZXR3b3JrczogTmV0d29ya0NvbmZpZ1tdO1xuICAgIGtleXM/OiBLZXlzO1xuICB9KSB7XG4gICAgdGhpcy5uZXR3b3JrcyA9IG5ldHdvcmtzLnNvcnQoKGEsIGIpID0+XG4gICAgICBsb2NhbGVDb21wYXJlV2l0aFByaW9yaXR5KGEubmFtZSwgYi5uYW1lLCAnRXRoZXJldW0nKVxuICAgICk7XG4gICAgdGhpcy5rZXlzID0ga2V5cztcbiAgICB0aGlzLmNvbGxlY3Rpb24gPSB0b0NvbGxlY3Rpb24oXG4gICAgICB0aGlzLm5ldHdvcmtzLFxuICAgICAgKG5ldHdvcmspID0+IG5ldHdvcmsuZXh0ZXJuYWxfaWQsXG4gICAgICAoeCkgPT4geFxuICAgICk7XG4gICAgdGhpcy5uYW1lVG9JZCA9IHRvQ29sbGVjdGlvbihcbiAgICAgIHRoaXMubmV0d29ya3MsXG4gICAgICAobmV0d29ya3MpID0+IG5ldHdvcmtzLmNoYWluLFxuICAgICAgKG5ldHdvcmspID0+IG5ldHdvcmsuZXh0ZXJuYWxfaWRcbiAgICApO1xuICB9XG5cbiAgc3RhdGljIGdldE5hbWUobmV0d29yazogTmV0d29ya0NvbmZpZykge1xuICAgIHJldHVybiBuZXR3b3JrLm5hbWUgfHwgY2FwaXRhbGl6ZShuZXR3b3JrLmNoYWluKTtcbiAgfVxuXG4gIHByaXZhdGUgdG9JZChjaGFpbjogQ2hhaW4pIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lVG9JZFtjaGFpbi50b1N0cmluZygpXTtcbiAgfVxuXG4gIGdldE5ldHdvcmtzKCkge1xuICAgIHJldHVybiB0aGlzLm5ldHdvcmtzO1xuICB9XG5cbiAgZ2V0Q2hhaW5JZChjaGFpbjogQ2hhaW4pIHtcbiAgICByZXR1cm4gdGhpcy50b0lkKGNoYWluKTtcbiAgfVxuXG4gIGdldE5hdGl2ZUFzc2V0SWRzRm9yVHJhZGluZygpIHtcbiAgICByZXR1cm4gdGhpcy5uZXR3b3Jrc1xuICAgICAgLmZpbHRlcigobmV0d29yaykgPT4gbmV0d29yay5zdXBwb3J0c190cmFkaW5nICYmIG5ldHdvcmsubmF0aXZlX2Fzc2V0KVxuICAgICAgLm1hcCgobmV0d29yaykgPT4gbmV0d29yay5uYXRpdmVfYXNzZXQ/LmlkKVxuICAgICAgLmZpbHRlcihpc1RydXRoeSk7XG4gIH1cblxuICBnZXRDaGFpbk5hbWUoY2hhaW46IENoYWluKSB7XG4gICAgcmV0dXJuIHRoaXMuY29sbGVjdGlvblt0aGlzLnRvSWQoY2hhaW4pXT8ubmFtZSB8fCBjYXBpdGFsaXplKFN0cmluZyhjaGFpbikpO1xuICB9XG5cbiAgZ2V0TmV0d29ya0J5SWQoY2hhaW5JZDogc3RyaW5nKSB7XG4gICAgY29uc3QgbmV0d29yayA9IHRoaXMuY29sbGVjdGlvbltjaGFpbklkXTtcbiAgICBpZiAoIW5ldHdvcmspIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgbmV0d29yayBpZDogJHtjaGFpbklkfWApO1xuICAgIH1cbiAgICByZXR1cm4gbmV0d29yaztcbiAgfVxuXG4gIGdldE5ldHdvcmtCeU5hbWUoY2hhaW46IENoYWluKSB7XG4gICAgcmV0dXJuIHRoaXMuY29sbGVjdGlvblt0aGlzLnRvSWQoY2hhaW4pXTtcbiAgfVxuXG4gIGdldENoYWluQnlJZChjaGFpbklkOiBzdHJpbmcpOiBDaGFpbiB7XG4gICAgY29uc3QgbmV0d29yayA9IHRoaXMuZ2V0TmV0d29ya0J5SWQoY2hhaW5JZCk7XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluKG5ldHdvcmsuY2hhaW4pO1xuICB9XG5cbiAgZ2V0Q2hhaW5OYW1lQnlJZChjaGFpbklkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBuZXR3b3JrID0gdGhpcy5nZXROZXR3b3JrQnlJZChjaGFpbklkKTtcbiAgICByZXR1cm4gdGhpcy5nZXRDaGFpbk5hbWUoY3JlYXRlQ2hhaW4obmV0d29yay5jaGFpbikpO1xuICB9XG5cbiAgZ2V0RXhwbG9yZXJIb21lVXJsQnlOYW1lKGNoYWluOiBDaGFpbikge1xuICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb25bdGhpcy50b0lkKGNoYWluKV0/LmV4cGxvcmVyX2hvbWVfdXJsO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRFeHBsb3JlclR4VXJsKG5ldHdvcms6IE5ldHdvcmtDb25maWcgfCB1bmRlZmluZWQsIGhhc2g6IHN0cmluZykge1xuICAgIHJldHVybiBuZXR3b3JrPy5leHBsb3Jlcl90eF91cmw/LnJlcGxhY2UoJ3tIQVNIfScsIGhhc2gpO1xuICB9XG5cbiAgZ2V0RXhwbG9yZXJUeFVybEJ5SWQoY2hhaW5JZDogc3RyaW5nLCBoYXNoOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRFeHBsb3JlclR4VXJsKHRoaXMuY29sbGVjdGlvbltjaGFpbklkXSwgaGFzaCk7XG4gIH1cblxuICBnZXRFeHBsb3JlclR4VXJsQnlOYW1lKGNoYWluOiBDaGFpbiwgaGFzaDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RXhwbG9yZXJUeFVybCh0aGlzLmNvbGxlY3Rpb25bdGhpcy50b0lkKGNoYWluKV0sIGhhc2gpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRFeHBsb3JlclRva2VuVXJsKFxuICAgIG5ldHdvcms6IE5ldHdvcmtDb25maWcgfCB1bmRlZmluZWQsXG4gICAgYWRkcmVzczogc3RyaW5nXG4gICkge1xuICAgIHJldHVybiBuZXR3b3JrPy5leHBsb3Jlcl90b2tlbl91cmw/LnJlcGxhY2UoJ3tBRERSRVNTfScsIGFkZHJlc3MpO1xuICB9XG5cbiAgZ2V0RXhwbG9yZXJUb2tlblVybEJ5SWQoY2hhaW5JZDogc3RyaW5nLCBhZGRyZXNzOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRFeHBsb3JlclRva2VuVXJsKHRoaXMuY29sbGVjdGlvbltjaGFpbklkXSwgYWRkcmVzcyk7XG4gIH1cblxuICBnZXRFeHBsb3JlclRva2VuVXJsQnlOYW1lKGNoYWluOiBDaGFpbiwgYWRkcmVzczogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RXhwbG9yZXJUb2tlblVybCh0aGlzLmNvbGxlY3Rpb25bdGhpcy50b0lkKGNoYWluKV0sIGFkZHJlc3MpO1xuICB9XG5cbiAgZ2V0RXhwbG9yZXJOYW1lQnlJZChjaGFpbklkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uW2NoYWluSWRdPy5leHBsb3Jlcl9uYW1lO1xuICB9XG5cbiAgZ2V0RXRoZXJldW1DaGFpblBhcmFtZXRlcihjaGFpbklkOiBzdHJpbmcpOiBBZGRFdGhlcmV1bUNoYWluUGFyYW1ldGVyIHtcbiAgICBjb25zdCBuZXR3b3JrID0gdGhpcy5jb2xsZWN0aW9uW2NoYWluSWRdO1xuICAgIGlmICghbmV0d29yayB8fCAhbmV0d29yay5ycGNfdXJsX3B1YmxpYyB8fCAhbmV0d29yay5uYXRpdmVfYXNzZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgbmV0d29yayBpZDogJHtjaGFpbklkfWApO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgY2hhaW5JZCxcbiAgICAgIHJwY1VybHM6IG5ldHdvcmsucnBjX3VybF9wdWJsaWMsXG4gICAgICBjaGFpbk5hbWU6IG5ldHdvcmsubmFtZSxcbiAgICAgIG5hdGl2ZUN1cnJlbmN5OiB7XG4gICAgICAgIGNvZGU6IG5ldHdvcmsubmF0aXZlX2Fzc2V0LmFkZHJlc3MsXG4gICAgICAgIG5hbWU6IG5ldHdvcmsubmF0aXZlX2Fzc2V0Lm5hbWUsXG4gICAgICAgIHN5bWJvbDogbmV0d29yay5uYXRpdmVfYXNzZXQuc3ltYm9sLFxuICAgICAgICBkZWNpbWFsczogbmV0d29yay5uYXRpdmVfYXNzZXQuZGVjaW1hbHMgYXMgMTgsIC8vIMKvXFxfKOODhClfL8KvXG4gICAgICB9LFxuICAgICAgaWNvblVybHM6IFtuZXR3b3JrLmljb25fdXJsXSxcbiAgICAgIGJsb2NrRXhwbG9yZXJVcmxzOiBuZXR3b3JrLmV4cGxvcmVyX2hvbWVfdXJsXG4gICAgICAgID8gW25ldHdvcmsuZXhwbG9yZXJfaG9tZV91cmxdXG4gICAgICAgIDogW10sXG4gICAgfTtcbiAgfVxuXG4gIHN1cHBvcnRzKHB1cnBvc2U6IFRyYW5zYWN0aW9uUHVycG9zZSwgY2hhaW46IENoYWluKTogYm9vbGVhbiB7XG4gICAgY29uc3QgbmV0d29yayA9IHRoaXMuZ2V0TmV0d29ya0J5TmFtZShjaGFpbik7XG4gICAgaWYgKCFuZXR3b3JrKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGtleSA9IE5ldHdvcmtzLnB1cnBvc2VLZXlNYXBbcHVycG9zZV07XG4gICAgcmV0dXJuIG5ldHdvcmtba2V5XTtcbiAgfVxuXG4gIGlzTmF0aXZlQXNzZXQoYXNzZXQ6IEFzc2V0LCBjaGFpbklkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCBuZXR3b3JrID0gdGhpcy5nZXROZXR3b3JrQnlJZChjaGFpbklkKTtcbiAgICByZXR1cm4gbmV0d29yay5uYXRpdmVfYXNzZXRcbiAgICAgID8gZ2V0QWRkcmVzcyh7IGFzc2V0LCBjaGFpbjogY3JlYXRlQ2hhaW4obmV0d29yay5jaGFpbikgfSkgPT09XG4gICAgICAgICAgbmV0d29yay5uYXRpdmVfYXNzZXQuYWRkcmVzc1xuICAgICAgOiBmYWxzZTtcbiAgfVxuXG4gIGlzTmF0aXZlQWRkcmVzcyhhZGRyZXNzOiBzdHJpbmcgfCBudWxsLCBjaGFpbklkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCBuZXR3b3JrID0gdGhpcy5nZXROZXR3b3JrQnlJZChjaGFpbklkKTtcbiAgICBpZiAoIW5ldHdvcmsubmF0aXZlX2Fzc2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5hdGl2ZSBhc3NldCBpcyBub3QgZGVmaW5lZCBmb3I6ICR7Y2hhaW5JZH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldHdvcmsubmF0aXZlX2Fzc2V0XG4gICAgICA/IGFkZHJlc3MgPT09IG5ldHdvcmsubmF0aXZlX2Fzc2V0LmFkZHJlc3NcbiAgICAgIDogZmFsc2U7XG4gIH1cblxuICBnZXRScGNVcmxJbnRlcm5hbChjaGFpbjogQ2hhaW4pIHtcbiAgICBjb25zdCBuZXR3b3JrID0gdGhpcy5nZXROZXR3b3JrQnlOYW1lKGNoYWluKTtcbiAgICBpZiAoIW5ldHdvcmspIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGZpbmQgbmV0d29yazogJHtjaGFpbn1gKTtcbiAgICB9XG4gICAgaWYgKCFuZXR3b3JrLnJwY191cmxfaW50ZXJuYWwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTmV0d29yayB1cmwgbWlzc2luZzogJHtjaGFpbn1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGFwcGx5S2V5VG9FbmRwb2ludChuZXR3b3JrLnJwY191cmxfaW50ZXJuYWwsIHRoaXMua2V5cyk7XG4gIH1cbn1cbiIsImZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTsgaWYgKF9pID09IG51bGwpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfcywgX2U7IHRyeSB7IGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxuZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgLy8gQHRzLWlnbm9yZSAtIGZpbGUgc2l6ZSBoYWNrc1xuICAgIHJlcXVlc3Qub25jb21wbGV0ZSA9IHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlc29sdmUocmVxdWVzdC5yZXN1bHQpO1xuICAgIH07IC8vIEB0cy1pZ25vcmUgLSBmaWxlIHNpemUgaGFja3NcblxuXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlamVjdChyZXF1ZXN0LmVycm9yKTtcbiAgICB9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUoZGJOYW1lLCBzdG9yZU5hbWUpIHtcbiAgdmFyIHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihkYk5hbWUpO1xuXG4gIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZXF1ZXN0LnJlc3VsdC5jcmVhdGVPYmplY3RTdG9yZShzdG9yZU5hbWUpO1xuICB9O1xuXG4gIHZhciBkYnAgPSBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpO1xuICByZXR1cm4gZnVuY3Rpb24gKHR4TW9kZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZGJwLnRoZW4oZnVuY3Rpb24gKGRiKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCB0eE1vZGUpLm9iamVjdFN0b3JlKHN0b3JlTmFtZSkpO1xuICAgIH0pO1xuICB9O1xufVxuXG52YXIgZGVmYXVsdEdldFN0b3JlRnVuYztcblxuZnVuY3Rpb24gZGVmYXVsdEdldFN0b3JlKCkge1xuICBpZiAoIWRlZmF1bHRHZXRTdG9yZUZ1bmMpIHtcbiAgICBkZWZhdWx0R2V0U3RvcmVGdW5jID0gY3JlYXRlU3RvcmUoJ2tleXZhbC1zdG9yZScsICdrZXl2YWwnKTtcbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0R2V0U3RvcmVGdW5jO1xufVxuLyoqXG4gKiBHZXQgYSB2YWx1ZSBieSBpdHMga2V5LlxuICpcbiAqIEBwYXJhbSBrZXlcbiAqIEBwYXJhbSBjdXN0b21TdG9yZSBNZXRob2QgdG8gZ2V0IGEgY3VzdG9tIHN0b3JlLiBVc2Ugd2l0aCBjYXV0aW9uIChzZWUgdGhlIGRvY3MpLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0KGtleSkge1xuICB2YXIgY3VzdG9tU3RvcmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGRlZmF1bHRHZXRTdG9yZSgpO1xuICByZXR1cm4gY3VzdG9tU3RvcmUoJ3JlYWRvbmx5JywgZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3Qoc3RvcmUuZ2V0KGtleSkpO1xuICB9KTtcbn1cbi8qKlxuICogU2V0IGEgdmFsdWUgd2l0aCBhIGtleS5cbiAqXG4gKiBAcGFyYW0ga2V5XG4gKiBAcGFyYW0gdmFsdWVcbiAqIEBwYXJhbSBjdXN0b21TdG9yZSBNZXRob2QgdG8gZ2V0IGEgY3VzdG9tIHN0b3JlLiBVc2Ugd2l0aCBjYXV0aW9uIChzZWUgdGhlIGRvY3MpLlxuICovXG5cblxuZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGN1c3RvbVN0b3JlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBkZWZhdWx0R2V0U3RvcmUoKTtcbiAgcmV0dXJuIGN1c3RvbVN0b3JlKCdyZWFkd3JpdGUnLCBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICBzdG9yZS5wdXQodmFsdWUsIGtleSk7XG4gICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3Qoc3RvcmUudHJhbnNhY3Rpb24pO1xuICB9KTtcbn1cbi8qKlxuICogU2V0IG11bHRpcGxlIHZhbHVlcyBhdCBvbmNlLiBUaGlzIGlzIGZhc3RlciB0aGFuIGNhbGxpbmcgc2V0KCkgbXVsdGlwbGUgdGltZXMuXG4gKiBJdCdzIGFsc28gYXRvbWljIOKAkyBpZiBvbmUgb2YgdGhlIHBhaXJzIGNhbid0IGJlIGFkZGVkLCBub25lIHdpbGwgYmUgYWRkZWQuXG4gKlxuICogQHBhcmFtIGVudHJpZXMgQXJyYXkgb2YgZW50cmllcywgd2hlcmUgZWFjaCBlbnRyeSBpcyBhbiBhcnJheSBvZiBgW2tleSwgdmFsdWVdYC5cbiAqIEBwYXJhbSBjdXN0b21TdG9yZSBNZXRob2QgdG8gZ2V0IGEgY3VzdG9tIHN0b3JlLiBVc2Ugd2l0aCBjYXV0aW9uIChzZWUgdGhlIGRvY3MpLlxuICovXG5cblxuZnVuY3Rpb24gc2V0TWFueShlbnRyaWVzKSB7XG4gIHZhciBjdXN0b21TdG9yZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZGVmYXVsdEdldFN0b3JlKCk7XG4gIHJldHVybiBjdXN0b21TdG9yZSgncmVhZHdyaXRlJywgZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgZW50cmllcy5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgcmV0dXJuIHN0b3JlLnB1dChlbnRyeVsxXSwgZW50cnlbMF0pO1xuICAgIH0pO1xuICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLnRyYW5zYWN0aW9uKTtcbiAgfSk7XG59XG4vKipcbiAqIEdldCBtdWx0aXBsZSB2YWx1ZXMgYnkgdGhlaXIga2V5c1xuICpcbiAqIEBwYXJhbSBrZXlzXG4gKiBAcGFyYW0gY3VzdG9tU3RvcmUgTWV0aG9kIHRvIGdldCBhIGN1c3RvbSBzdG9yZS4gVXNlIHdpdGggY2F1dGlvbiAoc2VlIHRoZSBkb2NzKS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldE1hbnkoa2V5cykge1xuICB2YXIgY3VzdG9tU3RvcmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGRlZmF1bHRHZXRTdG9yZSgpO1xuICByZXR1cm4gY3VzdG9tU3RvcmUoJ3JlYWRvbmx5JywgZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKGtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLmdldChrZXkpKTtcbiAgICB9KSk7XG4gIH0pO1xufVxuLyoqXG4gKiBVcGRhdGUgYSB2YWx1ZS4gVGhpcyBsZXRzIHlvdSBzZWUgdGhlIG9sZCB2YWx1ZSBhbmQgdXBkYXRlIGl0IGFzIGFuIGF0b21pYyBvcGVyYXRpb24uXG4gKlxuICogQHBhcmFtIGtleVxuICogQHBhcmFtIHVwZGF0ZXIgQSBjYWxsYmFjayB0aGF0IHRha2VzIHRoZSBvbGQgdmFsdWUgYW5kIHJldHVybnMgYSBuZXcgdmFsdWUuXG4gKiBAcGFyYW0gY3VzdG9tU3RvcmUgTWV0aG9kIHRvIGdldCBhIGN1c3RvbSBzdG9yZS4gVXNlIHdpdGggY2F1dGlvbiAoc2VlIHRoZSBkb2NzKS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHVwZGF0ZShrZXksIHVwZGF0ZXIpIHtcbiAgdmFyIGN1c3RvbVN0b3JlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBkZWZhdWx0R2V0U3RvcmUoKTtcbiAgcmV0dXJuIGN1c3RvbVN0b3JlKCdyZWFkd3JpdGUnLCBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICByZXR1cm4gKC8vIE5lZWQgdG8gY3JlYXRlIHRoZSBwcm9taXNlIG1hbnVhbGx5LlxuICAgICAgLy8gSWYgSSB0cnkgdG8gY2hhaW4gcHJvbWlzZXMsIHRoZSB0cmFuc2FjdGlvbiBjbG9zZXMgaW4gYnJvd3NlcnNcbiAgICAgIC8vIHRoYXQgdXNlIGEgcHJvbWlzZSBwb2x5ZmlsbCAoSUUxMC8xMSkuXG4gICAgICBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHN0b3JlLmdldChrZXkpLm9uc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3RvcmUucHV0KHVwZGF0ZXIodGhpcy5yZXN1bHQpLCBrZXkpO1xuICAgICAgICAgICAgcmVzb2x2ZShwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLnRyYW5zYWN0aW9uKSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KVxuICAgICk7XG4gIH0pO1xufVxuLyoqXG4gKiBEZWxldGUgYSBwYXJ0aWN1bGFyIGtleSBmcm9tIHRoZSBzdG9yZS5cbiAqXG4gKiBAcGFyYW0ga2V5XG4gKiBAcGFyYW0gY3VzdG9tU3RvcmUgTWV0aG9kIHRvIGdldCBhIGN1c3RvbSBzdG9yZS4gVXNlIHdpdGggY2F1dGlvbiAoc2VlIHRoZSBkb2NzKS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGRlbChrZXkpIHtcbiAgdmFyIGN1c3RvbVN0b3JlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBkZWZhdWx0R2V0U3RvcmUoKTtcbiAgcmV0dXJuIGN1c3RvbVN0b3JlKCdyZWFkd3JpdGUnLCBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICBzdG9yZS5kZWxldGUoa2V5KTtcbiAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdChzdG9yZS50cmFuc2FjdGlvbik7XG4gIH0pO1xufVxuLyoqXG4gKiBEZWxldGUgbXVsdGlwbGUga2V5cyBhdCBvbmNlLlxuICpcbiAqIEBwYXJhbSBrZXlzIExpc3Qgb2Yga2V5cyB0byBkZWxldGUuXG4gKiBAcGFyYW0gY3VzdG9tU3RvcmUgTWV0aG9kIHRvIGdldCBhIGN1c3RvbSBzdG9yZS4gVXNlIHdpdGggY2F1dGlvbiAoc2VlIHRoZSBkb2NzKS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGRlbE1hbnkoa2V5cykge1xuICB2YXIgY3VzdG9tU3RvcmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGRlZmF1bHRHZXRTdG9yZSgpO1xuICByZXR1cm4gY3VzdG9tU3RvcmUoJ3JlYWR3cml0ZScsIGZ1bmN0aW9uIChzdG9yZSkge1xuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gc3RvcmUuZGVsZXRlKGtleSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3Qoc3RvcmUudHJhbnNhY3Rpb24pO1xuICB9KTtcbn1cbi8qKlxuICogQ2xlYXIgYWxsIHZhbHVlcyBpbiB0aGUgc3RvcmUuXG4gKlxuICogQHBhcmFtIGN1c3RvbVN0b3JlIE1ldGhvZCB0byBnZXQgYSBjdXN0b20gc3RvcmUuIFVzZSB3aXRoIGNhdXRpb24gKHNlZSB0aGUgZG9jcykuXG4gKi9cblxuXG5mdW5jdGlvbiBjbGVhcigpIHtcbiAgdmFyIGN1c3RvbVN0b3JlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBkZWZhdWx0R2V0U3RvcmUoKTtcbiAgcmV0dXJuIGN1c3RvbVN0b3JlKCdyZWFkd3JpdGUnLCBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICBzdG9yZS5jbGVhcigpO1xuICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLnRyYW5zYWN0aW9uKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGVhY2hDdXJzb3Ioc3RvcmUsIGNhbGxiYWNrKSB7XG4gIHN0b3JlLm9wZW5DdXJzb3IoKS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLnJlc3VsdCkgcmV0dXJuO1xuICAgIGNhbGxiYWNrKHRoaXMucmVzdWx0KTtcbiAgICB0aGlzLnJlc3VsdC5jb250aW51ZSgpO1xuICB9O1xuXG4gIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLnRyYW5zYWN0aW9uKTtcbn1cbi8qKlxuICogR2V0IGFsbCBrZXlzIGluIHRoZSBzdG9yZS5cbiAqXG4gKiBAcGFyYW0gY3VzdG9tU3RvcmUgTWV0aG9kIHRvIGdldCBhIGN1c3RvbSBzdG9yZS4gVXNlIHdpdGggY2F1dGlvbiAoc2VlIHRoZSBkb2NzKS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGtleXMoKSB7XG4gIHZhciBjdXN0b21TdG9yZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZGVmYXVsdEdldFN0b3JlKCk7XG4gIHJldHVybiBjdXN0b21TdG9yZSgncmVhZG9ubHknLCBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICAvLyBGYXN0IHBhdGggZm9yIG1vZGVybiBicm93c2Vyc1xuICAgIGlmIChzdG9yZS5nZXRBbGxLZXlzKSB7XG4gICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdChzdG9yZS5nZXRBbGxLZXlzKCkpO1xuICAgIH1cblxuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHJldHVybiBlYWNoQ3Vyc29yKHN0b3JlLCBmdW5jdGlvbiAoY3Vyc29yKSB7XG4gICAgICByZXR1cm4gaXRlbXMucHVzaChjdXJzb3Iua2V5KTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBpdGVtcztcbiAgICB9KTtcbiAgfSk7XG59XG4vKipcbiAqIEdldCBhbGwgdmFsdWVzIGluIHRoZSBzdG9yZS5cbiAqXG4gKiBAcGFyYW0gY3VzdG9tU3RvcmUgTWV0aG9kIHRvIGdldCBhIGN1c3RvbSBzdG9yZS4gVXNlIHdpdGggY2F1dGlvbiAoc2VlIHRoZSBkb2NzKS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgdmFyIGN1c3RvbVN0b3JlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBkZWZhdWx0R2V0U3RvcmUoKTtcbiAgcmV0dXJuIGN1c3RvbVN0b3JlKCdyZWFkb25seScsIGZ1bmN0aW9uIChzdG9yZSkge1xuICAgIC8vIEZhc3QgcGF0aCBmb3IgbW9kZXJuIGJyb3dzZXJzXG4gICAgaWYgKHN0b3JlLmdldEFsbCkge1xuICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3Qoc3RvcmUuZ2V0QWxsKCkpO1xuICAgIH1cblxuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHJldHVybiBlYWNoQ3Vyc29yKHN0b3JlLCBmdW5jdGlvbiAoY3Vyc29yKSB7XG4gICAgICByZXR1cm4gaXRlbXMucHVzaChjdXJzb3IudmFsdWUpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH0pO1xuICB9KTtcbn1cbi8qKlxuICogR2V0IGFsbCBlbnRyaWVzIGluIHRoZSBzdG9yZS4gRWFjaCBlbnRyeSBpcyBhbiBhcnJheSBvZiBgW2tleSwgdmFsdWVdYC5cbiAqXG4gKiBAcGFyYW0gY3VzdG9tU3RvcmUgTWV0aG9kIHRvIGdldCBhIGN1c3RvbSBzdG9yZS4gVXNlIHdpdGggY2F1dGlvbiAoc2VlIHRoZSBkb2NzKS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gIHZhciBjdXN0b21TdG9yZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZGVmYXVsdEdldFN0b3JlKCk7XG4gIHJldHVybiBjdXN0b21TdG9yZSgncmVhZG9ubHknLCBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICAvLyBGYXN0IHBhdGggZm9yIG1vZGVybiBicm93c2Vyc1xuICAgIC8vIChhbHRob3VnaCwgaG9wZWZ1bGx5IHdlJ2xsIGdldCBhIHNpbXBsZXIgcGF0aCBzb21lIGRheSlcbiAgICBpZiAoc3RvcmUuZ2V0QWxsICYmIHN0b3JlLmdldEFsbEtleXMpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChbcHJvbWlzaWZ5UmVxdWVzdChzdG9yZS5nZXRBbGxLZXlzKCkpLCBwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLmdldEFsbCgpKV0pLnRoZW4oZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgICAgICBrZXlzID0gX3JlZjJbMF0sXG4gICAgICAgICAgICB2YWx1ZXMgPSBfcmVmMlsxXTtcblxuICAgICAgICByZXR1cm4ga2V5cy5tYXAoZnVuY3Rpb24gKGtleSwgaSkge1xuICAgICAgICAgIHJldHVybiBba2V5LCB2YWx1ZXNbaV1dO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHJldHVybiBjdXN0b21TdG9yZSgncmVhZG9ubHknLCBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICAgIHJldHVybiBlYWNoQ3Vyc29yKHN0b3JlLCBmdW5jdGlvbiAoY3Vyc29yKSB7XG4gICAgICAgIHJldHVybiBpdGVtcy5wdXNoKFtjdXJzb3Iua2V5LCBjdXJzb3IudmFsdWVdKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCB7IGNsZWFyLCBjcmVhdGVTdG9yZSwgZGVsLCBkZWxNYW55LCBlbnRyaWVzLCBnZXQsIGdldE1hbnksIGtleXMsIHByb21pc2lmeVJlcXVlc3QsIHNldCwgc2V0TWFueSwgdXBkYXRlLCB2YWx1ZXMgfTtcbiIsImNvbnN0IHBlcmYgPVxuICB0eXBlb2YgcGVyZm9ybWFuY2UgPT09ICdvYmplY3QnICYmXG4gIHBlcmZvcm1hbmNlICYmXG4gIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbidcbiAgICA/IHBlcmZvcm1hbmNlXG4gICAgOiBEYXRlXG5cbmNvbnN0IGhhc0Fib3J0Q29udHJvbGxlciA9IHR5cGVvZiBBYm9ydENvbnRyb2xsZXIgPT09ICdmdW5jdGlvbidcblxuLy8gbWluaW1hbCBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSBwb2x5ZmlsbFxuLy8gdGhpcyBkb2Vzbid0IGhhdmUgbmVhcmx5IGFsbCB0aGUgY2hlY2tzIGFuZCB3aGF0bm90IHRoYXRcbi8vIGFjdHVhbCBBYm9ydENvbnRyb2xsZXIvU2lnbmFsIGhhcywgYnV0IGl0J3MgZW5vdWdoIGZvclxuLy8gb3VyIHB1cnBvc2VzLCBhbmQgaWYgdXNlZCBwcm9wZXJseSwgYmVoYXZlcyB0aGUgc2FtZS5cbmNvbnN0IEFDID0gaGFzQWJvcnRDb250cm9sbGVyXG4gID8gQWJvcnRDb250cm9sbGVyXG4gIDogY2xhc3MgQWJvcnRDb250cm9sbGVyIHtcbiAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnNpZ25hbCA9IG5ldyBBUygpXG4gICAgICB9XG4gICAgICBhYm9ydCgpIHtcbiAgICAgICAgdGhpcy5zaWduYWwuZGlzcGF0Y2hFdmVudCgnYWJvcnQnKVxuICAgICAgfVxuICAgIH1cblxuY29uc3QgaGFzQWJvcnRTaWduYWwgPSB0eXBlb2YgQWJvcnRTaWduYWwgPT09ICdmdW5jdGlvbidcbi8vIFNvbWUgcG9seWZpbGxzIHB1dCB0aGlzIG9uIHRoZSBBQyBjbGFzcywgbm90IGdsb2JhbFxuY29uc3QgaGFzQUNBYm9ydFNpZ25hbCA9IHR5cGVvZiBBQy5BYm9ydFNpZ25hbCA9PT0gJ2Z1bmN0aW9uJ1xuY29uc3QgQVMgPSBoYXNBYm9ydFNpZ25hbFxuICA/IEFib3J0U2lnbmFsXG4gIDogaGFzQUNBYm9ydFNpZ25hbFxuICA/IEFDLkFib3J0Q29udHJvbGxlclxuICA6IGNsYXNzIEFib3J0U2lnbmFsIHtcbiAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmFib3J0ZWQgPSBmYWxzZVxuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbXVxuICAgICAgfVxuICAgICAgZGlzcGF0Y2hFdmVudCh0eXBlKSB7XG4gICAgICAgIGlmICh0eXBlID09PSAnYWJvcnQnKSB7XG4gICAgICAgICAgdGhpcy5hYm9ydGVkID0gdHJ1ZVxuICAgICAgICAgIGNvbnN0IGUgPSB7IHR5cGUsIHRhcmdldDogdGhpcyB9XG4gICAgICAgICAgdGhpcy5vbmFib3J0KGUpXG4gICAgICAgICAgdGhpcy5fbGlzdGVuZXJzLmZvckVhY2goZiA9PiBmKGUpLCB0aGlzKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvbmFib3J0KCkge31cbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZXYsIGZuKSB7XG4gICAgICAgIGlmIChldiA9PT0gJ2Fib3J0Jykge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGZuKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKGV2LCBmbikge1xuICAgICAgICBpZiAoZXYgPT09ICdhYm9ydCcpIHtcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnMuZmlsdGVyKGYgPT4gZiAhPT0gZm4pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbmNvbnN0IHdhcm5lZCA9IG5ldyBTZXQoKVxuY29uc3QgZGVwcmVjYXRlZE9wdGlvbiA9IChvcHQsIGluc3RlYWQpID0+IHtcbiAgY29uc3QgY29kZSA9IGBMUlVfQ0FDSEVfT1BUSU9OXyR7b3B0fWBcbiAgaWYgKHNob3VsZFdhcm4oY29kZSkpIHtcbiAgICB3YXJuKGNvZGUsIGAke29wdH0gb3B0aW9uYCwgYG9wdGlvbnMuJHtpbnN0ZWFkfWAsIExSVUNhY2hlKVxuICB9XG59XG5jb25zdCBkZXByZWNhdGVkTWV0aG9kID0gKG1ldGhvZCwgaW5zdGVhZCkgPT4ge1xuICBjb25zdCBjb2RlID0gYExSVV9DQUNIRV9NRVRIT0RfJHttZXRob2R9YFxuICBpZiAoc2hvdWxkV2Fybihjb2RlKSkge1xuICAgIGNvbnN0IHsgcHJvdG90eXBlIH0gPSBMUlVDYWNoZVxuICAgIGNvbnN0IHsgZ2V0IH0gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3RvdHlwZSwgbWV0aG9kKVxuICAgIHdhcm4oY29kZSwgYCR7bWV0aG9kfSBtZXRob2RgLCBgY2FjaGUuJHtpbnN0ZWFkfSgpYCwgZ2V0KVxuICB9XG59XG5jb25zdCBkZXByZWNhdGVkUHJvcGVydHkgPSAoZmllbGQsIGluc3RlYWQpID0+IHtcbiAgY29uc3QgY29kZSA9IGBMUlVfQ0FDSEVfUFJPUEVSVFlfJHtmaWVsZH1gXG4gIGlmIChzaG91bGRXYXJuKGNvZGUpKSB7XG4gICAgY29uc3QgeyBwcm90b3R5cGUgfSA9IExSVUNhY2hlXG4gICAgY29uc3QgeyBnZXQgfSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvdG90eXBlLCBmaWVsZClcbiAgICB3YXJuKGNvZGUsIGAke2ZpZWxkfSBwcm9wZXJ0eWAsIGBjYWNoZS4ke2luc3RlYWR9YCwgZ2V0KVxuICB9XG59XG5cbmNvbnN0IGVtaXRXYXJuaW5nID0gKC4uLmEpID0+IHtcbiAgdHlwZW9mIHByb2Nlc3MgPT09ICdvYmplY3QnICYmXG4gIHByb2Nlc3MgJiZcbiAgdHlwZW9mIHByb2Nlc3MuZW1pdFdhcm5pbmcgPT09ICdmdW5jdGlvbidcbiAgICA/IHByb2Nlc3MuZW1pdFdhcm5pbmcoLi4uYSlcbiAgICA6IGNvbnNvbGUuZXJyb3IoLi4uYSlcbn1cblxuY29uc3Qgc2hvdWxkV2FybiA9IGNvZGUgPT4gIXdhcm5lZC5oYXMoY29kZSlcblxuY29uc3Qgd2FybiA9IChjb2RlLCB3aGF0LCBpbnN0ZWFkLCBmbikgPT4ge1xuICB3YXJuZWQuYWRkKGNvZGUpXG4gIGNvbnN0IG1zZyA9IGBUaGUgJHt3aGF0fSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlICR7aW5zdGVhZH0gaW5zdGVhZC5gXG4gIGVtaXRXYXJuaW5nKG1zZywgJ0RlcHJlY2F0aW9uV2FybmluZycsIGNvZGUsIGZuKVxufVxuXG5jb25zdCBpc1Bvc0ludCA9IG4gPT4gbiAmJiBuID09PSBNYXRoLmZsb29yKG4pICYmIG4gPiAwICYmIGlzRmluaXRlKG4pXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0gVGhpcyBpcyBhIGxpdHRsZSBiaXQgcmlkaWN1bG91cywgdGJoLlxuICogVGhlIG1heGltdW0gYXJyYXkgbGVuZ3RoIGlzIDJeMzItMSBvciB0aGVyZWFib3V0cyBvbiBtb3N0IEpTIGltcGxzLlxuICogQW5kIHdlbGwgYmVmb3JlIHRoYXQgcG9pbnQsIHlvdSdyZSBjYWNoaW5nIHRoZSBlbnRpcmUgd29ybGQsIEkgbWVhbixcbiAqIHRoYXQncyB+MzJHQiBvZiBqdXN0IGludGVnZXJzIGZvciB0aGUgbmV4dC9wcmV2IGxpbmtzLCBwbHVzIHdoYXRldmVyXG4gKiBlbHNlIHRvIGhvbGQgdGhhdCBtYW55IGtleXMgYW5kIHZhbHVlcy4gIEp1c3QgZmlsbGluZyB0aGUgbWVtb3J5IHdpdGhcbiAqIHplcm9lcyBhdCBpbml0IHRpbWUgaXMgYnJ1dGFsIHdoZW4geW91IGdldCB0aGF0IGJpZy5cbiAqIEJ1dCB3aHkgbm90IGJlIGNvbXBsZXRlP1xuICogTWF5YmUgaW4gdGhlIGZ1dHVyZSwgdGhlc2UgbGltaXRzIHdpbGwgaGF2ZSBleHBhbmRlZC4gKi9cbmNvbnN0IGdldFVpbnRBcnJheSA9IG1heCA9PlxuICAhaXNQb3NJbnQobWF4KVxuICAgID8gbnVsbFxuICAgIDogbWF4IDw9IE1hdGgucG93KDIsIDgpXG4gICAgPyBVaW50OEFycmF5XG4gICAgOiBtYXggPD0gTWF0aC5wb3coMiwgMTYpXG4gICAgPyBVaW50MTZBcnJheVxuICAgIDogbWF4IDw9IE1hdGgucG93KDIsIDMyKVxuICAgID8gVWludDMyQXJyYXlcbiAgICA6IG1heCA8PSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxuICAgID8gWmVyb0FycmF5XG4gICAgOiBudWxsXG5cbmNsYXNzIFplcm9BcnJheSBleHRlbmRzIEFycmF5IHtcbiAgY29uc3RydWN0b3Ioc2l6ZSkge1xuICAgIHN1cGVyKHNpemUpXG4gICAgdGhpcy5maWxsKDApXG4gIH1cbn1cblxuY2xhc3MgU3RhY2sge1xuICBjb25zdHJ1Y3RvcihtYXgpIHtcbiAgICBpZiAobWF4ID09PSAwKSB7XG4gICAgICByZXR1cm4gW11cbiAgICB9XG4gICAgY29uc3QgVWludEFycmF5ID0gZ2V0VWludEFycmF5KG1heClcbiAgICB0aGlzLmhlYXAgPSBuZXcgVWludEFycmF5KG1heClcbiAgICB0aGlzLmxlbmd0aCA9IDBcbiAgfVxuICBwdXNoKG4pIHtcbiAgICB0aGlzLmhlYXBbdGhpcy5sZW5ndGgrK10gPSBuXG4gIH1cbiAgcG9wKCkge1xuICAgIHJldHVybiB0aGlzLmhlYXBbLS10aGlzLmxlbmd0aF1cbiAgfVxufVxuXG5jbGFzcyBMUlVDYWNoZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHtcbiAgICAgIG1heCA9IDAsXG4gICAgICB0dGwsXG4gICAgICB0dGxSZXNvbHV0aW9uID0gMSxcbiAgICAgIHR0bEF1dG9wdXJnZSxcbiAgICAgIHVwZGF0ZUFnZU9uR2V0LFxuICAgICAgdXBkYXRlQWdlT25IYXMsXG4gICAgICBhbGxvd1N0YWxlLFxuICAgICAgZGlzcG9zZSxcbiAgICAgIGRpc3Bvc2VBZnRlcixcbiAgICAgIG5vRGlzcG9zZU9uU2V0LFxuICAgICAgbm9VcGRhdGVUVEwsXG4gICAgICBtYXhTaXplID0gMCxcbiAgICAgIG1heEVudHJ5U2l6ZSA9IDAsXG4gICAgICBzaXplQ2FsY3VsYXRpb24sXG4gICAgICBmZXRjaE1ldGhvZCxcbiAgICAgIGZldGNoQ29udGV4dCxcbiAgICAgIG5vRGVsZXRlT25GZXRjaFJlamVjdGlvbixcbiAgICAgIG5vRGVsZXRlT25TdGFsZUdldCxcbiAgICB9ID0gb3B0aW9uc1xuXG4gICAgLy8gZGVwcmVjYXRlZCBvcHRpb25zLCBkb24ndCB0cmlnZ2VyIGEgd2FybmluZyBmb3IgZ2V0dGluZyB0aGVtIGlmXG4gICAgLy8gdGhlIHRoaW5nIGJlaW5nIHBhc3NlZCBpbiBpcyBhbm90aGVyIExSVUNhY2hlIHdlJ3JlIGNvcHlpbmcuXG4gICAgY29uc3QgeyBsZW5ndGgsIG1heEFnZSwgc3RhbGUgfSA9XG4gICAgICBvcHRpb25zIGluc3RhbmNlb2YgTFJVQ2FjaGUgPyB7fSA6IG9wdGlvbnNcblxuICAgIGlmIChtYXggIT09IDAgJiYgIWlzUG9zSW50KG1heCkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21heCBvcHRpb24gbXVzdCBiZSBhIG5vbm5lZ2F0aXZlIGludGVnZXInKVxuICAgIH1cblxuICAgIGNvbnN0IFVpbnRBcnJheSA9IG1heCA/IGdldFVpbnRBcnJheShtYXgpIDogQXJyYXlcbiAgICBpZiAoIVVpbnRBcnJheSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIG1heCB2YWx1ZTogJyArIG1heClcbiAgICB9XG5cbiAgICB0aGlzLm1heCA9IG1heFxuICAgIHRoaXMubWF4U2l6ZSA9IG1heFNpemVcbiAgICB0aGlzLm1heEVudHJ5U2l6ZSA9IG1heEVudHJ5U2l6ZSB8fCB0aGlzLm1heFNpemVcbiAgICB0aGlzLnNpemVDYWxjdWxhdGlvbiA9IHNpemVDYWxjdWxhdGlvbiB8fCBsZW5ndGhcbiAgICBpZiAodGhpcy5zaXplQ2FsY3VsYXRpb24pIHtcbiAgICAgIGlmICghdGhpcy5tYXhTaXplICYmICF0aGlzLm1heEVudHJ5U2l6ZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICdjYW5ub3Qgc2V0IHNpemVDYWxjdWxhdGlvbiB3aXRob3V0IHNldHRpbmcgbWF4U2l6ZSBvciBtYXhFbnRyeVNpemUnXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5zaXplQ2FsY3VsYXRpb24gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2l6ZUNhbGN1bGF0aW9uIHNldCB0byBub24tZnVuY3Rpb24nKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZmV0Y2hNZXRob2QgPSBmZXRjaE1ldGhvZCB8fCBudWxsXG4gICAgaWYgKHRoaXMuZmV0Y2hNZXRob2QgJiYgdHlwZW9mIHRoaXMuZmV0Y2hNZXRob2QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdmZXRjaE1ldGhvZCBtdXN0IGJlIGEgZnVuY3Rpb24gaWYgc3BlY2lmaWVkJ1xuICAgICAgKVxuICAgIH1cblxuICAgIHRoaXMuZmV0Y2hDb250ZXh0ID0gZmV0Y2hDb250ZXh0XG4gICAgaWYgKCF0aGlzLmZldGNoTWV0aG9kICYmIGZldGNoQ29udGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnY2Fubm90IHNldCBmZXRjaENvbnRleHQgd2l0aG91dCBmZXRjaE1ldGhvZCdcbiAgICAgIClcbiAgICB9XG5cbiAgICB0aGlzLmtleU1hcCA9IG5ldyBNYXAoKVxuICAgIHRoaXMua2V5TGlzdCA9IG5ldyBBcnJheShtYXgpLmZpbGwobnVsbClcbiAgICB0aGlzLnZhbExpc3QgPSBuZXcgQXJyYXkobWF4KS5maWxsKG51bGwpXG4gICAgdGhpcy5uZXh0ID0gbmV3IFVpbnRBcnJheShtYXgpXG4gICAgdGhpcy5wcmV2ID0gbmV3IFVpbnRBcnJheShtYXgpXG4gICAgdGhpcy5oZWFkID0gMFxuICAgIHRoaXMudGFpbCA9IDBcbiAgICB0aGlzLmZyZWUgPSBuZXcgU3RhY2sobWF4KVxuICAgIHRoaXMuaW5pdGlhbEZpbGwgPSAxXG4gICAgdGhpcy5zaXplID0gMFxuXG4gICAgaWYgKHR5cGVvZiBkaXNwb3NlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLmRpc3Bvc2UgPSBkaXNwb3NlXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGlzcG9zZUFmdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLmRpc3Bvc2VBZnRlciA9IGRpc3Bvc2VBZnRlclxuICAgICAgdGhpcy5kaXNwb3NlZCA9IFtdXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzcG9zZUFmdGVyID0gbnVsbFxuICAgICAgdGhpcy5kaXNwb3NlZCA9IG51bGxcbiAgICB9XG4gICAgdGhpcy5ub0Rpc3Bvc2VPblNldCA9ICEhbm9EaXNwb3NlT25TZXRcbiAgICB0aGlzLm5vVXBkYXRlVFRMID0gISFub1VwZGF0ZVRUTFxuICAgIHRoaXMubm9EZWxldGVPbkZldGNoUmVqZWN0aW9uID0gISFub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb25cblxuICAgIC8vIE5COiBtYXhFbnRyeVNpemUgaXMgc2V0IHRvIG1heFNpemUgaWYgaXQncyBzZXRcbiAgICBpZiAodGhpcy5tYXhFbnRyeVNpemUgIT09IDApIHtcbiAgICAgIGlmICh0aGlzLm1heFNpemUgIT09IDApIHtcbiAgICAgICAgaWYgKCFpc1Bvc0ludCh0aGlzLm1heFNpemUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICdtYXhTaXplIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIGlmIHNwZWNpZmllZCdcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghaXNQb3NJbnQodGhpcy5tYXhFbnRyeVNpemUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgJ21heEVudHJ5U2l6ZSBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciBpZiBzcGVjaWZpZWQnXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5pdGlhbGl6ZVNpemVUcmFja2luZygpXG4gICAgfVxuXG4gICAgdGhpcy5hbGxvd1N0YWxlID0gISFhbGxvd1N0YWxlIHx8ICEhc3RhbGVcbiAgICB0aGlzLm5vRGVsZXRlT25TdGFsZUdldCA9ICEhbm9EZWxldGVPblN0YWxlR2V0XG4gICAgdGhpcy51cGRhdGVBZ2VPbkdldCA9ICEhdXBkYXRlQWdlT25HZXRcbiAgICB0aGlzLnVwZGF0ZUFnZU9uSGFzID0gISF1cGRhdGVBZ2VPbkhhc1xuICAgIHRoaXMudHRsUmVzb2x1dGlvbiA9XG4gICAgICBpc1Bvc0ludCh0dGxSZXNvbHV0aW9uKSB8fCB0dGxSZXNvbHV0aW9uID09PSAwXG4gICAgICAgID8gdHRsUmVzb2x1dGlvblxuICAgICAgICA6IDFcbiAgICB0aGlzLnR0bEF1dG9wdXJnZSA9ICEhdHRsQXV0b3B1cmdlXG4gICAgdGhpcy50dGwgPSB0dGwgfHwgbWF4QWdlIHx8IDBcbiAgICBpZiAodGhpcy50dGwpIHtcbiAgICAgIGlmICghaXNQb3NJbnQodGhpcy50dGwpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgJ3R0bCBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciBpZiBzcGVjaWZpZWQnXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5pdGlhbGl6ZVRUTFRyYWNraW5nKClcbiAgICB9XG5cbiAgICAvLyBkbyBub3QgYWxsb3cgY29tcGxldGVseSB1bmJvdW5kZWQgY2FjaGVzXG4gICAgaWYgKHRoaXMubWF4ID09PSAwICYmIHRoaXMudHRsID09PSAwICYmIHRoaXMubWF4U2l6ZSA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ0F0IGxlYXN0IG9uZSBvZiBtYXgsIG1heFNpemUsIG9yIHR0bCBpcyByZXF1aXJlZCdcbiAgICAgIClcbiAgICB9XG4gICAgaWYgKCF0aGlzLnR0bEF1dG9wdXJnZSAmJiAhdGhpcy5tYXggJiYgIXRoaXMubWF4U2l6ZSkge1xuICAgICAgY29uc3QgY29kZSA9ICdMUlVfQ0FDSEVfVU5CT1VOREVEJ1xuICAgICAgaWYgKHNob3VsZFdhcm4oY29kZSkpIHtcbiAgICAgICAgd2FybmVkLmFkZChjb2RlKVxuICAgICAgICBjb25zdCBtc2cgPVxuICAgICAgICAgICdUVEwgY2FjaGluZyB3aXRob3V0IHR0bEF1dG9wdXJnZSwgbWF4LCBvciBtYXhTaXplIGNhbiAnICtcbiAgICAgICAgICAncmVzdWx0IGluIHVuYm91bmRlZCBtZW1vcnkgY29uc3VtcHRpb24uJ1xuICAgICAgICBlbWl0V2FybmluZyhtc2csICdVbmJvdW5kZWRDYWNoZVdhcm5pbmcnLCBjb2RlLCBMUlVDYWNoZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RhbGUpIHtcbiAgICAgIGRlcHJlY2F0ZWRPcHRpb24oJ3N0YWxlJywgJ2FsbG93U3RhbGUnKVxuICAgIH1cbiAgICBpZiAobWF4QWdlKSB7XG4gICAgICBkZXByZWNhdGVkT3B0aW9uKCdtYXhBZ2UnLCAndHRsJylcbiAgICB9XG4gICAgaWYgKGxlbmd0aCkge1xuICAgICAgZGVwcmVjYXRlZE9wdGlvbignbGVuZ3RoJywgJ3NpemVDYWxjdWxhdGlvbicpXG4gICAgfVxuICB9XG5cbiAgZ2V0UmVtYWluaW5nVFRMKGtleSkge1xuICAgIHJldHVybiB0aGlzLmhhcyhrZXksIHsgdXBkYXRlQWdlT25IYXM6IGZhbHNlIH0pID8gSW5maW5pdHkgOiAwXG4gIH1cblxuICBpbml0aWFsaXplVFRMVHJhY2tpbmcoKSB7XG4gICAgdGhpcy50dGxzID0gbmV3IFplcm9BcnJheSh0aGlzLm1heClcbiAgICB0aGlzLnN0YXJ0cyA9IG5ldyBaZXJvQXJyYXkodGhpcy5tYXgpXG5cbiAgICB0aGlzLnNldEl0ZW1UVEwgPSAoaW5kZXgsIHR0bCwgc3RhcnQgPSBwZXJmLm5vdygpKSA9PiB7XG4gICAgICB0aGlzLnN0YXJ0c1tpbmRleF0gPSB0dGwgIT09IDAgPyBzdGFydCA6IDBcbiAgICAgIHRoaXMudHRsc1tpbmRleF0gPSB0dGxcbiAgICAgIGlmICh0dGwgIT09IDAgJiYgdGhpcy50dGxBdXRvcHVyZ2UpIHtcbiAgICAgICAgY29uc3QgdCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLmlzU3RhbGUoaW5kZXgpKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZSh0aGlzLmtleUxpc3RbaW5kZXhdKVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgdHRsICsgMSlcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgLSB1bnJlZigpIG5vdCBzdXBwb3J0ZWQgb24gYWxsIHBsYXRmb3JtcyAqL1xuICAgICAgICBpZiAodC51bnJlZikge1xuICAgICAgICAgIHQudW5yZWYoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVJdGVtQWdlID0gaW5kZXggPT4ge1xuICAgICAgdGhpcy5zdGFydHNbaW5kZXhdID0gdGhpcy50dGxzW2luZGV4XSAhPT0gMCA/IHBlcmYubm93KCkgOiAwXG4gICAgfVxuXG4gICAgLy8gZGVib3VuY2UgY2FsbHMgdG8gcGVyZi5ub3coKSB0byAxcyBzbyB3ZSdyZSBub3QgaGl0dGluZ1xuICAgIC8vIHRoYXQgY29zdGx5IGNhbGwgcmVwZWF0ZWRseS5cbiAgICBsZXQgY2FjaGVkTm93ID0gMFxuICAgIGNvbnN0IGdldE5vdyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IG4gPSBwZXJmLm5vdygpXG4gICAgICBpZiAodGhpcy50dGxSZXNvbHV0aW9uID4gMCkge1xuICAgICAgICBjYWNoZWROb3cgPSBuXG4gICAgICAgIGNvbnN0IHQgPSBzZXRUaW1lb3V0KFxuICAgICAgICAgICgpID0+IChjYWNoZWROb3cgPSAwKSxcbiAgICAgICAgICB0aGlzLnR0bFJlc29sdXRpb25cbiAgICAgICAgKVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAtIG5vdCBhdmFpbGFibGUgb24gYWxsIHBsYXRmb3JtcyAqL1xuICAgICAgICBpZiAodC51bnJlZikge1xuICAgICAgICAgIHQudW5yZWYoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gblxuICAgIH1cblxuICAgIHRoaXMuZ2V0UmVtYWluaW5nVFRMID0ga2V5ID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5rZXlNYXAuZ2V0KGtleSlcbiAgICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAwXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50dGxzW2luZGV4XSA9PT0gMCB8fCB0aGlzLnN0YXJ0c1tpbmRleF0gPT09IDBcbiAgICAgICAgPyBJbmZpbml0eVxuICAgICAgICA6IHRoaXMuc3RhcnRzW2luZGV4XSArXG4gICAgICAgICAgICB0aGlzLnR0bHNbaW5kZXhdIC1cbiAgICAgICAgICAgIChjYWNoZWROb3cgfHwgZ2V0Tm93KCkpXG4gICAgfVxuXG4gICAgdGhpcy5pc1N0YWxlID0gaW5kZXggPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy50dGxzW2luZGV4XSAhPT0gMCAmJlxuICAgICAgICB0aGlzLnN0YXJ0c1tpbmRleF0gIT09IDAgJiZcbiAgICAgICAgKGNhY2hlZE5vdyB8fCBnZXROb3coKSkgLSB0aGlzLnN0YXJ0c1tpbmRleF0gPlxuICAgICAgICAgIHRoaXMudHRsc1tpbmRleF1cbiAgICAgIClcbiAgICB9XG4gIH1cbiAgdXBkYXRlSXRlbUFnZShpbmRleCkge31cbiAgc2V0SXRlbVRUTChpbmRleCwgdHRsLCBzdGFydCkge31cbiAgaXNTdGFsZShpbmRleCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgaW5pdGlhbGl6ZVNpemVUcmFja2luZygpIHtcbiAgICB0aGlzLmNhbGN1bGF0ZWRTaXplID0gMFxuICAgIHRoaXMuc2l6ZXMgPSBuZXcgWmVyb0FycmF5KHRoaXMubWF4KVxuICAgIHRoaXMucmVtb3ZlSXRlbVNpemUgPSBpbmRleCA9PiB7XG4gICAgICB0aGlzLmNhbGN1bGF0ZWRTaXplIC09IHRoaXMuc2l6ZXNbaW5kZXhdXG4gICAgICB0aGlzLnNpemVzW2luZGV4XSA9IDBcbiAgICB9XG4gICAgdGhpcy5yZXF1aXJlU2l6ZSA9IChrLCB2LCBzaXplLCBzaXplQ2FsY3VsYXRpb24pID0+IHtcbiAgICAgIGlmICghaXNQb3NJbnQoc2l6ZSkpIHtcbiAgICAgICAgaWYgKHNpemVDYWxjdWxhdGlvbikge1xuICAgICAgICAgIGlmICh0eXBlb2Ygc2l6ZUNhbGN1bGF0aW9uICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzaXplQ2FsY3VsYXRpb24gbXVzdCBiZSBhIGZ1bmN0aW9uJylcbiAgICAgICAgICB9XG4gICAgICAgICAgc2l6ZSA9IHNpemVDYWxjdWxhdGlvbih2LCBrKVxuICAgICAgICAgIGlmICghaXNQb3NJbnQoc2l6ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICAgICdzaXplQ2FsY3VsYXRpb24gcmV0dXJuIGludmFsaWQgKGV4cGVjdCBwb3NpdGl2ZSBpbnRlZ2VyKSdcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICdpbnZhbGlkIHNpemUgdmFsdWUgKG11c3QgYmUgcG9zaXRpdmUgaW50ZWdlciknXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc2l6ZVxuICAgIH1cbiAgICB0aGlzLmFkZEl0ZW1TaXplID0gKGluZGV4LCBzaXplKSA9PiB7XG4gICAgICB0aGlzLnNpemVzW2luZGV4XSA9IHNpemVcbiAgICAgIGNvbnN0IG1heFNpemUgPSB0aGlzLm1heFNpemUgLSB0aGlzLnNpemVzW2luZGV4XVxuICAgICAgd2hpbGUgKHRoaXMuY2FsY3VsYXRlZFNpemUgPiBtYXhTaXplKSB7XG4gICAgICAgIHRoaXMuZXZpY3QodHJ1ZSlcbiAgICAgIH1cbiAgICAgIHRoaXMuY2FsY3VsYXRlZFNpemUgKz0gdGhpcy5zaXplc1tpbmRleF1cbiAgICB9XG4gIH1cbiAgcmVtb3ZlSXRlbVNpemUoaW5kZXgpIHt9XG4gIGFkZEl0ZW1TaXplKGluZGV4LCBzaXplKSB7fVxuICByZXF1aXJlU2l6ZShrLCB2LCBzaXplLCBzaXplQ2FsY3VsYXRpb24pIHtcbiAgICBpZiAoc2l6ZSB8fCBzaXplQ2FsY3VsYXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdjYW5ub3Qgc2V0IHNpemUgd2l0aG91dCBzZXR0aW5nIG1heFNpemUgb3IgbWF4RW50cnlTaXplIG9uIGNhY2hlJ1xuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gICppbmRleGVzKHsgYWxsb3dTdGFsZSA9IHRoaXMuYWxsb3dTdGFsZSB9ID0ge30pIHtcbiAgICBpZiAodGhpcy5zaXplKSB7XG4gICAgICBmb3IgKGxldCBpID0gdGhpcy50YWlsOyB0cnVlOyApIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWRJbmRleChpKSkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFsbG93U3RhbGUgfHwgIXRoaXMuaXNTdGFsZShpKSkge1xuICAgICAgICAgIHlpZWxkIGlcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA9PT0gdGhpcy5oZWFkKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpID0gdGhpcy5wcmV2W2ldXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAqcmluZGV4ZXMoeyBhbGxvd1N0YWxlID0gdGhpcy5hbGxvd1N0YWxlIH0gPSB7fSkge1xuICAgIGlmICh0aGlzLnNpemUpIHtcbiAgICAgIGZvciAobGV0IGkgPSB0aGlzLmhlYWQ7IHRydWU7ICkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZEluZGV4KGkpKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWxsb3dTdGFsZSB8fCAhdGhpcy5pc1N0YWxlKGkpKSB7XG4gICAgICAgICAgeWllbGQgaVxuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSB0aGlzLnRhaWwpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGkgPSB0aGlzLm5leHRbaV1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlzVmFsaWRJbmRleChpbmRleCkge1xuICAgIHJldHVybiB0aGlzLmtleU1hcC5nZXQodGhpcy5rZXlMaXN0W2luZGV4XSkgPT09IGluZGV4XG4gIH1cblxuICAqZW50cmllcygpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5pbmRleGVzKCkpIHtcbiAgICAgIHlpZWxkIFt0aGlzLmtleUxpc3RbaV0sIHRoaXMudmFsTGlzdFtpXV1cbiAgICB9XG4gIH1cbiAgKnJlbnRyaWVzKCkge1xuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLnJpbmRleGVzKCkpIHtcbiAgICAgIHlpZWxkIFt0aGlzLmtleUxpc3RbaV0sIHRoaXMudmFsTGlzdFtpXV1cbiAgICB9XG4gIH1cblxuICAqa2V5cygpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5pbmRleGVzKCkpIHtcbiAgICAgIHlpZWxkIHRoaXMua2V5TGlzdFtpXVxuICAgIH1cbiAgfVxuICAqcmtleXMoKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMucmluZGV4ZXMoKSkge1xuICAgICAgeWllbGQgdGhpcy5rZXlMaXN0W2ldXG4gICAgfVxuICB9XG5cbiAgKnZhbHVlcygpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5pbmRleGVzKCkpIHtcbiAgICAgIHlpZWxkIHRoaXMudmFsTGlzdFtpXVxuICAgIH1cbiAgfVxuICAqcnZhbHVlcygpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5yaW5kZXhlcygpKSB7XG4gICAgICB5aWVsZCB0aGlzLnZhbExpc3RbaV1cbiAgICB9XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbnRyaWVzKClcbiAgfVxuXG4gIGZpbmQoZm4sIGdldE9wdGlvbnMgPSB7fSkge1xuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLmluZGV4ZXMoKSkge1xuICAgICAgaWYgKGZuKHRoaXMudmFsTGlzdFtpXSwgdGhpcy5rZXlMaXN0W2ldLCB0aGlzKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQodGhpcy5rZXlMaXN0W2ldLCBnZXRPcHRpb25zKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvckVhY2goZm4sIHRoaXNwID0gdGhpcykge1xuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLmluZGV4ZXMoKSkge1xuICAgICAgZm4uY2FsbCh0aGlzcCwgdGhpcy52YWxMaXN0W2ldLCB0aGlzLmtleUxpc3RbaV0sIHRoaXMpXG4gICAgfVxuICB9XG5cbiAgcmZvckVhY2goZm4sIHRoaXNwID0gdGhpcykge1xuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLnJpbmRleGVzKCkpIHtcbiAgICAgIGZuLmNhbGwodGhpc3AsIHRoaXMudmFsTGlzdFtpXSwgdGhpcy5rZXlMaXN0W2ldLCB0aGlzKVxuICAgIH1cbiAgfVxuXG4gIGdldCBwcnVuZSgpIHtcbiAgICBkZXByZWNhdGVkTWV0aG9kKCdwcnVuZScsICdwdXJnZVN0YWxlJylcbiAgICByZXR1cm4gdGhpcy5wdXJnZVN0YWxlXG4gIH1cblxuICBwdXJnZVN0YWxlKCkge1xuICAgIGxldCBkZWxldGVkID0gZmFsc2VcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5yaW5kZXhlcyh7IGFsbG93U3RhbGU6IHRydWUgfSkpIHtcbiAgICAgIGlmICh0aGlzLmlzU3RhbGUoaSkpIHtcbiAgICAgICAgdGhpcy5kZWxldGUodGhpcy5rZXlMaXN0W2ldKVxuICAgICAgICBkZWxldGVkID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVsZXRlZFxuICB9XG5cbiAgZHVtcCgpIHtcbiAgICBjb25zdCBhcnIgPSBbXVxuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLmluZGV4ZXMoeyBhbGxvd1N0YWxlOiB0cnVlIH0pKSB7XG4gICAgICBjb25zdCBrZXkgPSB0aGlzLmtleUxpc3RbaV1cbiAgICAgIGNvbnN0IHYgPSB0aGlzLnZhbExpc3RbaV1cbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pc0JhY2tncm91bmRGZXRjaCh2KVxuICAgICAgICA/IHYuX19zdGFsZVdoaWxlRmV0Y2hpbmdcbiAgICAgICAgOiB2XG4gICAgICBjb25zdCBlbnRyeSA9IHsgdmFsdWUgfVxuICAgICAgaWYgKHRoaXMudHRscykge1xuICAgICAgICBlbnRyeS50dGwgPSB0aGlzLnR0bHNbaV1cbiAgICAgICAgLy8gYWx3YXlzIGR1bXAgdGhlIHN0YXJ0IHJlbGF0aXZlIHRvIGEgcG9ydGFibGUgdGltZXN0YW1wXG4gICAgICAgIC8vIGl0J3Mgb2sgZm9yIHRoaXMgdG8gYmUgYSBiaXQgc2xvdywgaXQncyBhIHJhcmUgb3BlcmF0aW9uLlxuICAgICAgICBjb25zdCBhZ2UgPSBwZXJmLm5vdygpIC0gdGhpcy5zdGFydHNbaV1cbiAgICAgICAgZW50cnkuc3RhcnQgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLSBhZ2UpXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zaXplcykge1xuICAgICAgICBlbnRyeS5zaXplID0gdGhpcy5zaXplc1tpXVxuICAgICAgfVxuICAgICAgYXJyLnVuc2hpZnQoW2tleSwgZW50cnldKVxuICAgIH1cbiAgICByZXR1cm4gYXJyXG4gIH1cblxuICBsb2FkKGFycikge1xuICAgIHRoaXMuY2xlYXIoKVxuICAgIGZvciAoY29uc3QgW2tleSwgZW50cnldIG9mIGFycikge1xuICAgICAgaWYgKGVudHJ5LnN0YXJ0KSB7XG4gICAgICAgIC8vIGVudHJ5LnN0YXJ0IGlzIGEgcG9ydGFibGUgdGltZXN0YW1wLCBidXQgd2UgbWF5IGJlIHVzaW5nXG4gICAgICAgIC8vIG5vZGUncyBwZXJmb3JtYW5jZS5ub3coKSwgc28gY2FsY3VsYXRlIHRoZSBvZmZzZXQuXG4gICAgICAgIC8vIGl0J3Mgb2sgZm9yIHRoaXMgdG8gYmUgYSBiaXQgc2xvdywgaXQncyBhIHJhcmUgb3BlcmF0aW9uLlxuICAgICAgICBjb25zdCBhZ2UgPSBEYXRlLm5vdygpIC0gZW50cnkuc3RhcnRcbiAgICAgICAgZW50cnkuc3RhcnQgPSBwZXJmLm5vdygpIC0gYWdlXG4gICAgICB9XG4gICAgICB0aGlzLnNldChrZXksIGVudHJ5LnZhbHVlLCBlbnRyeSlcbiAgICB9XG4gIH1cblxuICBkaXNwb3NlKHYsIGssIHJlYXNvbikge31cblxuICBzZXQoXG4gICAgayxcbiAgICB2LFxuICAgIHtcbiAgICAgIHR0bCA9IHRoaXMudHRsLFxuICAgICAgc3RhcnQsXG4gICAgICBub0Rpc3Bvc2VPblNldCA9IHRoaXMubm9EaXNwb3NlT25TZXQsXG4gICAgICBzaXplID0gMCxcbiAgICAgIHNpemVDYWxjdWxhdGlvbiA9IHRoaXMuc2l6ZUNhbGN1bGF0aW9uLFxuICAgICAgbm9VcGRhdGVUVEwgPSB0aGlzLm5vVXBkYXRlVFRMLFxuICAgIH0gPSB7fVxuICApIHtcbiAgICBzaXplID0gdGhpcy5yZXF1aXJlU2l6ZShrLCB2LCBzaXplLCBzaXplQ2FsY3VsYXRpb24pXG4gICAgLy8gaWYgdGhlIGl0ZW0gZG9lc24ndCBmaXQsIGRvbid0IGRvIGFueXRoaW5nXG4gICAgLy8gTkI6IG1heEVudHJ5U2l6ZSBzZXQgdG8gbWF4U2l6ZSBieSBkZWZhdWx0XG4gICAgaWYgKHRoaXMubWF4RW50cnlTaXplICYmIHNpemUgPiB0aGlzLm1heEVudHJ5U2l6ZSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgbGV0IGluZGV4ID0gdGhpcy5zaXplID09PSAwID8gdW5kZWZpbmVkIDogdGhpcy5rZXlNYXAuZ2V0KGspXG4gICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGFkZGl0aW9uXG4gICAgICBpbmRleCA9IHRoaXMubmV3SW5kZXgoKVxuICAgICAgdGhpcy5rZXlMaXN0W2luZGV4XSA9IGtcbiAgICAgIHRoaXMudmFsTGlzdFtpbmRleF0gPSB2XG4gICAgICB0aGlzLmtleU1hcC5zZXQoaywgaW5kZXgpXG4gICAgICB0aGlzLm5leHRbdGhpcy50YWlsXSA9IGluZGV4XG4gICAgICB0aGlzLnByZXZbaW5kZXhdID0gdGhpcy50YWlsXG4gICAgICB0aGlzLnRhaWwgPSBpbmRleFxuICAgICAgdGhpcy5zaXplKytcbiAgICAgIHRoaXMuYWRkSXRlbVNpemUoaW5kZXgsIHNpemUpXG4gICAgICBub1VwZGF0ZVRUTCA9IGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVwZGF0ZVxuICAgICAgY29uc3Qgb2xkVmFsID0gdGhpcy52YWxMaXN0W2luZGV4XVxuICAgICAgaWYgKHYgIT09IG9sZFZhbCkge1xuICAgICAgICBpZiAodGhpcy5pc0JhY2tncm91bmRGZXRjaChvbGRWYWwpKSB7XG4gICAgICAgICAgb2xkVmFsLl9fYWJvcnRDb250cm9sbGVyLmFib3J0KClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIW5vRGlzcG9zZU9uU2V0KSB7XG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2Uob2xkVmFsLCBrLCAnc2V0JylcbiAgICAgICAgICAgIGlmICh0aGlzLmRpc3Bvc2VBZnRlcikge1xuICAgICAgICAgICAgICB0aGlzLmRpc3Bvc2VkLnB1c2goW29sZFZhbCwgaywgJ3NldCddKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUl0ZW1TaXplKGluZGV4KVxuICAgICAgICB0aGlzLnZhbExpc3RbaW5kZXhdID0gdlxuICAgICAgICB0aGlzLmFkZEl0ZW1TaXplKGluZGV4LCBzaXplKVxuICAgICAgfVxuICAgICAgdGhpcy5tb3ZlVG9UYWlsKGluZGV4KVxuICAgIH1cbiAgICBpZiAodHRsICE9PSAwICYmIHRoaXMudHRsID09PSAwICYmICF0aGlzLnR0bHMpIHtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZVRUTFRyYWNraW5nKClcbiAgICB9XG4gICAgaWYgKCFub1VwZGF0ZVRUTCkge1xuICAgICAgdGhpcy5zZXRJdGVtVFRMKGluZGV4LCB0dGwsIHN0YXJ0KVxuICAgIH1cbiAgICBpZiAodGhpcy5kaXNwb3NlQWZ0ZXIpIHtcbiAgICAgIHdoaWxlICh0aGlzLmRpc3Bvc2VkLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmRpc3Bvc2VBZnRlciguLi50aGlzLmRpc3Bvc2VkLnNoaWZ0KCkpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBuZXdJbmRleCgpIHtcbiAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWlsXG4gICAgfVxuICAgIGlmICh0aGlzLnNpemUgPT09IHRoaXMubWF4ICYmIHRoaXMubWF4ICE9PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5ldmljdChmYWxzZSlcbiAgICB9XG4gICAgaWYgKHRoaXMuZnJlZS5sZW5ndGggIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmZyZWUucG9wKClcbiAgICB9XG4gICAgLy8gaW5pdGlhbCBmaWxsLCBqdXN0IGtlZXAgd3JpdGluZyBkb3duIHRoZSBsaXN0XG4gICAgcmV0dXJuIHRoaXMuaW5pdGlhbEZpbGwrK1xuICB9XG5cbiAgcG9wKCkge1xuICAgIGlmICh0aGlzLnNpemUpIHtcbiAgICAgIGNvbnN0IHZhbCA9IHRoaXMudmFsTGlzdFt0aGlzLmhlYWRdXG4gICAgICB0aGlzLmV2aWN0KHRydWUpXG4gICAgICByZXR1cm4gdmFsXG4gICAgfVxuICB9XG5cbiAgZXZpY3QoZnJlZSkge1xuICAgIGNvbnN0IGhlYWQgPSB0aGlzLmhlYWRcbiAgICBjb25zdCBrID0gdGhpcy5rZXlMaXN0W2hlYWRdXG4gICAgY29uc3QgdiA9IHRoaXMudmFsTGlzdFtoZWFkXVxuICAgIGlmICh0aGlzLmlzQmFja2dyb3VuZEZldGNoKHYpKSB7XG4gICAgICB2Ll9fYWJvcnRDb250cm9sbGVyLmFib3J0KClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNwb3NlKHYsIGssICdldmljdCcpXG4gICAgICBpZiAodGhpcy5kaXNwb3NlQWZ0ZXIpIHtcbiAgICAgICAgdGhpcy5kaXNwb3NlZC5wdXNoKFt2LCBrLCAnZXZpY3QnXSlcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yZW1vdmVJdGVtU2l6ZShoZWFkKVxuICAgIC8vIGlmIHdlIGFyZW4ndCBhYm91dCB0byB1c2UgdGhlIGluZGV4LCB0aGVuIG51bGwgdGhlc2Ugb3V0XG4gICAgaWYgKGZyZWUpIHtcbiAgICAgIHRoaXMua2V5TGlzdFtoZWFkXSA9IG51bGxcbiAgICAgIHRoaXMudmFsTGlzdFtoZWFkXSA9IG51bGxcbiAgICAgIHRoaXMuZnJlZS5wdXNoKGhlYWQpXG4gICAgfVxuICAgIHRoaXMuaGVhZCA9IHRoaXMubmV4dFtoZWFkXVxuICAgIHRoaXMua2V5TWFwLmRlbGV0ZShrKVxuICAgIHRoaXMuc2l6ZS0tXG4gICAgcmV0dXJuIGhlYWRcbiAgfVxuXG4gIGhhcyhrLCB7IHVwZGF0ZUFnZU9uSGFzID0gdGhpcy51cGRhdGVBZ2VPbkhhcyB9ID0ge30pIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMua2V5TWFwLmdldChrKVxuICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIXRoaXMuaXNTdGFsZShpbmRleCkpIHtcbiAgICAgICAgaWYgKHVwZGF0ZUFnZU9uSGFzKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVJdGVtQWdlKGluZGV4KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gbGlrZSBnZXQoKSwgYnV0IHdpdGhvdXQgYW55IExSVSB1cGRhdGluZyBvciBUVEwgZXhwaXJhdGlvblxuICBwZWVrKGssIHsgYWxsb3dTdGFsZSA9IHRoaXMuYWxsb3dTdGFsZSB9ID0ge30pIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMua2V5TWFwLmdldChrKVxuICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkICYmIChhbGxvd1N0YWxlIHx8ICF0aGlzLmlzU3RhbGUoaW5kZXgpKSkge1xuICAgICAgY29uc3QgdiA9IHRoaXMudmFsTGlzdFtpbmRleF1cbiAgICAgIC8vIGVpdGhlciBzdGFsZSBhbmQgYWxsb3dlZCwgb3IgZm9yY2luZyBhIHJlZnJlc2ggb2Ygbm9uLXN0YWxlIHZhbHVlXG4gICAgICByZXR1cm4gdGhpcy5pc0JhY2tncm91bmRGZXRjaCh2KSA/IHYuX19zdGFsZVdoaWxlRmV0Y2hpbmcgOiB2XG4gICAgfVxuICB9XG5cbiAgYmFja2dyb3VuZEZldGNoKGssIGluZGV4LCBvcHRpb25zLCBjb250ZXh0KSB7XG4gICAgY29uc3QgdiA9IGluZGV4ID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiB0aGlzLnZhbExpc3RbaW5kZXhdXG4gICAgaWYgKHRoaXMuaXNCYWNrZ3JvdW5kRmV0Y2godikpIHtcbiAgICAgIHJldHVybiB2XG4gICAgfVxuICAgIGNvbnN0IGFjID0gbmV3IEFDKClcbiAgICBjb25zdCBmZXRjaE9wdHMgPSB7XG4gICAgICBzaWduYWw6IGFjLnNpZ25hbCxcbiAgICAgIG9wdGlvbnMsXG4gICAgICBjb250ZXh0LFxuICAgIH1cbiAgICBjb25zdCBjYiA9IHYgPT4ge1xuICAgICAgaWYgKCFhYy5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICB0aGlzLnNldChrLCB2LCBmZXRjaE9wdHMub3B0aW9ucylcbiAgICAgIH1cbiAgICAgIHJldHVybiB2XG4gICAgfVxuICAgIGNvbnN0IGViID0gZXIgPT4ge1xuICAgICAgaWYgKHRoaXMudmFsTGlzdFtpbmRleF0gPT09IHApIHtcbiAgICAgICAgY29uc3QgZGVsID1cbiAgICAgICAgICAhb3B0aW9ucy5ub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb24gfHxcbiAgICAgICAgICBwLl9fc3RhbGVXaGlsZUZldGNoaW5nID09PSB1bmRlZmluZWRcbiAgICAgICAgaWYgKGRlbCkge1xuICAgICAgICAgIHRoaXMuZGVsZXRlKGspXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gc3RpbGwgcmVwbGFjZSB0aGUgKnByb21pc2UqIHdpdGggdGhlIHN0YWxlIHZhbHVlLFxuICAgICAgICAgIC8vIHNpbmNlIHdlIGFyZSBkb25lIHdpdGggdGhlIHByb21pc2UgYXQgdGhpcyBwb2ludC5cbiAgICAgICAgICB0aGlzLnZhbExpc3RbaW5kZXhdID0gcC5fX3N0YWxlV2hpbGVGZXRjaGluZ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocC5fX3JldHVybmVkID09PSBwKSB7XG4gICAgICAgIHRocm93IGVyXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHBjYWxsID0gcmVzID0+IHJlcyh0aGlzLmZldGNoTWV0aG9kKGssIHYsIGZldGNoT3B0cykpXG4gICAgY29uc3QgcCA9IG5ldyBQcm9taXNlKHBjYWxsKS50aGVuKGNiLCBlYilcbiAgICBwLl9fYWJvcnRDb250cm9sbGVyID0gYWNcbiAgICBwLl9fc3RhbGVXaGlsZUZldGNoaW5nID0gdlxuICAgIHAuX19yZXR1cm5lZCA9IG51bGxcbiAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5zZXQoaywgcCwgZmV0Y2hPcHRzLm9wdGlvbnMpXG4gICAgICBpbmRleCA9IHRoaXMua2V5TWFwLmdldChrKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZhbExpc3RbaW5kZXhdID0gcFxuICAgIH1cbiAgICByZXR1cm4gcFxuICB9XG5cbiAgaXNCYWNrZ3JvdW5kRmV0Y2gocCkge1xuICAgIHJldHVybiAoXG4gICAgICBwICYmXG4gICAgICB0eXBlb2YgcCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIHR5cGVvZiBwLnRoZW4gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbiAgICAgICAgcCxcbiAgICAgICAgJ19fc3RhbGVXaGlsZUZldGNoaW5nJ1xuICAgICAgKSAmJlxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHAsICdfX3JldHVybmVkJykgJiZcbiAgICAgIChwLl9fcmV0dXJuZWQgPT09IHAgfHwgcC5fX3JldHVybmVkID09PSBudWxsKVxuICAgIClcbiAgfVxuXG4gIC8vIHRoaXMgdGFrZXMgdGhlIHVuaW9uIG9mIGdldCgpIGFuZCBzZXQoKSBvcHRzLCBiZWNhdXNlIGl0IGRvZXMgYm90aFxuICBhc3luYyBmZXRjaChcbiAgICBrLFxuICAgIHtcbiAgICAgIC8vIGdldCBvcHRpb25zXG4gICAgICBhbGxvd1N0YWxlID0gdGhpcy5hbGxvd1N0YWxlLFxuICAgICAgdXBkYXRlQWdlT25HZXQgPSB0aGlzLnVwZGF0ZUFnZU9uR2V0LFxuICAgICAgbm9EZWxldGVPblN0YWxlR2V0ID0gdGhpcy5ub0RlbGV0ZU9uU3RhbGVHZXQsXG4gICAgICAvLyBzZXQgb3B0aW9uc1xuICAgICAgdHRsID0gdGhpcy50dGwsXG4gICAgICBub0Rpc3Bvc2VPblNldCA9IHRoaXMubm9EaXNwb3NlT25TZXQsXG4gICAgICBzaXplID0gMCxcbiAgICAgIHNpemVDYWxjdWxhdGlvbiA9IHRoaXMuc2l6ZUNhbGN1bGF0aW9uLFxuICAgICAgbm9VcGRhdGVUVEwgPSB0aGlzLm5vVXBkYXRlVFRMLFxuICAgICAgLy8gZmV0Y2ggZXhjbHVzaXZlIG9wdGlvbnNcbiAgICAgIG5vRGVsZXRlT25GZXRjaFJlamVjdGlvbiA9IHRoaXMubm9EZWxldGVPbkZldGNoUmVqZWN0aW9uLFxuICAgICAgZmV0Y2hDb250ZXh0ID0gdGhpcy5mZXRjaENvbnRleHQsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBmYWxzZSxcbiAgICB9ID0ge31cbiAgKSB7XG4gICAgaWYgKCF0aGlzLmZldGNoTWV0aG9kKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoaywge1xuICAgICAgICBhbGxvd1N0YWxlLFxuICAgICAgICB1cGRhdGVBZ2VPbkdldCxcbiAgICAgICAgbm9EZWxldGVPblN0YWxlR2V0LFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgYWxsb3dTdGFsZSxcbiAgICAgIHVwZGF0ZUFnZU9uR2V0LFxuICAgICAgbm9EZWxldGVPblN0YWxlR2V0LFxuICAgICAgdHRsLFxuICAgICAgbm9EaXNwb3NlT25TZXQsXG4gICAgICBzaXplLFxuICAgICAgc2l6ZUNhbGN1bGF0aW9uLFxuICAgICAgbm9VcGRhdGVUVEwsXG4gICAgICBub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb24sXG4gICAgfVxuXG4gICAgbGV0IGluZGV4ID0gdGhpcy5rZXlNYXAuZ2V0KGspXG4gICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHAgPSB0aGlzLmJhY2tncm91bmRGZXRjaChrLCBpbmRleCwgb3B0aW9ucywgZmV0Y2hDb250ZXh0KVxuICAgICAgcmV0dXJuIChwLl9fcmV0dXJuZWQgPSBwKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbiBjYWNoZSwgbWF5YmUgYWxyZWFkeSBmZXRjaGluZ1xuICAgICAgY29uc3QgdiA9IHRoaXMudmFsTGlzdFtpbmRleF1cbiAgICAgIGlmICh0aGlzLmlzQmFja2dyb3VuZEZldGNoKHYpKSB7XG4gICAgICAgIHJldHVybiBhbGxvd1N0YWxlICYmIHYuX19zdGFsZVdoaWxlRmV0Y2hpbmcgIT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gdi5fX3N0YWxlV2hpbGVGZXRjaGluZ1xuICAgICAgICAgIDogKHYuX19yZXR1cm5lZCA9IHYpXG4gICAgICB9XG5cbiAgICAgIC8vIGlmIHdlIGZvcmNlIGEgcmVmcmVzaCwgdGhhdCBtZWFucyBkbyBOT1Qgc2VydmUgdGhlIGNhY2hlZCB2YWx1ZSxcbiAgICAgIC8vIHVubGVzcyB3ZSBhcmUgYWxyZWFkeSBpbiB0aGUgcHJvY2VzcyBvZiByZWZyZXNoaW5nIHRoZSBjYWNoZS5cbiAgICAgIGlmICghZm9yY2VSZWZyZXNoICYmICF0aGlzLmlzU3RhbGUoaW5kZXgpKSB7XG4gICAgICAgIHRoaXMubW92ZVRvVGFpbChpbmRleClcbiAgICAgICAgaWYgKHVwZGF0ZUFnZU9uR2V0KSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVJdGVtQWdlKGluZGV4KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2XG4gICAgICB9XG5cbiAgICAgIC8vIG9rLCBpdCBpcyBzdGFsZSBvciBhIGZvcmNlZCByZWZyZXNoLCBhbmQgbm90IGFscmVhZHkgZmV0Y2hpbmcuXG4gICAgICAvLyByZWZyZXNoIHRoZSBjYWNoZS5cbiAgICAgIGNvbnN0IHAgPSB0aGlzLmJhY2tncm91bmRGZXRjaChrLCBpbmRleCwgb3B0aW9ucywgZmV0Y2hDb250ZXh0KVxuICAgICAgcmV0dXJuIGFsbG93U3RhbGUgJiYgcC5fX3N0YWxlV2hpbGVGZXRjaGluZyAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gcC5fX3N0YWxlV2hpbGVGZXRjaGluZ1xuICAgICAgICA6IChwLl9fcmV0dXJuZWQgPSBwKVxuICAgIH1cbiAgfVxuXG4gIGdldChcbiAgICBrLFxuICAgIHtcbiAgICAgIGFsbG93U3RhbGUgPSB0aGlzLmFsbG93U3RhbGUsXG4gICAgICB1cGRhdGVBZ2VPbkdldCA9IHRoaXMudXBkYXRlQWdlT25HZXQsXG4gICAgICBub0RlbGV0ZU9uU3RhbGVHZXQgPSB0aGlzLm5vRGVsZXRlT25TdGFsZUdldCxcbiAgICB9ID0ge31cbiAgKSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmtleU1hcC5nZXQoaylcbiAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnZhbExpc3RbaW5kZXhdXG4gICAgICBjb25zdCBmZXRjaGluZyA9IHRoaXMuaXNCYWNrZ3JvdW5kRmV0Y2godmFsdWUpXG4gICAgICBpZiAodGhpcy5pc1N0YWxlKGluZGV4KSkge1xuICAgICAgICAvLyBkZWxldGUgb25seSBpZiBub3QgYW4gaW4tZmxpZ2h0IGJhY2tncm91bmQgZmV0Y2hcbiAgICAgICAgaWYgKCFmZXRjaGluZykge1xuICAgICAgICAgIGlmICghbm9EZWxldGVPblN0YWxlR2V0KSB7XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZShrKVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYWxsb3dTdGFsZSA/IHZhbHVlIDogdW5kZWZpbmVkXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGFsbG93U3RhbGUgPyB2YWx1ZS5fX3N0YWxlV2hpbGVGZXRjaGluZyA6IHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpZiB3ZSdyZSBjdXJyZW50bHkgZmV0Y2hpbmcgaXQsIHdlIGRvbid0IGFjdHVhbGx5IGhhdmUgaXQgeWV0XG4gICAgICAgIC8vIGl0J3Mgbm90IHN0YWxlLCB3aGljaCBtZWFucyB0aGlzIGlzbid0IGEgc3RhbGVXaGlsZVJlZmV0Y2hpbmcsXG4gICAgICAgIC8vIHNvIHdlIGp1c3QgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICBpZiAoZmV0Y2hpbmcpIHtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb3ZlVG9UYWlsKGluZGV4KVxuICAgICAgICBpZiAodXBkYXRlQWdlT25HZXQpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUl0ZW1BZ2UoaW5kZXgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29ubmVjdChwLCBuKSB7XG4gICAgdGhpcy5wcmV2W25dID0gcFxuICAgIHRoaXMubmV4dFtwXSA9IG5cbiAgfVxuXG4gIG1vdmVUb1RhaWwoaW5kZXgpIHtcbiAgICAvLyBpZiB0YWlsIGFscmVhZHksIG5vdGhpbmcgdG8gZG9cbiAgICAvLyBpZiBoZWFkLCBtb3ZlIGhlYWQgdG8gbmV4dFtpbmRleF1cbiAgICAvLyBlbHNlXG4gICAgLy8gICBtb3ZlIG5leHRbcHJldltpbmRleF1dIHRvIG5leHRbaW5kZXhdIChoZWFkIGhhcyBubyBwcmV2KVxuICAgIC8vICAgbW92ZSBwcmV2W25leHRbaW5kZXhdXSB0byBwcmV2W2luZGV4XVxuICAgIC8vIHByZXZbaW5kZXhdID0gdGFpbFxuICAgIC8vIG5leHRbdGFpbF0gPSBpbmRleFxuICAgIC8vIHRhaWwgPSBpbmRleFxuICAgIGlmIChpbmRleCAhPT0gdGhpcy50YWlsKSB7XG4gICAgICBpZiAoaW5kZXggPT09IHRoaXMuaGVhZCkge1xuICAgICAgICB0aGlzLmhlYWQgPSB0aGlzLm5leHRbaW5kZXhdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbm5lY3QodGhpcy5wcmV2W2luZGV4XSwgdGhpcy5uZXh0W2luZGV4XSlcbiAgICAgIH1cbiAgICAgIHRoaXMuY29ubmVjdCh0aGlzLnRhaWwsIGluZGV4KVxuICAgICAgdGhpcy50YWlsID0gaW5kZXhcbiAgICB9XG4gIH1cblxuICBnZXQgZGVsKCkge1xuICAgIGRlcHJlY2F0ZWRNZXRob2QoJ2RlbCcsICdkZWxldGUnKVxuICAgIHJldHVybiB0aGlzLmRlbGV0ZVxuICB9XG5cbiAgZGVsZXRlKGspIHtcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlXG4gICAgaWYgKHRoaXMuc2l6ZSAhPT0gMCkge1xuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmtleU1hcC5nZXQoaylcbiAgICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRlbGV0ZWQgPSB0cnVlXG4gICAgICAgIGlmICh0aGlzLnNpemUgPT09IDEpIHtcbiAgICAgICAgICB0aGlzLmNsZWFyKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUl0ZW1TaXplKGluZGV4KVxuICAgICAgICAgIGNvbnN0IHYgPSB0aGlzLnZhbExpc3RbaW5kZXhdXG4gICAgICAgICAgaWYgKHRoaXMuaXNCYWNrZ3JvdW5kRmV0Y2godikpIHtcbiAgICAgICAgICAgIHYuX19hYm9ydENvbnRyb2xsZXIuYWJvcnQoKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2UodiwgaywgJ2RlbGV0ZScpXG4gICAgICAgICAgICBpZiAodGhpcy5kaXNwb3NlQWZ0ZXIpIHtcbiAgICAgICAgICAgICAgdGhpcy5kaXNwb3NlZC5wdXNoKFt2LCBrLCAnZGVsZXRlJ10pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMua2V5TWFwLmRlbGV0ZShrKVxuICAgICAgICAgIHRoaXMua2V5TGlzdFtpbmRleF0gPSBudWxsXG4gICAgICAgICAgdGhpcy52YWxMaXN0W2luZGV4XSA9IG51bGxcbiAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMudGFpbCkge1xuICAgICAgICAgICAgdGhpcy50YWlsID0gdGhpcy5wcmV2W2luZGV4XVxuICAgICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IHRoaXMuaGVhZCkge1xuICAgICAgICAgICAgdGhpcy5oZWFkID0gdGhpcy5uZXh0W2luZGV4XVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm5leHRbdGhpcy5wcmV2W2luZGV4XV0gPSB0aGlzLm5leHRbaW5kZXhdXG4gICAgICAgICAgICB0aGlzLnByZXZbdGhpcy5uZXh0W2luZGV4XV0gPSB0aGlzLnByZXZbaW5kZXhdXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc2l6ZS0tXG4gICAgICAgICAgdGhpcy5mcmVlLnB1c2goaW5kZXgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuZGlzcG9zZWQpIHtcbiAgICAgIHdoaWxlICh0aGlzLmRpc3Bvc2VkLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmRpc3Bvc2VBZnRlciguLi50aGlzLmRpc3Bvc2VkLnNoaWZ0KCkpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZWxldGVkXG4gIH1cblxuICBjbGVhcigpIHtcbiAgICBmb3IgKGNvbnN0IGluZGV4IG9mIHRoaXMucmluZGV4ZXMoeyBhbGxvd1N0YWxlOiB0cnVlIH0pKSB7XG4gICAgICBjb25zdCB2ID0gdGhpcy52YWxMaXN0W2luZGV4XVxuICAgICAgaWYgKHRoaXMuaXNCYWNrZ3JvdW5kRmV0Y2godikpIHtcbiAgICAgICAgdi5fX2Fib3J0Q29udHJvbGxlci5hYm9ydCgpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBrID0gdGhpcy5rZXlMaXN0W2luZGV4XVxuICAgICAgICB0aGlzLmRpc3Bvc2UodiwgaywgJ2RlbGV0ZScpXG4gICAgICAgIGlmICh0aGlzLmRpc3Bvc2VBZnRlcikge1xuICAgICAgICAgIHRoaXMuZGlzcG9zZWQucHVzaChbdiwgaywgJ2RlbGV0ZSddKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5rZXlNYXAuY2xlYXIoKVxuICAgIHRoaXMudmFsTGlzdC5maWxsKG51bGwpXG4gICAgdGhpcy5rZXlMaXN0LmZpbGwobnVsbClcbiAgICBpZiAodGhpcy50dGxzKSB7XG4gICAgICB0aGlzLnR0bHMuZmlsbCgwKVxuICAgICAgdGhpcy5zdGFydHMuZmlsbCgwKVxuICAgIH1cbiAgICBpZiAodGhpcy5zaXplcykge1xuICAgICAgdGhpcy5zaXplcy5maWxsKDApXG4gICAgfVxuICAgIHRoaXMuaGVhZCA9IDBcbiAgICB0aGlzLnRhaWwgPSAwXG4gICAgdGhpcy5pbml0aWFsRmlsbCA9IDFcbiAgICB0aGlzLmZyZWUubGVuZ3RoID0gMFxuICAgIHRoaXMuY2FsY3VsYXRlZFNpemUgPSAwXG4gICAgdGhpcy5zaXplID0gMFxuICAgIGlmICh0aGlzLmRpc3Bvc2VkKSB7XG4gICAgICB3aGlsZSAodGhpcy5kaXNwb3NlZC5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5kaXNwb3NlQWZ0ZXIoLi4udGhpcy5kaXNwb3NlZC5zaGlmdCgpKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldCByZXNldCgpIHtcbiAgICBkZXByZWNhdGVkTWV0aG9kKCdyZXNldCcsICdjbGVhcicpXG4gICAgcmV0dXJuIHRoaXMuY2xlYXJcbiAgfVxuXG4gIGdldCBsZW5ndGgoKSB7XG4gICAgZGVwcmVjYXRlZFByb3BlcnR5KCdsZW5ndGgnLCAnc2l6ZScpXG4gICAgcmV0dXJuIHRoaXMuc2l6ZVxuICB9XG5cbiAgc3RhdGljIGdldCBBYm9ydENvbnRyb2xsZXIoKSB7XG4gICAgcmV0dXJuIEFDXG4gIH1cbiAgc3RhdGljIGdldCBBYm9ydFNpZ25hbCgpIHtcbiAgICByZXR1cm4gQVNcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExSVUNhY2hlXG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImV4cG9ydCBlbnVtIERhdGFTdGF0dXMge1xuICBub1JlcXVlc3RzLFxuICByZXF1ZXN0ZWQsXG4gIHVwZGF0aW5nLFxuICBvayxcbiAgZXJyb3IsXG59XG4iLCJpbXBvcnQgeyBSZXNwb25zZSB9IGZyb20gXCIuL1Jlc3BvbnNlXCI7XG5pbXBvcnQgeyBSZXF1ZXN0IH0gZnJvbSBcIi4vUmVxdWVzdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5KFxuICByZXF1ZXN0OiBSZXF1ZXN0PGFueSwgYW55PixcbiAgcmVzcG9uc2U6IFJlc3BvbnNlPGFueT5cbik6IGJvb2xlYW4ge1xuICAvLyBlYWNoIHZhbHVlIGluIHJlcXVlc3QgcGF5bG9hZCBtdXN0IGJlIGZvdW5kIGluIHJlc3BvbnNlIG1ldGFcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHJlcXVlc3QucGF5bG9hZCkuZXZlcnkoa2V5ID0+IHtcbiAgICBjb25zdCByZXF1ZXN0VmFsdWUgPSByZXF1ZXN0LnBheWxvYWRba2V5XTtcbiAgICBjb25zdCByZXNwb25zZU1ldGFWYWx1ZSA9IHJlc3BvbnNlLm1ldGFba2V5XTtcbiAgICBpZiAodHlwZW9mIHJlcXVlc3RWYWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHJlcXVlc3RWYWx1ZSkgPT09IEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlTWV0YVZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlTWV0YVZhbHVlID09PSByZXF1ZXN0VmFsdWU7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHsgU3RvcmUgfSBmcm9tIFwic3RvcmUtdW5pdFwiO1xuaW1wb3J0IHsgVW5zdWJzY3JpYmUgfSBmcm9tIFwiLi4vc2hhcmVkL1Vuc3Vic2NyaWJlXCI7XG5pbXBvcnQgeyBEYXRhU3RhdHVzIH0gZnJvbSBcIi4vRGF0YVN0YXR1c1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVudHJ5PFQsIFNjb3BlTmFtZSBleHRlbmRzIHN0cmluZz4ge1xuICBkYXRhOiBSZWNvcmQ8U2NvcGVOYW1lLCBUPiB8IG51bGw7XG4gIHZhbHVlOiBUIHwgbnVsbDtcbiAgc3RhdHVzOiBEYXRhU3RhdHVzO1xuICB0aW1lc3RhbXA6IG51bWJlcjtcbiAgbWV0YTogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgaGFzU3Vic2NyaWJlcnM6IGJvb2xlYW47XG4gIGlzU3RhbGU6IGJvb2xlYW47XG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgaXNGZXRjaGluZzogYm9vbGVhbjtcbiAgaXNEb25lOiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJZGxlU3RhdHVzKHN0YXR1czogRGF0YVN0YXR1cyk6IGJvb2xlYW4ge1xuICByZXR1cm4gc3RhdHVzID09PSBEYXRhU3RhdHVzLmVycm9yIHx8IHN0YXR1cyA9PT0gRGF0YVN0YXR1cy5vaztcbn1cblxuZnVuY3Rpb24gaXNMb2FkaW5nU3RhdHVzKHN0YXR1czogRGF0YVN0YXR1cykge1xuICByZXR1cm4gc3RhdHVzID09PSBEYXRhU3RhdHVzLnJlcXVlc3RlZDtcbn1cblxuZnVuY3Rpb24gaXNGZXRjaGluZ1N0YXR1cyhzdGF0dXM6IERhdGFTdGF0dXMpIHtcbiAgcmV0dXJuIHN0YXR1cyA9PT0gRGF0YVN0YXR1cy5yZXF1ZXN0ZWQgfHwgc3RhdHVzID09PSBEYXRhU3RhdHVzLnVwZGF0aW5nO1xufVxuXG5leHBvcnQgY29uc3QgZ2V0SW5pdGlhbFN0YXRlID0gPFQsIFNjb3BlTmFtZSBleHRlbmRzIHN0cmluZz4oXG4gIGluaXRpYWxTdGF0dXM/OiBEYXRhU3RhdHVzXG4pOiBFbnRyeTxULCBTY29wZU5hbWU+ID0+ICh7XG4gIHN0YXR1czogaW5pdGlhbFN0YXR1cyA/PyBEYXRhU3RhdHVzLm5vUmVxdWVzdHMsXG4gIHZhbHVlOiBudWxsLFxuICBkYXRhOiBudWxsLFxuICB0aW1lc3RhbXA6IDAsXG4gIG1ldGE6IHt9LFxuICBoYXNTdWJzY3JpYmVyczogZmFsc2UsXG4gIGlzU3RhbGU6IGZhbHNlLFxuICBpc0xvYWRpbmc6IGlzTG9hZGluZ1N0YXR1cyhpbml0aWFsU3RhdHVzID8/IERhdGFTdGF0dXMubm9SZXF1ZXN0cyksXG4gIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmdTdGF0dXMoaW5pdGlhbFN0YXR1cyA/PyBEYXRhU3RhdHVzLm5vUmVxdWVzdHMpLFxuICBpc0RvbmU6IGZhbHNlLFxufSk7XG5cbmludGVyZmFjZSBTdWJzY3JpcHRpb24ge1xuICB1bnN1YnNjcmliZTogVW5zdWJzY3JpYmU7XG59XG5cbmV4cG9ydCBjbGFzcyBFbnRyeVN0b3JlPFQgPSBhbnksIFNjb3BlTmFtZSBleHRlbmRzIHN0cmluZyA9IGFueT4gZXh0ZW5kcyBTdG9yZTxcbiAgRW50cnk8VCwgU2NvcGVOYW1lPlxuPiB7XG4gIGFwaVN1YnNjcmlwdGlvbjogbnVsbCB8IFN1YnNjcmlwdGlvbjtcbiAgcHJpdmF0ZSBsaXN0ZW5lcnNDb3VudDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGVudHJ5OiBFbnRyeTxULCBTY29wZU5hbWU+KSB7XG4gICAgc3VwZXIoZW50cnkpO1xuICAgIHRoaXMuYXBpU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICB0aGlzLmxpc3RlbmVyc0NvdW50ID0gMDtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tU3RhdHVzKHN0YXR1cz86IEVudHJ5PGFueSwgYW55PltcInN0YXR1c1wiXSk6IEVudHJ5U3RvcmUge1xuICAgIHJldHVybiBuZXcgRW50cnlTdG9yZShnZXRJbml0aWFsU3RhdGUoc3RhdHVzKSk7XG4gIH1cblxuICBzZXREYXRhKHtcbiAgICBzY29wZU5hbWUsXG4gICAgdmFsdWUsXG4gICAgbWV0YSA9IHt9LFxuICAgIHN0YXR1cyxcbiAgICBpc0RvbmUsXG4gIH06IHtcbiAgICBzY29wZU5hbWU6IFNjb3BlTmFtZTtcbiAgICB2YWx1ZTogVCB8IG51bGw7XG4gICAgbWV0YT86IFJlY29yZDxzdHJpbmcsIGFueT47XG4gICAgc3RhdHVzOiBEYXRhU3RhdHVzO1xuICAgIGlzRG9uZTogYm9vbGVhbjtcbiAgfSk6IHZvaWQge1xuICAgIGNvbnN0IGRhdGEgPSB7IFtzY29wZU5hbWVdOiB2YWx1ZSB9IGFzIFJlY29yZDxTY29wZU5hbWUsIFQ+O1xuICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUgPT4gKHtcbiAgICAgIC4uLnN0YXRlLFxuICAgICAgZGF0YSxcbiAgICAgIG1ldGEsXG4gICAgICB2YWx1ZSxcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgIHN0YXR1cyxcbiAgICAgIGlzU3RhbGU6IGZhbHNlLFxuICAgICAgaXNMb2FkaW5nOiBpc0xvYWRpbmdTdGF0dXMoc3RhdHVzKSxcbiAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmdTdGF0dXMoc3RhdHVzKSxcbiAgICAgIGlzRG9uZSxcbiAgICB9KSk7XG4gIH1cblxuICBtYWtlU3Vic2NyaXB0aW9uKHsgdW5zdWJzY3JpYmUgfTogeyB1bnN1YnNjcmliZTogVW5zdWJzY3JpYmUgfSk6IHZvaWQge1xuICAgIC8vIE5PVEU6XG4gICAgLy8gaXQncyBvayB0byBtdXRhdGUgaGVyZSBiZWNhdXNlIG5vIGxpc3RlbmVycyBzaG91bGQndmUgYmVlbiBhZGRlZFxuICAgIC8vIGF0IHRoaXMgcG9pbnRcbiAgICB0aGlzLnN0YXRlLnN0YXR1cyA9IGlzSWRsZVN0YXR1cyh0aGlzLnN0YXRlLnN0YXR1cylcbiAgICAgID8gRGF0YVN0YXR1cy51cGRhdGluZ1xuICAgICAgOiBEYXRhU3RhdHVzLnJlcXVlc3RlZDtcbiAgICB0aGlzLnN0YXRlLmhhc1N1YnNjcmliZXJzID0gdHJ1ZTtcbiAgICB0aGlzLmFwaVN1YnNjcmlwdGlvbiA9IHsgdW5zdWJzY3JpYmUgfTtcbiAgfVxuXG4gIHJlbW92ZVN1YnNjcmlwdGlvbigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5hcGlTdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuYXBpU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLmFwaVN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICB0aGlzLnN0YXRlLmhhc1N1YnNjcmliZXJzID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLnN0YXR1cyA9PT0gRGF0YVN0YXR1cy5yZXF1ZXN0ZWQpIHtcbiAgICAgIC8vIE5PVEU6XG4gICAgICAvLyBpdCdzIG9rIHRvIG11dGF0ZSBoZXJlIGJlY2F1c2UgdGhlcmUgYXJlIG5vIG1vcmUgbGlzdGVuZXJzIGF0dGFjaGVkXG4gICAgICB0aGlzLnN0YXRlLnN0YXR1cyA9IERhdGFTdGF0dXMubm9SZXF1ZXN0cztcbiAgICB9XG4gIH1cblxuICBhZGRDbGllbnRMaXN0ZW5lcihcbiAgICBjYjogUGFyYW1ldGVyczxTdG9yZTxFbnRyeTxULCBTY29wZU5hbWU+PltcIm9uXCJdPlsxXVxuICApOiAoKSA9PiB2b2lkIHtcbiAgICBjb25zdCB1bmxpc3RlbiA9IHN1cGVyLm9uKFwiY2hhbmdlXCIsIGNiKTtcbiAgICAvLyByZXR1cm4gdW5saXN0ZW47XG4gICAgdGhpcy5saXN0ZW5lcnNDb3VudCArPSAxO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB1bmxpc3RlbigpO1xuXG4gICAgICB0aGlzLmxpc3RlbmVyc0NvdW50IC09IDE7XG4gICAgICBpZiAodGhpcy5saXN0ZW5lcnNDb3VudCA9PT0gMCkge1xuICAgICAgICAvLyBubyBtb3JlIHN1YnNjcmliZXJzIGxlZnQsIHVuc3ViIGZyb20gc29ja2V0XG4gICAgICAgIHRoaXMucmVtb3ZlU3Vic2NyaXB0aW9uKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBkbyBub3QgZWRpdCAuanMgZmlsZXMgZGlyZWN0bHkgLSBlZGl0IHNyYy9pbmRleC5qc3RcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgJiYgYiAmJiB0eXBlb2YgYSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgYiA9PSAnb2JqZWN0Jykge1xuICAgIGlmIChhLmNvbnN0cnVjdG9yICE9PSBiLmNvbnN0cnVjdG9yKSByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgbGVuZ3RoLCBpLCBrZXlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgICAgaWYgKCFlcXVhbChhW2ldLCBiW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG5cblxuICAgIGlmIChhLmNvbnN0cnVjdG9yID09PSBSZWdFeHApIHJldHVybiBhLnNvdXJjZSA9PT0gYi5zb3VyY2UgJiYgYS5mbGFncyA9PT0gYi5mbGFncztcbiAgICBpZiAoYS52YWx1ZU9mICE9PSBPYmplY3QucHJvdG90eXBlLnZhbHVlT2YpIHJldHVybiBhLnZhbHVlT2YoKSA9PT0gYi52YWx1ZU9mKCk7XG4gICAgaWYgKGEudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpIHJldHVybiBhLnRvU3RyaW5nKCkgPT09IGIudG9TdHJpbmcoKTtcblxuICAgIGtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoICE9PSBPYmplY3Qua2V5cyhiKS5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIGtleXNbaV0pKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIWVxdWFsKGFba2V5XSwgYltrZXldKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gdHJ1ZSBpZiBib3RoIE5hTiwgZmFsc2Ugb3RoZXJ3aXNlXG4gIHJldHVybiBhIT09YSAmJiBiIT09Yjtcbn07XG4iLCJpbXBvcnQgeyBTdWJzY3JpcHRpb25FdmVudCB9IGZyb20gXCIuLi9yZXF1ZXN0cy9TdWJzY3JpcHRpb25FdmVudFwiO1xuXG5pbnRlcmZhY2UgRGF0YTxUPiB7XG4gIFtrZXk6IHN0cmluZ106IFQ7XG59XG5cbmludGVyZmFjZSBSZWNlaXZlZEV2ZW50PFQ+IHtcbiAgZXZlbnQ6IFN1YnNjcmlwdGlvbkV2ZW50ICYgXCJyZWNlaXZlZFwiO1xuICBwcmV2RGF0YTogRGF0YTxUPiB8IG51bGw7XG4gIG5ld0RhdGE6IERhdGE8VD47XG4gIGdldElkPzogdHlwZW9mIGRlZmF1bHRHZXRJZDtcbn1cblxudHlwZSBVcGRhdGVFdmVudExpc3Q8VD4gPSB7XG4gIGV2ZW50OiBTdWJzY3JpcHRpb25FdmVudCAmIChcImNoYW5nZWRcIiB8IFwiYXBwZW5kZWRcIiB8IFwicmVtb3ZlZFwiIHwgXCJkb25lXCIpO1xuICBwcmV2RGF0YTogRGF0YTxUPiB8IG51bGw7XG4gIG5ld0RhdGE6IFRbXTtcbiAgZ2V0SWQ/OiB0eXBlb2YgZGVmYXVsdEdldElkO1xufTtcblxudHlwZSBEaWN0RXZlbnQ8VD4gPSBSZWNlaXZlZEV2ZW50PFQ+IHwgVXBkYXRlRXZlbnRMaXN0PFQ+O1xuXG5pbnRlcmZhY2UgTGlzdEV2ZW50PFQ+IHtcbiAgZXZlbnQ6IFN1YnNjcmlwdGlvbkV2ZW50O1xuICBwcmV2RGF0YTogVFtdIHwgbnVsbDtcbiAgbmV3RGF0YTogVFtdO1xuICBnZXRJZD86IHR5cGVvZiBkZWZhdWx0R2V0SWQ7XG59XG5cbmludGVyZmFjZSBFbnRpdHlFdmVudDxUPiB7XG4gIGV2ZW50OiBTdWJzY3JpcHRpb25FdmVudDtcbiAgcHJldkRhdGE6IFQgfCBudWxsO1xuICBuZXdEYXRhOiBUO1xufVxuXG5mdW5jdGlvbiByZWNlaXZlZDxUPihkYXRhOiBUKSB7XG4gIHJldHVybiBkYXRhO1xufVxuXG5jb25zdCBkZWZhdWx0R2V0SWQgPSA8VCBleHRlbmRzIGFueT4oeDogVCk6IHN0cmluZyB8IG51bWJlciA9PlxuICBcImlkXCIgaW4gKHggYXMgYW55KSA/ICh4IGFzIGFueSkuaWQgOiB4O1xuXG5mdW5jdGlvbiBjaGFuZ2VkPFQ+KFxuICBwcmV2RGF0YTogRGF0YTxUPiB8IG51bGwsXG4gIG5ld0RhdGE6IFRbXSxcbiAgZ2V0SWQgPSBkZWZhdWx0R2V0SWRcbikge1xuICBjb25zdCBjb3B5ID0gcHJldkRhdGEgPyB7IC4uLnByZXZEYXRhIH0gOiB7fTtcbiAgbmV3RGF0YS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgIGNvbnN0IGlkID0gZ2V0SWQoaXRlbSk7XG4gICAgY29weVtpZF0gPSBpdGVtO1xuICB9KTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIGlzUmVjZWl2ZWQ8VD4oeDogRGljdEV2ZW50PFQ+KTogeCBpcyBSZWNlaXZlZEV2ZW50PFQ+IHtcbiAgcmV0dXJuIHguZXZlbnQgPT09IFwicmVjZWl2ZWRcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlRGljdDxUPihldmVudERhdGE6IERpY3RFdmVudDxUPik6IERhdGE8VD4ge1xuICBpZiAoaXNSZWNlaXZlZChldmVudERhdGEpKSB7XG4gICAgcmV0dXJuIHJlY2VpdmVkKGV2ZW50RGF0YS5uZXdEYXRhKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB7IGV2ZW50IH0gPSBldmVudERhdGE7XG4gICAgaWYgKGV2ZW50ID09PSBcImNoYW5nZWRcIikge1xuICAgICAgcmV0dXJuIGNoYW5nZWQoZXZlbnREYXRhLnByZXZEYXRhLCBldmVudERhdGEubmV3RGF0YSwgZXZlbnREYXRhLmdldElkKTtcbiAgICB9XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGV2ZW50OiAke2V2ZW50fWApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VTaW5nbGVFbnRpdHk8VD4oZXZlbnREYXRhOiBFbnRpdHlFdmVudDxUPik6IFQge1xuICByZXR1cm4gZXZlbnREYXRhLm5ld0RhdGE7XG59XG5cbmZ1bmN0aW9uIGxpc3RSZWNlaXZlZDxUPihkYXRhOiBUW10pIHtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIHRvQ29sbGVjdGlvbjxUPihsaXN0OiBUW10sIGdldElkOiB0eXBlb2YgZGVmYXVsdEdldElkKSB7XG4gIGNvbnN0IGNvbGxlY3Rpb246IHsgW2tleTogc3RyaW5nXTogVCB9ID0ge307XG4gIGxpc3QuZm9yRWFjaChpdGVtID0+IHtcbiAgICBjb2xsZWN0aW9uW2dldElkKGl0ZW0pXSA9IGl0ZW07XG4gIH0pO1xuICByZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gbGlzdENoYW5nZWQ8VD4oXG4gIHByZXZEYXRhOiBUW10gfCBudWxsLFxuICBuZXdEYXRhOiBUW10sXG4gIGdldElkID0gZGVmYXVsdEdldElkXG4pIHtcbiAgbGV0IGRpZFVwZGF0ZVNvbWV0aGluZyA9IGZhbHNlO1xuICBpZiAocHJldkRhdGEgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBoYW5kbGUgXCJjaGFuZ2VcIiBldmVudCBiZWZvcmUgXCJyZWNlaXZlZFwiJyk7XG4gIH1cbiAgY29uc3QgY29sbGVjdGlvbiA9IHRvQ29sbGVjdGlvbihuZXdEYXRhLCBnZXRJZCk7XG4gIGNvbnN0IG5ld1N0YXRlID0gcHJldkRhdGEubWFwKG9sZEVudGl0eSA9PiB7XG4gICAgY29uc3QgaWQgPSBnZXRJZChvbGRFbnRpdHkpO1xuICAgIGlmIChpZCBpbiBjb2xsZWN0aW9uKSB7XG4gICAgICBkaWRVcGRhdGVTb21ldGhpbmcgPSB0cnVlO1xuICAgICAgcmV0dXJuIGNvbGxlY3Rpb25baWRdO1xuICAgIH1cbiAgICByZXR1cm4gb2xkRW50aXR5O1xuICB9KTtcbiAgaWYgKCFkaWRVcGRhdGVTb21ldGhpbmcpIHtcbiAgICByZXR1cm4gcHJldkRhdGE7XG4gIH1cbiAgcmV0dXJuIG5ld1N0YXRlO1xufVxuXG5mdW5jdGlvbiBsaXN0UmVtb3ZlZDxUPihcbiAgcHJldkRhdGE6IFRbXSB8IG51bGwsXG4gIG5ld0RhdGE6IFRbXSxcbiAgZ2V0SWQgPSBkZWZhdWx0R2V0SWRcbikge1xuICBpZiAocHJldkRhdGEgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBoYW5kbGUgXCJyZW1vdmVkXCIgZXZlbnQgYmVmb3JlIFwicmVjZWl2ZWRcIicpO1xuICB9XG4gIGNvbnN0IGNvbGxlY3Rpb24gPSB0b0NvbGxlY3Rpb24obmV3RGF0YSwgZ2V0SWQpO1xuICBjb25zdCB3aXRob3V0ID0gcHJldkRhdGEuZmlsdGVyKG9sZE1vZGVsID0+ICEoZ2V0SWQob2xkTW9kZWwpIGluIGNvbGxlY3Rpb24pKTtcbiAgaWYgKHdpdGhvdXQubGVuZ3RoID09PSBwcmV2RGF0YS5sZW5ndGgpIHtcbiAgICAvLyBkaWQgbm90IHJlbW92ZSBhbnl0aGluZ1xuICAgIHJldHVybiBwcmV2RGF0YTtcbiAgfVxuICByZXR1cm4gd2l0aG91dDtcbn1cblxuZnVuY3Rpb24gbGlzdEFwcGVuZGVkPFQ+KHByZXZEYXRhOiBUW10gfCBudWxsLCBuZXdEYXRhOiBUW10pIHtcbiAgaWYgKHByZXZEYXRhID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgaGFuZGxlIFwiYXBwZW5kZWRcIiBldmVudCBiZWZvcmUgXCJyZWNlaXZlZFwiJyk7XG4gIH1cbiAgcmV0dXJuIFsuLi5wcmV2RGF0YSwgLi4ubmV3RGF0YV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUxpc3Q8VD4oZXZlbnREYXRhOiBMaXN0RXZlbnQ8VD4pOiBUW10ge1xuICBpZiAoZXZlbnREYXRhLmV2ZW50ID09PSBcInJlY2VpdmVkXCIpIHtcbiAgICByZXR1cm4gbGlzdFJlY2VpdmVkKGV2ZW50RGF0YS5uZXdEYXRhKTtcbiAgfSBlbHNlIGlmIChldmVudERhdGEuZXZlbnQgPT09IFwiY2hhbmdlZFwiKSB7XG4gICAgcmV0dXJuIGxpc3RDaGFuZ2VkKGV2ZW50RGF0YS5wcmV2RGF0YSwgZXZlbnREYXRhLm5ld0RhdGEsIGV2ZW50RGF0YS5nZXRJZCk7XG4gIH0gZWxzZSBpZiAoZXZlbnREYXRhLmV2ZW50ID09PSBcInJlbW92ZWRcIikge1xuICAgIHJldHVybiBsaXN0UmVtb3ZlZChldmVudERhdGEucHJldkRhdGEsIGV2ZW50RGF0YS5uZXdEYXRhLCBldmVudERhdGEuZ2V0SWQpO1xuICB9IGVsc2UgaWYgKGV2ZW50RGF0YS5ldmVudCA9PT0gXCJhcHBlbmRlZFwiKSB7XG4gICAgcmV0dXJuIGxpc3RBcHBlbmRlZChldmVudERhdGEucHJldkRhdGEsIGV2ZW50RGF0YS5uZXdEYXRhKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgZXZlbnQ6ICR7ZXZlbnREYXRhLmV2ZW50fWApO1xufVxuXG5mdW5jdGlvbiBsaXN0UHJlcGVuZGVkPFQ+KHByZXZEYXRhOiBUW10gfCBudWxsLCBuZXdEYXRhOiBUW10pIHtcbiAgaWYgKHByZXZEYXRhID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgaGFuZGxlIFwiYXBwZW5kZWRcIiBldmVudCBiZWZvcmUgXCJyZWNlaXZlZFwiJyk7XG4gIH1cbiAgcmV0dXJuIFsuLi5uZXdEYXRhLCAuLi5wcmV2RGF0YV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUxpc3RSZXZlcnNlQ2hyb25vbG9naWNhbDxUPihldmVudERhdGE6IExpc3RFdmVudDxUPik6IFRbXSB7XG4gIGlmIChldmVudERhdGEuZXZlbnQgPT09IFwicmVjZWl2ZWRcIikge1xuICAgIHJldHVybiBsaXN0UmVjZWl2ZWQoZXZlbnREYXRhLm5ld0RhdGEpO1xuICB9IGVsc2UgaWYgKGV2ZW50RGF0YS5ldmVudCA9PT0gXCJjaGFuZ2VkXCIpIHtcbiAgICByZXR1cm4gbGlzdENoYW5nZWQoZXZlbnREYXRhLnByZXZEYXRhLCBldmVudERhdGEubmV3RGF0YSwgZXZlbnREYXRhLmdldElkKTtcbiAgfSBlbHNlIGlmIChldmVudERhdGEuZXZlbnQgPT09IFwicmVtb3ZlZFwiKSB7XG4gICAgcmV0dXJuIGxpc3RSZW1vdmVkKGV2ZW50RGF0YS5wcmV2RGF0YSwgZXZlbnREYXRhLm5ld0RhdGEsIGV2ZW50RGF0YS5nZXRJZCk7XG4gIH0gZWxzZSBpZiAoZXZlbnREYXRhLmV2ZW50ID09PSBcImFwcGVuZGVkXCIpIHtcbiAgICByZXR1cm4gbGlzdFByZXBlbmRlZChldmVudERhdGEucHJldkRhdGEsIGV2ZW50RGF0YS5uZXdEYXRhKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgZXZlbnQ6ICR7ZXZlbnREYXRhLmV2ZW50fWApO1xufVxuXG5leHBvcnQgdHlwZSBNZXJnZVN0cmF0ZWd5ID0gdHlwZW9mIG1lcmdlRGljdCB8IHR5cGVvZiBtZXJnZUxpc3Q7XG4iLCJpbXBvcnQgeyBSZXNwb25zZSB9IGZyb20gXCIuL1Jlc3BvbnNlXCI7XG5pbXBvcnQgeyBSZXF1ZXN0IH0gZnJvbSBcIi4vUmVxdWVzdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5QnlSZXF1ZXN0SWQoXG4gIHJlcXVlc3Q6IFJlcXVlc3Q8YW55LCBhbnk+LFxuICByZXNwb25zZTogUmVzcG9uc2U8YW55PlxuKTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgXCJyZXF1ZXN0X2lkXCIgaW4gcmVzcG9uc2UubWV0YSAmJlxuICAgIHJlcXVlc3QucGF5bG9hZC5yZXF1ZXN0X2lkID09PSByZXNwb25zZS5tZXRhLnJlcXVlc3RfaWRcbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgQ2FjaGVQb2xpY3kgfSBmcm9tIFwiLi9DYWNoZVBvbGljeVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkUmV0dXJuQ2FjaGVkRGF0YShjYWNoZVBvbGljeTogQ2FjaGVQb2xpY3kpOiBib29sZWFuIHtcbiAgc3dpdGNoIChjYWNoZVBvbGljeSkge1xuICAgIGNhc2UgXCJjYWNoZS1hbmQtbmV0d29ya1wiOlxuICAgIGNhc2UgXCJjYWNoZS1maXJzdFwiOlxuICAgIGNhc2UgXCJjYWNoZS1vbmx5XCI6IHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXNlIFwibmV0d29yay1vbmx5XCI6IHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgY2FjaGUgcG9saWN5OiAke2NhY2hlUG9saWN5fWApO1xuICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7IENhY2hlUG9saWN5IH0gZnJvbSBcIi4vQ2FjaGVQb2xpY3lcIjtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRDYWNoZVBvbGljeTogQ2FjaGVQb2xpY3kgPSBcImNhY2hlLWFuZC1uZXR3b3JrXCI7XG4iLCJpbXBvcnQgeyBDYWNoZVBvbGljeSB9IGZyb20gXCIuL0NhY2hlUG9saWN5XCI7XG5cbnR5cGUgS2V5ID0gc3RyaW5nIHwgbnVtYmVyO1xuXG5leHBvcnQgY2xhc3MgUmVxdWVzdENhY2hlPFZhbHVlPiB7XG4gIG1hcDogTWFwPEtleSwgVmFsdWU+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubWFwID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICBnZXQoa2V5OiBLZXksIF9jYWNoZVBvbGljeTogQ2FjaGVQb2xpY3kgfCBudWxsKTogVmFsdWUgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KGtleSkgfHwgbnVsbDtcbiAgfVxuXG4gIHNldChrZXk6IEtleSwgZW50cnk6IFZhbHVlKTogdm9pZCB7XG4gICAgdGhpcy5tYXAuc2V0KGtleSwgZW50cnkpO1xuICB9XG5cbiAgcmVtb3ZlKGtleTogS2V5KTogdm9pZCB7XG4gICAgdGhpcy5tYXAuZGVsZXRlKGtleSk7XG4gIH1cblxuICBjbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLm1hcC5jbGVhcigpO1xuICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7IFNvY2tldCB9IGZyb20gXCJzb2NrZXQuaW8tY2xpZW50XCI7XG5pbXBvcnQgdHlwZSB7IFJlc3BvbnNlIH0gZnJvbSBcIi4uL3JlcXVlc3RzL1Jlc3BvbnNlXCI7XG5pbXBvcnQgdHlwZSB7IFJlcXVlc3QgfSBmcm9tIFwiLi4vcmVxdWVzdHMvUmVxdWVzdFwiO1xuaW1wb3J0IHsgdmVyaWZ5QnlSZXF1ZXN0SWQgfSBmcm9tIFwiLi4vcmVxdWVzdHMvdmVyaWZ5QnlSZXF1ZXN0SWRcIjtcblxuY29uc3QgcGVuZGluZ1JlcXVlc3RzID0gbmV3IE1hcCgpO1xuY29uc3QgYWN0aXZlU3Vic2NyaXB0aW9ucyA9IG5ldyBNYXAoKTtcblxuZnVuY3Rpb24gaGFuZGxlR2V0KFxuICBzb2NrZXQ6IHR5cGVvZiBTb2NrZXQsXG4gIGVuZHBvaW50OiBzdHJpbmcsXG4gIGFyZ3M6IEFycmF5TGlrZTxhbnk+XG4pIHtcbiAgY29uc3QgcmVxdWVzdCA9IGFyZ3NbMV0gYXMgUmVxdWVzdDxhbnksIGFueT47XG4gIGlmICghcmVxdWVzdCB8fCAhcmVxdWVzdC5zY29wZSB8fCAhcmVxdWVzdC5wYXlsb2FkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHsgc2NvcGUgfSA9IHJlcXVlc3Q7XG4gIHBlbmRpbmdSZXF1ZXN0cy5nZXQoc29ja2V0KS5hZGQoYXJncyk7XG4gIHNjb3BlLmZvckVhY2goc2NvcGVOYW1lID0+IHtcbiAgICBmdW5jdGlvbiBoYW5kbGVSZWNlaXZlKHJlc3BvbnNlOiBSZXNwb25zZTxhbnk+KSB7XG4gICAgICBpZiAodmVyaWZ5QnlSZXF1ZXN0SWQocmVxdWVzdCwgcmVzcG9uc2UpKSB7XG4gICAgICAgIHNvY2tldC5vZmYoYHJlY2VpdmVkICR7ZW5kcG9pbnR9ICR7c2NvcGVOYW1lfWAsIGhhbmRsZVJlY2VpdmUpO1xuICAgICAgICBwZW5kaW5nUmVxdWVzdHMuZ2V0KHNvY2tldCkuZGVsZXRlKGFyZ3MpO1xuICAgICAgfVxuICAgIH1cbiAgICBzb2NrZXQub24oYHJlY2VpdmVkICR7ZW5kcG9pbnR9ICR7c2NvcGVOYW1lfWAsIGhhbmRsZVJlY2VpdmUpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlU3Vic2NyaWJlKHNvY2tldDogdHlwZW9mIFNvY2tldCwgYXJnczogQXJyYXlMaWtlPGFueT4pIHtcbiAgY29uc3QgZXZlbnQgPSBhcmdzWzBdO1xuICBjb25zdCByZXF1ZXN0ID0gYXJnc1sxXSBhcyBSZXF1ZXN0PGFueSwgYW55PjtcbiAgaWYgKCFyZXF1ZXN0IHx8ICFyZXF1ZXN0LnNjb3BlIHx8ICFyZXF1ZXN0LnBheWxvYWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZXZlbnQgPT09IFwic3Vic2NyaWJlXCIpIHtcbiAgICBhY3RpdmVTdWJzY3JpcHRpb25zLmdldChzb2NrZXQpLnNldChyZXF1ZXN0LCBhcmdzKTtcbiAgfVxuXG4gIGlmIChldmVudCA9PT0gXCJ1bnN1YnNjcmliZVwiICYmIGFjdGl2ZVN1YnNjcmlwdGlvbnMuZ2V0KHNvY2tldCkuaGFzKHJlcXVlc3QpKSB7XG4gICAgYWN0aXZlU3Vic2NyaXB0aW9ucy5nZXQoc29ja2V0KS5kZWxldGUocmVxdWVzdCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlY29ubmVjdGlvblByb3h5KFxuICBzb2NrZXQ6IHR5cGVvZiBTb2NrZXQsXG4gIGVuZHBvaW50OiBzdHJpbmdcbik6IHR5cGVvZiBTb2NrZXQge1xuICBwZW5kaW5nUmVxdWVzdHMuc2V0KHNvY2tldCwgbmV3IFNldCgpKTtcbiAgYWN0aXZlU3Vic2NyaXB0aW9ucy5zZXQoc29ja2V0LCBuZXcgTWFwKCkpO1xuXG4gIGNvbnN0IG9yaWdpbmFsRW1pdCA9IHNvY2tldC5lbWl0O1xuXG4gIC8qKlxuICAgKiBJbiBvcmRlciB0byBpbnRlcmNlcHQgYGVtaXRgIGNhbGxzIHRvIHRoZSBzb2NrZXQsXG4gICAqIHdlIGhhdmUgdG8gbW9ua2V5LXBhdGNoIHRoZSBtZXRob2QuXG4gICAqIFRoZXJlJ3Mgbm8gbWlkZGxld2FyZSBzdXBwb3J0IGF0IHRoZSBtb21lbnQ6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zb2NrZXRpby9zb2NrZXQuaW8vaXNzdWVzLzQzNFxuICAgKlxuICAgKiBBbHNvLCB3ZSdyZSBub3QgdXNpbmcgYW4gYWN0dWFsIFByb3h5IChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9Qcm94eSlcbiAgICogYmVjYXVzZSB0aGUgaW1wbGVtZW50YXRpb24gd291bGQgc3RpbGwgcmVxdWlyZSB0byBtb25rZXktcGF0Y2ggdGhlIG1ldGhvZCxcbiAgICogc28gdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgcHJhY3RpY2FsIGRpZmZlcmVuY2UgKG5vdCBzdXJlLCB0aG91Z2gpXG4gICAqL1xuICBPYmplY3QuYXNzaWduKHNvY2tldCwge1xuICAgIGVtaXQoZXZlbnQ6IHN0cmluZykge1xuICAgICAgLyoqXG4gICAgICAgKiBOT1RFOiBzcGVjaWFsIGBhcmd1bWVudHNgIG9iamVjdCBpcyB1c2VkIGhlcmUgZm9yIHBlcmZvcm1hbmNlOlxuICAgICAgICogdGhpcyBmdW5jdGlvbiBpcyBleHBlY3RlZCB0byBiZSBjYWxsZWQgdmVyeSBvZnRlbixcbiAgICAgICAqIHNvIHdlIHdhbnQgdG8gYXZvaWQgdW5uZWNlc3NhcnkgYXJyYXkgc3ByZWFkaW5nXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICBpZiAoZXZlbnQgPT09IFwiZ2V0XCIpIHtcbiAgICAgICAgaGFuZGxlR2V0KHNvY2tldCwgZW5kcG9pbnQsIGFyZ3MpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgZXZlbnQgPT09IFwic3RyZWFtXCIgfHxcbiAgICAgICAgZXZlbnQgPT09IFwic3Vic2NyaWJlXCIgfHxcbiAgICAgICAgZXZlbnQgPT09IFwidW5zdWJzY3JpYmVcIlxuICAgICAgKSB7XG4gICAgICAgIGhhbmRsZVN1YnNjcmliZShzb2NrZXQsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgb3JpZ2luYWxFbWl0LmFwcGx5KHNvY2tldCwgYXJndW1lbnRzIGFzIGFueSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gZmxhZyB0byBhdm9pZCBoYW5kbGluZyBhICdyZWNvbm5lY3QnIGV2ZW50IHR3aWNlXG4gIGxldCBkaWRIYW5kbGVSZWNvbm5lY3QgPSBmYWxzZTtcblxuICBzb2NrZXQub24oXCJkaXNjb25uZWN0XCIsICgpID0+IHtcbiAgICBkaWRIYW5kbGVSZWNvbm5lY3QgPSBmYWxzZTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gaGFuZGxlUmVjb25uZWN0KCkge1xuICAgIGZvciAoY29uc3Qgc2F2ZWRBcmdzIG9mIHBlbmRpbmdSZXF1ZXN0cy5nZXQoc29ja2V0KSkge1xuICAgICAgb3JpZ2luYWxFbWl0LmFwcGx5KHNvY2tldCwgc2F2ZWRBcmdzKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBzYXZlZEFyZ3Mgb2YgYWN0aXZlU3Vic2NyaXB0aW9ucy5nZXQoc29ja2V0KS52YWx1ZXMoKSkge1xuICAgICAgb3JpZ2luYWxFbWl0LmFwcGx5KHNvY2tldCwgc2F2ZWRBcmdzKTtcbiAgICB9XG4gIH1cblxuICBzb2NrZXQub24oXCJyZWNvbm5lY3RcIiwgKCkgPT4ge1xuICAgIGlmIChkaWRIYW5kbGVSZWNvbm5lY3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGlkSGFuZGxlUmVjb25uZWN0ID0gdHJ1ZTtcbiAgICBoYW5kbGVSZWNvbm5lY3QoKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHNvY2tldDtcbn1cbiIsImltcG9ydCBpbyBmcm9tIFwic29ja2V0LmlvLWNsaWVudFwiO1xuaW1wb3J0IHR5cGUgeyBTb2NrZXROYW1lc3BhY2UgfSBmcm9tIFwiLi4vc2hhcmVkL1NvY2tldE5hbWVzcGFjZVwiO1xuaW1wb3J0IHsgaGFuZGxlUGFnZVZpc2liaWxpdHkgfSBmcm9tIFwiLi9wYWdlLXZpc2liaWxpdHlcIjtcbmltcG9ydCB7IHJlY29ubmVjdGlvblByb3h5IH0gZnJvbSBcIi4vcmVjb25uZWN0aW9uLXByb3h5XCI7XG5cbmNvbnN0IGNhY2hlZDogeyBba2V5OiBzdHJpbmddOiBTb2NrZXROYW1lc3BhY2U8YW55PiB9ID0ge307XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVTb2NrZXROYW1lc3BhY2UgPSA8VCBleHRlbmRzIHN0cmluZz4oXG4gIGVuZHBvaW50OiBzdHJpbmcsXG4gIGFwaVRva2VuOiBzdHJpbmcsXG4gIG5hbWVzcGFjZTogVCxcbiAgaW9PcHRpb25zOiBQYXJhbWV0ZXJzPHR5cGVvZiBpbz5bMF0gPSB7fSxcbiAgbmFtZXNwYWNlTmFtZSA9IG5hbWVzcGFjZVxuKTogU29ja2V0TmFtZXNwYWNlPFQ+ID0+IHtcbiAgaWYgKCFjYWNoZWRbbmFtZXNwYWNlXSkge1xuICAgIGNvbnN0IHsgcXVlcnkgPSB7fSwgLi4ucmVzdE9wdGlvbnMgfSA9IGlvT3B0aW9ucztcbiAgICBjb25zdCBzb2NrZXQgPSBpbyhuZXcgVVJMKG5hbWVzcGFjZSwgZW5kcG9pbnQpLnRvU3RyaW5nKCksIHtcbiAgICAgIHRyYW5zcG9ydHM6IFtcIndlYnNvY2tldFwiXSxcbiAgICAgIHRpbWVvdXQ6IDYwMDAwLFxuICAgICAgcXVlcnk6IHsgYXBpX3Rva2VuOiBhcGlUb2tlbiwgLi4ucXVlcnkgfSxcbiAgICAgIC4uLnJlc3RPcHRpb25zLFxuICAgIH0pO1xuICAgIGNvbnN0IHVwZGF0ZWRTb2NrZXQgPSByZWNvbm5lY3Rpb25Qcm94eShzb2NrZXQsIGVuZHBvaW50KTtcbiAgICBoYW5kbGVQYWdlVmlzaWJpbGl0eSh1cGRhdGVkU29ja2V0KTtcbiAgICBjYWNoZWRbbmFtZXNwYWNlXSA9IHsgc29ja2V0OiB1cGRhdGVkU29ja2V0LCBuYW1lc3BhY2U6IG5hbWVzcGFjZU5hbWUgfTtcbiAgfVxuICByZXR1cm4gY2FjaGVkW25hbWVzcGFjZV07XG59O1xuIiwiaW1wb3J0IHR5cGUgeyBNZXJnZVN0cmF0ZWd5IH0gZnJvbSBcIi4uL3NoYXJlZC9tZXJnZVN0cmF0ZWdpZXNcIjtcbmltcG9ydCB0eXBlIHsgQ2FjaGVkUmVxdWVzdE9wdGlvbnMsIENsaWVudCB9IGZyb20gXCIuLi9jbGllbnRcIjtcbmltcG9ydCB0eXBlIHsgRW50cnlTdG9yZSB9IGZyb20gXCIuLi9jYWNoZS9FbnRyeVwiO1xuaW1wb3J0IHR5cGUgeyBVbnN1YnNjcmliZSB9IGZyb20gXCIuLi9zaGFyZWQvVW5zdWJzY3JpYmVcIjtcbmltcG9ydCB0eXBlIHsgUmVzcG9uc2VQYXlsb2FkIH0gZnJvbSBcIi4uL3JlcXVlc3RzL1Jlc3BvbnNlUGF5bG9hZFwiO1xuaW1wb3J0IHsgdmVyaWZ5IH0gZnJvbSBcIi4uL3JlcXVlc3RzL3ZlcmlmeVwiO1xuXG5leHBvcnQgdHlwZSBPcHRpb25zPFxuICBSZXF1ZXN0UGF5bG9hZCxcbiAgUmVzcG9uc2VEYXRhLFxuICBOYW1lc3BhY2UgZXh0ZW5kcyBzdHJpbmcsXG4gIFNjb3BlTmFtZSBleHRlbmRzIHN0cmluZ1xuPiA9IE9taXQ8XG4gIENhY2hlZFJlcXVlc3RPcHRpb25zPFJlc3BvbnNlRGF0YSwgTmFtZXNwYWNlLCBTY29wZU5hbWUsIFJlcXVlc3RQYXlsb2FkPixcbiAgXCJib2R5XCIgfCBcInNvY2tldE5hbWVzcGFjZVwiIHwgXCJvbkRhdGFcIlxuPiAmIHtcbiAgY2xpZW50PzogQ2xpZW50O1xuICBvbkRhdGE6IChkYXRhOiBSZXNwb25zZVBheWxvYWQ8UmVzcG9uc2VEYXRhLCBTY29wZU5hbWU+KSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURvbWFpblJlcXVlc3Q8XG4gIFJlcXVlc3RQYXlsb2FkLFxuICBSZXNwb25zZURhdGEsXG4gIE5hbWVzcGFjZSBleHRlbmRzIHN0cmluZyxcbiAgU2NvcGVOYW1lIGV4dGVuZHMgc3RyaW5nXG4+KHtcbiAgbmFtZXNwYWNlLFxuICBzY29wZSxcbiAgZ2V0SWQsXG4gIG1lcmdlU3RyYXRlZ3ksXG4gIHZlcmlmeUZuLFxufToge1xuICBuYW1lc3BhY2U6IE5hbWVzcGFjZTtcbiAgc2NvcGU6IFNjb3BlTmFtZTtcbiAgZ2V0SWQ/OiAoeDogYW55KSA9PiBzdHJpbmcgfCBudW1iZXI7XG4gIG1lcmdlU3RyYXRlZ3k/OiBNZXJnZVN0cmF0ZWd5O1xuICBjbGllbnQ/OiBDbGllbnQ7XG4gIHZlcmlmeUZuPzogdHlwZW9mIHZlcmlmeTtcbn0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRvbWFpblJlcXVlc3QoXG4gICAgdGhpczogQ2xpZW50IHwgdm9pZCxcbiAgICBwYXlsb2FkOiBSZXF1ZXN0UGF5bG9hZCxcbiAgICB7XG4gICAgICBjbGllbnQ6IGN1cnJlbnRDbGllbnQsXG4gICAgICAuLi5vcHRpb25zXG4gICAgfTogT3B0aW9uczxSZXF1ZXN0UGF5bG9hZCwgUmVzcG9uc2VEYXRhLCBOYW1lc3BhY2UsIFNjb3BlTmFtZT5cbiAgKToge1xuICAgIGVudHJ5U3RvcmU6IEVudHJ5U3RvcmU8UmVzcG9uc2VEYXRhPjtcbiAgICB1bnN1YnNjcmliZTogVW5zdWJzY3JpYmU7XG4gIH0ge1xuICAgIGNvbnN0IGNsaWVudCA9IGN1cnJlbnRDbGllbnQgfHwgdGhpcztcbiAgICBpZiAoIWNsaWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkRvbWFpbiByZXF1ZXN0IG11c3QgYmUgY2FsbGVkIGVpdGhlciBhcyBhIG1ldGhvZCBvZiBDbGllbnQgb3Igd2l0aCBhIGNsaWVudCBwYXJhbWV0ZXJcIlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xpZW50LmNhY2hlZFN1YnNjcmliZTxSZXNwb25zZURhdGEsIE5hbWVzcGFjZSwgU2NvcGVOYW1lPih7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgb25EYXRhOiBlbnRyeSA9PiB7XG4gICAgICAgIGlmIChlbnRyeS5kYXRhKSB7XG4gICAgICAgICAgb3B0aW9ucy5vbkRhdGEoZW50cnkuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBuYW1lc3BhY2UsXG4gICAgICBnZXRJZDogZ2V0SWQgfHwgb3B0aW9ucy5nZXRJZCxcbiAgICAgIG1lcmdlU3RyYXRlZ3k6IG1lcmdlU3RyYXRlZ3kgfHwgb3B0aW9ucy5tZXJnZVN0cmF0ZWd5LFxuICAgICAgdmVyaWZ5Rm46IHZlcmlmeUZuIHx8IG9wdGlvbnMudmVyaWZ5Rm4sXG4gICAgICBib2R5OiB7XG4gICAgICAgIHNjb3BlOiBbc2NvcGVdLFxuICAgICAgICBwYXlsb2FkLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfTtcbn1cbiIsImltcG9ydCB0eXBlIHsgQXNzZXQgfSBmcm9tIFwiLi4vZW50aXRpZXMvQXNzZXRcIjtcbmltcG9ydCB0eXBlIHsgUmVzcG9uc2UgfSBmcm9tIFwiLi4vcmVxdWVzdHMvUmVzcG9uc2VcIjtcbmltcG9ydCB0eXBlIHsgUmVxdWVzdCB9IGZyb20gXCIuLi9yZXF1ZXN0cy9SZXF1ZXN0XCI7XG5pbXBvcnQgeyBjcmVhdGVEb21haW5SZXF1ZXN0IH0gZnJvbSBcIi4vY3JlYXRlRG9tYWluUmVxdWVzdFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlcXVlc3RQYXlsb2FkIHtcbiAgY3VycmVuY3k6IHN0cmluZztcbiAgYXNzZXRfY29kZXM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlRGF0YSB7XG4gIFtrZXk6IHN0cmluZ106IEFzc2V0O1xufVxuXG5leHBvcnQgY29uc3QgbmFtZXNwYWNlID0gXCJhc3NldHNcIjtcbmV4cG9ydCBjb25zdCBzY29wZSA9IFwicHJpY2VzXCI7XG5leHBvcnQgY29uc3QgZ2V0SWQgPSAoaXRlbTogQXNzZXQpOiBzdHJpbmcgPT4gaXRlbS5hc3NldF9jb2RlO1xuXG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5Rm4oXG4gIHJlcXVlc3Q6IFJlcXVlc3Q8YW55LCBhbnk+LFxuICByZXNwb25zZTogUmVzcG9uc2U8YW55PlxuKTogYm9vbGVhbiB7XG4gIGNvbnN0IHsgYXNzZXRfY29kZXMsIGFzc2V0X2NvZGUsIGN1cnJlbmN5IH0gPSByZXNwb25zZS5tZXRhO1xuICBjb25zdCB7XG4gICAgY3VycmVuY3k6IHJlcXVlc3RDdXJyZW5jeSxcbiAgICBhc3NldF9jb2RlczogcmVxdWVzdEFzc2V0Q29kZXMsXG4gIH0gPSByZXF1ZXN0LnBheWxvYWQ7XG4gIGlmIChyZXF1ZXN0Q3VycmVuY3kgIT09IGN1cnJlbmN5KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBIZXJlIHdlIGFzc3VtZSB0aGF0IFwicmVjZWl2ZWRcIiBldmVudCBhbHdheXMgaGFzIFwiYXNzZXRfY29kZXNcIiBhcnJheSBpbiBtZXRhXG4gICAqIGFuZCBcImNoYW5nZWRcIiBldmVudCBhbHdheXMgaGFzIFwiYXNzZXRfY29kZVwiIHN0cmluZyBpbiBtZXRhXG4gICAqL1xuICBpZiAoYXNzZXRfY29kZSkge1xuICAgIHJldHVybiByZXF1ZXN0QXNzZXRDb2Rlcy5pbmNsdWRlcyhhc3NldF9jb2RlKTtcbiAgfVxuICBpZiAocmVxdWVzdEFzc2V0Q29kZXMubGVuZ3RoID4gYXNzZXRfY29kZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGFzc2V0Q29kZXNTZXQgPSBuZXcgU2V0KGFzc2V0X2NvZGVzKTtcbiAgcmV0dXJuIHJlcXVlc3RBc3NldENvZGVzLmV2ZXJ5KChhc3NldENvZGU6IHN0cmluZykgPT5cbiAgICBhc3NldENvZGVzU2V0Lmhhcyhhc3NldENvZGUpXG4gICk7XG59XG5cbmV4cG9ydCBjb25zdCBhc3NldHNQcmljZXMgPSBjcmVhdGVEb21haW5SZXF1ZXN0PFxuICBSZXF1ZXN0UGF5bG9hZCxcbiAgUmVzcG9uc2VEYXRhLFxuICB0eXBlb2YgbmFtZXNwYWNlLFxuICB0eXBlb2Ygc2NvcGVcbj4oe1xuICBuYW1lc3BhY2UsXG4gIHNjb3BlLFxuICBnZXRJZCxcbiAgdmVyaWZ5Rm4sXG59KTtcbiIsImltcG9ydCB7IEFzc2V0SW5mbyB9IGZyb20gXCIuLi9lbnRpdGllcy9Bc3NldEluZm9cIjtcbmltcG9ydCB7IG1lcmdlTGlzdCB9IGZyb20gXCIuLi9zaGFyZWQvbWVyZ2VTdHJhdGVnaWVzXCI7XG5pbXBvcnQgeyBjcmVhdGVEb21haW5SZXF1ZXN0IH0gZnJvbSBcIi4vY3JlYXRlRG9tYWluUmVxdWVzdFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlcXVlc3RQYXlsb2FkIHtcbiAgY3VycmVuY3k6IHN0cmluZztcbiAgYXNzZXRfY29kZXM/OiBzdHJpbmdbXTtcbiAgbGltaXQ/OiBudW1iZXI7XG4gIG9mZnNldD86IG51bWJlcjtcbiAgZXhwbG9yZV9zZWN0aW9uPzogbnVtYmVyIHwgc3RyaW5nO1xuICBjYXRlZ29yeV9pZD86IHN0cmluZztcbiAgc2VhcmNoX3F1ZXJ5Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBSZXNwb25zZURhdGEgPSBBc3NldEluZm9bXTtcblxuZXhwb3J0IGNvbnN0IG5hbWVzcGFjZSA9IFwiYXNzZXRzXCI7XG5leHBvcnQgY29uc3Qgc2NvcGUgPSBcImluZm9cIjtcbmV4cG9ydCBjb25zdCBnZXRJZCA9IChpdGVtOiBBc3NldEluZm8pOiBzdHJpbmcgPT4gaXRlbS5hc3NldC5hc3NldF9jb2RlO1xuZXhwb3J0IGNvbnN0IG1lcmdlU3RyYXRlZ3kgPSBtZXJnZUxpc3Q7XG5cbmV4cG9ydCBjb25zdCBhc3NldHNJbmZvID0gY3JlYXRlRG9tYWluUmVxdWVzdDxcbiAgUmVxdWVzdFBheWxvYWQsXG4gIFJlc3BvbnNlRGF0YSxcbiAgdHlwZW9mIG5hbWVzcGFjZSxcbiAgdHlwZW9mIHNjb3BlXG4+KHtcbiAgbmFtZXNwYWNlLFxuICBzY29wZSxcbiAgZ2V0SWQsXG4gIG1lcmdlU3RyYXRlZ3ksXG59KTtcbiIsImltcG9ydCB0eXBlIHsgTG9hbiB9IGZyb20gXCIuLi9lbnRpdGllcy9Qcm90b2NvbEluZm8vTG9hblwiO1xuaW1wb3J0IHR5cGUgeyBBZGRyZXNzUGFyYW1zIH0gZnJvbSBcIi4vQWRkcmVzc1BhcmFtc1wiO1xuaW1wb3J0IHsgbWVyZ2VMaXN0IH0gZnJvbSBcIi4uL3NoYXJlZC9tZXJnZVN0cmF0ZWdpZXNcIjtcbmltcG9ydCB7IGNyZWF0ZURvbWFpblJlcXVlc3QgfSBmcm9tIFwiLi9jcmVhdGVEb21haW5SZXF1ZXN0XCI7XG5cbmV4cG9ydCB0eXBlIFJlcXVlc3RQYXlsb2FkID0gQWRkcmVzc1BhcmFtcyAmIHtcbiAgY3VycmVuY3k6IHN0cmluZztcbn07XG5leHBvcnQgdHlwZSBSZXNwb25zZURhdGEgPSBMb2FuW107XG5cbmV4cG9ydCBjb25zdCBuYW1lc3BhY2UgPSBcImFkZHJlc3NcIjtcbmV4cG9ydCBjb25zdCBzY29wZSA9IFwibG9hbnNcIjtcbmV4cG9ydCBjb25zdCBtZXJnZVN0cmF0ZWd5ID0gbWVyZ2VMaXN0O1xuXG5leHBvcnQgY29uc3QgYWRkcmVzc0xvYW5zID0gY3JlYXRlRG9tYWluUmVxdWVzdDxcbiAgUmVxdWVzdFBheWxvYWQsXG4gIFJlc3BvbnNlRGF0YSxcbiAgdHlwZW9mIG5hbWVzcGFjZSxcbiAgdHlwZW9mIHNjb3BlXG4+KHtcbiAgbmFtZXNwYWNlLFxuICBzY29wZSxcbiAgbWVyZ2VTdHJhdGVneSxcbn0pO1xuIiwiaW1wb3J0IHR5cGUgeyBBZGRyZXNzQXNzZXQgfSBmcm9tIFwiLi4vZW50aXRpZXMvQWRkcmVzc0Fzc2V0XCI7XG5pbXBvcnQgdHlwZSB7IEFkZHJlc3NQYXJhbXMgfSBmcm9tIFwiLi9BZGRyZXNzUGFyYW1zXCI7XG5pbXBvcnQgeyBjcmVhdGVEb21haW5SZXF1ZXN0IH0gZnJvbSBcIi4vY3JlYXRlRG9tYWluUmVxdWVzdFwiO1xuXG5leHBvcnQgdHlwZSBSZXF1ZXN0UGF5bG9hZCA9IEFkZHJlc3NQYXJhbXMgJiB7XG4gIGN1cnJlbmN5OiBzdHJpbmc7XG4gIGFzc2V0X2NvZGVzPzogc3RyaW5nW107XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlRGF0YSB7XG4gIFtrZXk6IHN0cmluZ106IEFkZHJlc3NBc3NldDtcbn1cbmV4cG9ydCBjb25zdCBuYW1lc3BhY2UgPSBcImFkZHJlc3NcIjtcbmV4cG9ydCBjb25zdCBzY29wZSA9IFwiYXNzZXRzXCI7XG5leHBvcnQgY29uc3QgZ2V0SWQgPSAoaXRlbTogQWRkcmVzc0Fzc2V0KTogc3RyaW5nID0+IGl0ZW0uYXNzZXQuYXNzZXRfY29kZTtcblxuZXhwb3J0IGNvbnN0IGFkZHJlc3NBc3NldHMgPSBjcmVhdGVEb21haW5SZXF1ZXN0PFxuICBSZXF1ZXN0UGF5bG9hZCxcbiAgUmVzcG9uc2VEYXRhLFxuICB0eXBlb2YgbmFtZXNwYWNlLFxuICB0eXBlb2Ygc2NvcGVcbj4oe1xuICBuYW1lc3BhY2UsXG4gIHNjb3BlLFxuICBnZXRJZCxcbn0pO1xuIiwiaW1wb3J0IHsgQWRkcmVzc1Bvc2l0aW9uIH0gZnJvbSBcIi4uL2VudGl0aWVzL0FkZHJlc3NQb3NpdGlvblwiO1xuaW1wb3J0IHsgQWRkcmVzc1BhcmFtcyB9IGZyb20gXCIuL0FkZHJlc3NQYXJhbXNcIjtcbmltcG9ydCB7IGNyZWF0ZURvbWFpblJlcXVlc3QgfSBmcm9tIFwiLi9jcmVhdGVEb21haW5SZXF1ZXN0XCI7XG5cbmV4cG9ydCB0eXBlIFJlcXVlc3RQYXlsb2FkID0gQWRkcmVzc1BhcmFtcyAmIHtcbiAgY3VycmVuY3k6IHN0cmluZztcbiAgYXNzZXRzPzogc3RyaW5nW107XG59O1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZURhdGEge1xuICBhZ2dyZWdhdGlvbl9pbl9wcm9ncmVzczogYm9vbGVhbjtcbiAgcG9zaXRpb25zOiBBZGRyZXNzUG9zaXRpb25bXTtcbn1cbmV4cG9ydCBjb25zdCBuYW1lc3BhY2UgPSBcImFkZHJlc3NcIjtcbmV4cG9ydCBjb25zdCBzY29wZSA9IFwicG9zaXRpb25zXCI7XG5cbmV4cG9ydCBjb25zdCBhZGRyZXNzUG9zaXRpb25zID0gY3JlYXRlRG9tYWluUmVxdWVzdDxcbiAgUmVxdWVzdFBheWxvYWQsXG4gIFJlc3BvbnNlRGF0YSxcbiAgdHlwZW9mIG5hbWVzcGFjZSxcbiAgdHlwZW9mIHNjb3BlXG4+KHtcbiAgbmFtZXNwYWNlLFxuICBzY29wZSxcbn0pO1xuIiwiaW1wb3J0IHsgQ2hhcnRUeXBlIH0gZnJvbSBcIi4uL2VudGl0aWVzL0NoYXJ0XCI7XG5pbXBvcnQgeyBBZGRyZXNzUGFyYW1zIH0gZnJvbSBcIi4vQWRkcmVzc1BhcmFtc1wiO1xuaW1wb3J0IHsgY3JlYXRlRG9tYWluUmVxdWVzdCB9IGZyb20gXCIuL2NyZWF0ZURvbWFpblJlcXVlc3RcIjtcblxuZXhwb3J0IHR5cGUgUmVxdWVzdFBheWxvYWQgPSBBZGRyZXNzUGFyYW1zICYge1xuICBjdXJyZW5jeTogc3RyaW5nO1xuICBjaGFydHNfdHlwZTogQ2hhcnRUeXBlO1xuICBjaGFydHNfbWF4X2Fzc2V0czogbnVtYmVyOyAvLyBob3cgbWFueSBhc3NldHMgdG8gZXh0cmFjdCBmcm9tIFwib3RoZXJzXCJcbiAgY2hhcnRzX21pbl9wZXJjZW50YWdlOiBudW1iZXI7XG59O1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZURhdGEge1xuICBvdGhlcnM6IG51bWJlcltdW107XG59XG5leHBvcnQgY29uc3QgbmFtZXNwYWNlID0gXCJhZGRyZXNzXCI7XG5leHBvcnQgY29uc3Qgc2NvcGUgPSBcImNoYXJ0c1wiO1xuXG5leHBvcnQgY29uc3QgYWRkcmVzc0NoYXJ0cyA9IGNyZWF0ZURvbWFpblJlcXVlc3Q8XG4gIFJlcXVlc3RQYXlsb2FkLFxuICBSZXNwb25zZURhdGEsXG4gIHR5cGVvZiBuYW1lc3BhY2UsXG4gIHR5cGVvZiBzY29wZVxuPih7XG4gIG5hbWVzcGFjZSxcbiAgc2NvcGUsXG59KTtcbiIsImltcG9ydCB7IENoYXJ0VHlwZSB9IGZyb20gXCIuLi9lbnRpdGllcy9DaGFydFwiO1xuaW1wb3J0IHsgY3JlYXRlRG9tYWluUmVxdWVzdCB9IGZyb20gXCIuL2NyZWF0ZURvbWFpblJlcXVlc3RcIjtcblxuZXhwb3J0IHR5cGUgUmVxdWVzdFBheWxvYWQgPSB7XG4gIGN1cnJlbmN5OiBzdHJpbmc7XG4gIGFzc2V0X2NvZGVzOiBzdHJpbmdbXTtcbiAgY2hhcnRzX3R5cGU6IENoYXJ0VHlwZTtcbn07XG5leHBvcnQgdHlwZSBSZXNwb25zZURhdGEgPSBSZWNvcmQ8c3RyaW5nLCBudW1iZXJbXVtdPjtcbmV4cG9ydCBjb25zdCBuYW1lc3BhY2UgPSBcImFzc2V0c1wiO1xuZXhwb3J0IGNvbnN0IHNjb3BlID0gXCJjaGFydHNcIjtcblxuZXhwb3J0IGNvbnN0IGFzc2V0c0NoYXJ0cyA9IGNyZWF0ZURvbWFpblJlcXVlc3Q8XG4gIFJlcXVlc3RQYXlsb2FkLFxuICBSZXNwb25zZURhdGEsXG4gIHR5cGVvZiBuYW1lc3BhY2UsXG4gIHR5cGVvZiBzY29wZVxuPih7XG4gIG5hbWVzcGFjZSxcbiAgc2NvcGUsXG59KTtcbiIsImltcG9ydCB0eXBlIHsgQXNzZXRGdWxsSW5mbyB9IGZyb20gXCIuLi9lbnRpdGllcy9Bc3NldEZ1bGxJbmZvXCI7XG5pbXBvcnQgeyBtZXJnZVNpbmdsZUVudGl0eSB9IGZyb20gXCIuLi9zaGFyZWQvbWVyZ2VTdHJhdGVnaWVzXCI7XG5pbXBvcnQgeyBjcmVhdGVEb21haW5SZXF1ZXN0IH0gZnJvbSBcIi4vY3JlYXRlRG9tYWluUmVxdWVzdFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlcXVlc3RQYXlsb2FkIHtcbiAgY3VycmVuY3k6IHN0cmluZztcbiAgYXNzZXRfY29kZTogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBSZXNwb25zZURhdGEgPSBudWxsIHwgQXNzZXRGdWxsSW5mbztcblxuZXhwb3J0IGNvbnN0IG5hbWVzcGFjZSA9IFwiYXNzZXRzXCI7XG5leHBvcnQgY29uc3Qgc2NvcGUgPSBcImZ1bGwtaW5mb1wiO1xuZXhwb3J0IGNvbnN0IG1lcmdlU3RyYXRlZ3kgPSBtZXJnZVNpbmdsZUVudGl0eTtcblxuZXhwb3J0IGNvbnN0IGFzc2V0c0Z1bGxJbmZvID0gY3JlYXRlRG9tYWluUmVxdWVzdDxcbiAgUmVxdWVzdFBheWxvYWQsXG4gIFJlc3BvbnNlRGF0YSxcbiAgdHlwZW9mIG5hbWVzcGFjZSxcbiAgdHlwZW9mIHNjb3BlXG4+KHtcbiAgbmFtZXNwYWNlLFxuICBzY29wZSxcbiAgbWVyZ2VTdHJhdGVneSxcbn0pO1xuIiwiaW1wb3J0IHR5cGUgeyBBZGRyZXNzUGFyYW1zIH0gZnJvbSBcIi4vQWRkcmVzc1BhcmFtc1wiO1xuaW1wb3J0IHR5cGUgeyBORlRWYWx1ZVByZWZlcmVuY2VUeXBlIH0gZnJvbSBcIi4uL2VudGl0aWVzL05GVEluZm9cIjtcbmltcG9ydCB0eXBlIHsgUG9ydGZvbGlvIH0gZnJvbSBcIi4uL2VudGl0aWVzL1BvcnRmb2xpb1wiO1xuaW1wb3J0IHsgY3JlYXRlRG9tYWluUmVxdWVzdCB9IGZyb20gXCIuL2NyZWF0ZURvbWFpblJlcXVlc3RcIjtcblxuZXhwb3J0IHR5cGUgUGF5bG9hZCA9IEFkZHJlc3NQYXJhbXMgJiB7XG4gIGN1cnJlbmN5OiBzdHJpbmc7XG4gIG5mdF9wcmljZV90eXBlPzogTkZUVmFsdWVQcmVmZXJlbmNlVHlwZSB8IFwibm90X2luY2x1ZGVkXCI7XG4gIHBvcnRmb2xpb19maWVsZHM6IFwiYWxsXCI7XG4gIHVzZV9wb3J0Zm9saW9fc2VydmljZTogdHJ1ZTtcbn07XG5cbmV4cG9ydCBjb25zdCBuYW1lc3BhY2UgPSBcImFkZHJlc3NcIjtcbmV4cG9ydCBjb25zdCBzY29wZSA9IFwicG9ydGZvbGlvXCI7XG5cbmV4cG9ydCBjb25zdCBhZGRyZXNzUG9ydGZvbGlvID0gY3JlYXRlRG9tYWluUmVxdWVzdDxcbiAgUGF5bG9hZCxcbiAgUG9ydGZvbGlvLFxuICB0eXBlb2YgbmFtZXNwYWNlLFxuICB0eXBlb2Ygc2NvcGVcbj4oe1xuICBuYW1lc3BhY2UsXG4gIHNjb3BlLFxufSk7XG4iLCJpbXBvcnQgeyBQb3J0Zm9saW9EZWNvbXBvc2l0aW9uIH0gZnJvbSBcIi4uL2VudGl0aWVzXCI7XG5pbXBvcnQgeyBBZGRyZXNzUGFyYW1zIH0gZnJvbSBcIi4vQWRkcmVzc1BhcmFtc1wiO1xuaW1wb3J0IHsgY3JlYXRlRG9tYWluUmVxdWVzdCB9IGZyb20gXCIuL2NyZWF0ZURvbWFpblJlcXVlc3RcIjtcblxuZXhwb3J0IHR5cGUgUGF5bG9hZCA9IEFkZHJlc3NQYXJhbXMgJiB7XG4gIGN1cnJlbmN5OiBzdHJpbmc7XG4gIG5mdF9wcmljZV90eXBlPzogXCJmbG9vcl9wcmljZVwiIHwgXCJidXlfbm93X3ByaWNlXCIgfCBcIm5vdF9pbmNsdWRlZFwiO1xufTtcblxuZXhwb3J0IGNvbnN0IG5hbWVzcGFjZSA9IFwiYWRkcmVzc1wiO1xuZXhwb3J0IGNvbnN0IHNjb3BlID0gXCJwb3J0Zm9saW8tZGVjb21wb3NpdGlvblwiO1xuXG5leHBvcnQgY29uc3QgYWRkcmVzc1BvcnRmb2xpb0RlY29tcG9zaXRpb24gPSBjcmVhdGVEb21haW5SZXF1ZXN0PFxuICBQYXlsb2FkLFxuICBQb3J0Zm9saW9EZWNvbXBvc2l0aW9uLFxuICB0eXBlb2YgbmFtZXNwYWNlLFxuICB0eXBlb2Ygc2NvcGVcbj4oe1xuICBuYW1lc3BhY2UsXG4gIHNjb3BlLFxufSk7XG4iLCJpbXBvcnQgXCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanNcIjtcbmltcG9ydCB7XG4gIHNldCBhcyBpZGJTZXQsXG4gIGRlbCBhcyBpZGJEZWwsXG4gIGVudHJpZXMgYXMgaWRiRW50cmllcyxcbiAgY2xlYXIgYXMgaWRiQ2xlYXIsXG59IGZyb20gXCJpZGIta2V5dmFsXCI7XG5pbXBvcnQgTFJVQ2FjaGUgZnJvbSBcImxydS1jYWNoZVwiO1xuaW1wb3J0IHsgU3RvcmUgfSBmcm9tIFwic3RvcmUtdW5pdFwiO1xuaW1wb3J0IHsgQ2FjaGVQb2xpY3kgfSBmcm9tIFwiLi9DYWNoZVBvbGljeVwiO1xuaW1wb3J0IHsgRGF0YVN0YXR1cyB9IGZyb20gXCIuL0RhdGFTdGF0dXNcIjtcbmltcG9ydCB7IEVudHJ5U3RvcmUgfSBmcm9tIFwiLi9FbnRyeVwiO1xuaW1wb3J0IHR5cGUgeyBSZXF1ZXN0Q2FjaGUgfSBmcm9tIFwiLi9SZXF1ZXN0Q2FjaGVcIjtcblxudHlwZSBLZXkgPSBzdHJpbmcgfCBudW1iZXI7XG5cbmV4cG9ydCBjbGFzcyBQZXJzaXN0ZW50Q2FjaGVcbiAgZXh0ZW5kcyBTdG9yZTx7IHVzZXNTdGFsZUVudHJpZXM6IGJvb2xlYW4gfT5cbiAgaW1wbGVtZW50cyBSZXF1ZXN0Q2FjaGU8RW50cnlTdG9yZT4ge1xuICBtYXA6IE1hcDxLZXksIEVudHJ5U3RvcmU+O1xuICBscnVDYWNoZTogTFJVQ2FjaGU8S2V5LCBhbnk+O1xuICBwcml2YXRlIHN0YWxlRW50cmllczogU2V0PEVudHJ5U3RvcmU+O1xuXG4gIGNvbnN0cnVjdG9yKHsgbWF4ID0gNTAgfTogeyBtYXg/OiBudW1iZXIgfSA9IHt9KSB7XG4gICAgc3VwZXIoeyB1c2VzU3RhbGVFbnRyaWVzOiBmYWxzZSB9KTtcbiAgICB0aGlzLm1hcCA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmxydUNhY2hlID0gbmV3IExSVUNhY2hlPEtleSwgYW55Pih7XG4gICAgICBtYXgsXG4gICAgICBkaXNwb3NlOiAoX3ZhbHVlLCBrZXksIHJlYXNvbikgPT4ge1xuICAgICAgICBpZiAocmVhc29uID09PSBcImV2aWN0XCIpIHtcbiAgICAgICAgICBpZGJEZWwoa2V5KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KTtcbiAgICB0aGlzLnN0YWxlRW50cmllcyA9IG5ldyBTZXQoKTtcbiAgfVxuXG4gIGdldENoYW5nZUhhbmRsZXIoa2V5OiBLZXksIGVudHJ5U3RvcmU6IEVudHJ5U3RvcmUpIHtcbiAgICByZXR1cm4gKCk6IHZvaWQgPT4ge1xuICAgICAgdGhpcy5zdGFsZUVudHJpZXMuZGVsZXRlKGVudHJ5U3RvcmUpO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnVzZXNTdGFsZUVudHJpZXMgJiYgdGhpcy5zdGFsZUVudHJpZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB1c2VzU3RhbGVFbnRyaWVzOiBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLnNhZmVXcml0ZUVudHJ5KGtleSwgZW50cnlTdG9yZSk7XG4gICAgfTtcbiAgfVxuXG4gIHNhZmVXcml0ZUVudHJ5KGtleTogS2V5LCBlbnRyeVN0b3JlOiBFbnRyeVN0b3JlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKGVudHJ5U3RvcmUuZ2V0U3RhdGUoKS5zdGF0dXMgPT09IERhdGFTdGF0dXMub2spIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gZW50cnlTdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgdGhpcy5scnVDYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICByZXR1cm4gaWRiU2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBhc3luYyBsb2FkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBpZGJFbnRyaWVzKCkudGhlbihlbnRyaWVzID0+IHtcbiAgICAgIGVudHJpZXNcbiAgICAgICAgLmZpbHRlcigoWywgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLmRhdGEgIT0gbnVsbCAmJiB2YWx1ZS5zdGF0dXMgPT09IERhdGFTdGF0dXMub2s7XG4gICAgICAgIH0pXG4gICAgICAgIC5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICB2YWx1ZS5pc1N0YWxlID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZS5oYXNTdWJzY3JpYmVycyA9IGZhbHNlO1xuICAgICAgICAgIGNvbnN0IGVudHJ5U3RvcmUgPSBuZXcgRW50cnlTdG9yZSh2YWx1ZSk7XG4gICAgICAgICAgZW50cnlTdG9yZS5vbihcbiAgICAgICAgICAgIFwiY2hhbmdlXCIsXG4gICAgICAgICAgICB0aGlzLmdldENoYW5nZUhhbmRsZXIoa2V5IGFzIHN0cmluZywgZW50cnlTdG9yZSlcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMubHJ1Q2FjaGUuc2V0KGtleSBhcyBzdHJpbmcsIGVudHJ5U3RvcmUpO1xuICAgICAgICAgIHRoaXMubWFwLnNldChrZXkgYXMgc3RyaW5nLCBlbnRyeVN0b3JlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBnZXQoa2V5OiBLZXksIGNhY2hlUG9saWN5OiBDYWNoZVBvbGljeSB8IG51bGwpOiBFbnRyeVN0b3JlIHwgbnVsbCB7XG4gICAgY29uc3QgZW50cnkgPSB0aGlzLm1hcC5nZXQoa2V5KSB8fCBudWxsO1xuICAgIGlmIChcbiAgICAgIChjYWNoZVBvbGljeSA9PT0gXCJjYWNoZS1maXJzdFwiIHx8IGNhY2hlUG9saWN5ID09PSBcImNhY2hlLW9ubHlcIikgJiZcbiAgICAgIGVudHJ5Py5zdGF0ZS5pc1N0YWxlXG4gICAgKSB7XG4gICAgICAvLyBmb3IgdGhlc2UgY2FjaGUgcG9saWNpZXMgd2UgZG8gTk9UIHdhbnQgdG8gcmV0dXJuIGVudHJpZXMgZm91bmQgaW4gcGVyc2lzdGVudCBjYWNoZVxuICAgICAgLy8gYmVjYXVzZSB0aGV5IHdpbGwgbm90IGdldCByZS1kb3dubG9hZGVkIGFuZCB0aGVyZWZvcmUgd2lsbCBiZSBfdG9vXyBzdGFsZVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChlbnRyeT8uc3RhdGUuaXNTdGFsZSkge1xuICAgICAgaWYgKFxuICAgICAgICBjYWNoZVBvbGljeSA9PT0gXCJuZXR3b3JrLW9ubHlcIiB8fFxuICAgICAgICBjYWNoZVBvbGljeSA9PT0gXCJjYWNoZS1hbmQtbmV0d29ya1wiXG4gICAgICApIHtcbiAgICAgICAgLy8gb25seSBmb3IgdGhlc2UgY2FjaGUgcG9saWNpZXMgd2UgY29uc2lkZXIgdGhlIGVudHJ5IHRvIGJlIHN0YWxlXG4gICAgICAgIHRoaXMuc3RhbGVFbnRyaWVzLmFkZChlbnRyeSk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS51c2VzU3RhbGVFbnRyaWVzKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgdXNlc1N0YWxlRW50cmllczogdHJ1ZSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZW50cnk7XG4gIH1cblxuICBzZXQoa2V5OiBLZXksIGVudHJ5U3RvcmU6IEVudHJ5U3RvcmUpOiB2b2lkIHtcbiAgICB0aGlzLm1hcC5zZXQoa2V5LCBlbnRyeVN0b3JlKTtcbiAgICBlbnRyeVN0b3JlLm9uKFwiY2hhbmdlXCIsIHRoaXMuZ2V0Q2hhbmdlSGFuZGxlcihrZXksIGVudHJ5U3RvcmUpKTtcbiAgICB0aGlzLnNhZmVXcml0ZUVudHJ5KGtleSwgZW50cnlTdG9yZSk7XG4gIH1cblxuICByZW1vdmUoa2V5OiBLZXkpOiB2b2lkIHtcbiAgICB0aGlzLm1hcC5kZWxldGUoa2V5KTtcbiAgfVxuXG4gIGFzeW5jIGNsZWFyKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMubWFwLmNsZWFyKCk7XG4gICAgcmV0dXJuIGlkYkNsZWFyKCk7XG4gIH1cbn1cbiIsImltcG9ydCB0eXBlIGlvIGZyb20gXCJzb2NrZXQuaW8tY2xpZW50XCI7XG5pbXBvcnQgdHlwZSB7IFJlc3BvbnNlIH0gZnJvbSBcIi4vcmVxdWVzdHMvUmVzcG9uc2VcIjtcbmltcG9ydCB0eXBlIHsgUmVxdWVzdCB9IGZyb20gXCIuL3JlcXVlc3RzL1JlcXVlc3RcIjtcbmltcG9ydCB0eXBlIHsgUmVzcG9uc2VQYXlsb2FkIH0gZnJvbSBcIi4vcmVxdWVzdHMvUmVzcG9uc2VQYXlsb2FkXCI7XG5pbXBvcnQgdHlwZSB7IFVuc3Vic2NyaWJlIH0gZnJvbSBcIi4vc2hhcmVkL1Vuc3Vic2NyaWJlXCI7XG5pbXBvcnQgeyB2ZXJpZnkgfSBmcm9tIFwiLi9yZXF1ZXN0cy92ZXJpZnlcIjtcbmltcG9ydCB0eXBlIHsgU29ja2V0TmFtZXNwYWNlIH0gZnJvbSBcIi4vc2hhcmVkL1NvY2tldE5hbWVzcGFjZVwiO1xuaW1wb3J0IHsgRW50cnlTdG9yZSwgaXNJZGxlU3RhdHVzIH0gZnJvbSBcIi4vY2FjaGUvRW50cnlcIjtcbmltcG9ydCB0eXBlIHsgRW50cnkgfSBmcm9tIFwiLi9jYWNoZS9FbnRyeVwiO1xuaW1wb3J0IHsgQ2FjaGVQb2xpY3kgfSBmcm9tIFwiLi9jYWNoZS9DYWNoZVBvbGljeVwiO1xuaW1wb3J0IHsgaXNSZXF1ZXN0TmVlZGVkIH0gZnJvbSBcIi4vY2FjaGUvaXNSZXF1ZXN0TmVlZGVkXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb25FdmVudCB9IGZyb20gXCIuL3JlcXVlc3RzL1N1YnNjcmlwdGlvbkV2ZW50XCI7XG5pbXBvcnQgeyBtZXJnZURpY3QsIE1lcmdlU3RyYXRlZ3kgfSBmcm9tIFwiLi9zaGFyZWQvbWVyZ2VTdHJhdGVnaWVzXCI7XG5pbXBvcnQgeyB2ZXJpZnlCeVJlcXVlc3RJZCB9IGZyb20gXCIuL3JlcXVlc3RzL3ZlcmlmeUJ5UmVxdWVzdElkXCI7XG5pbXBvcnQgeyBzaG91bGRSZXR1cm5DYWNoZWREYXRhIH0gZnJvbSBcIi4vY2FjaGUvc2hvdWxkUmV0dXJuQ2FjaGVkRGF0YVwiO1xuaW1wb3J0IHsgZGVmYXVsdENhY2hlUG9saWN5IH0gZnJvbSBcIi4vY2FjaGUvZGVmYXVsdENhY2hlUG9saWN5XCI7XG5pbXBvcnQgeyBSZXF1ZXN0Q2FjaGUgfSBmcm9tIFwiLi9jYWNoZS9SZXF1ZXN0Q2FjaGVcIjtcbmltcG9ydCB7IERhdGFTdGF0dXMgfSBmcm9tIFwiLi9jYWNoZS9EYXRhU3RhdHVzXCI7XG5pbXBvcnQgeyBjcmVhdGVTb2NrZXROYW1lc3BhY2UgfSBmcm9tIFwiLi9zb2NrZXQvY3JlYXRlU29ja2V0TmFtZXNwYWNlXCI7XG5pbXBvcnQgeyBhc3NldHNQcmljZXMgfSBmcm9tIFwiLi9kb21haW5zL2Fzc2V0c1ByaWNlc1wiO1xuaW1wb3J0IHsgYXNzZXRzSW5mbyB9IGZyb20gXCIuL2RvbWFpbnMvYXNzZXRzSW5mb1wiO1xuaW1wb3J0IHsgYWRkcmVzc0xvYW5zIH0gZnJvbSBcIi4vZG9tYWlucy9hZGRyZXNzTG9hbnNcIjtcbmltcG9ydCB7IGFkZHJlc3NBc3NldHMgfSBmcm9tIFwiLi9kb21haW5zL2FkZHJlc3NBc3NldHNcIjtcbmltcG9ydCB7IGFkZHJlc3NQb3NpdGlvbnMgfSBmcm9tIFwiLi9kb21haW5zL2FkZHJlc3NQb3NpdGlvbnNcIjtcbmltcG9ydCB7IGFkZHJlc3NDaGFydHMgfSBmcm9tIFwiLi9kb21haW5zL2FkZHJlc3NDaGFydHNcIjtcbmltcG9ydCB7IGFzc2V0c0NoYXJ0cyB9IGZyb20gXCIuL2RvbWFpbnMvYXNzZXRzQ2hhcnRzXCI7XG5pbXBvcnQgeyBhc3NldHNGdWxsSW5mbyB9IGZyb20gXCIuL2RvbWFpbnMvYXNzZXRzRnVsbEluZm9cIjtcbmltcG9ydCB7IGFkZHJlc3NQb3J0Zm9saW8gfSBmcm9tIFwiLi9kb21haW5zL2FkZHJlc3NQb3J0Zm9saW9cIjtcbmltcG9ydCB7IGFkZHJlc3NQb3J0Zm9saW9EZWNvbXBvc2l0aW9uIH0gZnJvbSBcIi4vZG9tYWlucy9hZGRyZXNzUG9ydGZvbGlvRGVjb21wb3NpdGlvblwiO1xuaW1wb3J0IHsgUGVyc2lzdGVudENhY2hlIH0gZnJvbSBcIi4vY2FjaGUvUGVyc2lzdGVudENhY2hlXCI7XG5cbmNvbnN0IHN1YnNjaXB0aW9uRXZlbnRzOiBTdWJzY3JpcHRpb25FdmVudFtdID0gW1xuICBcInJlY2VpdmVkXCIsXG4gIFwiYXBwZW5kZWRcIixcbiAgXCJjaGFuZ2VkXCIsXG4gIFwicmVtb3ZlZFwiLFxuICBcImRvbmVcIixcbl07XG5cbmV4cG9ydCB0eXBlIFJlc3VsdDxULCBTY29wZU5hbWUgZXh0ZW5kcyBzdHJpbmc+ID0gRW50cnk8VCwgU2NvcGVOYW1lPjtcblxuZXhwb3J0IGludGVyZmFjZSBCYXNlT3B0aW9uczxcbiAgTmFtZXNwYWNlIGV4dGVuZHMgc3RyaW5nID0gYW55LFxuICBTY29wZU5hbWUgZXh0ZW5kcyBzdHJpbmcgPSBhbnksXG4gIFJlcXVlc3RQYXlsb2FkID0gYW55XG4+IHtcbiAgc29ja2V0TmFtZXNwYWNlOiBTb2NrZXROYW1lc3BhY2U8TmFtZXNwYWNlPjtcbiAgbWV0aG9kPzogXCJzdWJzY3JpYmVcIiB8IFwiZ2V0XCIgfCBcInN0cmVhbVwiO1xuICBib2R5OiBSZXF1ZXN0PFJlcXVlc3RQYXlsb2FkLCBTY29wZU5hbWU+O1xuICB2ZXJpZnlGbj86IHR5cGVvZiB2ZXJpZnk7XG59XG5cbnR5cGUgTWVzc2FnZUhhbmRsZXI8VCwgU2NvcGVOYW1lIGV4dGVuZHMgc3RyaW5nPiA9IChcbiAgZXZlbnQ6IFN1YnNjcmlwdGlvbkV2ZW50LFxuICBkYXRhOiBSZXNwb25zZTxSZXNwb25zZVBheWxvYWQ8VCwgU2NvcGVOYW1lPj5cbikgPT4gdm9pZDtcblxuZXhwb3J0IGludGVyZmFjZSBPcHRpb25zPFxuICBULFxuICBOYW1lc3BhY2UgZXh0ZW5kcyBzdHJpbmcgPSBhbnksXG4gIFNjb3BlTmFtZSBleHRlbmRzIHN0cmluZyA9IGFueSxcbiAgUmVxdWVzdFBheWxvYWQgPSBhbnlcbj4gZXh0ZW5kcyBCYXNlT3B0aW9uczxOYW1lc3BhY2UsIFNjb3BlTmFtZSwgUmVxdWVzdFBheWxvYWQ+IHtcbiAgb25NZXNzYWdlOiBNZXNzYWdlSGFuZGxlcjxULCBTY29wZU5hbWU+O1xuICBvbkFueU1lc3NhZ2U/OiBNZXNzYWdlSGFuZGxlcjxULCBTY29wZU5hbWU+O1xufVxuXG5leHBvcnQgdHlwZSBOYW1lc3BhY2VPcHRpb25zPE5hbWVzcGFjZSBleHRlbmRzIHN0cmluZz4gPVxuICB8IHtcbiAgICAgIHNvY2tldE5hbWVzcGFjZTogU29ja2V0TmFtZXNwYWNlPE5hbWVzcGFjZT47XG4gICAgfVxuICB8IHsgbmFtZXNwYWNlOiBOYW1lc3BhY2UgfTtcblxudHlwZSBDb252ZW5pZW5jZU9wdGlvbnM8XG4gIE5hbWVzcGFjZSBleHRlbmRzIHN0cmluZyxcbiAgU2NvcGVOYW1lIGV4dGVuZHMgc3RyaW5nLFxuICBSZXF1ZXN0UGF5bG9hZCA9IGFueVxuPiA9IE9taXQ8QmFzZU9wdGlvbnM8TmFtZXNwYWNlLCBTY29wZU5hbWUsIFJlcXVlc3RQYXlsb2FkPiwgXCJzb2NrZXROYW1lc3BhY2VcIj4gJlxuICBOYW1lc3BhY2VPcHRpb25zPE5hbWVzcGFjZT47XG5cbmV4cG9ydCB0eXBlIENsaWVudFN1YnNjcmliZU9wdGlvbnM8XG4gIFQsXG4gIE5hbWVzcGFjZSBleHRlbmRzIHN0cmluZyxcbiAgU2NvcGVOYW1lIGV4dGVuZHMgc3RyaW5nLFxuICBSZXF1ZXN0UGF5bG9hZCA9IGFueVxuPiA9IENvbnZlbmllbmNlT3B0aW9uczxOYW1lc3BhY2UsIFNjb3BlTmFtZSwgUmVxdWVzdFBheWxvYWQ+ICYge1xuICBvbk1lc3NhZ2U6IChcbiAgICBldmVudDogU3Vic2NyaXB0aW9uRXZlbnQsXG4gICAgZGF0YTogUmVzcG9uc2U8UmVzcG9uc2VQYXlsb2FkPFQsIFNjb3BlTmFtZT4+XG4gICkgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCB0eXBlIENvbnZlbmllbmNlT3B0aW9uc0NhY2hlZDxcbiAgTmFtZXNwYWNlIGV4dGVuZHMgc3RyaW5nLFxuICBTY29wZU5hbWUgZXh0ZW5kcyBzdHJpbmcsXG4gIFJlcXVlc3RQYXlsb2FkID0gYW55XG4+ID0gQ29udmVuaWVuY2VPcHRpb25zPE5hbWVzcGFjZSwgU2NvcGVOYW1lLCBSZXF1ZXN0UGF5bG9hZD4gJiB7XG4gIGNhY2hlUG9saWN5PzogQ2FjaGVQb2xpY3k7XG4gIG1lcmdlU3RyYXRlZ3k/OiBNZXJnZVN0cmF0ZWd5O1xuICBnZXRJZD86ICh4OiBhbnkpID0+IHN0cmluZyB8IG51bWJlcjtcbiAgb25BbnlNZXNzYWdlPzogTWVzc2FnZUhhbmRsZXI8YW55LCBTY29wZU5hbWU+O1xufTtcblxuZXhwb3J0IHR5cGUgQ2FjaGVkUmVxdWVzdE9wdGlvbnM8XG4gIFQsXG4gIE5hbWVzcGFjZSBleHRlbmRzIHN0cmluZyxcbiAgU2NvcGVOYW1lIGV4dGVuZHMgc3RyaW5nLFxuICBSZXF1ZXN0UGF5bG9hZCA9IGFueVxuPiA9IENvbnZlbmllbmNlT3B0aW9uc0NhY2hlZDxOYW1lc3BhY2UsIFNjb3BlTmFtZSwgUmVxdWVzdFBheWxvYWQ+ICYge1xuICBvbkRhdGE6IChkYXRhOiBSZXN1bHQ8VCwgU2NvcGVOYW1lPikgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJzY3JpYmU8XG4gIFIsXG4gIE5hbWVzcGFjZSBleHRlbmRzIHN0cmluZyA9IGFueSxcbiAgU2NvcGVOYW1lIGV4dGVuZHMgc3RyaW5nID0gYW55XG4+KHtcbiAgc29ja2V0TmFtZXNwYWNlLFxuICBtZXRob2QgPSBcInN1YnNjcmliZVwiLFxuICBib2R5LFxuICBvbk1lc3NhZ2UsXG4gIG9uQW55TWVzc2FnZSxcbiAgdmVyaWZ5Rm4gPSB2ZXJpZnksXG59OiBPcHRpb25zPFIsIE5hbWVzcGFjZSwgU2NvcGVOYW1lPik6IFVuc3Vic2NyaWJlIHtcbiAgY29uc3QgeyBzb2NrZXQsIG5hbWVzcGFjZSB9ID0gc29ja2V0TmFtZXNwYWNlO1xuICBpZiAoIWJvZHkuc2NvcGUubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzY29wZSBhcmd1bWVudDogc2NvcGUgY2Fubm90IGJlIGVtcHR5XCIpO1xuICB9XG4gIGNvbnN0IG1vZGVsID0gYm9keS5zY29wZVswXTtcbiAgY29uc3QgaGFuZGxlTWVzc2FnZSA9IChldmVudDogU3Vic2NyaXB0aW9uRXZlbnQpID0+IChcbiAgICByZXNwb25zZTogUmVzcG9uc2U8UmVzcG9uc2VQYXlsb2FkPFIsIFNjb3BlTmFtZT4+XG4gICkgPT4ge1xuICAgIGlmICh2ZXJpZnlGbihib2R5LCByZXNwb25zZSkpIHtcbiAgICAgIG9uTWVzc2FnZShldmVudCwgcmVzcG9uc2UpO1xuICAgIH1cbiAgICBpZiAob25BbnlNZXNzYWdlKSB7XG4gICAgICBvbkFueU1lc3NhZ2UoZXZlbnQsIHJlc3BvbnNlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgbGlzdGVuZXJzOiBBcnJheTwoKSA9PiB2b2lkPiA9IFtdO1xuXG4gIHN1YnNjaXB0aW9uRXZlbnRzLmZvckVhY2goZXZlbnQgPT4ge1xuICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVNZXNzYWdlKGV2ZW50KTtcbiAgICBzb2NrZXQub24oYCR7ZXZlbnR9ICR7bmFtZXNwYWNlfSAke21vZGVsfWAsIGhhbmRsZXIpO1xuICAgIGxpc3RlbmVycy5wdXNoKCgpID0+IHNvY2tldC5vZmYoYCR7ZXZlbnR9ICR7bmFtZXNwYWNlfSAke21vZGVsfWAsIGhhbmRsZXIpKTtcbiAgfSk7XG5cbiAgc29ja2V0LmVtaXQobWV0aG9kLCBib2R5KTtcblxuICByZXR1cm4gKCkgPT4ge1xuICAgIGxpc3RlbmVycy5mb3JFYWNoKGwgPT4gbCgpKTtcblxuICAgIGlmIChtZXRob2QgPT09IFwic3Vic2NyaWJlXCIpIHtcbiAgICAgIHNvY2tldC5lbWl0KFwidW5zdWJzY3JpYmVcIiwgYm9keSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXk8VCwgUyBleHRlbmRzIHN0cmluZywgTiBleHRlbmRzIHN0cmluZz4oXG4gIHJlcXVlc3Q6IFBpY2s8T3B0aW9uczxULCBTLCBOPiwgXCJzb2NrZXROYW1lc3BhY2VcIiB8IFwiYm9keVwiPlxuKSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgbmFtZXNwYWNlOiByZXF1ZXN0LnNvY2tldE5hbWVzcGFjZS5uYW1lc3BhY2UsXG4gICAgYm9keTogcmVxdWVzdC5ib2R5LFxuICB9KTtcbn1cblxubGV0IHJlcUlkID0gMDtcblxuY29uc3QgZ2V0UmVxdWV0c0lkID0gKCkgPT4gKytyZXFJZDtcblxuY29uc3QgbWVtb0NhY2hlOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9ID0ge307XG5cbmNvbnN0IGtleVRvUmVxdWVzdElkID0gKGtleTogc3RyaW5nKSA9PiB7XG4gIGlmICghbWVtb0NhY2hlW2tleV0pIHtcbiAgICBtZW1vQ2FjaGVba2V5XSA9IGdldFJlcXVldHNJZCgpO1xuICB9XG4gIHJldHVybiBtZW1vQ2FjaGVba2V5XTtcbn07XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU9wdGlvbnM8VCwgTmFtZXNwYWNlIGV4dGVuZHMgc3RyaW5nPihcbiAgb3B0aW9uczogVCAmIE5hbWVzcGFjZU9wdGlvbnM8TmFtZXNwYWNlPixcbiAgbmFtZXNwYWNlRmFjdG9yeTogKG5hbWVzcGFjZTogTmFtZXNwYWNlKSA9PiBTb2NrZXROYW1lc3BhY2U8TmFtZXNwYWNlPlxuKTogVCAmIHsgc29ja2V0TmFtZXNwYWNlOiBTb2NrZXROYW1lc3BhY2U8TmFtZXNwYWNlPiB9IHtcbiAgaWYgKFwic29ja2V0TmFtZXNwYWNlXCIgaW4gb3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zO1xuICB9IGVsc2UgaWYgKFwibmFtZXNwYWNlXCIgaW4gb3B0aW9ucykge1xuICAgIGNvbnN0IHsgbmFtZXNwYWNlIH0gPSBvcHRpb25zO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgc29ja2V0TmFtZXNwYWNlOiBuYW1lc3BhY2VGYWN0b3J5KG5hbWVzcGFjZSksXG4gICAgfTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXCJFaXRoZXIgc29ja2V0TmFtZXNwYWNlIG9yIG5hbWVzcGFjZSBtdXN0IGJlIHByb3ZpZGVkXCIpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhvb2tzIHtcbiAgd2lsbFNlbmRSZXF1ZXN0OiA8UmVxdWVzdFBheWxvYWQsIFNjb3BlTmFtZSBleHRlbmRzIHN0cmluZz4oXG4gICAgcmVxdWVzdDogUmVxdWVzdDxSZXF1ZXN0UGF5bG9hZCwgU2NvcGVOYW1lPixcbiAgICB7IG5hbWVzcGFjZSB9OiB7IG5hbWVzcGFjZTogc3RyaW5nIH1cbiAgKSA9PiBSZXF1ZXN0PFJlcXVlc3RQYXlsb2FkLCBTY29wZU5hbWU+O1xufVxuXG50eXBlIElPT3B0aW9ucyA9IFBhcmFtZXRlcnM8dHlwZW9mIGlvPlswXTtcblxuaW50ZXJmYWNlIENvbnN0cnVjdG9yQ29uZmlnIHtcbiAgdXJsOiBzdHJpbmc7XG4gIGFwaVRva2VuOiBzdHJpbmc7XG4gIGlvT3B0aW9ucz86IElPT3B0aW9ucztcbiAgaG9va3M/OiBQYXJ0aWFsPEhvb2tzPjtcbiAgY2FjaGU/OiBSZXF1ZXN0Q2FjaGU8RW50cnlTdG9yZT47XG4gIGdldENhY2hlS2V5PzogKHBhcmFtczogeyBrZXk6IHN0cmluZzsgcmVxdWVzdElkOiBudW1iZXIgfSkgPT4gc3RyaW5nIHwgbnVtYmVyO1xufVxuXG5jb25zdCBpZGVudGl0eSA9IDxUPih4OiBUKSA9PiB4O1xuXG5jb25zdCBkZWZhdWx0SG9va3M6IEhvb2tzID0ge1xuICB3aWxsU2VuZFJlcXVlc3Q6IGlkZW50aXR5LFxufTtcblxuZnVuY3Rpb24gZ2V0T3JDcmVhdGVFbnRyeShcbiAgY2FjaGU6IFJlcXVlc3RDYWNoZTxFbnRyeVN0b3JlPixcbiAga2V5OiBzdHJpbmcgfCBudW1iZXIsXG4gIGNhY2hlUG9saWN5OiBDYWNoZVBvbGljeSxcbiAgc3RhdHVzPzogRW50cnk8YW55LCBhbnk+W1wic3RhdHVzXCJdXG4pIHtcbiAgaWYgKCFjYWNoZS5nZXQoa2V5LCBjYWNoZVBvbGljeSkpIHtcbiAgICBjYWNoZS5zZXQoa2V5LCBFbnRyeVN0b3JlLmZyb21TdGF0dXMoc3RhdHVzKSk7XG4gIH1cbiAgY29uc3QgZW50cnkgPSBjYWNoZS5nZXQoa2V5LCBjYWNoZVBvbGljeSk7XG4gIGlmIChlbnRyeSkge1xuICAgIHJldHVybiBlbnRyeTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGludGVybmFsIGVycm9yOiBuZXdseSBjcmVhdGVkIGVudHJ5IG5vdCBmb3VuZFwiKTtcbn1cblxuZXhwb3J0IGNsYXNzIEJhcmVDbGllbnQge1xuICB1cmw6IHN0cmluZyB8IG51bGw7XG4gIGFwaVRva2VuOiBzdHJpbmcgfCBudWxsO1xuICBpb09wdGlvbnM6IElPT3B0aW9ucztcbiAgY2FjaGU6IFJlcXVlc3RDYWNoZTxFbnRyeVN0b3JlPjtcbiAgaG9va3M6IEhvb2tzO1xuICBwcml2YXRlIGN1c3RvbUdldENhY2hlS2V5PzogQ29uc3RydWN0b3JDb25maWdbXCJnZXRDYWNoZUtleVwiXTtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IG51bGwgfCBDb25zdHJ1Y3RvckNvbmZpZykge1xuICAgIHRoaXMudXJsID0gY29uZmlnID8gY29uZmlnLnVybCA6IG51bGw7XG4gICAgdGhpcy5hcGlUb2tlbiA9IGNvbmZpZyA/IGNvbmZpZy5hcGlUb2tlbiA6IG51bGw7XG4gICAgdGhpcy5pb09wdGlvbnMgPSBjb25maWc/LmlvT3B0aW9ucztcbiAgICB0aGlzLmNhY2hlID0gY29uZmlnPy5jYWNoZSB8fCBuZXcgUmVxdWVzdENhY2hlKCk7XG4gICAgdGhpcy5jdXN0b21HZXRDYWNoZUtleSA9IGNvbmZpZz8uZ2V0Q2FjaGVLZXk7XG4gICAgdGhpcy5ob29rcyA9IHRoaXMuY29uZmlndXJlSG9va3MoY29uZmlnKTtcbiAgICB0aGlzLm5hbWVzcGFjZUZhY3RvcnkgPSB0aGlzLm5hbWVzcGFjZUZhY3RvcnkuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHByaXZhdGUgY29uZmlndXJlSG9va3MoY29uZmlnOiBDb25zdHJ1Y3RvckNvbmZpZyB8IG51bGwpIHtcbiAgICByZXR1cm4gY29uZmlnXG4gICAgICA/IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRIb29rcywgY29uZmlnLmhvb2tzKVxuICAgICAgOiBkZWZhdWx0SG9va3M7XG4gIH1cblxuICBuYW1lc3BhY2VGYWN0b3J5PE5hbWVzcGFjZSBleHRlbmRzIHN0cmluZz4oXG4gICAgbmFtZXNwYWNlOiBOYW1lc3BhY2VcbiAgKTogU29ja2V0TmFtZXNwYWNlPE5hbWVzcGFjZT4ge1xuICAgIGlmICghdGhpcy51cmwgfHwgIXRoaXMuYXBpVG9rZW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJDbGllbnQgbXVzdCBiZSBjb25maWd1cmVkIHdpdGggYSB1cmwgYW5kIGEgdG9rZW4uIENhbGwgY2xpZW50LmNvbmZpZ3VyZSh7IHVybCwgYXBpVG9rZW4gfSkgYmVmb3JlIGNhbGxpbmcgdGhpcyBtZXRob2RcIlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZVNvY2tldE5hbWVzcGFjZShcbiAgICAgIHRoaXMudXJsLFxuICAgICAgdGhpcy5hcGlUb2tlbixcbiAgICAgIG5hbWVzcGFjZSxcbiAgICAgIHRoaXMuaW9PcHRpb25zXG4gICAgKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZShjb25maWc6IENvbnN0cnVjdG9yQ29uZmlnKTogdGhpcyB7XG4gICAgY29uc3QgeyB1cmwsIGFwaVRva2VuLCBpb09wdGlvbnMgfSA9IGNvbmZpZztcbiAgICB0aGlzLnVybCA9IHVybDtcbiAgICB0aGlzLmFwaVRva2VuID0gYXBpVG9rZW47XG4gICAgdGhpcy5pb09wdGlvbnMgPSBpb09wdGlvbnM7XG4gICAgdGhpcy5ob29rcyA9IHRoaXMuY29uZmlndXJlSG9va3MoY29uZmlnKTtcbiAgICB0aGlzLmNhY2hlID0gY29uZmlnLmNhY2hlIHx8IHRoaXMuY2FjaGU7XG4gICAgdGhpcy5jdXN0b21HZXRDYWNoZUtleSA9IGNvbmZpZy5nZXRDYWNoZUtleTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHN1YnNjcmliZTxcbiAgICBULFxuICAgIE5hbWVzcGFjZSBleHRlbmRzIHN0cmluZyA9IGFueSxcbiAgICBTY29wZU5hbWUgZXh0ZW5kcyBzdHJpbmcgPSBhbnksXG4gICAgUmVxdWVzdFBheWxvYWQgPSBhbnlcbiAgPih7XG4gICAgdmVyaWZ5Rm4gPSB2ZXJpZnlCeVJlcXVlc3RJZCxcbiAgICAuLi5yYXdPcHRpb25zXG4gIH06IENsaWVudFN1YnNjcmliZU9wdGlvbnM8XG4gICAgVCxcbiAgICBOYW1lc3BhY2UsXG4gICAgU2NvcGVOYW1lLFxuICAgIFJlcXVlc3RQYXlsb2FkXG4gID4pOiBSZXR1cm5UeXBlPHR5cGVvZiBzdWJzY3JpYmU+IHtcbiAgICBjb25zdCBvcHRpb25zID0gbm9ybWFsaXplT3B0aW9ucyhyYXdPcHRpb25zLCB0aGlzLm5hbWVzcGFjZUZhY3RvcnkpO1xuICAgIGNvbnN0IHsgbmFtZXNwYWNlIH0gPSBvcHRpb25zLnNvY2tldE5hbWVzcGFjZTtcbiAgICB0aGlzLmhvb2tzLndpbGxTZW5kUmVxdWVzdChvcHRpb25zLmJvZHksIHsgbmFtZXNwYWNlIH0pO1xuICAgIGNvbnN0IGtleSA9IGNyZWF0ZUtleShvcHRpb25zKTtcbiAgICBjb25zdCByZXF1ZXN0SWQgPSBrZXlUb1JlcXVlc3RJZChrZXkpO1xuICAgIHJldHVybiBzdWJzY3JpYmUoe1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHZlcmlmeUZuLFxuICAgICAgYm9keToge1xuICAgICAgICAuLi5vcHRpb25zLmJvZHksXG4gICAgICAgIHBheWxvYWQ6IHsgLi4ub3B0aW9ucy5ib2R5LnBheWxvYWQsIHJlcXVlc3RfaWQ6IHJlcXVlc3RJZCB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGdldEZyb21DYWNoZTxcbiAgICBULFxuICAgIE5hbWVzcGFjZSBleHRlbmRzIHN0cmluZyxcbiAgICBTY29wZU5hbWUgZXh0ZW5kcyBzdHJpbmcsXG4gICAgUmVxdWVzdFBheWxvYWQgPSBhbnlcbiAgPihcbiAgICByYXdPcHRpb25zOiBDb252ZW5pZW5jZU9wdGlvbnNDYWNoZWQ8TmFtZXNwYWNlLCBTY29wZU5hbWUsIFJlcXVlc3RQYXlsb2FkPlxuICApOiBSZXN1bHQ8VCwgU2NvcGVOYW1lPiB8IG51bGwge1xuICAgIC8vIHJhd09wdGlvbnMub25EYXRhXG4gICAgaWYgKCFzaG91bGRSZXR1cm5DYWNoZWREYXRhKHJhd09wdGlvbnMuY2FjaGVQb2xpY3kgfHwgZGVmYXVsdENhY2hlUG9saWN5KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IG9wdGlvbnMgPSBub3JtYWxpemVPcHRpb25zKHJhd09wdGlvbnMsIHRoaXMubmFtZXNwYWNlRmFjdG9yeSk7XG4gICAgY29uc3Qga2V5ID0gY3JlYXRlS2V5KG9wdGlvbnMpO1xuICAgIC8vIGNvbnN0IHJlcXVlc3RJZCA9IHJlcXVlc3RUb1JlcXVlc3RJZChvcHRpb25zKTtcbiAgICBjb25zdCByZXF1ZXN0SWQgPSBrZXlUb1JlcXVlc3RJZChrZXkpO1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gdGhpcy5nZXRDYWNoZUtleShrZXksIHJlcXVlc3RJZCk7XG4gICAgLy8gbGV0IGNhY2hlS2V5OiBzdHJpbmcgfCBudW1iZXI7XG4gICAgY29uc3QgZW50cnlTdG9yZSA9IHRoaXMuY2FjaGUuZ2V0KFxuICAgICAgY2FjaGVLZXksXG4gICAgICBvcHRpb25zLmNhY2hlUG9saWN5IHx8IGRlZmF1bHRDYWNoZVBvbGljeVxuICAgICk7XG4gICAgcmV0dXJuIGVudHJ5U3RvcmUgPyBlbnRyeVN0b3JlLmdldFN0YXRlKCkgOiBudWxsO1xuICB9XG5cbiAgZ2V0Q2FjaGVLZXkoa2V5OiBzdHJpbmcsIHJlcXVlc3RJZDogbnVtYmVyKTogc3RyaW5nIHwgbnVtYmVyIHtcbiAgICBpZiAodGhpcy5jdXN0b21HZXRDYWNoZUtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3VzdG9tR2V0Q2FjaGVLZXkoeyBrZXksIHJlcXVlc3RJZCB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY2FjaGUgaW5zdGFuY2VvZiBQZXJzaXN0ZW50Q2FjaGUpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXF1ZXN0SWQ7XG4gICAgfVxuICB9XG5cbiAgY2FjaGVkU3Vic2NyaWJlPFxuICAgIFQsXG4gICAgTmFtZXNwYWNlIGV4dGVuZHMgc3RyaW5nID0gYW55LFxuICAgIFNjb3BlTmFtZSBleHRlbmRzIHN0cmluZyA9IGFueVxuICA+KHtcbiAgICBjYWNoZVBvbGljeSA9IGRlZmF1bHRDYWNoZVBvbGljeSxcbiAgICBvbkRhdGEsXG4gICAgLy8gbWVyZ2luZ0Z1bmN0aW9uLFxuICAgIGdldElkLFxuICAgIG1lcmdlU3RyYXRlZ3kgPSBtZXJnZURpY3QsXG4gICAgdmVyaWZ5Rm4gPSB2ZXJpZnlCeVJlcXVlc3RJZCxcbiAgICAuLi5jb252ZW5pZW5jZU9wdGlvbnNcbiAgfTogQ2FjaGVkUmVxdWVzdE9wdGlvbnM8VCwgTmFtZXNwYWNlLCBTY29wZU5hbWU+KToge1xuICAgIGVudHJ5U3RvcmU6IEVudHJ5U3RvcmU8VD47XG4gICAgdW5zdWJzY3JpYmU6IFVuc3Vic2NyaWJlO1xuICB9IHtcbiAgICBjb25zdCBvcHRpb25zID0gbm9ybWFsaXplT3B0aW9ucyhjb252ZW5pZW5jZU9wdGlvbnMsIHRoaXMubmFtZXNwYWNlRmFjdG9yeSk7XG4gICAgY29uc3Qga2V5ID0gY3JlYXRlS2V5KG9wdGlvbnMpO1xuICAgIC8vIGNvbnN0IHJlcXVlc3RJZCA9IHJlcXVlc3RUb1JlcXVlc3RJZChvcHRpb25zKTtcbiAgICBjb25zdCByZXF1ZXN0SWQgPSBrZXlUb1JlcXVlc3RJZChrZXkpO1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gdGhpcy5nZXRDYWNoZUtleShrZXksIHJlcXVlc3RJZCk7XG5cbiAgICBjb25zdCB7IG5hbWVzcGFjZSB9ID0gb3B0aW9ucy5zb2NrZXROYW1lc3BhY2U7XG5cbiAgICAvLyBOT1RFOiBkb24ndCBtdXRhdGUgYm9keSB0byBjcmVhdGUgY29uc2lzdGVudCBjYWNoZSBrZXlcbiAgICBjb25zdCBib2R5ID0gdGhpcy5ob29rcy53aWxsU2VuZFJlcXVlc3QoXG4gICAgICB7XG4gICAgICAgIC4uLm9wdGlvbnMuYm9keSxcbiAgICAgICAgcGF5bG9hZDogeyAuLi5vcHRpb25zLmJvZHkucGF5bG9hZCwgcmVxdWVzdF9pZDogcmVxdWVzdElkIH0sXG4gICAgICB9LFxuICAgICAgeyBuYW1lc3BhY2UgfVxuICAgICk7XG5cbiAgICBjb25zdCBtYXliZUVudHJ5U3RvcmUgPSB0aGlzLmNhY2hlLmdldChjYWNoZUtleSwgY2FjaGVQb2xpY3kpO1xuXG4gICAgY29uc3Qgc2hvdWxkTWFrZVJlcXVlc3QgPSBpc1JlcXVlc3ROZWVkZWQoXG4gICAgICBjYWNoZVBvbGljeSxcbiAgICAgIG1heWJlRW50cnlTdG9yZSA/IG1heWJlRW50cnlTdG9yZS5nZXRTdGF0ZSgpIDogbnVsbFxuICAgICk7XG4gICAgY29uc3QgZW50cnlTdG9yZSA9IGdldE9yQ3JlYXRlRW50cnkoXG4gICAgICB0aGlzLmNhY2hlLFxuICAgICAgY2FjaGVLZXksXG4gICAgICBjYWNoZVBvbGljeSxcbiAgICAgIHNob3VsZE1ha2VSZXF1ZXN0ID8gRGF0YVN0YXR1cy5yZXF1ZXN0ZWQgOiB1bmRlZmluZWRcbiAgICApO1xuICAgIGNvbnN0IGVudHJ5U3RhdGUgPSBlbnRyeVN0b3JlLmdldFN0YXRlKCk7XG5cbiAgICBjb25zdCB1bmxpc3RlbiA9IGVudHJ5U3RvcmUuYWRkQ2xpZW50TGlzdGVuZXIob25EYXRhKTtcblxuICAgIGlmIChzaG91bGRNYWtlUmVxdWVzdCkge1xuICAgICAgY29uc3QgdW5zdWJzY3JpYmUgPSBzdWJzY3JpYmUoe1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBib2R5LFxuICAgICAgICB2ZXJpZnlGbixcbiAgICAgICAgb25NZXNzYWdlOiAoZXZlbnQsIGRhdGEpID0+IHtcbiAgICAgICAgICBjb25zdCB7IHBheWxvYWQsIG1ldGEgfSA9IGRhdGE7XG4gICAgICAgICAgY29uc3Qgc2NvcGUgPSBvcHRpb25zLmJvZHkuc2NvcGUuZmluZChzID0+IHMgaW4gcGF5bG9hZCk7XG4gICAgICAgICAgaWYgKCFzY29wZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBlbnRyeVN0YXRlID0gZW50cnlTdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgIGlmIChjb252ZW5pZW5jZU9wdGlvbnMubWV0aG9kID09PSBcInN0cmVhbVwiICYmIGV2ZW50ID09PSBcImRvbmVcIikge1xuICAgICAgICAgICAgZW50cnlTdG9yZS5zZXREYXRhKHtcbiAgICAgICAgICAgICAgc2NvcGVOYW1lOiBzY29wZSxcbiAgICAgICAgICAgICAgdmFsdWU6IGVudHJ5U3RhdGUudmFsdWUsXG4gICAgICAgICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAgICAgICAuLi5tZXRhLFxuICAgICAgICAgICAgICAgIG5leHRfY3Vyc29yOiBlbnRyeVN0YXRlLm1ldGE/Lm5leHRfY3Vyc29yLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzdGF0dXM6IERhdGFTdGF0dXMub2ssXG4gICAgICAgICAgICAgIGlzRG9uZTogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBtZXJnZWQgPSBtZXJnZVN0cmF0ZWd5KHtcbiAgICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgICAgcHJldkRhdGE6IGVudHJ5U3RhdGUuZGF0YVxuICAgICAgICAgICAgICA/IGVudHJ5U3RhdGUuZGF0YVtzY29wZV1cbiAgICAgICAgICAgICAgOiBlbnRyeVN0YXRlLmRhdGEsXG4gICAgICAgICAgICBuZXdEYXRhOiBwYXlsb2FkW3Njb3BlXSBhcyBhbnksXG4gICAgICAgICAgICBnZXRJZCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25zdCBzdGF0dXMgPVxuICAgICAgICAgICAgY29udmVuaWVuY2VPcHRpb25zLm1ldGhvZCA9PT0gXCJzdHJlYW1cIlxuICAgICAgICAgICAgICA/IGlzSWRsZVN0YXR1cyhlbnRyeVN0YXRlLnN0YXR1cylcbiAgICAgICAgICAgICAgICA/IERhdGFTdGF0dXMudXBkYXRpbmdcbiAgICAgICAgICAgICAgICA6IGVudHJ5U3RhdGUuc3RhdHVzXG4gICAgICAgICAgICAgIDogRGF0YVN0YXR1cy5vaztcbiAgICAgICAgICBlbnRyeVN0b3JlLnNldERhdGEoe1xuICAgICAgICAgICAgc2NvcGVOYW1lOiBzY29wZSxcbiAgICAgICAgICAgIHZhbHVlOiBtZXJnZWQsXG4gICAgICAgICAgICBtZXRhLFxuICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgaXNEb25lOiBjb252ZW5pZW5jZU9wdGlvbnMubWV0aG9kICE9PSBcInN0cmVhbVwiLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBlbnRyeVN0b3JlLm1ha2VTdWJzY3JpcHRpb24oeyB1bnN1YnNjcmliZSB9KTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkUmV0dXJuQ2FjaGVkRGF0YShjYWNoZVBvbGljeSkpIHtcbiAgICAgIG9uRGF0YShlbnRyeVN0YXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGVudHJ5U3RvcmUsXG4gICAgICB1bnN1YnNjcmliZTogKCkgPT4gdW5saXN0ZW4oKSxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDbGllbnQgZXh0ZW5kcyBCYXJlQ2xpZW50IHtcbiAgYWRkcmVzc0Fzc2V0cyA9IGFkZHJlc3NBc3NldHM7XG4gIGFkZHJlc3NMb2FucyA9IGFkZHJlc3NMb2FucztcbiAgYWRkcmVzc1Bvc2l0aW9ucyA9IGFkZHJlc3NQb3NpdGlvbnM7XG4gIGFkZHJlc3NQb3J0Zm9saW8gPSBhZGRyZXNzUG9ydGZvbGlvO1xuICBhZGRyZXNzUG9ydGZvbGlvRGVjb21wb3NpdGlvbiA9IGFkZHJlc3NQb3J0Zm9saW9EZWNvbXBvc2l0aW9uO1xuICBhZGRyZXNzQ2hhcnRzID0gYWRkcmVzc0NoYXJ0cztcbiAgYXNzZXRzQ2hhcnRzID0gYXNzZXRzQ2hhcnRzO1xuICBhc3NldHNQcmljZXMgPSBhc3NldHNQcmljZXM7XG4gIGFzc2V0c0Z1bGxJbmZvID0gYXNzZXRzRnVsbEluZm87XG4gIGFzc2V0c0luZm8gPSBhc3NldHNJbmZvO1xufVxuXG5leHBvcnQgY29uc3QgY2xpZW50ID0gbmV3IENsaWVudChudWxsKTtcbiIsImltcG9ydCB0eXBlIHsgU29ja2V0IH0gZnJvbSBcInNvY2tldC5pby1jbGllbnRcIjtcbmltcG9ydCB0eXBlIHsgVW5zdWJzY3JpYmUgfSBmcm9tIFwiLi4vc2hhcmVkL1Vuc3Vic2NyaWJlXCI7XG5cbmNvbnN0IFdBSVRfQkVGT1JFX0RJU0NPTk5FQ1QgPSAyMDAwMDtcblxuZnVuY3Rpb24gZ2V0V2FpdFRpbWUoKSB7XG4gIC8vIGp1c3QgYSBoZWxwZXIgZm9yIGRlYnVnZ2luZyBzbyB0aGF0IHRpbWVvdXRcbiAgLy8gY2FuIGJlIHNldCBmcm9tIGNvbnNvbGVcbiAgcmV0dXJuICh3aW5kb3cgYXMgYW55KS5XQUlUX0JFRk9SRV9ESVNDT05ORUNUIHx8IFdBSVRfQkVGT1JFX0RJU0NPTk5FQ1Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVQYWdlVmlzaWJpbGl0eShzb2NrZXQ6IHR5cGVvZiBTb2NrZXQpOiBVbnN1YnNjcmliZSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gKCkgPT4ge307IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG4gIH1cbiAgbGV0IGFjdGl2ZSA9IHRydWU7XG4gIGxldCB0aW1lcklkOiBhbnk7XG4gIGxldCBkaXNjb25uZWN0ZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSBcImhpZGRlblwiKSB7XG4gICAgICB0aW1lcklkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNvY2tldC5kaXNjb25uZWN0KCk7XG4gICAgICAgIGRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICB9LCBnZXRXYWl0VGltZSgpKTtcbiAgICB9XG5cbiAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSBcInZpc2libGVcIikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgaWYgKGRpc2Nvbm5lY3RlZCkge1xuICAgICAgICBzb2NrZXQub24oXCJjb25uZWN0XCIsICgpID0+IHtcbiAgICAgICAgICBpZiAoIWFjdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkaXNjb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNvY2tldC5jb25uZWN0KCk7XG4gICAgICAgIHNvY2tldC5lbWl0KFwicmVjb25uZWN0XCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCBoYW5kbGVyKTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCBoYW5kbGVyKTtcbiAgfTtcbn1cbiIsImltcG9ydCB0eXBlIHsgRW50cnkgfSBmcm9tIFwiLi9FbnRyeVwiO1xuaW1wb3J0IHR5cGUgeyBDYWNoZVBvbGljeSB9IGZyb20gXCIuL0NhY2hlUG9saWN5XCI7XG5pbXBvcnQgeyBEYXRhU3RhdHVzIH0gZnJvbSBcIi4vRGF0YVN0YXR1c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNSZXF1ZXN0TmVlZGVkKFxuICBjYWNoZVBvbGljeTogQ2FjaGVQb2xpY3ksXG4gIGVudHJ5OiBudWxsIHwgRW50cnk8YW55LCBhbnk+XG4pOiBib29sZWFuIHtcbiAgc3dpdGNoIChjYWNoZVBvbGljeSkge1xuICAgIGNhc2UgXCJjYWNoZS1hbmQtbmV0d29ya1wiOiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAhZW50cnkgfHxcbiAgICAgICAgZW50cnkuc3RhdHVzID09PSBEYXRhU3RhdHVzLm5vUmVxdWVzdHMgfHxcbiAgICAgICAgKGVudHJ5LnN0YXR1cyAhPT0gRGF0YVN0YXR1cy5yZXF1ZXN0ZWQgJiYgIWVudHJ5Lmhhc1N1YnNjcmliZXJzKVxuICAgICAgKTtcbiAgICB9XG4gICAgY2FzZSBcImNhY2hlLWZpcnN0XCI6IHtcbiAgICAgIHJldHVybiAhZW50cnkgfHwgZW50cnkuc3RhdHVzID09PSBEYXRhU3RhdHVzLm5vUmVxdWVzdHM7XG4gICAgfVxuICAgIGNhc2UgXCJuZXR3b3JrLW9ubHlcIjoge1xuICAgICAgcmV0dXJuICFlbnRyeSB8fCBlbnRyeS5zdGF0dXMgIT09IERhdGFTdGF0dXMucmVxdWVzdGVkO1xuICAgIH1cbiAgICBjYXNlIFwiY2FjaGUtb25seVwiOiB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGNhY2hlIHBvbGljeTogJHtjYWNoZVBvbGljeX1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRGF0YVN0YXR1cyB9IGZyb20gXCIuL0RhdGFTdGF0dXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0RhdGEoc3RhdHVzOiBEYXRhU3RhdHVzKTogYm9vbGVhbiB7XG4gIHJldHVybiBzdGF0dXMgPT09IERhdGFTdGF0dXMub2sgfHwgc3RhdHVzID09PSBEYXRhU3RhdHVzLnVwZGF0aW5nO1xufVxuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB0eXBlIHtcbiAgQ2FjaGVkUmVxdWVzdE9wdGlvbnMsXG4gIENsaWVudCxcbiAgQ29udmVuaWVuY2VPcHRpb25zQ2FjaGVkLFxuICBSZXN1bHQsXG59IGZyb20gXCIuLi9jbGllbnRcIjtcbmltcG9ydCB7IGNsaWVudCBhcyBkZWZhdWx0Q2xpZW50IH0gZnJvbSBcIi4uL2NsaWVudFwiO1xuaW1wb3J0IHsgZ2V0SW5pdGlhbFN0YXRlIH0gZnJvbSBcIi4uL2NhY2hlL0VudHJ5XCI7XG5pbXBvcnQgeyBoYXNEYXRhIH0gZnJvbSBcIi4uL2NhY2hlL2hhc0RhdGFcIjtcbmltcG9ydCB7IERhdGFTdGF0dXMgfSBmcm9tIFwiLi4vY2FjaGUvRGF0YVN0YXR1c1wiO1xuaW1wb3J0IHsgU29ja2V0TmFtZXNwYWNlIH0gZnJvbSBcIi4uL3NoYXJlZC9Tb2NrZXROYW1lc3BhY2VcIjtcbmltcG9ydCB7IHNob3VsZFJldHVybkNhY2hlZERhdGEgfSBmcm9tIFwiLi4vY2FjaGUvc2hvdWxkUmV0dXJuQ2FjaGVkRGF0YVwiO1xuaW1wb3J0IHsgZGVmYXVsdENhY2hlUG9saWN5IH0gZnJvbSBcIi4uL2NhY2hlL2RlZmF1bHRDYWNoZVBvbGljeVwiO1xuXG5jb25zdCBlbXB0eUVudHJ5SWRsZSA9IGdldEluaXRpYWxTdGF0ZTxhbnksIGFueT4oKTtcbmNvbnN0IGVtcHR5RW50cnlMb2FkaW5nID0gZ2V0SW5pdGlhbFN0YXRlPGFueSwgYW55PihEYXRhU3RhdHVzLnJlcXVlc3RlZCk7XG5cbmV4cG9ydCB0eXBlIEhvb2tPcHRpb25zPFxuICBOYW1lc3BhY2UgZXh0ZW5kcyBzdHJpbmcgPSBhbnksXG4gIFNjb3BlTmFtZSBleHRlbmRzIHN0cmluZyA9IGFueVxuPiA9IENvbnZlbmllbmNlT3B0aW9uc0NhY2hlZDxOYW1lc3BhY2UsIFNjb3BlTmFtZT4gJiB7XG4gIGNsaWVudD86IENsaWVudDtcbiAga2VlcFN0YWxlRGF0YT86IGJvb2xlYW47XG4gIGVuYWJsZWQ/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVN1YnNjcmlwdGlvbjxcbiAgVCxcbiAgTmFtZXNwYWNlIGV4dGVuZHMgc3RyaW5nID0gYW55LFxuICBTY29wZU5hbWUgZXh0ZW5kcyBzdHJpbmcgPSBhbnlcbj4oe1xuICBrZWVwU3RhbGVEYXRhID0gZmFsc2UsXG4gIGVuYWJsZWQgPSB0cnVlLFxuICBjbGllbnQ6IGN1cnJlbnRDbGllbnQsXG4gIC4uLmhvb2tPcHRpb25zXG59OiBIb29rT3B0aW9uczxOYW1lc3BhY2UsIFNjb3BlTmFtZT4pOiBSZXN1bHQ8VCwgU2NvcGVOYW1lPiB7XG4gIGNvbnN0IGNsaWVudCA9IGN1cnJlbnRDbGllbnQgfHwgZGVmYXVsdENsaWVudDtcbiAgY29uc3QgW2VudHJ5LCBzZXRFbnRyeV0gPSB1c2VTdGF0ZTxSZXN1bHQ8VCwgU2NvcGVOYW1lPiB8IG51bGw+KFxuICAgIGNsaWVudC5nZXRGcm9tQ2FjaGUoaG9va09wdGlvbnMpXG4gICk7XG5cbiAgY29uc3QgZ3VhcmRlZFNldEVudHJ5ID0gdXNlQ2FsbGJhY2soXG4gICAgKGVudHJ5OiBudWxsIHwgUmVzdWx0PFQsIFNjb3BlTmFtZT4pID0+IHtcbiAgICAgIHNldEVudHJ5KHByZXZFbnRyeSA9PiB7XG4gICAgICAgIGlmICgha2VlcFN0YWxlRGF0YSkge1xuICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXByZXZFbnRyeSkge1xuICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdFbnRyeUhhc0RhdGEgPSBlbnRyeSA/IGhhc0RhdGEoZW50cnkuc3RhdHVzKSA6IGZhbHNlO1xuICAgICAgICBjb25zdCBwcmV2RW50cnlIYXNEYXRhID0gaGFzRGF0YShwcmV2RW50cnkuc3RhdHVzKTtcbiAgICAgICAgaWYgKCFuZXdFbnRyeUhhc0RhdGEgJiYgcHJldkVudHJ5SGFzRGF0YSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5wcmV2RW50cnksXG4gICAgICAgICAgICBzdGF0dXM6IGVudHJ5ID8gZW50cnkuc3RhdHVzIDogcHJldkVudHJ5LnN0YXR1cyxcbiAgICAgICAgICAgIGlzRG9uZTogZW50cnkgPyBlbnRyeS5pc0RvbmUgOiBwcmV2RW50cnkuaXNEb25lLFxuICAgICAgICAgICAgaXNGZXRjaGluZzogZW50cnkgPyBlbnRyeS5pc0ZldGNoaW5nIDogcHJldkVudHJ5LmlzRmV0Y2hpbmcsXG4gICAgICAgICAgICBpc0xvYWRpbmc6IGVudHJ5ID8gZW50cnkuaXNMb2FkaW5nIDogcHJldkVudHJ5LmlzTG9hZGluZyxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW2tlZXBTdGFsZURhdGFdXG4gICk7XG5cbiAgY29uc3QgeyBzb2NrZXROYW1lc3BhY2UsIG5hbWVzcGFjZSB9ID0gaG9va09wdGlvbnMgYXMge1xuICAgIHNvY2tldE5hbWVzcGFjZT86IFNvY2tldE5hbWVzcGFjZTxOYW1lc3BhY2U+O1xuICAgIG5hbWVzcGFjZT86IE5hbWVzcGFjZTtcbiAgfTtcbiAgY29uc3Qgb3B0aW9uczogQ2FjaGVkUmVxdWVzdE9wdGlvbnM8VCwgTmFtZXNwYWNlLCBTY29wZU5hbWU+ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBPYmplY3QuYXNzaWduKFxuICAgICAge1xuICAgICAgICBtZXRob2Q6IGhvb2tPcHRpb25zLm1ldGhvZCxcbiAgICAgICAgY2FjaGVQb2xpY3k6IGhvb2tPcHRpb25zLmNhY2hlUG9saWN5LFxuICAgICAgICBib2R5OiBob29rT3B0aW9ucy5ib2R5LFxuICAgICAgICBnZXRJZDogaG9va09wdGlvbnMuZ2V0SWQsXG4gICAgICAgIG1lcmdlU3RyYXRlZ3k6IGhvb2tPcHRpb25zLm1lcmdlU3RyYXRlZ3ksXG4gICAgICAgIG9uQW55TWVzc2FnZTogaG9va09wdGlvbnMub25BbnlNZXNzYWdlLFxuICAgICAgICB2ZXJpZnlGbjogaG9va09wdGlvbnMudmVyaWZ5Rm4sXG4gICAgICAgIG9uRGF0YTogZ3VhcmRlZFNldEVudHJ5LFxuICAgICAgfSxcbiAgICAgIHNvY2tldE5hbWVzcGFjZSA/IHsgc29ja2V0TmFtZXNwYWNlIH0gOiBudWxsLFxuICAgICAgbmFtZXNwYWNlID8geyBuYW1lc3BhY2UgfSA6IG51bGxcbiAgICApO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSwgW1xuICAgIGd1YXJkZWRTZXRFbnRyeSxcbiAgICBob29rT3B0aW9ucy5ib2R5LFxuICAgIGhvb2tPcHRpb25zLmNhY2hlUG9saWN5LFxuICAgIGhvb2tPcHRpb25zLmdldElkLFxuICAgIGhvb2tPcHRpb25zLm1lcmdlU3RyYXRlZ3ksXG4gICAgaG9va09wdGlvbnMub25BbnlNZXNzYWdlLFxuICAgIGhvb2tPcHRpb25zLnZlcmlmeUZuLFxuICAgIGhvb2tPcHRpb25zLm1ldGhvZCxcbiAgICBuYW1lc3BhY2UsXG4gICAgc29ja2V0TmFtZXNwYWNlLFxuICBdKTtcblxuICAvKipcbiAgICogTk9URTpcbiAgICogRW50cnkgbWlnaHQgaGF2ZSBjaGFuZ2VkIGhhcyBjaGFuZ2VkIHNpbmNlIG91ciBsYXN0IHJlbmRlcixcbiAgICogc28gd2UgcmVhZCBmcm9tIGNhY2hlIHN5bmNocm9ub3VzbHkgYW5kIHVwZGF0ZSBkYXRhIGlmIGl0IGhhZCBjaGFuZ2VkXG4gICAqIFRoaXMgc2hvdWxkIGJlIGRvbmUgc3luY2hyb25vdXNseSB0byBhdm9pZCByZXR1cm5pbmcgbWlzbWF0Y2hlZCB2YWx1ZXNcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvOTNhMGMyODMwNTM0Y2ZiYzRlNmJlM2VjYzljOWZjMzRkZWUzY2ZhYS9wYWNrYWdlcy91c2Utc3Vic2NyaXB0aW9uL3NyYy91c2VTdWJzY3JpcHRpb24uanMjTDQxLUw1NlxuICAgKi9cbiAgY29uc3QgbmV3RW50cnk6IG51bGwgfCBSZXN1bHQ8VCwgU2NvcGVOYW1lPiA9IHVzZU1lbW8oXG4gICAgKCkgPT4gY2xpZW50LmdldEZyb21DYWNoZShob29rT3B0aW9ucyksXG4gICAgW2NsaWVudCwgaG9va09wdGlvbnNdXG4gICk7XG4gIGlmIChcbiAgICBuZXdFbnRyeSAhPT0gZW50cnkgJiZcbiAgICBzaG91bGRSZXR1cm5DYWNoZWREYXRhKG9wdGlvbnMuY2FjaGVQb2xpY3kgfHwgZGVmYXVsdENhY2hlUG9saWN5KVxuICApIHtcbiAgICBpZiAoIWtlZXBTdGFsZURhdGEpIHtcbiAgICAgIGd1YXJkZWRTZXRFbnRyeShuZXdFbnRyeSk7XG4gICAgfVxuICB9XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWVuYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZ3VhcmRlZFNldEVudHJ5KGNsaWVudC5nZXRGcm9tQ2FjaGUob3B0aW9ucykpO1xuICAgIGNvbnN0IHsgdW5zdWJzY3JpYmUgfSA9IGNsaWVudC5jYWNoZWRTdWJzY3JpYmUob3B0aW9ucyk7XG4gICAgcmV0dXJuIHVuc3Vic2NyaWJlO1xuICB9LCBbZW5hYmxlZCwgb3B0aW9ucywgZ3VhcmRlZFNldEVudHJ5LCBjbGllbnRdKTtcblxuICBjb25zdCBlbnRyeUhhc09yV2lsbEhhdmVSZXF1ZXN0ID1cbiAgICBlbmFibGVkICYmIG9wdGlvbnMuY2FjaGVQb2xpY3kgIT09IFwiY2FjaGUtb25seVwiO1xuICBjb25zdCBlbnRyeUhhc05vdFlldE1hZGVSZXF1ZXN0ID0gZW50cnlcbiAgICA/IGVudHJ5LnN0YXR1cyA9PT0gRGF0YVN0YXR1cy5ub1JlcXVlc3RzICYmICFlbnRyeS5kYXRhXG4gICAgOiB0cnVlO1xuICBjb25zdCBlbXB0eUVudHJ5ID0gZW50cnlIYXNPcldpbGxIYXZlUmVxdWVzdFxuICAgID8gZW1wdHlFbnRyeUxvYWRpbmdcbiAgICA6IGVtcHR5RW50cnlJZGxlO1xuICBpZiAoIWVudHJ5IHx8IChlbnRyeUhhc09yV2lsbEhhdmVSZXF1ZXN0ICYmIGVudHJ5SGFzTm90WWV0TWFkZVJlcXVlc3QpKSB7XG4gICAgcmV0dXJuIGVtcHR5RW50cnk7XG4gIH1cbiAgcmV0dXJuIGVudHJ5O1xufVxuIiwiaW1wb3J0IHsgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBlcXVhbCBmcm9tIFwiZmFzdC1kZWVwLWVxdWFsXCI7XG5pbXBvcnQgdHlwZSB7IEVudHJ5LCBNZXJnZVN0cmF0ZWd5IH0gZnJvbSBcIi4uLy4uXCI7XG5pbXBvcnQgdHlwZSB7IHZlcmlmeSB9IGZyb20gXCIuLi8uLi9yZXF1ZXN0cy92ZXJpZnlcIjtcbmltcG9ydCB7IHVzZVN1YnNjcmlwdGlvbiB9IGZyb20gXCIuLi91c2VTdWJzY3JpcHRpb25cIjtcbmltcG9ydCB0eXBlIHsgSG9va09wdGlvbnMgfSBmcm9tIFwiLi4vdXNlU3Vic2NyaXB0aW9uXCI7XG5cbmV4cG9ydCB0eXBlIE9wdGlvbnM8TmFtZXNwYWNlIGV4dGVuZHMgc3RyaW5nLCBTY29wZU5hbWUgZXh0ZW5kcyBzdHJpbmc+ID0gT21pdDxcbiAgSG9va09wdGlvbnM8TmFtZXNwYWNlLCBTY29wZU5hbWU+LFxuICBcImJvZHlcIiB8IFwic29ja2V0TmFtZXNwYWNlXCJcbj47XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEb21haW5Ib29rPFxuICBSZXF1ZXN0UGF5bG9hZCxcbiAgUmVzcG9uc2VEYXRhLFxuICBOYW1lc3BhY2UgZXh0ZW5kcyBzdHJpbmcsXG4gIFNjb3BlTmFtZSBleHRlbmRzIHN0cmluZ1xuPih7XG4gIG5hbWVzcGFjZSxcbiAgc2NvcGUsXG4gIGdldElkLFxuICBtZXJnZVN0cmF0ZWd5LFxuICB2ZXJpZnlGbixcbn06IHtcbiAgbmFtZXNwYWNlOiBOYW1lc3BhY2U7XG4gIHNjb3BlOiBTY29wZU5hbWU7XG4gIGdldElkPzogKHg6IGFueSkgPT4gc3RyaW5nIHwgbnVtYmVyO1xuICBtZXJnZVN0cmF0ZWd5PzogTWVyZ2VTdHJhdGVneTtcbiAgdmVyaWZ5Rm4/OiB0eXBlb2YgdmVyaWZ5O1xufSkge1xuICByZXR1cm4gKFxuICAgIHBheWxvYWQ6IFJlcXVlc3RQYXlsb2FkLFxuICAgIG9wdGlvbnM6IE9wdGlvbnM8TmFtZXNwYWNlLCBTY29wZU5hbWU+ID0ge31cbiAgKTogRW50cnk8UmVzcG9uc2VEYXRhLCBTY29wZU5hbWU+ID0+IHtcbiAgICBjb25zdCBbY3VycmVudFBheWxvYWQsIHNldEN1cnJlbnRQYXlsb2FkXSA9IHVzZVN0YXRlKHBheWxvYWQpO1xuXG4gICAgaWYgKGN1cnJlbnRQYXlsb2FkICE9PSBwYXlsb2FkKSB7XG4gICAgICBpZiAoIWVxdWFsKGN1cnJlbnRQYXlsb2FkLCBwYXlsb2FkKSkge1xuICAgICAgICBzZXRDdXJyZW50UGF5bG9hZChwYXlsb2FkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSB1c2VTdWJzY3JpcHRpb248UmVzcG9uc2VEYXRhLCBOYW1lc3BhY2UsIFNjb3BlTmFtZT4oe1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIG5hbWVzcGFjZSxcbiAgICAgIGdldElkOiBnZXRJZCB8fCBvcHRpb25zLmdldElkLFxuICAgICAgbWVyZ2VTdHJhdGVneTogbWVyZ2VTdHJhdGVneSB8fCBvcHRpb25zLm1lcmdlU3RyYXRlZ3ksXG4gICAgICB2ZXJpZnlGbjogdmVyaWZ5Rm4gfHwgb3B0aW9ucy52ZXJpZnlGbixcbiAgICAgIGJvZHk6IHVzZU1lbW8oXG4gICAgICAgICgpID0+ICh7XG4gICAgICAgICAgc2NvcGU6IFtzY29wZV0sXG4gICAgICAgICAgcGF5bG9hZDogY3VycmVudFBheWxvYWQsXG4gICAgICAgIH0pLFxuICAgICAgICBbY3VycmVudFBheWxvYWRdXG4gICAgICApLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cbiIsImltcG9ydCB0eXBlIHsgUmVxdWVzdFBheWxvYWQsIFJlc3BvbnNlRGF0YSB9IGZyb20gXCIuLi8uLi9kb21haW5zL2FkZHJlc3NMb2Fuc1wiO1xuaW1wb3J0IHsgbmFtZXNwYWNlLCBzY29wZSwgbWVyZ2VTdHJhdGVneSB9IGZyb20gXCIuLi8uLi9kb21haW5zL2FkZHJlc3NMb2Fuc1wiO1xuaW1wb3J0IHsgY3JlYXRlRG9tYWluSG9vayB9IGZyb20gXCIuL2NyZWF0ZURvbWFpbkhvb2tcIjtcblxuZXhwb3J0IGNvbnN0IHVzZUFkZHJlc3NMb2FucyA9IGNyZWF0ZURvbWFpbkhvb2s8XG4gIFJlcXVlc3RQYXlsb2FkLFxuICBSZXNwb25zZURhdGEsXG4gIHR5cGVvZiBuYW1lc3BhY2UsXG4gIHR5cGVvZiBzY29wZVxuPih7XG4gIG5hbWVzcGFjZSxcbiAgc2NvcGUsXG4gIG1lcmdlU3RyYXRlZ3ksXG59KTtcbiIsImltcG9ydCB0eXBlIHsgUmVxdWVzdFBheWxvYWQsIFJlc3BvbnNlRGF0YSB9IGZyb20gXCIuLi8uLi9kb21haW5zL2Fzc2V0c0luZm9cIjtcbmltcG9ydCB7XG4gIG5hbWVzcGFjZSxcbiAgc2NvcGUsXG4gIG1lcmdlU3RyYXRlZ3ksXG4gIGdldElkLFxufSBmcm9tIFwiLi4vLi4vZG9tYWlucy9hc3NldHNJbmZvXCI7XG5pbXBvcnQgeyBjcmVhdGVEb21haW5Ib29rIH0gZnJvbSBcIi4vY3JlYXRlRG9tYWluSG9va1wiO1xuXG5leHBvcnQgY29uc3QgdXNlQXNzZXRzSW5mbyA9IGNyZWF0ZURvbWFpbkhvb2s8XG4gIFJlcXVlc3RQYXlsb2FkLFxuICBSZXNwb25zZURhdGEsXG4gIHR5cGVvZiBuYW1lc3BhY2UsXG4gIHR5cGVvZiBzY29wZVxuPih7XG4gIG5hbWVzcGFjZSxcbiAgc2NvcGUsXG4gIGdldElkLFxuICBtZXJnZVN0cmF0ZWd5LFxufSk7XG4iLCJpbXBvcnQgdHlwZSB7IFJlcXVlc3RQYXlsb2FkLCBSZXNwb25zZURhdGEgfSBmcm9tIFwiLi4vLi4vZG9tYWlucy9hc3NldHNQcmljZXNcIjtcbmltcG9ydCB7IG5hbWVzcGFjZSwgc2NvcGUsIGdldElkLCB2ZXJpZnlGbiB9IGZyb20gXCIuLi8uLi9kb21haW5zL2Fzc2V0c1ByaWNlc1wiO1xuaW1wb3J0IHsgY3JlYXRlRG9tYWluSG9vayB9IGZyb20gXCIuL2NyZWF0ZURvbWFpbkhvb2tcIjtcblxuZXhwb3J0IGNvbnN0IHVzZUFzc2V0c1ByaWNlcyA9IGNyZWF0ZURvbWFpbkhvb2s8XG4gIFJlcXVlc3RQYXlsb2FkLFxuICBSZXNwb25zZURhdGEsXG4gIHR5cGVvZiBuYW1lc3BhY2UsXG4gIHR5cGVvZiBzY29wZVxuPih7XG4gIG5hbWVzcGFjZSxcbiAgc2NvcGUsXG4gIGdldElkLFxuICB2ZXJpZnlGbixcbn0pO1xuIiwiaW1wb3J0IHR5cGUge1xuICBSZXF1ZXN0UGF5bG9hZCxcbiAgUmVzcG9uc2VEYXRhLFxufSBmcm9tIFwiLi4vLi4vZG9tYWlucy9hc3NldHNGdWxsSW5mb1wiO1xuaW1wb3J0IHsgbmFtZXNwYWNlLCBzY29wZSwgbWVyZ2VTdHJhdGVneSB9IGZyb20gXCIuLi8uLi9kb21haW5zL2Fzc2V0c0Z1bGxJbmZvXCI7XG5pbXBvcnQgeyBjcmVhdGVEb21haW5Ib29rIH0gZnJvbSBcIi4vY3JlYXRlRG9tYWluSG9va1wiO1xuXG5leHBvcnQgY29uc3QgdXNlQXNzZXRzRnVsbEluZm8gPSBjcmVhdGVEb21haW5Ib29rPFxuICBSZXF1ZXN0UGF5bG9hZCxcbiAgUmVzcG9uc2VEYXRhLFxuICB0eXBlb2YgbmFtZXNwYWNlLFxuICB0eXBlb2Ygc2NvcGVcbj4oe1xuICBuYW1lc3BhY2UsXG4gIHNjb3BlLFxuICBtZXJnZVN0cmF0ZWd5LFxufSk7XG4iLCJpbXBvcnQgeyBjcmVhdGVEb21haW5Ib29rIH0gZnJvbSBcIi4vY3JlYXRlRG9tYWluSG9va1wiO1xuaW1wb3J0IHtcbiAgUmVxdWVzdFBheWxvYWQsXG4gIFJlc3BvbnNlRGF0YSxcbiAgbmFtZXNwYWNlLFxuICBzY29wZSxcbn0gZnJvbSBcIi4uLy4uL2RvbWFpbnMvYWRkcmVzc0NoYXJ0c1wiO1xuXG5leHBvcnQgY29uc3QgdXNlQWRkcmVzc0NoYXJ0cyA9IGNyZWF0ZURvbWFpbkhvb2s8XG4gIFJlcXVlc3RQYXlsb2FkLFxuICBSZXNwb25zZURhdGEsXG4gIHR5cGVvZiBuYW1lc3BhY2UsXG4gIHR5cGVvZiBzY29wZVxuPih7XG4gIG5hbWVzcGFjZSxcbiAgc2NvcGUsXG59KTtcbiIsImltcG9ydCB7IGNyZWF0ZURvbWFpbkhvb2sgfSBmcm9tIFwiLi9jcmVhdGVEb21haW5Ib29rXCI7XG5pbXBvcnQge1xuICBSZXF1ZXN0UGF5bG9hZCxcbiAgUmVzcG9uc2VEYXRhLFxuICBuYW1lc3BhY2UsXG4gIHNjb3BlLFxufSBmcm9tIFwiLi4vLi4vZG9tYWlucy9hZGRyZXNzUG9zaXRpb25zXCI7XG5cbmV4cG9ydCBjb25zdCB1c2VBZGRyZXNzUG9zaXRpb25zID0gY3JlYXRlRG9tYWluSG9vazxcbiAgUmVxdWVzdFBheWxvYWQsXG4gIFJlc3BvbnNlRGF0YSxcbiAgdHlwZW9mIG5hbWVzcGFjZSxcbiAgdHlwZW9mIHNjb3BlXG4+KHtcbiAgbmFtZXNwYWNlLFxuICBzY29wZSxcbn0pO1xuIiwiaW1wb3J0IHsgY3JlYXRlRG9tYWluSG9vayB9IGZyb20gXCIuL2NyZWF0ZURvbWFpbkhvb2tcIjtcbmltcG9ydCB7XG4gIFJlcXVlc3RQYXlsb2FkLFxuICBSZXNwb25zZURhdGEsXG4gIG5hbWVzcGFjZSxcbiAgc2NvcGUsXG59IGZyb20gXCIuLi8uLi9kb21haW5zL2Fzc2V0c0NoYXJ0c1wiO1xuXG5leHBvcnQgY29uc3QgdXNlQXNzZXRzQ2hhcnRzID0gY3JlYXRlRG9tYWluSG9vazxcbiAgUmVxdWVzdFBheWxvYWQsXG4gIFJlc3BvbnNlRGF0YSxcbiAgdHlwZW9mIG5hbWVzcGFjZSxcbiAgdHlwZW9mIHNjb3BlXG4+KHtcbiAgbmFtZXNwYWNlLFxuICBzY29wZSxcbn0pO1xuIiwiaW1wb3J0IHsgUGF5bG9hZCwgbmFtZXNwYWNlLCBzY29wZSB9IGZyb20gXCIuLi8uLi9kb21haW5zL2FkZHJlc3NQb3J0Zm9saW9cIjtcbmltcG9ydCB0eXBlIHsgUG9ydGZvbGlvIH0gZnJvbSBcIi4uLy4uL2VudGl0aWVzL1BvcnRmb2xpb1wiO1xuaW1wb3J0IHsgY3JlYXRlRG9tYWluSG9vayB9IGZyb20gXCIuL2NyZWF0ZURvbWFpbkhvb2tcIjtcblxuZXhwb3J0IGNvbnN0IHVzZUFkZHJlc3NQb3J0Zm9saW8gPSBjcmVhdGVEb21haW5Ib29rPFxuICBQYXlsb2FkLFxuICBQb3J0Zm9saW8sXG4gIHR5cGVvZiBuYW1lc3BhY2UsXG4gIHR5cGVvZiBzY29wZVxuPih7XG4gIG5hbWVzcGFjZSxcbiAgc2NvcGUsXG59KTtcbiIsImltcG9ydCB7IG5hbWVzcGFjZSwgc2NvcGUgfSBmcm9tIFwiLi4vLi4vZG9tYWlucy9hZGRyZXNzUG9ydGZvbGlvRGVjb21wb3NpdGlvblwiO1xuaW1wb3J0IHR5cGUgeyBQYXlsb2FkIH0gZnJvbSBcIi4uLy4uL2RvbWFpbnMvYWRkcmVzc1BvcnRmb2xpb0RlY29tcG9zaXRpb25cIjtcbmltcG9ydCB7IFBvcnRmb2xpb0RlY29tcG9zaXRpb24gfSBmcm9tIFwiLi4vLi4vZW50aXRpZXMvUG9ydGZvbGlvXCI7XG5pbXBvcnQgeyBjcmVhdGVEb21haW5Ib29rIH0gZnJvbSBcIi4vY3JlYXRlRG9tYWluSG9va1wiO1xuXG5leHBvcnQgY29uc3QgdXNlQWRkcmVzc1BvcnRmb2xpb0RlY29tcG9zaXRpb24gPSBjcmVhdGVEb21haW5Ib29rPFxuICBQYXlsb2FkLFxuICBQb3J0Zm9saW9EZWNvbXBvc2l0aW9uLFxuICB0eXBlb2YgbmFtZXNwYWNlLFxuICB0eXBlb2Ygc2NvcGVcbj4oe1xuICBuYW1lc3BhY2UsXG4gIHNjb3BlLFxufSk7XG4iLCJpbXBvcnQgeyBTdG9yZSB9IGZyb20gJ3N0b3JlLXVuaXQnO1xuaW1wb3J0IHsgTmV0d29ya3MgfSBmcm9tICcuL05ldHdvcmtzJztcbmltcG9ydCB7IGdldCBhcyBnZXROZXR3b3JrcyB9IGZyb20gJy4vbmV0d29ya3MtYXBpJztcblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgbmV0d29ya3M6IE5ldHdvcmtzIHwgbnVsbDtcbn1cblxuY2xhc3MgTmV0d29ya3NTdG9yZSBleHRlbmRzIFN0b3JlPFN0YXRlPiB7XG4gIHByaXZhdGUgbG9hZGVyUHJvbWlzZTogUHJvbWlzZTxOZXR3b3Jrcz4gfCBudWxsID0gbnVsbDtcblxuICBsb2FkKCkge1xuICAgIGlmICh0aGlzLmxvYWRlclByb21pc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmxvYWRlclByb21pc2U7XG4gICAgfVxuICAgIHRoaXMubG9hZGVyUHJvbWlzZSA9IGdldE5ldHdvcmtzKCkudGhlbigodmFsdWUpID0+IHtcbiAgICAgIGNvbnN0IG5ldHdvcmtzID0gbmV3IE5ldHdvcmtzKHsgbmV0d29ya3M6IHZhbHVlIH0pO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IG5ldHdvcmtzIH0pO1xuICAgICAgcmV0dXJuIG5ldHdvcmtzO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmxvYWRlclByb21pc2U7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IG5ldHdvcmtzU3RvcmUgPSBuZXcgTmV0d29ya3NTdG9yZSh7IG5ldHdvcmtzOiBudWxsIH0pO1xuIiwiaW1wb3J0IHsgY2xpZW50IH0gZnJvbSAnZGVmaS1zZGsnO1xuaW1wb3J0IHR5cGUgeyBOZXR3b3JrQ29uZmlnIH0gZnJvbSAnLi9OZXR3b3JrQ29uZmlnJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldCgpOiBQcm9taXNlPE5ldHdvcmtDb25maWdbXT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBjbGllbnQuY2FjaGVkU3Vic2NyaWJlPE5ldHdvcmtDb25maWdbXSwgJ2NoYWlucycsICdpbmZvJz4oe1xuICAgICAgbmFtZXNwYWNlOiAnY2hhaW5zJyxcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgc2NvcGU6IFsnaW5mbyddLFxuICAgICAgICBwYXlsb2FkOiB7fSxcbiAgICAgIH0sXG4gICAgICBvbkRhdGE6ICh7IHZhbHVlIH0pID0+IHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IGJyb3dzZXIgZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsJztcbmltcG9ydCB7IFBvcnRNZXNzYWdlQ2hhbm5lbCB9IGZyb20gJ3NyYy9zaGFyZWQvUG9ydE1lc3NhZ2VDaGFubmVsJztcbmltcG9ydCB0eXBlIHsgV2FsbGV0IH0gZnJvbSAnc3JjL3NoYXJlZC90eXBlcy9XYWxsZXQnO1xuaW1wb3J0IHR5cGUgeyBBY2NvdW50UHVibGljUlBDIH0gZnJvbSAnc3JjL3NoYXJlZC90eXBlcy9BY2NvdW50UHVibGljUlBDJztcbmltcG9ydCB0eXBlIHsgTWVtb3J5Q2FjaGVSUEMgfSBmcm9tICdzcmMvc2hhcmVkL3R5cGVzL01lbW9yeUNhY2hlUlBDJztcbmltcG9ydCB7IFVzZXJSZWplY3RlZCB9IGZyb20gJ3NyYy9zaGFyZWQvZXJyb3JzL2Vycm9ycyc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG50eXBlIFNvbWVNZXRob2QgPSAoLi4uYXJnczogYW55KSA9PiBQcm9taXNlPGFueT47XG5cbnR5cGUgUlBDUG9ydDxJbXBsZW1lbnRhdGlvbj4gPSBPbWl0PFBvcnRNZXNzYWdlQ2hhbm5lbCwgJ3JlcXVlc3QnPiAmIHtcbiAgcmVxdWVzdDxcbiAgICBUIGV4dGVuZHMgc3RyaW5nLFxuICAgIE1ldGhvZCA9IFQgZXh0ZW5kcyBrZXlvZiBJbXBsZW1lbnRhdGlvblxuICAgICAgPyBJbXBsZW1lbnRhdGlvbltUXSBleHRlbmRzIFNvbWVNZXRob2RcbiAgICAgICAgPyBJbXBsZW1lbnRhdGlvbltUXVxuICAgICAgICA6IG5ldmVyXG4gICAgICA6IG5ldmVyXG4gID4oXG4gICAgbWV0aG9kOiBNZXRob2QgZXh0ZW5kcyBTb21lTWV0aG9kID8gVCA6IG5ldmVyLFxuICAgIC4uLnBhcmFtczogTWV0aG9kIGV4dGVuZHMgU29tZU1ldGhvZFxuICAgICAgPyBPbWl0PFBhcmFtZXRlcnM8TWV0aG9kPlswXSwgJ2NvbnRleHQnPiBleHRlbmRzIHtcbiAgICAgICAgICBwYXJhbXM6IHVua25vd247XG4gICAgICAgIH1cbiAgICAgICAgPyBbXG4gICAgICAgICAgICBwYXJhbXM6IE9taXQ8UGFyYW1ldGVyczxNZXRob2Q+WzBdLCAnY29udGV4dCc+WydwYXJhbXMnXSxcbiAgICAgICAgICAgIGlkPzogbnVtYmVyXG4gICAgICAgICAgXVxuICAgICAgICA6IFtwYXJhbXM/OiB1bmRlZmluZWQsIGlkPzogbnVtYmVyXVxuICAgICAgOiBbbmV2ZXJdXG4gICk6IE1ldGhvZCBleHRlbmRzIFNvbWVNZXRob2QgPyBSZXR1cm5UeXBlPE1ldGhvZD4gOiBuZXZlcjtcbn07XG5cbmV4cG9ydCBjb25zdCB3YWxsZXRQb3J0ID0gbmV3IFBvcnRNZXNzYWdlQ2hhbm5lbCh7XG4gIG5hbWU6IGAke2Jyb3dzZXIucnVudGltZS5pZH0vd2FsbGV0YCxcbn0pIGFzIFJQQ1BvcnQ8V2FsbGV0PjtcblxuZXhwb3J0IGNvbnN0IGFjY291bnRQdWJsaWNSUENQb3J0ID0gbmV3IFBvcnRNZXNzYWdlQ2hhbm5lbCh7XG4gIG5hbWU6ICdhY2NvdW50UHVibGljUlBDJyxcbn0pIGFzIFJQQ1BvcnQ8QWNjb3VudFB1YmxpY1JQQz47XG5cbmV4cG9ydCBjb25zdCBtZW1vcnlDYWNoZVJQQ1BvcnQgPSBuZXcgUG9ydE1lc3NhZ2VDaGFubmVsKHtcbiAgbmFtZTogJ21lbW9yeUNhY2hlUlBDJyxcbn0pIGFzIFJQQ1BvcnQ8TWVtb3J5Q2FjaGVSUEM+O1xuXG5jbGFzcyBXaW5kb3dQb3J0IGV4dGVuZHMgUG9ydE1lc3NhZ2VDaGFubmVsIHtcbiAgY29uZmlybTxUPih3aW5kb3dJZDogc3RyaW5nLCByZXN1bHQ/OiBUKSB7XG4gICAgcmV0dXJuIHRoaXMucG9ydC5wb3N0TWVzc2FnZSh7XG4gICAgICBpZDogd2luZG93SWQsXG4gICAgICByZXN1bHQsXG4gICAgfSk7XG4gIH1cblxuICByZWplY3Qod2luZG93SWQ6IHN0cmluZykge1xuICAgIHRoaXMucG9ydC5wb3N0TWVzc2FnZSh7XG4gICAgICBpZDogd2luZG93SWQsXG4gICAgICBlcnJvcjogbmV3IFVzZXJSZWplY3RlZCgpLFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCB3aW5kb3dQb3J0ID0gbmV3IFdpbmRvd1BvcnQoeyBuYW1lOiAnd2luZG93JyB9KTtcblxuT2JqZWN0LmFzc2lnbih3aW5kb3csIHsgd2FsbGV0UG9ydCwgYWNjb3VudFB1YmxpY1JQQ1BvcnQgfSk7XG4iLG51bGwsImltcG9ydCB7XG4gIGZvcm1hdEpzb25ScGNSZXF1ZXN0LFxuICBpc0pzb25ScGNQYXlsb2FkLFxuICBpc0pzb25ScGNSZXNwb25zZSxcbiAgaXNKc29uUnBjUmVzdWx0LFxufSBmcm9tICdAanNvbi1ycGMtdG9vbHMvdXRpbHMnO1xuaW1wb3J0IHR5cGUgeyBKc29uUnBjUGF5bG9hZCB9IGZyb20gJ0Bqc29uLXJwYy10b29scy91dGlscyc7XG5cbmV4cG9ydCBjbGFzcyBQb3J0TWVzc2FnZUNoYW5uZWwge1xuICBwb3J0OiBjaHJvbWUucnVudGltZS5Qb3J0O1xuXG4gIGNvbnN0cnVjdG9yKHsgbmFtZSB9OiB7IG5hbWU6IHN0cmluZyB9KSB7XG4gICAgdGhpcy5wb3J0ID0gY2hyb21lLnJ1bnRpbWUuY29ubmVjdCh7IG5hbWUgfSk7XG4gICAgLy8gdGhpcy5wb3J0Lm9uTWVzc2FnZS5hZGRMaXN0ZW5lcihjb25zb2xlLmxvZyk7XG4gIH1cblxuICByZXF1ZXN0PE1ldGhvZCBleHRlbmRzIHN0cmluZywgUGFyYW1zLCBSZXN1bHQ+KFxuICAgIG1ldGhvZDogTWV0aG9kLFxuICAgIHBhcmFtczogUGFyYW1zLFxuICAgIGlkPzogbnVtYmVyXG4gICkge1xuICAgIGNvbnN0IHBheWxvYWQgPSBmb3JtYXRKc29uUnBjUmVxdWVzdChtZXRob2QsIHBhcmFtcywgaWQpO1xuICAgIHRoaXMucG9ydC5wb3N0TWVzc2FnZShwYXlsb2FkKTtcbiAgICByZXR1cm4gdGhpcy5nZXRQcm9taXNlPFJlc3VsdD4ocGF5bG9hZC5pZCk7XG4gIH1cblxuICBwcml2YXRlIGdldFByb21pc2U8UmVzdWx0PihpZDogbnVtYmVyKTogUHJvbWlzZTxSZXN1bHQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgaGFuZGxlciA9IChtc2c6IEpzb25ScGNQYXlsb2FkIHwgdW5rbm93bikgPT4ge1xuICAgICAgICBpZiAoaXNKc29uUnBjUGF5bG9hZChtc2cpICYmIGlzSnNvblJwY1Jlc3BvbnNlKG1zZykpIHtcbiAgICAgICAgICBpZiAobXNnLmlkID09PSBpZCkge1xuICAgICAgICAgICAgaWYgKGlzSnNvblJwY1Jlc3VsdChtc2cpKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUobXNnLnJlc3VsdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWplY3QobXNnLmVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucG9ydC5vbk1lc3NhZ2UucmVtb3ZlTGlzdGVuZXIoaGFuZGxlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdGhpcy5wb3J0Lm9uTWVzc2FnZS5hZGRMaXN0ZW5lcihoYW5kbGVyKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgU1RBTkRBUkRfRVJST1JfTUFQIH0gZnJvbSAnQGpzb24tcnBjLXRvb2xzL3V0aWxzJztcblxuY2xhc3MgRXJyb3JXaXRoRW51bWVyYWJsZU1lc3NhZ2UgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbWVzc2FnZScsIHtcbiAgICAgIHZhbHVlOiBtZXNzYWdlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSW52YWxpZFBhcmFtcyBleHRlbmRzIEVycm9yV2l0aEVudW1lcmFibGVNZXNzYWdlIHtcbiAgY29kZSA9IFNUQU5EQVJEX0VSUk9SX01BUC5JTlZBTElEX1BBUkFNUy5jb2RlO1xuXG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UgPSBTVEFOREFSRF9FUlJPUl9NQVAuSU5WQUxJRF9QQVJBTVMubWVzc2FnZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBPcmlnaW5Ob3RBbGxvd2VkIGV4dGVuZHMgRXJyb3JXaXRoRW51bWVyYWJsZU1lc3NhZ2Uge1xuICBjb2RlID0gLTMyMDExO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIG1lc3NhZ2UgPSAnT3JpZ2luIE5vdCBBbGxvd2VkOiBUcnkgY2FsbGluZyBldGhfcmVxdWVzdEFjY291bnRzIGZpcnN0LidcbiAgKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVzZXJSZWplY3RlZCBleHRlbmRzIEVycm9yV2l0aEVudW1lcmFibGVNZXNzYWdlIHtcbiAgY29kZSA9IC0zMjAxMDtcblxuICBjb25zdHJ1Y3RvcihtZXNzYWdlID0gJ1JlamVjdGVkIGJ5IFVzZXInKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVzZXJSZWplY3RlZFR4U2lnbmF0dXJlIGV4dGVuZHMgRXJyb3JXaXRoRW51bWVyYWJsZU1lc3NhZ2Uge1xuICBjb2RlID0gNDAwMTtcblxuICBjb25zdHJ1Y3RvcihtZXNzYWdlID0gJ1R4IFNpZ25hdHVyZTogVXNlciBkZW5pZWQgdHJhbnNhY3Rpb24gc2lnbmF0dXJlLicpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTWV0aG9kTm90SW1wbGVtZW50ZWQgZXh0ZW5kcyBFcnJvcldpdGhFbnVtZXJhYmxlTWVzc2FnZSB7XG4gIGNvZGUgPSAtMzI2MDE7XG5cbiAgY29uc3RydWN0b3IobWVzc2FnZSA9ICdNZXRob2Qgbm90IGltcGxlbWVudGVkJykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZWNvcmROb3RGb3VuZCBleHRlbmRzIEVycm9yV2l0aEVudW1lcmFibGVNZXNzYWdlIHtcbiAgY29kZSA9IC0zMjYwMjtcbiAgY29uc3RydWN0b3IobWVzc2FnZSA9ICdSZWNvcmQgbm90IGZvdW5kJykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTZXNzaW9uRXhwaXJlZCBleHRlbmRzIEVycm9yV2l0aEVudW1lcmFibGVNZXNzYWdlIHtcbiAgLy8gMjExMjEwTiBpcyB6ZXJpb24gaW4gbDMzdFxuICBjb2RlID0gMjMxMjEwMztcblxuICBjb25zdHJ1Y3RvcihtZXNzYWdlID0gJ1Nlc3Npb24gZXhwaXJlZCcpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2xpZW50IH0gZnJvbSAnZGVmaS1zZGsnO1xuaW1wb3J0IHsgREVGSV9TREtfQVBJX1VSTCwgREVGSV9TREtfQVBJX1RPS0VOIH0gZnJvbSAnc3JjL2Vudi9jb25maWcnO1xuaW1wb3J0IHsgQmFja2dyb3VuZE1lbW9yeUNhY2hlIH0gZnJvbSAnLi9CYWNrZ3JvdW5kTWVtb3J5Q2FjaGUnO1xuXG5leHBvcnQgY29uc3QgYmFja2dyb3VuZENhY2hlID0gbmV3IEJhY2tncm91bmRNZW1vcnlDYWNoZSgpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29uZmlndXJlVUlDbGllbnQoKSB7XG4gIC8vIFRoaXMgY2xpZW50IGluc3RhbmNlIHVzZXMgYmFja2dyb3VuZCBzY3JpcHQncyBtZW1vcnkgYXMgY2FjaGVcbiAgYmFja2dyb3VuZENhY2hlLmxvYWQoKS50aGVuKCgpID0+IHtcbiAgICBpZiAoIURFRklfU0RLX0FQSV9VUkwgfHwgIURFRklfU0RLX0FQSV9UT0tFTikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnREVGSV9TREtfQVBJX1VSTCBhbmQgREVGSV9TREtfQVBJX1RPS0VOIG11c3QgYmUgZGVmaW5lZCBpbiBFTlYnXG4gICAgICApO1xuICAgIH1cbiAgICBjbGllbnQuY29uZmlndXJlKHtcbiAgICAgIGdldENhY2hlS2V5OiAoeyBrZXkgfSkgPT4ga2V5LFxuICAgICAgY2FjaGU6IGJhY2tncm91bmRDYWNoZSxcbiAgICAgIHVybDogREVGSV9TREtfQVBJX1VSTCxcbiAgICAgIGFwaVRva2VuOiBERUZJX1NES19BUElfVE9LRU4sXG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlQmFja2dyb3VuZENsaWVudCgpIHtcbiAgaWYgKCFERUZJX1NES19BUElfVVJMIHx8ICFERUZJX1NES19BUElfVE9LRU4pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnREVGSV9TREtfQVBJX1VSTCBhbmQgREVGSV9TREtfQVBJX1RPS0VOIG11c3QgYmUgZGVmaW5lZCBpbiBFTlYnXG4gICAgKTtcbiAgfVxuICBjbGllbnQuY29uZmlndXJlKHtcbiAgICB1cmw6IERFRklfU0RLX0FQSV9VUkwsXG4gICAgYXBpVG9rZW46IERFRklfU0RLX0FQSV9UT0tFTixcbiAgfSk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJlcXVlc3RDYWNoZSB9IGZyb20gJ2RlZmktc2RrJztcbmltcG9ydCB7IERhdGFTdGF0dXMsIEVudHJ5U3RvcmUgfSBmcm9tICdkZWZpLXNkayc7XG5pbXBvcnQgeyBtZW1vcnlDYWNoZVJQQ1BvcnQgfSBmcm9tICdzcmMvdWkvc2hhcmVkL2NoYW5uZWxzJztcblxudHlwZSBLZXkgPSBzdHJpbmcgfCBudW1iZXI7XG5cbmV4cG9ydCBjbGFzcyBCYWNrZ3JvdW5kTWVtb3J5Q2FjaGUgaW1wbGVtZW50cyBSZXF1ZXN0Q2FjaGU8RW50cnlTdG9yZT4ge1xuICBtYXA6IE1hcDxLZXksIEVudHJ5U3RvcmU+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubWFwID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDaGFuZ2VIYW5kbGVyKGtleTogS2V5LCBlbnRyeVN0b3JlOiBFbnRyeVN0b3JlKSB7XG4gICAgcmV0dXJuICgpOiB2b2lkID0+IHtcbiAgICAgIHRoaXMuc2FmZVdyaXRlRW50cnkoa2V5LCBlbnRyeVN0b3JlKTtcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBzYWZlV3JpdGVFbnRyeShrZXk6IEtleSwgZW50cnlTdG9yZTogRW50cnlTdG9yZSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmIChlbnRyeVN0b3JlLmdldFN0YXRlKCkuc3RhdHVzID09PSBEYXRhU3RhdHVzLm9rKSB7XG4gICAgICBtZW1vcnlDYWNoZVJQQ1BvcnQucmVxdWVzdCgnc2V0JywgeyBrZXksIHZhbHVlOiBlbnRyeVN0b3JlLmdldFN0YXRlKCkgfSk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIGdldChrZXk6IEtleSk6IEVudHJ5U3RvcmUgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KGtleSkgfHwgbnVsbDtcbiAgfVxuXG4gIHNldChrZXk6IEtleSwgZW50cnlTdG9yZTogRW50cnlTdG9yZSkge1xuICAgIHRoaXMubWFwLnNldChrZXksIGVudHJ5U3RvcmUpO1xuICAgIGVudHJ5U3RvcmUub24oJ2NoYW5nZScsIHRoaXMuZ2V0Q2hhbmdlSGFuZGxlcihrZXksIGVudHJ5U3RvcmUpKTtcbiAgICB0aGlzLnNhZmVXcml0ZUVudHJ5KGtleSwgZW50cnlTdG9yZSk7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICB0aGlzLm1hcCA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIHJlbW92ZSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgYXN5bmMgbG9hZCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBtZW1vcnlDYWNoZVJQQ1BvcnQucmVxdWVzdCgnZ2V0QWxsJykudGhlbigoY2FjaGVPYmplY3QpID0+IHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIGNhY2hlT2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gY2FjaGVPYmplY3Rba2V5XTtcbiAgICAgICAgdmFsdWUuaXNTdGFsZSA9IHRydWU7XG4gICAgICAgIHZhbHVlLmhhc1N1YnNjcmliZXJzID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGVudHJ5U3RvcmUgPSBuZXcgRW50cnlTdG9yZSh2YWx1ZSk7XG4gICAgICAgIGVudHJ5U3RvcmUub24oJ2NoYW5nZScsIHRoaXMuZ2V0Q2hhbmdlSGFuZGxlcihrZXksIGVudHJ5U3RvcmUpKTtcbiAgICAgICAgdGhpcy5tYXAuc2V0KGtleSwgZW50cnlTdG9yZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCBicm93c2VyIGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbCc7XG5pbXBvcnQgeyBnZXQsIHNldCB9IGZyb20gJ3NyYy9iYWNrZ3JvdW5kL3dlYmFwaXMvc3RvcmFnZSc7XG5cbmNvbnN0IFNUT1JBR0VfVkVSU0lPTiA9IDAuMjtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0Q3VycmVudFZlcnNpb24oKSB7XG4gIGNvbnN0IHNhdmVkID0gYXdhaXQgZ2V0PG51bWJlciB8IHN0cmluZz4oJ1NUT1JBR0VfVkVSU0lPTicpO1xuICByZXR1cm4gc2F2ZWQgPz8gJ25vLXZlcnNpb24nO1xufVxuXG5jb25zdCB1cGdyYWRlczogUmVjb3JkPHN0cmluZyB8IG51bWJlciwgKCkgPT4gUHJvbWlzZTx2b2lkPj4gPSB7XG4gICduby12ZXJzaW9uJzogYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IHNldCgnU1RPUkFHRV9WRVJTSU9OJywgJ25vLXZlcnNpb24nKTtcbiAgICAvLyBBIHN0cmF0ZWd5IHRvIHdhaXQgZm9yIHNvbWUgZXZlbnQgaXMgcG9zc2libGUgaGVyZSxcbiAgICAvLyBlLmcuIHdlIGNvdWxkIHdhaXQgZm9yIGFuIHVwZGF0ZSB0byBTVE9SQUdFX1ZFUlNJT04gc3RvcmFnZSBrZXlcbiAgICAvLyBhbmQgdGhlbiBjb250aW51ZVxuICB9LFxufTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZXBhcmVTdG9yYWdlKCkge1xuICBjb25zdCBoYXNTb21lRGF0YSA9IEJvb2xlYW4oYXdhaXQgZ2V0KCdjdXJyZW50VXNlcicpKTtcbiAgY29uc3Qgc3RvcmFnZVZlcnNpb24gPSBhd2FpdCBnZXRDdXJyZW50VmVyc2lvbigpO1xuICBpZiAoIWhhc1NvbWVEYXRhKSB7XG4gICAgc2V0KCdTVE9SQUdFX1ZFUlNJT04nLCBTVE9SQUdFX1ZFUlNJT04pO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmIChzdG9yYWdlVmVyc2lvbiAhPT0gU1RPUkFHRV9WRVJTSU9OKSB7XG4gICAgaWYgKHN0b3JhZ2VWZXJzaW9uIGluIHVwZ3JhZGVzKSB7XG4gICAgICAvLyBUT0RPOiBydW4gdXBncmFkZXMgaW4gc2VxdWVuY2UgZm9yIGVhY2ggdmVyc2lvblxuICAgICAgcmV0dXJuIHVwZ3JhZGVzW3N0b3JhZ2VWZXJzaW9uXSgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJ29rJztcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrVmVyc2lvbigpIHtcbiAgY29uc3Qgc3RvcmFnZVZlcnNpb24gPSBhd2FpdCBnZXRDdXJyZW50VmVyc2lvbigpO1xuICBpZiAoc3RvcmFnZVZlcnNpb24gIT09IFNUT1JBR0VfVkVSU0lPTikge1xuICAgIHJldHVybiB7XG4gICAgICBzdG9yYWdlVmVyc2lvbjoge1xuICAgICAgICBtaXNtYXRjaDogdHJ1ZSxcbiAgICAgICAgLy8gYWN0aW9uOiBzdG9yYWdlVmVyc2lvbiA9PT0gJ25vLXZlcnNpb24nID8gJ2NsZWFyLXN0b3JhZ2UnIDogdW5kZWZpbmVkLFxuICAgICAgICBhY3Rpb246ICdjbGVhci1zdG9yYWdlJyxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXJhc2VBbmRVcGRhdGVUb0xhdGVzdFZlcnNpb24oKSB7XG4gIGF3YWl0IGJyb3dzZXIuc3RvcmFnZS5sb2NhbC5jbGVhcigpO1xuICBhd2FpdCBzZXQoJ1NUT1JBR0VfVkVSU0lPTicsIFNUT1JBR0VfVkVSU0lPTik7XG59XG4iLCJpbXBvcnQgYnJvd3NlciBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0PFQ+KHByb3A6IHN0cmluZykge1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBicm93c2VyLnN0b3JhZ2UubG9jYWwuZ2V0KHByb3ApO1xuICByZXR1cm4gcmVzdWx0Py5bcHJvcF0gYXMgVCB8IHVuZGVmaW5lZDtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXQocHJvcDogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gIGF3YWl0IGJyb3dzZXIuc3RvcmFnZS5sb2NhbC5zZXQoeyBbcHJvcF06IHZhbHVlIH0pO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlbW92ZShwcm9wOiBzdHJpbmcpIHtcbiAgYXdhaXQgYnJvd3Nlci5zdG9yYWdlLmxvY2FsLnJlbW92ZShwcm9wKTtcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnID8gUmVmbGVjdCA6IG51bGxcbnZhciBSZWZsZWN0QXBwbHkgPSBSICYmIHR5cGVvZiBSLmFwcGx5ID09PSAnZnVuY3Rpb24nXG4gID8gUi5hcHBseVxuICA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseSh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpO1xuICB9XG5cbnZhciBSZWZsZWN0T3duS2V5c1xuaWYgKFIgJiYgdHlwZW9mIFIub3duS2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWZsZWN0T3duS2V5cyA9IFIub3duS2V5c1xufSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldClcbiAgICAgIC5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKTtcbiAgfTtcbn0gZWxzZSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFByb2Nlc3NFbWl0V2FybmluZyh3YXJuaW5nKSB7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2FybikgY29uc29sZS53YXJuKHdhcm5pbmcpO1xufVxuXG52YXIgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gTnVtYmVySXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudEVtaXR0ZXIuaW5pdC5jYWxsKHRoaXMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5tb2R1bGUuZXhwb3J0cy5vbmNlID0gb25jZTtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHNDb3VudCA9IDA7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbnZhciBkZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbmZ1bmN0aW9uIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEVtaXR0ZXIsICdkZWZhdWx0TWF4TGlzdGVuZXJzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWF4TGlzdGVuZXJzO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnbnVtYmVyJyB8fCBhcmcgPCAwIHx8IE51bWJlcklzTmFOKGFyZykpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIGFyZyArICcuJyk7XG4gICAgfVxuICAgIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSBhcmc7XG4gIH1cbn0pO1xuXG5FdmVudEVtaXR0ZXIuaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gIGlmICh0aGlzLl9ldmVudHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgdGhpcy5fZXZlbnRzID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50cykge1xuICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn07XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycyhuKSB7XG4gIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgbiA8IDAgfHwgTnVtYmVySXNOYU4obikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBuICsgJy4nKTtcbiAgfVxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIF9nZXRNYXhMaXN0ZW5lcnModGhhdCkge1xuICBpZiAodGhhdC5fbWF4TGlzdGVuZXJzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmdldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuIF9nZXRNYXhMaXN0ZW5lcnModGhpcyk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KHR5cGUpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICB2YXIgZG9FcnJvciA9ICh0eXBlID09PSAnZXJyb3InKTtcblxuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpXG4gICAgZG9FcnJvciA9IChkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PT0gdW5kZWZpbmVkKTtcbiAgZWxzZSBpZiAoIWRvRXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKGRvRXJyb3IpIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMClcbiAgICAgIGVyID0gYXJnc1swXTtcbiAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgLy8gTm90ZTogVGhlIGNvbW1lbnRzIG9uIHRoZSBgdGhyb3dgIGxpbmVzIGFyZSBpbnRlbnRpb25hbCwgdGhleSBzaG93XG4gICAgICAvLyB1cCBpbiBOb2RlJ3Mgb3V0cHV0IGlmIHRoaXMgcmVzdWx0cyBpbiBhbiB1bmhhbmRsZWQgZXhjZXB0aW9uLlxuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgfVxuICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmhhbmRsZWQgZXJyb3IuJyArIChlciA/ICcgKCcgKyBlci5tZXNzYWdlICsgJyknIDogJycpKTtcbiAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgIHRocm93IGVycjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgfVxuXG4gIHZhciBoYW5kbGVyID0gZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFJlZmxlY3RBcHBseShoYW5kbGVyLCB0aGlzLCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgUmVmbGVjdEFwcGx5KGxpc3RlbmVyc1tpXSwgdGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBwcmVwZW5kKSB7XG4gIHZhciBtO1xuICB2YXIgZXZlbnRzO1xuICB2YXIgZXhpc3Rpbmc7XG5cbiAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG5cbiAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0YXJnZXQuX2V2ZW50c0NvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgICBpZiAoZXZlbnRzLm5ld0xpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRhcmdldC5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gICAgICAvLyBSZS1hc3NpZ24gYGV2ZW50c2AgYmVjYXVzZSBhIG5ld0xpc3RlbmVyIGhhbmRsZXIgY291bGQgaGF2ZSBjYXVzZWQgdGhlXG4gICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0XG4gICAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgICB9XG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV07XG4gIH1cblxuICBpZiAoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPVxuICAgICAgICBwcmVwZW5kID8gW2xpc3RlbmVyLCBleGlzdGluZ10gOiBbZXhpc3RpbmcsIGxpc3RlbmVyXTtcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB9IGVsc2UgaWYgKHByZXBlbmQpIHtcbiAgICAgIGV4aXN0aW5nLnVuc2hpZnQobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleGlzdGluZy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICAgIG0gPSBfZ2V0TWF4TGlzdGVuZXJzKHRhcmdldCk7XG4gICAgaWYgKG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0gJiYgIWV4aXN0aW5nLndhcm5lZCkge1xuICAgICAgZXhpc3Rpbmcud2FybmVkID0gdHJ1ZTtcbiAgICAgIC8vIE5vIGVycm9yIGNvZGUgZm9yIHRoaXMgc2luY2UgaXQgaXMgYSBXYXJuaW5nXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIHZhciB3ID0gbmV3IEVycm9yKCdQb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZy5sZW5ndGggKyAnICcgKyBTdHJpbmcodHlwZSkgKyAnIGxpc3RlbmVycyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luY3JlYXNlIGxpbWl0Jyk7XG4gICAgICB3Lm5hbWUgPSAnTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nJztcbiAgICAgIHcuZW1pdHRlciA9IHRhcmdldDtcbiAgICAgIHcudHlwZSA9IHR5cGU7XG4gICAgICB3LmNvdW50ID0gZXhpc3RpbmcubGVuZ3RoO1xuICAgICAgUHJvY2Vzc0VtaXRXYXJuaW5nKHcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgdHJ1ZSk7XG4gICAgfTtcblxuZnVuY3Rpb24gb25jZVdyYXBwZXIoKSB7XG4gIGlmICghdGhpcy5maXJlZCkge1xuICAgIHRoaXMudGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHRoaXMudHlwZSwgdGhpcy53cmFwRm4pO1xuICAgIHRoaXMuZmlyZWQgPSB0cnVlO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCk7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuYXBwbHkodGhpcy50YXJnZXQsIGFyZ3VtZW50cyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX29uY2VXcmFwKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIHN0YXRlID0geyBmaXJlZDogZmFsc2UsIHdyYXBGbjogdW5kZWZpbmVkLCB0YXJnZXQ6IHRhcmdldCwgdHlwZTogdHlwZSwgbGlzdGVuZXI6IGxpc3RlbmVyIH07XG4gIHZhciB3cmFwcGVkID0gb25jZVdyYXBwZXIuYmluZChzdGF0ZSk7XG4gIHdyYXBwZWQubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgc3RhdGUud3JhcEZuID0gd3JhcHBlZDtcbiAgcmV0dXJuIHdyYXBwZWQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UodHlwZSwgbGlzdGVuZXIpIHtcbiAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIHRoaXMub24odHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kT25jZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICAgIHRoaXMucHJlcGVuZExpc3RlbmVyKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuLy8gRW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmIGFuZCBvbmx5IGlmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGlzdCwgZXZlbnRzLCBwb3NpdGlvbiwgaSwgb3JpZ2luYWxMaXN0ZW5lcjtcblxuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGxpc3QgPSBldmVudHNbdHlwZV07XG4gICAgICBpZiAobGlzdCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8IGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0Lmxpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwb3NpdGlvbiA9IC0xO1xuXG4gICAgICAgIGZvciAoaSA9IGxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHwgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsTGlzdGVuZXIgPSBsaXN0W2ldLmxpc3RlbmVyO1xuICAgICAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICBpZiAocG9zaXRpb24gPT09IDApXG4gICAgICAgICAgbGlzdC5zaGlmdCgpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzcGxpY2VPbmUobGlzdCwgcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKVxuICAgICAgICAgIGV2ZW50c1t0eXBlXSA9IGxpc3RbMF07XG5cbiAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBvcmlnaW5hbExpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMsIGV2ZW50cywgaTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGV2ZW50cyk7XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBsaXN0ZW5lcnMgPSBldmVudHNbdHlwZV07XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gTElGTyBvcmRlclxuICAgICAgICBmb3IgKGkgPSBsaXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuZnVuY3Rpb24gX2xpc3RlbmVycyh0YXJnZXQsIHR5cGUsIHVud3JhcCkge1xuICB2YXIgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcbiAgaWYgKGV2bGlzdGVuZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKVxuICAgIHJldHVybiB1bndyYXAgPyBbZXZsaXN0ZW5lci5saXN0ZW5lciB8fCBldmxpc3RlbmVyXSA6IFtldmxpc3RlbmVyXTtcblxuICByZXR1cm4gdW53cmFwID9cbiAgICB1bndyYXBMaXN0ZW5lcnMoZXZsaXN0ZW5lcikgOiBhcnJheUNsb25lKGV2bGlzdGVuZXIsIGV2bGlzdGVuZXIubGVuZ3RoKTtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCB0cnVlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmF3TGlzdGVuZXJzID0gZnVuY3Rpb24gcmF3TGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5saXN0ZW5lckNvdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGlzdGVuZXJDb3VudC5jYWxsKGVtaXR0ZXIsIHR5cGUpO1xuICB9XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBsaXN0ZW5lckNvdW50O1xuZnVuY3Rpb24gbGlzdGVuZXJDb3VudCh0eXBlKSB7XG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG5cbiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoZXZsaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHJldHVybiB0aGlzLl9ldmVudHNDb3VudCA+IDAgPyBSZWZsZWN0T3duS2V5cyh0aGlzLl9ldmVudHMpIDogW107XG59O1xuXG5mdW5jdGlvbiBhcnJheUNsb25lKGFyciwgbikge1xuICB2YXIgY29weSA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpXG4gICAgY29weVtpXSA9IGFycltpXTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKDsgaW5kZXggKyAxIDwgbGlzdC5sZW5ndGg7IGluZGV4KyspXG4gICAgbGlzdFtpbmRleF0gPSBsaXN0W2luZGV4ICsgMV07XG4gIGxpc3QucG9wKCk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHtcbiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIG9uY2UoZW1pdHRlciwgbmFtZSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGZ1bmN0aW9uIGVycm9yTGlzdGVuZXIoZXJyKSB7XG4gICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKG5hbWUsIHJlc29sdmVyKTtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc29sdmVyKCkge1xuICAgICAgaWYgKHR5cGVvZiBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgZXJyb3JMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICByZXNvbHZlKFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgfTtcblxuICAgIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCBuYW1lLCByZXNvbHZlciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIGlmIChuYW1lICE9PSAnZXJyb3InKSB7XG4gICAgICBhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlbWl0dGVyLCBlcnJvckxpc3RlbmVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIoZW1pdHRlciwgaGFuZGxlciwgZmxhZ3MpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLm9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsICdlcnJvcicsIGhhbmRsZXIsIGZsYWdzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgbmFtZSwgbGlzdGVuZXIsIGZsYWdzKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChmbGFncy5vbmNlKSB7XG4gICAgICBlbWl0dGVyLm9uY2UobmFtZSwgbGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbWl0dGVyLm9uKG5hbWUsIGxpc3RlbmVyKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIEV2ZW50VGFyZ2V0IGRvZXMgbm90IGhhdmUgYGVycm9yYCBldmVudCBzZW1hbnRpY3MgbGlrZSBOb2RlXG4gICAgLy8gRXZlbnRFbWl0dGVycywgd2UgZG8gbm90IGxpc3RlbiBmb3IgYGVycm9yYCBldmVudHMgaGVyZS5cbiAgICBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgZnVuY3Rpb24gd3JhcExpc3RlbmVyKGFyZykge1xuICAgICAgLy8gSUUgZG9lcyBub3QgaGF2ZSBidWlsdGluIGB7IG9uY2U6IHRydWUgfWAgc3VwcG9ydCBzbyB3ZVxuICAgICAgLy8gaGF2ZSB0byBkbyBpdCBtYW51YWxseS5cbiAgICAgIGlmIChmbGFncy5vbmNlKSB7XG4gICAgICAgIGVtaXR0ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCB3cmFwTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgbGlzdGVuZXIoYXJnKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJlbWl0dGVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEV2ZW50RW1pdHRlci4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGVtaXR0ZXIpO1xuICB9XG59XG4iLCJleHBvcnQgeyB1cmxBbHBoYWJldCB9IGZyb20gJy4vdXJsLWFscGhhYmV0L2luZGV4LmpzJ1xuZXhwb3J0IGxldCByYW5kb20gPSBieXRlcyA9PiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KGJ5dGVzKSlcbmV4cG9ydCBsZXQgY3VzdG9tUmFuZG9tID0gKGFscGhhYmV0LCBkZWZhdWx0U2l6ZSwgZ2V0UmFuZG9tKSA9PiB7XG4gIGxldCBtYXNrID0gKDIgPDwgKE1hdGgubG9nKGFscGhhYmV0Lmxlbmd0aCAtIDEpIC8gTWF0aC5MTjIpKSAtIDFcbiAgbGV0IHN0ZXAgPSAtfigoMS42ICogbWFzayAqIGRlZmF1bHRTaXplKSAvIGFscGhhYmV0Lmxlbmd0aClcbiAgcmV0dXJuIChzaXplID0gZGVmYXVsdFNpemUpID0+IHtcbiAgICBsZXQgaWQgPSAnJ1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBsZXQgYnl0ZXMgPSBnZXRSYW5kb20oc3RlcClcbiAgICAgIGxldCBqID0gc3RlcFxuICAgICAgd2hpbGUgKGotLSkge1xuICAgICAgICBpZCArPSBhbHBoYWJldFtieXRlc1tqXSAmIG1hc2tdIHx8ICcnXG4gICAgICAgIGlmIChpZC5sZW5ndGggPT09IHNpemUpIHJldHVybiBpZFxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZXhwb3J0IGxldCBjdXN0b21BbHBoYWJldCA9IChhbHBoYWJldCwgc2l6ZSA9IDIxKSA9PlxuICBjdXN0b21SYW5kb20oYWxwaGFiZXQsIHNpemUsIHJhbmRvbSlcbmV4cG9ydCBsZXQgbmFub2lkID0gKHNpemUgPSAyMSkgPT5cbiAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShzaXplKSkucmVkdWNlKChpZCwgYnl0ZSkgPT4ge1xuICAgIGJ5dGUgJj0gNjNcbiAgICBpZiAoYnl0ZSA8IDM2KSB7XG4gICAgICBpZCArPSBieXRlLnRvU3RyaW5nKDM2KVxuICAgIH0gZWxzZSBpZiAoYnl0ZSA8IDYyKSB7XG4gICAgICBpZCArPSAoYnl0ZSAtIDI2KS50b1N0cmluZygzNikudG9VcHBlckNhc2UoKVxuICAgIH0gZWxzZSBpZiAoYnl0ZSA+IDYyKSB7XG4gICAgICBpZCArPSAnLSdcbiAgICB9IGVsc2Uge1xuICAgICAgaWQgKz0gJ18nXG4gICAgfVxuICAgIHJldHVybiBpZFxuICB9LCAnJylcbiIsImV4cG9ydCBmdW5jdGlvbiB1dGY4VG9VaW50OEFycmF5KHN0cjogc3RyaW5nKSB7XG4gIHJldHVybiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVpbnQ4QXJyYXlUb1V0ZjgoYXJyYXk6IFVpbnQ4QXJyYXkpIHtcbiAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShhcnJheSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcnJheUJ1ZmZlclRvVXRmOChidWZmZXI6IEFycmF5QnVmZmVyKSB7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgcmV0dXJuIHVpbnQ4QXJyYXlUb1V0ZjgoYnl0ZXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmFzZTY0VG9VaW50OEFycmF5KGJhc2U2NDogc3RyaW5nKSB7XG4gIGNvbnN0IGJpbmFyeSA9IHdpbmRvdy5hdG9iKGJhc2U2NCk7XG4gIGNvbnN0IGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYmluYXJ5Lmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICBhcnJheVtpXSA9IGJpbmFyeS5jaGFyQ29kZUF0KGkpO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVpbnQ4QXJyYXlUb0Jhc2U2NChhcnJheTogVWludDhBcnJheSkge1xuICAvLyBFeHBsaWNpdCBjYXN0aW5nIGlzIG5lZWRlZCB0byBzYXRpc2Z5IHRoZSB0eXBlY2hlY2tlclxuICByZXR1cm4gd2luZG93LmJ0b2EoXG4gICAgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBhcnJheSBhcyB1bmtub3duIGFzIG51bWJlcltdKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlCdWZmZXJUb0Jhc2U2NChidWZmZXI6IEFycmF5QnVmZmVyKSB7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgcmV0dXJuIHVpbnQ4QXJyYXlUb0Jhc2U2NChieXRlcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBiYXNlNjRUb0FycmF5QnVmZmVyKGJhc2U2NDogc3RyaW5nKSB7XG4gIHJldHVybiBiYXNlNjRUb1VpbnQ4QXJyYXkoYmFzZTY0KS5idWZmZXI7XG59XG4iLCJpbXBvcnQgeyB1aW50OEFycmF5VG9CYXNlNjQgfSBmcm9tICcuL2NvbnZlcnQnO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhbiBhcnJheSBvZiBjcnlwdG9ncmFwaGljYWxseSBzdHJvbmcgcmFuZG9tIGJ5dGVzLlxuICpcbiAqIEBwYXJhbSBsZW5ndGggLSBUaGUgbnVtYmVyIG9mIGJ5dGVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmFuZG9tVWludDhBcnJheShsZW5ndGggPSAzMikge1xuICByZXR1cm4gd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkobGVuZ3RoKSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJhbmRvbSBiYXNlNjQgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSBsZW5ndGggLSBUaGUgbnVtYmVyIG9mIGJ5dGVzIGluIHN0cmluZy5cbiAqIEByZXR1cm5zIEEgcmFuZG9tbHkgZ2VuZXJhdGVkIHN0cmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmRvbUJhc2U2NChsZW5ndGggPSAzMik6IHN0cmluZyB7XG4gIGNvbnN0IHJhbmRvbUJ5dGVzID0gZ2V0UmFuZG9tVWludDhBcnJheShsZW5ndGgpO1xuICByZXR1cm4gdWludDhBcnJheVRvQmFzZTY0KHJhbmRvbUJ5dGVzKTtcbn1cbiIsImltcG9ydCB7IHV0ZjhUb1VpbnQ4QXJyYXksIGJhc2U2NFRvVWludDhBcnJheSB9IGZyb20gJy4vY29udmVydCc7XG5pbXBvcnQgeyBnZXRSYW5kb21CYXNlNjQgfSBmcm9tICcuL3JhbmRvbSc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBtYXN0ZXIga2V5IGZvciBhIGdpdmVuIHBhc3N3b3JkLlxuICovXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVNYXN0ZXJLZXkocGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8Q3J5cHRvS2V5PiB7XG4gIGNvbnN0IHBhc3NBcnJheSA9IHV0ZjhUb1VpbnQ4QXJyYXkocGFzc3dvcmQpO1xuICAvLyBGb3IgdGhlIFBCS0RGMiBhbGdvcml0aG0gdGhlIGJhc2VLZXkgaXMgcGFzc3dvcmQuXG4gIHJldHVybiBhd2FpdCB3aW5kb3cuY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXG4gICAgJ3JhdycsXG4gICAgcGFzc0FycmF5LFxuICAgIHsgbmFtZTogJ1BCS0RGMicgfSxcbiAgICBmYWxzZSxcbiAgICBbJ2Rlcml2ZUJpdHMnLCAnZGVyaXZlS2V5J11cbiAgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc2VjcmV0IGtleSBmcm9tIGEgbWFzdGVyIGtleS5cbiAqXG4gKiBAcGFyYW0gbWFzdGVyS2V5IEEgbWFzdGVyIGtleSB0byBkZXJpdmUgZnJvbS5cbiAqIEBwYXJhbSBzYWx0IC0gVGhlIHNhbHQsIEJhc2U2NCBzdHJpbmcuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVNlY3JldEtleShcbiAgbWFzdGVyS2V5OiBDcnlwdG9LZXksXG4gIHNhbHQ6IHN0cmluZ1xuKTogUHJvbWlzZTxDcnlwdG9LZXk+IHtcbiAgY29uc3Qgc2FsdEFycmF5ID0gYmFzZTY0VG9VaW50OEFycmF5KHNhbHQpO1xuXG4gIC8vIEluIDIwMjEsIE9XQVNQIHJlY29tbWVuZGVkIHRvIHVzZSAzMTAwMDAgaXRlcmF0aW9ucyBmb3JcbiAgLy8gUEJLREYyLUhNQUMtU0hBMjU2IGFuZCAxMjAwMDAgZm9yIFBCS0RGMi1ITUFDLVNIQTUxMi5cbiAgLy8gSGVyZSB3ZSB1c2UgMzUwMDAwIGZvciBiZXR0ZXIgc2VjdXJpdHkuXG5cbiAgcmV0dXJuIGF3YWl0IHdpbmRvdy5jcnlwdG8uc3VidGxlLmRlcml2ZUtleShcbiAgICB7XG4gICAgICBuYW1lOiAnUEJLREYyJyxcbiAgICAgIHNhbHQ6IHNhbHRBcnJheSxcbiAgICAgIGl0ZXJhdGlvbnM6IDM1MDAwMCxcbiAgICAgIGhhc2g6ICdTSEEtMjU2JyxcbiAgICB9LFxuICAgIG1hc3RlcktleSxcbiAgICB7IG5hbWU6ICdBRVMtR0NNJywgbGVuZ3RoOiAyNTYgfSxcbiAgICB0cnVlLFxuICAgIFsnZW5jcnlwdCcsICdkZWNyeXB0J11cbiAgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc2FsdCBmb3IgdXNlIGluIENyeXB0b0tleSBnZW5lcmF0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2FsdCgpIHtcbiAgcmV0dXJuIGdldFJhbmRvbUJhc2U2NCgzMik7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBDcnlwdG9LZXkuXG4gKlxuICogQHBhcmFtIHBhc3N3b3JkIC0gVGhlIHBhc3N3b3JkLCBVVEYtOCBzdHJpbmcuXG4gKiBAcGFyYW0gc2FsdCAtIFRoZSBzYWx0LCBCYXNlNjQgc3RyaW5nLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQ3J5cHRvS2V5KFxuICBwYXNzd29yZDogc3RyaW5nLFxuICBzYWx0OiBzdHJpbmdcbik6IFByb21pc2U8Q3J5cHRvS2V5PiB7XG4gIGNvbnN0IG1hc3RlcktleSA9IGF3YWl0IGNyZWF0ZU1hc3RlcktleShwYXNzd29yZCk7XG4gIGNvbnN0IHNlY3JldEtleSA9IGF3YWl0IGNyZWF0ZVNlY3JldEtleShtYXN0ZXJLZXksIHNhbHQpO1xuXG4gIHJldHVybiBzZWNyZXRLZXk7XG59XG4iLCJpbXBvcnQge1xuICBhcnJheUJ1ZmZlclRvQmFzZTY0LFxuICBiYXNlNjRUb0FycmF5QnVmZmVyLFxuICBiYXNlNjRUb1VpbnQ4QXJyYXksXG4gIHVpbnQ4QXJyYXlUb1V0ZjgsXG4gIHV0ZjhUb1VpbnQ4QXJyYXksXG59IGZyb20gJy4vY29udmVydCc7XG5pbXBvcnQgeyBjcmVhdGVDcnlwdG9LZXksIGNyZWF0ZVNhbHQgfSBmcm9tICcuL2tleSc7XG5pbXBvcnQgeyBnZXRSYW5kb21VaW50OEFycmF5IH0gZnJvbSAnLi9yYW5kb20nO1xuaW1wb3J0IHsgRW5jcnlwdGVkIH0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IFZFUlNJT04gPSAxO1xuXG5mdW5jdGlvbiBnZXRJVigpIHtcbiAgcmV0dXJuIGdldFJhbmRvbVVpbnQ4QXJyYXkoMTYpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBlbmNyeXB0T2JqZWN0PFQ+KFxuICBwYXNzd29yZDogc3RyaW5nLFxuICBvYmo6IFQsXG4gIHNhbHQ6IHN0cmluZyA9IGNyZWF0ZVNhbHQoKVxuKTogUHJvbWlzZTxFbmNyeXB0ZWQ+IHtcbiAgY29uc3QgZGF0YUpTT04gPSBKU09OLnN0cmluZ2lmeShvYmopO1xuICBjb25zdCBkYXRhQXJyYXkgPSB1dGY4VG9VaW50OEFycmF5KGRhdGFKU09OKTtcblxuICBjb25zdCBpdiA9IGdldElWKCk7XG4gIGNvbnN0IGtleSA9IGF3YWl0IGNyZWF0ZUNyeXB0b0tleShwYXNzd29yZCwgc2FsdCk7XG5cbiAgY29uc3QgZW5jcnlwdGVkQnVmZmVyID0gYXdhaXQgd2luZG93LmNyeXB0by5zdWJ0bGUuZW5jcnlwdChcbiAgICB7IG5hbWU6ICdBRVMtR0NNJywgaXYgfSxcbiAgICBrZXksXG4gICAgZGF0YUFycmF5XG4gICk7XG5cbiAgY29uc3QgaXZCYXNlNjQgPSBhcnJheUJ1ZmZlclRvQmFzZTY0KGl2KTtcbiAgY29uc3QgZW5jcnlwdGVkQmFzZTY0ID0gYXJyYXlCdWZmZXJUb0Jhc2U2NChlbmNyeXB0ZWRCdWZmZXIpO1xuXG4gIHJldHVybiB7XG4gICAgaXY6IGl2QmFzZTY0LFxuICAgIGRhdGE6IGVuY3J5cHRlZEJhc2U2NCxcbiAgICBzYWx0LFxuICAgIHZlcnNpb246IFZFUlNJT04sXG4gIH07XG59XG5cbi8qKlxuICogRW5jcnlwdHMgZGF0YSB3aXRoIGEgZ2l2ZW4gcGFzc3dvcmQuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBlbmNyeXB0PFQ+KFxuICBwYXNzd29yZDogc3RyaW5nLFxuICBvYmo6IFQsXG4gIHNhbHQ6IHN0cmluZyA9IGNyZWF0ZVNhbHQoKVxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgZW5jcnlwdGVkID0gYXdhaXQgZW5jcnlwdE9iamVjdChwYXNzd29yZCwgb2JqLCBzYWx0KTtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGVuY3J5cHRlZCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRlY3J5cHRPYmplY3Q8VD4oXG4gIHBhc3N3b3JkOiBzdHJpbmcsXG4gIGVuY3J5cHRlZDogRW5jcnlwdGVkXG4pOiBQcm9taXNlPFQ+IHtcbiAgY29uc3QgeyBpdjogaXZCYXNlNjQsIGRhdGE6IGRhdGFCYXNlNjQsIHNhbHQgfSA9IGVuY3J5cHRlZDtcbiAgY29uc3QgZGF0YUFycmF5ID0gYmFzZTY0VG9VaW50OEFycmF5KGRhdGFCYXNlNjQpO1xuXG4gIGNvbnN0IGl2ID0gYmFzZTY0VG9BcnJheUJ1ZmZlcihpdkJhc2U2NCk7XG4gIGNvbnN0IGtleSA9IGF3YWl0IGNyZWF0ZUNyeXB0b0tleShwYXNzd29yZCwgc2FsdCk7XG5cbiAgY29uc3QgZGVjcnlwdGVkQnVmZmVyID0gYXdhaXQgd2luZG93LmNyeXB0by5zdWJ0bGUuZGVjcnlwdChcbiAgICB7IG5hbWU6ICdBRVMtR0NNJywgaXYgfSxcbiAgICBrZXksXG4gICAgZGF0YUFycmF5XG4gICk7XG5cbiAgY29uc3QgZGVjcnlwdGVkQXJyYXkgPSBuZXcgVWludDhBcnJheShkZWNyeXB0ZWRCdWZmZXIpO1xuICBjb25zdCBkZWNyeXB0ZWRTdHJpbmcgPSB1aW50OEFycmF5VG9VdGY4KGRlY3J5cHRlZEFycmF5KTtcblxuICByZXR1cm4gSlNPTi5wYXJzZShkZWNyeXB0ZWRTdHJpbmcpO1xufVxuXG4vKipcbiAqIERlY3J5cHRzIGEgZ2l2ZW4gSlNPTiBzdHJpbmcuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWNyeXB0PFQ+KHBhc3N3b3JkOiBzdHJpbmcsIGpzb246IHN0cmluZyk6IFByb21pc2U8VD4ge1xuICBjb25zdCBlbmNyeXB0ZWQgPSBKU09OLnBhcnNlKGpzb24pIGFzIEVuY3J5cHRlZDtcbiAgcmV0dXJuIGRlY3J5cHRPYmplY3QocGFzc3dvcmQsIGVuY3J5cHRlZCk7XG59XG4iLCJpbXBvcnQge1xuICBiYXNlNjRUb0FycmF5QnVmZmVyLFxuICBhcnJheUJ1ZmZlclRvQmFzZTY0LFxuICBhcnJheUJ1ZmZlclRvVXRmOCxcbiAgdXRmOFRvVWludDhBcnJheSxcbn0gZnJvbSAnLi9jb252ZXJ0JztcbmltcG9ydCB7IFN0YWJsZUVuY3J5cHRlZCB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBWRVJTSU9OID0gMTtcblxuZnVuY3Rpb24gZ2V0SVYoKSB7XG4gIHJldHVybiBuZXcgVWludDhBcnJheSgxMik7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdGFibGVFbmNyeXB0T2JqZWN0PFQ+KFxuICBrZXk6IENyeXB0b0tleSxcbiAgb2JqOiBUXG4pOiBQcm9taXNlPFN0YWJsZUVuY3J5cHRlZD4ge1xuICBjb25zdCBkYXRhSlNPTiA9IEpTT04uc3RyaW5naWZ5KG9iaik7XG4gIGNvbnN0IGRhdGFBcnJheSA9IHV0ZjhUb1VpbnQ4QXJyYXkoZGF0YUpTT04pO1xuICBjb25zdCBlbmNyeXB0ZWRCdWZmZXIgPSBhd2FpdCB3aW5kb3cuY3J5cHRvLnN1YnRsZS5lbmNyeXB0KFxuICAgIHsgbmFtZTogJ0FFUy1HQ00nLCBpdjogZ2V0SVYoKSB9LFxuICAgIGtleSxcbiAgICBkYXRhQXJyYXlcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBkYXRhOiBhcnJheUJ1ZmZlclRvQmFzZTY0KGVuY3J5cHRlZEJ1ZmZlciksXG4gICAgdmVyc2lvbjogVkVSU0lPTixcbiAgfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0YWJsZUVuY3J5cHQ8VD4oXG4gIGtleTogQ3J5cHRvS2V5LFxuICBvYmo6IFRcbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IGVuY3J5cHRlZCA9IGF3YWl0IHN0YWJsZUVuY3J5cHRPYmplY3Qoa2V5LCBvYmopO1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZW5jcnlwdGVkKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0YWJsZURlY3J5cHRPYmplY3Q8VD4oXG4gIGtleTogQ3J5cHRvS2V5LFxuICBlbmNyeXB0ZWQ6IFN0YWJsZUVuY3J5cHRlZFxuKTogUHJvbWlzZTxUPiB7XG4gIGNvbnN0IGVuY3J5cHRlZEJ1ZmZlciA9IGJhc2U2NFRvQXJyYXlCdWZmZXIoZW5jcnlwdGVkLmRhdGEpO1xuICBjb25zdCBkZWNyeXB0ZWRCdWZmZXIgPSBhd2FpdCB3aW5kb3cuY3J5cHRvLnN1YnRsZS5kZWNyeXB0KFxuICAgIHsgbmFtZTogJ0FFUy1HQ00nLCBpdjogZ2V0SVYoKSB9LFxuICAgIGtleSxcbiAgICBlbmNyeXB0ZWRCdWZmZXJcbiAgKTtcbiAgY29uc3QgZGVjcnlwdGVkU3RyaW5nID0gYXJyYXlCdWZmZXJUb1V0ZjgoZGVjcnlwdGVkQnVmZmVyKTtcbiAgcmV0dXJuIEpTT04ucGFyc2UoZGVjcnlwdGVkU3RyaW5nKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0YWJsZURlY3J5cHQ8VD4oXG4gIGtleTogQ3J5cHRvS2V5LFxuICBqc29uOiBzdHJpbmdcbik6IFByb21pc2U8VD4ge1xuICBjb25zdCBlbmNyeXB0ZWQgPSBKU09OLnBhcnNlKGpzb24pIGFzIFN0YWJsZUVuY3J5cHRlZDtcbiAgcmV0dXJuIHN0YWJsZURlY3J5cHRPYmplY3Qoa2V5LCBlbmNyeXB0ZWQpO1xufVxuIiwiaW1wb3J0IHsgdXRmOFRvVWludDhBcnJheSB9IGZyb20gJy4vY29udmVydCc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTSEEyNTZIZXhEaWdlc3QobWVzc2FnZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgZGF0YSA9IHV0ZjhUb1VpbnQ4QXJyYXkobWVzc2FnZSk7XG4gIGNvbnN0IGhhc2hCdWZmZXIgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdCgnU0hBLTI1NicsIGRhdGEpO1xuICBjb25zdCBoYXNoQXJyYXkgPSBBcnJheS5mcm9tKG5ldyBVaW50OEFycmF5KGhhc2hCdWZmZXIpKTsgLy8gY29udmVydCBidWZmZXIgdG8gYnl0ZSBhcnJheVxuICBjb25zdCBoYXNoSGV4ID0gaGFzaEFycmF5XG4gICAgLm1hcCgoYikgPT4gYi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSlcbiAgICAuam9pbignJyk7IC8vIGNvbnZlcnQgYnl0ZXMgdG8gaGV4IHN0cmluZ1xuICByZXR1cm4gaGFzaEhleDtcbn1cbiIsImltcG9ydCB0eXBlIHsgVmFsaWRhdGlvblJlc3VsdCB9IGZyb20gJy4vVmFsaWRhdGlvblJlc3VsdCc7XG5cbmV4cG9ydCBjb25zdCBQQVNTV09SRF9NSU5fTEVOR1RIID0gNjtcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlKHsgcGFzc3dvcmQgfTogeyBwYXNzd29yZDogc3RyaW5nIH0pOiBWYWxpZGF0aW9uUmVzdWx0IHtcbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCA8IFBBU1NXT1JEX01JTl9MRU5HVEgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogJ1Bhc3N3b3JkIG11c3QgaGF2ZSBhdCBsZWFzdCA2IGNoYXJhY3RlcnMnLFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIG1lc3NhZ2U6ICcnIH07XG59XG4iLCJleHBvcnQgbGV0IGNyZWF0ZU5hbm9FdmVudHMgPSAoKSA9PiAoe1xuICBldmVudHM6IHt9LFxuICBlbWl0KGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgbGV0IGNhbGxiYWNrcyA9IHRoaXMuZXZlbnRzW2V2ZW50XSB8fCBbXVxuICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGNhbGxiYWNrc1tpXSguLi5hcmdzKVxuICAgIH1cbiAgfSxcbiAgb24oZXZlbnQsIGNiKSB7XG4gICAgdGhpcy5ldmVudHNbZXZlbnRdPy5wdXNoKGNiKSB8fCAodGhpcy5ldmVudHNbZXZlbnRdID0gW2NiXSlcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdGhpcy5ldmVudHNbZXZlbnRdID0gdGhpcy5ldmVudHNbZXZlbnRdPy5maWx0ZXIoaSA9PiBjYiAhPT0gaSlcbiAgICB9XG4gIH1cbn0pXG4iLCJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xuaW1wb3J0IGJyb3dzZXIsIHsgV2luZG93cyB9IGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbCc7XG5cbmNvbnN0IElTX1dJTkRPV1MgPSAvd2luZG93cy9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbmNvbnN0IGV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG5icm93c2VyLndpbmRvd3Mub25Gb2N1c0NoYW5nZWQuYWRkTGlzdGVuZXIoKHdpbklkKSA9PiB7XG4gIGV2ZW50LmVtaXQoJ3dpbmRvd0ZvY3VzQ2hhbmdlJywgd2luSWQpO1xufSk7XG5cbmJyb3dzZXIud2luZG93cy5vblJlbW92ZWQuYWRkTGlzdGVuZXIoKHdpbklkKSA9PiB7XG4gIGV2ZW50LmVtaXQoJ3dpbmRvd1JlbW92ZWQnLCB3aW5JZCk7XG59KTtcblxuY29uc3QgQlJPV1NFUl9IRUFERVIgPSA4MDtcbmNvbnN0IFdJTkRPV19TSVpFID0ge1xuICB3aWR0aDogNDAwICsgKElTX1dJTkRPV1MgPyAxNCA6IDApLCAvLyB3aW5kb3dzIGN1dHMgdGhlIHdpZHRoXG4gIGhlaWdodDogNjAwLFxufTtcblxudHlwZSBCcm93c2VyV2luZG93ID0gYnJvd3Nlci5XaW5kb3dzLldpbmRvdyB8IGNocm9tZS53aW5kb3dzLldpbmRvdztcbmNvbnN0IGNyZWF0ZSA9IGFzeW5jICh7XG4gIHVybCxcbiAgLi4ucmVzdFxufToge1xuICB1cmw6IHN0cmluZztcbn0pOiBQcm9taXNlPEJyb3dzZXJXaW5kb3dbJ2lkJ10+ID0+IHtcbiAgY29uc3Qge1xuICAgIHRvcDogY3VycmVudFdpbmRvd1RvcCxcbiAgICBsZWZ0OiBjdXJyZW50V2luZG93TGVmdCxcbiAgICB3aWR0aDogY3VycmVudFdpbmRvd1dpZHRoLFxuICB9ID0gYXdhaXQgYnJvd3Nlci53aW5kb3dzLmdldEN1cnJlbnQoe1xuICAgIHdpbmRvd1R5cGVzOiBbJ25vcm1hbCddLFxuICB9IGFzIFdpbmRvd3MuR2V0SW5mbyk7XG5cbiAgY29uc3QgdG9wID0gKGN1cnJlbnRXaW5kb3dUb3AgfHwgMCkgKyBCUk9XU0VSX0hFQURFUjtcbiAgY29uc3QgbGVmdCA9XG4gICAgKGN1cnJlbnRXaW5kb3dMZWZ0IHx8IDApICsgKGN1cnJlbnRXaW5kb3dXaWR0aCB8fCAwKSAtIFdJTkRPV19TSVpFLndpZHRoO1xuXG4gIGNvbnN0IGN1cnJlbnRXaW5kb3cgPSBhd2FpdCBicm93c2VyLndpbmRvd3MuZ2V0Q3VycmVudCgpO1xuICBjb25zdCB3aW4gPSBhd2FpdCBicm93c2VyLndpbmRvd3MuY3JlYXRlKHtcbiAgICBmb2N1c2VkOiB0cnVlLFxuICAgIHVybCxcbiAgICB0eXBlOiAncG9wdXAnLFxuICAgIHRvcCxcbiAgICBsZWZ0LFxuICAgIHN0YXRlOiBjdXJyZW50V2luZG93LnN0YXRlID09PSAnZnVsbHNjcmVlbicgPyAnZnVsbHNjcmVlbicgOiB1bmRlZmluZWQsXG4gICAgLi4uV0lORE9XX1NJWkUsXG4gICAgLi4ucmVzdCxcbiAgfSk7XG5cbiAgLy8gc2hpbSBmaXJlZm94XG4gIC8vIGlmICh3aW4ubGVmdCAhPT0gbGVmdCkge1xuICAvLyAgIGlmICh3aW4uaWQpIHtcbiAgLy8gICAgIGF3YWl0IGJyb3dzZXIud2luZG93cy51cGRhdGUod2luLmlkLCB7IGxlZnQsIHRvcCB9KTtcbiAgLy8gICB9XG4gIC8vIH1cblxuICByZXR1cm4gd2luLmlkO1xufTtcblxuY29uc3QgcmVtb3ZlID0gYXN5bmMgKHdpbklkOiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIGJyb3dzZXIud2luZG93cy5yZW1vdmUod2luSWQpO1xufTtcblxuY29uc3Qgb3Blbk5vdGlmaWNhdGlvbiA9ICh7IHJvdXRlID0gJycsIC4uLnJlc3QgfSA9IHt9KTogUHJvbWlzZTxcbiAgbnVtYmVyIHwgdW5kZWZpbmVkXG4+ID0+IHtcbiAgY29uc3QgdXJsID0gbmV3IFVSTChgLi4vLi4vdWkvZGlhbG9nLmh0bWxgLCBpbXBvcnQubWV0YS51cmwpO1xuICBpZiAocm91dGUpIHtcbiAgICB1cmwuaGFzaCA9IHJvdXRlO1xuICB9XG4gIHJldHVybiBjcmVhdGUoeyB1cmw6IHVybC50b1N0cmluZygpLCAuLi5yZXN0IH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IHdpbmRvd01hbmFnZXIgPSB7XG4gIG9wZW5Ob3RpZmljYXRpb24sXG4gIGV2ZW50LFxuICByZW1vdmUsXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2hlbHBlcnMvYnVuZGxlLXVybCcpLmdldEJ1bmRsZVVSTCgnaVY3N2gnKSArIHJlcXVpcmUoJy4vaGVscGVycy9idW5kbGUtbWFuaWZlc3QnKS5yZXNvbHZlKFwiMnptSlVcIik7IiwiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdldmVudHMnO1xuaW1wb3J0IHsgRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bqc29uLXJwYy10b29scy91dGlscyc7XG5pbXBvcnQgeyBuYW5vaWQgfSBmcm9tICduYW5vaWQnO1xuaW1wb3J0IHR5cGUgeyBScGNFcnJvciwgUnBjUmVzdWx0IH0gZnJvbSAnc3JjL3NoYXJlZC9jdXN0b20tcnBjJztcbmltcG9ydCB7IFVzZXJSZWplY3RlZCB9IGZyb20gJ3NyYy9zaGFyZWQvZXJyb3JzL2Vycm9ycyc7XG5pbXBvcnQgeyB3aW5kb3dNYW5hZ2VyIH0gZnJvbSAnLi4vd2ViYXBpcy93aW5kb3cnO1xuXG5jbGFzcyBOb3RpZmljYXRpb25XaW5kb3cgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICB3aW5kb3dJZDogbnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZCA9IG51bGw7XG4gIGlkOiBzdHJpbmc7XG4gIGlkc01hcDogTWFwPHN0cmluZywgbnVtYmVyPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaWQgPSBuYW5vaWQoKTtcbiAgICB0aGlzLmlkc01hcCA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0V2luZG93SWQoaWQ6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmlkc01hcC5nZXQoaWQpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXROZXdJZCgpIHtcbiAgICByZXR1cm4gbmFub2lkKCk7XG4gIH1cblxuICBhc3luYyBvcGVuPFQ+KHtcbiAgICByb3V0ZTogaW5pdGlhbFJvdXRlLFxuICAgIHNlYXJjaCxcbiAgICBvbkRpc21pc3MsXG4gICAgb25SZXNvbHZlLFxuICB9OiB7XG4gICAgcm91dGU6IHN0cmluZztcbiAgICBzZWFyY2g/OiBzdHJpbmc7XG4gICAgb25EaXNtaXNzOiAoZXJyb3I/OiBFcnJvclJlc3BvbnNlKSA9PiB2b2lkO1xuICAgIG9uUmVzb2x2ZTogKGRhdGE6IFQpID0+IHZvaWQ7XG4gIH0pIHtcbiAgICBpZiAodGhpcy53aW5kb3dJZCAhPSBudWxsKSB7XG4gICAgICB3aW5kb3dNYW5hZ2VyLnJlbW92ZSh0aGlzLndpbmRvd0lkKTtcbiAgICB9XG5cbiAgICBjb25zdCBkaXNwb3NhYmxlczogQXJyYXk8KCkgPT4gdm9pZD4gPSBbXTtcblxuICAgIGNvbnN0IG9uRG9uZSA9ICgpID0+IHtcbiAgICAgIGRpc3Bvc2FibGVzLmZvckVhY2goKGRpc3Bvc2UpID0+IGRpc3Bvc2UoKSk7XG4gICAgfTtcblxuICAgIGxldCByb3V0ZSA9IGluaXRpYWxSb3V0ZTtcbiAgICBjb25zdCBpZCA9IHRoaXMuZ2V0TmV3SWQoKTtcbiAgICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHNlYXJjaCk7XG4gICAgcGFyYW1zLmFwcGVuZCgnd2luZG93SWQnLCBTdHJpbmcoaWQpKTtcbiAgICByb3V0ZSA9IHJvdXRlICsgYD8ke3BhcmFtcy50b1N0cmluZygpfWA7XG4gICAgY29uc3Qgd2luZG93SWQgPSBhd2FpdCB3aW5kb3dNYW5hZ2VyLm9wZW5Ob3RpZmljYXRpb24oeyByb3V0ZSB9KTtcbiAgICBpZiAod2luZG93SWQpIHtcbiAgICAgIHRoaXMuaWRzTWFwLnNldChpZCwgd2luZG93SWQpO1xuICAgICAgZGlzcG9zYWJsZXMucHVzaCgoKSA9PiB0aGlzLmlkc01hcC5kZWxldGUoaWQpKTtcbiAgICB9XG4gICAgdGhpcy53aW5kb3dJZCA9IHdpbmRvd0lkO1xuICAgIGRpc3Bvc2FibGVzLnB1c2goKCkgPT4ge1xuICAgICAgaWYgKHRoaXMud2luZG93SWQgIT0gbnVsbCkge1xuICAgICAgICB3aW5kb3dNYW5hZ2VyLnJlbW92ZSh0aGlzLndpbmRvd0lkKTtcbiAgICAgICAgdGhpcy53aW5kb3dJZCA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgaGFuZGxlRGlzbWlzcyA9ICh3aW5kb3dJZDogbnVtYmVyLCBlcnJvcj86IEVycm9yUmVzcG9uc2UpID0+IHtcbiAgICAgIGlmICh3aW5kb3dJZCA9PT0gdGhpcy53aW5kb3dJZCkge1xuICAgICAgICBvbkRpc21pc3MoZXJyb3IpO1xuICAgICAgICBvbkRvbmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZVdpbmRvd1JlbW92ZWQgPSAod2luZG93SWQ6IG51bWJlcikgPT4ge1xuICAgICAgaWYgKHRoaXMud2luZG93SWQgPT09IHdpbmRvd0lkKSB7XG4gICAgICAgIHRoaXMud2luZG93SWQgPSBudWxsO1xuICAgICAgfVxuICAgICAgb25EaXNtaXNzKG5ldyBVc2VyUmVqZWN0ZWQoJ1dpbmRvdyBDbG9zZWQnKSk7XG4gICAgICBvbkRvbmUoKTtcbiAgICB9O1xuICAgIHdpbmRvd01hbmFnZXIuZXZlbnQub24oJ3dpbmRvd1JlbW92ZWQnLCBoYW5kbGVXaW5kb3dSZW1vdmVkKTtcbiAgICBkaXNwb3NhYmxlcy5wdXNoKCgpID0+IHtcbiAgICAgIHdpbmRvd01hbmFnZXIuZXZlbnQub2ZmKCd3aW5kb3dSZW1vdmVkJywgaGFuZGxlV2luZG93UmVtb3ZlZCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBoYW5kbGVSZXNvbHZlID0gKHsgaWQsIHJlc3VsdCB9OiBScGNSZXN1bHQ8VD4pID0+IHtcbiAgICAgIGlmICh0aGlzLmdldFdpbmRvd0lkKGlkKSA9PT0gd2luZG93SWQpIHtcbiAgICAgICAgb25SZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIG9uRG9uZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaGFuZGxlUmVqZWN0ID0gKHBheWxvYWQ6IFJwY0Vycm9yKSA9PiB7XG4gICAgICBjb25zdCB3aW5kb3dJZCA9IHRoaXMuZ2V0V2luZG93SWQocGF5bG9hZC5pZCk7XG4gICAgICBpZiAod2luZG93SWQgIT0gbnVsbCkge1xuICAgICAgICBoYW5kbGVEaXNtaXNzKHdpbmRvd0lkLCBwYXlsb2FkLmVycm9yKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMub24oJ3Jlc29sdmUnLCBoYW5kbGVSZXNvbHZlKTtcbiAgICB0aGlzLm9uKCdyZWplY3QnLCBoYW5kbGVSZWplY3QpO1xuICAgIGRpc3Bvc2FibGVzLnB1c2goKCkgPT4ge1xuICAgICAgdGhpcy5vZmYoJ3Jlc29sdmUnLCBoYW5kbGVSZXNvbHZlKTtcbiAgICAgIHRoaXMub2ZmKCdyZWplY3QnLCBoYW5kbGVSZWplY3QpO1xuICAgIH0pO1xuICB9XG5cbiAgY2xvc2VDdXJyZW50V2luZG93KCkge1xuICAgIGlmICh0aGlzLndpbmRvd0lkICE9IG51bGwpIHtcbiAgICAgIHdpbmRvd01hbmFnZXIucmVtb3ZlKHRoaXMud2luZG93SWQpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBNYWtlIGl0IGEgc2luZ2xldG9uIHNvIHRoYXQgd2luZG93cyBkbyBub3QgY29uZmxpY3RcbmV4cG9ydCBjb25zdCBub3RpZmljYXRpb25XaW5kb3cgPSBuZXcgTm90aWZpY2F0aW9uV2luZG93KCk7XG5PYmplY3QuYXNzaWduKHdpbmRvdywgeyBub3RpZmljYXRpb25XaW5kb3cgfSk7XG4iLCJleHBvcnQgY29uc3QgSU5URVJOQUxfT1JJR0lOID0gYGNocm9tZS1leHRlbnNpb246Ly8ke2Nocm9tZS5ydW50aW1lLmlkfWA7XG5leHBvcnQgY29uc3QgSU5URVJOQUxfT1JJR0lOX1NZTUJPTCA9IFN5bWJvbCgpO1xuIiwiaW1wb3J0IHR5cGUgeyBVbnNpZ25lZFRyYW5zYWN0aW9uIH0gZnJvbSAnLi4vdHlwZXMvVW5zaWduZWRUcmFuc2FjdGlvbic7XG5pbXBvcnQgdHlwZSB7IEluY29taW5nVHJhbnNhY3Rpb24gfSBmcm9tICcuLi90eXBlcy9JbmNvbWluZ1RyYW5zYWN0aW9uJztcblxuY29uc3Qga25vd25GaWVsZHM6IEFycmF5PGtleW9mIFVuc2lnbmVkVHJhbnNhY3Rpb24+ID0gW1xuICAnZnJvbScsXG4gICd0bycsXG4gICdub25jZScsXG4gICdkYXRhJyxcbiAgJ3ZhbHVlJyxcbiAgJ2NoYWluSWQnLFxuICAndHlwZScsXG4gICdhY2Nlc3NMaXN0JyxcbiAgJ2dhc0xpbWl0JyxcbiAgJ2dhc1ByaWNlJyxcbiAgJ21heFByaW9yaXR5RmVlUGVyR2FzJyxcbiAgJ21heEZlZVBlckdhcycsXG5dO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZVRyYW5zYWN0aW9uKGluY29taW5nVHJhbnNhY3Rpb246IEluY29taW5nVHJhbnNhY3Rpb24pIHtcbiAgY29uc3QgdHJhbnNhY3Rpb246IFVuc2lnbmVkVHJhbnNhY3Rpb24gPSB7fTtcbiAgZm9yIChjb25zdCBmaWVsZCBvZiBrbm93bkZpZWxkcykge1xuICAgIGNvbnN0IGtub3duRmllbGQgPSBmaWVsZCBhcyBrZXlvZiBVbnNpZ25lZFRyYW5zYWN0aW9uO1xuICAgIGlmIChpbmNvbWluZ1RyYW5zYWN0aW9uW2tub3duRmllbGRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHRyYW5zYWN0aW9uW2tub3duRmllbGRdID0gaW5jb21pbmdUcmFuc2FjdGlvbltrbm93bkZpZWxkXTtcbiAgICB9XG4gIH1cbiAgaWYgKGluY29taW5nVHJhbnNhY3Rpb24uZ2FzKSB7XG4gICAgdHJhbnNhY3Rpb24uZ2FzTGltaXQgPSBpbmNvbWluZ1RyYW5zYWN0aW9uLmdhcztcbiAgfVxuICBpZiAoXG4gICAgaW5jb21pbmdUcmFuc2FjdGlvbi5jaGFpbklkICYmXG4gICAgdHlwZW9mIGluY29taW5nVHJhbnNhY3Rpb24uY2hhaW5JZCA9PT0gJ3N0cmluZydcbiAgKSB7XG4gICAgdHJhbnNhY3Rpb24uY2hhaW5JZCA9IHBhcnNlSW50KGluY29taW5nVHJhbnNhY3Rpb24uY2hhaW5JZCk7XG4gIH1cbiAgcmV0dXJuIHRyYW5zYWN0aW9uO1xufVxuIiwiaW1wb3J0IHsgQmlnTnVtYmVyaXNoIH0gZnJvbSAnZXRoZXJzJztcbmltcG9ydCB7IEluY29taW5nVHJhbnNhY3Rpb24gfSBmcm9tICcuLi8uLi90eXBlcy9JbmNvbWluZ1RyYW5zYWN0aW9uJztcblxuZnVuY3Rpb24gaXNOb3RFbXB0eSh2YWx1ZTogbnVsbCB8IHVuZGVmaW5lZCB8IHN0cmluZyB8IG51bWJlciB8IEJpZ051bWJlcmlzaCkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPT0gJyc7XG59XG5cbmZ1bmN0aW9uIGhhc0VJUDE1NTlHYXNQcmljZSh0eDogUGFydGlhbDxJbmNvbWluZ1RyYW5zYWN0aW9uPikge1xuICByZXR1cm4gaXNOb3RFbXB0eSh0eC5tYXhGZWVQZXJHYXMpICYmIGlzTm90RW1wdHkodHgubWF4UHJpb3JpdHlGZWVQZXJHYXMpO1xufVxuXG5mdW5jdGlvbiBoYXNDbGFzc2ljR2FzUHJpY2UodHg6IFBhcnRpYWw8SW5jb21pbmdUcmFuc2FjdGlvbj4pIHtcbiAgcmV0dXJuIGlzTm90RW1wdHkodHguZ2FzUHJpY2UpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzR2FzUHJpY2UodHg6IFBhcnRpYWw8SW5jb21pbmdUcmFuc2FjdGlvbj4pIHtcbiAgcmV0dXJuIGhhc0VJUDE1NTlHYXNQcmljZSh0eCkgfHwgaGFzQ2xhc3NpY0dhc1ByaWNlKHR4KTtcbn1cbiIsImltcG9ydCB7IGV0aGVycyB9IGZyb20gJ2V0aGVycyc7XG5pbXBvcnQgeyBHYXNQcmljZU9iamVjdCB9IGZyb20gJy4vR2FzUHJpY2VPYmplY3QnO1xuXG5pbnRlcmZhY2UgRUlQMTU1OVByb3BzIHtcbiAgbWF4RmVlUGVyR2FzOiBzdHJpbmc7XG4gIG1heFByaW9yaXR5RmVlUGVyR2FzOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBDbGFzc2ljR2FzUHJpY2VQcm9wcyB7XG4gIGdhc1ByaWNlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ25HYXNQcmljZTxUIGV4dGVuZHMgb2JqZWN0PihcbiAgdHJhbnNhY3Rpb246IFQsXG4gIGdhc1ByaWNlOiBHYXNQcmljZU9iamVjdFxuKTogVCAmIChDbGFzc2ljR2FzUHJpY2VQcm9wcyB8IEVJUDE1NTlQcm9wcykge1xuICBpZiAoZ2FzUHJpY2UuZWlwMTU1OSkge1xuICAgIGNvbnN0IHsgZWlwMTU1OSB9ID0gZ2FzUHJpY2U7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24odHJhbnNhY3Rpb24sIHtcbiAgICAgIG1heEZlZVBlckdhczogU3RyaW5nKGV0aGVycy51dGlscy5oZXhWYWx1ZShlaXAxNTU5Lm1heF9mZWUpKSxcbiAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiBTdHJpbmcoZXRoZXJzLnV0aWxzLmhleFZhbHVlKGVpcDE1NTkucHJpb3JpdHlfZmVlKSksXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoZ2FzUHJpY2UuY2xhc3NpYyAhPSBudWxsKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24odHJhbnNhY3Rpb24sIHsgZ2FzUHJpY2U6IFN0cmluZyhnYXNQcmljZS5jbGFzc2ljKSB9KTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ2dhc1ByaWNlIG9iamVjdCBtdXN0IGluY2x1ZGUgZWl0aGVyIGNsYXNzaWMgb3IgZWlwMTU1OSBmaWVsZCdcbiAgKTtcbn1cbiIsImltcG9ydCB7IGNsaWVudCwgbWVyZ2VTaW5nbGVFbnRpdHkgfSBmcm9tICdkZWZpLXNkayc7XG5pbXBvcnQgdHlwZSB7IEVJUDE1NTkgfSBmcm9tICcuL0VJUDE1NTknO1xuXG5leHBvcnQgaW50ZXJmYWNlIE9wdGltaXN0aWNHYXNQcmljZUluZm8ge1xuICBsMT86IG51bWJlcjtcbiAgbDI/OiBudW1iZXI7XG4gIGZpeGVkX292ZXJoZWFkPzogbnVtYmVyO1xuICBkeW5hbWljX292ZXJoZWFkPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVJUDE1NTlHYXNQcmljZXMge1xuICBiYXNlX2ZlZTogbnVtYmVyO1xuICBmYXN0OiBFSVAxNTU5IHwgbnVsbDtcbiAgcmFwaWQ6IEVJUDE1NTkgfCBudWxsO1xuICBzbG93OiBFSVAxNTU5IHwgbnVsbDtcbiAgc3RhbmRhcmQ6IEVJUDE1NTkgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENoYWluR2FzUHJpY2Uge1xuICBkYXRldGltZTogc3RyaW5nO1xuICBzb3VyY2U6IHN0cmluZztcbiAgaW5mbzoge1xuICAgIGNsYXNzaWM/OiB7XG4gICAgICBmYXN0OiBudW1iZXI7XG4gICAgICByYXBpZDogbnVtYmVyIHwgbnVsbDtcbiAgICAgIHNsb3c6IG51bWJlcjtcbiAgICAgIHN0YW5kYXJkOiBudW1iZXI7XG4gICAgfTtcbiAgICBlaXAxNTU5PzogRUlQMTU1OUdhc1ByaWNlcztcbiAgICBvcHRpbWlzdGljPzogT3B0aW1pc3RpY0dhc1ByaWNlSW5mbztcbiAgfTtcbn1cblxuZXhwb3J0IHR5cGUgU3BlZWQgPSBrZXlvZiBOb25OdWxsYWJsZTxDaGFpbkdhc1ByaWNlWydpbmZvJ11bJ2NsYXNzaWMnXT47XG5cbnR5cGUgUGF5bG9hZCA9IFJlY29yZDxzdHJpbmcsIENoYWluR2FzUHJpY2U+O1xuXG5jb25zdCBuYW1lc3BhY2UgPSAnZ2FzJztcbmNvbnN0IHNjb3BlID0gJ2NoYWluLXByaWNlcyc7XG5cbmNsYXNzIEdhc0NoYWluUHJpY2VzU3Vic2NyaXB0aW9uIHtcbiAgbGF0ZXN0VmFsdWU6IFBheWxvYWQgfCBudWxsID0gbnVsbDtcbiAgaW5pdGlhbFByb21pc2U6IFByb21pc2U8UGF5bG9hZD4gfCBudWxsID0gbnVsbDtcbiAgdW5zdWJzY3JpYmU6ICgoKSA9PiB2b2lkKSB8IG51bGwgPSBudWxsO1xuXG4gIGdldCgpIHtcbiAgICBpZiAodGhpcy5sYXRlc3RWYWx1ZSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmxhdGVzdFZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaW5pdGlhbFByb21pc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmluaXRpYWxQcm9taXNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbml0aWF0ZVJlcXVlc3QoKTtcbiAgICB9XG4gIH1cblxuICBpbml0aWF0ZVJlcXVlc3QoKSB7XG4gICAgdGhpcy5pbml0aWFsUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBjb25zdCB7IHVuc3Vic2NyaWJlIH0gPSBjbGllbnQuY2FjaGVkU3Vic2NyaWJlPFxuICAgICAgICBQYXlsb2FkLFxuICAgICAgICB0eXBlb2YgbmFtZXNwYWNlLFxuICAgICAgICB0eXBlb2Ygc2NvcGVcbiAgICAgID4oe1xuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIGJvZHk6IHtcbiAgICAgICAgICBzY29wZTogW3Njb3BlXSxcbiAgICAgICAgICBwYXlsb2FkOiB7fSxcbiAgICAgICAgfSxcbiAgICAgICAgb25EYXRhOiAoeyB2YWx1ZSB9KSA9PiB7XG4gICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXRoaXMubGF0ZXN0VmFsdWUpIHtcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmxhdGVzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmdlU3RyYXRlZ3k6IG1lcmdlU2luZ2xlRW50aXR5LFxuICAgICAgfSk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdW5zdWJzY3JpYmU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaW5pdGlhbFByb21pc2U7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGdhc0NoYWluUHJpY2VzU3Vic2NyaXB0aW9uID0gbmV3IEdhc0NoYWluUHJpY2VzU3Vic2NyaXB0aW9uKCk7XG4iLCJpbXBvcnQgeyBldGhlcnMgfSBmcm9tICdldGhlcnMnO1xuaW1wb3J0IHsgbmV0d29ya3NTdG9yZSB9IGZyb20gJ3NyYy9tb2R1bGVzL25ldHdvcmtzL25ldHdvcmtzLXN0b3JlJztcbmltcG9ydCB0eXBlIHsgSW5jb21pbmdUcmFuc2FjdGlvbiB9IGZyb20gJy4uL3R5cGVzL0luY29taW5nVHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgYXNzaWduR2FzUHJpY2UgfSBmcm9tICcuL2dhc1ByaWNlcy9hc3NpZ25HYXNQcmljZSc7XG5pbXBvcnQgeyBnYXNDaGFpblByaWNlc1N1YnNjcmlwdGlvbiB9IGZyb20gJy4vZ2FzUHJpY2VzL3JlcXVlc3RzJztcblxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hHYXNQcmljZSh0cmFuc2FjdGlvbjogSW5jb21pbmdUcmFuc2FjdGlvbikge1xuICBjb25zdCB7IGNoYWluSWQgfSA9IHRyYW5zYWN0aW9uO1xuICBpZiAoIWNoYWluSWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zYWN0aW9uIG9iamVjdCBtdXN0IGhhdmUgYSBjaGFpbklkIHByb3BlcnR5Jyk7XG4gIH1cbiAgY29uc3QgW25ldHdvcmtzLCBnYXNDaGFpblByaWNlc10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgbmV0d29ya3NTdG9yZS5sb2FkKCksXG4gICAgZ2FzQ2hhaW5QcmljZXNTdWJzY3JpcHRpb24uZ2V0KCksXG4gIF0pO1xuICBjb25zdCBjaGFpbiA9IG5ldHdvcmtzLmdldENoYWluQnlJZChldGhlcnMudXRpbHMuaGV4VmFsdWUoY2hhaW5JZCkpO1xuICBjb25zdCBnYXNQcmljZXNJbmZvID0gZ2FzQ2hhaW5QcmljZXNbY2hhaW4udG9TdHJpbmcoKV07XG4gIGlmICghZ2FzUHJpY2VzSW5mbykge1xuICAgIHRocm93IG5ldyBFcnJvcihgR2FzIFByaWNlIGluZm8gZm9yICR7Y2hhaW4udG9TdHJpbmcoKX0gbm90IGZvdW5kYCk7XG4gIH1cbiAgcmV0dXJuIGdhc1ByaWNlc0luZm87XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaEFuZEFzc2lnbkdhc1ByaWNlKHRyYW5zYWN0aW9uOiBJbmNvbWluZ1RyYW5zYWN0aW9uKSB7XG4gIGNvbnN0IGdhc1ByaWNlc0luZm8gPSBhd2FpdCBmZXRjaEdhc1ByaWNlKHRyYW5zYWN0aW9uKTtcbiAgY29uc3QgeyBlaXAxNTU5LCBjbGFzc2ljIH0gPSBnYXNQcmljZXNJbmZvLmluZm87XG5cbiAgYXNzaWduR2FzUHJpY2UodHJhbnNhY3Rpb24sIHtcbiAgICBlaXAxNTU5OiBlaXAxNTU5Py5mYXN0LFxuICAgIGNsYXNzaWM6IGNsYXNzaWM/LmZhc3QsXG4gIH0pO1xufVxuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheU1hcDtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0NsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrRGVsZXRlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrR2V0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0hhcztcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBzdGFja0NsZWFyID0gcmVxdWlyZSgnLi9fc3RhY2tDbGVhcicpLFxuICAgIHN0YWNrRGVsZXRlID0gcmVxdWlyZSgnLi9fc3RhY2tEZWxldGUnKSxcbiAgICBzdGFja0dldCA9IHJlcXVpcmUoJy4vX3N0YWNrR2V0JyksXG4gICAgc3RhY2tIYXMgPSByZXF1aXJlKCcuL19zdGFja0hhcycpLFxuICAgIHN0YWNrU2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YWNrO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tTZXQ7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlFYWNoO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICBmdW5jKHt9LCAnJywge30pO1xuICAgIHJldHVybiBmdW5jO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVQcm9wZXJ0eTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2RlZmluZVByb3BlcnR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAqIHZhbHVlIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnblZhbHVlO1xuIiwidmFyIGJhc2VBc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25WYWx1ZScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnblZhbHVlO1xuIiwidmFyIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKTtcblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc05ldykge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weU9iamVjdDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRpbWVzO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3RMaWtlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNBcmd1bWVudHM7XG4iLCJ2YXIgYmFzZUlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9fYmFzZUlzQXJndW1lbnRzJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcmd1bWVudHM7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSW5kZXg7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNMZW5ndGg7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzVHlwZWRBcnJheTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5hcnk7XG4iLCJ2YXIgYmFzZUlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Jhc2VJc1R5cGVkQXJyYXknKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVHlwZWRBcnJheTtcbiIsInZhciBiYXNlVGltZXMgPSByZXF1aXJlKCcuL19iYXNlVGltZXMnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlMaWtlS2V5cztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1Byb3RvdHlwZTtcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5cztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJBcmc7XG4iLCJ2YXIgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuL19uYXRpdmVLZXlzJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5cztcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXlMaWtlO1xuIiwidmFyIGFycmF5TGlrZUtleXMgPSByZXF1aXJlKCcuL19hcnJheUxpa2VLZXlzJyksXG4gICAgYmFzZUtleXMgPSByZXF1aXJlKCcuL19iYXNlS2V5cycpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzO1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnbjtcbiIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXNJbjtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgbmF0aXZlS2V5c0luID0gcmVxdWlyZSgnLi9fbmF0aXZlS2V5c0luJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgfVxuICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICByZXN1bHQgPSBbXTtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUtleXNJbjtcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzSW4gPSByZXF1aXJlKCcuL19iYXNlS2V5c0luJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXNJbihuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNJbjtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25JbihvYmplY3QsIHNvdXJjZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQXNzaWduSW47XG4iLCIvKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5QXJyYXk7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlGaWx0ZXI7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gKiAvLyA9PiBbW10sIFtdXVxuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJBcnJheTtcbiIsInZhciBhcnJheUZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5RmlsdGVyJyksXG4gICAgc3R1YkFycmF5ID0gcmVxdWlyZSgnLi9zdHViQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFN5bWJvbHM7XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpO1xuXG4vKipcbiAqIENvcGllcyBvd24gc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weVN5bWJvbHM7XG4iLCIvKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlQdXNoO1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFByb3RvdHlwZTtcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpLFxuICAgIHN0dWJBcnJheSA9IHJlcXVpcmUoJy4vc3R1YkFycmF5Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHNJbiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgd2hpbGUgKG9iamVjdCkge1xuICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U3ltYm9sc0luO1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAgZ2V0U3ltYm9sc0luID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9sc0luJyk7XG5cbi8qKlxuICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlTeW1ib2xzSW4oc291cmNlLCBvYmplY3QpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5U3ltYm9sc0luO1xuIiwidmFyIGFycmF5UHVzaCA9IHJlcXVpcmUoJy4vX2FycmF5UHVzaCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRBbGxLZXlzO1xuIiwidmFyIGJhc2VHZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUdldEFsbEtleXMnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBbGxLZXlzO1xuIiwidmFyIGJhc2VHZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUdldEFsbEtleXMnKSxcbiAgICBnZXRTeW1ib2xzSW4gPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzSW4nKSxcbiAgICBrZXlzSW4gPSByZXF1aXJlKCcuL2tleXNJbicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0luLCBnZXRTeW1ib2xzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFsbEtleXNJbjtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVZpZXc7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldDtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYWtNYXA7XG4iLCJ2YXIgRGF0YVZpZXcgPSByZXF1aXJlKCcuL19EYXRhVmlldycpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIFByb21pc2UgPSByZXF1aXJlKCcuL19Qcm9taXNlJyksXG4gICAgU2V0ID0gcmVxdWlyZSgnLi9fU2V0JyksXG4gICAgV2Vha01hcCA9IHJlcXVpcmUoJy4vX1dlYWtNYXAnKSxcbiAgICBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIGFycmF5IGNsb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVBcnJheShhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgLy8gQWRkIHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICByZXN1bHQuaW5kZXggPSBhcnJheS5pbmRleDtcbiAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRDbG9uZUFycmF5O1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gVWludDhBcnJheTtcbiIsInZhciBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVBcnJheUJ1ZmZlcjtcbiIsInZhciBjbG9uZUFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVBcnJheUJ1ZmZlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgZGF0YSB2aWV3LlxuICovXG5mdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lRGF0YVZpZXc7XG4iLCIvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUZsYWdzID0gL1xcdyokLztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gKi9cbmZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lUmVnRXhwO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVTeW1ib2w7XG4iLCJ2YXIgY2xvbmVBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQXJyYXlCdWZmZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVR5cGVkQXJyYXk7XG4iLCJ2YXIgY2xvbmVBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQXJyYXlCdWZmZXInKSxcbiAgICBjbG9uZURhdGFWaWV3ID0gcmVxdWlyZSgnLi9fY2xvbmVEYXRhVmlldycpLFxuICAgIGNsb25lUmVnRXhwID0gcmVxdWlyZSgnLi9fY2xvbmVSZWdFeHAnKSxcbiAgICBjbG9uZVN5bWJvbCA9IHJlcXVpcmUoJy4vX2Nsb25lU3ltYm9sJyksXG4gICAgY2xvbmVUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9fY2xvbmVUeXBlZEFycmF5Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRDbG9uZUJ5VGFnO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICovXG52YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgfVxuICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VDcmVhdGU7XG4iLCJ2YXIgYmFzZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX2Jhc2VDcmVhdGUnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgOiB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0Q2xvbmVPYmplY3Q7XG4iLCJ2YXIgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTWFwO1xuIiwidmFyIGJhc2VJc01hcCA9IHJlcXVpcmUoJy4vX2Jhc2VJc01hcCcpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE1hcGAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNNYXAobmV3IE1hcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc01hcChuZXcgV2Vha01hcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNNYXAgPSBub2RlSXNNYXAgPyBiYXNlVW5hcnkobm9kZUlzTWFwKSA6IGJhc2VJc01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSBpc01hcDtcbiIsInZhciBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc2V0VGFnID0gJ1tvYmplY3QgU2V0XSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNTZXQ7XG4iLCJ2YXIgYmFzZUlzU2V0ID0gcmVxdWlyZSgnLi9fYmFzZUlzU2V0JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1NldCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzU2V0O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU2V0YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1NldChuZXcgU2V0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU2V0O1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBhcnJheUVhY2ggPSByZXF1aXJlKCcuL19hcnJheUVhY2gnKSxcbiAgICBhc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Fzc2lnblZhbHVlJyksXG4gICAgYmFzZUFzc2lnbiA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ24nKSxcbiAgICBiYXNlQXNzaWduSW4gPSByZXF1aXJlKCcuL19iYXNlQXNzaWduSW4nKSxcbiAgICBjbG9uZUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQnVmZmVyJyksXG4gICAgY29weUFycmF5ID0gcmVxdWlyZSgnLi9fY29weUFycmF5JyksXG4gICAgY29weVN5bWJvbHMgPSByZXF1aXJlKCcuL19jb3B5U3ltYm9scycpLFxuICAgIGNvcHlTeW1ib2xzSW4gPSByZXF1aXJlKCcuL19jb3B5U3ltYm9sc0luJyksXG4gICAgZ2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXMnKSxcbiAgICBnZXRBbGxLZXlzSW4gPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzSW4nKSxcbiAgICBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpbml0Q2xvbmVBcnJheSA9IHJlcXVpcmUoJy4vX2luaXRDbG9uZUFycmF5JyksXG4gICAgaW5pdENsb25lQnlUYWcgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVCeVRhZycpLFxuICAgIGluaXRDbG9uZU9iamVjdCA9IHJlcXVpcmUoJy4vX2luaXRDbG9uZU9iamVjdCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc01hcCA9IHJlcXVpcmUoJy4vaXNNYXAnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1NldCA9IHJlcXVpcmUoJy4vaXNTZXQnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyksXG4gICAga2V5c0luID0gcmVxdWlyZSgnLi9rZXlzSW4nKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbnZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xudmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbmNsb25lYWJsZVRhZ3NbYXJnc1RhZ10gPSBjbG9uZWFibGVUYWdzW2FycmF5VGFnXSA9XG5jbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbmNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbmNsb25lYWJsZVRhZ3NbZmxvYXQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW2Zsb2F0NjRUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG5jbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG5jbG9uZWFibGVUYWdzW251bWJlclRhZ10gPSBjbG9uZWFibGVUYWdzW29iamVjdFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbmNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuY2xvbmVhYmxlVGFnc1tlcnJvclRhZ10gPSBjbG9uZWFibGVUYWdzW2Z1bmNUYWddID1cbmNsb25lYWJsZVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIERlZXAgY2xvbmVcbiAqICAyIC0gRmxhdHRlbiBpbmhlcml0ZWQgcHJvcGVydGllc1xuICogIDQgLSBDbG9uZSBzeW1ib2xzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgcGFyZW50IG9iamVjdCBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICB2YXIgcmVzdWx0LFxuICAgICAgaXNEZWVwID0gYml0bWFzayAmIENMT05FX0RFRVBfRkxBRyxcbiAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICBpc0Z1bGwgPSBiaXRtYXNrICYgQ0xPTkVfU1lNQk9MU19GTEFHO1xuXG4gIGlmIChjdXN0b21pemVyKSB7XG4gICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICB9XG4gIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gIGlmIChpc0Fycikge1xuICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgfVxuICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBpc0ZsYXRcbiAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gIGlmIChzdGFja2VkKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQ7XG4gIH1cbiAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0LnNldChrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBrZXlzRnVuYyA9IGlzRnVsbFxuICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgOiAoaXNGbGF0ID8ga2V5c0luIDoga2V5cyk7XG5cbiAgdmFyIHByb3BzID0gaXNBcnIgPyB1bmRlZmluZWQgOiBrZXlzRnVuYyh2YWx1ZSk7XG4gIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgIGlmIChwcm9wcykge1xuICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUNsb25lO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3ltYm9sO1xuIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5O1xuIiwidmFyIG1lbW9pemVDYXBwZWQgPSByZXF1aXJlKCcuL19tZW1vaXplQ2FwcGVkJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG52YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICByZXN1bHQucHVzaCgnJyk7XG4gIH1cbiAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpbmdUb1BhdGg7XG4iLCJ2YXIgbWVtb2l6ZSA9IHJlcXVpcmUoJy4vbWVtb2l6ZScpO1xuXG4vKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG52YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICBjYWNoZS5jbGVhcigpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9KTtcblxuICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZUNhcHBlZDtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUb1N0cmluZztcbiIsInZhciBiYXNlVG9TdHJpbmcgPSByZXF1aXJlKCcuL19iYXNlVG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU3RyaW5nO1xuIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgc3RyaW5nVG9QYXRoID0gcmVxdWlyZSgnLi9fc3RyaW5nVG9QYXRoJyksXG4gICAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyk7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG5mdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdFBhdGg7XG4iLCIvKipcbiAqIEdldHMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IDNcbiAqL1xuZnVuY3Rpb24gbGFzdChhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gIHJldHVybiBsZW5ndGggPyBhcnJheVtsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsYXN0O1xuIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0tleTtcbiIsInZhciBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gMCxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gIH1cbiAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXQ7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gIH1cbiAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5ndGg7XG4gIH1cbiAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICBzdGFydCA+Pj49IDA7XG5cbiAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVNsaWNlO1xuIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0JyksXG4gICAgYmFzZVNsaWNlID0gcmVxdWlyZSgnLi9fYmFzZVNsaWNlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgcGFyZW50IHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheX0gcGF0aCBUaGUgcGF0aCB0byBnZXQgdGhlIHBhcmVudCB2YWx1ZSBvZi5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwYXJlbnQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHBhcmVudChvYmplY3QsIHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgubGVuZ3RoIDwgMiA/IG9iamVjdCA6IGJhc2VHZXQob2JqZWN0LCBiYXNlU2xpY2UocGF0aCwgMCwgLTEpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7XG4iLCJ2YXIgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIGxhc3QgPSByZXF1aXJlKCcuL2xhc3QnKSxcbiAgICBwYXJlbnQgPSByZXF1aXJlKCcuL19wYXJlbnQnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5zZXRgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHByb3BlcnR5IHBhdGggdG8gdW5zZXQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuc2V0KG9iamVjdCwgcGF0aCkge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCB8fCBkZWxldGUgb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5zZXQ7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQbGFpbk9iamVjdDtcbiIsInZhciBpc1BsYWluT2JqZWN0ID0gcmVxdWlyZSgnLi9pc1BsYWluT2JqZWN0Jyk7XG5cbi8qKlxuICogVXNlZCBieSBgXy5vbWl0YCB0byBjdXN0b21pemUgaXRzIGBfLmNsb25lRGVlcGAgdXNlIHRvIG9ubHkgY2xvbmUgcGxhaW5cbiAqIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW5jbG9uZWQgdmFsdWUgb3IgYHVuZGVmaW5lZGAgdG8gZGVmZXIgY2xvbmluZyB0byBgXy5jbG9uZURlZXBgLlxuICovXG5mdW5jdGlvbiBjdXN0b21PbWl0Q2xvbmUodmFsdWUpIHtcbiAgcmV0dXJuIGlzUGxhaW5PYmplY3QodmFsdWUpID8gdW5kZWZpbmVkIDogdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3VzdG9tT21pdENsb25lO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ByZWFkYWJsZVN5bWJvbCA9IFN5bWJvbCA/IFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmbGF0dGVuYWJsZSBgYXJndW1lbnRzYCBvYmplY3Qgb3IgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZmxhdHRlbmFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNGbGF0dGVuYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpIHx8XG4gICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGbGF0dGVuYWJsZTtcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBpc0ZsYXR0ZW5hYmxlID0gcmVxdWlyZSgnLi9faXNGbGF0dGVuYWJsZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZsYXR0ZW5gIHdpdGggc3VwcG9ydCBmb3IgcmVzdHJpY3RpbmcgZmxhdHRlbmluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICogQHBhcmFtIHtib29sZWFufSBbcHJlZGljYXRlPWlzRmxhdHRlbmFibGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgdG8gdmFsdWVzIHRoYXQgcGFzcyBgcHJlZGljYXRlYCBjaGVja3MuXG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChkZXB0aCA+IDAgJiYgcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgaWYgKGRlcHRoID4gMSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRmxhdHRlbjtcbiIsInZhciBiYXNlRmxhdHRlbiA9IHJlcXVpcmUoJy4vX2Jhc2VGbGF0dGVuJyk7XG5cbi8qKlxuICogRmxhdHRlbnMgYGFycmF5YCBhIHNpbmdsZSBsZXZlbCBkZWVwLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZmxhdHRlbihbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICovXG5mdW5jdGlvbiBmbGF0dGVuKGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCAxKSA6IFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW47XG4iLCIvKipcbiAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICovXG5mdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwbHk7XG4iLCJ2YXIgYXBwbHkgPSByZXF1aXJlKCcuL19hcHBseScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICB9XG4gICAgaW5kZXggPSAtMTtcbiAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgfVxuICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG92ZXJSZXN0O1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29uc3RhbnQ7XG4iLCJ2YXIgY29uc3RhbnQgPSByZXF1aXJlKCcuL2NvbnN0YW50JyksXG4gICAgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19kZWZpbmVQcm9wZXJ0eScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAnd3JpdGFibGUnOiB0cnVlXG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlU2V0VG9TdHJpbmc7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlkZW50aXR5O1xuIiwiLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xudmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICBIT1RfU1BBTiA9IDE2O1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTm93ID0gRGF0ZS5ub3c7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAqIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgdmFyIGNvdW50ID0gMCxcbiAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3J0T3V0O1xuIiwidmFyIGJhc2VTZXRUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VTZXRUb1N0cmluZycpLFxuICAgIHNob3J0T3V0ID0gcmVxdWlyZSgnLi9fc2hvcnRPdXQnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUb1N0cmluZztcbiIsInZhciBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgYmFzZUNsb25lID0gcmVxdWlyZSgnLi9fYmFzZUNsb25lJyksXG4gICAgYmFzZVVuc2V0ID0gcmVxdWlyZSgnLi9fYmFzZVVuc2V0JyksXG4gICAgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAgY3VzdG9tT21pdENsb25lID0gcmVxdWlyZSgnLi9fY3VzdG9tT21pdENsb25lJyksXG4gICAgZmxhdFJlc3QgPSByZXF1aXJlKCcuL19mbGF0UmVzdCcpLFxuICAgIGdldEFsbEtleXNJbiA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXNJbicpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKipcbiAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlXG4gKiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IHBhdGhzIG9mIGBvYmplY3RgIHRoYXQgYXJlIG5vdCBvbWl0dGVkLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBjb25zaWRlcmFibHkgc2xvd2VyIHRoYW4gYF8ucGlja2AuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIG9taXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAqXG4gKiBfLm9taXQob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAqIC8vID0+IHsgJ2InOiAnMicgfVxuICovXG52YXIgb21pdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIHZhciBpc0RlZXAgPSBmYWxzZTtcbiAgcGF0aHMgPSBhcnJheU1hcChwYXRocywgZnVuY3Rpb24ocGF0aCkge1xuICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgIGlzRGVlcCB8fCAoaXNEZWVwID0gcGF0aC5sZW5ndGggPiAxKTtcbiAgICByZXR1cm4gcGF0aDtcbiAgfSk7XG4gIGNvcHlPYmplY3Qob2JqZWN0LCBnZXRBbGxLZXlzSW4ob2JqZWN0KSwgcmVzdWx0KTtcbiAgaWYgKGlzRGVlcCkge1xuICAgIHJlc3VsdCA9IGJhc2VDbG9uZShyZXN1bHQsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX0ZMQVRfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9tT21pdENsb25lKTtcbiAgfVxuICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBiYXNlVW5zZXQocmVzdWx0LCBwYXRoc1tsZW5ndGhdKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gb21pdDtcbiIsInZhciBmbGF0dGVuID0gcmVxdWlyZSgnLi9mbGF0dGVuJyksXG4gICAgb3ZlclJlc3QgPSByZXF1aXJlKCcuL19vdmVyUmVzdCcpLFxuICAgIHNldFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fc2V0VG9TdHJpbmcnKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCBmbGF0dGVucyB0aGUgcmVzdCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBmbGF0UmVzdChmdW5jKSB7XG4gIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCB1bmRlZmluZWQsIGZsYXR0ZW4pLCBmdW5jICsgJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXRSZXN0O1xuIiwiaW1wb3J0IG9taXQgZnJvbSAnbG9kYXNoL29taXQnO1xuaW1wb3J0IHR5cGUgeyBUeXBlZERhdGEgfSBmcm9tICcuL1R5cGVkRGF0YSc7XG5cbmZ1bmN0aW9uIGlzVHlwZWREYXRhKGRhdGE6IFBhcnRpYWw8VHlwZWREYXRhPik6IGRhdGEgaXMgVHlwZWREYXRhIHtcbiAgcmV0dXJuIEJvb2xlYW4oZGF0YS5kb21haW4gJiYgZGF0YS5tZXNzYWdlICYmIGRhdGEudHlwZXMpO1xufVxuXG5mdW5jdGlvbiB0b1R5cGVkRGF0YShkYXRhOiBzdHJpbmcgfCBQYXJ0aWFsPFR5cGVkRGF0YT4pOiBUeXBlZERhdGEge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHR5cGVkRGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICByZXR1cm4gdHlwZWREYXRhIGFzIFR5cGVkRGF0YTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBwYXJzZSB0eXBlZERhdGEgaW5wdXQnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFpc1R5cGVkRGF0YShkYXRhKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd0eXBlZERhdGEgaW5wdXQgb2JqZWN0IGlzIGluY29tcGxldGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlVHlwZWREYXRhKGRhdGE6IHN0cmluZyB8IFBhcnRpYWw8VHlwZWREYXRhPik6IFR5cGVkRGF0YSB7XG4gIGNvbnN0IHR5cGVkRGF0YSA9IHRvVHlwZWREYXRhKGRhdGEpO1xuICByZXR1cm4ge1xuICAgIC4uLnR5cGVkRGF0YSxcbiAgICAvLyBXZSBuZWVkIHRvIHJlbW92ZSBcIkVJUDcxMkRvbWFpblwiIHByb3BlcnR5IGZyb20gdGhlIFwidHlwZXNcIiBvYmplY3RcbiAgICAvLyBiZWNhdXNlIGV0aGVycyBjb21wdXRlcyBpdCBhdXRvbWF0aWNhbGx5IGFuZCBjcmFzaGVzIGlmIHdlIGxlYXZlIGl0XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVycy1pby9ldGhlcnMuanMvaXNzdWVzLzY4NyNpc3N1ZWNvbW1lbnQtNzE0MDY5NDcxXG4gICAgdHlwZXM6IG9taXQodHlwZWREYXRhLnR5cGVzLCBbJ0VJUDcxMkRvbWFpbiddKSxcbiAgfTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBBYmlDb2RlciwgY2hlY2tSZXN1bHRFcnJvcnMsIENvbnN0cnVjdG9yRnJhZ21lbnQsIGRlZmF1bHRBYmlDb2RlciwgRXJyb3JGcmFnbWVudCwgRXZlbnRGcmFnbWVudCwgRm9ybWF0VHlwZXMsIEZyYWdtZW50LCBGdW5jdGlvbkZyYWdtZW50LCBJbmRleGVkLCBJbnRlcmZhY2UsIExvZ0Rlc2NyaXB0aW9uLCBQYXJhbVR5cGUsIFJlc3VsdCwgVHJhbnNhY3Rpb25EZXNjcmlwdGlvbiB9ZnJvbSBcIkBldGhlcnNwcm9qZWN0L2FiaVwiO1xuaW1wb3J0IHsgZ2V0QWRkcmVzcywgZ2V0Q3JlYXRlMkFkZHJlc3MsIGdldENvbnRyYWN0QWRkcmVzcywgZ2V0SWNhcEFkZHJlc3MsIGlzQWRkcmVzcyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hZGRyZXNzXCI7XG5pbXBvcnQgKiBhcyBiYXNlNjQgZnJvbSBcIkBldGhlcnNwcm9qZWN0L2Jhc2U2NFwiO1xuaW1wb3J0IHsgQmFzZTU4IGFzIGJhc2U1OCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9iYXNleFwiO1xuaW1wb3J0IHsgYXJyYXlpZnksIGNvbmNhdCwgaGV4Q29uY2F0LCBoZXhEYXRhU2xpY2UsIGhleERhdGFMZW5ndGgsIGhleGxpZnksIGhleFN0cmlwWmVyb3MsIGhleFZhbHVlLCBoZXhaZXJvUGFkLCBpc0J5dGVzLCBpc0J5dGVzTGlrZSwgaXNIZXhTdHJpbmcsIGpvaW5TaWduYXR1cmUsIHplcm9QYWQsIHNwbGl0U2lnbmF0dXJlLCBzdHJpcFplcm9zIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2J5dGVzXCI7XG5pbXBvcnQgeyBfVHlwZWREYXRhRW5jb2RlciwgZG5zRW5jb2RlLCBoYXNoTWVzc2FnZSwgaWQsIGlzVmFsaWROYW1lLCBuYW1laGFzaCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9oYXNoXCI7XG5pbXBvcnQgeyBkZWZhdWx0UGF0aCwgZW50cm9weVRvTW5lbW9uaWMsIGdldEFjY291bnRQYXRoLCBIRE5vZGUsIGlzVmFsaWRNbmVtb25pYywgbW5lbW9uaWNUb0VudHJvcHksIG1uZW1vbmljVG9TZWVkIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L2hkbm9kZVwiO1xuaW1wb3J0IHsgZ2V0SnNvbldhbGxldEFkZHJlc3MgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvanNvbi13YWxsZXRzXCI7XG5pbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qva2VjY2FrMjU2XCI7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvbG9nZ2VyXCI7XG5pbXBvcnQgeyBjb21wdXRlSG1hYywgcmlwZW1kMTYwLCBzaGEyNTYsIHNoYTUxMiB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9zaGEyXCI7XG5pbXBvcnQgeyBrZWNjYWsyNTYgYXMgc29saWRpdHlLZWNjYWsyNTYsIHBhY2sgYXMgc29saWRpdHlQYWNrLCBzaGEyNTYgYXMgc29saWRpdHlTaGEyNTYgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvc29saWRpdHlcIjtcbmltcG9ydCB7IHJhbmRvbUJ5dGVzLCBzaHVmZmxlZCB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9yYW5kb21cIjtcbmltcG9ydCB7IGNoZWNrUHJvcGVydGllcywgZGVlcENvcHksIGRlZmluZVJlYWRPbmx5LCBnZXRTdGF0aWMsIHJlc29sdmVQcm9wZXJ0aWVzLCBzaGFsbG93Q29weSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9wcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSTFAgZnJvbSBcIkBldGhlcnNwcm9qZWN0L3JscFwiO1xuaW1wb3J0IHsgY29tcHV0ZVB1YmxpY0tleSwgcmVjb3ZlclB1YmxpY0tleSwgU2lnbmluZ0tleSB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9zaWduaW5nLWtleVwiO1xuaW1wb3J0IHsgZm9ybWF0Qnl0ZXMzMlN0cmluZywgbmFtZXByZXAsIHBhcnNlQnl0ZXMzMlN0cmluZywgX3RvRXNjYXBlZFV0ZjhTdHJpbmcsIHRvVXRmOEJ5dGVzLCB0b1V0ZjhDb2RlUG9pbnRzLCB0b1V0ZjhTdHJpbmcsIFV0ZjhFcnJvckZ1bmNzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3N0cmluZ3NcIjtcbmltcG9ydCB7IGFjY2Vzc0xpc3RpZnksIGNvbXB1dGVBZGRyZXNzLCBwYXJzZSBhcyBwYXJzZVRyYW5zYWN0aW9uLCByZWNvdmVyQWRkcmVzcywgc2VyaWFsaXplIGFzIHNlcmlhbGl6ZVRyYW5zYWN0aW9uLCBUcmFuc2FjdGlvblR5cGVzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3RyYW5zYWN0aW9uc1wiO1xuaW1wb3J0IHsgY29tbWlmeSwgZm9ybWF0RXRoZXIsIHBhcnNlRXRoZXIsIGZvcm1hdFVuaXRzLCBwYXJzZVVuaXRzIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3VuaXRzXCI7XG5pbXBvcnQgeyB2ZXJpZnlNZXNzYWdlLCB2ZXJpZnlUeXBlZERhdGEgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvd2FsbGV0XCI7XG5pbXBvcnQgeyBfZmV0Y2hEYXRhLCBmZXRjaEpzb24sIHBvbGwgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3Qvd2ViXCI7XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRW51bXNcblxuaW1wb3J0IHsgU3VwcG9ydGVkQWxnb3JpdGhtIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3NoYTJcIjtcbmltcG9ydCB7IFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybSwgVXRmOEVycm9yUmVhc29uIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3N0cmluZ3NcIjtcbmltcG9ydCB7IFVuc2lnbmVkVHJhbnNhY3Rpb24gfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvdHJhbnNhY3Rpb25zXCI7XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gVHlwZXMgYW5kIEludGVyZmFjZXNcblxuaW1wb3J0IHsgQ29lcmNlRnVuYyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9hYmlcIjtcbmltcG9ydCB7IEJ5dGVzLCBCeXRlc0xpa2UsIEhleGFibGUgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvYnl0ZXNcIlxuaW1wb3J0IHsgTW5lbW9uaWMgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvaGRub2RlXCI7XG5pbXBvcnQgeyBFbmNyeXB0T3B0aW9ucywgUHJvZ3Jlc3NDYWxsYmFjayB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9qc29uLXdhbGxldHNcIjtcbmltcG9ydCB7IERlZmVycmFibGUgfSBmcm9tIFwiQGV0aGVyc3Byb2plY3QvcHJvcGVydGllc1wiO1xuaW1wb3J0IHsgVXRmOEVycm9yRnVuYyB9IGZyb20gXCJAZXRoZXJzcHJvamVjdC9zdHJpbmdzXCI7XG5pbXBvcnQgeyBBY2Nlc3NMaXN0LCBBY2Nlc3NMaXN0aXNoIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3RyYW5zYWN0aW9uc1wiO1xuaW1wb3J0IHsgQ29ubmVjdGlvbkluZm8sIEZldGNoSnNvblJlc3BvbnNlLCBPbmNlQmxvY2thYmxlLCBPbmNlUG9sbGFibGUsIFBvbGxPcHRpb25zIH0gZnJvbSBcIkBldGhlcnNwcm9qZWN0L3dlYlwiO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEV4cG9ydHNcblxuZXhwb3J0IHtcbiAgICBBYmlDb2RlcixcbiAgICBkZWZhdWx0QWJpQ29kZXIsXG5cbiAgICBGcmFnbWVudCxcbiAgICBDb25zdHJ1Y3RvckZyYWdtZW50LFxuICAgIEVycm9yRnJhZ21lbnQsXG4gICAgRXZlbnRGcmFnbWVudCxcbiAgICBGdW5jdGlvbkZyYWdtZW50LFxuICAgIFBhcmFtVHlwZSxcbiAgICBGb3JtYXRUeXBlcyxcblxuICAgIGNoZWNrUmVzdWx0RXJyb3JzLFxuICAgIFJlc3VsdCxcblxuICAgIExvZ2dlcixcblxuICAgIFJMUCxcblxuICAgIF9mZXRjaERhdGEsXG4gICAgZmV0Y2hKc29uLFxuICAgIHBvbGwsXG5cbiAgICBjaGVja1Byb3BlcnRpZXMsXG4gICAgZGVlcENvcHksXG4gICAgZGVmaW5lUmVhZE9ubHksXG4gICAgZ2V0U3RhdGljLFxuICAgIHJlc29sdmVQcm9wZXJ0aWVzLFxuICAgIHNoYWxsb3dDb3B5LFxuXG4gICAgYXJyYXlpZnksXG5cbiAgICBjb25jYXQsXG4gICAgc3RyaXBaZXJvcyxcbiAgICB6ZXJvUGFkLFxuXG4gICAgaXNCeXRlcyxcbiAgICBpc0J5dGVzTGlrZSxcblxuICAgIGRlZmF1bHRQYXRoLFxuICAgIEhETm9kZSxcbiAgICBTaWduaW5nS2V5LFxuXG4gICAgSW50ZXJmYWNlLFxuXG4gICAgTG9nRGVzY3JpcHRpb24sXG4gICAgVHJhbnNhY3Rpb25EZXNjcmlwdGlvbixcblxuICAgIGJhc2U1OCxcbiAgICBiYXNlNjQsXG5cbiAgICBoZXhsaWZ5LFxuICAgIGlzSGV4U3RyaW5nLFxuICAgIGhleENvbmNhdCxcbiAgICBoZXhTdHJpcFplcm9zLFxuICAgIGhleFZhbHVlLFxuICAgIGhleFplcm9QYWQsXG4gICAgaGV4RGF0YUxlbmd0aCxcbiAgICBoZXhEYXRhU2xpY2UsXG5cbiAgICBuYW1lcHJlcCxcbiAgICBfdG9Fc2NhcGVkVXRmOFN0cmluZyxcbiAgICB0b1V0ZjhCeXRlcyxcbiAgICB0b1V0ZjhDb2RlUG9pbnRzLFxuICAgIHRvVXRmOFN0cmluZyxcbiAgICBVdGY4RXJyb3JGdW5jcyxcblxuICAgIGZvcm1hdEJ5dGVzMzJTdHJpbmcsXG4gICAgcGFyc2VCeXRlczMyU3RyaW5nLFxuXG4gICAgZG5zRW5jb2RlLFxuICAgIGhhc2hNZXNzYWdlLFxuICAgIG5hbWVoYXNoLFxuICAgIGlzVmFsaWROYW1lLFxuICAgIGlkLFxuXG4gICAgX1R5cGVkRGF0YUVuY29kZXIsXG5cbiAgICBnZXRBZGRyZXNzLFxuICAgIGdldEljYXBBZGRyZXNzLFxuICAgIGdldENvbnRyYWN0QWRkcmVzcyxcbiAgICBnZXRDcmVhdGUyQWRkcmVzcyxcbiAgICBpc0FkZHJlc3MsXG5cbiAgICBmb3JtYXRFdGhlcixcbiAgICBwYXJzZUV0aGVyLFxuXG4gICAgZm9ybWF0VW5pdHMsXG4gICAgcGFyc2VVbml0cyxcblxuICAgIGNvbW1pZnksXG5cbiAgICBjb21wdXRlSG1hYyxcbiAgICBrZWNjYWsyNTYsXG4gICAgcmlwZW1kMTYwLFxuICAgIHNoYTI1NixcbiAgICBzaGE1MTIsXG5cbiAgICByYW5kb21CeXRlcyxcbiAgICBzaHVmZmxlZCxcblxuICAgIHNvbGlkaXR5UGFjayxcbiAgICBzb2xpZGl0eUtlY2NhazI1NixcbiAgICBzb2xpZGl0eVNoYTI1NixcblxuICAgIHNwbGl0U2lnbmF0dXJlLFxuICAgIGpvaW5TaWduYXR1cmUsXG5cbiAgICBhY2Nlc3NMaXN0aWZ5LFxuICAgIHBhcnNlVHJhbnNhY3Rpb24sXG4gICAgc2VyaWFsaXplVHJhbnNhY3Rpb24sXG4gICAgVHJhbnNhY3Rpb25UeXBlcyxcblxuICAgIGdldEpzb25XYWxsZXRBZGRyZXNzLFxuXG4gICAgY29tcHV0ZUFkZHJlc3MsXG4gICAgcmVjb3ZlckFkZHJlc3MsXG5cbiAgICBjb21wdXRlUHVibGljS2V5LFxuICAgIHJlY292ZXJQdWJsaWNLZXksXG5cbiAgICB2ZXJpZnlNZXNzYWdlLFxuICAgIHZlcmlmeVR5cGVkRGF0YSxcblxuICAgIGdldEFjY291bnRQYXRoLFxuICAgIG1uZW1vbmljVG9FbnRyb3B5LFxuICAgIGVudHJvcHlUb01uZW1vbmljLFxuICAgIGlzVmFsaWRNbmVtb25pYyxcbiAgICBtbmVtb25pY1RvU2VlZCxcblxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gRW51bXNcblxuICAgIFN1cHBvcnRlZEFsZ29yaXRobSxcblxuICAgIFVuaWNvZGVOb3JtYWxpemF0aW9uRm9ybSxcbiAgICBVdGY4RXJyb3JSZWFzb24sXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBUeXBlc1xuXG4gICAgQnl0ZXMsXG4gICAgQnl0ZXNMaWtlLFxuICAgIEhleGFibGUsXG5cbiAgICBBY2Nlc3NMaXN0LFxuICAgIEFjY2Vzc0xpc3Rpc2gsXG4gICAgVW5zaWduZWRUcmFuc2FjdGlvbixcblxuICAgIENvZXJjZUZ1bmMsXG5cbiAgICBJbmRleGVkLFxuXG4gICAgTW5lbW9uaWMsXG5cbiAgICBEZWZlcnJhYmxlLFxuXG4gICAgVXRmOEVycm9yRnVuYyxcblxuICAgIENvbm5lY3Rpb25JbmZvLFxuICAgIE9uY2VCbG9ja2FibGUsXG4gICAgT25jZVBvbGxhYmxlLFxuICAgIFBvbGxPcHRpb25zLFxuICAgIEZldGNoSnNvblJlc3BvbnNlLFxuXG4gICAgRW5jcnlwdE9wdGlvbnMsXG4gICAgUHJvZ3Jlc3NDYWxsYmFja1xufVxuXG4iLCJleHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplQWRkcmVzcyhhZGRyZXNzOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGFkZHJlc3Muc3RhcnRzV2l0aCgnMHgnKSA/IGFkZHJlc3MudG9Mb3dlckNhc2UoKSA6IGFkZHJlc3M7XG59XG4iLCJpbXBvcnQgeyBldGhlcnMgfSBmcm9tICdldGhlcnMnO1xuaW1wb3J0IHR5cGUgeyBDaGFpbiB9IGZyb20gJ3NyYy9tb2R1bGVzL25ldHdvcmtzL0NoYWluJztcbmltcG9ydCB7IG5ldHdvcmtzU3RvcmUgfSBmcm9tICdzcmMvbW9kdWxlcy9uZXR3b3Jrcy9uZXR3b3Jrcy1zdG9yZSc7XG5pbXBvcnQgdHlwZSB7IEluY29taW5nVHJhbnNhY3Rpb24gfSBmcm9tICcuLi90eXBlcy9JbmNvbWluZ1RyYW5zYWN0aW9uJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zYWN0aW9uQ2hhaW5JZChcbiAgdHJhbnNhY3Rpb246IEluY29taW5nVHJhbnNhY3Rpb25cbik6IHN0cmluZyB8IG51bGwge1xuICByZXR1cm4gdHJhbnNhY3Rpb24uY2hhaW5JZFxuICAgID8gZXRoZXJzLnV0aWxzLmhleFZhbHVlKHRyYW5zYWN0aW9uLmNoYWluSWQpXG4gICAgOiBudWxsO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZUNoYWluRm9yVHgoXG4gIHRyYW5zYWN0aW9uOiBJbmNvbWluZ1RyYW5zYWN0aW9uLFxuICBvcmlnaW5DaGFpbjogQ2hhaW5cbik6IFByb21pc2U8Q2hhaW4+IHtcbiAgY29uc3QgbmV0d29ya3MgPSBhd2FpdCBuZXR3b3Jrc1N0b3JlLmxvYWQoKTtcbiAgY29uc3QgdGFyZ2V0Q2hhaW5JZCA9IGdldFRyYW5zYWN0aW9uQ2hhaW5JZCh0cmFuc2FjdGlvbik7XG4gIHJldHVybiB0YXJnZXRDaGFpbklkID8gbmV0d29ya3MuZ2V0Q2hhaW5CeUlkKHRhcmdldENoYWluSWQpIDogb3JpZ2luQ2hhaW47XG59XG4iLCJpbXBvcnQgdHlwZSB7IGV0aGVycyB9IGZyb20gJ2V0aGVycyc7XG5pbXBvcnQgeyBjcmVhdGVOYW5vRXZlbnRzIH0gZnJvbSAnbmFub2V2ZW50cyc7XG5cbnR5cGUgVHJhbnNhY3Rpb25SZXNwb25zZSA9IGV0aGVycy5wcm92aWRlcnMuVHJhbnNhY3Rpb25SZXNwb25zZTtcbnR5cGUgVHJhbnNhY3Rpb25SZWNlaXB0ID0gZXRoZXJzLnByb3ZpZGVycy5UcmFuc2FjdGlvblJlY2VpcHQ7XG5cbmV4cG9ydCBjb25zdCBlbWl0dGVyID0gY3JlYXRlTmFub0V2ZW50czx7XG4gIGFjY291bnRzQ2hhbmdlZDogKCkgPT4gdm9pZDtcbiAgY2hhaW5DaGFuZ2VkOiAoKSA9PiB2b2lkO1xuICBwZW5kaW5nVHJhbnNhY3Rpb25DcmVhdGVkOiAodHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uUmVzcG9uc2UpID0+IHZvaWQ7XG4gIHRyYW5zYWN0aW9uTWluZWQ6ICh0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb25SZWNlaXB0KSA9PiB2b2lkO1xuICB1c2VyQWN0aXZpdHk6ICgpID0+IHZvaWQ7XG59PigpO1xuXG5PYmplY3QuYXNzaWduKHdpbmRvdywgeyBlbWl0dGVyIH0pO1xuIiwiaW1wb3J0IHsgZXRoZXJzIH0gZnJvbSAnZXRoZXJzJztcbmltcG9ydCB0eXBlIHsgQmFyZVdhbGxldCB9IGZyb20gJy4uL21vZGVsL3R5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHRvRXRoZXJzV2FsbGV0KHdhbGxldDogQmFyZVdhbGxldCk6IGV0aGVycy5XYWxsZXQge1xuICBjb25zdCB7IHByaXZhdGVLZXkgfSA9IHdhbGxldDtcbiAgLy8gTk9URTpcbiAgLy8gZXRoZXJzIFdhbGxldCBjYW4gYmUgY3JlYXRlZCBmcm9tIGVpdGhlciBwcml2YXRlS2V5IG9yIGEgbW5lbW9uaWNcbiAgLy8gYnV0IGJlY2F1c2Ugd2Uga2VlcCBtbmVtb25pYyBwaHJhc2VzIGVuY3J5cHRlZCwgdGhpcyBoZWxwZXIgaXMgdXNlZFxuICAvLyB0byBjcmVhdGUgYSBzaWduZXIsIGZvciB3aGljaCBhIHByaXZhdGUga2V5IGlzIGVub3VnaC4gQWxsIG1uZW1vbmljIHdhbGxldHNcbiAgLy8gaGF2ZSBhIHByaXZhdGUga2V5LCBzbyB3ZSBkb24ndCB0cnkgdG8gYWNjZXNzIG1uZW1vbmljIGhlcmUuXG4gIHJldHVybiBuZXcgZXRoZXJzLldhbGxldChwcml2YXRlS2V5KTtcbn1cbiIsImNvbnN0IGVycm9ycyA9IHtcblx0MDogXCJJbGxlZ2FsIHN0YXRlXCIsXG5cdDE6IFwiSW1tZXIgZHJhZnRzIGNhbm5vdCBoYXZlIGNvbXB1dGVkIHByb3BlcnRpZXNcIixcblx0MjogXCJUaGlzIG9iamVjdCBoYXMgYmVlbiBmcm96ZW4gYW5kIHNob3VsZCBub3QgYmUgbXV0YXRlZFwiLFxuXHQzKGRhdGE6IGFueSkge1xuXHRcdHJldHVybiAoXG5cdFx0XHRcIkNhbm5vdCB1c2UgYSBwcm94eSB0aGF0IGhhcyBiZWVuIHJldm9rZWQuIERpZCB5b3UgcGFzcyBhbiBvYmplY3QgZnJvbSBpbnNpZGUgYW4gaW1tZXIgZnVuY3Rpb24gdG8gYW4gYXN5bmMgcHJvY2Vzcz8gXCIgK1xuXHRcdFx0ZGF0YVxuXHRcdClcblx0fSxcblx0NDogXCJBbiBpbW1lciBwcm9kdWNlciByZXR1cm5lZCBhIG5ldyB2YWx1ZSAqYW5kKiBtb2RpZmllZCBpdHMgZHJhZnQuIEVpdGhlciByZXR1cm4gYSBuZXcgdmFsdWUgKm9yKiBtb2RpZnkgdGhlIGRyYWZ0LlwiLFxuXHQ1OiBcIkltbWVyIGZvcmJpZHMgY2lyY3VsYXIgcmVmZXJlbmNlc1wiLFxuXHQ2OiBcIlRoZSBmaXJzdCBvciBzZWNvbmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvblwiLFxuXHQ3OiBcIlRoZSB0aGlyZCBhcmd1bWVudCB0byBgcHJvZHVjZWAgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIHVuZGVmaW5lZFwiLFxuXHQ4OiBcIkZpcnN0IGFyZ3VtZW50IHRvIGBjcmVhdGVEcmFmdGAgbXVzdCBiZSBhIHBsYWluIG9iamVjdCwgYW4gYXJyYXksIG9yIGFuIGltbWVyYWJsZSBvYmplY3RcIixcblx0OTogXCJGaXJzdCBhcmd1bWVudCB0byBgZmluaXNoRHJhZnRgIG11c3QgYmUgYSBkcmFmdCByZXR1cm5lZCBieSBgY3JlYXRlRHJhZnRgXCIsXG5cdDEwOiBcIlRoZSBnaXZlbiBkcmFmdCBpcyBhbHJlYWR5IGZpbmFsaXplZFwiLFxuXHQxMTogXCJPYmplY3QuZGVmaW5lUHJvcGVydHkoKSBjYW5ub3QgYmUgdXNlZCBvbiBhbiBJbW1lciBkcmFmdFwiLFxuXHQxMjogXCJPYmplY3Quc2V0UHJvdG90eXBlT2YoKSBjYW5ub3QgYmUgdXNlZCBvbiBhbiBJbW1lciBkcmFmdFwiLFxuXHQxMzogXCJJbW1lciBvbmx5IHN1cHBvcnRzIGRlbGV0aW5nIGFycmF5IGluZGljZXNcIixcblx0MTQ6IFwiSW1tZXIgb25seSBzdXBwb3J0cyBzZXR0aW5nIGFycmF5IGluZGljZXMgYW5kIHRoZSAnbGVuZ3RoJyBwcm9wZXJ0eVwiLFxuXHQxNShwYXRoOiBzdHJpbmcpIHtcblx0XHRyZXR1cm4gXCJDYW5ub3QgYXBwbHkgcGF0Y2gsIHBhdGggZG9lc24ndCByZXNvbHZlOiBcIiArIHBhdGhcblx0fSxcblx0MTY6ICdTZXRzIGNhbm5vdCBoYXZlIFwicmVwbGFjZVwiIHBhdGNoZXMuJyxcblx0MTcob3A6IHN0cmluZykge1xuXHRcdHJldHVybiBcIlVuc3VwcG9ydGVkIHBhdGNoIG9wZXJhdGlvbjogXCIgKyBvcFxuXHR9LFxuXHQxOChwbHVnaW46IHN0cmluZykge1xuXHRcdHJldHVybiBgVGhlIHBsdWdpbiBmb3IgJyR7cGx1Z2lufScgaGFzIG5vdCBiZWVuIGxvYWRlZCBpbnRvIEltbWVyLiBUbyBlbmFibGUgdGhlIHBsdWdpbiwgaW1wb3J0IGFuZCBjYWxsIFxcYGVuYWJsZSR7cGx1Z2lufSgpXFxgIHdoZW4gaW5pdGlhbGl6aW5nIHlvdXIgYXBwbGljYXRpb24uYFxuXHR9LFxuXHQyMDogXCJDYW5ub3QgdXNlIHByb3hpZXMgaWYgUHJveHksIFByb3h5LnJldm9jYWJsZSBvciBSZWZsZWN0IGFyZSBub3QgYXZhaWxhYmxlXCIsXG5cdDIxKHRoaW5nOiBzdHJpbmcpIHtcblx0XHRyZXR1cm4gYHByb2R1Y2UgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHRoaW5ncyB0aGF0IGFyZSBkcmFmdGFibGU6IHBsYWluIG9iamVjdHMsIGFycmF5cywgTWFwLCBTZXQgb3IgY2xhc3NlcyB0aGF0IGFyZSBtYXJrZWQgd2l0aCAnW2ltbWVyYWJsZV06IHRydWUnLiBHb3QgJyR7dGhpbmd9J2Bcblx0fSxcblx0MjIodGhpbmc6IHN0cmluZykge1xuXHRcdHJldHVybiBgJ2N1cnJlbnQnIGV4cGVjdHMgYSBkcmFmdCwgZ290OiAke3RoaW5nfWBcblx0fSxcblx0MjModGhpbmc6IHN0cmluZykge1xuXHRcdHJldHVybiBgJ29yaWdpbmFsJyBleHBlY3RzIGEgZHJhZnQsIGdvdDogJHt0aGluZ31gXG5cdH0sXG5cdDI0OiBcIlBhdGNoaW5nIHJlc2VydmVkIGF0dHJpYnV0ZXMgbGlrZSBfX3Byb3RvX18sIHByb3RvdHlwZSBhbmQgY29uc3RydWN0b3IgaXMgbm90IGFsbG93ZWRcIlxufSBhcyBjb25zdFxuXG5leHBvcnQgZnVuY3Rpb24gZGllKGVycm9yOiBrZXlvZiB0eXBlb2YgZXJyb3JzLCAuLi5hcmdzOiBhbnlbXSk6IG5ldmVyIHtcblx0aWYgKF9fREVWX18pIHtcblx0XHRjb25zdCBlID0gZXJyb3JzW2Vycm9yXVxuXHRcdGNvbnN0IG1zZyA9ICFlXG5cdFx0XHQ/IFwidW5rbm93biBlcnJvciBucjogXCIgKyBlcnJvclxuXHRcdFx0OiB0eXBlb2YgZSA9PT0gXCJmdW5jdGlvblwiXG5cdFx0XHQ/IGUuYXBwbHkobnVsbCwgYXJncyBhcyBhbnkpXG5cdFx0XHQ6IGVcblx0XHR0aHJvdyBuZXcgRXJyb3IoYFtJbW1lcl0gJHttc2d9YClcblx0fVxuXHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0YFtJbW1lcl0gbWluaWZpZWQgZXJyb3IgbnI6ICR7ZXJyb3J9JHtcblx0XHRcdGFyZ3MubGVuZ3RoID8gXCIgXCIgKyBhcmdzLm1hcChzID0+IGAnJHtzfSdgKS5qb2luKFwiLFwiKSA6IFwiXCJcblx0XHR9LiBGaW5kIHRoZSBmdWxsIGVycm9yIGF0OiBodHRwczovL2JpdC5seS8zY1hFS1dmYFxuXHQpXG59XG4iLCJpbXBvcnQge1xuXHREUkFGVF9TVEFURSxcblx0RFJBRlRBQkxFLFxuXHRoYXNTZXQsXG5cdE9iamVjdGlzaCxcblx0RHJhZnRlZCxcblx0QW55T2JqZWN0LFxuXHRBbnlNYXAsXG5cdEFueVNldCxcblx0SW1tZXJTdGF0ZSxcblx0aGFzTWFwLFxuXHRBcmNodHlwZSxcblx0ZGllXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbi8qKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIEltbWVyIGRyYWZ0ICovXG4vKiNfX1BVUkVfXyovXG5leHBvcnQgZnVuY3Rpb24gaXNEcmFmdCh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG5cdHJldHVybiAhIXZhbHVlICYmICEhdmFsdWVbRFJBRlRfU1RBVEVdXG59XG5cbi8qKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGNhbiBiZSBkcmFmdGVkIGJ5IEltbWVyICovXG4vKiNfX1BVUkVfXyovXG5leHBvcnQgZnVuY3Rpb24gaXNEcmFmdGFibGUodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuXHRpZiAoIXZhbHVlKSByZXR1cm4gZmFsc2Vcblx0cmV0dXJuIChcblx0XHRpc1BsYWluT2JqZWN0KHZhbHVlKSB8fFxuXHRcdEFycmF5LmlzQXJyYXkodmFsdWUpIHx8XG5cdFx0ISF2YWx1ZVtEUkFGVEFCTEVdIHx8XG5cdFx0ISF2YWx1ZS5jb25zdHJ1Y3RvcltEUkFGVEFCTEVdIHx8XG5cdFx0aXNNYXAodmFsdWUpIHx8XG5cdFx0aXNTZXQodmFsdWUpXG5cdClcbn1cblxuY29uc3Qgb2JqZWN0Q3RvclN0cmluZyA9IE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IudG9TdHJpbmcoKVxuLyojX19QVVJFX18qL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuXHRpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIikgcmV0dXJuIGZhbHNlXG5cdGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKVxuXHRpZiAocHJvdG8gPT09IG51bGwpIHtcblx0XHRyZXR1cm4gdHJ1ZVxuXHR9XG5cdGNvbnN0IEN0b3IgPVxuXHRcdE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCBcImNvbnN0cnVjdG9yXCIpICYmIHByb3RvLmNvbnN0cnVjdG9yXG5cblx0aWYgKEN0b3IgPT09IE9iamVjdCkgcmV0dXJuIHRydWVcblxuXHRyZXR1cm4gKFxuXHRcdHR5cGVvZiBDdG9yID09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoQ3RvcikgPT09IG9iamVjdEN0b3JTdHJpbmdcblx0KVxufVxuXG4vKiogR2V0IHRoZSB1bmRlcmx5aW5nIG9iamVjdCB0aGF0IGlzIHJlcHJlc2VudGVkIGJ5IHRoZSBnaXZlbiBkcmFmdCAqL1xuLyojX19QVVJFX18qL1xuZXhwb3J0IGZ1bmN0aW9uIG9yaWdpbmFsPFQ+KHZhbHVlOiBUKTogVCB8IHVuZGVmaW5lZFxuZXhwb3J0IGZ1bmN0aW9uIG9yaWdpbmFsKHZhbHVlOiBEcmFmdGVkPGFueT4pOiBhbnkge1xuXHRpZiAoIWlzRHJhZnQodmFsdWUpKSBkaWUoMjMsIHZhbHVlKVxuXHRyZXR1cm4gdmFsdWVbRFJBRlRfU1RBVEVdLmJhc2VfXG59XG5cbi8qI19fUFVSRV9fKi9cbmV4cG9ydCBjb25zdCBvd25LZXlzOiAodGFyZ2V0OiBBbnlPYmplY3QpID0+IFByb3BlcnR5S2V5W10gPVxuXHR0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0Lm93bktleXNcblx0XHQ/IFJlZmxlY3Qub3duS2V5c1xuXHRcdDogdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09IFwidW5kZWZpbmVkXCJcblx0XHQ/IG9iaiA9PlxuXHRcdFx0XHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmNvbmNhdChcblx0XHRcdFx0XHRPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaikgYXMgYW55XG5cdFx0XHRcdClcblx0XHQ6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG5cbmV4cG9ydCBjb25zdCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID1cblx0T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgfHxcblx0ZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0YXJnZXQ6IGFueSkge1xuXHRcdC8vIFBvbHlmaWxsIG5lZWRlZCBmb3IgSGVybWVzIGFuZCBJRSwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9oZXJtZXMvaXNzdWVzLzI3NFxuXHRcdGNvbnN0IHJlczogYW55ID0ge31cblx0XHRvd25LZXlzKHRhcmdldCkuZm9yRWFjaChrZXkgPT4ge1xuXHRcdFx0cmVzW2tleV0gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KVxuXHRcdH0pXG5cdFx0cmV0dXJuIHJlc1xuXHR9XG5cbmV4cG9ydCBmdW5jdGlvbiBlYWNoPFQgZXh0ZW5kcyBPYmplY3Rpc2g+KFxuXHRvYmo6IFQsXG5cdGl0ZXI6IChrZXk6IHN0cmluZyB8IG51bWJlciwgdmFsdWU6IGFueSwgc291cmNlOiBUKSA9PiB2b2lkLFxuXHRlbnVtZXJhYmxlT25seT86IGJvb2xlYW5cbik6IHZvaWRcbmV4cG9ydCBmdW5jdGlvbiBlYWNoKG9iajogYW55LCBpdGVyOiBhbnksIGVudW1lcmFibGVPbmx5ID0gZmFsc2UpIHtcblx0aWYgKGdldEFyY2h0eXBlKG9iaikgPT09IEFyY2h0eXBlLk9iamVjdCkge1xuXHRcdDsoZW51bWVyYWJsZU9ubHkgPyBPYmplY3Qua2V5cyA6IG93bktleXMpKG9iaikuZm9yRWFjaChrZXkgPT4ge1xuXHRcdFx0aWYgKCFlbnVtZXJhYmxlT25seSB8fCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiKSBpdGVyKGtleSwgb2JqW2tleV0sIG9iailcblx0XHR9KVxuXHR9IGVsc2Uge1xuXHRcdG9iai5mb3JFYWNoKChlbnRyeTogYW55LCBpbmRleDogYW55KSA9PiBpdGVyKGluZGV4LCBlbnRyeSwgb2JqKSlcblx0fVxufVxuXG4vKiNfX1BVUkVfXyovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXJjaHR5cGUodGhpbmc6IGFueSk6IEFyY2h0eXBlIHtcblx0LyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0Y29uc3Qgc3RhdGU6IHVuZGVmaW5lZCB8IEltbWVyU3RhdGUgPSB0aGluZ1tEUkFGVF9TVEFURV1cblx0cmV0dXJuIHN0YXRlXG5cdFx0PyBzdGF0ZS50eXBlXyA+IDNcblx0XHRcdD8gc3RhdGUudHlwZV8gLSA0IC8vIGNhdXNlIE9iamVjdCBhbmQgQXJyYXkgbWFwIGJhY2sgZnJvbSA0IGFuZCA1XG5cdFx0XHQ6IChzdGF0ZS50eXBlXyBhcyBhbnkpIC8vIG90aGVycyBhcmUgdGhlIHNhbWVcblx0XHQ6IEFycmF5LmlzQXJyYXkodGhpbmcpXG5cdFx0PyBBcmNodHlwZS5BcnJheVxuXHRcdDogaXNNYXAodGhpbmcpXG5cdFx0PyBBcmNodHlwZS5NYXBcblx0XHQ6IGlzU2V0KHRoaW5nKVxuXHRcdD8gQXJjaHR5cGUuU2V0XG5cdFx0OiBBcmNodHlwZS5PYmplY3Rcbn1cblxuLyojX19QVVJFX18qL1xuZXhwb3J0IGZ1bmN0aW9uIGhhcyh0aGluZzogYW55LCBwcm9wOiBQcm9wZXJ0eUtleSk6IGJvb2xlYW4ge1xuXHRyZXR1cm4gZ2V0QXJjaHR5cGUodGhpbmcpID09PSBBcmNodHlwZS5NYXBcblx0XHQ/IHRoaW5nLmhhcyhwcm9wKVxuXHRcdDogT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaW5nLCBwcm9wKVxufVxuXG4vKiNfX1BVUkVfXyovXG5leHBvcnQgZnVuY3Rpb24gZ2V0KHRoaW5nOiBBbnlNYXAgfCBBbnlPYmplY3QsIHByb3A6IFByb3BlcnR5S2V5KTogYW55IHtcblx0Ly8gQHRzLWlnbm9yZVxuXHRyZXR1cm4gZ2V0QXJjaHR5cGUodGhpbmcpID09PSBBcmNodHlwZS5NYXAgPyB0aGluZy5nZXQocHJvcCkgOiB0aGluZ1twcm9wXVxufVxuXG4vKiNfX1BVUkVfXyovXG5leHBvcnQgZnVuY3Rpb24gc2V0KHRoaW5nOiBhbnksIHByb3BPck9sZFZhbHVlOiBQcm9wZXJ0eUtleSwgdmFsdWU6IGFueSkge1xuXHRjb25zdCB0ID0gZ2V0QXJjaHR5cGUodGhpbmcpXG5cdGlmICh0ID09PSBBcmNodHlwZS5NYXApIHRoaW5nLnNldChwcm9wT3JPbGRWYWx1ZSwgdmFsdWUpXG5cdGVsc2UgaWYgKHQgPT09IEFyY2h0eXBlLlNldCkge1xuXHRcdHRoaW5nLmRlbGV0ZShwcm9wT3JPbGRWYWx1ZSlcblx0XHR0aGluZy5hZGQodmFsdWUpXG5cdH0gZWxzZSB0aGluZ1twcm9wT3JPbGRWYWx1ZV0gPSB2YWx1ZVxufVxuXG4vKiNfX1BVUkVfXyovXG5leHBvcnQgZnVuY3Rpb24gaXMoeDogYW55LCB5OiBhbnkpOiBib29sZWFuIHtcblx0Ly8gRnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZianMvYmxvYi9jNjk5MDRhNTExYjkwMDI2NjkzNTE2ODIyMzA2M2RkODc3MmRmYzQwL3BhY2thZ2VzL2ZianMvc3JjL2NvcmUvc2hhbGxvd0VxdWFsLmpzXG5cdGlmICh4ID09PSB5KSB7XG5cdFx0cmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIHggIT09IHggJiYgeSAhPT0geVxuXHR9XG59XG5cbi8qI19fUFVSRV9fKi9cbmV4cG9ydCBmdW5jdGlvbiBpc01hcCh0YXJnZXQ6IGFueSk6IHRhcmdldCBpcyBBbnlNYXAge1xuXHRyZXR1cm4gaGFzTWFwICYmIHRhcmdldCBpbnN0YW5jZW9mIE1hcFxufVxuXG4vKiNfX1BVUkVfXyovXG5leHBvcnQgZnVuY3Rpb24gaXNTZXQodGFyZ2V0OiBhbnkpOiB0YXJnZXQgaXMgQW55U2V0IHtcblx0cmV0dXJuIGhhc1NldCAmJiB0YXJnZXQgaW5zdGFuY2VvZiBTZXRcbn1cbi8qI19fUFVSRV9fKi9cbmV4cG9ydCBmdW5jdGlvbiBsYXRlc3Qoc3RhdGU6IEltbWVyU3RhdGUpOiBhbnkge1xuXHRyZXR1cm4gc3RhdGUuY29weV8gfHwgc3RhdGUuYmFzZV9cbn1cblxuLyojX19QVVJFX18qL1xuZXhwb3J0IGZ1bmN0aW9uIHNoYWxsb3dDb3B5KGJhc2U6IGFueSkge1xuXHRpZiAoQXJyYXkuaXNBcnJheShiYXNlKSkgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGJhc2UpXG5cdGNvbnN0IGRlc2NyaXB0b3JzID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhiYXNlKVxuXHRkZWxldGUgZGVzY3JpcHRvcnNbRFJBRlRfU1RBVEUgYXMgYW55XVxuXHRsZXQga2V5cyA9IG93bktleXMoZGVzY3JpcHRvcnMpXG5cdGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuXHRcdGNvbnN0IGtleTogYW55ID0ga2V5c1tpXVxuXHRcdGNvbnN0IGRlc2MgPSBkZXNjcmlwdG9yc1trZXldXG5cdFx0aWYgKGRlc2Mud3JpdGFibGUgPT09IGZhbHNlKSB7XG5cdFx0XHRkZXNjLndyaXRhYmxlID0gdHJ1ZVxuXHRcdFx0ZGVzYy5jb25maWd1cmFibGUgPSB0cnVlXG5cdFx0fVxuXHRcdC8vIGxpa2Ugb2JqZWN0LmFzc2lnbiwgd2Ugd2lsbCByZWFkIGFueSBfb3duXywgZ2V0L3NldCBhY2Nlc3NvcnMuIFRoaXMgaGVscHMgaW4gZGVhbGluZ1xuXHRcdC8vIHdpdGggbGlicmFyaWVzIHRoYXQgdHJhcCB2YWx1ZXMsIGxpa2UgbW9ieCBvciB2dWVcblx0XHQvLyB1bmxpa2Ugb2JqZWN0LmFzc2lnbiwgbm9uLWVudW1lcmFibGVzIHdpbGwgYmUgY29waWVkIGFzIHdlbGxcblx0XHRpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpXG5cdFx0XHRkZXNjcmlwdG9yc1trZXldID0ge1xuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLCAvLyBjb3VsZCBsaXZlIHdpdGggISFkZXNjLnNldCBhcyB3ZWxsIGhlcmUuLi5cblx0XHRcdFx0ZW51bWVyYWJsZTogZGVzYy5lbnVtZXJhYmxlLFxuXHRcdFx0XHR2YWx1ZTogYmFzZVtrZXldXG5cdFx0XHR9XG5cdH1cblx0cmV0dXJuIE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKGJhc2UpLCBkZXNjcmlwdG9ycylcbn1cblxuLyoqXG4gKiBGcmVlemVzIGRyYWZ0YWJsZSBvYmplY3RzLiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBvYmplY3QuXG4gKiBCeSBkZWZhdWx0IGZyZWV6ZXMgc2hhbGxvd2x5LCBidXQgaWYgdGhlIHNlY29uZCBhcmd1bWVudCBpcyBgdHJ1ZWAgaXQgd2lsbCBmcmVlemUgcmVjdXJzaXZlbHkuXG4gKlxuICogQHBhcmFtIG9ialxuICogQHBhcmFtIGRlZXBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyZWV6ZTxUPihvYmo6IFQsIGRlZXA/OiBib29sZWFuKTogVFxuZXhwb3J0IGZ1bmN0aW9uIGZyZWV6ZTxUPihvYmo6IGFueSwgZGVlcDogYm9vbGVhbiA9IGZhbHNlKTogVCB7XG5cdGlmIChpc0Zyb3plbihvYmopIHx8IGlzRHJhZnQob2JqKSB8fCAhaXNEcmFmdGFibGUob2JqKSkgcmV0dXJuIG9ialxuXHRpZiAoZ2V0QXJjaHR5cGUob2JqKSA+IDEgLyogTWFwIG9yIFNldCAqLykge1xuXHRcdG9iai5zZXQgPSBvYmouYWRkID0gb2JqLmNsZWFyID0gb2JqLmRlbGV0ZSA9IGRvbnRNdXRhdGVGcm96ZW5Db2xsZWN0aW9ucyBhcyBhbnlcblx0fVxuXHRPYmplY3QuZnJlZXplKG9iailcblx0aWYgKGRlZXApIGVhY2gob2JqLCAoa2V5LCB2YWx1ZSkgPT4gZnJlZXplKHZhbHVlLCB0cnVlKSwgdHJ1ZSlcblx0cmV0dXJuIG9ialxufVxuXG5mdW5jdGlvbiBkb250TXV0YXRlRnJvemVuQ29sbGVjdGlvbnMoKSB7XG5cdGRpZSgyKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGcm96ZW4ob2JqOiBhbnkpOiBib29sZWFuIHtcblx0aWYgKG9iaiA9PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIpIHJldHVybiB0cnVlXG5cdC8vIFNlZSAjNjAwLCBJRSBkaWVzIG9uIG5vbi1vYmplY3RzIGluIE9iamVjdC5pc0Zyb3plblxuXHRyZXR1cm4gT2JqZWN0LmlzRnJvemVuKG9iailcbn1cbiIsImltcG9ydCB7XG5cdEltbWVyU3RhdGUsXG5cdFBhdGNoLFxuXHRJbW1lclNjb3BlLFxuXHREcmFmdGVkLFxuXHRBbnlPYmplY3QsXG5cdEltbWVyQmFzZVN0YXRlLFxuXHRBbnlNYXAsXG5cdEFueVNldCxcblx0UHJveHlUeXBlLFxuXHRkaWVcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuLyoqIFBsdWdpbiB1dGlsaXRpZXMgKi9cbmNvbnN0IHBsdWdpbnM6IHtcblx0UGF0Y2hlcz86IHtcblx0XHRnZW5lcmF0ZVBhdGNoZXNfKFxuXHRcdFx0c3RhdGU6IEltbWVyU3RhdGUsXG5cdFx0XHRiYXNlUGF0aDogUGF0Y2hQYXRoLFxuXHRcdFx0cGF0Y2hlczogUGF0Y2hbXSxcblx0XHRcdGludmVyc2VQYXRjaGVzOiBQYXRjaFtdXG5cdFx0KTogdm9pZFxuXHRcdGdlbmVyYXRlUmVwbGFjZW1lbnRQYXRjaGVzXyhcblx0XHRcdGJhc2U6IGFueSxcblx0XHRcdHJlcGxhY2VtZW50OiBhbnksXG5cdFx0XHRwYXRjaGVzOiBQYXRjaFtdLFxuXHRcdFx0aW52ZXJzZVBhdGNoZXM6IFBhdGNoW11cblx0XHQpOiB2b2lkXG5cdFx0YXBwbHlQYXRjaGVzXzxUPihkcmFmdDogVCwgcGF0Y2hlczogUGF0Y2hbXSk6IFRcblx0fVxuXHRFUzU/OiB7XG5cdFx0d2lsbEZpbmFsaXplRVM1XyhzY29wZTogSW1tZXJTY29wZSwgcmVzdWx0OiBhbnksIGlzUmVwbGFjZWQ6IGJvb2xlYW4pOiB2b2lkXG5cdFx0Y3JlYXRlRVM1UHJveHlfPFQ+KFxuXHRcdFx0YmFzZTogVCxcblx0XHRcdHBhcmVudD86IEltbWVyU3RhdGVcblx0XHQpOiBEcmFmdGVkPFQsIEVTNU9iamVjdFN0YXRlIHwgRVM1QXJyYXlTdGF0ZT5cblx0XHRoYXNDaGFuZ2VzXyhzdGF0ZTogRVM1QXJyYXlTdGF0ZSB8IEVTNU9iamVjdFN0YXRlKTogYm9vbGVhblxuXHR9XG5cdE1hcFNldD86IHtcblx0XHRwcm94eU1hcF88VCBleHRlbmRzIEFueU1hcD4odGFyZ2V0OiBULCBwYXJlbnQ/OiBJbW1lclN0YXRlKTogVFxuXHRcdHByb3h5U2V0XzxUIGV4dGVuZHMgQW55U2V0Pih0YXJnZXQ6IFQsIHBhcmVudD86IEltbWVyU3RhdGUpOiBUXG5cdH1cbn0gPSB7fVxuXG50eXBlIFBsdWdpbnMgPSB0eXBlb2YgcGx1Z2luc1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGx1Z2luPEsgZXh0ZW5kcyBrZXlvZiBQbHVnaW5zPihcblx0cGx1Z2luS2V5OiBLXG4pOiBFeGNsdWRlPFBsdWdpbnNbS10sIHVuZGVmaW5lZD4ge1xuXHRjb25zdCBwbHVnaW4gPSBwbHVnaW5zW3BsdWdpbktleV1cblx0aWYgKCFwbHVnaW4pIHtcblx0XHRkaWUoMTgsIHBsdWdpbktleSlcblx0fVxuXHQvLyBAdHMtaWdub3JlXG5cdHJldHVybiBwbHVnaW5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRQbHVnaW48SyBleHRlbmRzIGtleW9mIFBsdWdpbnM+KFxuXHRwbHVnaW5LZXk6IEssXG5cdGltcGxlbWVudGF0aW9uOiBQbHVnaW5zW0tdXG4pOiB2b2lkIHtcblx0aWYgKCFwbHVnaW5zW3BsdWdpbktleV0pIHBsdWdpbnNbcGx1Z2luS2V5XSA9IGltcGxlbWVudGF0aW9uXG59XG5cbi8qKiBFUzUgUGx1Z2luICovXG5cbmludGVyZmFjZSBFUzVCYXNlU3RhdGUgZXh0ZW5kcyBJbW1lckJhc2VTdGF0ZSB7XG5cdGFzc2lnbmVkXzoge1trZXk6IHN0cmluZ106IGFueX1cblx0cGFyZW50Xz86IEltbWVyU3RhdGVcblx0cmV2b2tlZF86IGJvb2xlYW5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFUzVPYmplY3RTdGF0ZSBleHRlbmRzIEVTNUJhc2VTdGF0ZSB7XG5cdHR5cGVfOiBQcm94eVR5cGUuRVM1T2JqZWN0XG5cdGRyYWZ0XzogRHJhZnRlZDxBbnlPYmplY3QsIEVTNU9iamVjdFN0YXRlPlxuXHRiYXNlXzogQW55T2JqZWN0XG5cdGNvcHlfOiBBbnlPYmplY3QgfCBudWxsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRVM1QXJyYXlTdGF0ZSBleHRlbmRzIEVTNUJhc2VTdGF0ZSB7XG5cdHR5cGVfOiBQcm94eVR5cGUuRVM1QXJyYXlcblx0ZHJhZnRfOiBEcmFmdGVkPEFueU9iamVjdCwgRVM1QXJyYXlTdGF0ZT5cblx0YmFzZV86IGFueVxuXHRjb3B5XzogYW55XG59XG5cbi8qKiBNYXAgLyBTZXQgcGx1Z2luICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFwU3RhdGUgZXh0ZW5kcyBJbW1lckJhc2VTdGF0ZSB7XG5cdHR5cGVfOiBQcm94eVR5cGUuTWFwXG5cdGNvcHlfOiBBbnlNYXAgfCB1bmRlZmluZWRcblx0YXNzaWduZWRfOiBNYXA8YW55LCBib29sZWFuPiB8IHVuZGVmaW5lZFxuXHRiYXNlXzogQW55TWFwXG5cdHJldm9rZWRfOiBib29sZWFuXG5cdGRyYWZ0XzogRHJhZnRlZDxBbnlNYXAsIE1hcFN0YXRlPlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNldFN0YXRlIGV4dGVuZHMgSW1tZXJCYXNlU3RhdGUge1xuXHR0eXBlXzogUHJveHlUeXBlLlNldFxuXHRjb3B5XzogQW55U2V0IHwgdW5kZWZpbmVkXG5cdGJhc2VfOiBBbnlTZXRcblx0ZHJhZnRzXzogTWFwPGFueSwgRHJhZnRlZD4gLy8gbWFwcyB0aGUgb3JpZ2luYWwgdmFsdWUgdG8gdGhlIGRyYWZ0IHZhbHVlIGluIHRoZSBuZXcgc2V0XG5cdHJldm9rZWRfOiBib29sZWFuXG5cdGRyYWZ0XzogRHJhZnRlZDxBbnlTZXQsIFNldFN0YXRlPlxufVxuXG4vKiogUGF0Y2hlcyBwbHVnaW4gKi9cblxuZXhwb3J0IHR5cGUgUGF0Y2hQYXRoID0gKHN0cmluZyB8IG51bWJlcilbXVxuIiwiaW1wb3J0IHtcblx0UGF0Y2gsXG5cdFBhdGNoTGlzdGVuZXIsXG5cdERyYWZ0ZWQsXG5cdEltbWVyLFxuXHREUkFGVF9TVEFURSxcblx0SW1tZXJTdGF0ZSxcblx0UHJveHlUeXBlLFxuXHRnZXRQbHVnaW5cbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcbmltcG9ydCB7ZGllfSBmcm9tIFwiLi4vdXRpbHMvZXJyb3JzXCJcblxuLyoqIEVhY2ggc2NvcGUgcmVwcmVzZW50cyBhIGBwcm9kdWNlYCBjYWxsLiAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIEltbWVyU2NvcGUge1xuXHRwYXRjaGVzXz86IFBhdGNoW11cblx0aW52ZXJzZVBhdGNoZXNfPzogUGF0Y2hbXVxuXHRjYW5BdXRvRnJlZXplXzogYm9vbGVhblxuXHRkcmFmdHNfOiBhbnlbXVxuXHRwYXJlbnRfPzogSW1tZXJTY29wZVxuXHRwYXRjaExpc3RlbmVyXz86IFBhdGNoTGlzdGVuZXJcblx0aW1tZXJfOiBJbW1lclxuXHR1bmZpbmFsaXplZERyYWZ0c186IG51bWJlclxufVxuXG5sZXQgY3VycmVudFNjb3BlOiBJbW1lclNjb3BlIHwgdW5kZWZpbmVkXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50U2NvcGUoKSB7XG5cdGlmIChfX0RFVl9fICYmICFjdXJyZW50U2NvcGUpIGRpZSgwKVxuXHRyZXR1cm4gY3VycmVudFNjb3BlIVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTY29wZShcblx0cGFyZW50XzogSW1tZXJTY29wZSB8IHVuZGVmaW5lZCxcblx0aW1tZXJfOiBJbW1lclxuKTogSW1tZXJTY29wZSB7XG5cdHJldHVybiB7XG5cdFx0ZHJhZnRzXzogW10sXG5cdFx0cGFyZW50Xyxcblx0XHRpbW1lcl8sXG5cdFx0Ly8gV2hlbmV2ZXIgdGhlIG1vZGlmaWVkIGRyYWZ0IGNvbnRhaW5zIGEgZHJhZnQgZnJvbSBhbm90aGVyIHNjb3BlLCB3ZVxuXHRcdC8vIG5lZWQgdG8gcHJldmVudCBhdXRvLWZyZWV6aW5nIHNvIHRoZSB1bm93bmVkIGRyYWZ0IGNhbiBiZSBmaW5hbGl6ZWQuXG5cdFx0Y2FuQXV0b0ZyZWV6ZV86IHRydWUsXG5cdFx0dW5maW5hbGl6ZWREcmFmdHNfOiAwXG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVBhdGNoZXNJblNjb3BlKFxuXHRzY29wZTogSW1tZXJTY29wZSxcblx0cGF0Y2hMaXN0ZW5lcj86IFBhdGNoTGlzdGVuZXJcbikge1xuXHRpZiAocGF0Y2hMaXN0ZW5lcikge1xuXHRcdGdldFBsdWdpbihcIlBhdGNoZXNcIikgLy8gYXNzZXJ0IHdlIGhhdmUgdGhlIHBsdWdpblxuXHRcdHNjb3BlLnBhdGNoZXNfID0gW11cblx0XHRzY29wZS5pbnZlcnNlUGF0Y2hlc18gPSBbXVxuXHRcdHNjb3BlLnBhdGNoTGlzdGVuZXJfID0gcGF0Y2hMaXN0ZW5lclxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXZva2VTY29wZShzY29wZTogSW1tZXJTY29wZSkge1xuXHRsZWF2ZVNjb3BlKHNjb3BlKVxuXHRzY29wZS5kcmFmdHNfLmZvckVhY2gocmV2b2tlRHJhZnQpXG5cdC8vIEB0cy1pZ25vcmVcblx0c2NvcGUuZHJhZnRzXyA9IG51bGxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlYXZlU2NvcGUoc2NvcGU6IEltbWVyU2NvcGUpIHtcblx0aWYgKHNjb3BlID09PSBjdXJyZW50U2NvcGUpIHtcblx0XHRjdXJyZW50U2NvcGUgPSBzY29wZS5wYXJlbnRfXG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVudGVyU2NvcGUoaW1tZXI6IEltbWVyKSB7XG5cdHJldHVybiAoY3VycmVudFNjb3BlID0gY3JlYXRlU2NvcGUoY3VycmVudFNjb3BlLCBpbW1lcikpXG59XG5cbmZ1bmN0aW9uIHJldm9rZURyYWZ0KGRyYWZ0OiBEcmFmdGVkKSB7XG5cdGNvbnN0IHN0YXRlOiBJbW1lclN0YXRlID0gZHJhZnRbRFJBRlRfU1RBVEVdXG5cdGlmIChcblx0XHRzdGF0ZS50eXBlXyA9PT0gUHJveHlUeXBlLlByb3h5T2JqZWN0IHx8XG5cdFx0c3RhdGUudHlwZV8gPT09IFByb3h5VHlwZS5Qcm94eUFycmF5XG5cdClcblx0XHRzdGF0ZS5yZXZva2VfKClcblx0ZWxzZSBzdGF0ZS5yZXZva2VkXyA9IHRydWVcbn1cbiIsImltcG9ydCB7XG5cdEltbWVyU2NvcGUsXG5cdERSQUZUX1NUQVRFLFxuXHRpc0RyYWZ0YWJsZSxcblx0Tk9USElORyxcblx0UGF0Y2hQYXRoLFxuXHRlYWNoLFxuXHRoYXMsXG5cdGZyZWV6ZSxcblx0SW1tZXJTdGF0ZSxcblx0aXNEcmFmdCxcblx0U2V0U3RhdGUsXG5cdHNldCxcblx0UHJveHlUeXBlLFxuXHRnZXRQbHVnaW4sXG5cdGRpZSxcblx0cmV2b2tlU2NvcGUsXG5cdGlzRnJvemVuLFxuXHRzaGFsbG93Q29weVxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc1Jlc3VsdChyZXN1bHQ6IGFueSwgc2NvcGU6IEltbWVyU2NvcGUpIHtcblx0c2NvcGUudW5maW5hbGl6ZWREcmFmdHNfID0gc2NvcGUuZHJhZnRzXy5sZW5ndGhcblx0Y29uc3QgYmFzZURyYWZ0ID0gc2NvcGUuZHJhZnRzXyFbMF1cblx0Y29uc3QgaXNSZXBsYWNlZCA9IHJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIHJlc3VsdCAhPT0gYmFzZURyYWZ0XG5cdGlmICghc2NvcGUuaW1tZXJfLnVzZVByb3hpZXNfKVxuXHRcdGdldFBsdWdpbihcIkVTNVwiKS53aWxsRmluYWxpemVFUzVfKHNjb3BlLCByZXN1bHQsIGlzUmVwbGFjZWQpXG5cdGlmIChpc1JlcGxhY2VkKSB7XG5cdFx0aWYgKGJhc2VEcmFmdFtEUkFGVF9TVEFURV0ubW9kaWZpZWRfKSB7XG5cdFx0XHRyZXZva2VTY29wZShzY29wZSlcblx0XHRcdGRpZSg0KVxuXHRcdH1cblx0XHRpZiAoaXNEcmFmdGFibGUocmVzdWx0KSkge1xuXHRcdFx0Ly8gRmluYWxpemUgdGhlIHJlc3VsdCBpbiBjYXNlIGl0IGNvbnRhaW5zIChvciBpcykgYSBzdWJzZXQgb2YgdGhlIGRyYWZ0LlxuXHRcdFx0cmVzdWx0ID0gZmluYWxpemUoc2NvcGUsIHJlc3VsdClcblx0XHRcdGlmICghc2NvcGUucGFyZW50XykgbWF5YmVGcmVlemUoc2NvcGUsIHJlc3VsdClcblx0XHR9XG5cdFx0aWYgKHNjb3BlLnBhdGNoZXNfKSB7XG5cdFx0XHRnZXRQbHVnaW4oXCJQYXRjaGVzXCIpLmdlbmVyYXRlUmVwbGFjZW1lbnRQYXRjaGVzXyhcblx0XHRcdFx0YmFzZURyYWZ0W0RSQUZUX1NUQVRFXS5iYXNlXyxcblx0XHRcdFx0cmVzdWx0LFxuXHRcdFx0XHRzY29wZS5wYXRjaGVzXyxcblx0XHRcdFx0c2NvcGUuaW52ZXJzZVBhdGNoZXNfIVxuXHRcdFx0KVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHQvLyBGaW5hbGl6ZSB0aGUgYmFzZSBkcmFmdC5cblx0XHRyZXN1bHQgPSBmaW5hbGl6ZShzY29wZSwgYmFzZURyYWZ0LCBbXSlcblx0fVxuXHRyZXZva2VTY29wZShzY29wZSlcblx0aWYgKHNjb3BlLnBhdGNoZXNfKSB7XG5cdFx0c2NvcGUucGF0Y2hMaXN0ZW5lcl8hKHNjb3BlLnBhdGNoZXNfLCBzY29wZS5pbnZlcnNlUGF0Y2hlc18hKVxuXHR9XG5cdHJldHVybiByZXN1bHQgIT09IE5PVEhJTkcgPyByZXN1bHQgOiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gZmluYWxpemUocm9vdFNjb3BlOiBJbW1lclNjb3BlLCB2YWx1ZTogYW55LCBwYXRoPzogUGF0Y2hQYXRoKSB7XG5cdC8vIERvbid0IHJlY3Vyc2UgaW4gdGhvIHJlY3Vyc2l2ZSBkYXRhIHN0cnVjdHVyZXNcblx0aWYgKGlzRnJvemVuKHZhbHVlKSkgcmV0dXJuIHZhbHVlXG5cblx0Y29uc3Qgc3RhdGU6IEltbWVyU3RhdGUgPSB2YWx1ZVtEUkFGVF9TVEFURV1cblx0Ly8gQSBwbGFpbiBvYmplY3QsIG1pZ2h0IG5lZWQgZnJlZXppbmcsIG1pZ2h0IGNvbnRhaW4gZHJhZnRzXG5cdGlmICghc3RhdGUpIHtcblx0XHRlYWNoKFxuXHRcdFx0dmFsdWUsXG5cdFx0XHQoa2V5LCBjaGlsZFZhbHVlKSA9PlxuXHRcdFx0XHRmaW5hbGl6ZVByb3BlcnR5KHJvb3RTY29wZSwgc3RhdGUsIHZhbHVlLCBrZXksIGNoaWxkVmFsdWUsIHBhdGgpLFxuXHRcdFx0dHJ1ZSAvLyBTZWUgIzU5MCwgZG9uJ3QgcmVjdXJzZSBpbnRvIG5vbi1lbnVtZXJhYmxlIG9mIG5vbiBkcmFmdGVkIG9iamVjdHNcblx0XHQpXG5cdFx0cmV0dXJuIHZhbHVlXG5cdH1cblx0Ly8gTmV2ZXIgZmluYWxpemUgZHJhZnRzIG93bmVkIGJ5IGFub3RoZXIgc2NvcGUuXG5cdGlmIChzdGF0ZS5zY29wZV8gIT09IHJvb3RTY29wZSkgcmV0dXJuIHZhbHVlXG5cdC8vIFVubW9kaWZpZWQgZHJhZnQsIHJldHVybiB0aGUgKGZyb3plbikgb3JpZ2luYWxcblx0aWYgKCFzdGF0ZS5tb2RpZmllZF8pIHtcblx0XHRtYXliZUZyZWV6ZShyb290U2NvcGUsIHN0YXRlLmJhc2VfLCB0cnVlKVxuXHRcdHJldHVybiBzdGF0ZS5iYXNlX1xuXHR9XG5cdC8vIE5vdCBmaW5hbGl6ZWQgeWV0LCBsZXQncyBkbyB0aGF0IG5vd1xuXHRpZiAoIXN0YXRlLmZpbmFsaXplZF8pIHtcblx0XHRzdGF0ZS5maW5hbGl6ZWRfID0gdHJ1ZVxuXHRcdHN0YXRlLnNjb3BlXy51bmZpbmFsaXplZERyYWZ0c18tLVxuXHRcdGNvbnN0IHJlc3VsdCA9XG5cdFx0XHQvLyBGb3IgRVM1LCBjcmVhdGUgYSBnb29kIGNvcHkgZnJvbSB0aGUgZHJhZnQgZmlyc3QsIHdpdGggYWRkZWQga2V5cyBhbmQgd2l0aG91dCBkZWxldGVkIGtleXMuXG5cdFx0XHRzdGF0ZS50eXBlXyA9PT0gUHJveHlUeXBlLkVTNU9iamVjdCB8fCBzdGF0ZS50eXBlXyA9PT0gUHJveHlUeXBlLkVTNUFycmF5XG5cdFx0XHRcdD8gKHN0YXRlLmNvcHlfID0gc2hhbGxvd0NvcHkoc3RhdGUuZHJhZnRfKSlcblx0XHRcdFx0OiBzdGF0ZS5jb3B5X1xuXHRcdC8vIEZpbmFsaXplIGFsbCBjaGlsZHJlbiBvZiB0aGUgY29weVxuXHRcdC8vIEZvciBzZXRzIHdlIGNsb25lIGJlZm9yZSBpdGVyYXRpbmcsIG90aGVyd2lzZSB3ZSBjYW4gZ2V0IGluIGVuZGxlc3MgbG9vcCBkdWUgdG8gbW9kaWZ5aW5nIGR1cmluZyBpdGVyYXRpb24sIHNlZSAjNjI4XG5cdFx0Ly8gQWx0aG91Z2ggdGhlIG9yaWdpbmFsIHRlc3QgY2FzZSBkb2Vzbid0IHNlZW0gdmFsaWQgYW55d2F5LCBzbyBpZiB0aGlzIGluIHRoZSB3YXkgd2UgY2FuIHR1cm4gdGhlIG5leHQgbGluZVxuXHRcdC8vIGJhY2sgdG8gZWFjaChyZXN1bHQsIC4uLi4pXG5cdFx0ZWFjaChcblx0XHRcdHN0YXRlLnR5cGVfID09PSBQcm94eVR5cGUuU2V0ID8gbmV3IFNldChyZXN1bHQpIDogcmVzdWx0LFxuXHRcdFx0KGtleSwgY2hpbGRWYWx1ZSkgPT5cblx0XHRcdFx0ZmluYWxpemVQcm9wZXJ0eShyb290U2NvcGUsIHN0YXRlLCByZXN1bHQsIGtleSwgY2hpbGRWYWx1ZSwgcGF0aClcblx0XHQpXG5cdFx0Ly8gZXZlcnl0aGluZyBpbnNpZGUgaXMgZnJvemVuLCB3ZSBjYW4gZnJlZXplIGhlcmVcblx0XHRtYXliZUZyZWV6ZShyb290U2NvcGUsIHJlc3VsdCwgZmFsc2UpXG5cdFx0Ly8gZmlyc3QgdGltZSBmaW5hbGl6aW5nLCBsZXQncyBjcmVhdGUgdGhvc2UgcGF0Y2hlc1xuXHRcdGlmIChwYXRoICYmIHJvb3RTY29wZS5wYXRjaGVzXykge1xuXHRcdFx0Z2V0UGx1Z2luKFwiUGF0Y2hlc1wiKS5nZW5lcmF0ZVBhdGNoZXNfKFxuXHRcdFx0XHRzdGF0ZSxcblx0XHRcdFx0cGF0aCxcblx0XHRcdFx0cm9vdFNjb3BlLnBhdGNoZXNfLFxuXHRcdFx0XHRyb290U2NvcGUuaW52ZXJzZVBhdGNoZXNfIVxuXHRcdFx0KVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gc3RhdGUuY29weV9cbn1cblxuZnVuY3Rpb24gZmluYWxpemVQcm9wZXJ0eShcblx0cm9vdFNjb3BlOiBJbW1lclNjb3BlLFxuXHRwYXJlbnRTdGF0ZTogdW5kZWZpbmVkIHwgSW1tZXJTdGF0ZSxcblx0dGFyZ2V0T2JqZWN0OiBhbnksXG5cdHByb3A6IHN0cmluZyB8IG51bWJlcixcblx0Y2hpbGRWYWx1ZTogYW55LFxuXHRyb290UGF0aD86IFBhdGNoUGF0aFxuKSB7XG5cdGlmIChfX0RFVl9fICYmIGNoaWxkVmFsdWUgPT09IHRhcmdldE9iamVjdCkgZGllKDUpXG5cdGlmIChpc0RyYWZ0KGNoaWxkVmFsdWUpKSB7XG5cdFx0Y29uc3QgcGF0aCA9XG5cdFx0XHRyb290UGF0aCAmJlxuXHRcdFx0cGFyZW50U3RhdGUgJiZcblx0XHRcdHBhcmVudFN0YXRlIS50eXBlXyAhPT0gUHJveHlUeXBlLlNldCAmJiAvLyBTZXQgb2JqZWN0cyBhcmUgYXRvbWljIHNpbmNlIHRoZXkgaGF2ZSBubyBrZXlzLlxuXHRcdFx0IWhhcygocGFyZW50U3RhdGUgYXMgRXhjbHVkZTxJbW1lclN0YXRlLCBTZXRTdGF0ZT4pLmFzc2lnbmVkXyEsIHByb3ApIC8vIFNraXAgZGVlcCBwYXRjaGVzIGZvciBhc3NpZ25lZCBrZXlzLlxuXHRcdFx0XHQ/IHJvb3RQYXRoIS5jb25jYXQocHJvcClcblx0XHRcdFx0OiB1bmRlZmluZWRcblx0XHQvLyBEcmFmdHMgb3duZWQgYnkgYHNjb3BlYCBhcmUgZmluYWxpemVkIGhlcmUuXG5cdFx0Y29uc3QgcmVzID0gZmluYWxpemUocm9vdFNjb3BlLCBjaGlsZFZhbHVlLCBwYXRoKVxuXHRcdHNldCh0YXJnZXRPYmplY3QsIHByb3AsIHJlcylcblx0XHQvLyBEcmFmdHMgZnJvbSBhbm90aGVyIHNjb3BlIG11c3QgcHJldmVudGVkIHRvIGJlIGZyb3plblxuXHRcdC8vIGlmIHdlIGdvdCBhIGRyYWZ0IGJhY2sgZnJvbSBmaW5hbGl6ZSwgd2UncmUgaW4gYSBuZXN0ZWQgcHJvZHVjZSBhbmQgc2hvdWxkbid0IGZyZWV6ZVxuXHRcdGlmIChpc0RyYWZ0KHJlcykpIHtcblx0XHRcdHJvb3RTY29wZS5jYW5BdXRvRnJlZXplXyA9IGZhbHNlXG5cdFx0fSBlbHNlIHJldHVyblxuXHR9XG5cdC8vIFNlYXJjaCBuZXcgb2JqZWN0cyBmb3IgdW5maW5hbGl6ZWQgZHJhZnRzLiBGcm96ZW4gb2JqZWN0cyBzaG91bGQgbmV2ZXIgY29udGFpbiBkcmFmdHMuXG5cdGlmIChpc0RyYWZ0YWJsZShjaGlsZFZhbHVlKSAmJiAhaXNGcm96ZW4oY2hpbGRWYWx1ZSkpIHtcblx0XHRpZiAoIXJvb3RTY29wZS5pbW1lcl8uYXV0b0ZyZWV6ZV8gJiYgcm9vdFNjb3BlLnVuZmluYWxpemVkRHJhZnRzXyA8IDEpIHtcblx0XHRcdC8vIG9wdGltaXphdGlvbjogaWYgYW4gb2JqZWN0IGlzIG5vdCBhIGRyYWZ0LCBhbmQgd2UgZG9uJ3QgaGF2ZSB0b1xuXHRcdFx0Ly8gZGVlcGZyZWV6ZSBldmVyeXRoaW5nLCBhbmQgd2UgYXJlIHN1cmUgdGhhdCBubyBkcmFmdHMgYXJlIGxlZnQgaW4gdGhlIHJlbWFpbmluZyBvYmplY3Rcblx0XHRcdC8vIGNhdXNlIHdlIHNhdyBhbmQgZmluYWxpemVkIGFsbCBkcmFmdHMgYWxyZWFkeTsgd2UgY2FuIHN0b3AgdmlzaXRpbmcgdGhlIHJlc3Qgb2YgdGhlIHRyZWUuXG5cdFx0XHQvLyBUaGlzIGJlbmVmaXRzIGVzcGVjaWFsbHkgYWRkaW5nIGxhcmdlIGRhdGEgdHJlZSdzIHdpdGhvdXQgZnVydGhlciBwcm9jZXNzaW5nLlxuXHRcdFx0Ly8gU2VlIGFkZC1kYXRhLmpzIHBlcmYgdGVzdFxuXHRcdFx0cmV0dXJuXG5cdFx0fVxuXHRcdGZpbmFsaXplKHJvb3RTY29wZSwgY2hpbGRWYWx1ZSlcblx0XHQvLyBpbW1lciBkZWVwIGZyZWV6ZXMgcGxhaW4gb2JqZWN0cywgc28gaWYgdGhlcmUgaXMgbm8gcGFyZW50IHN0YXRlLCB3ZSBmcmVlemUgYXMgd2VsbFxuXHRcdGlmICghcGFyZW50U3RhdGUgfHwgIXBhcmVudFN0YXRlLnNjb3BlXy5wYXJlbnRfKVxuXHRcdFx0bWF5YmVGcmVlemUocm9vdFNjb3BlLCBjaGlsZFZhbHVlKVxuXHR9XG59XG5cbmZ1bmN0aW9uIG1heWJlRnJlZXplKHNjb3BlOiBJbW1lclNjb3BlLCB2YWx1ZTogYW55LCBkZWVwID0gZmFsc2UpIHtcblx0aWYgKHNjb3BlLmltbWVyXy5hdXRvRnJlZXplXyAmJiBzY29wZS5jYW5BdXRvRnJlZXplXykge1xuXHRcdGZyZWV6ZSh2YWx1ZSwgZGVlcClcblx0fVxufVxuIiwiaW1wb3J0IHtcblx0ZWFjaCxcblx0aGFzLFxuXHRpcyxcblx0aXNEcmFmdGFibGUsXG5cdHNoYWxsb3dDb3B5LFxuXHRsYXRlc3QsXG5cdEltbWVyQmFzZVN0YXRlLFxuXHRJbW1lclN0YXRlLFxuXHREcmFmdGVkLFxuXHRBbnlPYmplY3QsXG5cdEFueUFycmF5LFxuXHRPYmplY3Rpc2gsXG5cdGdldEN1cnJlbnRTY29wZSxcblx0RFJBRlRfU1RBVEUsXG5cdGRpZSxcblx0Y3JlYXRlUHJveHksXG5cdFByb3h5VHlwZVxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5pbnRlcmZhY2UgUHJveHlCYXNlU3RhdGUgZXh0ZW5kcyBJbW1lckJhc2VTdGF0ZSB7XG5cdGFzc2lnbmVkXzoge1xuXHRcdFtwcm9wZXJ0eTogc3RyaW5nXTogYm9vbGVhblxuXHR9XG5cdHBhcmVudF8/OiBJbW1lclN0YXRlXG5cdHJldm9rZV8oKTogdm9pZFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb3h5T2JqZWN0U3RhdGUgZXh0ZW5kcyBQcm94eUJhc2VTdGF0ZSB7XG5cdHR5cGVfOiBQcm94eVR5cGUuUHJveHlPYmplY3Rcblx0YmFzZV86IGFueVxuXHRjb3B5XzogYW55XG5cdGRyYWZ0XzogRHJhZnRlZDxBbnlPYmplY3QsIFByb3h5T2JqZWN0U3RhdGU+XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJveHlBcnJheVN0YXRlIGV4dGVuZHMgUHJveHlCYXNlU3RhdGUge1xuXHR0eXBlXzogUHJveHlUeXBlLlByb3h5QXJyYXlcblx0YmFzZV86IEFueUFycmF5XG5cdGNvcHlfOiBBbnlBcnJheSB8IG51bGxcblx0ZHJhZnRfOiBEcmFmdGVkPEFueUFycmF5LCBQcm94eUFycmF5U3RhdGU+XG59XG5cbnR5cGUgUHJveHlTdGF0ZSA9IFByb3h5T2JqZWN0U3RhdGUgfCBQcm94eUFycmF5U3RhdGVcblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IGRyYWZ0IG9mIHRoZSBgYmFzZWAgb2JqZWN0LlxuICpcbiAqIFRoZSBzZWNvbmQgYXJndW1lbnQgaXMgdGhlIHBhcmVudCBkcmFmdC1zdGF0ZSAodXNlZCBpbnRlcm5hbGx5KS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb3h5UHJveHk8VCBleHRlbmRzIE9iamVjdGlzaD4oXG5cdGJhc2U6IFQsXG5cdHBhcmVudD86IEltbWVyU3RhdGVcbik6IERyYWZ0ZWQ8VCwgUHJveHlTdGF0ZT4ge1xuXHRjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShiYXNlKVxuXHRjb25zdCBzdGF0ZTogUHJveHlTdGF0ZSA9IHtcblx0XHR0eXBlXzogaXNBcnJheSA/IFByb3h5VHlwZS5Qcm94eUFycmF5IDogKFByb3h5VHlwZS5Qcm94eU9iamVjdCBhcyBhbnkpLFxuXHRcdC8vIFRyYWNrIHdoaWNoIHByb2R1Y2UgY2FsbCB0aGlzIGlzIGFzc29jaWF0ZWQgd2l0aC5cblx0XHRzY29wZV86IHBhcmVudCA/IHBhcmVudC5zY29wZV8gOiBnZXRDdXJyZW50U2NvcGUoKSEsXG5cdFx0Ly8gVHJ1ZSBmb3IgYm90aCBzaGFsbG93IGFuZCBkZWVwIGNoYW5nZXMuXG5cdFx0bW9kaWZpZWRfOiBmYWxzZSxcblx0XHQvLyBVc2VkIGR1cmluZyBmaW5hbGl6YXRpb24uXG5cdFx0ZmluYWxpemVkXzogZmFsc2UsXG5cdFx0Ly8gVHJhY2sgd2hpY2ggcHJvcGVydGllcyBoYXZlIGJlZW4gYXNzaWduZWQgKHRydWUpIG9yIGRlbGV0ZWQgKGZhbHNlKS5cblx0XHRhc3NpZ25lZF86IHt9LFxuXHRcdC8vIFRoZSBwYXJlbnQgZHJhZnQgc3RhdGUuXG5cdFx0cGFyZW50XzogcGFyZW50LFxuXHRcdC8vIFRoZSBiYXNlIHN0YXRlLlxuXHRcdGJhc2VfOiBiYXNlLFxuXHRcdC8vIFRoZSBiYXNlIHByb3h5LlxuXHRcdGRyYWZ0XzogbnVsbCBhcyBhbnksIC8vIHNldCBiZWxvd1xuXHRcdC8vIFRoZSBiYXNlIGNvcHkgd2l0aCBhbnkgdXBkYXRlZCB2YWx1ZXMuXG5cdFx0Y29weV86IG51bGwsXG5cdFx0Ly8gQ2FsbGVkIGJ5IHRoZSBgcHJvZHVjZWAgZnVuY3Rpb24uXG5cdFx0cmV2b2tlXzogbnVsbCBhcyBhbnksXG5cdFx0aXNNYW51YWxfOiBmYWxzZVxuXHR9XG5cblx0Ly8gdGhlIHRyYXBzIG11c3QgdGFyZ2V0IHNvbWV0aGluZywgYSBiaXQgbGlrZSB0aGUgJ3JlYWwnIGJhc2UuXG5cdC8vIGJ1dCBhbHNvLCB3ZSBuZWVkIHRvIGJlIGFibGUgdG8gZGV0ZXJtaW5lIGZyb20gdGhlIHRhcmdldCB3aGF0IHRoZSByZWxldmFudCBzdGF0ZSBpc1xuXHQvLyAodG8gYXZvaWQgY3JlYXRpbmcgdHJhcHMgcGVyIGluc3RhbmNlIHRvIGNhcHR1cmUgdGhlIHN0YXRlIGluIGNsb3N1cmUsXG5cdC8vIGFuZCB0byBhdm9pZCBjcmVhdGluZyB3ZWlyZCBoaWRkZW4gcHJvcGVydGllcyBhcyB3ZWxsKVxuXHQvLyBTbyB0aGUgdHJpY2sgaXMgdG8gdXNlICdzdGF0ZScgYXMgdGhlIGFjdHVhbCAndGFyZ2V0JyEgKGFuZCBtYWtlIHN1cmUgd2UgaW50ZXJjZXB0IGV2ZXJ5dGhpbmcpXG5cdC8vIE5vdGUgdGhhdCBpbiB0aGUgY2FzZSBvZiBhbiBhcnJheSwgd2UgcHV0IHRoZSBzdGF0ZSBpbiBhbiBhcnJheSB0byBoYXZlIGJldHRlciBSZWZsZWN0IGRlZmF1bHRzIG9vdGJcblx0bGV0IHRhcmdldDogVCA9IHN0YXRlIGFzIGFueVxuXHRsZXQgdHJhcHM6IFByb3h5SGFuZGxlcjxvYmplY3QgfCBBcnJheTxhbnk+PiA9IG9iamVjdFRyYXBzXG5cdGlmIChpc0FycmF5KSB7XG5cdFx0dGFyZ2V0ID0gW3N0YXRlXSBhcyBhbnlcblx0XHR0cmFwcyA9IGFycmF5VHJhcHNcblx0fVxuXG5cdGNvbnN0IHtyZXZva2UsIHByb3h5fSA9IFByb3h5LnJldm9jYWJsZSh0YXJnZXQsIHRyYXBzKVxuXHRzdGF0ZS5kcmFmdF8gPSBwcm94eSBhcyBhbnlcblx0c3RhdGUucmV2b2tlXyA9IHJldm9rZVxuXHRyZXR1cm4gcHJveHkgYXMgYW55XG59XG5cbi8qKlxuICogT2JqZWN0IGRyYWZ0c1xuICovXG5leHBvcnQgY29uc3Qgb2JqZWN0VHJhcHM6IFByb3h5SGFuZGxlcjxQcm94eVN0YXRlPiA9IHtcblx0Z2V0KHN0YXRlLCBwcm9wKSB7XG5cdFx0aWYgKHByb3AgPT09IERSQUZUX1NUQVRFKSByZXR1cm4gc3RhdGVcblxuXHRcdGNvbnN0IHNvdXJjZSA9IGxhdGVzdChzdGF0ZSlcblx0XHRpZiAoIWhhcyhzb3VyY2UsIHByb3ApKSB7XG5cdFx0XHQvLyBub24tZXhpc3Rpbmcgb3Igbm9uLW93biBwcm9wZXJ0eS4uLlxuXHRcdFx0cmV0dXJuIHJlYWRQcm9wRnJvbVByb3RvKHN0YXRlLCBzb3VyY2UsIHByb3ApXG5cdFx0fVxuXHRcdGNvbnN0IHZhbHVlID0gc291cmNlW3Byb3BdXG5cdFx0aWYgKHN0YXRlLmZpbmFsaXplZF8gfHwgIWlzRHJhZnRhYmxlKHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIHZhbHVlXG5cdFx0fVxuXHRcdC8vIENoZWNrIGZvciBleGlzdGluZyBkcmFmdCBpbiBtb2RpZmllZCBzdGF0ZS5cblx0XHQvLyBBc3NpZ25lZCB2YWx1ZXMgYXJlIG5ldmVyIGRyYWZ0ZWQuIFRoaXMgY2F0Y2hlcyBhbnkgZHJhZnRzIHdlIGNyZWF0ZWQsIHRvby5cblx0XHRpZiAodmFsdWUgPT09IHBlZWsoc3RhdGUuYmFzZV8sIHByb3ApKSB7XG5cdFx0XHRwcmVwYXJlQ29weShzdGF0ZSlcblx0XHRcdHJldHVybiAoc3RhdGUuY29weV8hW3Byb3AgYXMgYW55XSA9IGNyZWF0ZVByb3h5KFxuXHRcdFx0XHRzdGF0ZS5zY29wZV8uaW1tZXJfLFxuXHRcdFx0XHR2YWx1ZSxcblx0XHRcdFx0c3RhdGVcblx0XHRcdCkpXG5cdFx0fVxuXHRcdHJldHVybiB2YWx1ZVxuXHR9LFxuXHRoYXMoc3RhdGUsIHByb3ApIHtcblx0XHRyZXR1cm4gcHJvcCBpbiBsYXRlc3Qoc3RhdGUpXG5cdH0sXG5cdG93bktleXMoc3RhdGUpIHtcblx0XHRyZXR1cm4gUmVmbGVjdC5vd25LZXlzKGxhdGVzdChzdGF0ZSkpXG5cdH0sXG5cdHNldChcblx0XHRzdGF0ZTogUHJveHlPYmplY3RTdGF0ZSxcblx0XHRwcm9wOiBzdHJpbmcgLyogc3RyaWN0bHkgbm90LCBidXQgaGVscHMgVFMgKi8sXG5cdFx0dmFsdWVcblx0KSB7XG5cdFx0Y29uc3QgZGVzYyA9IGdldERlc2NyaXB0b3JGcm9tUHJvdG8obGF0ZXN0KHN0YXRlKSwgcHJvcClcblx0XHRpZiAoZGVzYz8uc2V0KSB7XG5cdFx0XHQvLyBzcGVjaWFsIGNhc2U6IGlmIHRoaXMgd3JpdGUgaXMgY2FwdHVyZWQgYnkgYSBzZXR0ZXIsIHdlIGhhdmVcblx0XHRcdC8vIHRvIHRyaWdnZXIgaXQgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG5cdFx0XHRkZXNjLnNldC5jYWxsKHN0YXRlLmRyYWZ0XywgdmFsdWUpXG5cdFx0XHRyZXR1cm4gdHJ1ZVxuXHRcdH1cblx0XHRpZiAoIXN0YXRlLm1vZGlmaWVkXykge1xuXHRcdFx0Ly8gdGhlIGxhc3QgY2hlY2sgaXMgYmVjYXVzZSB3ZSBuZWVkIHRvIGJlIGFibGUgdG8gZGlzdGluZ3Vpc2ggc2V0dGluZyBhIG5vbi1leGlzdGluZyB0byB1bmRlZmluZWQgKHdoaWNoIGlzIGEgY2hhbmdlKVxuXHRcdFx0Ly8gZnJvbSBzZXR0aW5nIGFuIGV4aXN0aW5nIHByb3BlcnR5IHdpdGggdmFsdWUgdW5kZWZpbmVkIHRvIHVuZGVmaW5lZCAod2hpY2ggaXMgbm90IGEgY2hhbmdlKVxuXHRcdFx0Y29uc3QgY3VycmVudCA9IHBlZWsobGF0ZXN0KHN0YXRlKSwgcHJvcClcblx0XHRcdC8vIHNwZWNpYWwgY2FzZSwgaWYgd2UgYXNzaWduaW5nIHRoZSBvcmlnaW5hbCB2YWx1ZSB0byBhIGRyYWZ0LCB3ZSBjYW4gaWdub3JlIHRoZSBhc3NpZ25tZW50XG5cdFx0XHRjb25zdCBjdXJyZW50U3RhdGU6IFByb3h5T2JqZWN0U3RhdGUgPSBjdXJyZW50Py5bRFJBRlRfU1RBVEVdXG5cdFx0XHRpZiAoY3VycmVudFN0YXRlICYmIGN1cnJlbnRTdGF0ZS5iYXNlXyA9PT0gdmFsdWUpIHtcblx0XHRcdFx0c3RhdGUuY29weV8hW3Byb3BdID0gdmFsdWVcblx0XHRcdFx0c3RhdGUuYXNzaWduZWRfW3Byb3BdID0gZmFsc2Vcblx0XHRcdFx0cmV0dXJuIHRydWVcblx0XHRcdH1cblx0XHRcdGlmIChpcyh2YWx1ZSwgY3VycmVudCkgJiYgKHZhbHVlICE9PSB1bmRlZmluZWQgfHwgaGFzKHN0YXRlLmJhc2VfLCBwcm9wKSkpXG5cdFx0XHRcdHJldHVybiB0cnVlXG5cdFx0XHRwcmVwYXJlQ29weShzdGF0ZSlcblx0XHRcdG1hcmtDaGFuZ2VkKHN0YXRlKVxuXHRcdH1cblxuXHRcdGlmIChcblx0XHRcdHN0YXRlLmNvcHlfIVtwcm9wXSA9PT0gdmFsdWUgJiZcblx0XHRcdC8vIHNwZWNpYWwgY2FzZTogTmFOXG5cdFx0XHR0eXBlb2YgdmFsdWUgIT09IFwibnVtYmVyXCIgJiZcblx0XHRcdC8vIHNwZWNpYWwgY2FzZTogaGFuZGxlIG5ldyBwcm9wcyB3aXRoIHZhbHVlICd1bmRlZmluZWQnXG5cdFx0XHQodmFsdWUgIT09IHVuZGVmaW5lZCB8fCBwcm9wIGluIHN0YXRlLmNvcHlfKVxuXHRcdClcblx0XHRcdHJldHVybiB0cnVlXG5cblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0c3RhdGUuY29weV8hW3Byb3BdID0gdmFsdWVcblx0XHRzdGF0ZS5hc3NpZ25lZF9bcHJvcF0gPSB0cnVlXG5cdFx0cmV0dXJuIHRydWVcblx0fSxcblx0ZGVsZXRlUHJvcGVydHkoc3RhdGUsIHByb3A6IHN0cmluZykge1xuXHRcdC8vIFRoZSBgdW5kZWZpbmVkYCBjaGVjayBpcyBhIGZhc3QgcGF0aCBmb3IgcHJlLWV4aXN0aW5nIGtleXMuXG5cdFx0aWYgKHBlZWsoc3RhdGUuYmFzZV8sIHByb3ApICE9PSB1bmRlZmluZWQgfHwgcHJvcCBpbiBzdGF0ZS5iYXNlXykge1xuXHRcdFx0c3RhdGUuYXNzaWduZWRfW3Byb3BdID0gZmFsc2Vcblx0XHRcdHByZXBhcmVDb3B5KHN0YXRlKVxuXHRcdFx0bWFya0NoYW5nZWQoc3RhdGUpXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGlmIGFuIG9yaWdpbmFsbHkgbm90IGFzc2lnbmVkIHByb3BlcnR5IHdhcyBkZWxldGVkXG5cdFx0XHRkZWxldGUgc3RhdGUuYXNzaWduZWRfW3Byb3BdXG5cdFx0fVxuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRpZiAoc3RhdGUuY29weV8pIGRlbGV0ZSBzdGF0ZS5jb3B5X1twcm9wXVxuXHRcdHJldHVybiB0cnVlXG5cdH0sXG5cdC8vIE5vdGU6IFdlIG5ldmVyIGNvZXJjZSBgZGVzYy52YWx1ZWAgaW50byBhbiBJbW1lciBkcmFmdCwgYmVjYXVzZSB3ZSBjYW4ndCBtYWtlXG5cdC8vIHRoZSBzYW1lIGd1YXJhbnRlZSBpbiBFUzUgbW9kZS5cblx0Z2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHN0YXRlLCBwcm9wKSB7XG5cdFx0Y29uc3Qgb3duZXIgPSBsYXRlc3Qoc3RhdGUpXG5cdFx0Y29uc3QgZGVzYyA9IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG93bmVyLCBwcm9wKVxuXHRcdGlmICghZGVzYykgcmV0dXJuIGRlc2Ncblx0XHRyZXR1cm4ge1xuXHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHN0YXRlLnR5cGVfICE9PSBQcm94eVR5cGUuUHJveHlBcnJheSB8fCBwcm9wICE9PSBcImxlbmd0aFwiLFxuXHRcdFx0ZW51bWVyYWJsZTogZGVzYy5lbnVtZXJhYmxlLFxuXHRcdFx0dmFsdWU6IG93bmVyW3Byb3BdXG5cdFx0fVxuXHR9LFxuXHRkZWZpbmVQcm9wZXJ0eSgpIHtcblx0XHRkaWUoMTEpXG5cdH0sXG5cdGdldFByb3RvdHlwZU9mKHN0YXRlKSB7XG5cdFx0cmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihzdGF0ZS5iYXNlXylcblx0fSxcblx0c2V0UHJvdG90eXBlT2YoKSB7XG5cdFx0ZGllKDEyKVxuXHR9XG59XG5cbi8qKlxuICogQXJyYXkgZHJhZnRzXG4gKi9cblxuY29uc3QgYXJyYXlUcmFwczogUHJveHlIYW5kbGVyPFtQcm94eUFycmF5U3RhdGVdPiA9IHt9XG5lYWNoKG9iamVjdFRyYXBzLCAoa2V5LCBmbikgPT4ge1xuXHQvLyBAdHMtaWdub3JlXG5cdGFycmF5VHJhcHNba2V5XSA9IGZ1bmN0aW9uKCkge1xuXHRcdGFyZ3VtZW50c1swXSA9IGFyZ3VtZW50c1swXVswXVxuXHRcdHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG5cdH1cbn0pXG5hcnJheVRyYXBzLmRlbGV0ZVByb3BlcnR5ID0gZnVuY3Rpb24oc3RhdGUsIHByb3ApIHtcblx0aWYgKF9fREVWX18gJiYgaXNOYU4ocGFyc2VJbnQocHJvcCBhcyBhbnkpKSkgZGllKDEzKVxuXHQvLyBAdHMtaWdub3JlXG5cdHJldHVybiBhcnJheVRyYXBzLnNldCEuY2FsbCh0aGlzLCBzdGF0ZSwgcHJvcCwgdW5kZWZpbmVkKVxufVxuYXJyYXlUcmFwcy5zZXQgPSBmdW5jdGlvbihzdGF0ZSwgcHJvcCwgdmFsdWUpIHtcblx0aWYgKF9fREVWX18gJiYgcHJvcCAhPT0gXCJsZW5ndGhcIiAmJiBpc05hTihwYXJzZUludChwcm9wIGFzIGFueSkpKSBkaWUoMTQpXG5cdHJldHVybiBvYmplY3RUcmFwcy5zZXQhLmNhbGwodGhpcywgc3RhdGVbMF0sIHByb3AsIHZhbHVlLCBzdGF0ZVswXSlcbn1cblxuLy8gQWNjZXNzIGEgcHJvcGVydHkgd2l0aG91dCBjcmVhdGluZyBhbiBJbW1lciBkcmFmdC5cbmZ1bmN0aW9uIHBlZWsoZHJhZnQ6IERyYWZ0ZWQsIHByb3A6IFByb3BlcnR5S2V5KSB7XG5cdGNvbnN0IHN0YXRlID0gZHJhZnRbRFJBRlRfU1RBVEVdXG5cdGNvbnN0IHNvdXJjZSA9IHN0YXRlID8gbGF0ZXN0KHN0YXRlKSA6IGRyYWZ0XG5cdHJldHVybiBzb3VyY2VbcHJvcF1cbn1cblxuZnVuY3Rpb24gcmVhZFByb3BGcm9tUHJvdG8oc3RhdGU6IEltbWVyU3RhdGUsIHNvdXJjZTogYW55LCBwcm9wOiBQcm9wZXJ0eUtleSkge1xuXHRjb25zdCBkZXNjID0gZ2V0RGVzY3JpcHRvckZyb21Qcm90byhzb3VyY2UsIHByb3ApXG5cdHJldHVybiBkZXNjXG5cdFx0PyBgdmFsdWVgIGluIGRlc2Ncblx0XHRcdD8gZGVzYy52YWx1ZVxuXHRcdFx0OiAvLyBUaGlzIGlzIGEgdmVyeSBzcGVjaWFsIGNhc2UsIGlmIHRoZSBwcm9wIGlzIGEgZ2V0dGVyIGRlZmluZWQgYnkgdGhlXG5cdFx0XHQgIC8vIHByb3RvdHlwZSwgd2Ugc2hvdWxkIGludm9rZSBpdCB3aXRoIHRoZSBkcmFmdCBhcyBjb250ZXh0IVxuXHRcdFx0ICBkZXNjLmdldD8uY2FsbChzdGF0ZS5kcmFmdF8pXG5cdFx0OiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gZ2V0RGVzY3JpcHRvckZyb21Qcm90byhcblx0c291cmNlOiBhbnksXG5cdHByb3A6IFByb3BlcnR5S2V5XG4pOiBQcm9wZXJ0eURlc2NyaXB0b3IgfCB1bmRlZmluZWQge1xuXHQvLyAnaW4nIGNoZWNrcyBwcm90byFcblx0aWYgKCEocHJvcCBpbiBzb3VyY2UpKSByZXR1cm4gdW5kZWZpbmVkXG5cdGxldCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihzb3VyY2UpXG5cdHdoaWxlIChwcm90bykge1xuXHRcdGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3RvLCBwcm9wKVxuXHRcdGlmIChkZXNjKSByZXR1cm4gZGVzY1xuXHRcdHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKVxuXHR9XG5cdHJldHVybiB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcmtDaGFuZ2VkKHN0YXRlOiBJbW1lclN0YXRlKSB7XG5cdGlmICghc3RhdGUubW9kaWZpZWRfKSB7XG5cdFx0c3RhdGUubW9kaWZpZWRfID0gdHJ1ZVxuXHRcdGlmIChzdGF0ZS5wYXJlbnRfKSB7XG5cdFx0XHRtYXJrQ2hhbmdlZChzdGF0ZS5wYXJlbnRfKVxuXHRcdH1cblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZUNvcHkoc3RhdGU6IHtiYXNlXzogYW55OyBjb3B5XzogYW55fSkge1xuXHRpZiAoIXN0YXRlLmNvcHlfKSB7XG5cdFx0c3RhdGUuY29weV8gPSBzaGFsbG93Q29weShzdGF0ZS5iYXNlXylcblx0fVxufVxuIiwiaW1wb3J0IHtcblx0SVByb2R1Y2VXaXRoUGF0Y2hlcyxcblx0SVByb2R1Y2UsXG5cdEltbWVyU3RhdGUsXG5cdERyYWZ0ZWQsXG5cdGlzRHJhZnRhYmxlLFxuXHRwcm9jZXNzUmVzdWx0LFxuXHRQYXRjaCxcblx0T2JqZWN0aXNoLFxuXHREUkFGVF9TVEFURSxcblx0RHJhZnQsXG5cdFBhdGNoTGlzdGVuZXIsXG5cdGlzRHJhZnQsXG5cdGlzTWFwLFxuXHRpc1NldCxcblx0Y3JlYXRlUHJveHlQcm94eSxcblx0Z2V0UGx1Z2luLFxuXHRkaWUsXG5cdGhhc1Byb3hpZXMsXG5cdGVudGVyU2NvcGUsXG5cdHJldm9rZVNjb3BlLFxuXHRsZWF2ZVNjb3BlLFxuXHR1c2VQYXRjaGVzSW5TY29wZSxcblx0Z2V0Q3VycmVudFNjb3BlLFxuXHROT1RISU5HLFxuXHRmcmVlemUsXG5cdGN1cnJlbnRcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuaW50ZXJmYWNlIFByb2R1Y2Vyc0ZucyB7XG5cdHByb2R1Y2U6IElQcm9kdWNlXG5cdHByb2R1Y2VXaXRoUGF0Y2hlczogSVByb2R1Y2VXaXRoUGF0Y2hlc1xufVxuXG5leHBvcnQgY2xhc3MgSW1tZXIgaW1wbGVtZW50cyBQcm9kdWNlcnNGbnMge1xuXHR1c2VQcm94aWVzXzogYm9vbGVhbiA9IGhhc1Byb3hpZXNcblxuXHRhdXRvRnJlZXplXzogYm9vbGVhbiA9IHRydWVcblxuXHRjb25zdHJ1Y3Rvcihjb25maWc/OiB7dXNlUHJveGllcz86IGJvb2xlYW47IGF1dG9GcmVlemU/OiBib29sZWFufSkge1xuXHRcdGlmICh0eXBlb2YgY29uZmlnPy51c2VQcm94aWVzID09PSBcImJvb2xlYW5cIilcblx0XHRcdHRoaXMuc2V0VXNlUHJveGllcyhjb25maWchLnVzZVByb3hpZXMpXG5cdFx0aWYgKHR5cGVvZiBjb25maWc/LmF1dG9GcmVlemUgPT09IFwiYm9vbGVhblwiKVxuXHRcdFx0dGhpcy5zZXRBdXRvRnJlZXplKGNvbmZpZyEuYXV0b0ZyZWV6ZSlcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgYHByb2R1Y2VgIGZ1bmN0aW9uIHRha2VzIGEgdmFsdWUgYW5kIGEgXCJyZWNpcGUgZnVuY3Rpb25cIiAod2hvc2Vcblx0ICogcmV0dXJuIHZhbHVlIG9mdGVuIGRlcGVuZHMgb24gdGhlIGJhc2Ugc3RhdGUpLiBUaGUgcmVjaXBlIGZ1bmN0aW9uIGlzXG5cdCAqIGZyZWUgdG8gbXV0YXRlIGl0cyBmaXJzdCBhcmd1bWVudCBob3dldmVyIGl0IHdhbnRzLiBBbGwgbXV0YXRpb25zIGFyZVxuXHQgKiBvbmx5IGV2ZXIgYXBwbGllZCB0byBhIF9fY29weV9fIG9mIHRoZSBiYXNlIHN0YXRlLlxuXHQgKlxuXHQgKiBQYXNzIG9ubHkgYSBmdW5jdGlvbiB0byBjcmVhdGUgYSBcImN1cnJpZWQgcHJvZHVjZXJcIiB3aGljaCByZWxpZXZlcyB5b3Vcblx0ICogZnJvbSBwYXNzaW5nIHRoZSByZWNpcGUgZnVuY3Rpb24gZXZlcnkgdGltZS5cblx0ICpcblx0ICogT25seSBwbGFpbiBvYmplY3RzIGFuZCBhcnJheXMgYXJlIG1hZGUgbXV0YWJsZS4gQWxsIG90aGVyIG9iamVjdHMgYXJlXG5cdCAqIGNvbnNpZGVyZWQgdW5jb3B5YWJsZS5cblx0ICpcblx0ICogTm90ZTogVGhpcyBmdW5jdGlvbiBpcyBfX2JvdW5kX18gdG8gaXRzIGBJbW1lcmAgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7YW55fSBiYXNlIC0gdGhlIGluaXRpYWwgc3RhdGVcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvZHVjZXIgLSBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIGEgcHJveHkgb2YgdGhlIGJhc2Ugc3RhdGUgYXMgZmlyc3QgYXJndW1lbnQgYW5kIHdoaWNoIGNhbiBiZSBmcmVlbHkgbW9kaWZpZWRcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gcGF0Y2hMaXN0ZW5lciAtIG9wdGlvbmFsIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2l0aCBhbGwgdGhlIHBhdGNoZXMgcHJvZHVjZWQgaGVyZVxuXHQgKiBAcmV0dXJucyB7YW55fSBhIG5ldyBzdGF0ZSwgb3IgdGhlIGluaXRpYWwgc3RhdGUgaWYgbm90aGluZyB3YXMgbW9kaWZpZWRcblx0ICovXG5cdHByb2R1Y2U6IElQcm9kdWNlID0gKGJhc2U6IGFueSwgcmVjaXBlPzogYW55LCBwYXRjaExpc3RlbmVyPzogYW55KSA9PiB7XG5cdFx0Ly8gY3VycmllZCBpbnZvY2F0aW9uXG5cdFx0aWYgKHR5cGVvZiBiYXNlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIHJlY2lwZSAhPT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRjb25zdCBkZWZhdWx0QmFzZSA9IHJlY2lwZVxuXHRcdFx0cmVjaXBlID0gYmFzZVxuXG5cdFx0XHRjb25zdCBzZWxmID0gdGhpc1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIGN1cnJpZWRQcm9kdWNlKFxuXHRcdFx0XHR0aGlzOiBhbnksXG5cdFx0XHRcdGJhc2UgPSBkZWZhdWx0QmFzZSxcblx0XHRcdFx0Li4uYXJnczogYW55W11cblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm4gc2VsZi5wcm9kdWNlKGJhc2UsIChkcmFmdDogRHJhZnRlZCkgPT4gcmVjaXBlLmNhbGwodGhpcywgZHJhZnQsIC4uLmFyZ3MpKSAvLyBwcmV0dGllci1pZ25vcmVcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIHJlY2lwZSAhPT0gXCJmdW5jdGlvblwiKSBkaWUoNilcblx0XHRpZiAocGF0Y2hMaXN0ZW5lciAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBwYXRjaExpc3RlbmVyICE9PSBcImZ1bmN0aW9uXCIpXG5cdFx0XHRkaWUoNylcblxuXHRcdGxldCByZXN1bHRcblxuXHRcdC8vIE9ubHkgcGxhaW4gb2JqZWN0cywgYXJyYXlzLCBhbmQgXCJpbW1lcmFibGUgY2xhc3Nlc1wiIGFyZSBkcmFmdGVkLlxuXHRcdGlmIChpc0RyYWZ0YWJsZShiYXNlKSkge1xuXHRcdFx0Y29uc3Qgc2NvcGUgPSBlbnRlclNjb3BlKHRoaXMpXG5cdFx0XHRjb25zdCBwcm94eSA9IGNyZWF0ZVByb3h5KHRoaXMsIGJhc2UsIHVuZGVmaW5lZClcblx0XHRcdGxldCBoYXNFcnJvciA9IHRydWVcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHJlc3VsdCA9IHJlY2lwZShwcm94eSlcblx0XHRcdFx0aGFzRXJyb3IgPSBmYWxzZVxuXHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0Ly8gZmluYWxseSBpbnN0ZWFkIG9mIGNhdGNoICsgcmV0aHJvdyBiZXR0ZXIgcHJlc2VydmVzIG9yaWdpbmFsIHN0YWNrXG5cdFx0XHRcdGlmIChoYXNFcnJvcikgcmV2b2tlU2NvcGUoc2NvcGUpXG5cdFx0XHRcdGVsc2UgbGVhdmVTY29wZShzY29wZSlcblx0XHRcdH1cblx0XHRcdGlmICh0eXBlb2YgUHJvbWlzZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiByZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHQudGhlbihcblx0XHRcdFx0XHRyZXN1bHQgPT4ge1xuXHRcdFx0XHRcdFx0dXNlUGF0Y2hlc0luU2NvcGUoc2NvcGUsIHBhdGNoTGlzdGVuZXIpXG5cdFx0XHRcdFx0XHRyZXR1cm4gcHJvY2Vzc1Jlc3VsdChyZXN1bHQsIHNjb3BlKVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0ZXJyb3IgPT4ge1xuXHRcdFx0XHRcdFx0cmV2b2tlU2NvcGUoc2NvcGUpXG5cdFx0XHRcdFx0XHR0aHJvdyBlcnJvclxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KVxuXHRcdFx0fVxuXHRcdFx0dXNlUGF0Y2hlc0luU2NvcGUoc2NvcGUsIHBhdGNoTGlzdGVuZXIpXG5cdFx0XHRyZXR1cm4gcHJvY2Vzc1Jlc3VsdChyZXN1bHQsIHNjb3BlKVxuXHRcdH0gZWxzZSBpZiAoIWJhc2UgfHwgdHlwZW9mIGJhc2UgIT09IFwib2JqZWN0XCIpIHtcblx0XHRcdHJlc3VsdCA9IHJlY2lwZShiYXNlKVxuXHRcdFx0aWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSByZXN1bHQgPSBiYXNlXG5cdFx0XHRpZiAocmVzdWx0ID09PSBOT1RISU5HKSByZXN1bHQgPSB1bmRlZmluZWRcblx0XHRcdGlmICh0aGlzLmF1dG9GcmVlemVfKSBmcmVlemUocmVzdWx0LCB0cnVlKVxuXHRcdFx0aWYgKHBhdGNoTGlzdGVuZXIpIHtcblx0XHRcdFx0Y29uc3QgcDogUGF0Y2hbXSA9IFtdXG5cdFx0XHRcdGNvbnN0IGlwOiBQYXRjaFtdID0gW11cblx0XHRcdFx0Z2V0UGx1Z2luKFwiUGF0Y2hlc1wiKS5nZW5lcmF0ZVJlcGxhY2VtZW50UGF0Y2hlc18oYmFzZSwgcmVzdWx0LCBwLCBpcClcblx0XHRcdFx0cGF0Y2hMaXN0ZW5lcihwLCBpcClcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRcblx0XHR9IGVsc2UgZGllKDIxLCBiYXNlKVxuXHR9XG5cblx0cHJvZHVjZVdpdGhQYXRjaGVzOiBJUHJvZHVjZVdpdGhQYXRjaGVzID0gKFxuXHRcdGFyZzE6IGFueSxcblx0XHRhcmcyPzogYW55LFxuXHRcdGFyZzM/OiBhbnlcblx0KTogYW55ID0+IHtcblx0XHRpZiAodHlwZW9mIGFyZzEgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0cmV0dXJuIChzdGF0ZTogYW55LCAuLi5hcmdzOiBhbnlbXSkgPT5cblx0XHRcdFx0dGhpcy5wcm9kdWNlV2l0aFBhdGNoZXMoc3RhdGUsIChkcmFmdDogYW55KSA9PiBhcmcxKGRyYWZ0LCAuLi5hcmdzKSlcblx0XHR9XG5cblx0XHRsZXQgcGF0Y2hlczogUGF0Y2hbXSwgaW52ZXJzZVBhdGNoZXM6IFBhdGNoW11cblx0XHRjb25zdCByZXN1bHQgPSB0aGlzLnByb2R1Y2UoYXJnMSwgYXJnMiwgKHA6IFBhdGNoW10sIGlwOiBQYXRjaFtdKSA9PiB7XG5cdFx0XHRwYXRjaGVzID0gcFxuXHRcdFx0aW52ZXJzZVBhdGNoZXMgPSBpcFxuXHRcdH0pXG5cblx0XHRpZiAodHlwZW9mIFByb21pc2UgIT09IFwidW5kZWZpbmVkXCIgJiYgcmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuXHRcdFx0cmV0dXJuIHJlc3VsdC50aGVuKG5leHRTdGF0ZSA9PiBbbmV4dFN0YXRlLCBwYXRjaGVzISwgaW52ZXJzZVBhdGNoZXMhXSlcblx0XHR9XG5cdFx0cmV0dXJuIFtyZXN1bHQsIHBhdGNoZXMhLCBpbnZlcnNlUGF0Y2hlcyFdXG5cdH1cblxuXHRjcmVhdGVEcmFmdDxUIGV4dGVuZHMgT2JqZWN0aXNoPihiYXNlOiBUKTogRHJhZnQ8VD4ge1xuXHRcdGlmICghaXNEcmFmdGFibGUoYmFzZSkpIGRpZSg4KVxuXHRcdGlmIChpc0RyYWZ0KGJhc2UpKSBiYXNlID0gY3VycmVudChiYXNlKVxuXHRcdGNvbnN0IHNjb3BlID0gZW50ZXJTY29wZSh0aGlzKVxuXHRcdGNvbnN0IHByb3h5ID0gY3JlYXRlUHJveHkodGhpcywgYmFzZSwgdW5kZWZpbmVkKVxuXHRcdHByb3h5W0RSQUZUX1NUQVRFXS5pc01hbnVhbF8gPSB0cnVlXG5cdFx0bGVhdmVTY29wZShzY29wZSlcblx0XHRyZXR1cm4gcHJveHkgYXMgYW55XG5cdH1cblxuXHRmaW5pc2hEcmFmdDxEIGV4dGVuZHMgRHJhZnQ8YW55Pj4oXG5cdFx0ZHJhZnQ6IEQsXG5cdFx0cGF0Y2hMaXN0ZW5lcj86IFBhdGNoTGlzdGVuZXJcblx0KTogRCBleHRlbmRzIERyYWZ0PGluZmVyIFQ+ID8gVCA6IG5ldmVyIHtcblx0XHRjb25zdCBzdGF0ZTogSW1tZXJTdGF0ZSA9IGRyYWZ0ICYmIChkcmFmdCBhcyBhbnkpW0RSQUZUX1NUQVRFXVxuXHRcdGlmIChfX0RFVl9fKSB7XG5cdFx0XHRpZiAoIXN0YXRlIHx8ICFzdGF0ZS5pc01hbnVhbF8pIGRpZSg5KVxuXHRcdFx0aWYgKHN0YXRlLmZpbmFsaXplZF8pIGRpZSgxMClcblx0XHR9XG5cdFx0Y29uc3Qge3Njb3BlXzogc2NvcGV9ID0gc3RhdGVcblx0XHR1c2VQYXRjaGVzSW5TY29wZShzY29wZSwgcGF0Y2hMaXN0ZW5lcilcblx0XHRyZXR1cm4gcHJvY2Vzc1Jlc3VsdCh1bmRlZmluZWQsIHNjb3BlKVxuXHR9XG5cblx0LyoqXG5cdCAqIFBhc3MgdHJ1ZSB0byBhdXRvbWF0aWNhbGx5IGZyZWV6ZSBhbGwgY29waWVzIGNyZWF0ZWQgYnkgSW1tZXIuXG5cdCAqXG5cdCAqIEJ5IGRlZmF1bHQsIGF1dG8tZnJlZXppbmcgaXMgZW5hYmxlZC5cblx0ICovXG5cdHNldEF1dG9GcmVlemUodmFsdWU6IGJvb2xlYW4pIHtcblx0XHR0aGlzLmF1dG9GcmVlemVfID0gdmFsdWVcblx0fVxuXG5cdC8qKlxuXHQgKiBQYXNzIHRydWUgdG8gdXNlIHRoZSBFUzIwMTUgYFByb3h5YCBjbGFzcyB3aGVuIGNyZWF0aW5nIGRyYWZ0cywgd2hpY2ggaXNcblx0ICogYWx3YXlzIGZhc3RlciB0aGFuIHVzaW5nIEVTNSBwcm94aWVzLlxuXHQgKlxuXHQgKiBCeSBkZWZhdWx0LCBmZWF0dXJlIGRldGVjdGlvbiBpcyB1c2VkLCBzbyBjYWxsaW5nIHRoaXMgaXMgcmFyZWx5IG5lY2Vzc2FyeS5cblx0ICovXG5cdHNldFVzZVByb3hpZXModmFsdWU6IGJvb2xlYW4pIHtcblx0XHRpZiAodmFsdWUgJiYgIWhhc1Byb3hpZXMpIHtcblx0XHRcdGRpZSgyMClcblx0XHR9XG5cdFx0dGhpcy51c2VQcm94aWVzXyA9IHZhbHVlXG5cdH1cblxuXHRhcHBseVBhdGNoZXM8VCBleHRlbmRzIE9iamVjdGlzaD4oYmFzZTogVCwgcGF0Y2hlczogUGF0Y2hbXSk6IFQge1xuXHRcdC8vIElmIGEgcGF0Y2ggcmVwbGFjZXMgdGhlIGVudGlyZSBzdGF0ZSwgdGFrZSB0aGF0IHJlcGxhY2VtZW50IGFzIGJhc2Vcblx0XHQvLyBiZWZvcmUgYXBwbHlpbmcgcGF0Y2hlc1xuXHRcdGxldCBpOiBudW1iZXJcblx0XHRmb3IgKGkgPSBwYXRjaGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRjb25zdCBwYXRjaCA9IHBhdGNoZXNbaV1cblx0XHRcdGlmIChwYXRjaC5wYXRoLmxlbmd0aCA9PT0gMCAmJiBwYXRjaC5vcCA9PT0gXCJyZXBsYWNlXCIpIHtcblx0XHRcdFx0YmFzZSA9IHBhdGNoLnZhbHVlXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIElmIHRoZXJlIHdhcyBhIHBhdGNoIHRoYXQgcmVwbGFjZWQgdGhlIGVudGlyZSBzdGF0ZSwgc3RhcnQgZnJvbSB0aGVcblx0XHQvLyBwYXRjaCBhZnRlciB0aGF0LlxuXHRcdGlmIChpID4gLTEpIHtcblx0XHRcdHBhdGNoZXMgPSBwYXRjaGVzLnNsaWNlKGkgKyAxKVxuXHRcdH1cblxuXHRcdGNvbnN0IGFwcGx5UGF0Y2hlc0ltcGwgPSBnZXRQbHVnaW4oXCJQYXRjaGVzXCIpLmFwcGx5UGF0Y2hlc19cblx0XHRpZiAoaXNEcmFmdChiYXNlKSkge1xuXHRcdFx0Ly8gTi5COiBuZXZlciBoaXRzIGlmIHNvbWUgcGF0Y2ggYSByZXBsYWNlbWVudCwgcGF0Y2hlcyBhcmUgbmV2ZXIgZHJhZnRzXG5cdFx0XHRyZXR1cm4gYXBwbHlQYXRjaGVzSW1wbChiYXNlLCBwYXRjaGVzKVxuXHRcdH1cblx0XHQvLyBPdGhlcndpc2UsIHByb2R1Y2UgYSBjb3B5IG9mIHRoZSBiYXNlIHN0YXRlLlxuXHRcdHJldHVybiB0aGlzLnByb2R1Y2UoYmFzZSwgKGRyYWZ0OiBEcmFmdGVkKSA9PlxuXHRcdFx0YXBwbHlQYXRjaGVzSW1wbChkcmFmdCwgcGF0Y2hlcylcblx0XHQpXG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb3h5PFQgZXh0ZW5kcyBPYmplY3Rpc2g+KFxuXHRpbW1lcjogSW1tZXIsXG5cdHZhbHVlOiBULFxuXHRwYXJlbnQ/OiBJbW1lclN0YXRlXG4pOiBEcmFmdGVkPFQsIEltbWVyU3RhdGU+IHtcblx0Ly8gcHJlY29uZGl0aW9uOiBjcmVhdGVQcm94eSBzaG91bGQgYmUgZ3VhcmRlZCBieSBpc0RyYWZ0YWJsZSwgc28gd2Uga25vdyB3ZSBjYW4gc2FmZWx5IGRyYWZ0XG5cdGNvbnN0IGRyYWZ0OiBEcmFmdGVkID0gaXNNYXAodmFsdWUpXG5cdFx0PyBnZXRQbHVnaW4oXCJNYXBTZXRcIikucHJveHlNYXBfKHZhbHVlLCBwYXJlbnQpXG5cdFx0OiBpc1NldCh2YWx1ZSlcblx0XHQ/IGdldFBsdWdpbihcIk1hcFNldFwiKS5wcm94eVNldF8odmFsdWUsIHBhcmVudClcblx0XHQ6IGltbWVyLnVzZVByb3hpZXNfXG5cdFx0PyBjcmVhdGVQcm94eVByb3h5KHZhbHVlLCBwYXJlbnQpXG5cdFx0OiBnZXRQbHVnaW4oXCJFUzVcIikuY3JlYXRlRVM1UHJveHlfKHZhbHVlLCBwYXJlbnQpXG5cblx0Y29uc3Qgc2NvcGUgPSBwYXJlbnQgPyBwYXJlbnQuc2NvcGVfIDogZ2V0Q3VycmVudFNjb3BlKClcblx0c2NvcGUuZHJhZnRzXy5wdXNoKGRyYWZ0KVxuXHRyZXR1cm4gZHJhZnRcbn1cbiIsImltcG9ydCB7XG5cdGRpZSxcblx0aXNEcmFmdCxcblx0c2hhbGxvd0NvcHksXG5cdGVhY2gsXG5cdERSQUZUX1NUQVRFLFxuXHRnZXQsXG5cdHNldCxcblx0SW1tZXJTdGF0ZSxcblx0aXNEcmFmdGFibGUsXG5cdEFyY2h0eXBlLFxuXHRnZXRBcmNodHlwZSxcblx0Z2V0UGx1Z2luXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbi8qKiBUYWtlcyBhIHNuYXBzaG90IG9mIHRoZSBjdXJyZW50IHN0YXRlIG9mIGEgZHJhZnQgYW5kIGZpbmFsaXplcyBpdCAoYnV0IHdpdGhvdXQgZnJlZXppbmcpLiBUaGlzIGlzIGEgZ3JlYXQgdXRpbGl0eSB0byBwcmludCB0aGUgY3VycmVudCBzdGF0ZSBkdXJpbmcgZGVidWdnaW5nIChubyBQcm94aWVzIGluIHRoZSB3YXkpLiBUaGUgb3V0cHV0IG9mIGN1cnJlbnQgY2FuIGFsc28gYmUgc2FmZWx5IGxlYWtlZCBvdXRzaWRlIHRoZSBwcm9kdWNlci4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjdXJyZW50PFQ+KHZhbHVlOiBUKTogVFxuZXhwb3J0IGZ1bmN0aW9uIGN1cnJlbnQodmFsdWU6IGFueSk6IGFueSB7XG5cdGlmICghaXNEcmFmdCh2YWx1ZSkpIGRpZSgyMiwgdmFsdWUpXG5cdHJldHVybiBjdXJyZW50SW1wbCh2YWx1ZSlcbn1cblxuZnVuY3Rpb24gY3VycmVudEltcGwodmFsdWU6IGFueSk6IGFueSB7XG5cdGlmICghaXNEcmFmdGFibGUodmFsdWUpKSByZXR1cm4gdmFsdWVcblx0Y29uc3Qgc3RhdGU6IEltbWVyU3RhdGUgfCB1bmRlZmluZWQgPSB2YWx1ZVtEUkFGVF9TVEFURV1cblx0bGV0IGNvcHk6IGFueVxuXHRjb25zdCBhcmNoVHlwZSA9IGdldEFyY2h0eXBlKHZhbHVlKVxuXHRpZiAoc3RhdGUpIHtcblx0XHRpZiAoXG5cdFx0XHQhc3RhdGUubW9kaWZpZWRfICYmXG5cdFx0XHQoc3RhdGUudHlwZV8gPCA0IHx8ICFnZXRQbHVnaW4oXCJFUzVcIikuaGFzQ2hhbmdlc18oc3RhdGUgYXMgYW55KSlcblx0XHQpXG5cdFx0XHRyZXR1cm4gc3RhdGUuYmFzZV9cblx0XHQvLyBPcHRpbWl6YXRpb246IGF2b2lkIGdlbmVyYXRpbmcgbmV3IGRyYWZ0cyBkdXJpbmcgY29weWluZ1xuXHRcdHN0YXRlLmZpbmFsaXplZF8gPSB0cnVlXG5cdFx0Y29weSA9IGNvcHlIZWxwZXIodmFsdWUsIGFyY2hUeXBlKVxuXHRcdHN0YXRlLmZpbmFsaXplZF8gPSBmYWxzZVxuXHR9IGVsc2Uge1xuXHRcdGNvcHkgPSBjb3B5SGVscGVyKHZhbHVlLCBhcmNoVHlwZSlcblx0fVxuXG5cdGVhY2goY29weSwgKGtleSwgY2hpbGRWYWx1ZSkgPT4ge1xuXHRcdGlmIChzdGF0ZSAmJiBnZXQoc3RhdGUuYmFzZV8sIGtleSkgPT09IGNoaWxkVmFsdWUpIHJldHVybiAvLyBubyBuZWVkIHRvIGNvcHkgb3Igc2VhcmNoIGluIHNvbWV0aGluZyB0aGF0IGRpZG4ndCBjaGFuZ2Vcblx0XHRzZXQoY29weSwga2V5LCBjdXJyZW50SW1wbChjaGlsZFZhbHVlKSlcblx0fSlcblx0Ly8gSW4gdGhlIGZ1dHVyZSwgd2UgbWlnaHQgY29uc2lkZXIgZnJlZXppbmcgaGVyZSwgYmFzZWQgb24gdGhlIGN1cnJlbnQgc2V0dGluZ3Ncblx0cmV0dXJuIGFyY2hUeXBlID09PSBBcmNodHlwZS5TZXQgPyBuZXcgU2V0KGNvcHkpIDogY29weVxufVxuXG5mdW5jdGlvbiBjb3B5SGVscGVyKHZhbHVlOiBhbnksIGFyY2hUeXBlOiBudW1iZXIpOiBhbnkge1xuXHQvLyBjcmVhdGVzIGEgc2hhbGxvdyBjb3B5LCBldmVuIGlmIGl0IGlzIGEgbWFwIG9yIHNldFxuXHRzd2l0Y2ggKGFyY2hUeXBlKSB7XG5cdFx0Y2FzZSBBcmNodHlwZS5NYXA6XG5cdFx0XHRyZXR1cm4gbmV3IE1hcCh2YWx1ZSlcblx0XHRjYXNlIEFyY2h0eXBlLlNldDpcblx0XHRcdC8vIFNldCB3aWxsIGJlIGNsb25lZCBhcyBhcnJheSB0ZW1wb3JhcmlseSwgc28gdGhhdCB3ZSBjYW4gcmVwbGFjZSBpbmRpdmlkdWFsIGl0ZW1zXG5cdFx0XHRyZXR1cm4gQXJyYXkuZnJvbSh2YWx1ZSlcblx0fVxuXHRyZXR1cm4gc2hhbGxvd0NvcHkodmFsdWUpXG59XG4iLCJpbXBvcnQge1xuXHRJUHJvZHVjZSxcblx0SVByb2R1Y2VXaXRoUGF0Y2hlcyxcblx0SW1tZXIsXG5cdERyYWZ0LFxuXHRJbW11dGFibGVcbn0gZnJvbSBcIi4vaW50ZXJuYWxcIlxuXG5leHBvcnQge1xuXHREcmFmdCxcblx0SW1tdXRhYmxlLFxuXHRQYXRjaCxcblx0UGF0Y2hMaXN0ZW5lcixcblx0b3JpZ2luYWwsXG5cdGN1cnJlbnQsXG5cdGlzRHJhZnQsXG5cdGlzRHJhZnRhYmxlLFxuXHROT1RISU5HIGFzIG5vdGhpbmcsXG5cdERSQUZUQUJMRSBhcyBpbW1lcmFibGUsXG5cdGZyZWV6ZVxufSBmcm9tIFwiLi9pbnRlcm5hbFwiXG5cbmNvbnN0IGltbWVyID0gbmV3IEltbWVyKClcblxuLyoqXG4gKiBUaGUgYHByb2R1Y2VgIGZ1bmN0aW9uIHRha2VzIGEgdmFsdWUgYW5kIGEgXCJyZWNpcGUgZnVuY3Rpb25cIiAod2hvc2VcbiAqIHJldHVybiB2YWx1ZSBvZnRlbiBkZXBlbmRzIG9uIHRoZSBiYXNlIHN0YXRlKS4gVGhlIHJlY2lwZSBmdW5jdGlvbiBpc1xuICogZnJlZSB0byBtdXRhdGUgaXRzIGZpcnN0IGFyZ3VtZW50IGhvd2V2ZXIgaXQgd2FudHMuIEFsbCBtdXRhdGlvbnMgYXJlXG4gKiBvbmx5IGV2ZXIgYXBwbGllZCB0byBhIF9fY29weV9fIG9mIHRoZSBiYXNlIHN0YXRlLlxuICpcbiAqIFBhc3Mgb25seSBhIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIFwiY3VycmllZCBwcm9kdWNlclwiIHdoaWNoIHJlbGlldmVzIHlvdVxuICogZnJvbSBwYXNzaW5nIHRoZSByZWNpcGUgZnVuY3Rpb24gZXZlcnkgdGltZS5cbiAqXG4gKiBPbmx5IHBsYWluIG9iamVjdHMgYW5kIGFycmF5cyBhcmUgbWFkZSBtdXRhYmxlLiBBbGwgb3RoZXIgb2JqZWN0cyBhcmVcbiAqIGNvbnNpZGVyZWQgdW5jb3B5YWJsZS5cbiAqXG4gKiBOb3RlOiBUaGlzIGZ1bmN0aW9uIGlzIF9fYm91bmRfXyB0byBpdHMgYEltbWVyYCBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gYmFzZSAtIHRoZSBpbml0aWFsIHN0YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm9kdWNlciAtIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgYSBwcm94eSBvZiB0aGUgYmFzZSBzdGF0ZSBhcyBmaXJzdCBhcmd1bWVudCBhbmQgd2hpY2ggY2FuIGJlIGZyZWVseSBtb2RpZmllZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcGF0Y2hMaXN0ZW5lciAtIG9wdGlvbmFsIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2l0aCBhbGwgdGhlIHBhdGNoZXMgcHJvZHVjZWQgaGVyZVxuICogQHJldHVybnMge2FueX0gYSBuZXcgc3RhdGUsIG9yIHRoZSBpbml0aWFsIHN0YXRlIGlmIG5vdGhpbmcgd2FzIG1vZGlmaWVkXG4gKi9cbmV4cG9ydCBjb25zdCBwcm9kdWNlOiBJUHJvZHVjZSA9IGltbWVyLnByb2R1Y2VcbmV4cG9ydCBkZWZhdWx0IHByb2R1Y2VcblxuLyoqXG4gKiBMaWtlIGBwcm9kdWNlYCwgYnV0IGBwcm9kdWNlV2l0aFBhdGNoZXNgIGFsd2F5cyByZXR1cm5zIGEgdHVwbGVcbiAqIFtuZXh0U3RhdGUsIHBhdGNoZXMsIGludmVyc2VQYXRjaGVzXSAoaW5zdGVhZCBvZiBqdXN0IHRoZSBuZXh0IHN0YXRlKVxuICovXG5leHBvcnQgY29uc3QgcHJvZHVjZVdpdGhQYXRjaGVzOiBJUHJvZHVjZVdpdGhQYXRjaGVzID0gaW1tZXIucHJvZHVjZVdpdGhQYXRjaGVzLmJpbmQoXG5cdGltbWVyXG4pXG5cbi8qKlxuICogUGFzcyB0cnVlIHRvIGF1dG9tYXRpY2FsbHkgZnJlZXplIGFsbCBjb3BpZXMgY3JlYXRlZCBieSBJbW1lci5cbiAqXG4gKiBBbHdheXMgZnJlZXplIGJ5IGRlZmF1bHQsIGV2ZW4gaW4gcHJvZHVjdGlvbiBtb2RlXG4gKi9cbmV4cG9ydCBjb25zdCBzZXRBdXRvRnJlZXplID0gaW1tZXIuc2V0QXV0b0ZyZWV6ZS5iaW5kKGltbWVyKVxuXG4vKipcbiAqIFBhc3MgdHJ1ZSB0byB1c2UgdGhlIEVTMjAxNSBgUHJveHlgIGNsYXNzIHdoZW4gY3JlYXRpbmcgZHJhZnRzLCB3aGljaCBpc1xuICogYWx3YXlzIGZhc3RlciB0aGFuIHVzaW5nIEVTNSBwcm94aWVzLlxuICpcbiAqIEJ5IGRlZmF1bHQsIGZlYXR1cmUgZGV0ZWN0aW9uIGlzIHVzZWQsIHNvIGNhbGxpbmcgdGhpcyBpcyByYXJlbHkgbmVjZXNzYXJ5LlxuICovXG5leHBvcnQgY29uc3Qgc2V0VXNlUHJveGllcyA9IGltbWVyLnNldFVzZVByb3hpZXMuYmluZChpbW1lcilcblxuLyoqXG4gKiBBcHBseSBhbiBhcnJheSBvZiBJbW1lciBwYXRjaGVzIHRvIHRoZSBmaXJzdCBhcmd1bWVudC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGEgcHJvZHVjZXIsIHdoaWNoIG1lYW5zIGNvcHktb24td3JpdGUgaXMgaW4gZWZmZWN0LlxuICovXG5leHBvcnQgY29uc3QgYXBwbHlQYXRjaGVzID0gaW1tZXIuYXBwbHlQYXRjaGVzLmJpbmQoaW1tZXIpXG5cbi8qKlxuICogQ3JlYXRlIGFuIEltbWVyIGRyYWZ0IGZyb20gdGhlIGdpdmVuIGJhc2Ugc3RhdGUsIHdoaWNoIG1heSBiZSBhIGRyYWZ0IGl0c2VsZi5cbiAqIFRoZSBkcmFmdCBjYW4gYmUgbW9kaWZpZWQgdW50aWwgeW91IGZpbmFsaXplIGl0IHdpdGggdGhlIGBmaW5pc2hEcmFmdGAgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVEcmFmdCA9IGltbWVyLmNyZWF0ZURyYWZ0LmJpbmQoaW1tZXIpXG5cbi8qKlxuICogRmluYWxpemUgYW4gSW1tZXIgZHJhZnQgZnJvbSBhIGBjcmVhdGVEcmFmdGAgY2FsbCwgcmV0dXJuaW5nIHRoZSBiYXNlIHN0YXRlXG4gKiAoaWYgbm8gY2hhbmdlcyB3ZXJlIG1hZGUpIG9yIGEgbW9kaWZpZWQgY29weS4gVGhlIGRyYWZ0IG11c3QgKm5vdCogYmVcbiAqIG11dGF0ZWQgYWZ0ZXJ3YXJkcy5cbiAqXG4gKiBQYXNzIGEgZnVuY3Rpb24gYXMgdGhlIDJuZCBhcmd1bWVudCB0byBnZW5lcmF0ZSBJbW1lciBwYXRjaGVzIGJhc2VkIG9uIHRoZVxuICogY2hhbmdlcyB0aGF0IHdlcmUgbWFkZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGZpbmlzaERyYWZ0ID0gaW1tZXIuZmluaXNoRHJhZnQuYmluZChpbW1lcilcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGFjdHVhbGx5IGEgbm8tb3AsIGJ1dCBjYW4gYmUgdXNlZCB0byBjYXN0IGFuIGltbXV0YWJsZSB0eXBlXG4gKiB0byBhbiBkcmFmdCB0eXBlIGFuZCBtYWtlIFR5cGVTY3JpcHQgaGFwcHlcbiAqXG4gKiBAcGFyYW0gdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhc3REcmFmdDxUPih2YWx1ZTogVCk6IERyYWZ0PFQ+IHtcblx0cmV0dXJuIHZhbHVlIGFzIGFueVxufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgYWN0dWFsbHkgYSBuby1vcCwgYnV0IGNhbiBiZSB1c2VkIHRvIGNhc3QgYSBtdXRhYmxlIHR5cGVcbiAqIHRvIGFuIGltbXV0YWJsZSB0eXBlIGFuZCBtYWtlIFR5cGVTY3JpcHQgaGFwcHlcbiAqIEBwYXJhbSB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FzdEltbXV0YWJsZTxUPih2YWx1ZTogVCk6IEltbXV0YWJsZTxUPiB7XG5cdHJldHVybiB2YWx1ZSBhcyBhbnlcbn1cblxuZXhwb3J0IHtJbW1lcn1cblxuZXhwb3J0IHtlbmFibGVFUzV9IGZyb20gXCIuL3BsdWdpbnMvZXM1XCJcbmV4cG9ydCB7ZW5hYmxlUGF0Y2hlc30gZnJvbSBcIi4vcGx1Z2lucy9wYXRjaGVzXCJcbmV4cG9ydCB7ZW5hYmxlTWFwU2V0fSBmcm9tIFwiLi9wbHVnaW5zL21hcHNldFwiXG5leHBvcnQge2VuYWJsZUFsbFBsdWdpbnN9IGZyb20gXCIuL3BsdWdpbnMvYWxsXCJcbiIsIi8vIFNob3VsZCBiZSBubyBpbXBvcnRzIGhlcmUhXG5cbi8vIFNvbWUgdGhpbmdzIHRoYXQgc2hvdWxkIGJlIGV2YWx1YXRlZCBiZWZvcmUgYWxsIGVsc2UuLi5cblxuLy8gV2Ugb25seSB3YW50IHRvIGtub3cgaWYgbm9uLXBvbHlmaWxsZWQgc3ltYm9scyBhcmUgYXZhaWxhYmxlXG5jb25zdCBoYXNTeW1ib2wgPVxuXHR0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBTeW1ib2woXCJ4XCIpID09PSBcInN5bWJvbFwiXG5leHBvcnQgY29uc3QgaGFzTWFwID0gdHlwZW9mIE1hcCAhPT0gXCJ1bmRlZmluZWRcIlxuZXhwb3J0IGNvbnN0IGhhc1NldCA9IHR5cGVvZiBTZXQgIT09IFwidW5kZWZpbmVkXCJcbmV4cG9ydCBjb25zdCBoYXNQcm94aWVzID1cblx0dHlwZW9mIFByb3h5ICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdHR5cGVvZiBQcm94eS5yZXZvY2FibGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0dHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCJcblxuLyoqXG4gKiBUaGUgc2VudGluZWwgdmFsdWUgcmV0dXJuZWQgYnkgcHJvZHVjZXJzIHRvIHJlcGxhY2UgdGhlIGRyYWZ0IHdpdGggdW5kZWZpbmVkLlxuICovXG5leHBvcnQgY29uc3QgTk9USElORzogTm90aGluZyA9IGhhc1N5bWJvbFxuXHQ/IFN5bWJvbC5mb3IoXCJpbW1lci1ub3RoaW5nXCIpXG5cdDogKHtbXCJpbW1lci1ub3RoaW5nXCJdOiB0cnVlfSBhcyBhbnkpXG5cbi8qKlxuICogVG8gbGV0IEltbWVyIHRyZWF0IHlvdXIgY2xhc3MgaW5zdGFuY2VzIGFzIHBsYWluIGltbXV0YWJsZSBvYmplY3RzXG4gKiAoYWxiZWl0IHdpdGggYSBjdXN0b20gcHJvdG90eXBlKSwgeW91IG11c3QgZGVmaW5lIGVpdGhlciBhbiBpbnN0YW5jZSBwcm9wZXJ0eVxuICogb3IgYSBzdGF0aWMgcHJvcGVydHkgb24gZWFjaCBvZiB5b3VyIGN1c3RvbSBjbGFzc2VzLlxuICpcbiAqIE90aGVyd2lzZSwgeW91ciBjbGFzcyBpbnN0YW5jZSB3aWxsIG5ldmVyIGJlIGRyYWZ0ZWQsIHdoaWNoIG1lYW5zIGl0IHdvbid0IGJlXG4gKiBzYWZlIHRvIG11dGF0ZSBpbiBhIHByb2R1Y2UgY2FsbGJhY2suXG4gKi9cbmV4cG9ydCBjb25zdCBEUkFGVEFCTEU6IHVuaXF1ZSBzeW1ib2wgPSBoYXNTeW1ib2xcblx0PyBTeW1ib2wuZm9yKFwiaW1tZXItZHJhZnRhYmxlXCIpXG5cdDogKFwiX18kaW1tZXJfZHJhZnRhYmxlXCIgYXMgYW55KVxuXG5leHBvcnQgY29uc3QgRFJBRlRfU1RBVEU6IHVuaXF1ZSBzeW1ib2wgPSBoYXNTeW1ib2xcblx0PyBTeW1ib2wuZm9yKFwiaW1tZXItc3RhdGVcIilcblx0OiAoXCJfXyRpbW1lcl9zdGF0ZVwiIGFzIGFueSlcblxuLy8gRXZlbiBhIHBvbHlmaWxsZWQgU3ltYm9sIG1pZ2h0IHByb3ZpZGUgU3ltYm9sLml0ZXJhdG9yXG5leHBvcnQgY29uc3QgaXRlcmF0b3JTeW1ib2w6IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPVxuXHQodHlwZW9mIFN5bWJvbCAhPSBcInVuZGVmaW5lZFwiICYmIFN5bWJvbC5pdGVyYXRvcikgfHwgKFwiQEBpdGVyYXRvclwiIGFzIGFueSlcblxuLyoqIFVzZSBhIGNsYXNzIHR5cGUgZm9yIGBub3RoaW5nYCBzbyBpdHMgdHlwZSBpcyB1bmlxdWUgKi9cbmV4cG9ydCBjbGFzcyBOb3RoaW5nIHtcblx0Ly8gVGhpcyBsZXRzIHVzIGRvIGBFeGNsdWRlPFQsIE5vdGhpbmc+YFxuXHQvLyBAdHMtaWdub3JlXG5cdHByaXZhdGUgXyE6IHVuaXF1ZSBzeW1ib2xcbn1cbiIsImltcG9ydCBwcm9kdWNlIGZyb20gJ2ltbWVyJztcbmltcG9ydCB0eXBlIHsgQmFyZVdhbGxldCwgV2FsbGV0R3JvdXAgfSBmcm9tICcuLi9tb2RlbC90eXBlcyc7XG5cbmZ1bmN0aW9uIG1hc2tNbmVtb25pYyhcbiAgbW5lbW9uaWM6IEJhcmVXYWxsZXRbJ21uZW1vbmljJ11cbik6IEJhcmVXYWxsZXRbJ21uZW1vbmljJ10ge1xuICByZXR1cm4gbW5lbW9uaWMgPyB7IHBocmFzZTogJzxwaHJhc2U+JywgcGF0aDogbW5lbW9uaWMucGF0aCB9IDogbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hc2tXYWxsZXQod2FsbGV0OiBCYXJlV2FsbGV0KTogQmFyZVdhbGxldCB7XG4gIHJldHVybiBwcm9kdWNlKHdhbGxldCwgKGRyYWZ0KSA9PiB7XG4gICAgZHJhZnQucHJpdmF0ZUtleSA9ICc8cHJpdmF0ZUtleT4nO1xuICAgIGRyYWZ0Lm1uZW1vbmljID0gbWFza01uZW1vbmljKGRyYWZ0Lm1uZW1vbmljKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXNrV2FsbGV0R3JvdXAoZ3JvdXA6IFdhbGxldEdyb3VwKSB7XG4gIHJldHVybiBwcm9kdWNlKGdyb3VwLCAoZHJhZnQpID0+IHtcbiAgICBkcmFmdC53YWxsZXRDb250YWluZXIud2FsbGV0cyA9IGRyYWZ0LndhbGxldENvbnRhaW5lci53YWxsZXRzLm1hcChcbiAgICAgICh3YWxsZXQpID0+IG1hc2tXYWxsZXQod2FsbGV0KVxuICAgICk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFza1dhbGxldEdyb3Vwcyhncm91cHM6IFdhbGxldEdyb3VwW10pOiBXYWxsZXRHcm91cFtdIHtcbiAgcmV0dXJuIGdyb3Vwcy5tYXAoKGdyb3VwKSA9PiBtYXNrV2FsbGV0R3JvdXAoZ3JvdXApKTtcbn1cbiIsImV4cG9ydCBlbnVtIFNlZWRUeXBlIHtcbiAgcHJpdmF0ZUtleSxcbiAgbW5lbW9uaWMsXG59XG4iLCJpbXBvcnQgeyBldGhlcnMgfSBmcm9tICdldGhlcnMnO1xuaW1wb3J0IHR5cGUgeyBCYXJlV2FsbGV0IH0gZnJvbSAnLi4vdHlwZXMvQmFyZVdhbGxldCc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3YWxsZXRUb09iamVjdCh3YWxsZXQ6IGV0aGVycy5XYWxsZXQgfCBCYXJlV2FsbGV0KTogQmFyZVdhbGxldCB7XG4gIHJldHVybiB7XG4gICAgbW5lbW9uaWM6IHdhbGxldC5tbmVtb25pYyxcbiAgICBwcml2YXRlS2V5OiB3YWxsZXQucHJpdmF0ZUtleSxcbiAgICBhZGRyZXNzOiB3YWxsZXQuYWRkcmVzcyxcbiAgICBuYW1lOiB3YWxsZXQgaW5zdGFuY2VvZiBldGhlcnMuV2FsbGV0ID8gbnVsbCA6IHdhbGxldC5uYW1lLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZnJvbUV0aGVyc1dhbGxldCh3YWxsZXQ6IGV0aGVycy5XYWxsZXQpOiBCYXJlV2FsbGV0IHtcbiAgcmV0dXJuIHtcbiAgICBtbmVtb25pYzogd2FsbGV0Lm1uZW1vbmljLFxuICAgIHByaXZhdGVLZXk6IHdhbGxldC5wcml2YXRlS2V5LFxuICAgIGFkZHJlc3M6IHdhbGxldC5hZGRyZXNzLFxuICAgIG5hbWU6IG51bGwsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXN0b3JlQmFyZVdhbGxldCh3YWxsZXQ6IFBhcnRpYWw8QmFyZVdhbGxldD4pOiBCYXJlV2FsbGV0IHtcbiAgY29uc3QgeyBhZGRyZXNzLCBwcml2YXRlS2V5LCBtbmVtb25pYywgbmFtZSB9ID0gd2FsbGV0O1xuICBpZiAoYWRkcmVzcyAmJiBwcml2YXRlS2V5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByaXZhdGVLZXksXG4gICAgICBhZGRyZXNzLFxuICAgICAgbW5lbW9uaWM6IG1uZW1vbmljIHx8IG51bGwsXG4gICAgICBuYW1lOiBuYW1lIHx8IG51bGwsXG4gICAgfTtcbiAgfSBlbHNlIGlmIChwcml2YXRlS2V5KSB7XG4gICAgcmV0dXJuIGZyb21FdGhlcnNXYWxsZXQobmV3IGV0aGVycy5XYWxsZXQocHJpdmF0ZUtleSkpO1xuICB9IGVsc2UgaWYgKG1uZW1vbmljKSB7XG4gICAgY29uc3Qgd2FsbGV0ID0gZXRoZXJzLldhbGxldC5mcm9tTW5lbW9uaWMobW5lbW9uaWMucGhyYXNlLCBtbmVtb25pYy5wYXRoKTtcbiAgICByZXR1cm4gZnJvbUV0aGVyc1dhbGxldCh3YWxsZXQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmcm9tRXRoZXJzV2FsbGV0KGV0aGVycy5XYWxsZXQuY3JlYXRlUmFuZG9tKCkpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBpbW1lcmFibGUgfSBmcm9tICdpbW1lcic7XG5pbXBvcnQgeyBzdGFibGVFbmNyeXB0IH0gZnJvbSAnc3JjL21vZHVsZXMvY3J5cHRvJztcbmltcG9ydCB7IG5vcm1hbGl6ZUFkZHJlc3MgfSBmcm9tICdzcmMvc2hhcmVkL25vcm1hbGl6ZUFkZHJlc3MnO1xuaW1wb3J0IHsgUGFydGlhbGx5UmVxdWlyZWQgfSBmcm9tICdzcmMvc2hhcmVkL3R5cGUtdXRpbHMvUGFydGlhbGx5UmVxdWlyZWQnO1xuaW1wb3J0IHsgcmVzdG9yZUJhcmVXYWxsZXQsIHdhbGxldFRvT2JqZWN0IH0gZnJvbSAnc3JjL3NoYXJlZC93YWxsZXQvY3JlYXRlJztcbmltcG9ydCB7IFNlZWRUeXBlIH0gZnJvbSAnLi9TZWVkVHlwZSc7XG5pbXBvcnQgdHlwZSB7IEJhcmVXYWxsZXQgfSBmcm9tICcuL3R5cGVzJztcblxuaW50ZXJmYWNlIFBsYWluV2FsbGV0Q29udGFpbmVyIHtcbiAgc2VlZFR5cGU6IFNlZWRUeXBlO1xuICB3YWxsZXRzOiBCYXJlV2FsbGV0W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2FsbGV0Q29udGFpbmVyIHtcbiAgc2VlZFR5cGU6IFNlZWRUeXBlO1xuICB3YWxsZXRzOiBCYXJlV2FsbGV0W107XG4gIGdldE1uZW1vbmljKCk6IEJhcmVXYWxsZXRbJ21uZW1vbmljJ10gfCBudWxsO1xuICBnZXRGaXJzdFdhbGxldCgpOiBCYXJlV2FsbGV0O1xuICBhZGRXYWxsZXQod2FsbGV0OiBCYXJlV2FsbGV0KTogdm9pZDtcbiAgcmVtb3ZlV2FsbGV0KGFkZHJlc3M6IHN0cmluZyk6IHZvaWQ7XG4gIHRvUGxhaW5PYmplY3QoKTogUGxhaW5XYWxsZXRDb250YWluZXI7XG4gIGdldFdhbGxldEJ5QWRkcmVzcyhhZGRyZXNzOiBzdHJpbmcpOiBCYXJlV2FsbGV0IHwgbnVsbDtcbn1cblxuYWJzdHJhY3QgY2xhc3MgV2FsbGV0Q29udGFpbmVySW1wbCBpbXBsZW1lbnRzIFdhbGxldENvbnRhaW5lciB7XG4gIC8qKlxuICAgKiBJbXBvcnRhbnQgdG8gYWRkIFtpbW1lcmFibGVdID0gdHJ1ZSBwcm9wZXJ0eSBpZiB3ZSB3YW50XG4gICAqIHRvIHVzZSBpbW1lciB0byBjb3B5IFdhbGxldENvbnRhaW5lcnM6XG4gICAqIGh0dHBzOi8vaW1tZXJqcy5naXRodWIuaW8vaW1tZXIvY29tcGxleC1vYmplY3RzXG4gICAqIEFzIG9mIG5vdywgd2FsbGV0Q29udGFpbmVycyBhcmUgY29waWVkIGluIHRoZSBtYXNrV2FsbGV0R3JvdXAgZnVuY3Rpb25zXG4gICAqL1xuICBbaW1tZXJhYmxlXSA9IHRydWU7XG5cbiAgYWJzdHJhY3Qgd2FsbGV0czogQmFyZVdhbGxldFtdO1xuICBhYnN0cmFjdCBzZWVkVHlwZTogU2VlZFR5cGU7XG5cbiAgZ2V0Rmlyc3RXYWxsZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMud2FsbGV0c1swXTtcbiAgfVxuXG4gIGdldE1uZW1vbmljKCkge1xuICAgIHJldHVybiB0aGlzLnNlZWRUeXBlID09PSBTZWVkVHlwZS5wcml2YXRlS2V5XG4gICAgICA/IG51bGxcbiAgICAgIDogdGhpcy5nZXRGaXJzdFdhbGxldCgpLm1uZW1vbmljO1xuICB9XG5cbiAgYWRkV2FsbGV0KHdhbGxldDogQmFyZVdhbGxldCkge1xuICAgIGNvbnN0IGN1cnJlbnRNbmVtb25pYyA9IHRoaXMuZ2V0TW5lbW9uaWMoKTtcbiAgICBpZiAoY3VycmVudE1uZW1vbmljKSB7XG4gICAgICBpZiAoXG4gICAgICAgICF3YWxsZXQubW5lbW9uaWMgfHxcbiAgICAgICAgd2FsbGV0Lm1uZW1vbmljLnBocmFzZSAhPT0gY3VycmVudE1uZW1vbmljLnBocmFzZVxuICAgICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnQWRkZWQgd2FsbGV0IG11c3QgaGF2ZSB0aGUgc2FtZSBtbmVtb25pYyBhcyBvdGhlciB3YWxsZXRzIGluIHRoZSBXYWxsZXRDb250YWluZXInXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLndhbGxldHMuc29tZSgoeyBhZGRyZXNzIH0pID0+IGFkZHJlc3MgPT09IHdhbGxldC5hZGRyZXNzKSkge1xuICAgICAgLyoqIFNlZW1zIGl0J3MgYmV0dGVyIHRvIGtlZXAgZXhpc3Rpbmcgd2FsbGV0IGluIG9yZGVyIHRvIHNhdmUgZXhpc3Rpbmcgc3RhdGUsIGUuZy4gbmFtZSAqL1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLndhbGxldHMucHVzaCh3YWxsZXQpO1xuICB9XG5cbiAgcmVtb3ZlV2FsbGV0KGFkZHJlc3M6IHN0cmluZykge1xuICAgIGNvbnN0IHBvcyA9IHRoaXMud2FsbGV0cy5maW5kSW5kZXgoXG4gICAgICAod2FsbGV0KSA9PiB3YWxsZXQuYWRkcmVzcy50b0xvd2VyQ2FzZSgpID09PSBhZGRyZXNzLnRvTG93ZXJDYXNlKClcbiAgICApO1xuICAgIGlmIChwb3MgPT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMud2FsbGV0cy5zcGxpY2UocG9zLCAxKTtcbiAgfVxuXG4gIGdldFdhbGxldEJ5QWRkcmVzcyhhZGRyZXNzOiBzdHJpbmcpIHtcbiAgICBjb25zdCB3YWxsZXQgPSB0aGlzLndhbGxldHMuZmluZChcbiAgICAgICh3YWxsZXQpID0+IG5vcm1hbGl6ZUFkZHJlc3Mod2FsbGV0LmFkZHJlc3MpID09PSBub3JtYWxpemVBZGRyZXNzKGFkZHJlc3MpXG4gICAgKTtcbiAgICByZXR1cm4gd2FsbGV0IHx8IG51bGw7XG4gIH1cblxuICB0b1BsYWluT2JqZWN0KCkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi50aGlzLFxuICAgICAgd2FsbGV0czogdGhpcy53YWxsZXRzLm1hcCgod2FsbGV0KSA9PiB3YWxsZXRUb09iamVjdCh3YWxsZXQpKSxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNbmVtb25pY1dhbGxldENvbnRhaW5lciBleHRlbmRzIFdhbGxldENvbnRhaW5lckltcGwge1xuICB3YWxsZXRzOiBCYXJlV2FsbGV0W107XG4gIHNlZWRUeXBlID0gU2VlZFR5cGUubW5lbW9uaWM7XG5cbiAgc3RhdGljIGFzeW5jIGNyZWF0ZSh7XG4gICAgd2FsbGV0cyxcbiAgICBlbmNyeXB0aW9uS2V5LFxuICB9OiB7XG4gICAgd2FsbGV0cz86IEFycmF5PFBhcnRpYWxseVJlcXVpcmVkPEJhcmVXYWxsZXQsICdtbmVtb25pYyc+PjtcbiAgICBlbmNyeXB0aW9uS2V5OiBDcnlwdG9LZXk7XG4gIH0pOiBQcm9taXNlPE1uZW1vbmljV2FsbGV0Q29udGFpbmVyPiB7XG4gICAgY29uc3Qgd2FsbGV0Q29udGFpbmVyID0gbmV3IE1uZW1vbmljV2FsbGV0Q29udGFpbmVyKHdhbGxldHMpO1xuICAgIGNvbnN0IHsgbW5lbW9uaWMgfSA9IHdhbGxldENvbnRhaW5lci5nZXRGaXJzdFdhbGxldCgpO1xuICAgIGlmIChtbmVtb25pYykge1xuICAgICAgY29uc3QgZW5jcnlwdGVkTW5lbW9uaWMgPSBhd2FpdCBzdGFibGVFbmNyeXB0KFxuICAgICAgICBlbmNyeXB0aW9uS2V5LFxuICAgICAgICBtbmVtb25pYy5waHJhc2VcbiAgICAgICk7XG4gICAgICB3YWxsZXRDb250YWluZXIud2FsbGV0cy5mb3JFYWNoKCh3YWxsZXQpID0+IHtcbiAgICAgICAgaWYgKHdhbGxldC5tbmVtb25pYykge1xuICAgICAgICAgIHdhbGxldC5tbmVtb25pYy5waHJhc2UgPSBlbmNyeXB0ZWRNbmVtb25pYztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB3YWxsZXRDb250YWluZXI7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcih3YWxsZXRzPzogQXJyYXk8UGFydGlhbGx5UmVxdWlyZWQ8QmFyZVdhbGxldCwgJ21uZW1vbmljJz4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBpZiAoIXdhbGxldHMgfHwgIXdhbGxldHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLndhbGxldHMgPSBbcmVzdG9yZUJhcmVXYWxsZXQoe30pXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53YWxsZXRzID0gd2FsbGV0cy5tYXAoKHdhbGxldCkgPT4ge1xuICAgICAgICBpZiAoIXdhbGxldC5tbmVtb25pYykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdNbmVtb25pYyBjb250YWluZXIgaXMgZXhwZWN0ZWQgdG8gaGF2ZSBhIHdhbGxldCB3aXRoIGEgbW5lbW9uaWMnXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdG9yZUJhcmVXYWxsZXQod2FsbGV0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUHJpdmF0ZUtleVdhbGxldENvbnRhaW5lciBleHRlbmRzIFdhbGxldENvbnRhaW5lckltcGwge1xuICB3YWxsZXRzOiBCYXJlV2FsbGV0W107XG4gIHNlZWRUeXBlID0gU2VlZFR5cGUucHJpdmF0ZUtleTtcblxuICBjb25zdHJ1Y3Rvcih3YWxsZXRzOiBBcnJheTxQYXJ0aWFsbHlSZXF1aXJlZDxCYXJlV2FsbGV0LCAncHJpdmF0ZUtleSc+Pikge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKCF3YWxsZXRzIHx8IHdhbGxldHMubGVuZ3RoID4gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgV2FsbGV0cyBhcnJheSBpcyBleHBlY3RlZCB0byBoYXZlIGV4YWN0bHkgb25lIGVsZW1lbnQsIGluc3RlYWQgZ290OiAke3dhbGxldHM/Lmxlbmd0aH1gXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLndhbGxldHMgPSB3YWxsZXRzLm1hcCgod2FsbGV0KSA9PiB7XG4gICAgICBpZiAoIXdhbGxldC5wcml2YXRlS2V5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnUHJpdmF0ZUtleSBjb250YWluZXIgaXMgZXhwZWN0ZWQgdG8gaGF2ZSBhIHdhbGxldCB3aXRoIGEgcHJpdmF0ZUtleSdcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN0b3JlQmFyZVdhbGxldCh3YWxsZXQpO1xuICAgIH0pO1xuICB9XG5cbiAgYWRkV2FsbGV0KF93YWxsZXQ6IEJhcmVXYWxsZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1ByaXZhdGVLZXlXYWxsZXRDb250YWluZXIgY2Fubm90IGhhdmUgbXVsdGlwbGUgd2FsbGV0cycpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUZXN0UHJpdmF0ZUtleVdhbGxldENvbnRhaW5lciBleHRlbmRzIFdhbGxldENvbnRhaW5lckltcGwge1xuICB3YWxsZXRzOiBCYXJlV2FsbGV0W107XG4gIHNlZWRUeXBlID0gU2VlZFR5cGUucHJpdmF0ZUtleTtcblxuICBjb25zdHJ1Y3Rvcih3YWxsZXRzOiBCYXJlV2FsbGV0W10pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMud2FsbGV0cyA9IHdhbGxldHM7XG4gIH1cbn1cbiIsImltcG9ydCB7IGV0aGVycyB9IGZyb20gJ2V0aGVycyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0NoZWNrc3VtQWRkcmVzcyhhZGRyZXNzOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGV0aGVycy51dGlscy5nZXRBZGRyZXNzKGFkZHJlc3MpO1xufVxuIiwiaW1wb3J0IHsgZXRoZXJzIH0gZnJvbSAnZXRoZXJzJztcblxuZXRoZXJzLnV0aWxzLmRlZmF1bHRQYXRoO1xuY29uc3QgbmV4dCA9IChpbmRleDogbnVtYmVyKSA9PiBgbS80NCcvNjAnLzAnLzAvJHtpbmRleH1gO1xuXG5leHBvcnQgY29uc3QgZ2V0QWNjb3VudFBhdGggPSBuZXh0O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5kZXhGcm9tUGF0aChwYXRoOiBzdHJpbmcpIHtcbiAgY29uc3QgZGlnaXRzID0gcGF0aC5tYXRjaCgvbVxcLzQ0J1xcLzYwJ1xcLzAnXFwvMFxcLyhcXGQrKS8pPy5bMV07XG4gIHJldHVybiBkaWdpdHMgPyBOdW1iZXIoZGlnaXRzKSA6IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXh0QWNjb3VudFBhdGgocGF0aDogc3RyaW5nKSB7XG4gIGNvbnN0IG1hdGNoID0gcGF0aC5tYXRjaCgvbVxcLzQ0J1xcLzYwJ1xcLzAnXFwvMFxcLyhcXGQrKS8pO1xuICBpZiAobWF0Y2gpIHtcbiAgICByZXR1cm4gbmV4dChOdW1iZXIobWF0Y2hbMV0pICsgMSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGV0aGVycy51dGlscy5kZWZhdWx0UGF0aDtcbiAgfVxufVxuIiwiaW1wb3J0IHR5cGUge1xuICBXYWxsZXRSZWNvcmQsXG4gIFdhbGxldFJlY29yZFZlcnNpb24wLFxuICBXYWxsZXRSZWNvcmRWZXJzaW9uMSxcbn0gZnJvbSAnLi90eXBlcyc7XG5cbnR5cGUgUG9zc2libGVFbnRyeSA9IFdhbGxldFJlY29yZFZlcnNpb24wIHwgV2FsbGV0UmVjb3JkO1xuXG5mdW5jdGlvbiBtYXBPYmplY3Q8ViwgTmV3VmFsdWU+KFxuICBvYmplY3Q6IFJlY29yZDxzdHJpbmcsIFY+LFxuICBjYWxsYmFja0ZuOiAocGFyYW1zOiBbc3RyaW5nLCBWXSkgPT4gW3N0cmluZywgTmV3VmFsdWVdXG4pIHtcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllczxWPihvYmplY3QpLm1hcChjYWxsYmFja0ZuKSk7XG59XG5cbmZ1bmN0aW9uIGlzV2FsbGV0VmVyc2lvbjAoZW50cnk6IFBvc3NpYmxlRW50cnkpOiBlbnRyeSBpcyBXYWxsZXRSZWNvcmRWZXJzaW9uMCB7XG4gIHJldHVybiAndmVyc2lvbicgaW4gZW50cnkgPT09IGZhbHNlO1xufVxuXG4vKipcbiAqIFRlcm0gXCJ1cGdyYWRlXCIgdGFrZW4gZnJvbSBkZXhpZTpcbiAqIGh0dHBzOi8vZGV4aWUub3JnL2RvY3MvRGV4aWUvRGV4aWUudmVyc2lvbigpXG4gKiBodHRwczovL2RleGllLm9yZy9kb2NzL1ZlcnNpb24vVmVyc2lvbi51cGdyYWRlKClcbiAqL1xuY29uc3QgdXBncmFkZXM6IFJlY29yZDxzdHJpbmcsIChlbnRyeTogUG9zc2libGVFbnRyeSkgPT4gUG9zc2libGVFbnRyeT4gPSB7XG4gIDE6IChlbnRyeTogUG9zc2libGVFbnRyeSk6IFdhbGxldFJlY29yZFZlcnNpb24xID0+IHtcbiAgICBpZiAoIWlzV2FsbGV0VmVyc2lvbjAoZW50cnkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dyb25nIGVudHJ5IHZlcnNpb24nKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmVudHJ5LFxuICAgICAgdmVyc2lvbjogMSxcbiAgICAgIHByZWZlcmVuY2VzOiB7fSxcbiAgICB9O1xuICB9LFxuICAyOiAoZW50cnk6IFBvc3NpYmxlRW50cnkpOiBXYWxsZXRSZWNvcmQgPT4ge1xuICAgIGZ1bmN0aW9uIGlzV2FsbGV0VmVyc2lvbjEoXG4gICAgICBlbnRyeTogUG9zc2libGVFbnRyeVxuICAgICk6IGVudHJ5IGlzIFdhbGxldFJlY29yZFZlcnNpb24xIHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHJldHVybiBlbnRyeT8udmVyc2lvbiA9PT0gMTtcbiAgICB9XG4gICAgaWYgKCFpc1dhbGxldFZlcnNpb24xKGVudHJ5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdXcm9uZyBlbnRyeSB2ZXJzaW9uJyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAuLi5lbnRyeSxcbiAgICAgIHZlcnNpb246IDIsXG4gICAgICBwcmVmZXJlbmNlczoge30sXG4gICAgICBwZXJtaXNzaW9uczogbWFwT2JqZWN0KGVudHJ5LnBlcm1pc3Npb25zLCAoW2tleSwgdmFsdWVdKSA9PiBbXG4gICAgICAgIGtleSxcbiAgICAgICAgeyBhZGRyZXNzZXM6IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBbdmFsdWVdIDogdmFsdWUgfSxcbiAgICAgIF0pLFxuICAgIH07XG4gIH0sXG59O1xuXG5jb25zdCBnZXROZXh0VmVyc2lvbiA9IChlbnRyeTogUG9zc2libGVFbnRyeSkgPT5cbiAgKGlzV2FsbGV0VmVyc2lvbjAoZW50cnkpID8gMCA6IGVudHJ5LnZlcnNpb24pICsgMTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVwZ3JhZGUoZW50cnk6IFBvc3NpYmxlRW50cnkpOiBXYWxsZXRSZWNvcmQge1xuICBsZXQgcmVzdWx0ID0gZW50cnk7XG4gIGxldCBuZXh0VmVyc2lvbiA9IGdldE5leHRWZXJzaW9uKHJlc3VsdCk7XG4gIHdoaWxlIChuZXh0VmVyc2lvbiBpbiB1cGdyYWRlcykge1xuICAgIHJlc3VsdCA9IHVwZ3JhZGVzW25leHRWZXJzaW9uXShyZXN1bHQpO1xuICAgIG5leHRWZXJzaW9uID0gZ2V0TmV4dFZlcnNpb24ocmVzdWx0KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0IGFzIFdhbGxldFJlY29yZDtcbn1cbiIsImltcG9ydCB7IGRlY3J5cHQsIGVuY3J5cHQgfSBmcm9tICdzcmMvbW9kdWxlcy9jcnlwdG8nO1xuaW1wb3J0IHByb2R1Y2UgZnJvbSAnaW1tZXInO1xuaW1wb3J0IHsgbmFub2lkIH0gZnJvbSAnbmFub2lkJztcbmltcG9ydCB7IHRvQ2hlY2tzdW1BZGRyZXNzIH0gZnJvbSAnc3JjL21vZHVsZXMvZXRoZXJldW0vdG9DaGVja3N1bUFkZHJlc3MnO1xuaW1wb3J0IHsgQ2hhaW4sIGNyZWF0ZUNoYWluIH0gZnJvbSAnc3JjL21vZHVsZXMvbmV0d29ya3MvQ2hhaW4nO1xuaW1wb3J0IHsgc3RhYmxlRGVjcnlwdCB9IGZyb20gJ3NyYy9tb2R1bGVzL2NyeXB0byc7XG5pbXBvcnQgeyBub3JtYWxpemVBZGRyZXNzIH0gZnJvbSAnc3JjL3NoYXJlZC9ub3JtYWxpemVBZGRyZXNzJztcbmltcG9ydCB7IGdldEluZGV4RnJvbVBhdGggfSBmcm9tICdzcmMvc2hhcmVkL3dhbGxldC9nZXROZXh0QWNjb3VudFBhdGgnO1xuaW1wb3J0IHsgU2VlZFR5cGUgfSBmcm9tICcuL21vZGVsL1NlZWRUeXBlJztcbmltcG9ydCB0eXBlIHtcbiAgQmFyZVdhbGxldCxcbiAgUGVuZGluZ1dhbGxldCxcbiAgV2FsbGV0R3JvdXAsXG4gIFdhbGxldFJlY29yZCxcbn0gZnJvbSAnLi9tb2RlbC90eXBlcyc7XG5pbXBvcnQgeyB1cGdyYWRlIH0gZnJvbSAnLi9tb2RlbC92ZXJzaW9ucyc7XG5pbXBvcnQgdHlwZSB7IFdhbGxldENvbnRhaW5lciB9IGZyb20gJy4vbW9kZWwvV2FsbGV0Q29udGFpbmVyJztcbmltcG9ydCB7XG4gIE1uZW1vbmljV2FsbGV0Q29udGFpbmVyLFxuICBQcml2YXRlS2V5V2FsbGV0Q29udGFpbmVyLFxufSBmcm9tICcuL21vZGVsL1dhbGxldENvbnRhaW5lcic7XG5pbXBvcnQgeyBXYWxsZXROYW1lRmxhZyB9IGZyb20gJy4vbW9kZWwvV2FsbGV0TmFtZUZsYWcnO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUdyb3VwTmFtZShcbiAgcmVjb3JkOiBXYWxsZXRSZWNvcmQgfCBudWxsLFxuICB3YWxsZXRDb250YWluZXI6IFdhbGxldENvbnRhaW5lclxuKSB7XG4gIGlmICh3YWxsZXRDb250YWluZXIuc2VlZFR5cGUgPT09IFNlZWRUeXBlLnByaXZhdGVLZXkpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgY29uc3QgbmFtZSA9IChpbmRleDogbnVtYmVyKSA9PiBgV2FsbGV0IEdyb3VwICMke2luZGV4fWA7XG4gIGlmICghcmVjb3JkKSB7XG4gICAgcmV0dXJuIG5hbWUoMSk7XG4gIH1cbiAgY29uc3QgbW5lbW9uaWNHcm91cHMgPSByZWNvcmQud2FsbGV0TWFuYWdlci5ncm91cHMuZmlsdGVyKFxuICAgIChncm91cCkgPT4gZ3JvdXAud2FsbGV0Q29udGFpbmVyLnNlZWRUeXBlID09PSBTZWVkVHlwZS5tbmVtb25pY1xuICApO1xuICBmdW5jdGlvbiBpc05hbWVVc2VkKG5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IGluZGV4ID0gbW5lbW9uaWNHcm91cHMuZmluZEluZGV4KChncm91cCkgPT4gZ3JvdXAubmFtZSA9PT0gbmFtZSk7XG4gICAgcmV0dXJuIGluZGV4ICE9PSAtMTtcbiAgfVxuICBsZXQgcG90ZW50aWFsTmFtZSA9IG5hbWUoXG4gICAgcmVjb3JkLndhbGxldE1hbmFnZXIuaW50ZXJuYWxNbmVtb25pY0dyb3VwQ291bnRlciArIDFcbiAgKTtcbiAgd2hpbGUgKGlzTmFtZVVzZWQocG90ZW50aWFsTmFtZSkpIHtcbiAgICBwb3RlbnRpYWxOYW1lID0gYCR7cG90ZW50aWFsTmFtZX0gKDIpYDtcbiAgfVxuICByZXR1cm4gcG90ZW50aWFsTmFtZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlR3JvdXAoe1xuICBuYW1lLFxuICB3YWxsZXRDb250YWluZXIsXG59OiB7XG4gIHdhbGxldENvbnRhaW5lcjogV2FsbGV0Q29udGFpbmVyO1xuICBuYW1lOiBzdHJpbmc7XG59KTogV2FsbGV0R3JvdXAge1xuICByZXR1cm4ge1xuICAgIGlkOiBuYW5vaWQoKSxcbiAgICB3YWxsZXRDb250YWluZXIsXG4gICAgbGFzdEJhY2tlZFVwOiBudWxsLFxuICAgIG5hbWUsXG4gIH07XG59XG5cbmZ1bmN0aW9uIHRvUGxhaW5PYmplY3QocmVjb3JkOiBXYWxsZXRSZWNvcmQpIHtcbiAgcmV0dXJuIHByb2R1Y2UocmVjb3JkLCAoZHJhZnQpID0+IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZHJhZnQud2FsbGV0TWFuYWdlci5ncm91cHMgPSBkcmFmdC53YWxsZXRNYW5hZ2VyLmdyb3Vwcy5tYXAoKGdyb3VwKSA9PiAoe1xuICAgICAgLi4uZ3JvdXAsXG4gICAgICB3YWxsZXRDb250YWluZXI6IGdyb3VwLndhbGxldENvbnRhaW5lci50b1BsYWluT2JqZWN0KCksXG4gICAgfSkpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVOYW1lKFxuICBuYW1lOiBzdHJpbmcsXG4gIHsgbWluTGVuZ3RoID0gMSB9OiB7IG1pbkxlbmd0aD86IG51bWJlciB9ID0ge31cbikge1xuICBjb25zdCBFVEhFUkVVTV9BRERSRVNTX0xFTkdUSCA9IDQwO1xuICBjb25zdCBNQVhfQUxMT1dFRF9OQU1FX0xFTkdUSCA9IEVUSEVSRVVNX0FERFJFU1NfTEVOR1RIICogMjtcbiAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiAnTXVzdCBiZSBhIHN0cmluZyc7XG4gIH0gZWxzZSBpZiAobmFtZS5sZW5ndGggPCBtaW5MZW5ndGgpIHtcbiAgICByZXR1cm4gJ011c3QgaGF2ZSBhdCBsZWFzdCBvbmUgY2hhcmFjdGVyJztcbiAgfSBlbHNlIGlmIChuYW1lLmxlbmd0aCA+IE1BWF9BTExPV0VEX05BTUVfTEVOR1RIKSB7XG4gICAgcmV0dXJuIGBNdXN0IGJlIHNob3J0ZXIgdGhhbiAke01BWF9BTExPV0VEX05BTUVfTEVOR1RIfSBjaGFyYWN0ZXJzYDtcbiAgfSBlbHNlIGlmIChuYW1lID09PSAnZGVidWctZXJyb3ItbmFtZScpIHtcbiAgICByZXR1cm4gJ0RlYnVnOiBpbnRlbnRpb25hbCBkZWJ1Z2dpbmcgZXJyb3InO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBmaW5kV2l0aEluZGV4PFQ+KGl0ZW1zOiBUW10sIHByZWRpY2F0ZTogKGl0ZW06IFQpID0+IGJvb2xlYW4pIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1tpXTtcbiAgICBpZiAocHJlZGljYXRlKGl0ZW0pKSB7XG4gICAgICByZXR1cm4gW2ksIGl0ZW1dIGFzIGNvbnN0O1xuICAgIH1cbiAgfVxuICByZXR1cm4gWy0xLCB1bmRlZmluZWRdIGFzIGNvbnN0O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VJdGVtPFQ+KGFycjogVFtdLCBpdGVtOiBUKSB7XG4gIGNvbnN0IHBvcyA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICBpZiAocG9zICE9PSAtMSkge1xuICAgIGFyci5zcGxpY2UocG9zLCAxKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2ZXJpZnlDdXJyZW50QWRkcmVzcyhyZWNvcmQ6IFdhbGxldFJlY29yZCkge1xuICBjb25zdCB7IGN1cnJlbnRBZGRyZXNzIH0gPSByZWNvcmQud2FsbGV0TWFuYWdlcjtcbiAgaWYgKGN1cnJlbnRBZGRyZXNzKSB7XG4gICAgY29uc3Qgbm9ybWFsaXplZEFkZHJlc3MgPSBub3JtYWxpemVBZGRyZXNzKGN1cnJlbnRBZGRyZXNzKTtcbiAgICBjb25zdCB3YWxsZXRFeGlzdHMgPSByZWNvcmQud2FsbGV0TWFuYWdlci5ncm91cHMuc29tZSgoZ3JvdXApID0+XG4gICAgICBncm91cC53YWxsZXRDb250YWluZXIud2FsbGV0cy5zb21lKFxuICAgICAgICAod2FsbGV0KSA9PiBub3JtYWxpemVBZGRyZXNzKHdhbGxldC5hZGRyZXNzKSA9PT0gbm9ybWFsaXplZEFkZHJlc3NcbiAgICAgIClcbiAgICApO1xuICAgIGlmICghd2FsbGV0RXhpc3RzKSB7XG4gICAgICByZWNvcmQud2FsbGV0TWFuYWdlci5jdXJyZW50QWRkcmVzcyA9XG4gICAgICAgIFdhbGxldFJlY29yZE1vZGVsLmdldEZpcnN0V2FsbGV0KHJlY29yZCk/LmFkZHJlc3MgfHwgbnVsbDtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFdhbGxldFJlY29yZE1vZGVsIHtcbiAgc3RhdGljIHZlcmlmeVN0YXRlSW50ZWdyaXR5KHJlY29yZDogV2FsbGV0UmVjb3JkKSB7XG4gICAgcmV0dXJuIHByb2R1Y2UocmVjb3JkLCAoZHJhZnQpID0+IHtcbiAgICAgIHZlcmlmeUN1cnJlbnRBZGRyZXNzKGRyYWZ0KTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRGaXJzdFdhbGxldChyZWNvcmQ6IFdhbGxldFJlY29yZCk6IEJhcmVXYWxsZXQgfCBudWxsIHtcbiAgICByZXR1cm4gcmVjb3JkLndhbGxldE1hbmFnZXIuZ3JvdXBzWzBdPy53YWxsZXRDb250YWluZXIuZ2V0Rmlyc3RXYWxsZXQoKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRXYWxsZXRCeUFkZHJlc3MoXG4gICAgcmVjb3JkOiBXYWxsZXRSZWNvcmQsXG4gICAgYWRkcmVzczogc3RyaW5nXG4gICk6IEJhcmVXYWxsZXQgfCBudWxsIHtcbiAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIHJlY29yZC53YWxsZXRNYW5hZ2VyLmdyb3Vwcykge1xuICAgICAgY29uc3Qgd2FsbGV0ID0gZ3JvdXAud2FsbGV0Q29udGFpbmVyLmdldFdhbGxldEJ5QWRkcmVzcyhhZGRyZXNzKTtcbiAgICAgIGlmICh3YWxsZXQpIHtcbiAgICAgICAgcmV0dXJuIHdhbGxldDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlT3JVcGRhdGVSZWNvcmQoXG4gICAgcmVjb3JkOiBXYWxsZXRSZWNvcmQgfCBudWxsLFxuICAgIHBlbmRpbmdXYWxsZXQ6IFBlbmRpbmdXYWxsZXRcbiAgKTogV2FsbGV0UmVjb3JkIHtcbiAgICBpZiAoIXJlY29yZCkge1xuICAgICAgY29uc3QgaXNNbmVtb25pY1dhbGxldCA9XG4gICAgICAgIHBlbmRpbmdXYWxsZXQud2FsbGV0Q29udGFpbmVyLnNlZWRUeXBlID09PSBTZWVkVHlwZS5tbmVtb25pYztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZlcnNpb246IDIsXG4gICAgICAgIHdhbGxldE1hbmFnZXI6IHtcbiAgICAgICAgICBncm91cHM6IFtcbiAgICAgICAgICAgIGNyZWF0ZUdyb3VwKHtcbiAgICAgICAgICAgICAgbmFtZTogZ2VuZXJhdGVHcm91cE5hbWUocmVjb3JkLCBwZW5kaW5nV2FsbGV0LndhbGxldENvbnRhaW5lciksXG4gICAgICAgICAgICAgIHdhbGxldENvbnRhaW5lcjogcGVuZGluZ1dhbGxldC53YWxsZXRDb250YWluZXIsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIGN1cnJlbnRBZGRyZXNzOlxuICAgICAgICAgICAgcGVuZGluZ1dhbGxldC53YWxsZXRDb250YWluZXIuZ2V0Rmlyc3RXYWxsZXQoKS5hZGRyZXNzLFxuICAgICAgICAgIGludGVybmFsTW5lbW9uaWNHcm91cENvdW50ZXI6IGlzTW5lbW9uaWNXYWxsZXQgPyAxIDogMCxcbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNhY3Rpb25zOiBbXSxcbiAgICAgICAgcGVybWlzc2lvbnM6IHt9LFxuICAgICAgICBwcmVmZXJlbmNlczoge30sXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcHJvZHVjZShyZWNvcmQsIChkcmFmdCkgPT4ge1xuICAgICAgY29uc3QgeyB3YWxsZXRDb250YWluZXIgfSA9IHBlbmRpbmdXYWxsZXQ7XG4gICAgICBjb25zdCB7IHNlZWRUeXBlIH0gPSB3YWxsZXRDb250YWluZXI7XG4gICAgICBpZiAoc2VlZFR5cGUgPT09IFNlZWRUeXBlLnByaXZhdGVLZXkpIHtcbiAgICAgICAgY29uc3QgeyBwcml2YXRlS2V5IH0gPSB3YWxsZXRDb250YWluZXIuZ2V0Rmlyc3RXYWxsZXQoKTtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdHcm91cCA9IGRyYWZ0LndhbGxldE1hbmFnZXIuZ3JvdXBzLmZpbmQoXG4gICAgICAgICAgKGdyb3VwKSA9PlxuICAgICAgICAgICAgZ3JvdXAud2FsbGV0Q29udGFpbmVyLmdldEZpcnN0V2FsbGV0KCkucHJpdmF0ZUtleSA9PT0gcHJpdmF0ZUtleVxuICAgICAgICApO1xuICAgICAgICBpZiAoZXhpc3RpbmdHcm91cCkge1xuICAgICAgICAgIHJldHVybiBkcmFmdDsgLy8gTk9URTogcHJpdmF0ZSBrZXkgYWxyZWFkeSBleGlzdHMsIHNob3VsZCB3ZSB1cGRhdGUgcmVjb3JkIG9yIGtlZXAgdW50b3VjaGVkP1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRyYWZ0LndhbGxldE1hbmFnZXIuaW50ZXJuYWxNbmVtb25pY0dyb3VwQ291bnRlciArPSAxO1xuICAgICAgICAgIGRyYWZ0LndhbGxldE1hbmFnZXIuZ3JvdXBzLnB1c2goXG4gICAgICAgICAgICBjcmVhdGVHcm91cCh7XG4gICAgICAgICAgICAgIHdhbGxldENvbnRhaW5lcixcbiAgICAgICAgICAgICAgbmFtZTogZ2VuZXJhdGVHcm91cE5hbWUocmVjb3JkLCB3YWxsZXRDb250YWluZXIpLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNlZWRUeXBlID09PSBTZWVkVHlwZS5tbmVtb25pYykge1xuICAgICAgICBjb25zdCBtbmVtb25pYyA9IHdhbGxldENvbnRhaW5lci5nZXRNbmVtb25pYygpO1xuICAgICAgICBpZiAoIW1uZW1vbmljKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNbmVtb25pYyBub3QgZm91bmQnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBleGlzdGluZ0dyb3VwID0gZHJhZnQud2FsbGV0TWFuYWdlci5ncm91cHMuZmluZChcbiAgICAgICAgICAoZ3JvdXApID0+XG4gICAgICAgICAgICBncm91cC53YWxsZXRDb250YWluZXIuZ2V0TW5lbW9uaWMoKT8ucGhyYXNlID09PSBtbmVtb25pYy5waHJhc2VcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGV4aXN0aW5nR3JvdXApIHtcbiAgICAgICAgICB3YWxsZXRDb250YWluZXIud2FsbGV0cy5mb3JFYWNoKCh3YWxsZXQpID0+IHtcbiAgICAgICAgICAgIGV4aXN0aW5nR3JvdXAud2FsbGV0Q29udGFpbmVyLmFkZFdhbGxldCh3YWxsZXQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGV4aXN0aW5nR3JvdXAud2FsbGV0Q29udGFpbmVyLndhbGxldHMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5kZXgxID0gZ2V0SW5kZXhGcm9tUGF0aChhLm1uZW1vbmljPy5wYXRoIHx8ICcnKTtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4MiA9IGdldEluZGV4RnJvbVBhdGgoYi5tbmVtb25pYz8ucGF0aCB8fCAnJyk7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXgxIC0gaW5kZXgyO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRyYWZ0LndhbGxldE1hbmFnZXIuaW50ZXJuYWxNbmVtb25pY0dyb3VwQ291bnRlciArPSAxO1xuICAgICAgICAgIGRyYWZ0LndhbGxldE1hbmFnZXIuZ3JvdXBzLnB1c2goXG4gICAgICAgICAgICBjcmVhdGVHcm91cCh7XG4gICAgICAgICAgICAgIHdhbGxldENvbnRhaW5lcixcbiAgICAgICAgICAgICAgbmFtZTogZ2VuZXJhdGVHcm91cE5hbWUocmVjb3JkLCB3YWxsZXRDb250YWluZXIpLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gU2VlZFR5cGUnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBlbmNyeXB0UmVjb3JkKGtleTogc3RyaW5nLCByZWNvcmQ6IFdhbGxldFJlY29yZCkge1xuICAgIHJldHVybiBlbmNyeXB0KGtleSwgdG9QbGFpbk9iamVjdChyZWNvcmQpKTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBkZWNyeXB0UmVjb3JkKGtleTogc3RyaW5nLCBlbmNyeXB0ZWRSZWNvcmQ6IHN0cmluZykge1xuICAgIHJldHVybiBhd2FpdCBkZWNyeXB0KGtleSwgZW5jcnlwdGVkUmVjb3JkKTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBkZWNyeXB0QW5kUmVzdG9yZVJlY29yZChrZXk6IHN0cmluZywgZW5jcnlwdGVkUmVjb3JkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBwZXJzaXN0ZWRFbnRyeSA9IChhd2FpdCBkZWNyeXB0KFxuICAgICAga2V5LFxuICAgICAgZW5jcnlwdGVkUmVjb3JkXG4gICAgKSkgYXMgV2FsbGV0UmVjb3JkO1xuICAgIGNvbnN0IGVudHJ5ID0gdXBncmFkZShwZXJzaXN0ZWRFbnRyeSk7XG4gICAgZW50cnkud2FsbGV0TWFuYWdlci5ncm91cHMgPSBlbnRyeS53YWxsZXRNYW5hZ2VyLmdyb3Vwcy5tYXAoKGdyb3VwKSA9PiB7XG4gICAgICBjb25zdCB7IHNlZWRUeXBlLCB3YWxsZXRzIH0gPSBncm91cC53YWxsZXRDb250YWluZXI7XG4gICAgICBpZiAoc2VlZFR5cGUgPT09IFNlZWRUeXBlLm1uZW1vbmljKSB7XG4gICAgICAgIGdyb3VwLndhbGxldENvbnRhaW5lciA9IG5ldyBNbmVtb25pY1dhbGxldENvbnRhaW5lcih3YWxsZXRzKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VlZFR5cGUgPT09IFNlZWRUeXBlLnByaXZhdGVLZXkpIHtcbiAgICAgICAgZ3JvdXAud2FsbGV0Q29udGFpbmVyID0gbmV3IFByaXZhdGVLZXlXYWxsZXRDb250YWluZXIod2FsbGV0cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgU2VlZFR5cGU6ICR7c2VlZFR5cGV9YCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBncm91cDtcbiAgICB9KTtcbiAgICByZXR1cm4gV2FsbGV0UmVjb3JkTW9kZWwudmVyaWZ5U3RhdGVJbnRlZ3JpdHkoZW50cnkgYXMgV2FsbGV0UmVjb3JkKTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBnZXRSZWNvdmVyeVBocmFzZShcbiAgICByZWNvcmQ6IFdhbGxldFJlY29yZCxcbiAgICB7IGdyb3VwSWQsIGVuY3J5cHRpb25LZXkgfTogeyBncm91cElkOiBzdHJpbmc7IGVuY3J5cHRpb25LZXk6IENyeXB0b0tleSB9XG4gICkge1xuICAgIGNvbnN0IGdyb3VwID0gcmVjb3JkLndhbGxldE1hbmFnZXIuZ3JvdXBzLmZpbmQoXG4gICAgICAoZ3JvdXApID0+IGdyb3VwLmlkID09PSBncm91cElkXG4gICAgKTtcbiAgICBpZiAoIWdyb3VwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dhbGxldCBHcm91cCBub3QgZm91bmQnKTtcbiAgICB9XG4gICAgY29uc3QgZW5jcnlwdGVkTW5lbW9uaWMgPSBncm91cC53YWxsZXRDb250YWluZXIuZ2V0TW5lbW9uaWMoKTtcbiAgICBpZiAoIWVuY3J5cHRlZE1uZW1vbmljKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgbW5lbW9uaWMgZnJvbSB3YWxsZXQgb2JqZWN0IGZvciAke2dyb3VwSWR9YCk7XG4gICAgfVxuICAgIC8vIGVuY3J5cHRlZCBkYXRhIGhhcyBubyBzcGFjZXNcbiAgICBjb25zdCBpc05vdEVuY3J5cHRlZCA9IGVuY3J5cHRlZE1uZW1vbmljLnBocmFzZS5zcGxpdCgnICcpLmxlbmd0aCA+IDM7XG4gICAgaWYgKGlzTm90RW5jcnlwdGVkKSB7XG4gICAgICByZXR1cm4gZW5jcnlwdGVkTW5lbW9uaWM7XG4gICAgfVxuXG4gICAgY29uc3QgcGhyYXNlID0gYXdhaXQgc3RhYmxlRGVjcnlwdDxzdHJpbmc+KFxuICAgICAgZW5jcnlwdGlvbktleSxcbiAgICAgIGVuY3J5cHRlZE1uZW1vbmljLnBocmFzZVxuICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmVuY3J5cHRlZE1uZW1vbmljLFxuICAgICAgcGhyYXNlLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZ2V0UHJpdmF0ZUtleShcbiAgICByZWNvcmQ6IFdhbGxldFJlY29yZCxcbiAgICB7IGFkZHJlc3MgfTogeyBhZGRyZXNzOiBzdHJpbmcgfVxuICApIHtcbiAgICBsZXQgd2FsbGV0OiBCYXJlV2FsbGV0IHwgbnVsbCA9IG51bGw7XG4gICAgZm9yIChjb25zdCBncm91cCBvZiByZWNvcmQud2FsbGV0TWFuYWdlci5ncm91cHMpIHtcbiAgICAgIGNvbnN0IG1hdGNoZWRXYWxsZXQgPSBncm91cC53YWxsZXRDb250YWluZXIuZ2V0V2FsbGV0QnlBZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgaWYgKG1hdGNoZWRXYWxsZXQpIHtcbiAgICAgICAgd2FsbGV0ID0gbWF0Y2hlZFdhbGxldDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghd2FsbGV0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dhbGxldCB3aXRoIGdpdmVuIGFkZHJlc3Mgbm90IGZvdW5kJyk7XG4gICAgfVxuICAgIHJldHVybiB3YWxsZXQucHJpdmF0ZUtleTtcbiAgfVxuXG4gIHN0YXRpYyBzZXRDdXJyZW50QWRkcmVzcyhcbiAgICByZWNvcmQ6IFdhbGxldFJlY29yZCxcbiAgICB7IGFkZHJlc3MgfTogeyBhZGRyZXNzOiBzdHJpbmcgfVxuICApIHtcbiAgICBjb25zdCBjaGVja1N1bUFkZHJlc3MgPSB0b0NoZWNrc3VtQWRkcmVzcyhhZGRyZXNzKTtcbiAgICByZXR1cm4gcHJvZHVjZShyZWNvcmQsIChkcmFmdCkgPT4ge1xuICAgICAgZHJhZnQud2FsbGV0TWFuYWdlci5jdXJyZW50QWRkcmVzcyA9IGNoZWNrU3VtQWRkcmVzcztcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyByZW5hbWVXYWxsZXRHcm91cChcbiAgICByZWNvcmQ6IFdhbGxldFJlY29yZCxcbiAgICB7IGdyb3VwSWQsIG5hbWUgfTogeyBncm91cElkOiBzdHJpbmc7IG5hbWU6IHN0cmluZyB9XG4gICk6IFdhbGxldFJlY29yZCB7XG4gICAgcmV0dXJuIHByb2R1Y2UocmVjb3JkLCAoZHJhZnQpID0+IHtcbiAgICAgIGNvbnN0IGdyb3VwID0gZHJhZnQud2FsbGV0TWFuYWdlci5ncm91cHMuZmluZChcbiAgICAgICAgKGdyb3VwKSA9PiBncm91cC5pZCA9PT0gZ3JvdXBJZFxuICAgICAgKTtcbiAgICAgIGlmICghZ3JvdXApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHcm91cCBub3QgZm91bmQnKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG1heWJlRXJyb3JNZXNzYWdlID0gdmFsaWRhdGVOYW1lKG5hbWUpO1xuICAgICAgaWYgKG1heWJlRXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtYXliZUVycm9yTWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBncm91cC5uYW1lID0gbmFtZTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyByZW1vdmVXYWxsZXRHcm91cChcbiAgICByZWNvcmQ6IFdhbGxldFJlY29yZCxcbiAgICB7IGdyb3VwSWQgfTogeyBncm91cElkOiBzdHJpbmcgfVxuICApOiBXYWxsZXRSZWNvcmQge1xuICAgIHJldHVybiBwcm9kdWNlKHJlY29yZCwgKGRyYWZ0KSA9PiB7XG4gICAgICBjb25zdCBbcG9zLCBpdGVtXSA9IGZpbmRXaXRoSW5kZXgoXG4gICAgICAgIGRyYWZ0LndhbGxldE1hbmFnZXIuZ3JvdXBzLFxuICAgICAgICAoZ3JvdXApID0+IGdyb3VwLmlkID09PSBncm91cElkXG4gICAgICApO1xuICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignR3JvdXAgbm90IGZvdW5kJyk7XG4gICAgICB9XG4gICAgICBjb25zdCB7IGN1cnJlbnRBZGRyZXNzIH0gPSBkcmFmdC53YWxsZXRNYW5hZ2VyO1xuICAgICAgY29uc3Qgc2hvdWxkQ2hhbmdlQ3VycmVudEFkZHJlc3MgPSBpdGVtLndhbGxldENvbnRhaW5lci53YWxsZXRzLnNvbWUoXG4gICAgICAgICh3YWxsZXQpID0+IHdhbGxldC5hZGRyZXNzID09PSBjdXJyZW50QWRkcmVzc1xuICAgICAgKTtcbiAgICAgIGRyYWZ0LndhbGxldE1hbmFnZXIuZ3JvdXBzLnNwbGljZShwb3MsIDEpO1xuICAgICAgaWYgKHNob3VsZENoYW5nZUN1cnJlbnRBZGRyZXNzKSB7XG4gICAgICAgIGNvbnN0IG5ld0FkZHJlc3MgPVxuICAgICAgICAgIGRyYWZ0LndhbGxldE1hbmFnZXIuZ3JvdXBzWzBdPy53YWxsZXRDb250YWluZXIuZ2V0Rmlyc3RXYWxsZXQoKVxuICAgICAgICAgICAgLmFkZHJlc3M7XG4gICAgICAgIGRyYWZ0LndhbGxldE1hbmFnZXIuY3VycmVudEFkZHJlc3MgPSBuZXdBZGRyZXNzIHx8IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgcmVtb3ZlQWRkcmVzcyhyZWNvcmQ6IFdhbGxldFJlY29yZCwgeyBhZGRyZXNzIH06IHsgYWRkcmVzczogc3RyaW5nIH0pIHtcbiAgICByZXR1cm4gcHJvZHVjZShyZWNvcmQsIChkcmFmdCkgPT4ge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZEFkZHJlc3MgPSBub3JtYWxpemVBZGRyZXNzKGFkZHJlc3MpO1xuICAgICAgY29uc3QgW3BvcywgZ3JvdXBdID0gZmluZFdpdGhJbmRleChkcmFmdC53YWxsZXRNYW5hZ2VyLmdyb3VwcywgKGdyb3VwKSA9PlxuICAgICAgICBncm91cC53YWxsZXRDb250YWluZXIud2FsbGV0cy5zb21lKFxuICAgICAgICAgICh3YWxsZXQpID0+IG5vcm1hbGl6ZUFkZHJlc3Mod2FsbGV0LmFkZHJlc3MpID09PSBub3JtYWxpemVkQWRkcmVzc1xuICAgICAgICApXG4gICAgICApO1xuICAgICAgaWYgKCFncm91cCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dyb3VwIG5vdCBmb3VuZCcpO1xuICAgICAgfVxuICAgICAgY29uc3QgaXNMYXN0QWRkcmVzcyA9IGdyb3VwLndhbGxldENvbnRhaW5lci53YWxsZXRzLmxlbmd0aCA9PT0gMTtcbiAgICAgIGlmIChcbiAgICAgICAgZ3JvdXAud2FsbGV0Q29udGFpbmVyLnNlZWRUeXBlID09PSBTZWVkVHlwZS5tbmVtb25pYyAmJlxuICAgICAgICBpc0xhc3RBZGRyZXNzXG4gICAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdSZW1vdmluZyBsYXN0IHdhbGxldCBmcm9tIGEgd2FsbGV0IGdyb3VwIGlzIG5vdCBhbGxvd2VkLiBZb3UgY2FuIHJlbW92ZSB0aGUgd2hvbGUgZ3JvdXAnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoaXNMYXN0QWRkcmVzcykge1xuICAgICAgICAvLyByZW1vdmUgd2hvbGUgZ3JvdXBcbiAgICAgICAgZHJhZnQud2FsbGV0TWFuYWdlci5ncm91cHMuc3BsaWNlKHBvcywgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBncm91cC53YWxsZXRDb250YWluZXIucmVtb3ZlV2FsbGV0KGFkZHJlc3MpO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBjdXJyZW50QWRkcmVzcyB9ID0gZHJhZnQud2FsbGV0TWFuYWdlcjtcbiAgICAgIGNvbnN0IHNob3VsZENoYW5nZUN1cnJlbnRBZGRyZXNzID1cbiAgICAgICAgY3VycmVudEFkZHJlc3MgJiZcbiAgICAgICAgbm9ybWFsaXplZEFkZHJlc3MgPT09IG5vcm1hbGl6ZUFkZHJlc3MoY3VycmVudEFkZHJlc3MpO1xuICAgICAgaWYgKHNob3VsZENoYW5nZUN1cnJlbnRBZGRyZXNzKSB7XG4gICAgICAgIGlmIChpc0xhc3RBZGRyZXNzKSB7XG4gICAgICAgICAgZHJhZnQud2FsbGV0TWFuYWdlci5jdXJyZW50QWRkcmVzcyA9XG4gICAgICAgICAgICBkcmFmdC53YWxsZXRNYW5hZ2VyLmdyb3Vwc1swXT8ud2FsbGV0Q29udGFpbmVyLmdldEZpcnN0V2FsbGV0KClcbiAgICAgICAgICAgICAgLmFkZHJlc3MgfHwgbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkcmFmdC53YWxsZXRNYW5hZ2VyLmN1cnJlbnRBZGRyZXNzID1cbiAgICAgICAgICAgIGdyb3VwLndhbGxldENvbnRhaW5lci5nZXRGaXJzdFdhbGxldCgpLmFkZHJlc3M7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyByZW5hbWVBZGRyZXNzKFxuICAgIHJlY29yZDogV2FsbGV0UmVjb3JkLFxuICAgIHsgYWRkcmVzcywgbmFtZSB9OiB7IGFkZHJlc3M6IHN0cmluZzsgbmFtZTogc3RyaW5nIH1cbiAgKTogV2FsbGV0UmVjb3JkIHtcbiAgICBjb25zdCBtYXliZUVycm9yTWVzc2FnZSA9IHZhbGlkYXRlTmFtZShuYW1lLCB7IG1pbkxlbmd0aDogMCB9KTtcbiAgICBpZiAobWF5YmVFcnJvck1lc3NhZ2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtYXliZUVycm9yTWVzc2FnZSk7XG4gICAgfVxuICAgIGNvbnN0IG5vcm1hbGl6ZWRBZGRyZXNzID0gbm9ybWFsaXplQWRkcmVzcyhhZGRyZXNzKTtcbiAgICByZXR1cm4gcHJvZHVjZShyZWNvcmQsIChkcmFmdCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBncm91cCBvZiBkcmFmdC53YWxsZXRNYW5hZ2VyLmdyb3Vwcykge1xuICAgICAgICBmb3IgKGNvbnN0IHdhbGxldCBvZiBncm91cC53YWxsZXRDb250YWluZXIud2FsbGV0cykge1xuICAgICAgICAgIGlmIChub3JtYWxpemVBZGRyZXNzKHdhbGxldC5hZGRyZXNzKSA9PT0gbm9ybWFsaXplZEFkZHJlc3MpIHtcbiAgICAgICAgICAgIHdhbGxldC5uYW1lID0gbmFtZSB8fCBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBXYWxsZXQgZm9yICR7YWRkcmVzc30gbm90IGZvdW5kYCk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgYWRkUGVybWlzc2lvbihcbiAgICByZWNvcmQ6IFdhbGxldFJlY29yZCxcbiAgICB7IGFkZHJlc3MsIG9yaWdpbiB9OiB7IGFkZHJlc3M6IHN0cmluZzsgb3JpZ2luOiBzdHJpbmcgfVxuICApOiBXYWxsZXRSZWNvcmQge1xuICAgIHJldHVybiBwcm9kdWNlKHJlY29yZCwgKGRyYWZ0KSA9PiB7XG4gICAgICBjb25zdCBleGlzdGluZ1Blcm1pc3Npb25zID0gZHJhZnQucGVybWlzc2lvbnNbb3JpZ2luXT8uYWRkcmVzc2VzO1xuICAgICAgY29uc3QgZXhpc3RpbmdQZXJtaXNzaW9uc1NldCA9IG5ldyBTZXQoZXhpc3RpbmdQZXJtaXNzaW9ucyB8fCBbXSk7XG4gICAgICBleGlzdGluZ1Blcm1pc3Npb25zU2V0LmFkZChhZGRyZXNzKTtcbiAgICAgIGNvbnN0IHVwZGF0ZWRBZGRyZXNzZXMgPSBBcnJheS5mcm9tKGV4aXN0aW5nUGVybWlzc2lvbnNTZXQpO1xuICAgICAgaWYgKCFkcmFmdC5wZXJtaXNzaW9uc1tvcmlnaW5dKSB7XG4gICAgICAgIGRyYWZ0LnBlcm1pc3Npb25zW29yaWdpbl0gPSB7IGFkZHJlc3NlczogdXBkYXRlZEFkZHJlc3NlcyB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHJhZnQucGVybWlzc2lvbnNbb3JpZ2luXS5hZGRyZXNzZXMgPSB1cGRhdGVkQWRkcmVzc2VzO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIHNldENoYWluRm9yT3JpZ2luKFxuICAgIHJlY29yZDogV2FsbGV0UmVjb3JkLFxuICAgIHsgY2hhaW4sIG9yaWdpbiB9OiB7IGNoYWluOiBDaGFpbjsgb3JpZ2luOiBzdHJpbmcgfVxuICApIHtcbiAgICByZXR1cm4gcHJvZHVjZShyZWNvcmQsIChkcmFmdCkgPT4ge1xuICAgICAgaWYgKCFkcmFmdC5wZXJtaXNzaW9uc1tvcmlnaW5dKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUGVybWlzc2lvbiBmb3IgJHtvcmlnaW59IG5vdCBmb3VuZGApO1xuICAgICAgfVxuICAgICAgZHJhZnQucGVybWlzc2lvbnNbb3JpZ2luXS5jaGFpbiA9IGNoYWluLnRvU3RyaW5nKCk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0Q2hhaW5Gb3JPcmlnaW4oXG4gICAgcmVjb3JkOiBXYWxsZXRSZWNvcmQsXG4gICAgeyBvcmlnaW4gfTogeyBvcmlnaW46IHN0cmluZyB9XG4gICk6IENoYWluIHtcbiAgICBjb25zdCBjaGFpbiA9IHJlY29yZC5wZXJtaXNzaW9uc1tvcmlnaW5dPy5jaGFpbjtcbiAgICByZXR1cm4gY3JlYXRlQ2hhaW4oY2hhaW4gfHwgJ2V0aGVyZXVtJyk7XG4gIH1cblxuICBzdGF0aWMgcmVtb3ZlQWxsT3JpZ2luUGVybWlzc2lvbnMocmVjb3JkOiBXYWxsZXRSZWNvcmQpOiBXYWxsZXRSZWNvcmQge1xuICAgIHJldHVybiBwcm9kdWNlKHJlY29yZCwgKGRyYWZ0KSA9PiB7XG4gICAgICBkcmFmdC5wZXJtaXNzaW9ucyA9IHt9O1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIHJlbW92ZVBlcm1pc3Npb24oXG4gICAgcmVjb3JkOiBXYWxsZXRSZWNvcmQsXG4gICAgeyBvcmlnaW4sIGFkZHJlc3MgfTogeyBvcmlnaW46IHN0cmluZzsgYWRkcmVzcz86IHN0cmluZyB9XG4gICk6IFdhbGxldFJlY29yZCB7XG4gICAgcmV0dXJuIHByb2R1Y2UocmVjb3JkLCAoZHJhZnQpID0+IHtcbiAgICAgIGlmIChvcmlnaW4gaW4gZHJhZnQucGVybWlzc2lvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUmVjb3JkIGZvciAke29yaWdpbn0gbm90IGZvdW5kYCk7XG4gICAgICB9XG4gICAgICBjb25zdCBwZXJtaXNzaW9uID0gZHJhZnQucGVybWlzc2lvbnNbb3JpZ2luXTtcbiAgICAgIGNvbnN0IHsgYWRkcmVzc2VzOiBleGlzdGluZ1Blcm1pc3Npb25zIH0gPSBwZXJtaXNzaW9uO1xuICAgICAgaWYgKGFkZHJlc3MgJiYgZXhpc3RpbmdQZXJtaXNzaW9ucy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHNwbGljZUl0ZW0oZXhpc3RpbmdQZXJtaXNzaW9ucywgYWRkcmVzcyk7XG4gICAgICB9IGVsc2UgaWYgKCFwZXJtaXNzaW9uLmNoYWluKSB7XG4gICAgICAgIC8vIHJlbW92ZSB3aG9sZSByZWNvcmQgZm9yIGBvcmlnaW5gIGNvbXBsZXRlbHlcbiAgICAgICAgZGVsZXRlIGRyYWZ0LnBlcm1pc3Npb25zW29yaWdpbl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcmFmdC5wZXJtaXNzaW9uc1tvcmlnaW5dLmFkZHJlc3NlcyA9IFtdO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGdldFByZWZlcmVuY2VzKHJlY29yZDogV2FsbGV0UmVjb3JkKSB7XG4gICAgY29uc3QgZGVmYXVsdHM6IFdhbGxldFJlY29yZFsncHJlZmVyZW5jZXMnXSA9IHtcbiAgICAgIHNob3dOZXR3b3JrU3dpdGNoU2hvcnRjdXQ6IHRydWUsXG4gICAgfTtcbiAgICBjb25zdCB7IHByZWZlcmVuY2VzIH0gPSByZWNvcmQ7XG4gICAgcmV0dXJuIHsgLi4uZGVmYXVsdHMsIC4uLnByZWZlcmVuY2VzIH07XG4gIH1cblxuICBzdGF0aWMgc2V0UHJlZmVyZW5jZShcbiAgICByZWNvcmQ6IFdhbGxldFJlY29yZCxcbiAgICB7IHByZWZlcmVuY2VzIH06IHsgcHJlZmVyZW5jZXM6IFBhcnRpYWw8V2FsbGV0UmVjb3JkWydwcmVmZXJlbmNlcyddPiB9XG4gICkge1xuICAgIHJldHVybiBwcm9kdWNlKHJlY29yZCwgKGRyYWZ0KSA9PiB7XG4gICAgICBPYmplY3QuYXNzaWduKGRyYWZ0LnByZWZlcmVuY2VzLCBwcmVmZXJlbmNlcyk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgc2V0V2FsbGV0TmFtZUZsYWcoXG4gICAgcmVjb3JkOiBXYWxsZXRSZWNvcmQsXG4gICAgeyBmbGFnIH06IHsgZmxhZzogV2FsbGV0TmFtZUZsYWcgfVxuICApIHtcbiAgICByZXR1cm4gcHJvZHVjZShyZWNvcmQsIChkcmFmdCkgPT4ge1xuICAgICAgY29uc3QgeyB3YWxsZXROYW1lRmxhZ3MgfSA9IGRyYWZ0LnByZWZlcmVuY2VzO1xuICAgICAgY29uc3Qgc2V0ID0gbmV3IFNldCh3YWxsZXROYW1lRmxhZ3MpLmFkZChmbGFnKTtcbiAgICAgIGRyYWZ0LnByZWZlcmVuY2VzLndhbGxldE5hbWVGbGFncyA9IEFycmF5LmZyb20oc2V0KTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyByZW1vdmVXYWxsZXROYW1lRmxhZyhcbiAgICByZWNvcmQ6IFdhbGxldFJlY29yZCxcbiAgICB7IGZsYWcgfTogeyBmbGFnOiBXYWxsZXROYW1lRmxhZyB9XG4gICkge1xuICAgIHJldHVybiBwcm9kdWNlKHJlY29yZCwgKGRyYWZ0KSA9PiB7XG4gICAgICBjb25zdCB7IHdhbGxldE5hbWVGbGFncyB9ID0gZHJhZnQucHJlZmVyZW5jZXM7XG4gICAgICBjb25zdCBzZXQgPSBuZXcgU2V0KHdhbGxldE5hbWVGbGFncyk7XG4gICAgICBzZXQuZGVsZXRlKGZsYWcpO1xuICAgICAgZHJhZnQucHJlZmVyZW5jZXMud2FsbGV0TmFtZUZsYWdzID0gQXJyYXkuZnJvbShzZXQpO1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIHVwZGF0ZUxhc3RCYWNrZWRVcChcbiAgICByZWNvcmQ6IFdhbGxldFJlY29yZCxcbiAgICB7IGdyb3VwSWQsIHRpbWVzdGFtcCB9OiB7IGdyb3VwSWQ6IHN0cmluZzsgdGltZXN0YW1wOiBudW1iZXIgfVxuICApIHtcbiAgICByZXR1cm4gcHJvZHVjZShyZWNvcmQsIChkcmFmdCkgPT4ge1xuICAgICAgY29uc3QgZ3JvdXAgPSBkcmFmdC53YWxsZXRNYW5hZ2VyLmdyb3Vwcy5maW5kKFxuICAgICAgICAoZ3JvdXApID0+IGdyb3VwLmlkID09PSBncm91cElkXG4gICAgICApO1xuICAgICAgaWYgKCFncm91cCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEdyb3VwIHdpdGggaWQgJHtncm91cElkfSBub3QgZm91bmRgKTtcbiAgICAgIH1cbiAgICAgIGdyb3VwLmxhc3RCYWNrZWRVcCA9IHRpbWVzdGFtcDtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgU3RvcmUgfSBmcm9tICdzdG9yZS11bml0JztcbmltcG9ydCB7IGdldCwgc2V0IH0gZnJvbSAnc3JjL2JhY2tncm91bmQvd2ViYXBpcy9zdG9yYWdlJztcblxuZnVuY3Rpb24gcmVtb3ZlPFQ+KGFycjogVFtdLCBpdGVtOiBUKSB7XG4gIGNvbnN0IHBvcyA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICBpZiAocG9zICE9PSAtMSkge1xuICAgIGFyci5zcGxpY2UocG9zLCAxKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGVyc2lzdGVudFN0b3JlPFQ+IGV4dGVuZHMgU3RvcmU8VD4ge1xuICBpc1JlYWR5OiBib29sZWFuO1xuICBwcml2YXRlIHBlbmRpbmdSZWFkeVN0YXRlTGlzdGVuZXJzOiBBcnJheTwoKSA9PiB2b2lkPjtcblxuICBjb25zdHJ1Y3RvcihrZXk6IHN0cmluZywgaW5pdGlhbFN0YXRlOiBUKSB7XG4gICAgc3VwZXIoeyAuLi5pbml0aWFsU3RhdGUgfSk7XG4gICAgdGhpcy5sb2FkKGtleSk7XG4gICAgdGhpcy5pc1JlYWR5ID0gZmFsc2U7XG4gICAgdGhpcy5wZW5kaW5nUmVhZHlTdGF0ZUxpc3RlbmVycyA9IFtdO1xuICAgIHRoaXMub24oJ2NoYW5nZScsIChzdGF0ZSkgPT4gc2V0KGtleSwgc3RhdGUpKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWQoa2V5OiBzdHJpbmcpIHtcbiAgICBjb25zdCBzYXZlZFZhbHVlID0gYXdhaXQgZ2V0KGtleSk7XG4gICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcbiAgICBpZiAoc2F2ZWRWYWx1ZSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZShzYXZlZFZhbHVlIGFzIFQpO1xuICAgIH1cbiAgICB0aGlzLnBlbmRpbmdSZWFkeVN0YXRlTGlzdGVuZXJzLmZvckVhY2goKGNiKSA9PiBjYigpKTtcbiAgfVxuXG4gIGFzeW5jIHJlYWR5KCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNSZWFkeSkge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBsaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgICByZW1vdmUodGhpcy5wZW5kaW5nUmVhZHlTdGF0ZUxpc3RlbmVycywgbGlzdGVuZXIpO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wZW5kaW5nUmVhZHlTdGF0ZUxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGdldFNhdmVkU3RhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkoKS50aGVuKCgpID0+IHRoaXMuZ2V0U3RhdGUoKSk7XG4gIH1cbn1cbiIsImltcG9ydCBwcm9kdWNlIGZyb20gJ2ltbWVyJztcbmltcG9ydCB7IFBlcnNpc3RlbnRTdG9yZSB9IGZyb20gJ3NyYy9zaGFyZWQvUGVyc2lzdGVudFN0b3JlJztcbmltcG9ydCB0eXBlIHsgV2FsbGV0UmVjb3JkIH0gZnJvbSAnLi9tb2RlbC90eXBlcyc7XG5pbXBvcnQgeyBXYWxsZXRSZWNvcmRNb2RlbCBhcyBNb2RlbCB9IGZyb20gJy4vV2FsbGV0UmVjb3JkJztcblxudHlwZSBFbmNyeXB0ZWRXYWxsZXRSZWNvcmQgPSBzdHJpbmc7XG5cbnR5cGUgV2FsbGV0U3RvcmVTdGF0ZSA9IFJlY29yZDxzdHJpbmcsIEVuY3J5cHRlZFdhbGxldFJlY29yZCB8IHVuZGVmaW5lZD47XG5cbmV4cG9ydCBjbGFzcyBXYWxsZXRTdG9yZSBleHRlbmRzIFBlcnNpc3RlbnRTdG9yZTxXYWxsZXRTdG9yZVN0YXRlPiB7XG4gIC8qKiB0aHJvd3MgaWYgZW5jcnlwdGlvbktleSBpcyB3cm9uZyAqL1xuICBhc3luYyBjaGVjayhpZDogc3RyaW5nLCBlbmNyeXB0aW9uS2V5OiBzdHJpbmcpIHtcbiAgICBjb25zdCBlbmNyeXB0ZWRSZWNvcmQgPSB0aGlzLmdldFN0YXRlKClbaWRdO1xuICAgIGlmICghZW5jcnlwdGVkUmVjb3JkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCByZWFkOiByZWNvcmQgZm9yICR7aWR9IG5vdCBmb3VuZGApO1xuICAgIH1cbiAgICByZXR1cm4gTW9kZWwuZGVjcnlwdFJlY29yZChlbmNyeXB0aW9uS2V5LCBlbmNyeXB0ZWRSZWNvcmQpO1xuICB9XG5cbiAgYXN5bmMgcmVhZChpZDogc3RyaW5nLCBlbmNyeXB0aW9uS2V5OiBzdHJpbmcpOiBQcm9taXNlPFdhbGxldFJlY29yZCB8IG51bGw+IHtcbiAgICBjb25zdCBlbmNyeXB0ZWRSZWNvcmQgPSB0aGlzLmdldFN0YXRlKClbaWRdO1xuICAgIGlmICghZW5jcnlwdGVkUmVjb3JkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IE1vZGVsLmRlY3J5cHRBbmRSZXN0b3JlUmVjb3JkKGVuY3J5cHRpb25LZXksIGVuY3J5cHRlZFJlY29yZCk7XG4gIH1cblxuICBhc3luYyBzYXZlKGlkOiBzdHJpbmcsIGVuY3J5cHRpb25LZXk6IHN0cmluZywgcmVjb3JkOiBXYWxsZXRSZWNvcmQpIHtcbiAgICBjb25zdCBlbmNyeXB0ZWRSZWNvcmQgPSBhd2FpdCBNb2RlbC5lbmNyeXB0UmVjb3JkKGVuY3J5cHRpb25LZXksIHJlY29yZCk7XG4gICAgdGhpcy5zZXRTdGF0ZSgoc3RhdGUpID0+XG4gICAgICBwcm9kdWNlKHN0YXRlLCAoZHJhZnQpID0+IHtcbiAgICAgICAgZHJhZnRbaWRdID0gZW5jcnlwdGVkUmVjb3JkO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgZGVsZXRlTWFueShrZXlzOiBzdHJpbmdbXSkge1xuICAgIHRoaXMuc2V0U3RhdGUoKHN0YXRlKSA9PlxuICAgICAgcHJvZHVjZShzdGF0ZSwgKGRyYWZ0KSA9PiB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgICAgICBkZWxldGUgZHJhZnRba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCB3YWxsZXRTdG9yZSA9IG5ldyBXYWxsZXRTdG9yZSgnd2FsbGV0Jywge30pO1xuXG5PYmplY3QuYXNzaWduKHdpbmRvdywgeyB3YWxsZXRTdG9yZSB9KTtcbiIsImltcG9ydCB7IGV0aGVycywgVW5zaWduZWRUcmFuc2FjdGlvbiB9IGZyb20gJ2V0aGVycyc7XG5pbXBvcnQgeyBjcmVhdGVOYW5vRXZlbnRzLCBFbWl0dGVyIH0gZnJvbSAnbmFub2V2ZW50cyc7XG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ3N0b3JlLXVuaXQnO1xuaW1wb3J0IHsgaXNUcnV0aHkgfSBmcm9tICdpcy10cnV0aHktdHMnO1xuaW1wb3J0IHsgZW5jcnlwdCwgZGVjcnlwdCB9IGZyb20gJ3NyYy9tb2R1bGVzL2NyeXB0byc7XG5pbXBvcnQgeyBub3RpZmljYXRpb25XaW5kb3cgfSBmcm9tICdzcmMvYmFja2dyb3VuZC9Ob3RpZmljYXRpb25XaW5kb3cvTm90aWZpY2F0aW9uV2luZG93JztcbmltcG9ydCB0eXBlIHtcbiAgQ2hhbm5lbENvbnRleHQsXG4gIFByaXZhdGVDaGFubmVsQ29udGV4dCxcbn0gZnJvbSAnc3JjL3NoYXJlZC90eXBlcy9DaGFubmVsQ29udGV4dCc7XG5pbXBvcnQge1xuICBJbnZhbGlkUGFyYW1zLFxuICBNZXRob2ROb3RJbXBsZW1lbnRlZCxcbiAgT3JpZ2luTm90QWxsb3dlZCxcbiAgUmVjb3JkTm90Rm91bmQsXG4gIFNlc3Npb25FeHBpcmVkLFxuICBVc2VyUmVqZWN0ZWQsXG4gIFVzZXJSZWplY3RlZFR4U2lnbmF0dXJlLFxufSBmcm9tICdzcmMvc2hhcmVkL2Vycm9ycy9lcnJvcnMnO1xuaW1wb3J0IHtcbiAgSU5URVJOQUxfT1JJR0lOLFxuICBJTlRFUk5BTF9PUklHSU5fU1lNQk9MLFxufSBmcm9tICdzcmMvYmFja2dyb3VuZC9jb25zdGFudHMnO1xuaW1wb3J0IHsgbmV0d29ya3NTdG9yZSB9IGZyb20gJ3NyYy9tb2R1bGVzL25ldHdvcmtzL25ldHdvcmtzLXN0b3JlJztcbmltcG9ydCB0eXBlIHsgSW5jb21pbmdUcmFuc2FjdGlvbiB9IGZyb20gJ3NyYy9tb2R1bGVzL2V0aGVyZXVtL3R5cGVzL0luY29taW5nVHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgcHJlcGFyZVRyYW5zYWN0aW9uIH0gZnJvbSAnc3JjL21vZHVsZXMvZXRoZXJldW0vdHJhbnNhY3Rpb25zL3ByZXBhcmVUcmFuc2FjdGlvbic7XG5pbXBvcnQgeyBDaGFpbiwgY3JlYXRlQ2hhaW4gfSBmcm9tICdzcmMvbW9kdWxlcy9uZXR3b3Jrcy9DaGFpbic7XG5pbXBvcnQgeyBoYXNHYXNQcmljZSB9IGZyb20gJ3NyYy9tb2R1bGVzL2V0aGVyZXVtL3RyYW5zYWN0aW9ucy9nYXNQcmljZXMvaGFzR2FzUHJpY2UnO1xuaW1wb3J0IHsgZmV0Y2hBbmRBc3NpZ25HYXNQcmljZSB9IGZyb20gJ3NyYy9tb2R1bGVzL2V0aGVyZXVtL3RyYW5zYWN0aW9ucy9mZXRjaEFuZEFzc2lnbkdhc1ByaWNlJztcbmltcG9ydCB0eXBlIHsgVHlwZWREYXRhIH0gZnJvbSAnc3JjL21vZHVsZXMvZXRoZXJldW0vbWVzc2FnZS1zaWduaW5nL1R5cGVkRGF0YSc7XG5pbXBvcnQgeyBwcmVwYXJlVHlwZWREYXRhIH0gZnJvbSAnc3JjL21vZHVsZXMvZXRoZXJldW0vbWVzc2FnZS1zaWduaW5nL3ByZXBhcmVUeXBlZERhdGEnO1xuaW1wb3J0IHsgdG9VdGY4U3RyaW5nIH0gZnJvbSAnZXRoZXJzL2xpYi91dGlscyc7XG5pbXBvcnQgeyByZW1vdmVTaWduYXR1cmUgfSBmcm9tICdzcmMvbW9kdWxlcy9ldGhlcmV1bS90cmFuc2FjdGlvbnMvcmVtb3ZlU2lnbmF0dXJlJztcbmltcG9ydCB7IG5vcm1hbGl6ZUFkZHJlc3MgfSBmcm9tICdzcmMvc2hhcmVkL25vcm1hbGl6ZUFkZHJlc3MnO1xuaW1wb3J0IHsgZ2V0VHJhbnNhY3Rpb25DaGFpbklkIH0gZnJvbSAnc3JjL21vZHVsZXMvZXRoZXJldW0vdHJhbnNhY3Rpb25zL3Jlc29sdmVDaGFpbkZvclR4JztcbmltcG9ydCB0eXBlIHsgUGFydGlhbGx5UmVxdWlyZWQgfSBmcm9tICdzcmMvc2hhcmVkL3R5cGUtdXRpbHMvUGFydGlhbGx5UmVxdWlyZWQnO1xuaW1wb3J0IHsgZW1pdHRlciB9IGZyb20gJy4uL2V2ZW50cyc7XG5pbXBvcnQgeyB0b0V0aGVyc1dhbGxldCB9IGZyb20gJy4vaGVscGVycy90b0V0aGVyc1dhbGxldCc7XG5pbXBvcnQgeyBtYXNrV2FsbGV0LCBtYXNrV2FsbGV0R3JvdXAsIG1hc2tXYWxsZXRHcm91cHMgfSBmcm9tICcuL2hlbHBlcnMvbWFzayc7XG5pbXBvcnQgeyBTZWVkVHlwZSB9IGZyb20gJy4vbW9kZWwvU2VlZFR5cGUnO1xuaW1wb3J0IHR5cGUgeyBCYXJlV2FsbGV0LCBQZW5kaW5nV2FsbGV0LCBXYWxsZXRSZWNvcmQgfSBmcm9tICcuL21vZGVsL3R5cGVzJztcbmltcG9ydCB7XG4gIE1uZW1vbmljV2FsbGV0Q29udGFpbmVyLFxuICBQcml2YXRlS2V5V2FsbGV0Q29udGFpbmVyLFxufSBmcm9tICcuL21vZGVsL1dhbGxldENvbnRhaW5lcic7XG5pbXBvcnQgeyBXYWxsZXRSZWNvcmRNb2RlbCBhcyBNb2RlbCB9IGZyb20gJy4vV2FsbGV0UmVjb3JkJztcbmltcG9ydCB0eXBlIHsgV2FsbGV0U3RvcmUgfSBmcm9tICcuL3BlcnNpc3RlbmNlJztcbmltcG9ydCB7IHdhbGxldFN0b3JlIH0gZnJvbSAnLi9wZXJzaXN0ZW5jZSc7XG5pbXBvcnQgeyBXYWxsZXROYW1lRmxhZyB9IGZyb20gJy4vbW9kZWwvV2FsbGV0TmFtZUZsYWcnO1xuXG5jb25zdCBJTlRFUk5BTF9TWU1CT0xfQ09OVEVYVCA9IHsgb3JpZ2luOiBJTlRFUk5BTF9PUklHSU5fU1lNQk9MIH07XG5cbnR5cGUgUHVibGljTWV0aG9kUGFyYW1zPFQgPSB1bmRlZmluZWQ+ID0gVCBleHRlbmRzIHVuZGVmaW5lZFxuICA/IHtcbiAgICAgIGNvbnRleHQ/OiBQYXJ0aWFsPENoYW5uZWxDb250ZXh0PjtcbiAgICB9XG4gIDoge1xuICAgICAgcGFyYW1zOiBUO1xuICAgICAgY29udGV4dD86IFBhcnRpYWw8Q2hhbm5lbENvbnRleHQ+O1xuICAgIH07XG5cbnR5cGUgV2FsbGV0TWV0aG9kUGFyYW1zPFQgPSB1bmRlZmluZWQ+ID0gVCBleHRlbmRzIHVuZGVmaW5lZFxuICA/IHtcbiAgICAgIGNvbnRleHQ/OiBQYXJ0aWFsPENoYW5uZWxDb250ZXh0IHwgUHJpdmF0ZUNoYW5uZWxDb250ZXh0PjtcbiAgICB9XG4gIDoge1xuICAgICAgcGFyYW1zOiBUO1xuICAgICAgY29udGV4dD86IFBhcnRpYWw8Q2hhbm5lbENvbnRleHQgfCBQcml2YXRlQ2hhbm5lbENvbnRleHQ+O1xuICAgIH07XG5cbmludGVyZmFjZSBXYWxsZXRFdmVudHMge1xuICByZWNvcmRVcGRhdGVkOiAoKSA9PiB2b2lkO1xuICBjdXJyZW50QWRkcmVzc0NoYW5nZTogKGFkZHJlc3Nlczogc3RyaW5nW10pID0+IHZvaWQ7XG4gIGNoYWluQ2hhbmdlZDogKGNoYWluOiBDaGFpbiwgb3JpZ2luOiBzdHJpbmcpID0+IHZvaWQ7XG4gIHBlcm1pc3Npb25zVXBkYXRlZDogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIFdhbGxldCB7XG4gIHB1YmxpYyBpZDogc3RyaW5nO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgcHVibGljIHB1YmxpY0V0aGVyZXVtQ29udHJvbGxlcjogUHVibGljQ29udHJvbGxlcjtcbiAgcHJpdmF0ZSBlbmNyeXB0aW9uS2V5OiBzdHJpbmcgfCBudWxsO1xuICBwcml2YXRlIHNlZWRQaHJhc2VFbmNyeXB0aW9uS2V5OiBDcnlwdG9LZXkgfCBudWxsO1xuICBwcml2YXRlIHNlZWRQaHJhc2VFeHBpcnlUaW1lcklkOiBOb2RlSlMuVGltZW91dCB8IG51bWJlciA9IDA7XG4gIHByaXZhdGUgd2FsbGV0U3RvcmU6IFdhbGxldFN0b3JlO1xuICBwcml2YXRlIHBlbmRpbmdXYWxsZXQ6IFBlbmRpbmdXYWxsZXQgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSByZWNvcmQ6IFdhbGxldFJlY29yZCB8IG51bGw7XG5cbiAgcHJpdmF0ZSBzdG9yZTogU3RvcmU8eyBjaGFpbklkOiBzdHJpbmcgfT47XG5cbiAgZW1pdHRlcjogRW1pdHRlcjxXYWxsZXRFdmVudHM+O1xuXG4gIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcsIGVuY3J5cHRpb25LZXk6IHN0cmluZyB8IG51bGwpIHtcbiAgICB0aGlzLnN0b3JlID0gbmV3IFN0b3JlKHsgY2hhaW5JZDogJzB4MScgfSk7XG4gICAgdGhpcy5lbWl0dGVyID0gY3JlYXRlTmFub0V2ZW50cygpO1xuXG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHRoaXMud2FsbGV0U3RvcmUgPSB3YWxsZXRTdG9yZTtcbiAgICB0aGlzLmVuY3J5cHRpb25LZXkgPSBlbmNyeXB0aW9uS2V5O1xuICAgIHRoaXMuc2VlZFBocmFzZUVuY3J5cHRpb25LZXkgPSBudWxsO1xuICAgIHRoaXMucmVjb3JkID0gbnVsbDtcblxuICAgIHRoaXMud2FsbGV0U3RvcmUucmVhZHkoKS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMuc3luY1dpdGhXYWxsZXRTdG9yZSgpO1xuICAgIH0pO1xuICAgIE9iamVjdC5hc3NpZ24od2luZG93LCB7IGVuY3J5cHQsIGRlY3J5cHQgfSk7XG4gICAgdGhpcy5wdWJsaWNFdGhlcmV1bUNvbnRyb2xsZXIgPSBuZXcgUHVibGljQ29udHJvbGxlcih0aGlzKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc3luY1dpdGhXYWxsZXRTdG9yZSgpIHtcbiAgICBpZiAoIXRoaXMuZW5jcnlwdGlvbktleSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhd2FpdCB3YWxsZXRTdG9yZS5yZWFkeSgpO1xuICAgIHRoaXMucmVjb3JkID0gYXdhaXQgd2FsbGV0U3RvcmUucmVhZCh0aGlzLmlkLCB0aGlzLmVuY3J5cHRpb25LZXkpO1xuICAgIGlmICh0aGlzLnJlY29yZCkge1xuICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoJ3JlY29yZFVwZGF0ZWQnKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHVwZGF0ZVdhbGxldFN0b3JlKHJlY29yZDogV2FsbGV0UmVjb3JkKSB7XG4gICAgaWYgKCF0aGlzLmVuY3J5cHRpb25LZXkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHNhdmUgcGVuZGluZyB3YWxsZXQ6IGVuY3J5cHRpb25LZXkgaXMgbnVsbCcpO1xuICAgIH1cbiAgICB0aGlzLndhbGxldFN0b3JlLnNhdmUodGhpcy5pZCwgdGhpcy5lbmNyeXB0aW9uS2V5LCByZWNvcmQpO1xuICB9XG5cbiAgYXN5bmMgcmVhZHkoKSB7XG4gICAgcmV0dXJuIHRoaXMud2FsbGV0U3RvcmUucmVhZHkoKTtcbiAgfVxuXG4gIGFzeW5jIGdldElkKCkge1xuICAgIHJldHVybiB0aGlzLmlkO1xuICB9XG5cbiAgYXN5bmMgdXNlckhlYXJ0YmVhdCh7IGNvbnRleHQgfTogV2FsbGV0TWV0aG9kUGFyYW1zKSB7XG4gICAgdGhpcy52ZXJpZnlJbnRlcm5hbE9yaWdpbihjb250ZXh0KTtcbiAgICBlbWl0dGVyLmVtaXQoJ3VzZXJBY3Rpdml0eScpO1xuICB9XG5cbiAgLyoqIHRocm93cyBpZiBlbmNyeXB0aW9uS2V5IGlzIHdyb25nICovXG4gIGFzeW5jIHZlcmlmeUNyZWRlbnRpYWxzKHtcbiAgICBwYXJhbXM6IHsgaWQsIGVuY3J5cHRpb25LZXkgfSxcbiAgfTogUHVibGljTWV0aG9kUGFyYW1zPHsgaWQ6IHN0cmluZzsgZW5jcnlwdGlvbktleTogc3RyaW5nIH0+KSB7XG4gICAgYXdhaXQgd2FsbGV0U3RvcmUucmVhZHkoKTtcbiAgICBhd2FpdCB3YWxsZXRTdG9yZS5jaGVjayhpZCwgZW5jcnlwdGlvbktleSk7XG4gIH1cblxuICBoYXNTZWVkUGhyYXNlRW5jcnlwdGlvbktleSgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLnNlZWRQaHJhc2VFbmNyeXB0aW9uS2V5KTtcbiAgfVxuXG4gIHJlbW92ZVNlZWRQaHJhc2VFbmNyeXB0aW9uS2V5KCkge1xuICAgIHRoaXMuc2VlZFBocmFzZUVuY3J5cHRpb25LZXkgPSBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRFeHBpcmF0aW9uRm9yU2VlZFBocmFzZUVuY3J5cHRpb25LZXkoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuc2VlZFBocmFzZUV4cGlyeVRpbWVySWQpO1xuICAgIHRoaXMuc2VlZFBocmFzZUV4cGlyeVRpbWVySWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlU2VlZFBocmFzZUVuY3J5cHRpb25LZXkoKTtcbiAgICAgIH1cbiAgICB9LCAxMDAwICogMTIwKTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUNyZWRlbnRpYWxzKHtcbiAgICBwYXJhbXM6IHsgaWQsIGVuY3J5cHRpb25LZXksIHNlZWRQaHJhc2VFbmNyeXB0aW9uS2V5IH0sXG4gIH06IFB1YmxpY01ldGhvZFBhcmFtczx7XG4gICAgaWQ6IHN0cmluZztcbiAgICBlbmNyeXB0aW9uS2V5OiBzdHJpbmc7XG4gICAgc2VlZFBocmFzZUVuY3J5cHRpb25LZXk6IENyeXB0b0tleSB8IG51bGw7XG4gIH0+KSB7XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHRoaXMuZW5jcnlwdGlvbktleSA9IGVuY3J5cHRpb25LZXk7XG4gICAgdGhpcy5zZWVkUGhyYXNlRW5jcnlwdGlvbktleSA9IHNlZWRQaHJhc2VFbmNyeXB0aW9uS2V5O1xuICAgIHRoaXMuc2V0RXhwaXJhdGlvbkZvclNlZWRQaHJhc2VFbmNyeXB0aW9uS2V5KCk7XG4gICAgYXdhaXQgd2FsbGV0U3RvcmUucmVhZHkoKTtcbiAgICBhd2FpdCB0aGlzLnN5bmNXaXRoV2FsbGV0U3RvcmUoKTtcbiAgfVxuXG4gIGFzeW5jIHRlc3RNZXRob2QoeyBwYXJhbXM6IHZhbHVlIH06IFdhbGxldE1ldGhvZFBhcmFtczxudW1iZXI+KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHN0cmluZz4oKHIpID0+XG4gICAgICBzZXRUaW1lb3V0KFxuICAgICAgICAoKSA9PiByKGBIZWxsbywgY3VyaW91cyBkZXZlbG9wZXIuIFlvdXIgdmFsdWUgaXMgJHt2YWx1ZX1gKSxcbiAgICAgICAgMTUwMFxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICAvLyBUT0RPOiBGb3Igbm93LCBJIHByZWZpeCBtZXRob2RzIHdpdGggXCJ1aVwiIHdoaWNoIHJldHVybiB3YWxsZXQgZGF0YSBhbmQgYXJlIHN1cHBvc2VkIHRvIGJlIGNhbGxlZFxuICAvLyBmcm9tIHRoZSBVSSAoZXh0ZW5zaW9uIHBvcHVwKSB0aHJlYWQuIEl0J3MgbWF5YmUgYmV0dGVyIHRvIHJlZmFjdG9yIHRoZW1cbiAgLy8gaW50byBhIHNlcGFyYXRlIGlzb2xhdGVkIGNsYXNzXG4gIGFzeW5jIHVpR2VuZXJhdGVNbmVtb25pYygpIHtcbiAgICBpZiAoIXRoaXMuc2VlZFBocmFzZUVuY3J5cHRpb25LZXkpIHtcbiAgICAgIHRocm93IG5ldyBTZXNzaW9uRXhwaXJlZCgpO1xuICAgIH1cbiAgICB0aGlzLnBlbmRpbmdXYWxsZXQgPSB7XG4gICAgICBncm91cElkOiBudWxsLFxuICAgICAgd2FsbGV0Q29udGFpbmVyOiBhd2FpdCBNbmVtb25pY1dhbGxldENvbnRhaW5lci5jcmVhdGUoe1xuICAgICAgICBlbmNyeXB0aW9uS2V5OiB0aGlzLnNlZWRQaHJhc2VFbmNyeXB0aW9uS2V5LFxuICAgICAgfSksXG4gICAgfTtcbiAgICByZXR1cm4gbWFza1dhbGxldCh0aGlzLnBlbmRpbmdXYWxsZXQud2FsbGV0Q29udGFpbmVyLmdldEZpcnN0V2FsbGV0KCkpO1xuICB9XG5cbiAgYXN5bmMgdWlJbXBvcnRQcml2YXRlS2V5KHsgcGFyYW1zOiBwcml2YXRlS2V5IH06IFdhbGxldE1ldGhvZFBhcmFtczxzdHJpbmc+KSB7XG4gICAgdGhpcy5wZW5kaW5nV2FsbGV0ID0ge1xuICAgICAgZ3JvdXBJZDogbnVsbCxcbiAgICAgIHdhbGxldENvbnRhaW5lcjogbmV3IFByaXZhdGVLZXlXYWxsZXRDb250YWluZXIoW3sgcHJpdmF0ZUtleSB9XSksXG4gICAgfTtcbiAgICByZXR1cm4gbWFza1dhbGxldCh0aGlzLnBlbmRpbmdXYWxsZXQud2FsbGV0Q29udGFpbmVyLmdldEZpcnN0V2FsbGV0KCkpO1xuICB9XG5cbiAgYXN5bmMgdWlJbXBvcnRTZWVkUGhyYXNlKHtcbiAgICBwYXJhbXM6IG1uZW1vbmljcyxcbiAgfTogV2FsbGV0TWV0aG9kUGFyYW1zPE5vbk51bGxhYmxlPEJhcmVXYWxsZXRbJ21uZW1vbmljJ10+W10+KSB7XG4gICAgaWYgKCF0aGlzLnNlZWRQaHJhc2VFbmNyeXB0aW9uS2V5KSB7XG4gICAgICB0aHJvdyBuZXcgU2Vzc2lvbkV4cGlyZWQoKTtcbiAgICB9XG4gICAgdGhpcy5wZW5kaW5nV2FsbGV0ID0ge1xuICAgICAgZ3JvdXBJZDogbnVsbCxcbiAgICAgIHdhbGxldENvbnRhaW5lcjogYXdhaXQgTW5lbW9uaWNXYWxsZXRDb250YWluZXIuY3JlYXRlKHtcbiAgICAgICAgd2FsbGV0czogbW5lbW9uaWNzLm1hcCgobW5lbW9uaWMpID0+ICh7IG1uZW1vbmljIH0pKSxcbiAgICAgICAgZW5jcnlwdGlvbktleTogdGhpcy5zZWVkUGhyYXNlRW5jcnlwdGlvbktleSxcbiAgICAgIH0pLFxuICAgIH07XG4gICAgcmV0dXJuIG1hc2tXYWxsZXQodGhpcy5wZW5kaW5nV2FsbGV0LndhbGxldENvbnRhaW5lci5nZXRGaXJzdFdhbGxldCgpKTtcbiAgfVxuXG4gIGFzeW5jIGdldFJlY292ZXJ5UGhyYXNlKHtcbiAgICBwYXJhbXM6IHsgZ3JvdXBJZCB9LFxuICAgIGNvbnRleHQsXG4gIH06IFdhbGxldE1ldGhvZFBhcmFtczx7IGdyb3VwSWQ6IHN0cmluZyB9Pikge1xuICAgIHRoaXMudmVyaWZ5SW50ZXJuYWxPcmlnaW4oY29udGV4dCk7XG4gICAgdGhpcy5lbnN1cmVSZWNvcmQodGhpcy5yZWNvcmQpO1xuICAgIGlmICghdGhpcy5zZWVkUGhyYXNlRW5jcnlwdGlvbktleSkge1xuICAgICAgdGhyb3cgbmV3IFNlc3Npb25FeHBpcmVkKCk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBNb2RlbC5nZXRSZWNvdmVyeVBocmFzZSh0aGlzLnJlY29yZCwge1xuICAgICAgZ3JvdXBJZCxcbiAgICAgIGVuY3J5cHRpb25LZXk6IHRoaXMuc2VlZFBocmFzZUVuY3J5cHRpb25LZXksXG4gICAgfSk7XG4gIH1cblxuICBhc3luYyB2ZXJpZnlSZWNvdmVyeVBocmFzZSh7XG4gICAgcGFyYW1zOiB7IGdyb3VwSWQsIHZhbHVlIH0sXG4gICAgY29udGV4dCxcbiAgfTogV2FsbGV0TWV0aG9kUGFyYW1zPHsgZ3JvdXBJZDogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIH0+KSB7XG4gICAgdGhpcy52ZXJpZnlJbnRlcm5hbE9yaWdpbihjb250ZXh0KTtcbiAgICB0aGlzLmVuc3VyZVJlY29yZCh0aGlzLnJlY29yZCk7XG4gICAgaWYgKCF0aGlzLnNlZWRQaHJhc2VFbmNyeXB0aW9uS2V5KSB7XG4gICAgICB0aHJvdyBuZXcgU2Vzc2lvbkV4cGlyZWQoKTtcbiAgICB9XG4gICAgY29uc3QgbW5lbW9uaWMgPSBhd2FpdCBNb2RlbC5nZXRSZWNvdmVyeVBocmFzZSh0aGlzLnJlY29yZCwge1xuICAgICAgZ3JvdXBJZCxcbiAgICAgIGVuY3J5cHRpb25LZXk6IHRoaXMuc2VlZFBocmFzZUVuY3J5cHRpb25LZXksXG4gICAgfSk7XG4gICAgcmV0dXJuIG1uZW1vbmljLnBocmFzZSA9PT0gdmFsdWU7XG4gIH1cblxuICBhc3luYyBnZXRQcml2YXRlS2V5KHtcbiAgICBwYXJhbXM6IHsgYWRkcmVzcyB9LFxuICAgIGNvbnRleHQsXG4gIH06IFdhbGxldE1ldGhvZFBhcmFtczx7IGFkZHJlc3M6IHN0cmluZyB9Pikge1xuICAgIHRoaXMudmVyaWZ5SW50ZXJuYWxPcmlnaW4oY29udGV4dCk7XG4gICAgdGhpcy5lbnN1cmVSZWNvcmQodGhpcy5yZWNvcmQpO1xuICAgIGlmICghdGhpcy5zZWVkUGhyYXNlRW5jcnlwdGlvbktleSkge1xuICAgICAgdGhyb3cgbmV3IFNlc3Npb25FeHBpcmVkKCk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBNb2RlbC5nZXRQcml2YXRlS2V5KHRoaXMucmVjb3JkLCB7IGFkZHJlc3MgfSk7XG4gIH1cblxuICBhc3luYyB2ZXJpZnlQcml2YXRlS2V5KHtcbiAgICBwYXJhbXM6IHsgYWRkcmVzcywgdmFsdWUgfSxcbiAgICBjb250ZXh0LFxuICB9OiBXYWxsZXRNZXRob2RQYXJhbXM8eyBhZGRyZXNzOiBzdHJpbmc7IHZhbHVlOiBzdHJpbmcgfT4pIHtcbiAgICB0aGlzLnZlcmlmeUludGVybmFsT3JpZ2luKGNvbnRleHQpO1xuICAgIHRoaXMuZW5zdXJlUmVjb3JkKHRoaXMucmVjb3JkKTtcbiAgICBpZiAoIXRoaXMuc2VlZFBocmFzZUVuY3J5cHRpb25LZXkpIHtcbiAgICAgIHRocm93IG5ldyBTZXNzaW9uRXhwaXJlZCgpO1xuICAgIH1cbiAgICBjb25zdCBwcml2YXRlS2V5ID0gYXdhaXQgTW9kZWwuZ2V0UHJpdmF0ZUtleSh0aGlzLnJlY29yZCwgeyBhZGRyZXNzIH0pO1xuICAgIHJldHVybiBwcml2YXRlS2V5ID09PSB2YWx1ZTtcbiAgfVxuXG4gIGFzeW5jIHVpR2V0Q3VycmVudFdhbGxldCh7IGNvbnRleHQgfTogUHVibGljTWV0aG9kUGFyYW1zKSB7XG4gICAgdGhpcy52ZXJpZnlJbnRlcm5hbE9yaWdpbihjb250ZXh0KTtcbiAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBjdXJyZW50QWRkcmVzcyA9IHRoaXMucmVhZEN1cnJlbnRBZGRyZXNzKCk7XG4gICAgaWYgKHRoaXMucmVjb3JkICYmIGN1cnJlbnRBZGRyZXNzKSB7XG4gICAgICBjb25zdCB3YWxsZXQgPVxuICAgICAgICBNb2RlbC5nZXRXYWxsZXRCeUFkZHJlc3ModGhpcy5yZWNvcmQsIGN1cnJlbnRBZGRyZXNzKSB8fFxuICAgICAgICBNb2RlbC5nZXRGaXJzdFdhbGxldCh0aGlzLnJlY29yZCk7XG4gICAgICByZXR1cm4gd2FsbGV0ID8gbWFza1dhbGxldCh3YWxsZXQpIDogbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBhc3luYyB1aUdldFdhbGxldEJ5QWRkcmVzcyh7XG4gICAgY29udGV4dCxcbiAgICBwYXJhbXM6IHsgYWRkcmVzcyB9LFxuICB9OiBXYWxsZXRNZXRob2RQYXJhbXM8eyBhZGRyZXNzOiBzdHJpbmcgfT4pIHtcbiAgICB0aGlzLnZlcmlmeUludGVybmFsT3JpZ2luKGNvbnRleHQpO1xuICAgIGlmICghdGhpcy5yZWNvcmQpIHtcbiAgICAgIHRocm93IG5ldyBSZWNvcmROb3RGb3VuZCgpO1xuICAgIH1cbiAgICBpZiAoIWFkZHJlc3MpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSWxlZ2FsIGFyZ3VtZW50OiBhZGRyZXNzIGlzIHJlcXVpcmVkIGZvciB0aGlzIG1ldGhvZCcpO1xuICAgIH1cbiAgICBjb25zdCB3YWxsZXQgPSBNb2RlbC5nZXRXYWxsZXRCeUFkZHJlc3ModGhpcy5yZWNvcmQsIGFkZHJlc3MpO1xuICAgIHJldHVybiB3YWxsZXQgPyBtYXNrV2FsbGV0KHdhbGxldCkgOiBudWxsO1xuICB9XG5cbiAgYXN5bmMgc2F2ZVBlbmRpbmdXYWxsZXQoKSB7XG4gICAgaWYgKCF0aGlzLnBlbmRpbmdXYWxsZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHNhdmUgcGVuZGluZyB3YWxsZXQ6IHBlbmRpbmdXYWxsZXQgaXMgbnVsbCcpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuZW5jcnlwdGlvbktleSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc2F2ZSBwZW5kaW5nIHdhbGxldDogZW5jcnlwdGlvbktleSBpcyBudWxsJyk7XG4gICAgfVxuICAgIHRoaXMucmVjb3JkID0gTW9kZWwuY3JlYXRlT3JVcGRhdGVSZWNvcmQodGhpcy5yZWNvcmQsIHRoaXMucGVuZGluZ1dhbGxldCk7XG4gICAgdGhpcy5wZW5kaW5nV2FsbGV0ID0gbnVsbDtcbiAgICB0aGlzLnNlZWRQaHJhc2VFbmNyeXB0aW9uS2V5ID0gbnVsbDtcbiAgICB0aGlzLnVwZGF0ZVdhbGxldFN0b3JlKHRoaXMucmVjb3JkKTtcbiAgfVxuXG4gIGFzeW5jIGFjY2VwdE9yaWdpbihvcmlnaW46IHN0cmluZywgYWRkcmVzczogc3RyaW5nKSB7XG4gICAgdGhpcy5lbnN1cmVSZWNvcmQodGhpcy5yZWNvcmQpO1xuICAgIHRoaXMucmVjb3JkID0gTW9kZWwuYWRkUGVybWlzc2lvbih0aGlzLnJlY29yZCwgeyBhZGRyZXNzLCBvcmlnaW4gfSk7XG4gICAgdGhpcy51cGRhdGVXYWxsZXRTdG9yZSh0aGlzLnJlY29yZCk7XG4gICAgdGhpcy5lbWl0dGVyLmVtaXQoJ3Blcm1pc3Npb25zVXBkYXRlZCcpO1xuICB9XG5cbiAgYXN5bmMgcmVtb3ZlQWxsT3JpZ2luUGVybWlzc2lvbnMoeyBjb250ZXh0IH06IFB1YmxpY01ldGhvZFBhcmFtcykge1xuICAgIHRoaXMudmVyaWZ5SW50ZXJuYWxPcmlnaW4oY29udGV4dCk7XG4gICAgdGhpcy5lbnN1cmVSZWNvcmQodGhpcy5yZWNvcmQpO1xuICAgIHRoaXMucmVjb3JkID0gTW9kZWwucmVtb3ZlQWxsT3JpZ2luUGVybWlzc2lvbnModGhpcy5yZWNvcmQpO1xuICAgIHRoaXMudXBkYXRlV2FsbGV0U3RvcmUodGhpcy5yZWNvcmQpO1xuICAgIHRoaXMuZW1pdHRlci5lbWl0KCdwZXJtaXNzaW9uc1VwZGF0ZWQnKTtcbiAgfVxuXG4gIGFzeW5jIHJlbW92ZVBlcm1pc3Npb24oe1xuICAgIGNvbnRleHQsXG4gICAgcGFyYW1zOiB7IG9yaWdpbiwgYWRkcmVzcyB9LFxuICB9OiBXYWxsZXRNZXRob2RQYXJhbXM8eyBvcmlnaW46IHN0cmluZzsgYWRkcmVzcz86IHN0cmluZyB9Pikge1xuICAgIHRoaXMudmVyaWZ5SW50ZXJuYWxPcmlnaW4oY29udGV4dCk7XG4gICAgdGhpcy5lbnN1cmVSZWNvcmQodGhpcy5yZWNvcmQpO1xuICAgIHRoaXMucmVjb3JkID0gTW9kZWwucmVtb3ZlUGVybWlzc2lvbih0aGlzLnJlY29yZCwgeyBvcmlnaW4sIGFkZHJlc3MgfSk7XG4gICAgdGhpcy51cGRhdGVXYWxsZXRTdG9yZSh0aGlzLnJlY29yZCk7XG4gIH1cblxuICBhbGxvd2VkT3JpZ2luKFxuICAgIGNvbnRleHQ6IFBhcnRpYWw8Q2hhbm5lbENvbnRleHQ+IHwgdW5kZWZpbmVkLFxuICAgIGFkZHJlc3M6IHN0cmluZ1xuICApOiBjb250ZXh0IGlzIFBhcnRpYWxseVJlcXVpcmVkPENoYW5uZWxDb250ZXh0LCAnb3JpZ2luJz4ge1xuICAgIGlmICghY29udGV4dCB8fCAhY29udGV4dC5vcmlnaW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBtZXRob2QgcmVxdWlyZXMgY29udGV4dCcpO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5vcmlnaW4gPT09IElOVEVSTkFMX09SSUdJTikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICB0aGlzLnJlY29yZD8ucGVybWlzc2lvbnNbY29udGV4dC5vcmlnaW5dPy5hZGRyZXNzZXMuaW5jbHVkZXMoYWRkcmVzcykgfHxcbiAgICAgIGZhbHNlXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIGhhc1Blcm1pc3Npb24oe1xuICAgIHBhcmFtczogeyBhZGRyZXNzLCBvcmlnaW4gfSxcbiAgICBjb250ZXh0LFxuICB9OiBXYWxsZXRNZXRob2RQYXJhbXM8eyBhZGRyZXNzOiBzdHJpbmc7IG9yaWdpbjogc3RyaW5nIH0+KSB7XG4gICAgdGhpcy52ZXJpZnlJbnRlcm5hbE9yaWdpbihjb250ZXh0KTtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5yZWNvcmQ/LnBlcm1pc3Npb25zW29yaWdpbl0/LmFkZHJlc3Nlcy5pbmNsdWRlcyhhZGRyZXNzKSB8fCBmYWxzZVxuICAgICk7XG4gIH1cblxuICBhc3luYyBnZXRPcmlnaW5QZXJtaXNzaW9ucyh7IGNvbnRleHQgfTogUHVibGljTWV0aG9kUGFyYW1zKSB7XG4gICAgdGhpcy52ZXJpZnlJbnRlcm5hbE9yaWdpbihjb250ZXh0KTtcbiAgICB0aGlzLmVuc3VyZVJlY29yZCh0aGlzLnJlY29yZCk7XG4gICAgcmV0dXJuIHRoaXMucmVjb3JkLnBlcm1pc3Npb25zO1xuICB9XG5cbiAgYXN5bmMgc2V0Q3VycmVudEFkZHJlc3Moe1xuICAgIHBhcmFtczogeyBhZGRyZXNzIH0sXG4gICAgY29udGV4dCxcbiAgfTogV2FsbGV0TWV0aG9kUGFyYW1zPHsgYWRkcmVzczogc3RyaW5nIH0+KSB7XG4gICAgdGhpcy52ZXJpZnlJbnRlcm5hbE9yaWdpbihjb250ZXh0KTtcbiAgICB0aGlzLmVuc3VyZVJlY29yZCh0aGlzLnJlY29yZCk7XG4gICAgdGhpcy5yZWNvcmQgPSBNb2RlbC5zZXRDdXJyZW50QWRkcmVzcyh0aGlzLnJlY29yZCwgeyBhZGRyZXNzIH0pO1xuICAgIHRoaXMudXBkYXRlV2FsbGV0U3RvcmUodGhpcy5yZWNvcmQpO1xuXG4gICAgY29uc3QgeyBjdXJyZW50QWRkcmVzcyB9ID0gdGhpcy5yZWNvcmQud2FsbGV0TWFuYWdlcjtcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdChcbiAgICAgICdjdXJyZW50QWRkcmVzc0NoYW5nZScsXG4gICAgICBbY3VycmVudEFkZHJlc3NdLmZpbHRlcihpc1RydXRoeSlcbiAgICApO1xuICB9XG5cbiAgcmVhZEN1cnJlbnRBZGRyZXNzKCkge1xuICAgIHJldHVybiB0aGlzLnJlY29yZD8ud2FsbGV0TWFuYWdlci5jdXJyZW50QWRkcmVzcyB8fCBudWxsO1xuICB9XG5cbiAgZW5zdXJlQ3VycmVudEFkZHJlc3MoKTogc3RyaW5nIHtcbiAgICBjb25zdCBjdXJyZW50QWRkcmVzcyA9IHRoaXMucmVhZEN1cnJlbnRBZGRyZXNzKCk7XG4gICAgaWYgKCFjdXJyZW50QWRkcmVzcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdXYWxsZXQgaXMgbm90IGluaXRpYWxpemVkJyk7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50QWRkcmVzcztcbiAgfVxuXG4gIHByaXZhdGUgZW5zdXJlUmVjb3JkKFxuICAgIHJlY29yZDogV2FsbGV0UmVjb3JkIHwgbnVsbFxuICApOiBhc3NlcnRzIHJlY29yZCBpcyBXYWxsZXRSZWNvcmQge1xuICAgIGlmICghcmVjb3JkKSB7XG4gICAgICB0aHJvdyBuZXcgUmVjb3JkTm90Rm91bmQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHZlcmlmeUludGVybmFsT3JpZ2luKFxuICAgIGNvbnRleHQ6IFBhcnRpYWw8Q2hhbm5lbENvbnRleHQgfCBQcml2YXRlQ2hhbm5lbENvbnRleHQ+IHwgdW5kZWZpbmVkXG4gICk6IGFzc2VydHMgY29udGV4dCBpcyBQYXJ0aWFsbHlSZXF1aXJlZDxcbiAgICBDaGFubmVsQ29udGV4dCB8IFByaXZhdGVDaGFubmVsQ29udGV4dCxcbiAgICAnb3JpZ2luJ1xuICA+IHtcbiAgICBpZiAoXG4gICAgICBjb250ZXh0Py5vcmlnaW4gIT09IElOVEVSTkFMX09SSUdJTiAmJlxuICAgICAgY29udGV4dD8ub3JpZ2luICE9PSBJTlRFUk5BTF9PUklHSU5fU1lNQk9MXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgT3JpZ2luTm90QWxsb3dlZCgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZW5zdXJlU3RyaW5nT3JpZ2luKFxuICAgIGNvbnRleHQ6IFBhcnRpYWw8Q2hhbm5lbENvbnRleHQgfCBQcml2YXRlQ2hhbm5lbENvbnRleHQ+IHwgdW5kZWZpbmVkXG4gICk6IGFzc2VydHMgY29udGV4dCBpcyBQYXJ0aWFsbHlSZXF1aXJlZDxDaGFubmVsQ29udGV4dCwgJ29yaWdpbic+IHtcbiAgICB0aGlzLnZlcmlmeUludGVybmFsT3JpZ2luKGNvbnRleHQpO1xuICAgIGlmICh0eXBlb2YgY29udGV4dC5vcmlnaW4gIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ09yaWdpbiBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0Q3VycmVudEFkZHJlc3MoeyBjb250ZXh0IH06IFdhbGxldE1ldGhvZFBhcmFtcykge1xuICAgIHRoaXMudmVyaWZ5SW50ZXJuYWxPcmlnaW4oY29udGV4dCk7XG4gICAgcmV0dXJuIHRoaXMucmVhZEN1cnJlbnRBZGRyZXNzKCk7XG4gIH1cblxuICBhc3luYyB1aUdldFdhbGxldEdyb3Vwcyh7IGNvbnRleHQgfTogV2FsbGV0TWV0aG9kUGFyYW1zKSB7XG4gICAgdGhpcy52ZXJpZnlJbnRlcm5hbE9yaWdpbihjb250ZXh0KTtcbiAgICBjb25zdCBncm91cHMgPSB0aGlzLnJlY29yZD8ud2FsbGV0TWFuYWdlci5ncm91cHM7XG4gICAgcmV0dXJuIGdyb3VwcyA/IG1hc2tXYWxsZXRHcm91cHMoZ3JvdXBzKSA6IG51bGw7XG4gIH1cblxuICBhc3luYyB1aUdldFdhbGxldEdyb3VwKHtcbiAgICBwYXJhbXM6IHsgZ3JvdXBJZCB9LFxuICAgIGNvbnRleHQsXG4gIH06IFdhbGxldE1ldGhvZFBhcmFtczx7IGdyb3VwSWQ6IHN0cmluZyB9Pikge1xuICAgIHRoaXMudmVyaWZ5SW50ZXJuYWxPcmlnaW4oY29udGV4dCk7XG4gICAgY29uc3QgZ3JvdXAgPSB0aGlzLnJlY29yZD8ud2FsbGV0TWFuYWdlci5ncm91cHMuZmluZChcbiAgICAgIChncm91cCkgPT4gZ3JvdXAuaWQgPT09IGdyb3VwSWRcbiAgICApO1xuICAgIHJldHVybiBncm91cCA/IG1hc2tXYWxsZXRHcm91cChncm91cCkgOiBudWxsO1xuICB9XG5cbiAgYXN5bmMgcmVtb3ZlV2FsbGV0R3JvdXAoe1xuICAgIHBhcmFtczogeyBncm91cElkIH0sXG4gICAgY29udGV4dCxcbiAgfTogV2FsbGV0TWV0aG9kUGFyYW1zPHsgZ3JvdXBJZDogc3RyaW5nIH0+KSB7XG4gICAgdGhpcy52ZXJpZnlJbnRlcm5hbE9yaWdpbihjb250ZXh0KTtcbiAgICBpZiAoIXRoaXMucmVjb3JkKSB7XG4gICAgICB0aHJvdyBuZXcgUmVjb3JkTm90Rm91bmQoKTtcbiAgICB9XG4gICAgdGhpcy5yZWNvcmQgPSBNb2RlbC5yZW1vdmVXYWxsZXRHcm91cCh0aGlzLnJlY29yZCwgeyBncm91cElkIH0pO1xuICAgIHRoaXMudXBkYXRlV2FsbGV0U3RvcmUodGhpcy5yZWNvcmQpO1xuICB9XG5cbiAgYXN5bmMgcmVuYW1lV2FsbGV0R3JvdXAoe1xuICAgIHBhcmFtczogeyBncm91cElkLCBuYW1lIH0sXG4gICAgY29udGV4dCxcbiAgfTogV2FsbGV0TWV0aG9kUGFyYW1zPHsgZ3JvdXBJZDogc3RyaW5nOyBuYW1lOiBzdHJpbmcgfT4pIHtcbiAgICB0aGlzLnZlcmlmeUludGVybmFsT3JpZ2luKGNvbnRleHQpO1xuICAgIGlmICghdGhpcy5yZWNvcmQpIHtcbiAgICAgIHRocm93IG5ldyBSZWNvcmROb3RGb3VuZCgpO1xuICAgIH1cbiAgICB0aGlzLnJlY29yZCA9IE1vZGVsLnJlbmFtZVdhbGxldEdyb3VwKHRoaXMucmVjb3JkLCB7IGdyb3VwSWQsIG5hbWUgfSk7XG4gICAgdGhpcy51cGRhdGVXYWxsZXRTdG9yZSh0aGlzLnJlY29yZCk7XG4gIH1cblxuICBhc3luYyByZW5hbWVBZGRyZXNzKHtcbiAgICBwYXJhbXM6IHsgYWRkcmVzcywgbmFtZSB9LFxuICAgIGNvbnRleHQsXG4gIH06IFdhbGxldE1ldGhvZFBhcmFtczx7IGFkZHJlc3M6IHN0cmluZzsgbmFtZTogc3RyaW5nIH0+KSB7XG4gICAgdGhpcy52ZXJpZnlJbnRlcm5hbE9yaWdpbihjb250ZXh0KTtcbiAgICBpZiAoIXRoaXMucmVjb3JkKSB7XG4gICAgICB0aHJvdyBuZXcgUmVjb3JkTm90Rm91bmQoKTtcbiAgICB9XG4gICAgdGhpcy5yZWNvcmQgPSBNb2RlbC5yZW5hbWVBZGRyZXNzKHRoaXMucmVjb3JkLCB7IGFkZHJlc3MsIG5hbWUgfSk7XG4gICAgdGhpcy51cGRhdGVXYWxsZXRTdG9yZSh0aGlzLnJlY29yZCk7XG4gIH1cblxuICBhc3luYyByZW1vdmVBZGRyZXNzKHtcbiAgICBwYXJhbXM6IHsgYWRkcmVzcyB9LFxuICAgIGNvbnRleHQsXG4gIH06IFdhbGxldE1ldGhvZFBhcmFtczx7IGFkZHJlc3M6IHN0cmluZyB9Pikge1xuICAgIHRoaXMudmVyaWZ5SW50ZXJuYWxPcmlnaW4oY29udGV4dCk7XG4gICAgdGhpcy5lbnN1cmVSZWNvcmQodGhpcy5yZWNvcmQpO1xuICAgIHRoaXMucmVjb3JkID0gTW9kZWwucmVtb3ZlQWRkcmVzcyh0aGlzLnJlY29yZCwgeyBhZGRyZXNzIH0pO1xuICAgIHRoaXMudXBkYXRlV2FsbGV0U3RvcmUodGhpcy5yZWNvcmQpO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlTGFzdEJhY2tlZFVwKHtcbiAgICBwYXJhbXM6IHsgZ3JvdXBJZCB9LFxuICAgIGNvbnRleHQsXG4gIH06IFdhbGxldE1ldGhvZFBhcmFtczx7IGdyb3VwSWQ6IHN0cmluZyB9Pikge1xuICAgIHRoaXMudmVyaWZ5SW50ZXJuYWxPcmlnaW4oY29udGV4dCk7XG4gICAgdGhpcy5lbnN1cmVSZWNvcmQodGhpcy5yZWNvcmQpO1xuXG4gICAgaWYgKCFncm91cElkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgcHJvdmlkZSBncm91cElkJyk7XG4gICAgfVxuICAgIHRoaXMucmVjb3JkID0gTW9kZWwudXBkYXRlTGFzdEJhY2tlZFVwKHRoaXMucmVjb3JkLCB7XG4gICAgICBncm91cElkLFxuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgIH0pO1xuICAgIHRoaXMudXBkYXRlV2FsbGV0U3RvcmUodGhpcy5yZWNvcmQpO1xuICB9XG5cbiAgYXN5bmMgZ2V0Tm9CYWNrdXBDb3VudCh7IGNvbnRleHQgfTogV2FsbGV0TWV0aG9kUGFyYW1zKSB7XG4gICAgdGhpcy52ZXJpZnlJbnRlcm5hbE9yaWdpbihjb250ZXh0KTtcbiAgICB0aGlzLmVuc3VyZVJlY29yZCh0aGlzLnJlY29yZCk7XG4gICAgcmV0dXJuIHRoaXMucmVjb3JkLndhbGxldE1hbmFnZXIuZ3JvdXBzXG4gICAgICAuZmlsdGVyKChncm91cCkgPT4gZ3JvdXAud2FsbGV0Q29udGFpbmVyLnNlZWRUeXBlID09PSBTZWVkVHlwZS5tbmVtb25pYylcbiAgICAgIC5maWx0ZXIoKGdyb3VwKSA9PiBncm91cC5sYXN0QmFja2VkVXAgPT0gbnVsbCkubGVuZ3RoO1xuICB9XG5cbiAgYXN5bmMgc2V0UHJlZmVyZW5jZSh7XG4gICAgY29udGV4dCxcbiAgICBwYXJhbXM6IHsgcHJlZmVyZW5jZXMgfSxcbiAgfTogV2FsbGV0TWV0aG9kUGFyYW1zPHtcbiAgICBwcmVmZXJlbmNlczogUGFydGlhbDxXYWxsZXRSZWNvcmRbJ3ByZWZlcmVuY2VzJ10+O1xuICB9Pikge1xuICAgIHRoaXMudmVyaWZ5SW50ZXJuYWxPcmlnaW4oY29udGV4dCk7XG4gICAgdGhpcy5lbnN1cmVSZWNvcmQodGhpcy5yZWNvcmQpO1xuICAgIHRoaXMucmVjb3JkID0gTW9kZWwuc2V0UHJlZmVyZW5jZSh0aGlzLnJlY29yZCwgeyBwcmVmZXJlbmNlcyB9KTtcbiAgICB0aGlzLnVwZGF0ZVdhbGxldFN0b3JlKHRoaXMucmVjb3JkKTtcbiAgfVxuXG4gIGFzeW5jIGdldFByZWZlcmVuY2VzKHtcbiAgICBjb250ZXh0LFxuICB9OiBXYWxsZXRNZXRob2RQYXJhbXMpOiBQcm9taXNlPFJldHVyblR5cGU8dHlwZW9mIE1vZGVsLmdldFByZWZlcmVuY2VzPj4ge1xuICAgIHRoaXMudmVyaWZ5SW50ZXJuYWxPcmlnaW4oY29udGV4dCk7XG4gICAgaWYgKCF0aGlzLnJlY29yZCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gTW9kZWwuZ2V0UHJlZmVyZW5jZXModGhpcy5yZWNvcmQpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHdhbGxldF9zZXRXYWxsZXROYW1lRmxhZyh7XG4gICAgY29udGV4dCxcbiAgICBwYXJhbXM6IHsgZmxhZywgY2hlY2tlZCB9LFxuICB9OiBXYWxsZXRNZXRob2RQYXJhbXM8eyBmbGFnOiBXYWxsZXROYW1lRmxhZzsgY2hlY2tlZDogYm9vbGVhbiB9Pikge1xuICAgIHRoaXMudmVyaWZ5SW50ZXJuYWxPcmlnaW4oY29udGV4dCk7XG4gICAgdGhpcy5lbnN1cmVSZWNvcmQodGhpcy5yZWNvcmQpO1xuICAgIGlmIChjaGVja2VkKSB7XG4gICAgICB0aGlzLnJlY29yZCA9IE1vZGVsLnNldFdhbGxldE5hbWVGbGFnKHRoaXMucmVjb3JkLCB7IGZsYWcgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVjb3JkID0gTW9kZWwucmVtb3ZlV2FsbGV0TmFtZUZsYWcodGhpcy5yZWNvcmQsIHsgZmxhZyB9KTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVXYWxsZXRTdG9yZSh0aGlzLnJlY29yZCk7XG4gIH1cblxuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgYXN5bmMgc3dpdGNoQ2hhaW4oe1xuICAgIHBhcmFtczogX2NoYWluU3RyLFxuICAgIGNvbnRleHQsXG4gIH06IFdhbGxldE1ldGhvZFBhcmFtczxzdHJpbmc+KSB7XG4gICAgdGhpcy52ZXJpZnlJbnRlcm5hbE9yaWdpbihjb250ZXh0KTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3N3aXRjaENoYWluIGlzIGRlcHJlY2F0ZWQnKTtcbiAgfVxuXG4gIGFzeW5jIHN3aXRjaENoYWluRm9yT3JpZ2luKHtcbiAgICBwYXJhbXM6IHsgY2hhaW4sIG9yaWdpbiB9LFxuICAgIGNvbnRleHQsXG4gIH06IFdhbGxldE1ldGhvZFBhcmFtczx7IGNoYWluOiBzdHJpbmc7IG9yaWdpbjogc3RyaW5nIH0+KSB7XG4gICAgdGhpcy52ZXJpZnlJbnRlcm5hbE9yaWdpbihjb250ZXh0KTtcbiAgICB0aGlzLmVuc3VyZVJlY29yZCh0aGlzLnJlY29yZCk7XG4gICAgdGhpcy5zZXRDaGFpbkZvck9yaWdpbihjcmVhdGVDaGFpbihjaGFpbiksIG9yaWdpbik7XG4gIH1cblxuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgZ2V0Q2hhaW5JZCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnV2FsbGV0LmdldENoYWluSWQgaXMgZGVwcmVjYXRlZC4gVXNlIFdhbGxldC5nZXRDaGFpbklkRm9yT3JpZ2luJ1xuICAgICk7XG4gIH1cblxuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgYXN5bmMgcmVxdWVzdENoYWluSWQoeyBjb250ZXh0OiBfY29udGV4dCB9OiBQdWJsaWNNZXRob2RQYXJhbXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlcXVlc3RDaGFpbklkIGlzIGRlcHJlY2F0ZWQnKTtcbiAgfVxuXG4gIGFzeW5jIGdldENoYWluSWRGb3JPcmlnaW4oeyBvcmlnaW4gfTogeyBvcmlnaW46IHN0cmluZyB9KSB7XG4gICAgaWYgKCF0aGlzLnJlY29yZCkge1xuICAgICAgcmV0dXJuICcweDEnO1xuICAgIH1cbiAgICBjb25zdCBjaGFpbiA9IE1vZGVsLmdldENoYWluRm9yT3JpZ2luKHRoaXMucmVjb3JkLCB7IG9yaWdpbiB9KTtcbiAgICBjb25zdCBuZXR3b3JrcyA9IGF3YWl0IG5ldHdvcmtzU3RvcmUubG9hZCgpO1xuICAgIHJldHVybiBuZXR3b3Jrcy5nZXRDaGFpbklkKGNoYWluKTtcbiAgfVxuXG4gIGFzeW5jIHJlcXVlc3RDaGFpbkZvck9yaWdpbih7XG4gICAgcGFyYW1zOiB7IG9yaWdpbiB9LFxuICAgIGNvbnRleHQsXG4gIH06IFdhbGxldE1ldGhvZFBhcmFtczx7IG9yaWdpbjogc3RyaW5nIH0+KSB7XG4gICAgdGhpcy52ZXJpZnlJbnRlcm5hbE9yaWdpbihjb250ZXh0KTtcbiAgICB0aGlzLmVuc3VyZVJlY29yZCh0aGlzLnJlY29yZCk7XG4gICAgY29uc3QgY2hhaW4gPSBNb2RlbC5nZXRDaGFpbkZvck9yaWdpbih0aGlzLnJlY29yZCwgeyBvcmlnaW4gfSk7XG4gICAgcmV0dXJuIGNoYWluLnRvU3RyaW5nKCk7XG4gIH1cblxuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgc2V0Q2hhaW5JZChfY2hhaW5JZDogc3RyaW5nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRDaGFpbklkIGlzIGRlcHJlY2F0ZWQuIFVzZSBzZXRDaGFpbkZvck9yaWdpbiBpbnN0ZWFkJyk7XG4gIH1cblxuICBzZXRDaGFpbkZvck9yaWdpbihjaGFpbjogQ2hhaW4sIG9yaWdpbjogc3RyaW5nKSB7XG4gICAgdGhpcy5lbnN1cmVSZWNvcmQodGhpcy5yZWNvcmQpO1xuICAgIHRoaXMucmVjb3JkID0gTW9kZWwuc2V0Q2hhaW5Gb3JPcmlnaW4odGhpcy5yZWNvcmQsIHsgY2hhaW4sIG9yaWdpbiB9KTtcbiAgICB0aGlzLnVwZGF0ZVdhbGxldFN0b3JlKHRoaXMucmVjb3JkKTtcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnY2hhaW5DaGFuZ2VkJywgY2hhaW4sIG9yaWdpbik7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldFByb3ZpZGVyKGNoYWluSWQ6IHN0cmluZykge1xuICAgIGNvbnN0IG5ldHdvcmtzID0gYXdhaXQgbmV0d29ya3NTdG9yZS5sb2FkKCk7XG4gICAgY29uc3Qgbm9kZVVybCA9IG5ldHdvcmtzLmdldFJwY1VybEludGVybmFsKG5ldHdvcmtzLmdldENoYWluQnlJZChjaGFpbklkKSk7XG4gICAgcmV0dXJuIG5ldyBldGhlcnMucHJvdmlkZXJzLkpzb25ScGNQcm92aWRlcihub2RlVXJsKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0U2lnbmVyKGNoYWluSWQ6IHN0cmluZykge1xuICAgIGNvbnN0IGN1cnJlbnRBZGRyZXNzID0gdGhpcy5yZWFkQ3VycmVudEFkZHJlc3MoKTtcbiAgICBpZiAoIXRoaXMucmVjb3JkKSB7XG4gICAgICB0aHJvdyBuZXcgUmVjb3JkTm90Rm91bmQoKTtcbiAgICB9XG4gICAgY29uc3QgY3VycmVudFdhbGxldCA9IGN1cnJlbnRBZGRyZXNzXG4gICAgICA/IE1vZGVsLmdldFdhbGxldEJ5QWRkcmVzcyh0aGlzLnJlY29yZCwgY3VycmVudEFkZHJlc3MpXG4gICAgICA6IG51bGw7XG4gICAgaWYgKCFjdXJyZW50V2FsbGV0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dhbGxldCBpcyBub3QgaW5pdGlhbGl6ZWQnKTtcbiAgICB9XG5cbiAgICBjb25zdCBqc29uUnBjUHJvdmlkZXIgPSBhd2FpdCB0aGlzLmdldFByb3ZpZGVyKGNoYWluSWQpO1xuICAgIGNvbnN0IHdhbGxldCA9IHRvRXRoZXJzV2FsbGV0KGN1cnJlbnRXYWxsZXQpO1xuICAgIHJldHVybiB3YWxsZXQuY29ubmVjdChqc29uUnBjUHJvdmlkZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kVHJhbnNhY3Rpb24oXG4gICAgaW5jb21pbmdUcmFuc2FjdGlvbjogSW5jb21pbmdUcmFuc2FjdGlvbixcbiAgICB7XG4gICAgICBjb250ZXh0LFxuICAgICAgdHJhbnNhY3Rpb25PcmlnaW4sXG4gICAgfToge1xuICAgICAgY29udGV4dDogUGFydGlhbDxDaGFubmVsQ29udGV4dD4gfCB1bmRlZmluZWQ7XG4gICAgICB0cmFuc2FjdGlvbk9yaWdpbjogc3RyaW5nO1xuICAgIH1cbiAgKTogUHJvbWlzZTxldGhlcnMucHJvdmlkZXJzLlRyYW5zYWN0aW9uUmVzcG9uc2U+IHtcbiAgICB0aGlzLnZlcmlmeUludGVybmFsT3JpZ2luKGNvbnRleHQpO1xuICAgIGlmICghaW5jb21pbmdUcmFuc2FjdGlvbi5mcm9tKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdcImZyb21cIiBmaWVsZCBpcyBtaXNzaW5nIGZyb20gdGhlIHRyYW5zYWN0aW9uIG9iamVjdC4gU2VuZCBmcm9tIGN1cnJlbnQgYWRkcmVzcz8nXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBjdXJyZW50QWRkcmVzcyA9IHRoaXMuZW5zdXJlQ3VycmVudEFkZHJlc3MoKTtcbiAgICBpZiAoXG4gICAgICBub3JtYWxpemVBZGRyZXNzKGluY29taW5nVHJhbnNhY3Rpb24uZnJvbSkgIT09XG4gICAgICBub3JtYWxpemVBZGRyZXNzKGN1cnJlbnRBZGRyZXNzKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAvLyBUT0RPPy4uLlxuICAgICAgICAndHJhbnNhY3Rpb24gXCJmcm9tXCIgZmllbGQgaXMgZGlmZmVyZW50IGZyb20gY3VycmVudGx5IHNlbGVjdGVkIGFkZHJlc3MnXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBjaGFpbklkID0gYXdhaXQgdGhpcy5nZXRDaGFpbklkRm9yT3JpZ2luKHtcbiAgICAgIG9yaWdpbjogdHJhbnNhY3Rpb25PcmlnaW4sXG4gICAgfSk7XG4gICAgY29uc3QgdGFyZ2V0Q2hhaW5JZCA9IGdldFRyYW5zYWN0aW9uQ2hhaW5JZChpbmNvbWluZ1RyYW5zYWN0aW9uKTtcbiAgICBpZiAodGFyZ2V0Q2hhaW5JZCAmJiBjaGFpbklkICE9PSB0YXJnZXRDaGFpbklkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdjaGFpbklkIGluIHRyYW5zYWN0aW9uIG9iamVjdCBpcyBkaWZmZXJlbnQgZnJvbSBjdXJyZW50IGNoYWluSWQnXG4gICAgICApO1xuICAgICAgLy8gYXdhaXQgdGhpcy53YWxsZXRfc3dpdGNoRXRoZXJldW1DaGFpbih7XG4gICAgICAvLyAgIHBhcmFtczogW3sgY2hhaW5JZDogdGFyZ2V0Q2hhaW5JZCB9XSxcbiAgICAgIC8vICAgY29udGV4dCxcbiAgICAgIC8vIH0pO1xuICAgICAgLy8gcmV0dXJuIHRoaXMuc2VuZFRyYW5zYWN0aW9uKGluY29taW5nVHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH0gZWxzZSBpZiAodGFyZ2V0Q2hhaW5JZCA9PSBudWxsKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKCdjaGFpbklkIGZpZWxkIGlzIG1pc3NpbmcgZnJvbSB0cmFuc2FjdGlvbiBvYmplY3QnKTtcbiAgICAgIGluY29taW5nVHJhbnNhY3Rpb24uY2hhaW5JZCA9IGNoYWluSWQ7XG4gICAgfVxuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gcHJlcGFyZVRyYW5zYWN0aW9uKGluY29taW5nVHJhbnNhY3Rpb24pO1xuICAgIGlmICghaGFzR2FzUHJpY2UodHJhbnNhY3Rpb24pKSB7XG4gICAgICBhd2FpdCBmZXRjaEFuZEFzc2lnbkdhc1ByaWNlKHRyYW5zYWN0aW9uKTtcbiAgICB9XG5cbiAgICBjb25zdCBzaWduZXIgPSBhd2FpdCB0aGlzLmdldFNpZ25lcihjaGFpbklkKTtcbiAgICBjb25zdCB0cmFuc2FjdGlvblJlc3BvbnNlID0gYXdhaXQgc2lnbmVyLnNlbmRUcmFuc2FjdGlvbih7XG4gICAgICAuLi50cmFuc2FjdGlvbixcbiAgICAgIHR5cGU6IHRyYW5zYWN0aW9uLnR5cGUgfHwgdW5kZWZpbmVkLFxuICAgIH0pO1xuICAgIGNvbnN0IHNhZmVUeCA9IHJlbW92ZVNpZ25hdHVyZSh0cmFuc2FjdGlvblJlc3BvbnNlKTtcbiAgICBlbWl0dGVyLmVtaXQoJ3BlbmRpbmdUcmFuc2FjdGlvbkNyZWF0ZWQnLCBzYWZlVHgpO1xuICAgIHJldHVybiBzYWZlVHg7XG4gIH1cblxuICBhc3luYyBzaWduQW5kU2VuZFRyYW5zYWN0aW9uKHtcbiAgICBwYXJhbXMsXG4gICAgY29udGV4dCxcbiAgfTogV2FsbGV0TWV0aG9kUGFyYW1zPFtJbmNvbWluZ1RyYW5zYWN0aW9uLCB7IG9yaWdpbjogc3RyaW5nIH1dPikge1xuICAgIHRoaXMudmVyaWZ5SW50ZXJuYWxPcmlnaW4oY29udGV4dCk7XG4gICAgdGhpcy5lbnN1cmVTdHJpbmdPcmlnaW4oY29udGV4dCk7XG4gICAgY29uc3QgW3RyYW5zYWN0aW9uLCB7IG9yaWdpbiB9XSA9IHBhcmFtcztcbiAgICBpZiAoIXRyYW5zYWN0aW9uKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZFBhcmFtcygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zZW5kVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24sIHtcbiAgICAgIGNvbnRleHQsXG4gICAgICB0cmFuc2FjdGlvbk9yaWdpbjogb3JpZ2luLFxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgc2lnblR5cGVkRGF0YV92NCh7XG4gICAgcGFyYW1zOiB7IHR5cGVkRGF0YTogcmF3VHlwZWREYXRhIH0sXG4gICAgY29udGV4dCxcbiAgfTogV2FsbGV0TWV0aG9kUGFyYW1zPHsgdHlwZWREYXRhOiBUeXBlZERhdGEgfCBzdHJpbmcgfT4pIHtcbiAgICB0aGlzLnZlcmlmeUludGVybmFsT3JpZ2luKGNvbnRleHQpO1xuICAgIGlmICghcmF3VHlwZWREYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZFBhcmFtcygpO1xuICAgIH1cbiAgICBjb25zdCB7IGNoYWluSWQgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBzaWduZXIgPSBhd2FpdCB0aGlzLmdldFNpZ25lcihjaGFpbklkKTtcbiAgICBjb25zdCB0eXBlZERhdGEgPSBwcmVwYXJlVHlwZWREYXRhKHJhd1R5cGVkRGF0YSk7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgc2lnbmVyLl9zaWduVHlwZWREYXRhKFxuICAgICAgdHlwZWREYXRhLmRvbWFpbixcbiAgICAgIHR5cGVkRGF0YS50eXBlcyxcbiAgICAgIHR5cGVkRGF0YS5tZXNzYWdlXG4gICAgKTtcbiAgICByZXR1cm4gc2lnbmF0dXJlO1xuICB9XG5cbiAgYXN5bmMgcGVyc29uYWxTaWduKHtcbiAgICBwYXJhbXM6IFttZXNzYWdlXSxcbiAgICBjb250ZXh0LFxuICB9OiBXYWxsZXRNZXRob2RQYXJhbXM8W3N0cmluZywgc3RyaW5nPywgc3RyaW5nP10+KSB7XG4gICAgdGhpcy52ZXJpZnlJbnRlcm5hbE9yaWdpbihjb250ZXh0KTtcbiAgICBpZiAobWVzc2FnZSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZFBhcmFtcygpO1xuICAgIH1cbiAgICBjb25zdCB7IGNoYWluSWQgfSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBzaWduZXIgPSBhd2FpdCB0aGlzLmdldFNpZ25lcihjaGFpbklkKTtcbiAgICBjb25zdCBtZXNzYWdlQXNVdGY4U3RyaW5nID0gdG9VdGY4U3RyaW5nKG1lc3NhZ2UpO1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHNpZ25lci5zaWduTWVzc2FnZShtZXNzYWdlQXNVdGY4U3RyaW5nKTtcbiAgICByZXR1cm4gc2lnbmF0dXJlO1xuICB9XG5cbiAgYXN5bmMgZ2V0UGVuZGluZ1RyYW5zYWN0aW9ucyh7IGNvbnRleHQgfTogUHVibGljTWV0aG9kUGFyYW1zKSB7XG4gICAgdGhpcy52ZXJpZnlJbnRlcm5hbE9yaWdpbihjb250ZXh0KTtcbiAgICByZXR1cm4gdGhpcy5yZWNvcmQ/LnRyYW5zYWN0aW9ucyB8fCBbXTtcbiAgfVxuXG4gIGFzeW5jIGxvZ291dCgpIHtcbiAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5jbGVhcigpO1xuICB9XG59XG5cbmludGVyZmFjZSBXZWIzV2FsbGV0UGVybWlzc2lvbiB7XG4gIC8qKlxuICAgKiBUaGlzIHNlZW1zIHRvIGJlIGEgbWV0aG9kIHRoYXQgZGlkbid0IGdldCBtdWNoIGFkb3B0aW9uLCBidXRcbiAgICogbWV0YW1hc2sgYW5kIHNvbWUgZGFwcHMgdXNlIGl0IGZvciBzb21lIHJlYXNvbjpcbiAgICogaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0yMjU1XG4gICAqL1xuICAvLyBUaGUgbmFtZSBvZiB0aGUgbWV0aG9kIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHBlcm1pc3Npb25cbiAgcGFyZW50Q2FwYWJpbGl0eTogc3RyaW5nO1xuXG4gIC8vIFRoZSBkYXRlIHRoZSBwZXJtaXNzaW9uIHdhcyBncmFudGVkLCBpbiBVTklYIGVwb2NoIHRpbWVcbiAgZGF0ZT86IG51bWJlcjtcbn1cblxuY2xhc3MgUHVibGljQ29udHJvbGxlciB7XG4gIHdhbGxldDogV2FsbGV0O1xuXG4gIGNvbnN0cnVjdG9yKHdhbGxldENvbnRyb2xsZXI6IFdhbGxldCkge1xuICAgIHRoaXMud2FsbGV0ID0gd2FsbGV0Q29udHJvbGxlcjtcbiAgfVxuXG4gIGFzeW5jIGV0aF9hY2NvdW50cyh7IGNvbnRleHQgfTogUHVibGljTWV0aG9kUGFyYW1zKSB7XG4gICAgY29uc3QgY3VycmVudEFkZHJlc3MgPSB0aGlzLndhbGxldC5yZWFkQ3VycmVudEFkZHJlc3MoKTtcbiAgICBpZiAoIWN1cnJlbnRBZGRyZXNzKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmICh0aGlzLndhbGxldC5hbGxvd2VkT3JpZ2luKGNvbnRleHQsIGN1cnJlbnRBZGRyZXNzKSkge1xuICAgICAgcmV0dXJuIFtjdXJyZW50QWRkcmVzc107XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBldGhfcmVxdWVzdEFjY291bnRzKHsgY29udGV4dCB9OiBQdWJsaWNNZXRob2RQYXJhbXMpIHtcbiAgICBjb25zdCBjdXJyZW50QWRkcmVzcyA9IHRoaXMud2FsbGV0LnJlYWRDdXJyZW50QWRkcmVzcygpO1xuICAgIGlmIChjdXJyZW50QWRkcmVzcyAmJiB0aGlzLndhbGxldC5hbGxvd2VkT3JpZ2luKGNvbnRleHQsIGN1cnJlbnRBZGRyZXNzKSkge1xuICAgICAgcmV0dXJuIFtjdXJyZW50QWRkcmVzc107XG4gICAgfVxuICAgIGlmICghY29udGV4dD8ub3JpZ2luKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgbWV0aG9kIHJlcXVpcmVzIG9yaWdpbicpO1xuICAgIH1cbiAgICAvLyBpZiAoIXRoaXMud2FsbGV0KSB7XG4gICAgLy8gICBjb25zb2xlLmxvZygnTXVzdCBjcmVhdGUgd2FsbGV0IGZpcnN0Jyk7XG4gICAgLy8gICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgY3JlYXRlIHdhbGxldCBmaXJzdCcpO1xuICAgIC8vIH1cbiAgICBjb25zdCB7IG9yaWdpbiB9ID0gY29udGV4dDtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbm90aWZpY2F0aW9uV2luZG93Lm9wZW4oe1xuICAgICAgICByb3V0ZTogJy9yZXF1ZXN0QWNjb3VudHMnLFxuICAgICAgICBzZWFyY2g6IGA/b3JpZ2luPSR7b3JpZ2lufWAsXG4gICAgICAgIG9uUmVzb2x2ZTogYXN5bmMgKHsgYWRkcmVzcyB9OiB7IGFkZHJlc3M6IHN0cmluZyB9KSA9PiB7XG4gICAgICAgICAgaWYgKCFhZGRyZXNzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbmZpcm1hdGlvbiByZXNvbHZlZCB3aXRoIGludmFsaWQgYXJndW1lbnRzJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRBZGRyZXNzID0gdGhpcy53YWxsZXQuZW5zdXJlQ3VycmVudEFkZHJlc3MoKTtcbiAgICAgICAgICBpZiAobm9ybWFsaXplQWRkcmVzcyhhZGRyZXNzKSAhPT0gbm9ybWFsaXplQWRkcmVzcyhjdXJyZW50QWRkcmVzcykpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMud2FsbGV0LnNldEN1cnJlbnRBZGRyZXNzKHtcbiAgICAgICAgICAgICAgcGFyYW1zOiB7IGFkZHJlc3MgfSxcbiAgICAgICAgICAgICAgY29udGV4dDogSU5URVJOQUxfU1lNQk9MX0NPTlRFWFQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy53YWxsZXQuYWNjZXB0T3JpZ2luKG9yaWdpbiwgYWRkcmVzcyk7XG4gICAgICAgICAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCB0aGlzLmV0aF9hY2NvdW50cyh7IGNvbnRleHQgfSk7XG4gICAgICAgICAgcmVzb2x2ZShhY2NvdW50cyk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRGlzbWlzczogKCkgPT4ge1xuICAgICAgICAgIHJlamVjdChuZXcgVXNlclJlamVjdGVkKCdVc2VyIFJlamVjdGVkIHRoZSBSZXF1ZXN0JykpO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBldGhfY2hhaW5JZCh7IGNvbnRleHQgfTogUHVibGljTWV0aG9kUGFyYW1zKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIGFuIGludGVyZXN0aW5nIGNhc2UuIFdlIGRvIG5vdCBjaGVjayBpZiBjb250ZXh0Lm9yaWdpbiBpcyBhbGxvd2VkXG4gICAgICogZm9yIGN1cnJlbnQgYWRkcmVzcyBhbmQgc2ltcGx5IHJldHVybiBzYXZlZCBjaGFpbklkIGZvciB0aGlzIG9yaWdpbi5cbiAgICAgKiBUaGlzIHNlZW1zIHRvIGJlIG9rYXkgYmVjYXVzZSBpZiB0aGUgb3JpZ2luIGhhcyBubyBwZXJtaXNzaW9ucyBhdCBhbGwsIHdlIHdpbGxcbiAgICAgKiBkZWZhdWx0IHRvIGV0aGVyZXVtIGFueXdheSwgYnV0IGlmIHRoZSBvcmlnaW4gaGFzIHBlcm1pc3Npb25zIGZvciBhbiBhZGRyZXNzIHdoaWNoXG4gICAgICogaXMgbm90IGN1cnJlbnQsIGl0IGRvZXNuJ3QgbG9vayBsaWtlIGEgcHJvYmxlbSB0byBrZWVwIHJldHVybmluZyBzYXZlZCBjaGFpbklkXG4gICAgICogZm9yIHRoaXMgb3JpZ2luLiBJbiBjYXNlIHRoZSBzYXZlZCBjaGFpbklkIGlzIG90aGVyIHRoYW4gZXRoZXJldW0sXG4gICAgICogdGhlIGRBUFAgd2lsbCBiZSBhYmxlIHRvIG1ha2UgYSBjb25jbHVzaW9uIHRoYXQgc29tZSBfb3RoZXJfIGFkZHJlc3MgaGFzIHNvbWUgcGVybWlzc2lvbnMsXG4gICAgICogYnV0IHNvIHdoYXQ/XG4gICAgICovXG4gICAgaWYgKCFjb250ZXh0IHx8ICFjb250ZXh0Lm9yaWdpbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHNlbmRlciBvcmlnaW4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMud2FsbGV0LmdldENoYWluSWRGb3JPcmlnaW4oeyBvcmlnaW46IGNvbnRleHQub3JpZ2luIH0pO1xuICB9XG5cbiAgYXN5bmMgbmV0X3ZlcnNpb24oeyBjb250ZXh0IH06IFB1YmxpY01ldGhvZFBhcmFtcykge1xuICAgIGNvbnN0IGNoYWluSWQgPSBhd2FpdCB0aGlzLmV0aF9jaGFpbklkKHsgY29udGV4dCB9KTtcbiAgICByZXR1cm4gU3RyaW5nKHBhcnNlSW50KGNoYWluSWQpKTtcbiAgfVxuXG4gIGFzeW5jIGV0aF9zZW5kVHJhbnNhY3Rpb24oe1xuICAgIHBhcmFtcyxcbiAgICBjb250ZXh0LFxuICB9OiBQdWJsaWNNZXRob2RQYXJhbXM8VW5zaWduZWRUcmFuc2FjdGlvbltdPikge1xuICAgIGNvbnN0IGN1cnJlbnRBZGRyZXNzID0gdGhpcy53YWxsZXQuZW5zdXJlQ3VycmVudEFkZHJlc3MoKTtcbiAgICAvLyBUT0RPOiBzaG91bGQgd2UgY2hlY2sgdHJhbnNhY3Rpb24uZnJvbSBpbnN0ZWFkIG9mIGN1cnJlbnRBZGRyZXNzP1xuICAgIGlmICghdGhpcy53YWxsZXQuYWxsb3dlZE9yaWdpbihjb250ZXh0LCBjdXJyZW50QWRkcmVzcykpIHtcbiAgICAgIHRocm93IG5ldyBPcmlnaW5Ob3RBbGxvd2VkKCk7XG4gICAgfVxuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gcGFyYW1zWzBdO1xuICAgIGlmICghdHJhbnNhY3Rpb24pIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkUGFyYW1zKCk7XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24od2luZG93LCB7IHRyYW5zYWN0aW9uVG9TZW5kOiB0cmFuc2FjdGlvbiB9KTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbm90aWZpY2F0aW9uV2luZG93Lm9wZW4oe1xuICAgICAgICByb3V0ZTogJy9zZW5kVHJhbnNhY3Rpb24nLFxuICAgICAgICBzZWFyY2g6IGA/JHtuZXcgVVJMU2VhcmNoUGFyYW1zKHtcbiAgICAgICAgICBvcmlnaW46IGNvbnRleHQub3JpZ2luLFxuICAgICAgICAgIHRyYW5zYWN0aW9uOiBKU09OLnN0cmluZ2lmeSh0cmFuc2FjdGlvbiksXG4gICAgICAgIH0pfWAsXG4gICAgICAgIG9uUmVzb2x2ZTogKGhhc2gpID0+IHtcbiAgICAgICAgICByZXNvbHZlKGhhc2gpO1xuICAgICAgICB9LFxuICAgICAgICBvbkRpc21pc3M6ICgpID0+IHtcbiAgICAgICAgICByZWplY3QobmV3IFVzZXJSZWplY3RlZFR4U2lnbmF0dXJlKCkpO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBldGhfc2lnblR5cGVkRGF0YV92NCh7XG4gICAgY29udGV4dCxcbiAgICBwYXJhbXM6IFthZGRyZXNzLCBkYXRhXSxcbiAgfTogUHVibGljTWV0aG9kUGFyYW1zPFtzdHJpbmcsIFR5cGVkRGF0YSB8IHN0cmluZ10+KSB7XG4gICAgY29uc3QgY3VycmVudEFkZHJlc3MgPSB0aGlzLndhbGxldC5lbnN1cmVDdXJyZW50QWRkcmVzcygpO1xuICAgIGlmICghdGhpcy53YWxsZXQuYWxsb3dlZE9yaWdpbihjb250ZXh0LCBjdXJyZW50QWRkcmVzcykpIHtcbiAgICAgIHRocm93IG5ldyBPcmlnaW5Ob3RBbGxvd2VkKCk7XG4gICAgfVxuICAgIGlmIChub3JtYWxpemVBZGRyZXNzKGFkZHJlc3MpICE9PSBub3JtYWxpemVBZGRyZXNzKGN1cnJlbnRBZGRyZXNzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAvLyBUT0RPPy4uLlxuICAgICAgICAnQWRkcmVzcyBwYXJhbWV0ZXIgaXMgZGlmZmVyZW50IGZyb20gY3VycmVudGx5IHNlbGVjdGVkIGFkZHJlc3MnXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBzdHJpbmdpZmllZERhdGEgPVxuICAgICAgdHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnID8gZGF0YSA6IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBub3RpZmljYXRpb25XaW5kb3cub3Blbih7XG4gICAgICAgIHJvdXRlOiAnL3NpZ25NZXNzYWdlJyxcbiAgICAgICAgc2VhcmNoOiBgPyR7bmV3IFVSTFNlYXJjaFBhcmFtcyh7XG4gICAgICAgICAgb3JpZ2luOiBjb250ZXh0Lm9yaWdpbixcbiAgICAgICAgICB0eXBlZERhdGE6IHN0cmluZ2lmaWVkRGF0YSxcbiAgICAgICAgICBtZXRob2Q6ICdldGhfc2lnblR5cGVkRGF0YV92NCcsXG4gICAgICAgIH0pfWAsXG4gICAgICAgIG9uUmVzb2x2ZTogKHNpZ25hdHVyZSkgPT4ge1xuICAgICAgICAgIHJlc29sdmUoc2lnbmF0dXJlKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25EaXNtaXNzOiAoKSA9PiB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBVc2VyUmVqZWN0ZWRUeFNpZ25hdHVyZSgpKTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZXRoX3NpZ25UeXBlZERhdGEoeyBjb250ZXh0OiBfY29udGV4dCB9OiBQdWJsaWNNZXRob2RQYXJhbXMpIHtcbiAgICB0aHJvdyBuZXcgTWV0aG9kTm90SW1wbGVtZW50ZWQoJ2V0aF9zaWduVHlwZWREYXRhOiBOb3QgSW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIGFzeW5jIGV0aF9zaWduKHsgY29udGV4dDogX2NvbnRleHQgfTogUHVibGljTWV0aG9kUGFyYW1zKSB7XG4gICAgdGhyb3cgbmV3IE1ldGhvZE5vdEltcGxlbWVudGVkKCdldGhfc2lnbjogTm90IEltcGxlbWVudGVkJyk7XG4gIH1cblxuICBhc3luYyBwZXJzb25hbF9zaWduKHtcbiAgICBwYXJhbXMsXG4gICAgY29udGV4dCxcbiAgfTogUHVibGljTWV0aG9kUGFyYW1zPFtzdHJpbmcsIHN0cmluZywgc3RyaW5nXT4pIHtcbiAgICBpZiAoIXBhcmFtcy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkUGFyYW1zKCk7XG4gICAgfVxuICAgIGNvbnN0IFttZXNzYWdlLCBhZGRyZXNzLCBfcGFzc3dvcmRdID0gcGFyYW1zO1xuICAgIGNvbnN0IGN1cnJlbnRBZGRyZXNzID0gdGhpcy53YWxsZXQuZW5zdXJlQ3VycmVudEFkZHJlc3MoKTtcbiAgICBpZiAoXG4gICAgICBhZGRyZXNzICYmXG4gICAgICBub3JtYWxpemVBZGRyZXNzKGFkZHJlc3MpICE9PSBub3JtYWxpemVBZGRyZXNzKGN1cnJlbnRBZGRyZXNzKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAvLyBUT0RPPy4uLlxuICAgICAgICAnQWRkcmVzcyBwYXJhbWV0ZXIgaXMgZGlmZmVyZW50IGZyb20gY3VycmVudGx5IHNlbGVjdGVkIGFkZHJlc3MnXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIXRoaXMud2FsbGV0LmFsbG93ZWRPcmlnaW4oY29udGV4dCwgY3VycmVudEFkZHJlc3MpKSB7XG4gICAgICB0aHJvdyBuZXcgT3JpZ2luTm90QWxsb3dlZCgpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbm90aWZpY2F0aW9uV2luZG93Lm9wZW4oe1xuICAgICAgICByb3V0ZTogJy9zaWduTWVzc2FnZScsXG4gICAgICAgIHNlYXJjaDogYD8ke25ldyBVUkxTZWFyY2hQYXJhbXMoe1xuICAgICAgICAgIG9yaWdpbjogY29udGV4dC5vcmlnaW4sXG4gICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICBtZXRob2Q6ICdwZXJzb25hbF9zaWduJyxcbiAgICAgICAgfSl9YCxcbiAgICAgICAgb25SZXNvbHZlOiAoc2lnbmF0dXJlKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShzaWduYXR1cmUpO1xuICAgICAgICB9LFxuICAgICAgICBvbkRpc21pc3M6ICgpID0+IHtcbiAgICAgICAgICByZWplY3QobmV3IFVzZXJSZWplY3RlZFR4U2lnbmF0dXJlKCkpO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyB3YWxsZXRfc3dpdGNoRXRoZXJldW1DaGFpbih7XG4gICAgcGFyYW1zLFxuICAgIGNvbnRleHQsXG4gIH06IFB1YmxpY01ldGhvZFBhcmFtczxbeyBjaGFpbklkOiBzdHJpbmcgfCBudW1iZXIgfV0+KTogUHJvbWlzZTxcbiAgICBudWxsIHwgb2JqZWN0XG4gID4ge1xuICAgIGNvbnN0IGN1cnJlbnRBZGRyZXNzID0gdGhpcy53YWxsZXQucmVhZEN1cnJlbnRBZGRyZXNzKCk7XG4gICAgaWYgKCFjdXJyZW50QWRkcmVzcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdXYWxsZXQgaXMgbm90IGluaXRpYWxpemVkJyk7XG4gICAgfVxuICAgIGlmICghdGhpcy53YWxsZXQuYWxsb3dlZE9yaWdpbihjb250ZXh0LCBjdXJyZW50QWRkcmVzcykpIHtcbiAgICAgIHRocm93IG5ldyBPcmlnaW5Ob3RBbGxvd2VkKCk7XG4gICAgfVxuICAgIGNvbnN0IHsgb3JpZ2luIH0gPSBjb250ZXh0O1xuICAgIGNvbnN0IHsgY2hhaW5JZDogY2hhaW5JZFBhcmFtZXRlciB9ID0gcGFyYW1zWzBdO1xuICAgIGNvbnN0IGNoYWluSWQgPSBldGhlcnMudXRpbHMuaGV4VmFsdWUoY2hhaW5JZFBhcmFtZXRlcik7XG4gICAgY29uc3QgY3VycmVudENoYWluSWRGb3JUaGlzT3JpZ2luID0gYXdhaXQgdGhpcy53YWxsZXQuZ2V0Q2hhaW5JZEZvck9yaWdpbih7XG4gICAgICBvcmlnaW4sXG4gICAgfSk7XG4gICAgaWYgKGNoYWluSWQgPT09IGN1cnJlbnRDaGFpbklkRm9yVGhpc09yaWdpbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IG5ldHdvcmtzID0gYXdhaXQgbmV0d29ya3NTdG9yZS5sb2FkKCk7XG4gICAgLy8gVE9ETzogaGFuZGxlIHVuc3VwcG9ydGVkIGNoYWluIGlkP1xuICAgIGNvbnN0IGNoYWluID0gbmV0d29ya3MuZ2V0Q2hhaW5CeUlkKGNoYWluSWQpO1xuICAgIC8vIFN3aXRjaCBpbW1lZGlhdGVseSBhbmQgcmV0dXJuIHN1Y2Nlc3NcbiAgICB0aGlzLndhbGxldC5zZXRDaGFpbkZvck9yaWdpbihjaGFpbiwgb3JpZ2luKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgICAvLyByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIC8vICAgbm90aWZpY2F0aW9uV2luZG93Lm9wZW4oe1xuICAgIC8vICAgICByb3V0ZTogJy9zd2l0Y2hFdGhlcmV1bUNoYWluJyxcbiAgICAvLyAgICAgc2VhcmNoOiBgP29yaWdpbj0ke29yaWdpbn0mY2hhaW5JZD0ke2NoYWluSWR9YCxcbiAgICAvLyAgICAgb25SZXNvbHZlOiAoKSA9PiB7XG4gICAgLy8gICAgICAgdGhpcy53YWxsZXQuc2V0Q2hhaW5JZChjaGFpbklkKTtcbiAgICAvLyAgICAgICByZXNvbHZlKG51bGwpO1xuICAgIC8vICAgICAgIHRoaXMud2FsbGV0LmVtaXR0ZXIuZW1pdCgnY2hhaW5DaGFuZ2VkJywgY2hhaW5JZCk7XG4gICAgLy8gICAgIH0sXG4gICAgLy8gICAgIG9uRGlzbWlzczogKCkgPT4ge1xuICAgIC8vICAgICAgIHJlamVjdChuZXcgVXNlclJlamVjdGVkKCdVc2VyIFJlamVjdGVkIHRoZSBSZXF1ZXN0JykpO1xuICAgIC8vICAgICB9LFxuICAgIC8vICAgfSk7XG4gICAgLy8gfSk7XG4gIH1cblxuICBhc3luYyB3YWxsZXRfZ2V0V2FsbGV0TmFtZUZsYWdzKHsgY29udGV4dDogX2NvbnRleHQgfTogUHVibGljTWV0aG9kUGFyYW1zKSB7XG4gICAgY29uc3QgcHJlZmVyZW5jZXMgPSBhd2FpdCB0aGlzLndhbGxldC5nZXRQcmVmZXJlbmNlcyh7XG4gICAgICAvKipcbiAgICAgICAqIE5PVEU6IHdlJ3JlIG5vdCBjaGVja2luZyBgY29udGV4dGAgcGFyYW0gaGVyZSBhbmQgdXNlXG4gICAgICAgKiBJTlRFUk5BTF9TWU1CT0xfQ09OVEVYVCwgYmVjYXVzZSBwcmVmZXJlbmNlcy53YWxsZXROYW1lRmxhZ3MgYXJlXG4gICAgICAgKiBzdXBwb3NlZCB0byB3b3JrIGV2ZW4gYmVmb3JlIHRoZSB1c2VyIGhhcyBnaXZlbiBwZXJtaXNzaW9uc1xuICAgICAgICogdG8gdGhlIERBcHAuIGB3YWxsZXROYW1lRmxhZ3NgIGFyZSBhYm91dCBnbG9iYWwgZXRoZXJldW0gb2JqZWN0IGJlaGF2aW9yXG4gICAgICAgKiBhbmQgZG8gbm90IGNvbnRhaW4gYW55IHByaXZhdGUgZGF0YVxuICAgICAgICovXG4gICAgICBjb250ZXh0OiBJTlRFUk5BTF9TWU1CT0xfQ09OVEVYVCxcbiAgICB9KTtcbiAgICByZXR1cm4gcHJlZmVyZW5jZXMud2FsbGV0TmFtZUZsYWdzIHx8IFtdO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZVBlcm1pc3Npb25SZXNwb25zZShcbiAgICBwYXJhbXM6IFt7IFtuYW1lOiBzdHJpbmddOiB1bmtub3duIH1dXG4gICk6IFdlYjNXYWxsZXRQZXJtaXNzaW9uW10ge1xuICAgIGlmIChwYXJhbXM/LlswXSAmJiAnZXRoX2FjY291bnRzJyBpbiBwYXJhbXNbMF0pIHtcbiAgICAgIHJldHVybiBbeyBwYXJlbnRDYXBhYmlsaXR5OiAnZXRoX2FjY291bnRzJyB9XTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRQYXJhbXMoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldElzQWxsb3dlZE9yaWdpbih7IGNvbnRleHQgfTogUHVibGljTWV0aG9kUGFyYW1zKSB7XG4gICAgY29uc3QgY3VycmVudEFkZHJlc3MgPSB0aGlzLndhbGxldC5yZWFkQ3VycmVudEFkZHJlc3MoKTtcbiAgICBpZiAoIWN1cnJlbnRBZGRyZXNzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLndhbGxldC5hbGxvd2VkT3JpZ2luKGNvbnRleHQsIGN1cnJlbnRBZGRyZXNzKTtcbiAgfVxuXG4gIGFzeW5jIHdhbGxldF9yZXF1ZXN0UGVybWlzc2lvbnMoe1xuICAgIGNvbnRleHQsXG4gICAgcGFyYW1zLFxuICB9OiBQdWJsaWNNZXRob2RQYXJhbXM8W3sgW25hbWU6IHN0cmluZ106IHVua25vd24gfV0+KTogUHJvbWlzZTxcbiAgICBXZWIzV2FsbGV0UGVybWlzc2lvbltdXG4gID4ge1xuICAgIGF3YWl0IHRoaXMuZXRoX3JlcXVlc3RBY2NvdW50cyh7IGNvbnRleHQgfSk7XG4gICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVQZXJtaXNzaW9uUmVzcG9uc2UocGFyYW1zKTtcbiAgfVxuXG4gIGFzeW5jIHdhbGxldF9nZXRQZXJtaXNzaW9ucyh7XG4gICAgY29udGV4dCxcbiAgfTogUHVibGljTWV0aG9kUGFyYW1zKTogUHJvbWlzZTxXZWIzV2FsbGV0UGVybWlzc2lvbltdPiB7XG4gICAgaWYgKHRoaXMuZ2V0SXNBbGxvd2VkT3JpZ2luKHsgY29udGV4dCB9KSkge1xuICAgICAgcmV0dXJuIFt7IHBhcmVudENhcGFiaWxpdHk6ICdldGhfYWNjb3VudHMnIH1dO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgb21pdCBmcm9tICdsb2Rhc2gvb21pdCc7XG5cbmludGVyZmFjZSBNYXliZVdpdGhTaWduYXR1cmUge1xuICByPzogc3RyaW5nO1xuICBzPzogc3RyaW5nO1xuICB2PzogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlU2lnbmF0dXJlPFQgZXh0ZW5kcyBNYXliZVdpdGhTaWduYXR1cmU+KHR4OiBUKSB7XG4gIHJldHVybiBvbWl0KHR4LCBbJ3InLCAncycsICd2J10pO1xufVxuIiwiaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdldmVudHMnO1xuaW1wb3J0IHsgbmFub2lkIH0gZnJvbSAnbmFub2lkJztcbmltcG9ydCB7IGNyZWF0ZVNhbHQsIGNyZWF0ZUNyeXB0b0tleSB9IGZyb20gJ3NyYy9tb2R1bGVzL2NyeXB0byc7XG5pbXBvcnQgeyBnZXRTSEEyNTZIZXhEaWdlc3QgfSBmcm9tICdzcmMvbW9kdWxlcy9jcnlwdG8vZ2V0U0hBMjU2SGV4RGlnZXN0JztcbmltcG9ydCB7IGdldCwgcmVtb3ZlLCBzZXQgfSBmcm9tICdzcmMvYmFja2dyb3VuZC93ZWJhcGlzL3N0b3JhZ2UnO1xuaW1wb3J0IHsgdmFsaWRhdGUgfSBmcm9tICdzcmMvc2hhcmVkL3ZhbGlkYXRpb24vdXNlci1pbnB1dCc7XG5pbXBvcnQgeyBXYWxsZXQgfSBmcm9tICcuLi9XYWxsZXQvV2FsbGV0JztcbmltcG9ydCB7IHdhbGxldFN0b3JlIH0gZnJvbSAnLi4vV2FsbGV0L3BlcnNpc3RlbmNlJztcblxuaW50ZXJmYWNlIFVzZXIge1xuICBpZDogc3RyaW5nO1xuICBzYWx0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHVibGljVXNlciB7XG4gIGlkOiBVc2VyWydpZCddO1xufVxuXG5jb25zdCBURU1QT1JBUllfSUQgPSAndGVtcG9yYXJ5JztcblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlRW5jcnlwdGlvbktleSh7XG4gIHBhc3N3b3JkLFxuICBzYWx0LFxufToge1xuICBwYXNzd29yZDogc3RyaW5nO1xuICBzYWx0OiBzdHJpbmc7XG59KSB7XG4gIHJldHVybiBhd2FpdCBnZXRTSEEyNTZIZXhEaWdlc3QoYCR7c2FsdH06JHtwYXNzd29yZH1gKTtcbn1cblxuZXhwb3J0IGNsYXNzIEFjY291bnQgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBwcml2YXRlIHVzZXI6IFVzZXIgfCBudWxsO1xuICBwcml2YXRlIGVuY3J5cHRpb25LZXk6IHN0cmluZyB8IG51bGw7XG4gIHByaXZhdGUgd2FsbGV0OiBXYWxsZXQ7XG5cbiAgaXNQZW5kaW5nTmV3VXNlcjogYm9vbGVhbjtcblxuICBwcml2YXRlIHN0YXRpYyBhc3luYyB3cml0ZUN1cnJlbnRVc2VyKHVzZXI6IFVzZXIpIHtcbiAgICBhd2FpdCBzZXQoJ2N1cnJlbnRVc2VyJywgdXNlcik7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgcmVhZEN1cnJlbnRVc2VyKCkge1xuICAgIHJldHVybiBnZXQ8VXNlcj4oJ2N1cnJlbnRVc2VyJyk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBhc3luYyByZW1vdmVDdXJyZW50VXNlcigpIHtcbiAgICBhd2FpdCByZW1vdmUoJ2N1cnJlbnRVc2VyJyk7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZW5zdXJlVXNlckFuZFdhbGxldCgpIHtcbiAgICBjb25zdCBleGlzdGluZ1VzZXIgPSBhd2FpdCBBY2NvdW50LnJlYWRDdXJyZW50VXNlcigpO1xuICAgIGNvbnN0IHdhbGxldFRhYmxlID0gYXdhaXQgd2FsbGV0U3RvcmUuZ2V0U2F2ZWRTdGF0ZSgpO1xuICAgIGlmIChleGlzdGluZ1VzZXIgJiYgIXdhbGxldFRhYmxlPy5bZXhpc3RpbmdVc2VyLmlkXSkge1xuICAgICAgYXdhaXQgQWNjb3VudC5yZW1vdmVDdXJyZW50VXNlcigpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBjcmVhdGVVc2VyKHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPFVzZXI+IHtcbiAgICBjb25zdCB2YWxpZGl0eSA9IHZhbGlkYXRlKHsgcGFzc3dvcmQgfSk7XG4gICAgaWYgKCF2YWxpZGl0eS52YWxpZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHZhbGlkaXR5Lm1lc3NhZ2UpO1xuICAgIH1cbiAgICBjb25zdCBpZCA9IG5hbm9pZCgzNik7IC8vIHVzZSBsb25nZXIgaWQgdGhhbiBkZWZhdWx0ICgyMSlcbiAgICBjb25zdCBzYWx0ID0gY3JlYXRlU2FsdCgpOyAvLyB1c2VkIHRvIGVuY3J5cHQgc2VlZCBwaHJhc2VzXG4gICAgY29uc3QgcmVjb3JkID0geyBpZCwgc2FsdCAvKiBwYXNzd29yZEhhc2g6IGhhc2ggKi8gfTtcbiAgICByZXR1cm4gcmVjb3JkO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnVzZXIgPSBudWxsO1xuICAgIHRoaXMuaXNQZW5kaW5nTmV3VXNlciA9IGZhbHNlO1xuICAgIHRoaXMuZW5jcnlwdGlvbktleSA9IG51bGw7XG4gICAgdGhpcy53YWxsZXQgPSBuZXcgV2FsbGV0KFRFTVBPUkFSWV9JRCwgbnVsbCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnVzZXIgPSBudWxsO1xuICAgIHRoaXMuZW5jcnlwdGlvbktleSA9IG51bGw7XG4gICAgdGhpcy53YWxsZXQgPSBuZXcgV2FsbGV0KFRFTVBPUkFSWV9JRCwgbnVsbCk7XG4gICAgdGhpcy5lbWl0KCdyZXNldCcpO1xuICB9XG5cbiAgYXN5bmMgdmVyaWZ5UGFzc3dvcmQodXNlcjogVXNlciwgcGFzc3dvcmQ6IHN0cmluZykge1xuICAgIGNvbnN0IGVuY3J5cHRpb25LZXkgPSBhd2FpdCBjcmVhdGVFbmNyeXB0aW9uS2V5KHtcbiAgICAgIHBhc3N3b3JkLFxuICAgICAgc2FsdDogdXNlci5pZCxcbiAgICB9KTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy53YWxsZXQudmVyaWZ5Q3JlZGVudGlhbHMoe1xuICAgICAgICBwYXJhbXM6IHsgaWQ6IHVzZXIuaWQsIGVuY3J5cHRpb25LZXkgfSxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBsb2dpbih1c2VyOiBVc2VyLCBwYXNzd29yZDogc3RyaW5nKSB7XG4gICAgY29uc3QgcGFzc3dvcmRJc0NvcnJlY3QgPSBhd2FpdCB0aGlzLnZlcmlmeVBhc3N3b3JkKHVzZXIsIHBhc3N3b3JkKTtcbiAgICBpZiAoIXBhc3N3b3JkSXNDb3JyZWN0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luY29ycmVjdCBwYXNzd29yZCcpO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLnNldE5ld1VzZXIodXNlciwgcGFzc3dvcmQsIHsgaXNOZXdVc2VyOiBmYWxzZSB9KTtcbiAgfVxuXG4gIGFzeW5jIHNldE5ld1VzZXIodXNlcjogVXNlciwgcGFzc3dvcmQ6IHN0cmluZywgeyBpc05ld1VzZXIgPSBmYWxzZSB9ID0ge30pIHtcbiAgICB0aGlzLnVzZXIgPSB1c2VyO1xuICAgIHRoaXMuaXNQZW5kaW5nTmV3VXNlciA9IGlzTmV3VXNlcjtcbiAgICB0aGlzLmVuY3J5cHRpb25LZXkgPSBhd2FpdCBjcmVhdGVFbmNyeXB0aW9uS2V5KHsgc2FsdDogdXNlci5pZCwgcGFzc3dvcmQgfSk7XG4gICAgY29uc3Qgc2VlZFBocmFzZUVuY3J5cHRpb25LZXkgPSBhd2FpdCBjcmVhdGVDcnlwdG9LZXkocGFzc3dvcmQsIHVzZXIuc2FsdCk7XG4gICAgYXdhaXQgdGhpcy53YWxsZXQudXBkYXRlQ3JlZGVudGlhbHMoe1xuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGlkOiB1c2VyLmlkLFxuICAgICAgICBlbmNyeXB0aW9uS2V5OiB0aGlzLmVuY3J5cHRpb25LZXksXG4gICAgICAgIHNlZWRQaHJhc2VFbmNyeXB0aW9uS2V5LFxuICAgICAgfSxcbiAgICB9KTtcbiAgICB0aGlzLmVtaXQoJ2F1dGhlbnRpY2F0ZWQnKTtcbiAgfVxuXG4gIGdldEVuY3J5cHRpb25LZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5jcnlwdGlvbktleTtcbiAgfVxuXG4gIGdldFVzZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMudXNlcjtcbiAgfVxuXG4gIGdldEN1cnJlbnRXYWxsZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMud2FsbGV0O1xuICB9XG5cbiAgaGFzQWN0aXZlUGFzc3dvcmRTZXNzaW9uKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLndhbGxldC5oYXNTZWVkUGhyYXNlRW5jcnlwdGlvbktleSgpO1xuICB9XG5cbiAgZXhwaXJlUGFzc3dvcmRTZXNzaW9uKCkge1xuICAgIHRoaXMud2FsbGV0LnJlbW92ZVNlZWRQaHJhc2VFbmNyeXB0aW9uS2V5KCk7XG4gIH1cblxuICBhc3luYyBzYXZlVXNlckFuZFdhbGxldCgpIHtcbiAgICBpZiAoIXRoaXMudXNlciB8fCAhdGhpcy53YWxsZXQgfHwgdGhpcy53YWxsZXQuaWQgPT09IFRFTVBPUkFSWV9JRCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcGVyc2lzdDogaW52YWxpZCBzZXNzaW9uIHN0YXRlJyk7XG4gICAgfVxuICAgIGF3YWl0IEFjY291bnQud3JpdGVDdXJyZW50VXNlcih0aGlzLnVzZXIpO1xuICAgIGF3YWl0IHRoaXMud2FsbGV0LnNhdmVQZW5kaW5nV2FsbGV0KCk7XG4gICAgdGhpcy5pc1BlbmRpbmdOZXdVc2VyID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDbGVhbmluZyB1cDpcbiAgICAgKiBSaWdodCBub3csIG9ubHkgb25lIFwiY3VycmVudFVzZXJcIiBjYW4gZXhpc3QsIHNvIHdlIHJlbW92ZVxuICAgICAqIGFsbCBvdGhlciBlbnRyaWVzIGZyb20gd2FsbGV0U3RvcmUgYmVjYXVzZSB0aGV5IGJlY29tZSB1bnJlYWNoYWJsZSBhbnl3YXkuXG4gICAgICovXG4gICAgY29uc3Qgd2FsbGV0VGFibGUgPSBhd2FpdCB3YWxsZXRTdG9yZS5nZXRTYXZlZFN0YXRlKCk7XG4gICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgY29uc3QgeyBpZCB9ID0gdGhpcy51c2VyO1xuICAgICAgd2FsbGV0U3RvcmUuZGVsZXRlTWFueShcbiAgICAgICAgT2JqZWN0LmtleXMod2FsbGV0VGFibGUpLmZpbHRlcigoa2V5KSA9PiBrZXkgIT09IGlkKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBsb2dvdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzZXQoKTtcbiAgfVxufVxuXG5PYmplY3QuYXNzaWduKHdpbmRvdywge1xuICBnZXRTSEEyNTZIZXhEaWdlc3QsXG4gIC8vIGFjY291bnQsXG4gIEFjY291bnQsXG59KTtcblxudHlwZSBQdWJsaWNNZXRob2RQYXJhbXM8VCA9IHVuZGVmaW5lZD4gPSBUIGV4dGVuZHMgdW5kZWZpbmVkXG4gID8gbmV2ZXJcbiAgOiB7IHBhcmFtczogVCB9O1xuXG5leHBvcnQgY2xhc3MgQWNjb3VudFB1YmxpY1JQQyB7XG4gIHByaXZhdGUgYWNjb3VudDogQWNjb3VudDtcblxuICBjb25zdHJ1Y3RvcihhY2NvdW50OiBBY2NvdW50KSB7XG4gICAgdGhpcy5hY2NvdW50ID0gYWNjb3VudDtcbiAgfVxuXG4gIGFzeW5jIGlzQXV0aGVudGljYXRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5hY2NvdW50LmdldFVzZXIoKSAhPSBudWxsO1xuICB9XG5cbiAgYXN5bmMgZ2V0RXhpc3RpbmdVc2VyKCk6IFByb21pc2U8UHVibGljVXNlciB8IG51bGw+IHtcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgQWNjb3VudC5yZWFkQ3VycmVudFVzZXIoKTtcbiAgICBpZiAodXNlcikge1xuICAgICAgcmV0dXJuIHsgaWQ6IHVzZXIuaWQgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBhc3luYyBsb2dpbih7XG4gICAgcGFyYW1zOiB7IHVzZXIsIHBhc3N3b3JkIH0sXG4gIH06IFB1YmxpY01ldGhvZFBhcmFtczx7XG4gICAgdXNlcjogUHVibGljVXNlcjtcbiAgICBwYXNzd29yZDogc3RyaW5nO1xuICB9Pik6IFByb21pc2U8UHVibGljVXNlciB8IG51bGw+IHtcbiAgICBjb25zdCBjdXJyZW50VXNlciA9IGF3YWl0IEFjY291bnQucmVhZEN1cnJlbnRVc2VyKCk7XG4gICAgaWYgKCFjdXJyZW50VXNlciB8fCBjdXJyZW50VXNlci5pZCAhPT0gdXNlci5pZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVc2VyICR7dXNlci5pZH0gbm90IGZvdW5kYCk7XG4gICAgfVxuICAgIGNvbnN0IGNhbkF1dGhvcml6ZSA9IGF3YWl0IHRoaXMuYWNjb3VudC52ZXJpZnlQYXNzd29yZChcbiAgICAgIGN1cnJlbnRVc2VyLFxuICAgICAgcGFzc3dvcmRcbiAgICApO1xuICAgIGlmIChjYW5BdXRob3JpemUpIHtcbiAgICAgIGF3YWl0IHRoaXMuYWNjb3VudC5sb2dpbihjdXJyZW50VXNlciwgcGFzc3dvcmQpO1xuICAgICAgcmV0dXJuIHVzZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW5jb3JyZWN0IHBhc3N3b3JkJyk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgaGFzQWN0aXZlUGFzc3dvcmRTZXNzaW9uKCkge1xuICAgIHJldHVybiB0aGlzLmFjY291bnQuaGFzQWN0aXZlUGFzc3dvcmRTZXNzaW9uKCk7XG4gIH1cblxuICBhc3luYyBjcmVhdGVVc2VyKHtcbiAgICBwYXJhbXM6IHsgcGFzc3dvcmQgfSxcbiAgfTogUHVibGljTWV0aG9kUGFyYW1zPHsgcGFzc3dvcmQ6IHN0cmluZyB9Pik6IFByb21pc2U8UHVibGljVXNlcj4ge1xuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBBY2NvdW50LmNyZWF0ZVVzZXIocGFzc3dvcmQpO1xuICAgIGF3YWl0IHRoaXMuYWNjb3VudC5zZXROZXdVc2VyKHVzZXIsIHBhc3N3b3JkLCB7IGlzTmV3VXNlcjogdHJ1ZSB9KTtcbiAgICByZXR1cm4geyBpZDogdXNlci5pZCB9O1xuICB9XG5cbiAgYXN5bmMgc2F2ZVVzZXJBbmRXYWxsZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWNjb3VudC5zYXZlVXNlckFuZFdhbGxldCgpO1xuICB9XG5cbiAgYXN5bmMgaXNQZW5kaW5nTmV3VXNlcigpIHtcbiAgICByZXR1cm4gdGhpcy5hY2NvdW50LmlzUGVuZGluZ05ld1VzZXI7XG4gIH1cblxuICBhc3luYyBsb2dvdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWNjb3VudC5sb2dvdXQoKTtcbiAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHVwc2VydDxULCBLIGV4dGVuZHMga2V5b2YgVD4oYXJyYXk6IFRbXSwgbmV3SXRlbTogVCwgaWRLZXk6IEspIHtcbiAgY29uc3QgcG9zID0gYXJyYXkuZmluZEluZGV4KChpdGVtKSA9PiBpdGVtW2lkS2V5XSA9PT0gbmV3SXRlbVtpZEtleV0pO1xuICBpZiAocG9zICE9PSAtMSkge1xuICAgIGFycmF5LnNwbGljZShwb3MsIDEsIG5ld0l0ZW0pO1xuICB9IGVsc2Uge1xuICAgIGFycmF5LnB1c2gobmV3SXRlbSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGV0aGVycyB9IGZyb20gJ2V0aGVycyc7XG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ3N0b3JlLXVuaXQnO1xuaW1wb3J0IHsgbmV0d29ya3NTdG9yZSB9IGZyb20gJ3NyYy9tb2R1bGVzL25ldHdvcmtzL25ldHdvcmtzLXN0b3JlJztcbmltcG9ydCB7IHNldCwgZ2V0IH0gZnJvbSAnc3JjL2JhY2tncm91bmQvd2ViYXBpcy9zdG9yYWdlJztcbmltcG9ydCBwcm9kdWNlIGZyb20gJ2ltbWVyJztcbmltcG9ydCB0eXBlIHtcbiAgU3RvcmVkVHJhbnNhY3Rpb25zLFxuICBUcmFuc2FjdGlvbk9iamVjdCxcbn0gZnJvbSAnc3JjL21vZHVsZXMvZXRoZXJldW0vdHJhbnNhY3Rpb25zL3R5cGVzJztcbmltcG9ydCB7IHVwc2VydCB9IGZyb20gJ3NyYy9zaGFyZWQvdXBzZXJ0JztcbmltcG9ydCB7IGVtaXR0ZXIgfSBmcm9tICcuLi9ldmVudHMnO1xuXG5jbGFzcyBUcmFuc2FjdGlvbnNTdG9yZSBleHRlbmRzIFN0b3JlPFN0b3JlZFRyYW5zYWN0aW9ucz4ge1xuICBjb25zdHJ1Y3RvcihhcmdzOiBTdG9yZWRUcmFuc2FjdGlvbnMpIHtcbiAgICBzdXBlcihhcmdzKTtcbiAgICB0aGlzLm9uKCdjaGFuZ2UnLCAoc3RhdGUpID0+IHtcbiAgICAgIHNldCgndHJhbnNhY3Rpb25zJywgc3RhdGUpO1xuICAgIH0pO1xuICB9XG59XG5cbmNvbnN0IERFQlVHR0lOR19UWF9IQVNIID0gJzB4MTIzMTIzJztcblxuYXN5bmMgZnVuY3Rpb24gd2FpdEZvclRyYW5zYWN0aW9uKFxuICBoYXNoOiBzdHJpbmcsXG4gIHByb3ZpZGVyOiBldGhlcnMucHJvdmlkZXJzLlByb3ZpZGVyXG4pOiBQcm9taXNlPGV0aGVycy5wcm92aWRlcnMuVHJhbnNhY3Rpb25SZWNlaXB0PiB7XG4gIGlmIChoYXNoID09PSBERUJVR0dJTkdfVFhfSEFTSCkge1xuICAgIGNvbnN0IHJlY2VpcHQgPSB7XG4gICAgICBibG9ja0hhc2g6XG4gICAgICAgICcweGU0ODVhYTdlNThkMzMzODkwOWZkYzc3ZmM3NDQ1ZGE1ZjU1MmUyNjBkYzIzYmRmZTI4NWEyYWRiZTU0YjRmNjQnLFxuICAgICAgYmxvY2tOdW1iZXI6IDMxNjU4MzY5LFxuICAgICAgYnl6YW50aXVtOiB0cnVlLFxuICAgICAgY29uZmlybWF0aW9uczogMSxcbiAgICAgIGNvbnRyYWN0QWRkcmVzczogJycsXG4gICAgICBjdW11bGF0aXZlR2FzVXNlZDoge30sXG4gICAgICBlZmZlY3RpdmVHYXNQcmljZToge30sXG4gICAgICBmcm9tOiAnMHg0MmI5ZEY2NUIyMTlCM2REMzZGRjMzMEE0ZEQ4ZjMyN0E2QWRhOTkwJyxcbiAgICAgIGdhc1VzZWQ6IHt9LFxuICAgICAgbG9nczogW10sXG4gICAgICBsb2dzQmxvb206ICcweDAwMjAwMC4uLicsXG4gICAgICBzdGF0dXM6IDEsXG4gICAgICB0bzogJzB4ZDdGMURkNUQ0OTIwNjM0OUNhRThiNTg1ZmNCMENlM0Q5NmYxNjk2RicsXG4gICAgICB0cmFuc2FjdGlvbkhhc2g6IERFQlVHR0lOR19UWF9IQVNILFxuICAgICAgdHJhbnNhY3Rpb25JbmRleDogNixcbiAgICAgIHR5cGU6IDIsXG4gICAgfSBhcyB1bmtub3duIGFzIGV0aGVycy5wcm92aWRlcnMuVHJhbnNhY3Rpb25SZWNlaXB0O1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocikgPT4gc2V0VGltZW91dCgoKSA9PiByKHJlY2VpcHQpLCA2MDAwKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByb3ZpZGVyLndhaXRGb3JUcmFuc2FjdGlvbihoYXNoKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVHJhbnNhY3Rpb25TZXJ2aWNlIHtcbiAgcHJpdmF0ZSB0cmFuc2FjdGlvbnNTdG9yZTogVHJhbnNhY3Rpb25zU3RvcmU7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy50cmFuc2FjdGlvbnNTdG9yZSA9IG5ldyBUcmFuc2FjdGlvbnNTdG9yZShbXSk7XG4gIH1cblxuICBhc3luYyBpbml0aWFsaXplKCkge1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uczogU3RvcmVkVHJhbnNhY3Rpb25zID0gKGF3YWl0IGdldCgndHJhbnNhY3Rpb25zJykpID8/IFtdO1xuICAgIHRoaXMudHJhbnNhY3Rpb25zU3RvcmUgPSBuZXcgVHJhbnNhY3Rpb25zU3RvcmUodHJhbnNhY3Rpb25zKTtcbiAgICB0aGlzLmFkZExpc3RlbmVycygpO1xuICB9XG5cbiAgYWRkTGlzdGVuZXJzKCkge1xuICAgIGVtaXR0ZXIub24oJ3BlbmRpbmdUcmFuc2FjdGlvbkNyZWF0ZWQnLCAodHJhbnNhY3Rpb24pID0+IHtcbiAgICAgIGNvbnN0IG5ld0l0ZW0gPSB7XG4gICAgICAgIHRyYW5zYWN0aW9uLFxuICAgICAgICBoYXNoOiB0cmFuc2FjdGlvbi5oYXNoLFxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICB9O1xuICAgICAgdGhpcy53YWl0Rm9yVHJhbnNhY3Rpb24obmV3SXRlbSk7XG4gICAgICB0aGlzLnRyYW5zYWN0aW9uc1N0b3JlLnNldFN0YXRlKChzdGF0ZSkgPT5cbiAgICAgICAgcHJvZHVjZShzdGF0ZSwgKGRyYWZ0KSA9PiB7XG4gICAgICAgICAgZHJhZnQucHVzaChuZXdJdGVtKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHdhaXRGb3JUcmFuc2FjdGlvbih0cmFuc2FjdGlvbk9iamVjdDogVHJhbnNhY3Rpb25PYmplY3QpIHtcbiAgICBjb25zdCBuZXR3b3JrcyA9IGF3YWl0IG5ldHdvcmtzU3RvcmUubG9hZCgpO1xuICAgIGNvbnN0IHsgaGFzaCwgdHJhbnNhY3Rpb24gfSA9IHRyYW5zYWN0aW9uT2JqZWN0O1xuICAgIGNvbnN0IHsgY2hhaW5JZDogY2hhaW5JZEFzTnVtYmVyIH0gPSB0cmFuc2FjdGlvbjtcbiAgICBjb25zdCBjaGFpbklkID0gZXRoZXJzLnV0aWxzLmhleFZhbHVlKGNoYWluSWRBc051bWJlcik7XG4gICAgY29uc3Qgbm9kZVVybCA9IG5ldHdvcmtzLmdldFJwY1VybEludGVybmFsKG5ldHdvcmtzLmdldENoYWluQnlJZChjaGFpbklkKSk7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgZXRoZXJzLnByb3ZpZGVycy5Kc29uUnBjUHJvdmlkZXIobm9kZVVybCk7XG4gICAgY29uc3QgdHhSZWNlaXB0ID0gYXdhaXQgd2FpdEZvclRyYW5zYWN0aW9uKGhhc2gsIHByb3ZpZGVyKTtcbiAgICBlbWl0dGVyLmVtaXQoJ3RyYW5zYWN0aW9uTWluZWQnLCB0eFJlY2VpcHQpO1xuICAgIHRoaXMudXBzZXJ0VHJhbnNhY3Rpb24oeyAuLi50cmFuc2FjdGlvbk9iamVjdCwgcmVjZWlwdDogdHhSZWNlaXB0IH0pO1xuICB9XG5cbiAgcHJpdmF0ZSB1cHNlcnRUcmFuc2FjdGlvbih2YWx1ZTogVHJhbnNhY3Rpb25PYmplY3QpIHtcbiAgICB0aGlzLnRyYW5zYWN0aW9uc1N0b3JlLnNldFN0YXRlKChzdGF0ZSkgPT5cbiAgICAgIHByb2R1Y2Uoc3RhdGUsIChkcmFmdCkgPT4ge1xuICAgICAgICB1cHNlcnQoZHJhZnQsIHZhbHVlLCAnaGFzaCcpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRlc3RBZGRUcmFuc2FjdGlvbigpIHtcbiAgZW1pdHRlci5lbWl0KCdwZW5kaW5nVHJhbnNhY3Rpb25DcmVhdGVkJywge1xuICAgIGFjY2Vzc0xpc3Q6IFtdLFxuICAgIGNoYWluSWQ6IDEzNyxcbiAgICBjb25maXJtYXRpb25zOiAwLFxuICAgIGRhdGE6ICcweDgzZDEzZTAxMDAwMDAwMDAwMDAuLi4nLFxuICAgIGZyb206ICcweDQyYjlkRjY1QjIxOUIzZEQzNkZGMzMwQTRkRDhmMzI3QTZBZGE5OTAnLFxuICAgIGdhc0xpbWl0OiB7fSxcbiAgICBnYXNQcmljZTogbnVsbCxcbiAgICBoYXNoOiBERUJVR0dJTkdfVFhfSEFTSCxcbiAgICBtYXhGZWVQZXJHYXM6IHt9LFxuICAgIG1heFByaW9yaXR5RmVlUGVyR2FzOiB7fSxcbiAgICBub25jZTogMjM5LFxuICAgIHRvOiAnMHhkN0YxRGQ1RDQ5MjA2MzQ5Q2FFOGI1ODVmY0IwQ2UzRDk2ZjE2OTZGJyxcbiAgICB0eXBlOiAyLFxuICAgIHZhbHVlOiB7fSxcbiAgfSBhcyB1bmtub3duIGFzIGV0aGVycy5wcm92aWRlcnMuVHJhbnNhY3Rpb25SZXNwb25zZSk7XG59XG5cbk9iamVjdC5hc3NpZ24od2luZG93LCB7IHRlc3RBZGRUcmFuc2FjdGlvbiB9KTtcbiIsImltcG9ydCB7IHByZXBhcmVTdG9yYWdlIH0gZnJvbSAnc3JjL3NoYXJlZC9jb3JlL3ZlcnNpb24nO1xuaW1wb3J0IHsgQWNjb3VudCwgQWNjb3VudFB1YmxpY1JQQyB9IGZyb20gJy4vYWNjb3VudC9BY2NvdW50JztcbmltcG9ydCB7IFRyYW5zYWN0aW9uU2VydmljZSB9IGZyb20gJy4vdHJhbnNhY3Rpb25zL1RyYW5zYWN0aW9uU2VydmljZSc7XG5cbmxldCBkaWRJbml0aWFsaXplID0gZmFsc2U7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICBpZiAoZGlkSW5pdGlhbGl6ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW5pdGlhbGl6ZSBmdW5jdGlvbiBzaG91bGQgYmUgcnVuIG9ubHkgb25jZScpO1xuICB9XG4gIGRpZEluaXRpYWxpemUgPSB0cnVlO1xuXG4gIGF3YWl0IHByZXBhcmVTdG9yYWdlKCk7XG5cbiAgLy8gVGhpcyBtZXRob2QgaXMgY2FsbGVkIG9ubHkgd2hlbiBiYWNrZ3JvdW5kIHNjcmlwdCBydW5zIGZvciB0aGUgZmlyc3QgdGltZVxuICAvLyBUaGlzIG1lYW5zIHRoYXQgZWl0aGVyIHRoZSB1c2VyIGlzIG9wZW5pbmcgdGhlIGV4dGVuc2lvbiBmb3IgdGhlIGZpcnN0IHRpbWUsXG4gIC8vIG9yIHRoYXQgdGhlIGJyb3dzZXIgZGVjaWRlZCB0byBcInJlc3RhcnRcIiB0aGUgYmFja2dyb3VuZCBzY3JpcHRzXG4gIC8vIEVpdGhlciB3YXksIHdlIGVpdGhlciBjcmVhdGUgYSB1c2VyIGZyb20gc2NyYXRjaCBvciBmaW5kIG9uZSBpbiBzdG9yYWdlXG4gIGF3YWl0IEFjY291bnQuZW5zdXJlVXNlckFuZFdhbGxldCgpO1xuICBjb25zdCBhY2NvdW50ID0gbmV3IEFjY291bnQoKTtcbiAgY29uc3QgYWNjb3VudFB1YmxpY1JQQyA9IG5ldyBBY2NvdW50UHVibGljUlBDKGFjY291bnQpO1xuICBjb25zdCB0cmFuc2FjdGlvblNlcnZpY2UgPSBuZXcgVHJhbnNhY3Rpb25TZXJ2aWNlKCk7XG4gIGF3YWl0IHRyYW5zYWN0aW9uU2VydmljZS5pbml0aWFsaXplKCk7XG5cbiAgT2JqZWN0LmFzc2lnbih3aW5kb3csIHtcbiAgICBhY2NvdW50LFxuICAgIEFjY291bnQsXG4gICAgYWNjb3VudFB1YmxpY1JQQyxcbiAgICB0cmFuc2FjdGlvblNlcnZpY2UsXG4gIH0pO1xuICByZXR1cm4geyBhY2NvdW50LCBhY2NvdW50UHVibGljUlBDLCB0cmFuc2FjdGlvblNlcnZpY2UgfTtcbn1cbiIsImltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7XG4gIGZvcm1hdEpzb25ScGNFcnJvcixcbiAgaXNKc29uUnBjUmVxdWVzdCxcbiAgSnNvblJwY0Vycm9yLFxuICBKc29uUnBjUGF5bG9hZCxcbiAgSnNvblJwY1Jlc3VsdCxcbn0gZnJvbSAnQGpzb24tcnBjLXRvb2xzL3V0aWxzJztcbmltcG9ydCB7IG5ldHdvcmtzU3RvcmUgfSBmcm9tICdzcmMvbW9kdWxlcy9uZXR3b3Jrcy9uZXR3b3Jrcy1zdG9yZSc7XG5pbXBvcnQgdHlwZSB7IENoYW5uZWxDb250ZXh0IH0gZnJvbSAnc3JjL3NoYXJlZC90eXBlcy9DaGFubmVsQ29udGV4dCc7XG5pbXBvcnQgdHlwZSB7IFdhbGxldCB9IGZyb20gJy4uL1dhbGxldC9XYWxsZXQnO1xuXG5leHBvcnQgY2xhc3MgSHR0cENvbm5lY3Rpb24gZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBwcml2YXRlIHdhbGxldEdldHRlcjogKCkgPT4gV2FsbGV0O1xuXG4gIGNvbnN0cnVjdG9yKGdldFdhbGxldDogKCkgPT4gV2FsbGV0KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLndhbGxldEdldHRlciA9IGdldFdhbGxldDtcbiAgfVxuXG4gIGFzeW5jIHNlbmQoXG4gICAgcmVxdWVzdDogSnNvblJwY1BheWxvYWQsXG4gICAgY29udGV4dDogUGFydGlhbDxDaGFubmVsQ29udGV4dD5cbiAgKTogUHJvbWlzZTxKc29uUnBjUmVzdWx0IHwgSnNvblJwY0Vycm9yPiB7XG4gICAgaWYgKCFpc0pzb25ScGNSZXF1ZXN0KHJlcXVlc3QpKSB7XG4gICAgICBjb25zb2xlLmxvZygnbm90IGEgcmVxdWVzdDonLCByZXF1ZXN0KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ25vdCBhIHJlcXVlc3QnKTtcbiAgICB9XG4gICAgY29uc3QgbmV0d29ya3MgPSBhd2FpdCBuZXR3b3Jrc1N0b3JlLmxvYWQoKTtcbiAgICBjb25zdCB3YWxsZXQgPSB0aGlzLndhbGxldEdldHRlcigpO1xuICAgIGNvbnN0IGNoYWluSWQgPSBhd2FpdCB3YWxsZXQucHVibGljRXRoZXJldW1Db250cm9sbGVyLmV0aF9jaGFpbklkKHtcbiAgICAgIGNvbnRleHQsXG4gICAgfSk7XG5cbiAgICBjb25zdCBjaGFpbiA9IG5ldHdvcmtzLmdldENoYWluQnlJZChjaGFpbklkKTtcbiAgICBjb25zdCB1cmwgPSBuZXR3b3Jrcy5nZXRScGNVcmxJbnRlcm5hbChjaGFpbik7XG4gICAgcmV0dXJuIGZldGNoKHVybCwge1xuICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0KSxcbiAgICB9KVxuICAgICAgLnRoZW4oKHIpID0+IHIuanNvbigpKVxuICAgICAgLnRoZW4oXG4gICAgICAgIChyZXN1bHQpID0+IHtcbiAgICAgICAgICB0aGlzLmVtaXQoJ3BheWxvYWQnLCByZXN1bHQpO1xuICAgICAgICAgIHJldHVybiByZXN1bHQgYXMgSnNvblJwY1Jlc3VsdDtcbiAgICAgICAgfSxcbiAgICAgICAgKGVycm9yOiBFcnJvcikgPT4ge1xuICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBmb3JtYXRKc29uUnBjRXJyb3IocmVxdWVzdC5pZCwgZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgdGhpcy5lbWl0KCdwYXlsb2FkJywgcGF5bG9hZCk7XG4gICAgICAgICAgcmV0dXJuIHBheWxvYWQ7XG4gICAgICAgIH1cbiAgICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgUnVudGltZVBvcnQgfSBmcm9tICcuLi93ZWJhcGlzL1J1bnRpbWVQb3J0JztcblxuZnVuY3Rpb24gcHVzaFVuaXF1ZTxUPihhcnI6IFRbXSwgaXRlbTogVCkge1xuICBpZiAoIWFyci5pbmNsdWRlcyhpdGVtKSkge1xuICAgIGFyci5wdXNoKGl0ZW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZTxUPihhcnI6IFRbXSwgaXRlbTogVCkge1xuICBjb25zdCBwb3MgPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgaWYgKHBvcyAhPT0gLTEpIHtcbiAgICBhcnIuc3BsaWNlKHBvcywgMSk7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgUG9ydE1lc3NhZ2VIYW5kbGVyID0gKFxuICBwb3J0OiBSdW50aW1lUG9ydCxcbiAgbXNnOiB1bmtub3duXG4pID0+IHZvaWQgfCBib29sZWFuO1xuXG5leHBvcnQgY2xhc3MgUG9ydFJlZ2lzdHJ5IHtcbiAgcHJpdmF0ZSBwb3J0czogUnVudGltZVBvcnRbXTtcbiAgcHJpdmF0ZSBoYW5kbGVyczogUG9ydE1lc3NhZ2VIYW5kbGVyW107XG4gIGxpc3RlbmVyOiAobXNnOiB1bmtub3duLCBwb3J0OiBSdW50aW1lUG9ydCkgPT4gdm9pZDtcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IHtcbiAgICBvbkRpc2Nvbm5lY3Q6IFNldDwocG9ydDogUnVudGltZVBvcnQpID0+IHZvaWQ+O1xuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucG9ydHMgPSBbXTtcbiAgICB0aGlzLmhhbmRsZXJzID0gW107XG5cbiAgICB0aGlzLmxpc3RlbmVyID0gKG1zZzogdW5rbm93biwgcG9ydDogUnVudGltZVBvcnQpID0+IHtcbiAgICAgIGZvciAoY29uc3QgaGFuZGxlciBvZiB0aGlzLmhhbmRsZXJzKSB7XG4gICAgICAgIGNvbnN0IGRpZEhhbmRsZSA9IGhhbmRsZXIocG9ydCwgbXNnKTtcbiAgICAgICAgaWYgKGRpZEhhbmRsZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubGlzdGVuZXJzID0ge1xuICAgICAgb25EaXNjb25uZWN0OiBuZXcgU2V0KCksXG4gICAgfTtcbiAgfVxuXG4gIGFkZExpc3RlbmVyKGV2ZW50OiAnZGlzY29ubmVjdCcsIGxpc3RlbmVyOiAocG9ydDogUnVudGltZVBvcnQpID0+IHZvaWQpIHtcbiAgICBpZiAoZXZlbnQgPT09ICdkaXNjb25uZWN0Jykge1xuICAgICAgdGhpcy5saXN0ZW5lcnMub25EaXNjb25uZWN0LmFkZChsaXN0ZW5lcik7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICB0aGlzLmxpc3RlbmVycy5vbkRpc2Nvbm5lY3QuZGVsZXRlKGxpc3RlbmVyKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgZXZlbnQnKTtcbiAgICB9XG4gIH1cblxuICByZWdpc3Rlcihwb3J0OiBSdW50aW1lUG9ydCkge1xuICAgIHB1c2hVbmlxdWUodGhpcy5wb3J0cywgcG9ydCk7XG4gICAgcG9ydC5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIodGhpcy5saXN0ZW5lcik7XG5cbiAgICBjb25zdCBkaXNjb25uZWN0SGFuZGxlciA9ICgpID0+IHtcbiAgICAgIHBvcnQub25NZXNzYWdlLnJlbW92ZUxpc3RlbmVyKHRoaXMubGlzdGVuZXIpO1xuICAgICAgZm9yIChjb25zdCBldmVudExpc3RlbmVyIG9mIHRoaXMubGlzdGVuZXJzLm9uRGlzY29ubmVjdCkge1xuICAgICAgICBldmVudExpc3RlbmVyKHBvcnQpO1xuICAgICAgfVxuICAgICAgdGhpcy51bnJlZ2lzdGVyKHBvcnQpO1xuICAgICAgcG9ydC5vbkRpc2Nvbm5lY3QucmVtb3ZlTGlzdGVuZXIoZGlzY29ubmVjdEhhbmRsZXIpO1xuICAgIH07XG4gICAgcG9ydC5vbkRpc2Nvbm5lY3QuYWRkTGlzdGVuZXIoZGlzY29ubmVjdEhhbmRsZXIpO1xuICB9XG5cbiAgdW5yZWdpc3Rlcihwb3J0OiBSdW50aW1lUG9ydCkge1xuICAgIHJlbW92ZSh0aGlzLnBvcnRzLCBwb3J0KTtcbiAgfVxuXG4gIGdldEFjdGl2ZVBvcnRzKCkge1xuICAgIHJldHVybiB0aGlzLnBvcnRzO1xuICB9XG5cbiAgYWRkTWVzc2FnZUhhbmRsZXIoaGFuZGxlcjogUG9ydE1lc3NhZ2VIYW5kbGVyKSB7XG4gICAgdGhpcy5oYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICB9XG5cbiAgcG9zdE1lc3NhZ2U8VD4oeyBwb3J0TmFtZSwgbWVzc2FnZSB9OiB7IHBvcnROYW1lOiBzdHJpbmc7IG1lc3NhZ2U6IFQgfSkge1xuICAgIGNvbnN0IHBvcnQgPSB0aGlzLnBvcnRzLmZpbmQoKHBvcnQpID0+IHBvcnQubmFtZSA9PT0gcG9ydE5hbWUpO1xuICAgIGlmIChwb3J0KSB7XG4gICAgICBwb3J0LnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IGJyb3dzZXIgZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsJztcbmltcG9ydCB7IGlzSnNvblJwY1BheWxvYWQsIGlzSnNvblJwY1JlcXVlc3QgfSBmcm9tICdAanNvbi1ycGMtdG9vbHMvdXRpbHMnO1xuaW1wb3J0IHR5cGUgeyBXYWxsZXQgfSBmcm9tICdzcmMvc2hhcmVkL3R5cGVzL1dhbGxldCc7XG5pbXBvcnQgeyBpc0NsYXNzUHJvcGVydHkgfSBmcm9tICdzcmMvc2hhcmVkL2NvcmUvaXNDbGFzc1Byb3BlcnR5JztcbmltcG9ydCB7IG1hcFJQQ01lc3NhZ2VUb0NvbnRyb2xsZXIgfSBmcm9tICcuLi9tYXBSUENNZXNzYWdlVG9Db250cm9sbGVyJztcbmltcG9ydCB7IGdldFBvcnRDb250ZXh0IH0gZnJvbSAnLi4vZ2V0UG9ydENvbnRleHQnO1xuaW1wb3J0IHR5cGUgeyBQb3J0TWVzc2FnZUhhbmRsZXIgfSBmcm9tICcuLi9Qb3J0UmVnaXN0cnknO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlV2FsbGV0TWVzc2FnZUhhbmRsZXIoXG4gIGdldFdhbGxldDogKCkgPT4gV2FsbGV0XG4pOiBQb3J0TWVzc2FnZUhhbmRsZXIge1xuICByZXR1cm4gZnVuY3Rpb24gd2FsbGV0TWVzc2FnZUhhbmRsZXIocG9ydCwgbXNnKTogYm9vbGVhbiB7XG4gICAgY29uc3QgaXNWYWxpZFJlcXVlc3QgPSBpc0pzb25ScGNQYXlsb2FkKG1zZykgJiYgaXNKc29uUnBjUmVxdWVzdChtc2cpO1xuXG4gICAgaWYgKCFpc1ZhbGlkUmVxdWVzdCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0ID0gZ2V0UG9ydENvbnRleHQocG9ydCk7XG4gICAgY29uc3QgeyBtZXRob2QgfSA9IG1zZztcblxuICAgIGZ1bmN0aW9uIG1hcFRvQ29udHJvbGxlcklmUG9zc2libGU8VD4oY29udHJvbGxlcjogVCkge1xuICAgICAgaWYgKFxuICAgICAgICBpc0NsYXNzUHJvcGVydHkoY29udHJvbGxlciwgbWV0aG9kKSAmJlxuICAgICAgICB0eXBlb2YgY29udHJvbGxlclttZXRob2QgYXMga2V5b2YgdHlwZW9mIGNvbnRyb2xsZXJdID09PSAnZnVuY3Rpb24nXG4gICAgICApIHtcbiAgICAgICAgbWFwUlBDTWVzc2FnZVRvQ29udHJvbGxlcihwb3J0LCBtc2csIGNvbnRyb2xsZXIsIGNvbnRleHQpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9ydC5uYW1lID09PSBgJHticm93c2VyLnJ1bnRpbWUuaWR9L2V0aGVyZXVtYCkge1xuICAgICAgY29uc3QgY29udHJvbGxlciA9IGdldFdhbGxldCgpLnB1YmxpY0V0aGVyZXVtQ29udHJvbGxlcjtcbiAgICAgIHJldHVybiBtYXBUb0NvbnRyb2xsZXJJZlBvc3NpYmxlKGNvbnRyb2xsZXIpO1xuICAgIH0gZWxzZSBpZiAocG9ydC5uYW1lID09PSBgJHticm93c2VyLnJ1bnRpbWUuaWR9L3dhbGxldGApIHtcbiAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBnZXRXYWxsZXQoKTtcbiAgICAgIHJldHVybiBtYXBUb0NvbnRyb2xsZXJJZlBvc3NpYmxlKGNvbnRyb2xsZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGlzQ2xhc3NQcm9wZXJ0eShvYmplY3Q6IHVua25vd24sIG1ldGhvZDogc3RyaW5nKSB7XG4gIGNvbnN0IHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpO1xuICByZXR1cm4gKFxuICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIG1ldGhvZCkgfHxcbiAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvdG90eXBlLCBtZXRob2QpXG4gICk7XG59XG4iLCJpbXBvcnQgeyBmb3JtYXRKc29uUnBjUmVzdWx0LCBKc29uUnBjUmVzdWx0IH0gZnJvbSAnQGpzb24tcnBjLXRvb2xzL3V0aWxzJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRKc29uUnBjUmVzdWx0Rm9yUG9ydDxUID0gYW55IHwgbnVsbCB8IHVuZGVmaW5lZD4oXG4gIGlkOiBudW1iZXIsXG4gIHJlc3VsdDogVFxuKSB7XG4gIGNvbnN0IHZhbHVlID0gZm9ybWF0SnNvblJwY1Jlc3VsdChpZCwgcmVzdWx0KSBhcyBKc29uUnBjUmVzdWx0PFQgfCBudWxsPjtcbiAgaWYgKHZhbHVlLnJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gV2hlbiBtZXNzYWdlcyBhcmUgc2VudCB2aWEgcG9ydHMsIGB1bmRlZmluZWRgIHByb3BlcnRpcmVzXG4gICAgLy8gZ2V0IHJlbW92ZWRcbiAgICB2YWx1ZS5yZXN1bHQgPSBudWxsO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbiIsImltcG9ydCB7IGZvcm1hdEpzb25ScGNFcnJvciB9IGZyb20gJ0Bqc29uLXJwYy10b29scy91dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRKc29uUnBjV2FsbGV0RXJyb3IoXG4gIGlkOiBudW1iZXIsXG4gIGVycm9yOiBQYXJhbWV0ZXJzPHR5cGVvZiBmb3JtYXRKc29uUnBjRXJyb3I+WzFdXG4pIHtcbiAgLy8gaWYgKCFlcnJvciB8fCB0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnIHx8IGlzUmVzZXJ2ZWRFcnJvckNvZGUoZXJyb3IuY29kZSkpIHtcbiAgaWYgKCFlcnJvciB8fCB0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZvcm1hdEpzb25ScGNFcnJvcihpZCwgZXJyb3IpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICBpZCxcbiAgICAgIGpzb25ycGM6ICcyLjAnLFxuICAgICAgZXJyb3IsXG4gICAgfTtcbiAgfVxufVxuIiwiaW1wb3J0IGJyb3dzZXIgZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsJztcbmltcG9ydCB7XG4gIEVycm9yUmVzcG9uc2UsXG4gIGlzSnNvblJwY1BheWxvYWQsXG4gIGlzSnNvblJwY1JlcXVlc3QsXG4gIEpzb25ScGNQYXlsb2FkLFxuICBKc29uUnBjUmVzcG9uc2UsXG59IGZyb20gJ0Bqc29uLXJwYy10b29scy91dGlscyc7XG5pbXBvcnQgeyBmb3JtYXRKc29uUnBjUmVzdWx0Rm9yUG9ydCB9IGZyb20gJ3NyYy9zaGFyZWQvZm9ybWF0SnNvblJwY1Jlc3VsdEZvclBvcnQnO1xuaW1wb3J0IHsgZm9ybWF0SnNvblJwY1dhbGxldEVycm9yIH0gZnJvbSAnc3JjL3NoYXJlZC9mb3JtYXRKc29uUnBjV2FsbGV0RXJyb3InO1xuaW1wb3J0IHsgaXNDbGFzc1Byb3BlcnR5IH0gZnJvbSAnc3JjL3NoYXJlZC9jb3JlL2lzQ2xhc3NQcm9wZXJ0eSc7XG5pbXBvcnQgeyBJbnZhbGlkUGFyYW1zIH0gZnJvbSAnc3JjL3NoYXJlZC9lcnJvcnMvZXJyb3JzJztcbmltcG9ydCB0eXBlIHsgUG9ydENvbnRleHQgfSBmcm9tICcuL1BvcnRDb250ZXh0JztcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgSnNvblJwY1JlcXVlc3QgYW5kIG1hcHNcbiAqIGl0IHRvIGEgY29ycmVzcG9uZGluZyBtZXRob2Qgb2YgYSBjb250cm9sbGVyIChpZiBpdCBleGlzdHMpLFxuICogdGhlbiBwb3N0cyB0aGUgcmVzdWx0IGJhY2sgdG8gdGhlIHBvcnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcFJQQ01lc3NhZ2VUb0NvbnRyb2xsZXI8VD4oXG4gIHBvcnQ6IGJyb3dzZXIuUnVudGltZS5Qb3J0IHwgY2hyb21lLnJ1bnRpbWUuUG9ydCxcbiAgbXNnOiBKc29uUnBjUGF5bG9hZCB8IHVua25vd24sXG4gIGNvbnRyb2xsZXI6IFQsXG4gIGNvbnRleHQ6IFBvcnRDb250ZXh0XG4pIHtcbiAgaWYgKGlzSnNvblJwY1BheWxvYWQobXNnKSAmJiBpc0pzb25ScGNSZXF1ZXN0KG1zZykpIHtcbiAgICBjb25zdCB7IG1ldGhvZCwgcGFyYW1zLCBpZCB9ID0gbXNnO1xuICAgIC8vIGxvZ2dpbmdcbiAgICAvLyBjb25zb2xlLmxvZyh7IG1ldGhvZCwgcGFyYW1zLCBpZCwgcG9ydCwgY29udGV4dCB9KTtcbiAgICBpZiAoXG4gICAgICAhaXNDbGFzc1Byb3BlcnR5KGNvbnRyb2xsZXIsIG1ldGhvZCkgfHxcbiAgICAgIHR5cGVvZiBjb250cm9sbGVyW21ldGhvZCBhcyBrZXlvZiB0eXBlb2YgY29udHJvbGxlcl0gIT09ICdmdW5jdGlvbidcbiAgICApIHtcbiAgICAgIHBvcnQucG9zdE1lc3NhZ2UoXG4gICAgICAgIGZvcm1hdEpzb25ScGNXYWxsZXRFcnJvcihcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBuZXcgSW52YWxpZFBhcmFtcyhcbiAgICAgICAgICAgIG1ldGhvZCA/IGBVbnN1cHBvcnRlZCBtZXRob2Q6ICR7bWV0aG9kfWAgOiB1bmRlZmluZWRcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNvbnRyb2xsZXJNZXRob2QgPSBjb250cm9sbGVyW21ldGhvZCBhcyBrZXlvZiB0eXBlb2YgY29udHJvbGxlcl07XG4gICAgY29udHJvbGxlck1ldGhvZFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgLmNhbGwoY29udHJvbGxlciwgeyBwYXJhbXMsIGNvbnRleHQgfSlcbiAgICAgIC50aGVuKFxuICAgICAgICAocmVzdWx0OiB1bmtub3duKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGZvcm1hdEpzb25ScGNSZXN1bHRGb3JQb3J0KGlkLCByZXN1bHQpO1xuICAgICAgICB9LFxuICAgICAgICAoZXJyb3I6IEVycm9yIHwgRXJyb3JSZXNwb25zZSkgPT4ge1xuICAgICAgICAgIHJldHVybiBmb3JtYXRKc29uUnBjV2FsbGV0RXJyb3IoXG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICdjb2RlJyBpbiBlcnJvciA/IGVycm9yIDogZXJyb3IubWVzc2FnZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICAgIC50aGVuKChyZXN1bHQ6IEpzb25ScGNSZXNwb25zZSkgPT4ge1xuICAgICAgICAvLyBsb2dnaW5nXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjb250cm9sbGVyIHJlc3VsdCcsIHJlc3VsdCk7XG4gICAgICAgIHBvcnQucG9zdE1lc3NhZ2UocmVzdWx0KTtcbiAgICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgYnJvd3NlciBmcm9tICd3ZWJleHRlbnNpb24tcG9seWZpbGwnO1xuaW1wb3J0IHR5cGUgeyBDaGFubmVsQ29udGV4dCB9IGZyb20gJ3NyYy9zaGFyZWQvdHlwZXMvQ2hhbm5lbENvbnRleHQnO1xuaW1wb3J0IHR5cGUgeyBSdW50aW1lUG9ydCB9IGZyb20gJy4uL3dlYmFwaXMvUnVudGltZVBvcnQnO1xuXG5mdW5jdGlvbiBpc0Nocm9tZVBvcnRTZW5kZXIoXG4gIHg6IGJyb3dzZXIuUnVudGltZS5Qb3J0WydzZW5kZXInXSB8IGNocm9tZS5ydW50aW1lLlBvcnRbJ3NlbmRlciddXG4pOiB4IGlzIGNocm9tZS5ydW50aW1lLlBvcnRbJ3NlbmRlciddIHtcbiAgcmV0dXJuIHggPyAnb3JpZ2luJyBpbiB4IDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldFBvcnRPcmlnaW4ocG9ydDogUnVudGltZVBvcnQpIHtcbiAgaWYgKGlzQ2hyb21lUG9ydFNlbmRlcihwb3J0LnNlbmRlcikpIHtcbiAgICByZXR1cm4gcG9ydC5zZW5kZXI/Lm9yaWdpbjtcbiAgfSBlbHNlIGlmIChwb3J0LnNlbmRlcj8udXJsKSB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChwb3J0LnNlbmRlci51cmwpO1xuICAgIHJldHVybiB1cmwub3JpZ2luO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQb3J0Q29udGV4dChwb3J0OiBSdW50aW1lUG9ydCk6IFBhcnRpYWw8Q2hhbm5lbENvbnRleHQ+IHtcbiAgcmV0dXJuIHtcbiAgICBvcmlnaW46IGdldFBvcnRPcmlnaW4ocG9ydCksXG4gICAgdGFiSWQ6IHBvcnQuc2VuZGVyPy50YWI/LmlkLFxuICB9O1xufVxuIiwiaW1wb3J0IGJyb3dzZXIgZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsJztcbmltcG9ydCB0eXBlIHsgUG9ydE1lc3NhZ2VIYW5kbGVyIH0gZnJvbSAnLi4vUG9ydFJlZ2lzdHJ5JztcbmltcG9ydCB7IG1hcFJQQ01lc3NhZ2VUb0NvbnRyb2xsZXIgfSBmcm9tICcuLi9tYXBSUENNZXNzYWdlVG9Db250cm9sbGVyJztcbmltcG9ydCB7IGdldFBvcnRDb250ZXh0IH0gZnJvbSAnLi4vZ2V0UG9ydENvbnRleHQnO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUG9ydE1lc3NhZ2VIYW5kbGVyPFQ+KHtcbiAgY29udHJvbGxlcixcbiAgY2hlY2ssXG59OiB7XG4gIGNvbnRyb2xsZXI6IFQ7XG4gIGNoZWNrOiAocG9ydDogY2hyb21lLnJ1bnRpbWUuUG9ydCB8IGJyb3dzZXIuUnVudGltZS5Qb3J0KSA9PiBib29sZWFuO1xufSk6IFBvcnRNZXNzYWdlSGFuZGxlciB7XG4gIHJldHVybiBmdW5jdGlvbiBwb3J0TWVzc2FnZUhhbmRsZXIocG9ydCwgbXNnKSB7XG4gICAgaWYgKCFjaGVjayhwb3J0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0ID0gZ2V0UG9ydENvbnRleHQocG9ydCk7XG4gICAgbWFwUlBDTWVzc2FnZVRvQ29udHJvbGxlcihwb3J0LCBtc2csIGNvbnRyb2xsZXIsIGNvbnRleHQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xufVxuIiwiaW1wb3J0IGJyb3dzZXIgZnJvbSAnd2ViZXh0ZW5zaW9uLXBvbHlmaWxsJztcbmltcG9ydCB7IGlzSnNvblJwY1BheWxvYWQsIGlzSnNvblJwY1JlcXVlc3QgfSBmcm9tICdAanNvbi1ycGMtdG9vbHMvdXRpbHMnO1xuaW1wb3J0IHsgZ2V0UG9ydENvbnRleHQgfSBmcm9tICcuLi9nZXRQb3J0Q29udGV4dCc7XG5pbXBvcnQgdHlwZSB7IEh0dHBDb25uZWN0aW9uIH0gZnJvbSAnLi4vSHR0cENvbm5lY3Rpb24nO1xuaW1wb3J0IHR5cGUgeyBQb3J0TWVzc2FnZUhhbmRsZXIgfSBmcm9tICcuLi9Qb3J0UmVnaXN0cnknO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSHR0cENvbm5lY3Rpb25NZXNzYWdlSGFuZGxlcihcbiAgaHR0cENvbm5lY3Rpb246IEh0dHBDb25uZWN0aW9uXG4pOiBQb3J0TWVzc2FnZUhhbmRsZXIge1xuICByZXR1cm4gZnVuY3Rpb24gaHR0cENvbm5lY3Rpb25NZXNzYWdlSGFuZGxlcihwb3J0LCBtc2cpIHtcbiAgICBpZiAocG9ydC5uYW1lICE9PSBgJHticm93c2VyLnJ1bnRpbWUuaWR9L2V0aGVyZXVtYCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0ID0gZ2V0UG9ydENvbnRleHQocG9ydCk7XG4gICAgaWYgKGlzSnNvblJwY1BheWxvYWQobXNnKSAmJiBpc0pzb25ScGNSZXF1ZXN0KG1zZykgJiYgQm9vbGVhbihtc2cubWV0aG9kKSkge1xuICAgICAgaHR0cENvbm5lY3Rpb24uc2VuZChtc2csIGNvbnRleHQpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICBwb3J0LnBvc3RNZXNzYWdlKHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCB7IFdhbGxldCB9IGZyb20gJ3NyYy9zaGFyZWQvdHlwZXMvV2FsbGV0JztcbmltcG9ydCB0eXBlIHsgQWNjb3VudCB9IGZyb20gJ3NyYy9iYWNrZ3JvdW5kL2FjY291bnQvQWNjb3VudCc7XG5pbXBvcnQgeyBlbWl0dGVyIH0gZnJvbSAnc3JjL2JhY2tncm91bmQvZXZlbnRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUFjY291bnRFdmVudHMoeyBhY2NvdW50IH06IHsgYWNjb3VudDogQWNjb3VudCB9KSB7XG4gIGNvbnN0IGRpc3Bvc2VyczogQXJyYXk8KCkgPT4gdm9pZD4gPSBbXTtcbiAgY29uc3QgcmVtb3ZlTGlzdGVuZXJzID0gKCkgPT4ge1xuICAgIGRpc3Bvc2Vycy5mb3JFYWNoKChjYikgPT4gY2IoKSk7XG4gICAgZGlzcG9zZXJzLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgZnVuY3Rpb24gYWRkV2FsbGV0RXZlbnRMaXN0ZW5lcnMod2FsbGV0OiBXYWxsZXQpIHtcbiAgICBkaXNwb3NlcnMucHVzaChcbiAgICAgIHdhbGxldC5lbWl0dGVyLm9uKCdyZWNvcmRVcGRhdGVkJywgKCkgPT4ge1xuICAgICAgICBlbWl0dGVyLmVtaXQoJ2FjY291bnRzQ2hhbmdlZCcpO1xuICAgICAgfSksXG4gICAgICB3YWxsZXQuZW1pdHRlci5vbignY3VycmVudEFkZHJlc3NDaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgIGVtaXR0ZXIuZW1pdCgnYWNjb3VudHNDaGFuZ2VkJyk7XG4gICAgICB9KSxcbiAgICAgIHdhbGxldC5lbWl0dGVyLm9uKCdwZXJtaXNzaW9uc1VwZGF0ZWQnLCAoKSA9PiB7XG4gICAgICAgIGVtaXR0ZXIuZW1pdCgnYWNjb3VudHNDaGFuZ2VkJyk7XG4gICAgICB9KSxcbiAgICAgIHdhbGxldC5lbWl0dGVyLm9uKCdjaGFpbkNoYW5nZWQnLCAoKSA9PiB7XG4gICAgICAgIGVtaXR0ZXIuZW1pdCgnY2hhaW5DaGFuZ2VkJyk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBhZGRXYWxsZXRFdmVudExpc3RlbmVycyhhY2NvdW50LmdldEN1cnJlbnRXYWxsZXQoKSk7XG5cbiAgYWNjb3VudC5vbignYXV0aGVudGljYXRlZCcsIGFzeW5jICgpID0+IHtcbiAgICBlbWl0dGVyLmVtaXQoJ2FjY291bnRzQ2hhbmdlZCcpO1xuICAgIGVtaXR0ZXIuZW1pdCgnY2hhaW5DaGFuZ2VkJyk7XG4gIH0pO1xuXG4gIGFjY291bnQub24oJ3Jlc2V0JywgKCkgPT4ge1xuICAgIHJlbW92ZUxpc3RlbmVycygpO1xuICAgIGFkZFdhbGxldEV2ZW50TGlzdGVuZXJzKGFjY291bnQuZ2V0Q3VycmVudFdhbGxldCgpKTtcbiAgICBlbWl0dGVyLmVtaXQoJ2FjY291bnRzQ2hhbmdlZCcpO1xuICB9KTtcbn1cbiIsImltcG9ydCBicm93c2VyIGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbCc7XG5pbXBvcnQgdHlwZSB7IEFjY291bnQgfSBmcm9tICdzcmMvYmFja2dyb3VuZC9hY2NvdW50L0FjY291bnQnO1xuaW1wb3J0IHsgZW1pdHRlciB9IGZyb20gJ3NyYy9iYWNrZ3JvdW5kL2V2ZW50cyc7XG5pbXBvcnQgdHlwZSB7IFJ1bnRpbWVQb3J0IH0gZnJvbSAnc3JjL2JhY2tncm91bmQvd2ViYXBpcy9SdW50aW1lUG9ydCc7XG5pbXBvcnQgeyBnZXRQb3J0Q29udGV4dCB9IGZyb20gJy4uL2dldFBvcnRDb250ZXh0JztcblxuaW50ZXJmYWNlIExpc3RlbmVyIHtcbiAgc3RhcnRMaXN0ZW5pbmcoKTogdm9pZDtcbiAgc3RvcExpc3RlbmluZygpOiB2b2lkO1xufVxuXG50eXBlIFBvcnRzR2V0dGVyID0gKCkgPT4gQXJyYXk8UnVudGltZVBvcnQ+O1xuXG5leHBvcnQgY2xhc3MgRXRoZXJldW1FdmVudHNCcm9hZGNhc3RlciBpbXBsZW1lbnRzIExpc3RlbmVyIHtcbiAgYWNjb3VudDogQWNjb3VudDtcbiAgZ2V0QWN0aXZlUG9ydHM6IFBvcnRzR2V0dGVyO1xuICBwcml2YXRlIGRpc3Bvc2VyczogQXJyYXk8KCkgPT4gdm9pZD47XG5cbiAgY29uc3RydWN0b3Ioe1xuICAgIGFjY291bnQsXG4gICAgZ2V0QWN0aXZlUG9ydHMsXG4gIH06IHtcbiAgICBhY2NvdW50OiBBY2NvdW50O1xuICAgIGdldEFjdGl2ZVBvcnRzOiBQb3J0c0dldHRlcjtcbiAgfSkge1xuICAgIHRoaXMuYWNjb3VudCA9IGFjY291bnQ7XG4gICAgdGhpcy5nZXRBY3RpdmVQb3J0cyA9IGdldEFjdGl2ZVBvcnRzO1xuICAgIHRoaXMuZGlzcG9zZXJzID0gW107XG4gIH1cblxuICBjbGVhbnVwKCkge1xuICAgIHRoaXMuZGlzcG9zZXJzLmZvckVhY2goKGNiKSA9PiBjYigpKTtcbiAgICB0aGlzLmRpc3Bvc2VycyA9IFtdO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDbGllbnRQb3J0cygpIHtcbiAgICBjb25zdCBwb3J0cyA9IHRoaXMuZ2V0QWN0aXZlUG9ydHMoKTtcbiAgICByZXR1cm4gcG9ydHMuZmlsdGVyKFxuICAgICAgKHBvcnQpID0+IHBvcnQubmFtZSA9PT0gYCR7YnJvd3Nlci5ydW50aW1lLmlkfS9ldGhlcmV1bWBcbiAgICApO1xuICB9XG5cbiAgc3RhcnRMaXN0ZW5pbmcoKSB7XG4gICAgdGhpcy5kaXNwb3NlcnMucHVzaChcbiAgICAgIGVtaXR0ZXIub24oJ2FjY291bnRzQ2hhbmdlZCcsICgpID0+IHtcbiAgICAgICAgdGhpcy5nZXRDbGllbnRQb3J0cygpLmZvckVhY2goYXN5bmMgKHBvcnQpID0+IHtcbiAgICAgICAgICBjb25zdCB3YWxsZXQgPSB0aGlzLmFjY291bnQuZ2V0Q3VycmVudFdhbGxldCgpO1xuICAgICAgICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgd2FsbGV0LnB1YmxpY0V0aGVyZXVtQ29udHJvbGxlci5ldGhfYWNjb3VudHMoe1xuICAgICAgICAgICAgY29udGV4dDogZ2V0UG9ydENvbnRleHQocG9ydCksXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcG9ydC5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICB0eXBlOiAnZXRoZXJldW1FdmVudCcsXG4gICAgICAgICAgICBldmVudDogJ2FjY291bnRzQ2hhbmdlZCcsXG4gICAgICAgICAgICB2YWx1ZTogYWNjb3VudHMsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgdGhpcy5kaXNwb3NlcnMucHVzaChcbiAgICAgIGVtaXR0ZXIub24oJ2NoYWluQ2hhbmdlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgdGhpcy5nZXRDbGllbnRQb3J0cygpLmZvckVhY2goYXN5bmMgKHBvcnQpID0+IHtcbiAgICAgICAgICBjb25zdCB3YWxsZXQgPSB0aGlzLmFjY291bnQuZ2V0Q3VycmVudFdhbGxldCgpO1xuICAgICAgICAgIGNvbnN0IGNoYWluSWQgPSBhd2FpdCB3YWxsZXQucHVibGljRXRoZXJldW1Db250cm9sbGVyLmV0aF9jaGFpbklkKHtcbiAgICAgICAgICAgIGNvbnRleHQ6IGdldFBvcnRDb250ZXh0KHBvcnQpLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHBvcnQucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgdHlwZTogJ2V0aGVyZXVtRXZlbnQnLFxuICAgICAgICAgICAgZXZlbnQ6ICdjaGFpbkNoYW5nZWQnLFxuICAgICAgICAgICAgdmFsdWU6IGNoYWluSWQsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgc3RvcExpc3RlbmluZygpIHtcbiAgICB0aGlzLmNsZWFudXA/LigpO1xuICB9XG59XG4iLCJ0eXBlIFB1YmxpY01ldGhvZFBhcmFtczxUID0gdW5kZWZpbmVkPiA9IFQgZXh0ZW5kcyB1bmRlZmluZWRcbiAgPyBuZXZlclxuICA6IHsgcGFyYW1zOiBUIH07XG5cbnR5cGUgS2V5ID0gc3RyaW5nIHwgbnVtYmVyO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbnR5cGUgVmFsdWUgPSBhbnk7XG5cbmV4cG9ydCBjbGFzcyBNZW1vcnlDYWNoZVJQQyB7XG4gIHByaXZhdGUgbWFwOiBNYXA8S2V5LCBWYWx1ZT47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5tYXAgPSBuZXcgTWFwKCk7XG4gIH1cblxuICBhc3luYyBzZXQoe1xuICAgIHBhcmFtczogeyBrZXksIHZhbHVlIH0sXG4gIH06IFB1YmxpY01ldGhvZFBhcmFtczx7IGtleTogS2V5OyB2YWx1ZTogVmFsdWUgfT4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLm1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gIH1cblxuICBhc3luYyBnZXQoeyBwYXJhbXM6IHsga2V5IH0gfTogUHVibGljTWV0aG9kUGFyYW1zPHsga2V5OiBLZXkgfT4pIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KGtleSk7XG4gIH1cblxuICBhc3luYyBnZXRBbGwoKTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBWYWx1ZT4+IHtcbiAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKHRoaXMubWFwKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgZW1pdHRlciB9IGZyb20gJy4vZXZlbnRzJztcblxuY29uc3QgT05FX0RBWSA9IDEwMDAgKiA2MCAqIDYwICogMjQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydChvbklkbGU6ICgpID0+IHZvaWQpIHtcbiAgbGV0IGlkOiBOb2RlSlMuVGltZW91dCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICBmdW5jdGlvbiB3YWl0QW5kTm90aWZ5KCkge1xuICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgaWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIG9uSWRsZSgpO1xuICAgIH0sIE9ORV9EQVkpO1xuICB9XG5cbiAgZW1pdHRlci5vbigndXNlckFjdGl2aXR5JywgKCkgPT4ge1xuICAgIHdhaXRBbmROb3RpZnkoKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQgQnVmZmVyIGZyb20gJ2J1ZmZlcic7XG5cbmdsb2JhbC5CdWZmZXIgPSBnbG9iYWwuQnVmZmVyIHx8IEJ1ZmZlci5CdWZmZXI7XG4iLCJpbXBvcnQgeyBub3RpZmljYXRpb25XaW5kb3cgfSBmcm9tICdzcmMvYmFja2dyb3VuZC9Ob3RpZmljYXRpb25XaW5kb3cvTm90aWZpY2F0aW9uV2luZG93JztcbmltcG9ydCB7IGlzUnBjRXJyb3IsIGlzUnBjUmVxdWVzdCwgaXNScGNSZXN1bHQgfSBmcm9tICdzcmMvc2hhcmVkL2N1c3RvbS1ycGMnO1xuaW1wb3J0IHR5cGUgeyBQb3J0TWVzc2FnZUhhbmRsZXIgfSBmcm9tICcuLi9Qb3J0UmVnaXN0cnknO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm90aWZpY2F0aW9uV2luZG93TWVzc2FnZUhhbmRsZXIoKTogUG9ydE1lc3NhZ2VIYW5kbGVyIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIG5vdGlmaWNhdGlvbldpbmRvd01lc3NhZ2VIYW5kbGVyKHBvcnQsIG1zZykge1xuICAgIGlmIChwb3J0Lm5hbWUgIT09ICd3aW5kb3cnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzUnBjUmVzdWx0KG1zZykpIHtcbiAgICAgIG5vdGlmaWNhdGlvbldpbmRvdy5lbWl0KCdyZXNvbHZlJywgbXNnKTtcbiAgICB9IGVsc2UgaWYgKGlzUnBjRXJyb3IobXNnKSkge1xuICAgICAgbm90aWZpY2F0aW9uV2luZG93LmVtaXQoJ3JlamVjdCcsIG1zZyk7XG4gICAgfSBlbHNlIGlmIChpc1JwY1JlcXVlc3QobXNnKSkge1xuICAgICAgaWYgKG1zZy5tZXRob2QgPT09ICdjbG9zZUN1cnJlbnRXaW5kb3cnKSB7XG4gICAgICAgIG5vdGlmaWNhdGlvbldpbmRvdy5jbG9zZUN1cnJlbnRXaW5kb3coKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xufVxuIiwiaW1wb3J0IHR5cGUgeyBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGpzb24tcnBjLXRvb2xzL3V0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBScGNSZXF1ZXN0PFQgPSB1bmtub3duPiB7XG4gIGlkOiBzdHJpbmc7XG4gIG1ldGhvZDogc3RyaW5nO1xuICBwYXJhbXM/OiBUO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJwY1Jlc3VsdDxUID0gdW5rbm93bj4ge1xuICBpZDogc3RyaW5nO1xuICByZXN1bHQ6IFQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUnBjRXJyb3Ige1xuICBpZDogc3RyaW5nO1xuICBlcnJvcjogRXJyb3JSZXNwb25zZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUnBjUmVzdWx0PFQgPSB1bmtub3duPihcbiAgcGF5bG9hZDogUGFydGlhbDxScGNSZXN1bHQ8VD4+IHwgdW5rbm93blxuKTogcGF5bG9hZCBpcyBScGNSZXN1bHQ8VD4ge1xuICByZXR1cm4gcGF5bG9hZCAhPSBudWxsICYmICdpZCcgaW4gcGF5bG9hZCAmJiAncmVzdWx0JyBpbiBwYXlsb2FkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNScGNFcnJvcihcbiAgcGF5bG9hZDogUGFydGlhbDxScGNFcnJvcj4gfCB1bmtub3duXG4pOiBwYXlsb2FkIGlzIFJwY0Vycm9yIHtcbiAgcmV0dXJuIHBheWxvYWQgIT0gbnVsbCAmJiAnaWQnIGluIHBheWxvYWQgJiYgJ2Vycm9yJyBpbiBwYXlsb2FkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNScGNSZXF1ZXN0KFxuICBwYXlsb2FkOiBQYXJ0aWFsPFJwY1JlcXVlc3Q+IHwgdW5rbm93blxuKTogcGF5bG9hZCBpcyBScGNSZXF1ZXN0IHtcbiAgcmV0dXJuIHBheWxvYWQgIT0gbnVsbCAmJiAnaWQnIGluIHBheWxvYWQgJiYgJ21ldGhvZCcgaW4gcGF5bG9hZDtcbn1cbiJdLCJuYW1lcyI6WyIkNjM1N2RiNGQyMzc1OTIzNyRleHBvcnQkNjUwM2VjNmU4YWFiYmFmIiwiJDYzNTdkYjRkMjM3NTkyMzckZXhwb3J0JGY3YWQwMzI4ODYxZTJmMDMiLCIkNjM1N2RiNGQyMzc1OTIzNyR2YXIkbWFwcGluZyIsInBhaXJzIiwia2V5cyIsIk9iamVjdCIsImkiLCJsZW5ndGgiLCJpZCIsInJlc29sdmVkIiwiRXJyb3IiLCJnbG9iYWxUaGlzIiwicmVmMSIsImNocm9tZSIsInJ1bnRpbWUiLCJicm93c2VyIiwiZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJDSFJPTUVfU0VORF9NRVNTQUdFX0NBTExCQUNLX05PX1JFU1BPTlNFX01FU1NBR0UiLCJ3cmFwQVBJcyIsImV4dGVuc2lvbkFQSXMiLCJhcGlNZXRhZGF0YSIsImFsYXJtcyIsImNsZWFyIiwibWluQXJncyIsIm1heEFyZ3MiLCJjbGVhckFsbCIsImdldCIsImdldEFsbCIsImJvb2ttYXJrcyIsImNyZWF0ZSIsImdldENoaWxkcmVuIiwiZ2V0UmVjZW50IiwiZ2V0U3ViVHJlZSIsImdldFRyZWUiLCJtb3ZlIiwicmVtb3ZlIiwicmVtb3ZlVHJlZSIsInNlYXJjaCIsInVwZGF0ZSIsImJyb3dzZXJBY3Rpb24iLCJkaXNhYmxlIiwiZmFsbGJhY2tUb05vQ2FsbGJhY2siLCJlbmFibGUiLCJnZXRCYWRnZUJhY2tncm91bmRDb2xvciIsImdldEJhZGdlVGV4dCIsImdldFBvcHVwIiwiZ2V0VGl0bGUiLCJvcGVuUG9wdXAiLCJzZXRCYWRnZUJhY2tncm91bmRDb2xvciIsInNldEJhZGdlVGV4dCIsInNldEljb24iLCJzZXRQb3B1cCIsInNldFRpdGxlIiwiYnJvd3NpbmdEYXRhIiwicmVtb3ZlQ2FjaGUiLCJyZW1vdmVDb29raWVzIiwicmVtb3ZlRG93bmxvYWRzIiwicmVtb3ZlRm9ybURhdGEiLCJyZW1vdmVIaXN0b3J5IiwicmVtb3ZlTG9jYWxTdG9yYWdlIiwicmVtb3ZlUGFzc3dvcmRzIiwicmVtb3ZlUGx1Z2luRGF0YSIsInNldHRpbmdzIiwiY29tbWFuZHMiLCJjb250ZXh0TWVudXMiLCJyZW1vdmVBbGwiLCJjb29raWVzIiwiZ2V0QWxsQ29va2llU3RvcmVzIiwic2V0IiwiZGV2dG9vbHMiLCJpbnNwZWN0ZWRXaW5kb3ciLCJldmFsIiwic2luZ2xlQ2FsbGJhY2tBcmciLCJwYW5lbHMiLCJlbGVtZW50cyIsImNyZWF0ZVNpZGViYXJQYW5lIiwiZG93bmxvYWRzIiwiY2FuY2VsIiwiZG93bmxvYWQiLCJlcmFzZSIsImdldEZpbGVJY29uIiwib3BlbiIsInBhdXNlIiwicmVtb3ZlRmlsZSIsInJlc3VtZSIsInNob3ciLCJleHRlbnNpb24iLCJpc0FsbG93ZWRGaWxlU2NoZW1lQWNjZXNzIiwiaXNBbGxvd2VkSW5jb2duaXRvQWNjZXNzIiwiaGlzdG9yeSIsImFkZFVybCIsImRlbGV0ZUFsbCIsImRlbGV0ZVJhbmdlIiwiZGVsZXRlVXJsIiwiZ2V0VmlzaXRzIiwiaTE4biIsImRldGVjdExhbmd1YWdlIiwiZ2V0QWNjZXB0TGFuZ3VhZ2VzIiwiaWRlbnRpdHkiLCJsYXVuY2hXZWJBdXRoRmxvdyIsImlkbGUiLCJxdWVyeVN0YXRlIiwibWFuYWdlbWVudCIsImdldFNlbGYiLCJzZXRFbmFibGVkIiwidW5pbnN0YWxsU2VsZiIsIm5vdGlmaWNhdGlvbnMiLCJnZXRQZXJtaXNzaW9uTGV2ZWwiLCJwYWdlQWN0aW9uIiwiaGlkZSIsInBlcm1pc3Npb25zIiwiY29udGFpbnMiLCJyZXF1ZXN0IiwiZ2V0QmFja2dyb3VuZFBhZ2UiLCJnZXRQbGF0Zm9ybUluZm8iLCJvcGVuT3B0aW9uc1BhZ2UiLCJyZXF1ZXN0VXBkYXRlQ2hlY2siLCJzZW5kTWVzc2FnZSIsInNlbmROYXRpdmVNZXNzYWdlIiwic2V0VW5pbnN0YWxsVVJMIiwic2Vzc2lvbnMiLCJnZXREZXZpY2VzIiwiZ2V0UmVjZW50bHlDbG9zZWQiLCJyZXN0b3JlIiwic3RvcmFnZSIsImxvY2FsIiwiZ2V0Qnl0ZXNJblVzZSIsIm1hbmFnZWQiLCJzeW5jIiwidGFicyIsImNhcHR1cmVWaXNpYmxlVGFiIiwiZGlzY2FyZCIsImR1cGxpY2F0ZSIsImV4ZWN1dGVTY3JpcHQiLCJnZXRDdXJyZW50IiwiZ2V0Wm9vbSIsImdldFpvb21TZXR0aW5ncyIsImdvQmFjayIsImdvRm9yd2FyZCIsImhpZ2hsaWdodCIsImluc2VydENTUyIsInF1ZXJ5IiwicmVsb2FkIiwicmVtb3ZlQ1NTIiwic2V0Wm9vbSIsInNldFpvb21TZXR0aW5ncyIsInRvcFNpdGVzIiwid2ViTmF2aWdhdGlvbiIsImdldEFsbEZyYW1lcyIsImdldEZyYW1lIiwid2ViUmVxdWVzdCIsImhhbmRsZXJCZWhhdmlvckNoYW5nZWQiLCJ3aW5kb3dzIiwiZ2V0TGFzdEZvY3VzZWQiLCJEZWZhdWx0V2Vha01hcCIsIldlYWtNYXAiLCJrZXkiLCJ0aGlzIiwiaGFzIiwiY3JlYXRlSXRlbSIsInN1cGVyIiwiY29uc3RydWN0b3IiLCJpdGVtcyIsIm1ha2VDYWxsYmFjayIsInByb21pc2UiLCJtZXRhZGF0YSIsImNhbGxiYWNrQXJncyIsImxhc3RFcnJvciIsInJlamVjdCIsIm1lc3NhZ2UiLCJyZXNvbHZlIiwicGx1cmFsaXplQXJndW1lbnRzIiwibnVtQXJncyIsIndyYXBNZXRob2QiLCJ0YXJnZXQiLCJtZXRob2QiLCJ3cmFwcGVyIiwiUHJveHkiLCJhcHBseSIsInRhcmdldE1ldGhvZCIsInRoaXNPYmoiLCJhcmdzIiwiY2FsbCIsImhhc093blByb3BlcnR5IiwiRnVuY3Rpb24iLCJiaW5kIiwid3JhcE9iamVjdCIsIndyYXBwZXJzIiwiY2FjaGUiLCJoYW5kbGVycyIsInByb3h5VGFyZ2V0IiwicHJvcCIsInJlY2VpdmVyIiwidmFsdWUiLCJuYW1lIiwiUHJvbWlzZSIsImNiRXJyb3IiLCJjb25zb2xlIiwid2FybiIsIm5vQ2FsbGJhY2siLCJ3cmFwQXN5bmNGdW5jdGlvbiIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImRlc2MiLCJSZWZsZWN0IiwiZGVsZXRlUHJvcGVydHkiLCJ3cmFwRXZlbnQiLCJ3cmFwcGVyTWFwIiwiYWRkTGlzdGVuZXIiLCJsaXN0ZW5lciIsImhhc0xpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJvblJlcXVlc3RGaW5pc2hlZFdyYXBwZXJzIiwicmVxIiwid3JhcHBlZFJlcSIsImdldENvbnRlbnQiLCJvbk1lc3NhZ2VXcmFwcGVycyIsInNlbmRlciIsInNlbmRSZXNwb25zZSIsIndyYXBwZWRTZW5kUmVzcG9uc2UiLCJyZXN1bHQiLCJkaWRDYWxsU2VuZFJlc3BvbnNlIiwic2VuZFJlc3BvbnNlUHJvbWlzZSIsInJlc3BvbnNlIiwiZXJyIiwiaXNSZXN1bHRUaGVuYWJsZSIsInRoZW4iLCJzZW5kUHJvbWlzZWRSZXN1bHQiLCJtc2ciLCJlcnJvciIsIl9fbW96V2ViRXh0ZW5zaW9uUG9seWZpbGxSZWplY3RfXyIsImNhdGNoIiwid3JhcHBlZFNlbmRNZXNzYWdlQ2FsbGJhY2siLCJyZXBseSIsIndyYXBwZWRTZW5kTWVzc2FnZSIsImFwaU5hbWVzcGFjZU9iaiIsIndyYXBwZWRDYiIsInB1c2giLCJzdGF0aWNXcmFwcGVycyIsIm5ldHdvcmsiLCJvblJlcXVlc3RGaW5pc2hlZCIsIm9uTWVzc2FnZSIsIm9uTWVzc2FnZUV4dGVybmFsIiwic2V0dGluZ01ldGFkYXRhIiwicHJpdmFjeSIsInNlcnZpY2VzIiwid2Vic2l0ZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXNzZXJ0IiwidmFsIiwiaW5oZXJpdHMiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwiVGVtcEN0b3IiLCJCTiIsIm51bWJlciIsImJhc2UiLCJlbmRpYW4iLCJpc0JOIiwibmVnYXRpdmUiLCJ3b3JkcyIsInJlZCIsIl9pbml0IiwiQnVmZmVyIiwid29yZFNpemUiLCJ3aW5kb3ciLCJwYXJjZWxSZXF1aXJlIiwiZSIsInBhcnNlSGV4NEJpdHMiLCJzdHJpbmciLCJpbmRleCIsImMiLCJjaGFyQ29kZUF0IiwicGFyc2VIZXhCeXRlIiwibG93ZXJCb3VuZCIsInIiLCJwYXJzZUJhc2UiLCJzdHIiLCJzdGFydCIsImVuZCIsIm11bCIsImIiLCJsZW4iLCJNYXRoIiwibWluIiwiZGVzdCIsInNyYyIsIm51bSIsIkFycmF5IiwiaXNBcnJheSIsIm1heCIsImxlZnQiLCJyaWdodCIsImNtcCIsIl9pbml0TnVtYmVyIiwiX2luaXRBcnJheSIsInRvU3RyaW5nIiwicmVwbGFjZSIsIl9wYXJzZUhleCIsIl9wYXJzZUJhc2UiLCJ0b0FycmF5IiwiY2VpbCIsImoiLCJ3Iiwib2ZmIiwiX3N0cmlwIiwibGltYkxlbiIsImxpbWJQb3ciLCJ0b3RhbCIsIm1vZCIsIndvcmQiLCJpbXVsbiIsIl9pYWRkbiIsInBvdyIsImNvcHkiLCJfbW92ZSIsImNsb25lIiwiX2V4cGFuZCIsInNpemUiLCJfbm9ybVNpZ24iLCJTeW1ib2wiLCJmb3IiLCJpbnNwZWN0IiwiZTEiLCJ6ZXJvcyIsImdyb3VwU2l6ZXMiLCJncm91cEJhc2VzIiwicGFkZGluZyIsIm91dCIsImNhcnJ5IiwiZ3JvdXBTaXplIiwiZ3JvdXBCYXNlIiwiaXNaZXJvIiwibW9kcm4iLCJpZGl2biIsInRvTnVtYmVyIiwicmV0IiwidG9KU09OIiwidG9CdWZmZXIiLCJ0b0FycmF5TGlrZSIsInNtYWxsTXVsVG8iLCJzZWxmIiwiYSIsImxvIiwiayIsIm5jYXJyeSIsInJ3b3JkIiwibWF4SiIsIkFycmF5VHlwZSIsImJ5dGVMZW5ndGgiLCJyZXFMZW5ndGgiLCJyZXMiLCJhbGxvY1Vuc2FmZSIsImFsbG9jYXRlIiwiX3RvQXJyYXlMaWtlTEUiLCJwb3NpdGlvbiIsInNoaWZ0IiwiX3RvQXJyYXlMaWtlQkUiLCJjbHozMiIsIl9jb3VudEJpdHMiLCJ0IiwiX3plcm9CaXRzIiwiYml0TGVuZ3RoIiwiaGkiLCJ6ZXJvQml0cyIsInRvVHdvcyIsIndpZHRoIiwiYWJzIiwiaW5vdG4iLCJpYWRkbiIsImZyb21Ud29zIiwidGVzdG4iLCJub3RuIiwiaW5lZyIsImlzTmVnIiwibmVnIiwiaXVvciIsImlvciIsIm9yIiwidW9yIiwiaXVhbmQiLCJpYW5kIiwiYW5kIiwidWFuZCIsIml1eG9yIiwiaXhvciIsInhvciIsInV4b3IiLCJieXRlc05lZWRlZCIsImJpdHNMZWZ0Iiwic2V0biIsImJpdCIsIndiaXQiLCJpYWRkIiwiaXN1YiIsImFkZCIsInN1YiIsImNvbWIxME11bFRvIiwibWlkIiwibyIsImEwIiwiYWwwIiwiYWgwIiwiYTEiLCJhbDEiLCJhaDEiLCJhMiIsImFsMiIsImFoMiIsImEzIiwiYWwzIiwiYWgzIiwiYTQiLCJhbDQiLCJhaDQiLCJhNSIsImFsNSIsImFoNSIsImE2IiwiYWw2IiwiYWg2IiwiYTciLCJhbDciLCJhaDciLCJhOCIsImFsOCIsImFoOCIsImE5IiwiYWw5IiwiYWg5IiwiYjAiLCJibDAiLCJiaDAiLCJiMSIsImJsMSIsImJoMSIsImIyIiwiYmwyIiwiYmgyIiwiYjMiLCJibDMiLCJiaDMiLCJiNCIsImJsNCIsImJoNCIsImI1IiwiYmw1IiwiYmg1IiwiYjYiLCJibDYiLCJiaDYiLCJiNyIsImJsNyIsImJoNyIsImI4IiwiYmw4IiwiYmg4IiwiYjkiLCJibDkiLCJiaDkiLCJ3MCIsImltdWwiLCJ3MSIsIncyIiwidzMiLCJ3NCIsInc1IiwidzYiLCJ3NyIsInc4IiwidzkiLCJ3MTAiLCJ3MTEiLCJ3MTIiLCJ3MTMiLCJ3MTQiLCJ3MTUiLCJ3MTYiLCJ3MTciLCJ3MTgiLCJiaWdNdWxUbyIsImhuY2FycnkiLCJqdW1ib011bFRvIiwiRkZUTSIsIngiLCJ5IiwibXVsVG8iLCJtYWtlUkJUIiwiTiIsImwiLCJyZXZCaW4iLCJyYiIsInBlcm11dGUiLCJyYnQiLCJyd3MiLCJpd3MiLCJydHdzIiwiaXR3cyIsInRyYW5zZm9ybSIsInMiLCJydHdkZiIsImNvcyIsIlBJIiwiaXR3ZGYiLCJzaW4iLCJwIiwicnR3ZGZfIiwiaXR3ZGZfIiwicmUiLCJpZSIsInJvIiwiaW8iLCJyeCIsImd1ZXNzTGVuMTNiIiwibiIsIm0iLCJvZGQiLCJjb25qdWdhdGUiLCJub3JtYWxpemUxM2IiLCJ3cyIsInJvdW5kIiwiY29udmVydDEzYiIsInN0dWIiLCJwaCIsIm11bHAiLCJfIiwicndzdCIsIml3c3QiLCJucndzIiwibnJ3c3QiLCJuaXdzdCIsInJtd3MiLCJtdWxmIiwiaXNOZWdOdW0iLCJtdWxuIiwic3FyIiwiaXNxciIsInRvQml0QXJyYXkiLCJxIiwiaXVzaGxuIiwiYml0cyIsImNhcnJ5TWFzayIsIm5ld0NhcnJ5IiwiaXNobG4iLCJpdXNocm4iLCJoaW50IiwiZXh0ZW5kZWQiLCJoIiwibWFzayIsIm1hc2tlZFdvcmRzIiwiaXNocm4iLCJzaGxuIiwidXNobG4iLCJzaHJuIiwidXNocm4iLCJpbWFza24iLCJtYXNrbiIsImlzdWJuIiwiYWRkbiIsInN1Ym4iLCJpYWJzIiwiX2lzaGxuc3VibXVsIiwiX3dvcmREaXYiLCJtb2RlIiwiYmhpIiwiZGlmZiIsInFqIiwiZGl2IiwiZGl2bW9kIiwicG9zaXRpdmUiLCJkaXZuIiwidW1vZCIsImRpdlJvdW5kIiwiZG0iLCJoYWxmIiwicjIiLCJhbmRsbiIsImFjYyIsIm1vZG4iLCJlZ2NkIiwiQSIsIkIiLCJDIiwiRCIsImciLCJpc0V2ZW4iLCJ5cCIsInhwIiwiaW0iLCJpc09kZCIsImptIiwiZ2NkIiwiX2ludm1wIiwieDEiLCJ4MiIsImRlbHRhIiwiY21wbiIsImludm0iLCJiaW5jbiIsInVjbXAiLCJndG4iLCJndCIsImd0ZW4iLCJndGUiLCJsdG4iLCJsdCIsImx0ZW4iLCJsdGUiLCJlcW4iLCJlcSIsIlJlZCIsInRvUmVkIiwiY3R4IiwiY29udmVydFRvIiwiX2ZvcmNlUmVkIiwiZnJvbVJlZCIsImNvbnZlcnRGcm9tIiwiZm9yY2VSZWQiLCJyZWRBZGQiLCJyZWRJQWRkIiwicmVkU3ViIiwicmVkSVN1YiIsInJlZFNobCIsInNobCIsInJlZE11bCIsIl92ZXJpZnkyIiwicmVkSU11bCIsInJlZFNxciIsIl92ZXJpZnkxIiwicmVkSVNxciIsInJlZFNxcnQiLCJzcXJ0IiwicmVkSW52bSIsInJlZE5lZyIsInJlZFBvdyIsInByaW1lcyIsImsyNTYiLCJwMjI0IiwicDE5MiIsInAyNTUxOSIsIk1QcmltZSIsInRtcCIsIl90bXAiLCJLMjU2IiwiUDIyNCIsIlAxOTIiLCJQMjU1MTkiLCJwcmltZSIsIl9wcmltZSIsIk1vbnQiLCJpbW9kIiwicmludiIsIm1pbnYiLCJpcmVkdWNlIiwicmxlbiIsInNwbGl0IiwiaW11bEsiLCJ1bmRlZmluZWQiLCJzdHJpcCIsImlucHV0Iiwib3V0cHV0Iiwib3V0TGVuIiwicHJldiIsIm5leHQiLCJtb2QzIiwib25lIiwibk9uZSIsImxwb3ciLCJ6IiwiaW52Iiwid25kIiwiY3VycmVudCIsImN1cnJlbnRMZW4iLCJtb250IiwidSIsIiQzWWhxdSIsIiQ1ZDA5MDUyZDI2Mzg5NmY0JHZhciRsb2dnZXIiLCIkMnJJTmEiLCJMb2dnZXIiLCIkNUxMeUYiLCJ2ZXJzaW9uIiwiJDVkMDkwNTJkMjYzODk2ZjQkdmFyJGFycmF5aWZ5SW50ZWdlciIsInVuc2hpZnQiLCIkNWQwOTA1MmQyNjM4OTZmNCR2YXIkdW5hcnJheWlmeUludGVnZXIiLCJkYXRhIiwib2Zmc2V0IiwiJDVkMDkwNTJkMjYzODk2ZjQkdmFyJF9lbmNvZGUiLCJvYmplY3QiLCJwYXlsb2FkIiwiZm9yRWFjaCIsImNoaWxkIiwiY29uY2F0IiwiaXNCeXRlc0xpa2UiLCJ0aHJvd0FyZ3VtZW50RXJyb3IiLCJzbGljZSIsImFycmF5aWZ5IiwiJDVkMDkwNTJkMjYzODk2ZjQkZXhwb3J0JGM1NjRjZGJiZTZkYTQ5MyIsImhleGxpZnkiLCIkNWQwOTA1MmQyNjM4OTZmNCR2YXIkX2RlY29kZUNoaWxkcmVuIiwiY2hpbGRPZmZzZXQiLCJkZWNvZGVkIiwiJDVkMDkwNTJkMjYzODk2ZjQkdmFyJF9kZWNvZGUiLCJjb25zdW1lZCIsInRocm93RXJyb3IiLCJlcnJvcnMiLCJCVUZGRVJfT1ZFUlJVTiIsImxlbmd0aExlbmd0aCIsIiQ1ZDA5MDUyZDI2Mzg5NmY0JGV4cG9ydCQyZjg3MmMwZjIxMTdiZTY5IiwiYnl0ZXMiLCIkMmU0NDdlMmZjNjQ0NjY4ZSR2YXIkbG9nZ2VyIiwiJGQybk13IiwiJDJlNDQ3ZTJmYzY0NDY2OGUkdmFyJGlzSGV4YWJsZSIsInRvSGV4U3RyaW5nIiwiJDJlNDQ3ZTJmYzY0NDY2OGUkdmFyJGFkZFNsaWNlIiwiYXJyYXkiLCJhcmd1bWVudHMiLCJVaW50OEFycmF5IiwiJDJlNDQ3ZTJmYzY0NDY2OGUkZXhwb3J0JDlhMTRhYmIxYTQ0MGNkNWUiLCIkMmU0NDdlMmZjNjQ0NjY4ZSRleHBvcnQkYjAyYTQwYWZmOGU0YWQxOCIsIiQyZTQ0N2UyZmM2NDQ2NjhlJGV4cG9ydCRjNmZhYmZiZmQwOTdmYzMwIiwiJDJlNDQ3ZTJmYzY0NDY2OGUkdmFyJGlzSW50ZWdlciIsInYiLCIkMmU0NDdlMmZjNjQ0NjY4ZSRleHBvcnQkMzEzMTQyMWE3ZDAxYjRmYiIsIm9wdGlvbnMiLCJjaGVja1NhZmVVaW50NTMiLCJwYXJzZUludCIsIlN0cmluZyIsImFsbG93TWlzc2luZ1ByZWZpeCIsInN1YnN0cmluZyIsImhleCIsImhleFBhZCIsIiQyZTQ0N2UyZmM2NDQ2NjhlJGV4cG9ydCRlZTFiM2U1NGYwNDQxYjIyIiwib2JqZWN0cyIsIm1hcCIsIml0ZW0iLCJyZWR1Y2UiLCJhY2N1bSIsIiQyZTQ0N2UyZmM2NDQ2NjhlJGV4cG9ydCRhOGY0NTc0ZDBlNTY0NDZjIiwiJDJlNDQ3ZTJmYzY0NDY2OGUkZXhwb3J0JDNjZGM3NzBiZjhiMmVkM2QiLCJtYXRjaCIsIiQyZTQ0N2UyZmM2NDQ2NjhlJHZhciRIZXhDaGFyYWN0ZXJzIiwiJDJlNDQ3ZTJmYzY0NDY2OGUkZXhwb3J0JDJiMGQ2YjVmYmU2OThjNzAiLCJmbG9vciIsInRvTG93ZXJDYXNlIiwiJDJlNDQ3ZTJmYzY0NDY2OGUkZXhwb3J0JDEzODgyZjg5NmQzYzA2ODMiLCIkMmU0NDdlMmZjNjQ0NjY4ZSRleHBvcnQkMTVkYTY2NmViYTE5OGMxOCIsImVuZE9mZnNldCIsIiQyZTQ0N2UyZmM2NDQ2NjhlJGV4cG9ydCQ2ZDRiOTk2MjliMzg3NTRhIiwiJDJlNDQ3ZTJmYzY0NDY2OGUkZXhwb3J0JDY5MTZhZjc2MGEzNDFkZDMiLCJ0cmltbWVkIiwiJDJlNDQ3ZTJmYzY0NDY2OGUkZXhwb3J0JDk2N2JjMDA4MmE5Nzg5NDkiLCIkMmU0NDdlMmZjNjQ0NjY4ZSRleHBvcnQkZTljNDZhNTQzNzBiNDdlOCIsIiQyZTQ0N2UyZmM2NDQ2NjhlJGV4cG9ydCQ3ZmIxNzBmMWU0NTc5ODhmIiwic2lnbmF0dXJlIiwiX3ZzIiwicmVjb3ZlcnlQYXJhbSIsInlQYXJpdHlBbmRTIiwiY29tcGFjdCIsInZzIiwicmVjSWQiLCIkMmU0NDdlMmZjNjQ0NjY4ZSRleHBvcnQkNzFiYjlkNzhhNTliYmUyNSIsIiQxWEhqbCIsIiQxYzgwZDkyMTlmOWFhOGJkJHZhciRfcGVybWFuZW50Q2Vuc29yRXJyb3JzIiwiJDFjODBkOTIxOWY5YWE4YmQkdmFyJF9jZW5zb3JFcnJvcnMiLCIkMWM4MGQ5MjE5ZjlhYThiZCR2YXIkTG9nTGV2ZWxzIiwiZGVidWciLCJkZWZhdWx0IiwiaW5mbyIsIndhcm5pbmciLCIkMWM4MGQ5MjE5ZjlhYThiZCR2YXIkX2xvZ0xldmVsIiwiJDFjODBkOTIxOWY5YWE4YmQkdmFyJF9nbG9iYWxMb2dnZXIiLCIkMWM4MGQ5MjE5ZjlhYThiZCR2YXIkX25vcm1hbGl6ZUVycm9yIiwibWlzc2luZyIsImZvcm0iLCJub3JtYWxpemUiLCJqb2luIiwiZnJvbUNoYXJDb2RlIiwiJDFjODBkOTIxOWY5YWE4YmQkdmFyJF9jaGVja05vcm1hbGl6ZSIsIiQxYzgwZDkyMTlmOWFhOGJkJGV4cG9ydCQyNDNlNjJkNzhkM2I1NDRkIiwiTG9nTGV2ZWwxIiwiJDFjODBkOTIxOWY5YWE4YmQkZXhwb3J0JGQ0ZTcxYmMwYjgwZGMwZmIiLCJFcnJvckNvZGUxIiwiJDFjODBkOTIxOWY5YWE4YmQkdmFyJEhFWCIsIiQxYzgwZDkyMTlmOWFhOGJkJGV4cG9ydCRlZmE5YTM5OGQ2MzY4OTkyIiwiX2xvZyIsImxvZ0xldmVsIiwibGV2ZWwiLCJsb2ciLCJsZXZlbHMiLCJERUJVRyIsIklORk8iLCJXQVJOSU5HIiwibWFrZUVycm9yIiwiY29kZSIsInBhcmFtcyIsIlVOS05PV05fRVJST1IiLCJtZXNzYWdlRGV0YWlscyIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZWFzb24iLCJ1cmwiLCJOVU1FUklDX0ZBVUxUIiwiZmF1bHQiLCJDQUxMX0VYQ0VQVElPTiIsIklOU1VGRklDSUVOVF9GVU5EUyIsIk1JU1NJTkdfTkVXIiwiTk9OQ0VfRVhQSVJFRCIsIlJFUExBQ0VNRU5UX1VOREVSUFJJQ0VEIiwiVFJBTlNBQ1RJT05fUkVQTEFDRUQiLCJVTlBSRURJQ1RBQkxFX0dBU19MSU1JVCIsIklOVkFMSURfQVJHVU1FTlQiLCJhcmd1bWVudCIsImNvbmRpdGlvbiIsImFzc2VydEFyZ3VtZW50IiwiY2hlY2tOb3JtYWxpemUiLCJVTlNVUFBPUlRFRF9PUEVSQVRJT04iLCJvcGVyYXRpb24iLCJjaGVja0FyZ3VtZW50Q291bnQiLCJjb3VudCIsImV4cGVjdGVkQ291bnQiLCJNSVNTSU5HX0FSR1VNRU5UIiwiVU5FWFBFQ1RFRF9BUkdVTUVOVCIsImNoZWNrTmV3Iiwia2luZCIsImNoZWNrQWJzdHJhY3QiLCJzdGF0aWMiLCJjZW5zb3JzaGlwIiwicGVybWFuZW50IiwiZ2xvYmFsTG9nZ2VyIiwidmVyc2lvbjEiLCJ2ZXJzaW9uMiIsIndyaXRhYmxlIiwiJDE2ZGNlNWQxMzE2ZTg2MzIkZXhwb3J0JDgzZDg5ZmJmZDgyMzY0OTIiLCIkOTdkZGU4Y2E4NDBjMWU2OSRleHBvcnQkODNkODlmYmZkODIzNjQ5MiIsIiQ0MzM2M2I5OGQ5ZWU2ZTkwJGV4cG9ydCQ4M2Q4OWZiZmQ4MjM2NDkyIiwiJDZiYzQ4Yzc2NzAwYTQ0MTEkZXhwb3J0JDJmODcyYzBmMjExN2JlNjkiLCJ0ZXh0RGF0YSIsImF0b2IiLCIkNmJjNDhjNzY3MDBhNDQxMSRleHBvcnQkYzU2NGNkYmJlNmRhNDkzIiwiYnRvYSIsIiQ4MGI2Y2RhNTIzMmI3Y2E2JGV4cG9ydCQ2OWYxYjJkY2RhMjNjNWY4IiwiJDgwYjZjZGE1MjMyYjdjYTYkZXhwb3J0JDQ1YjEwODE0Y2MwNTQ4OTQiLCIkODBiNmNkYTUyMzJiN2NhNiRleHBvcnQkN2VhNjZlMzc3NGE2MGI2NyIsIiQ4MGI2Y2RhNTIzMmI3Y2E2JGV4cG9ydCQzNGE1MmYwMGY2MDFmNmYxIiwiJDgwYjZjZGE1MjMyYjdjYTYkZXhwb3J0JDgxMmIwY2JkNWU4YTcyYWIiLCIkODBiNmNkYTUyMzJiN2NhNiRleHBvcnQkZjI0ZjllMTFkNjNiYjMxNCIsIiQ4MGI2Y2RhNTIzMmI3Y2E2JGV4cG9ydCRiNzEzNTdjN2UwN2NhMWYxIiwiJDgwYjZjZGE1MjMyYjdjYTYkZXhwb3J0JDJlNThhNGI1NDFmZGNiZTgiLCIkODBiNmNkYTUyMzJiN2NhNiRleHBvcnQkMTgzYjk1MGJkZTlmYWFiOCIsIiQ4MGI2Y2RhNTIzMmI3Y2E2JGV4cG9ydCQ0Nzg1Yzc3MTY5ZmVhNTllIiwiJDgwYjZjZGE1MjMyYjdjYTYkZXhwb3J0JDI0MmExODVkZmNmZmFjNWIiLCIkODBiNmNkYTUyMzJiN2NhNiRleHBvcnQkNThjMDRhZTBhZTMxODc3ZCIsIiQ4MGI2Y2RhNTIzMmI3Y2E2JGV4cG9ydCRkMDU4Y2E2OTVmOGM2ZjExIiwiJDgwYjZjZGE1MjMyYjdjYTYkZXhwb3J0JGExZWZkN2ZjM2U5ODYzNjciLCIkODBiNmNkYTUyMzJiN2NhNiRleHBvcnQkYmJmZWE0YTJiNWFiYWFiNCIsIiQ4MGI2Y2RhNTIzMmI3Y2E2JGV4cG9ydCQ5N2FkNGFmYzdkZTg2MTUyIiwiJDgwYjZjZGE1MjMyYjdjYTYkZXhwb3J0JGNlNDY3M2Q5YTc5ZjZhNGIiLCIkODBiNmNkYTUyMzJiN2NhNiRleHBvcnQkNzg2Y2M5OWZjNmVlZGMwYiIsIiQ4MGI2Y2RhNTIzMmI3Y2E2JGV4cG9ydCQ0NWM1OWI5YTE4NDhkZDAiLCIkODBiNmNkYTUyMzJiN2NhNiRleHBvcnQkNTBkOGY2MTNlNzZkMzAzNCIsIiQ4MGI2Y2RhNTIzMmI3Y2E2JGV4cG9ydCRiOGU4MzY4M2M2MGVlMTYyIiwiJDgwYjZjZGE1MjMyYjdjYTYkZXhwb3J0JGFlZWI1MTc5MGQxYmNjNGEiLCIkODBiNmNkYTUyMzJiN2NhNiRleHBvcnQkYmI3YzYxNmY3MTlhZDljIiwiJDgwYjZjZGE1MjMyYjdjYTYkZXhwb3J0JDRkNjMyOTA4MjRmOWQ3ZGYiLCIkODBiNmNkYTUyMzJiN2NhNiRleHBvcnQkMmY2NGNlYjkwZWYyOGVhMSIsIiQ4MGI2Y2RhNTIzMmI3Y2E2JGV4cG9ydCQ4ZDIwODlkNDY1ZjZkMTBkIiwiJDgwYjZjZGE1MjMyYjdjYTYkdmFyJGlzU3Vycm9nYXRlUGFpciIsIiQ4MGI2Y2RhNTIzMmI3Y2E2JHZhciRodG9ubCIsIiQ4MGI2Y2RhNTIzMmI3Y2E2JHZhciR6ZXJvMiIsIiQ4MGI2Y2RhNTIzMmI3Y2E2JHZhciR6ZXJvOCIsIiQzaTFtbyIsImVuYyIsIiQzam1UVCIsImQiLCJidWYiLCJwb3MiLCJhaCIsImFsIiwiYmgiLCJibCIsImNoIiwiY2wiLCJkaCIsImRsIiwiZWgiLCJlbCIsIiQyNjk0ZTkwM2NhMzM3YWQ3JHZhciRhc3NlcnQiLCJlcXVhbCIsIiQ5ZDllY2U5ZDFkZjE0NjVmJGV4cG9ydCQ4Njg3NjU4Mzc5YjU3N2U2IiwiJDlkOWVjZTlkMWRmMTQ2NWYkdmFyJEJsb2NrSGFzaCIsInBlbmRpbmciLCJwZW5kaW5nVG90YWwiLCJibG9ja1NpemUiLCJvdXRTaXplIiwiaG1hY1N0cmVuZ3RoIiwicGFkTGVuZ3RoIiwiX2RlbHRhOCIsIl9kZWx0YTMyIiwiJGIzOE5SIiwiam9pbjMyIiwiX3VwZGF0ZSIsImRpZ2VzdCIsIl9wYWQiLCJfZGlnZXN0IiwiJDUzMGMzOGFmYTJjNmY5ZDMkZXhwb3J0JDUwOTFiZGRhNDliYTkwZjUiLCIkNTMwYzM4YWZhMmM2ZjlkMyRleHBvcnQkOTdiNzA1MDlkNGUzOTdlYSIsIiQ1MzBjMzhhZmEyYzZmOWQzJGV4cG9ydCRiY2VkOGQyYWFkYTJkMWM5IiwiJDUzMGMzOGFmYTJjNmY5ZDMkZXhwb3J0JDYxMmQ0N2Q1NWRlZGRlNDUiLCIkNTMwYzM4YWZhMmM2ZjlkMyRleHBvcnQkYTg4OGQyNTMyZTZkYzdiYiIsIiQ2ZTUzZGQzNjRkYzFlZTBjJHZhciRyb3RsMzIiLCJyb3RsMzIiLCIkNmU1M2RkMzY0ZGMxZWUwYyR2YXIkc3VtMzIiLCJzdW0zMiIsIiQ2ZTUzZGQzNjRkYzFlZTBjJHZhciRzdW0zMl81Iiwic3VtMzJfNSIsIiQ2ZTUzZGQzNjRkYzFlZTBjJHZhciRmdF8xIiwiJDlrZ1FRIiwiZnRfMSIsIiQ2ZTUzZGQzNjRkYzFlZTBjJHZhciRCbG9ja0hhc2giLCIkZHgwQTEiLCJCbG9ja0hhc2giLCIkNmU1M2RkMzY0ZGMxZWUwYyR2YXIkc2hhMV9LIiwiJDZlNTNkZDM2NGRjMWVlMGMkdmFyJFNIQTEiLCJXIiwidG9IZXgzMiIsInNwbGl0MzIiLCIkNmNhMzBkYTMxNTA0MzUwZSRleHBvcnQkNWE5MjY0OWQ3ZGRiOWY2MyIsIiQ2Y2EzMGRhMzE1MDQzNTBlJGV4cG9ydCRjNmQwZDAyMGMzYTYyNjkiLCIkNmNhMzBkYTMxNTA0MzUwZSRleHBvcnQkZWI5MGMyN2ZjYTA1Zjk1NiIsIiQ2Y2EzMGRhMzE1MDQzNTBlJGV4cG9ydCQxNGE0YTk4ZTA2M2IxOTk5IiwiJDZjYTMwZGEzMTUwNDM1MGUkZXhwb3J0JGQyMGNlY2ZhMTU2NGM2ODYiLCIkNmNhMzBkYTMxNTA0MzUwZSRleHBvcnQkNDRmZDQ3MmExMmZjNmRiIiwiJDZjYTMwZGEzMTUwNDM1MGUkZXhwb3J0JDFlZDIzOGJiNmVhMWRkNDciLCIkNmNhMzBkYTMxNTA0MzUwZSR2YXIkcm90cjMyIiwicm90cjMyIiwiJDZjYTMwZGEzMTUwNDM1MGUkdmFyJGNoMzIiLCIkNmNhMzBkYTMxNTA0MzUwZSR2YXIkbWFqMzIiLCIkNmNhMzBkYTMxNTA0MzUwZSR2YXIkcDMyIiwiJGNjOTcxMzE1NDRiN2MxNWQkdmFyJFNIQTIyNCIsIiRaUHBHVyIsIiQwYjlkOTQzZjFjNGIwZmI5JHZhciRzdW0zMiIsIiQwYjlkOTQzZjFjNGIwZmI5JHZhciRzdW0zMl80Iiwic3VtMzJfNCIsIiQwYjlkOTQzZjFjNGIwZmI5JHZhciRzdW0zMl81IiwiJDBiOWQ5NDNmMWM0YjBmYjkkdmFyJGNoMzIiLCJjaDMyIiwiJDBiOWQ5NDNmMWM0YjBmYjkkdmFyJG1hajMyIiwibWFqMzIiLCIkMGI5ZDk0M2YxYzRiMGZiOSR2YXIkczBfMjU2IiwiczBfMjU2IiwiJDBiOWQ5NDNmMWM0YjBmYjkkdmFyJHMxXzI1NiIsInMxXzI1NiIsIiQwYjlkOTQzZjFjNGIwZmI5JHZhciRnMF8yNTYiLCJnMF8yNTYiLCIkMGI5ZDk0M2YxYzRiMGZiOSR2YXIkZzFfMjU2IiwiZzFfMjU2IiwiJDBiOWQ5NDNmMWM0YjBmYjkkdmFyJEJsb2NrSGFzaCIsIiQwYjlkOTQzZjFjNGIwZmI5JHZhciRzaGEyNTZfSyIsIiQwYjlkOTQzZjFjNGIwZmI5JHZhciRTSEEyNTYiLCJmIiwiVDEiLCJUMiIsIiQ5OTc5NTM4M2UxMTYzNDg3JHZhciRTSEEzODQiLCIkaXZmTDMiLCIkZDc4NzU4NzIyNWY2ZjA3MyR2YXIkcm90cjY0X2hpIiwicm90cjY0X2hpIiwiJGQ3ODc1ODcyMjVmNmYwNzMkdmFyJHJvdHI2NF9sbyIsInJvdHI2NF9sbyIsIiRkNzg3NTg3MjI1ZjZmMDczJHZhciRzaHI2NF9oaSIsInNocjY0X2hpIiwiJGQ3ODc1ODcyMjVmNmYwNzMkdmFyJHNocjY0X2xvIiwic2hyNjRfbG8iLCIkZDc4NzU4NzIyNWY2ZjA3MyR2YXIkc3VtNjQiLCJzdW02NCIsIiRkNzg3NTg3MjI1ZjZmMDczJHZhciRzdW02NF9oaSIsInN1bTY0X2hpIiwiJGQ3ODc1ODcyMjVmNmYwNzMkdmFyJHN1bTY0X2xvIiwic3VtNjRfbG8iLCIkZDc4NzU4NzIyNWY2ZjA3MyR2YXIkc3VtNjRfNF9oaSIsInN1bTY0XzRfaGkiLCIkZDc4NzU4NzIyNWY2ZjA3MyR2YXIkc3VtNjRfNF9sbyIsInN1bTY0XzRfbG8iLCIkZDc4NzU4NzIyNWY2ZjA3MyR2YXIkc3VtNjRfNV9oaSIsInN1bTY0XzVfaGkiLCIkZDc4NzU4NzIyNWY2ZjA3MyR2YXIkc3VtNjRfNV9sbyIsInN1bTY0XzVfbG8iLCIkZDc4NzU4NzIyNWY2ZjA3MyR2YXIkQmxvY2tIYXNoIiwiJGQ3ODc1ODcyMjVmNmYwNzMkdmFyJHNoYTUxMl9LIiwiJGQ3ODc1ODcyMjVmNmYwNzMkdmFyJFNIQTUxMiIsIiRkNzg3NTg3MjI1ZjZmMDczJHZhciRjaDY0X2hpIiwieGgiLCJ4bCIsInloIiwieWwiLCJ6aCIsIiRkNzg3NTg3MjI1ZjZmMDczJHZhciRjaDY0X2xvIiwiemwiLCIkZDc4NzU4NzIyNWY2ZjA3MyR2YXIkbWFqNjRfaGkiLCIkZDc4NzU4NzIyNWY2ZjA3MyR2YXIkbWFqNjRfbG8iLCIkZDc4NzU4NzIyNWY2ZjA3MyR2YXIkczBfNTEyX2hpIiwiJGQ3ODc1ODcyMjVmNmYwNzMkdmFyJHMwXzUxMl9sbyIsIiRkNzg3NTg3MjI1ZjZmMDczJHZhciRzMV81MTJfaGkiLCIkZDc4NzU4NzIyNWY2ZjA3MyR2YXIkczFfNTEyX2xvIiwiJGQ3ODc1ODcyMjVmNmYwNzMkdmFyJGcwXzUxMl9oaSIsIiRkNzg3NTg3MjI1ZjZmMDczJHZhciRnMF81MTJfbG8iLCIkZDc4NzU4NzIyNWY2ZjA3MyR2YXIkZzFfNTEyX2hpIiwiJGQ3ODc1ODcyMjVmNmYwNzMkdmFyJGcxXzUxMl9sbyIsIl9wcmVwYXJlQmxvY2siLCJjMF9oaSIsImMwX2xvIiwiYzFfaGkiLCJjMV9sbyIsImMyX2hpIiwiYzJfbG8iLCJjM19oaSIsImMzX2xvIiwiZmgiLCJmbCIsImdoIiwiZ2wiLCJoaCIsImhsIiwiYzRfaGkiLCJjNF9sbyIsIlQxX2hpIiwiVDFfbG8iLCJUMl9oaSIsIlQyX2xvIiwiJGRkYWRlN2IzMjUxODdjMTEkZXhwb3J0JGQxY2VhMGVlNGUzZjBkM2UiLCIkZGRhZGU3YjMyNTE4N2MxMSR2YXIkcm90bDMyIiwiJGRkYWRlN2IzMjUxODdjMTEkdmFyJHN1bTMyIiwiJGRkYWRlN2IzMjUxODdjMTEkdmFyJHN1bTMyXzMiLCJzdW0zMl8zIiwiJGRkYWRlN2IzMjUxODdjMTEkdmFyJHN1bTMyXzQiLCIkZGRhZGU3YjMyNTE4N2MxMSR2YXIkQmxvY2tIYXNoIiwiJGRkYWRlN2IzMjUxODdjMTEkdmFyJFJJUEVNRDE2MCIsIiRkZGFkZTdiMzI1MTg3YzExJHZhciRmIiwiJGRkYWRlN2IzMjUxODdjMTEkdmFyJEsiLCIkZGRhZGU3YjMyNTE4N2MxMSR2YXIkS2giLCJFIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIlQiLCIkZGRhZGU3YjMyNTE4N2MxMSR2YXIkciIsIiRkZGFkZTdiMzI1MTg3YzExJHZhciRzIiwiJGRkYWRlN2IzMjUxODdjMTEkdmFyJHJoIiwiJGRkYWRlN2IzMjUxODdjMTEkdmFyJHNoIiwiJDA4ZDYwY2NmMmYzY2I4M2QkdmFyJEhtYWMiLCJoYXNoIiwiSGFzaCIsImlubmVyIiwib3V0ZXIiLCIkY0lLTGkiLCJsb29rdXAiLCJtYW5hZ2VycyIsInVyaSIsIm9wdHMiLCJwYXJzZWQiLCJzb3VyY2UiLCJwYXRoIiwic2FtZU5hbWVzcGFjZSIsIm5zcHMiLCJmb3JjZU5ldyIsIm11bHRpcGxleCIsInNvY2tldCIsInByb3RvY29sIiwiJDJVZFljIiwiY29ubmVjdCIsIk1hbmFnZXIiLCJTb2NrZXQiLCIkaThjTVkiLCIkOTQyZGRkZmZkMDcyN2NhNiR2YXIkZGVidWciLCJsb2MiLCJvYmoiLCJsb2NhdGlvbiIsImhvc3QiLCJjaGFyQXQiLCJ0ZXN0IiwicG9ydCIsImluZGV4T2YiLCJocmVmIiwiJGQzMzJlNGYxMDQzZmZjOTQkdmFyJHJlIiwiJGQzMzJlNGYxMDQzZmZjOTQkdmFyJHBhcnRzIiwiZXhlYyIsImF1dGhvcml0eSIsImlwdjZ1cmkiLCJwYXRoTmFtZXMiLCJyZWd4IiwibmFtZXMiLCJzdWJzdHIiLCJzcGxpY2UiLCIkZDMzMmU0ZjEwNDNmZmM5NCR2YXIkcGF0aE5hbWVzIiwicXVlcnlLZXkiLCIkMCIsIiQxIiwiJDIiLCIkZDVZYTkiLCJsb2FkIiwiZm9ybWF0QXJncyIsInVzZUNvbG9yczEiLCJ1c2VDb2xvcnMiLCJuYW1lc3BhY2UiLCJodW1hbml6ZSIsImNvbG9yIiwibGFzdEMiLCJzYXZlIiwibmFtZXNwYWNlcyIsInJlbW92ZUl0ZW0iLCJwcm9jZXNzIiwidHlwZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJXZWJraXRBcHBlYXJhbmNlIiwiZmlyZWJ1ZyIsImV4Y2VwdGlvbiIsInRhYmxlIiwiUmVnRXhwIiwibG9jYWxTdG9yYWdlIiwibG9jYWxzdG9yYWdlIiwiY29sb3JzIiwiZm9ybWF0dGVycyIsIiQ5ODhhNjkwYTUxN2I5OWY1JHZhciRjYWNoZWRTZXRUaW1lb3V0IiwiJDk4OGE2OTBhNTE3Yjk5ZjUkdmFyJGNhY2hlZENsZWFyVGltZW91dCIsIiQ5ODhhNjkwYTUxN2I5OWY1JHZhciRwcm9jZXNzIiwiJDk4OGE2OTBhNTE3Yjk5ZjUkdmFyJGRlZmF1bHRTZXRUaW1vdXQiLCIkOTg4YTY5MGE1MTdiOTlmNSR2YXIkZGVmYXVsdENsZWFyVGltZW91dCIsIiQ5ODhhNjkwYTUxN2I5OWY1JHZhciRydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsIiQ5ODhhNjkwYTUxN2I5OWY1JHZhciRjdXJyZW50UXVldWUiLCIkOTg4YTY5MGE1MTdiOTlmNSR2YXIkcXVldWUiLCIkOTg4YTY5MGE1MTdiOTlmNSR2YXIkZHJhaW5pbmciLCIkOTg4YTY5MGE1MTdiOTlmNSR2YXIkcXVldWVJbmRleCIsIiQ5ODhhNjkwYTUxN2I5OWY1JHZhciRjbGVhblVwTmV4dFRpY2siLCIkOTg4YTY5MGE1MTdiOTlmNSR2YXIkZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJydW4iLCJtYXJrZXIiLCIkOTg4YTY5MGE1MTdiOTlmNSR2YXIkcnVuQ2xlYXJUaW1lb3V0IiwiJDk4OGE2OTBhNTE3Yjk5ZjUkdmFyJEl0ZW0iLCIkOTg4YTY5MGE1MTdiOTlmNSR2YXIkbm9vcCIsIm5leHRUaWNrIiwidGl0bGUiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJvbiIsIm9uY2UiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiY3JlYXRlRGVidWciLCJwcmV2VGltZSIsImVuYWJsZWQiLCJjdXJyIiwiRGF0ZSIsIm1zIiwiY29lcmNlIiwiZm9ybWF0IiwiZm9ybWF0dGVyIiwibG9nRm4iLCJzZWxlY3RDb2xvciIsImRlc3Ryb3kiLCJpbml0IiwiaW5zdGFuY2VzIiwic3RhY2siLCJza2lwcyIsImluc3RhbmNlIiwiJDA1ZGY2NDcyYWE1N2NiMDYkdmFyJHMiLCIkMDVkZjY0NzJhYTU3Y2IwNiR2YXIkbSIsIiQwNWRmNjQ3MmFhNTdjYjA2JHZhciRoIiwiJDA1ZGY2NDcyYWE1N2NiMDYkdmFyJGQiLCIkMDVkZjY0NzJhYTU3Y2IwNiR2YXIkeSIsIiQwNWRmNjQ3MmFhNTdjYjA2JHZhciRwbHVyYWwiLCJwYXJzZUZsb2F0IiwiJDA1ZGY2NDcyYWE1N2NiMDYkdmFyJHBhcnNlIiwiaXNOYU4iLCJsb25nIiwiJDA1ZGY2NDcyYWE1N2NiMDYkdmFyJGZtdFNob3J0IiwiJDIxZGJhNWRjYjA4MzA5YWUkZXhwb3J0JGE1MWQ2YjM5NWZmNGM2NWEiLCIkMjFkYmE1ZGNiMDgzMDlhZSRleHBvcnQkYjE0YWQ0MDBiMWQwOWUwZiIsIiQyMWRiYTVkY2IwODMwOWFlJGV4cG9ydCRkZjUwYjUyYjE1NDhjMGRjIiwiJDIxZGJhNWRjYjA4MzA5YWUkZXhwb3J0JDVmZDEyZTJlODlhYjE0ZGMiLCIkMjFkYmE1ZGNiMDgzMDlhZSRleHBvcnQkZTM5YTM0Y2ZkNTMyZTE1IiwiJDIxZGJhNWRjYjA4MzA5YWUkZXhwb3J0JDhiOWY2ZGFmY2ViNjRlYjMiLCIkMjFkYmE1ZGNiMDgzMDlhZSRleHBvcnQkMTAzYmVkZjQzYmE4ODJkYiIsIiQyMWRiYTVkY2IwODMwOWFlJGV4cG9ydCQ0ZTU5M2E4ZTc1NDgxZDg5IiwiJDIxZGJhNWRjYjA4MzA5YWUkZXhwb3J0JDE1M2ZlZTk0MzEzZDMzN2QiLCIkMjFkYmE1ZGNiMDgzMDlhZSRleHBvcnQkYTUwYWNlYjBlMDJhMDBhYSIsIiQyMWRiYTVkY2IwODMwOWFlJGV4cG9ydCRmOWRlNmNhMGJjMDQzNzI0IiwiJDIxZGJhNWRjYjA4MzA5YWUkdmFyJGRlYnVnIiwiJDIxZGJhNWRjYjA4MzA5YWUkdmFyJEVuY29kZXIiLCIkMjFkYmE1ZGNiMDgzMDlhZSR2YXIkRGVjb2RlciIsIiQyMWRiYTVkY2IwODMwOWFlJHZhciRFUlJPUl9QQUNLRVQiLCIkMjFkYmE1ZGNiMDgzMDlhZSR2YXIkZW5jb2RlQXNTdHJpbmciLCJhdHRhY2htZW50cyIsIm5zcCIsIiQyMWRiYTVkY2IwODMwOWFlJHZhciR0cnlTdHJpbmdpZnkiLCJyZWNvbnN0cnVjdG9yIiwiJDIxZGJhNWRjYjA4MzA5YWUkdmFyJEJpbmFyeVJlY29uc3RydWN0b3IiLCJwYWNrZXQiLCJyZWNvblBhY2siLCJidWZmZXJzIiwiJDIxZGJhNWRjYjA4MzA5YWUkdmFyJGVycm9yIiwiZW5jb2RlIiwiY2FsbGJhY2siLCJ3cml0ZUVuY29kaW5nIiwiYmxvYmxlc3NEYXRhIiwiZGVjb25zdHJ1Y3Rpb24iLCIkN1dNcloiLCJkZWNvbnN0cnVjdFBhY2tldCIsInBhY2siLCJyZW1vdmVCbG9icyIsIiQyMWRiYTVkY2IwODMwOWFlJHZhciRlbmNvZGVBc0JpbmFyeSIsIiQyMVpURCIsIk51bWJlciIsInBhcnNlIiwiJDIxZGJhNWRjYjA4MzA5YWUkdmFyJHRyeVBhcnNlIiwiJGQyMDZwIiwiJDIxZGJhNWRjYjA4MzA5YWUkdmFyJGRlY29kZVN0cmluZyIsIiQxejlkMyIsImJhc2U2NCIsInRha2VCaW5hcnlEYXRhIiwiZmluaXNoZWRSZWNvbnN0cnVjdGlvbiIsImJpbkRhdGEiLCJyZWNvbnN0cnVjdFBhY2tldCIsIiQxMGE3MWM3ZjVjMjIxMDFiJHZhciRzIiwiJDEwYTcxYzdmNWMyMjEwMWIkdmFyJG0iLCIkMTBhNzFjN2Y1YzIyMTAxYiR2YXIkaCIsIiQxMGE3MWM3ZjVjMjIxMDFiJHZhciRkIiwiJDEwYTcxYzdmNWMyMjEwMWIkdmFyJHkiLCIkMTBhNzFjN2Y1YzIyMTAxYiR2YXIkcGx1cmFsIiwiJDEwYTcxYzdmNWMyMjEwMWIkdmFyJHBhcnNlIiwiJDEwYTcxYzdmNWMyMjEwMWIkdmFyJGZtdFNob3J0IiwiJDE3YWJiMDEyZTUwYWRhMDUkdmFyJEVtaXR0ZXIiLCIkMTdhYmIwMTJlNTBhZGEwNSR2YXIkbWl4aW4iLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJmbiIsIl9jYWxsYmFja3MiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2FsbGJhY2tzIiwiJDVjOTM4ODcwZTg1YzNkNDEkZXhwb3J0JGFjMmVkYjllYjdhZjU2ZjYiLCIkNWM5Mzg4NzBlODVjM2Q0MSRleHBvcnQkYTAwZGEzYjFlYzAzN2EwNCIsIiQ1YzkzODg3MGU4NWMzZDQxJGV4cG9ydCRjNTQ2YjA3Y2E4MTI0NDYxIiwiJDVjOTM4ODcwZTg1YzNkNDEkdmFyJHRvU3RyaW5nIiwiJDVjOTM4ODcwZTg1YzNkNDEkdmFyJHdpdGhOYXRpdmVCbG9iIiwiQmxvYiIsIiQ1YzkzODg3MGU4NWMzZDQxJHZhciR3aXRoTmF0aXZlRmlsZSIsIkZpbGUiLCIkNWM5Mzg4NzBlODVjM2Q0MSR2YXIkX2RlY29uc3RydWN0UGFja2V0IiwicGxhY2Vob2xkZXIiLCJfcGxhY2Vob2xkZXIiLCJuZXdEYXRhIiwiJDVjOTM4ODcwZTg1YzNkNDEkdmFyJF9yZWNvbnN0cnVjdFBhY2tldCIsInBhY2tldERhdGEiLCJwZW5kaW5nQmxvYnMiLCJfcmVtb3ZlQmxvYnMiLCJjdXJLZXkiLCJjb250YWluaW5nT2JqZWN0IiwiZmlsZVJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJyZWFkQXNBcnJheUJ1ZmZlciIsIiQ5N2NiOGE5NDY4MmRhYTY4JHZhciR0b1N0cmluZyIsImFyciIsIiQxMjQwMzQyNzc0MzYxNmU2JHZhciR3aXRoTmF0aXZlQnVmZmVyIiwiJDEyNDAzNDI3NzQzNjE2ZTYkcmVxdWlyZSRCdWZmZXIiLCJpc0J1ZmZlciIsIiQxMjQwMzQyNzc0MzYxNmU2JHZhciR3aXRoTmF0aXZlQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsIiQxMjQwMzQyNzc0MzYxNmU2JHZhciRpc1ZpZXciLCIkMGYzN2UwOTEwYTY3NTc2NyRleHBvcnQkYTE0M2Q0OTNkOTQxYmFmYyIsIiQwZjM3ZTA5MTBhNjc1NzY3JGV4cG9ydCRlNGNmMzdkN2Y2ZmI5ZTBhIiwiJDBmMzdlMDkxMGE2NzU3NjckZXhwb3J0JGY5OWRlZDhmZTRiNzkxNDUiLCIkMGYzN2UwOTEwYTY3NTc2NyRleHBvcnQkNTk5ZjMxYzM4MTNmYWU0ZCIsIiQwZjM3ZTA5MTBhNjc1NzY3JHZhciRjdXN0b21JbnNwZWN0U3ltYm9sIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJEJ1ZmZlciIsImFsbG9jIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJEtfTUFYX0xFTkdUSCIsIiQwZjM3ZTA5MTBhNjc1NzY3JHZhciRjcmVhdGVCdWZmZXIiLCJSYW5nZUVycm9yIiwic2V0UHJvdG90eXBlT2YiLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwiVHlwZUVycm9yIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJGFsbG9jVW5zYWZlIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJGZyb20iLCJlbmNvZGluZyIsImlzRW5jb2RpbmciLCIkMGYzN2UwOTEwYTY3NTc2NyR2YXIkYnl0ZUxlbmd0aCIsImFjdHVhbCIsIndyaXRlIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJGZyb21TdHJpbmciLCJhcnJheVZpZXciLCIkMGYzN2UwOTEwYTY3NTc2NyR2YXIkaXNJbnN0YW5jZSIsIiQwZjM3ZTA5MTBhNjc1NzY3JHZhciRmcm9tQXJyYXlCdWZmZXIiLCJieXRlT2Zmc2V0IiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJGZyb21BcnJheUxpa2UiLCIkMGYzN2UwOTEwYTY3NTc2NyR2YXIkZnJvbUFycmF5VmlldyIsIlNoYXJlZEFycmF5QnVmZmVyIiwidmFsdWVPZiIsImZyb20iLCIkMGYzN2UwOTEwYTY3NTc2NyR2YXIkY2hlY2tlZCIsIiQwZjM3ZTA5MTBhNjc1NzY3JHZhciRudW1iZXJJc05hTiIsIiQwZjM3ZTA5MTBhNjc1NzY3JHZhciRmcm9tT2JqZWN0IiwidG9QcmltaXRpdmUiLCIkMGYzN2UwOTEwYTY3NTc2NyR2YXIkYXNzZXJ0U2l6ZSIsIm11c3RNYXRjaCIsImxvd2VyZWRDYXNlIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJHV0ZjhUb0J5dGVzIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJGJhc2U2NFRvQnl0ZXMiLCIkMGYzN2UwOTEwYTY3NTc2NyR2YXIkc2xvd1RvU3RyaW5nIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJGhleFNsaWNlIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJHV0ZjhTbGljZSIsIiQwZjM3ZTA5MTBhNjc1NzY3JHZhciRhc2NpaVNsaWNlIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJGxhdGluMVNsaWNlIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJGJhc2U2NFNsaWNlIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJHV0ZjE2bGVTbGljZSIsIiQwZjM3ZTA5MTBhNjc1NzY3JHZhciRzd2FwIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJGJpZGlyZWN0aW9uYWxJbmRleE9mIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJGFycmF5SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiaTEiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJyZWFkIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJGhleFdyaXRlIiwicmVtYWluaW5nIiwic3RyTGVuIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJHV0ZjhXcml0ZSIsIiQwZjM3ZTA5MTBhNjc1NzY3JHZhciRibGl0QnVmZmVyIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJGFzY2lpV3JpdGUiLCJieXRlQXJyYXkiLCIkMGYzN2UwOTEwYTY3NTc2NyR2YXIkYXNjaWlUb0J5dGVzIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJGJhc2U2NFdyaXRlIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJHVjczJXcml0ZSIsInVuaXRzIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJHV0ZjE2bGVUb0J5dGVzIiwiJGZYT2RIIiwiZnJvbUJ5dGVBcnJheSIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJjb2RlUG9pbnRzIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJE1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJGRlY29kZUNvZGVQb2ludHNBcnJheSIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJwcm90byIsImZvbyIsIiQwZjM3ZTA5MTBhNjc1NzY3JHZhciR0eXBlZEFycmF5U3VwcG9ydCIsInBvb2xTaXplIiwiZmlsbCIsIiQwZjM3ZTA5MTBhNjc1NzY3JHZhciRhbGxvYyIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJsaXN0Iiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwidG9Mb2NhbGVTdHJpbmciLCJlcXVhbHMiLCJ0cmltIiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImluY2x1ZGVzIiwiaXNGaW5pdGUiLCJfYXJyIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJGhleFNsaWNlTG9va3VwVGFibGUiLCIkMGYzN2UwOTEwYTY3NTc2NyR2YXIkY2hlY2tPZmZzZXQiLCJleHQiLCIkMGYzN2UwOTEwYTY3NTc2NyR2YXIkY2hlY2tJbnQiLCIkMGYzN2UwOTEwYTY3NTc2NyR2YXIkd3J0QmlnVUludDY0TEUiLCIkMGYzN2UwOTEwYTY3NTc2NyR2YXIkY2hlY2tJbnRCSSIsIkJpZ0ludCIsIiQwZjM3ZTA5MTBhNjc1NzY3JHZhciR3cnRCaWdVSW50NjRCRSIsIiQwZjM3ZTA5MTBhNjc1NzY3JHZhciRjaGVja0lFRUU3NTQiLCIkMGYzN2UwOTEwYTY3NTc2NyR2YXIkd3JpdGVGbG9hdCIsImxpdHRsZUVuZGlhbiIsIm5vQXNzZXJ0IiwiJDJKUktkIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJHdyaXRlRG91YmxlIiwibmV3QnVmIiwic3ViYXJyYXkiLCJyZWFkVWludExFIiwicmVhZFVJbnRMRSIsImJ5dGVMZW5ndGgxIiwicmVhZFVpbnRCRSIsInJlYWRVSW50QkUiLCJieXRlTGVuZ3RoMiIsInJlYWRVaW50OCIsInJlYWRVSW50OCIsInJlYWRVaW50MTZMRSIsInJlYWRVSW50MTZMRSIsInJlYWRVaW50MTZCRSIsInJlYWRVaW50MzJMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVaW50MzJCRSIsInJlYWRVSW50MzJCRSIsInJlYWRCaWdVSW50NjRMRSIsIiQwZjM3ZTA5MTBhNjc1NzY3JHZhciRkZWZpbmVCaWdJbnRNZXRob2QiLCIkMGYzN2UwOTEwYTY3NTc2NyR2YXIkdmFsaWRhdGVOdW1iZXIiLCJmaXJzdCIsImxhc3QiLCIkMGYzN2UwOTEwYTY3NTc2NyR2YXIkYm91bmRzRXJyb3IiLCJyZWFkQmlnVUludDY0QkUiLCJyZWFkSW50TEUiLCJieXRlTGVuZ3RoMyIsInJlYWRJbnRCRSIsImJ5dGVMZW5ndGg0IiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRCaWdJbnQ2NExFIiwicmVhZEJpZ0ludDY0QkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVaW50TEUiLCJ3cml0ZVVJbnRMRSIsImJ5dGVMZW5ndGg1Iiwid3JpdGVVaW50QkUiLCJ3cml0ZVVJbnRCRSIsImJ5dGVMZW5ndGg2Iiwid3JpdGVVaW50OCIsIndyaXRlVUludDgiLCJ3cml0ZVVpbnQxNkxFIiwid3JpdGVVSW50MTZMRSIsIndyaXRlVWludDE2QkUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVaW50MzJMRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVpbnQzMkJFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlQmlnVUludDY0TEUiLCJ3cml0ZUJpZ1VJbnQ2NEJFIiwid3JpdGVJbnRMRSIsImJ5dGVMZW5ndGg3IiwibGltaXQiLCJ3cml0ZUludEJFIiwiYnl0ZUxlbmd0aDgiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUJpZ0ludDY0TEUiLCJ3cml0ZUJpZ0ludDY0QkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0IiwiY29weVdpdGhpbiIsIiQwZjM3ZTA5MTBhNjc1NzY3JHZhciRlcnJvcnMiLCIkMGYzN2UwOTEwYTY3NTc2NyR2YXIkRSIsInN5bSIsImdldE1lc3NhZ2UiLCJCYXNlIiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJGFkZE51bWVyaWNhbFNlcGFyYXRvciIsImJ5dGVMZW5ndGgxMCIsInJhbmdlIiwiRVJSX09VVF9PRl9SQU5HRSIsImJ5dGVMZW5ndGg5IiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJGNoZWNrQm91bmRzIiwiRVJSX0lOVkFMSURfQVJHX1RZUEUiLCJFUlJfQlVGRkVSX09VVF9PRl9CT1VORFMiLCJyZWNlaXZlZCIsImlzSW50ZWdlciIsIiQwZjM3ZTA5MTBhNjc1NzY3JHZhciRJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5IiwiJDBmMzdlMDkxMGE2NzU3NjckdmFyJGJhc2U2NGNsZWFuIiwiZHN0IiwiYWxwaGFiZXQiLCJpMTYiLCIkMGYzN2UwOTEwYTY3NTc2NyR2YXIkQnVmZmVyQmlnSW50Tm90RGVmaW5lZCIsIiRiOWYzNTI1YjM3NjgyY2RjJGV4cG9ydCRkNjIyYjJhZDhkOTBjNzcxIiwiJGI5ZjM1MjViMzc2ODJjZGMkZXhwb3J0JDYxMDBiYTI4Njk2ZTEyZGUiLCJiNjQiLCJsZW5zIiwiJGI5ZjM1MjViMzc2ODJjZGMkdmFyJGdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsIiRiOWYzNTI1YjM3NjgyY2RjJHZhciRBcnIiLCIkYjlmMzUyNWIzNzY4MmNkYyR2YXIkX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwibGVuMiIsIiRiOWYzNTI1YjM3NjgyY2RjJHZhciRyZXZMb29rdXAiLCJ1aW50OCIsImxlbjMiLCJleHRyYUJ5dGVzIiwicGFydHMiLCJtYXhDaHVua0xlbmd0aCIsImkzIiwiJGI5ZjM1MjViMzc2ODJjZGMkdmFyJGVuY29kZUNodW5rIiwiJGI5ZjM1MjViMzc2ODJjZGMkdmFyJGxvb2t1cCIsIiRiOWYzNTI1YjM3NjgyY2RjJHZhciRjb2RlIiwiJGI5ZjM1MjViMzc2ODJjZGMkdmFyJGkiLCIkYjlmMzUyNWIzNzY4MmNkYyR2YXIkbGVuIiwibGVuMSIsImkyIiwiJDFmZTk3OTNkYmI5NjYwYzMkZXhwb3J0JGFhZmE1OWUyZTAzZjI5NDIiLCIkMWZlOTc5M2RiYjk2NjBjMyRleHBvcnQkNjhkODcxNWZjMTA0ZDI5NCIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwicnQiLCJMTjIiLCIkbGpDQlAiLCIkMzk2OWVjM2U5NWI5NDQ4NyR2YXIkZGVidWciLCIkMzk2OWVjM2U5NWI5NDQ4NyR2YXIkaGFzIiwiJDM5NjllYzNlOTViOTQ0ODckdmFyJE1hbmFnZXIiLCJzdWJzIiwicmVjb25uZWN0aW9uIiwicmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJyZWNvbm5lY3Rpb25EZWxheSIsInJlY29ubmVjdGlvbkRlbGF5TWF4IiwicmFuZG9taXphdGlvbkZhY3RvciIsImJhY2tvZmYiLCIkZUJtZjAiLCJqaXR0ZXIiLCJyZWFkeVN0YXRlIiwiY29ubmVjdGluZyIsImxhc3RQaW5nIiwicGFja2V0QnVmZmVyIiwiX3BhcnNlciIsInBhcnNlciIsImVuY29kZXIiLCJFbmNvZGVyIiwiZGVjb2RlciIsIkRlY29kZXIiLCJhdXRvQ29ubmVjdCIsImVtaXRBbGwiLCJ1cGRhdGVTb2NrZXRJZHMiLCJnZW5lcmF0ZUlkIiwiZW5naW5lIiwiX3JlY29ubmVjdGlvbiIsIl9yZWNvbm5lY3Rpb25BdHRlbXB0cyIsIl9yZWNvbm5lY3Rpb25EZWxheSIsInNldE1pbiIsIl9yYW5kb21pemF0aW9uRmFjdG9yIiwic2V0Sml0dGVyIiwiX3JlY29ubmVjdGlvbkRlbGF5TWF4Iiwic2V0TWF4IiwiX3RpbWVvdXQiLCJtYXliZVJlY29ubmVjdE9uT3BlbiIsInJlY29ubmVjdGluZyIsImF0dGVtcHRzIiwicmVjb25uZWN0Iiwic2tpcFJlY29ubmVjdCIsIm9wZW5TdWIiLCIkNmlONU0iLCJvbm9wZW4iLCJlcnJvclN1YiIsImNsZWFudXAiLCJ0aW1lciIsImNsb3NlIiwiJDJWQm5qIiwib25waW5nIiwib25wb25nIiwib25kYXRhIiwib25kZWNvZGVkIiwib25lcnJvciIsIiQxRkppNiIsIm9uQ29ubmVjdGluZyIsIiRuSW5HdyIsImVuY29kZWRQYWNrZXRzIiwicHJvY2Vzc1BhY2tldFF1ZXVlIiwic3Vic0xlbmd0aCIsImRpc2Nvbm5lY3QiLCJyZXNldCIsIm9uY2xvc2UiLCJkZWxheSIsImR1cmF0aW9uIiwib25yZWNvbm5lY3QiLCJhdHRlbXB0IiwiJDU5YjMxNTE0MWI1NTQ5YzMkdmFyJGRlYnVnIiwiJDU5YjMxNTE0MWI1NTQ5YzMkdmFyJFNvY2tldCIsImhvc3RuYW1lIiwic2VjdXJlIiwiYWdlbnQiLCIkOW9FY1ciLCJkZWNvZGUiLCJ1cGdyYWRlIiwiZm9yY2VKU09OUCIsImpzb25wIiwiZm9yY2VCYXNlNjQiLCJlbmFibGVzWERSIiwid2l0aENyZWRlbnRpYWxzIiwidGltZXN0YW1wUGFyYW0iLCJ0aW1lc3RhbXBSZXF1ZXN0cyIsInRyYW5zcG9ydHMiLCJ0cmFuc3BvcnRPcHRpb25zIiwid3JpdGVCdWZmZXIiLCJwcmV2QnVmZmVyTGVuIiwicG9saWN5UG9ydCIsInJlbWVtYmVyVXBncmFkZSIsImJpbmFyeVR5cGUiLCJvbmx5QmluYXJ5VXBncmFkZXMiLCJwZXJNZXNzYWdlRGVmbGF0ZSIsInRocmVzaG9sZCIsInBmeCIsInBhc3NwaHJhc2UiLCJjZXJ0IiwiY2EiLCJjaXBoZXJzIiwicmVqZWN0VW5hdXRob3JpemVkIiwiZm9yY2VOb2RlIiwiaXNSZWFjdE5hdGl2ZSIsInByb2R1Y3QiLCJleHRyYUhlYWRlcnMiLCJsb2NhbEFkZHJlc3MiLCJ1cGdyYWRlcyIsInBpbmdJbnRlcnZhbCIsInBpbmdUaW1lb3V0IiwicGluZ0ludGVydmFsVGltZXIiLCJwaW5nVGltZW91dFRpbWVyIiwicHJpb3JXZWJzb2NrZXRTdWNjZXNzIiwiVHJhbnNwb3J0IiwiY3JlYXRlVHJhbnNwb3J0IiwiJDU5YjMxNTE0MWI1NTQ5YzMkdmFyJGNsb25lIiwiRUlPIiwidHJhbnNwb3J0Iiwic2lkIiwicmVxdWVzdFRpbWVvdXQiLCJwcm90b2NvbHMiLCJzZXRUcmFuc3BvcnQiLCJvbkRyYWluIiwib25QYWNrZXQiLCJvbkVycm9yIiwib25DbG9zZSIsInByb2JlIiwiZmFpbGVkIiwib25UcmFuc3BvcnRPcGVuIiwidXBncmFkZUxvc2VzQmluYXJ5Iiwic3VwcG9ydHNCaW5hcnkiLCJzZW5kIiwidXBncmFkaW5nIiwiZmx1c2giLCJmcmVlemVUcmFuc3BvcnQiLCJvblRyYW5zcG9ydENsb3NlIiwib251cGdyYWRlIiwidG8iLCJvbk9wZW4iLCJvbkhhbmRzaGFrZSIsInNldFBpbmciLCJmaWx0ZXJVcGdyYWRlcyIsIm9uSGVhcnRiZWF0IiwicGluZyIsInNlbmRQYWNrZXQiLCJjb21wcmVzcyIsIndhaXRGb3JVcGdyYWRlIiwiY2xlYW51cEFuZENsb3NlIiwiZmlsdGVyZWRVcGdyYWRlcyIsIiRhZjMxYzBlYTEwN2VjMGRkJGV4cG9ydCRiZGJmMDRmYmRjZjZhYzNjIiwiJGFmMzFjMGVhMTA3ZWMwZGQkZXhwb3J0JDNmODU5NjE0ZGVjY2MzMWIiLCJ4ZCIsInhzIiwiaXNTU0wiLCJ4ZG9tYWluIiwieHNjaGVtZSIsIiRnNUF0WCIsIiQ4UmlEOSIsIiQ0TWJpNCIsIiRqQmtQVCIsIiQ5R3p0NCIsIlhNTEh0dHBSZXF1ZXN0IiwiWERvbWFpblJlcXVlc3QiLCIkMWVGMmsiLCJlMiIsIiQ2NzMxYjk5NDU5MDYyNjk5JHZhciRkZWJ1ZyIsIiQ2NzMxYjk5NDU5MDYyNjk5JHZhciRlbXB0eSIsIiQ2NzMxYjk5NDU5MDYyNjk5JHZhciRYSFIiLCIkbHRxdDciLCIkNjczMWI5OTQ1OTA2MjY5OSR2YXIkUmVxdWVzdCIsImFzeW5jIiwiaXNCaW5hcnkiLCJSZXF1ZXN0IiwiJGVZdGhQIiwiZG9Xcml0ZSIsInNlbmRYaHIiLCJkb1BvbGwiLCJvbkRhdGEiLCJwb2xsWGhyIiwieGhyIiwic2V0RGlzYWJsZUhlYWRlckNoZWNrIiwic2V0UmVxdWVzdEhlYWRlciIsImhhc1hEUiIsIm9uTG9hZCIsInJlc3BvbnNlVGV4dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImNvbnRlbnRUeXBlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJyZXNwb25zZVR5cGUiLCJzdGF0dXMiLCJyZXF1ZXN0c0NvdW50IiwicmVxdWVzdHMiLCJvblN1Y2Nlc3MiLCJmcm9tRXJyb3IiLCJhYm9ydCIsImF0dGFjaEV2ZW50IiwiJDY3MzFiOTk0NTkwNjI2OTkkdmFyJHVubG9hZEhhbmRsZXIiLCIka0FNS1ciLCIkZmEyMGQ2OGE2N2FjYWU0ZiR2YXIkZGVidWciLCIkZmEyMGQ2OGE2N2FjYWU0ZiR2YXIkUG9sbGluZyIsIiRmYTIwZDY4YTY3YWNhZTRmJHZhciRoYXNYSFIyIiwiZG9PcGVuIiwicG9sbCIsIm9uUGF1c2UiLCJwb2xsaW5nIiwiJGJsTDVyIiwiZGVjb2RlUGF5bG9hZCIsImRvQ2xvc2UiLCJwYWNrZXRzIiwiY2FsbGJhY2tmbiIsImVuY29kZVBheWxvYWQiLCJzY2hlbWEiLCIkY3YyUG8iLCIkZWZkY2ZkNjc5NGM1MjQ2ZCR2YXIkVHJhbnNwb3J0IiwiZGVzY3JpcHRpb24iLCJkZWNvZGVQYWNrZXQiLCIkODQzNjJlNTYzYmY1YTAwMiRleHBvcnQkYTUxZDZiMzk1ZmY0YzY1YSIsIiQ4NDM2MmU1NjNiZjVhMDAyJGV4cG9ydCQ4Y2VjOTI1Y2RiYzA2OWEzIiwiJDg0MzYyZTU2M2JmNWEwMDIkZXhwb3J0JDU3ODUyMDQ5MzYxYThlNjIiLCIkODQzNjJlNTYzYmY1YTAwMiRleHBvcnQkMTIyNGJkMzQ5MzQzYTc4MCIsIiQ4NDM2MmU1NjNiZjVhMDAyJGV4cG9ydCQ0NjQ3OTAxODc4ZjMzZjMxIiwiJDg0MzYyZTU2M2JmNWEwMDIkZXhwb3J0JGQ4MDgzYWJjNTAyNzY0YmUiLCIkODQzNjJlNTYzYmY1YTAwMiRleHBvcnQkMTQ0ZDY0ZmU1OGRhZDQ0MSIsIiQ4NDM2MmU1NjNiZjVhMDAyJGV4cG9ydCRkMTBjYzJlN2Y3NTY2YTJkIiwiJDg0MzYyZTU2M2JmNWEwMDIkZXhwb3J0JGFlMmI5ZDMxYWZmYmNiYjciLCIkODQzNjJlNTYzYmY1YTAwMiRleHBvcnQkMTg5NDA1YWI2Yzc2Mzc2YSIsIiQ4NDM2MmU1NjNiZjVhMDAyJGV4cG9ydCQ5NGQ4Y2MxZDk2NTkyOTcxIiwiJDg0MzYyZTU2M2JmNWEwMDIkdmFyJGJhc2U2NGVuY29kZXIiLCIkODQzNjJlNTYzYmY1YTAwMiR2YXIkaXNBbmRyb2lkIiwiJDg0MzYyZTU2M2JmNWEwMDIkdmFyJGlzUGhhbnRvbUpTIiwiJDg0MzYyZTU2M2JmNWEwMDIkdmFyJGRvbnRTZW5kQmxvYnMiLCIkODQzNjJlNTYzYmY1YTAwMiR2YXIkcGFja2V0cyIsInBvbmciLCJub29wIiwiJDg0MzYyZTU2M2JmNWEwMDIkdmFyJHBhY2tldHNsaXN0IiwiJGlaS2JTIiwiJDg0MzYyZTU2M2JmNWEwMDIkdmFyJGVyciIsIiQ4NDM2MmU1NjNiZjVhMDAyJHZhciRtYXAiLCJhcnkiLCJlYWNoIiwiZG9uZSIsIiRsZUNvUyIsImVhY2hXaXRoSW5kZXgiLCJjYiIsInV0ZjhlbmNvZGUiLCJjb250ZW50QXJyYXkiLCJyZXN1bHRCdWZmZXIiLCIkODQzNjJlNTYzYmY1YTAwMiR2YXIkZW5jb2RlQXJyYXlCdWZmZXIiLCIkZ0VscGEiLCJmciIsIiQ4NDM2MmU1NjNiZjVhMDAyJHZhciRlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlciIsImJsb2IiLCIkODQzNjJlNTYzYmY1YTAwMiR2YXIkZW5jb2RlQmxvYiIsIiQ4NDM2MmU1NjNiZjVhMDAyJHZhciRlbmNvZGVCYXNlNjRPYmplY3QiLCJlbmNvZGVkIiwiJGFjaWFGIiwic3RyaWN0IiwiYjY0ZGF0YSIsInJlYWRBc0RhdGFVUkwiLCJ0eXBlZCIsImJhc2ljIiwidXRmOGRlY29kZSIsIiQ4NDM2MmU1NjNiZjVhMDAyJHZhciR0cnlEZWNvZGUiLCJyZXN0IiwiJDhNdGlmIiwicGFja2V0czEiLCIkZ2NzN0YiLCJkb25lQ2FsbGJhY2siLCJzZXRMZW5ndGhIZWFkZXIiLCJyZXN1bHRzIiwiY2hyIiwicGFja2V0czIiLCJ0b3RhbExlbmd0aCIsInJlc3VsdEFycmF5IiwiYnVmZmVySW5kZXgiLCJpc1N0cmluZyIsImFiIiwidmlldyIsImxlblN0ciIsInBhY2tldHMzIiwiYmluYXJ5SWRlbnRpZmllciIsImxlbmd0aEFyeSIsImJ1ZmZlclRhaWwiLCJ0YWlsQXJyYXkiLCJtc2dMZW5ndGgiLCIkYmNiMzk0ZTU3MTk4YTRiYyR2YXIkdG9TdHJpbmciLCIkYmNiMzk0ZTU3MTk4YTRiYyR2YXIkd2l0aE5hdGl2ZUJsb2IiLCIkYmNiMzk0ZTU3MTk4YTRiYyR2YXIkd2l0aE5hdGl2ZUZpbGUiLCIkYmNiMzk0ZTU3MTk4YTRiYyR2YXIkaGFzQmluYXJ5IiwiJGJjYjM5NGU1NzE5OGE0YmMkcmVxdWlyZSRCdWZmZXIiLCJhcnJheWJ1ZmZlciIsImFidiIsImlpIiwiJGY3NThiMTQ3OTU4NWNmMjMkdmFyJG5vb3AiLCJlcnJfY2IiLCJiYWlsIiwicHJveHkiLCIkNzZjOTFlYmZiYTM5NWZkNiR2YXIkYnl0ZUFycmF5IiwiJDc2YzkxZWJmYmEzOTVmZDYkdmFyJGJ5dGVDb3VudCIsIiQ3NmM5MWViZmJhMzk1ZmQ2JHZhciRieXRlSW5kZXgiLCIkNzZjOTFlYmZiYTM5NWZkNiR2YXIkc3RyaW5nRnJvbUNoYXJDb2RlIiwiJDc2YzkxZWJmYmEzOTVmZDYkdmFyJHVjczJkZWNvZGUiLCJleHRyYSIsImNvdW50ZXIiLCIkNzZjOTFlYmZiYTM5NWZkNiR2YXIkY2hlY2tTY2FsYXJWYWx1ZSIsInRvVXBwZXJDYXNlIiwiJDc2YzkxZWJmYmEzOTVmZDYkdmFyJGNyZWF0ZUJ5dGUiLCIkNzZjOTFlYmZiYTM5NWZkNiR2YXIkZW5jb2RlQ29kZVBvaW50Iiwic3ltYm9sIiwiJDc2YzkxZWJmYmEzOTVmZDYkdmFyJHJlYWRDb250aW51YXRpb25CeXRlIiwiY29udGludWF0aW9uQnl0ZSIsIiQ3NmM5MWViZmJhMzk1ZmQ2JHZhciRkZWNvZGVTeW1ib2wiLCJieXRlMSIsImJ5dGVTdHJpbmciLCIkNzZjOTFlYmZiYTM5NWZkNiR2YXIkdWNzMmVuY29kZSIsIiRkZTJiOWUzYzU1ZDBmMzFjJGV4cG9ydCRjNTY0Y2RiYmU2ZGE0OTMiLCIkZGUyYjllM2M1NWQwZjMxYyRleHBvcnQkMmY4NzJjMGYyMTE3YmU2OSIsImNoYXJzIiwiZW5jb2RlZDEiLCJlbmNvZGVkMiIsImVuY29kZWQzIiwiZW5jb2RlZDQiLCJidWZmZXJMZW5ndGgiLCIkYzFmMGZjNWFiZTM5N2RhZSR2YXIkQmxvYkJ1aWxkZXIiLCJXZWJLaXRCbG9iQnVpbGRlciIsIk1TQmxvYkJ1aWxkZXIiLCJNb3pCbG9iQnVpbGRlciIsIiRjMWYwZmM1YWJlMzk3ZGFlJHZhciRibG9iU3VwcG9ydGVkIiwiYXBwZW5kIiwiZ2V0QmxvYiIsIiRjMWYwZmM1YWJlMzk3ZGFlJHZhciRtYXBBcnJheUJ1ZmZlclZpZXdzIiwiY2h1bmsiLCIkYzFmMGZjNWFiZTM5N2RhZSR2YXIkQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvciIsImJiIiwicGFydCIsIiQ2ZDc1OGI1ZTE0MWIyZWI0JGV4cG9ydCRjNTY0Y2RiYmU2ZGE0OTMiLCIkNmQ3NThiNWUxNDFiMmViNCRleHBvcnQkMmY4NzJjMGYyMTE3YmU2OSIsImVuY29kZVVSSUNvbXBvbmVudCIsInFzIiwicXJ5IiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsIiQ5MTlhOTJkN2VlY2E2OGZhJHZhciRwcmV2IiwiJDkxOWE5MmQ3ZWVjYTY4ZmEkdmFyJGFscGhhYmV0IiwiJDkxOWE5MmQ3ZWVjYTY4ZmEkdmFyJG1hcCIsIiQ5MTlhOTJkN2VlY2E2OGZhJHZhciRzZWVkIiwiJDkxOWE5MmQ3ZWVjYTY4ZmEkdmFyJGkiLCIkOTE5YTkyZDdlZWNhNjhmYSR2YXIkZW5jb2RlIiwiJDkxOWE5MmQ3ZWVjYTY4ZmEkdmFyJHllYXN0Iiwibm93IiwiJDdjNmMxM2I0YTBmZDYxZTQkdmFyJHMiLCIkN2M2YzEzYjRhMGZkNjFlNCR2YXIkbSIsIiQ3YzZjMTNiNGEwZmQ2MWU0JHZhciRoIiwiJDdjNmMxM2I0YTBmZDYxZTQkdmFyJGQiLCIkN2M2YzEzYjRhMGZkNjFlNCR2YXIkeSIsIiQ3YzZjMTNiNGEwZmQ2MWU0JHZhciRwbHVyYWwiLCIkN2M2YzEzYjRhMGZkNjFlNCR2YXIkcGFyc2UiLCIkN2M2YzEzYjRhMGZkNjFlNCR2YXIkZm10U2hvcnQiLCIkMzdhNDY3MjVmZDExZDA3NyR2YXIkSlNPTlBQb2xsaW5nIiwiJDM3YTQ2NzI1ZmQxMWQwNzckdmFyJGNhbGxiYWNrcyIsIiQzN2E0NjcyNWZkMTFkMDc3JHZhciRyTmV3bGluZSIsIiQzN2E0NjcyNWZkMTFkMDc3JHZhciRyRXNjYXBlZE5ld2xpbmUiLCIkMzdhNDY3MjVmZDExZDA3NyR2YXIkZW1wdHkiLCJfX19laW8iLCJzY3JpcHQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJpZnJhbWUiLCJjcmVhdGVFbGVtZW50IiwiaW5zZXJ0QXQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImluc2VydEJlZm9yZSIsImhlYWQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJhcmVhIiwiaWZyYW1lSWQiLCJjbGFzc05hbWUiLCJ0b3AiLCJzZXRBdHRyaWJ1dGUiLCJjb21wbGV0ZSIsImluaXRJZnJhbWUiLCJodG1sIiwiYWN0aW9uIiwic3VibWl0IiwiJGU0NTFhMjk4YTI3MzkxNTkkdmFyJEJyb3dzZXJXZWJTb2NrZXQiLCIkZTQ1MWEyOThhMjczOTE1OSR2YXIkTm9kZVdlYlNvY2tldCIsIiRlNDUxYTI5OGEyNzM5MTU5JHZhciRkZWJ1ZyIsIldlYlNvY2tldCIsIk1veldlYlNvY2tldCIsIiRlNDUxYTI5OGEyNzM5MTU5JHZhciRXZWJTb2NrZXRJbXBsIiwiJGU0NTFhMjk4YTI3MzkxNTkkdmFyJFdTIiwidXNpbmdCcm93c2VyV2ViU29ja2V0IiwiY2hlY2siLCJoZWFkZXJzIiwic3VwcG9ydHMiLCJiaW5hcnkiLCJhZGRFdmVudExpc3RlbmVycyIsIm9ubWVzc2FnZSIsImV2IiwiZW5jb2RlUGFja2V0IiwiJGU0NTFhMjk4YTI3MzkxNTkkcmVxdWlyZSRCdWZmZXIiLCIkMDQ3NDkzM2RlNGMwOTc0ZCR2YXIkaW5kZXhPZiIsImV2ZW50cyIsImNvbm5lY3RfZXJyb3IiLCJjb25uZWN0X3RpbWVvdXQiLCJyZWNvbm5lY3RfYXR0ZW1wdCIsInJlY29ubmVjdF9mYWlsZWQiLCJyZWNvbm5lY3RfZXJyb3IiLCJqc29uIiwiaWRzIiwiYWNrcyIsInJlY2VpdmVCdWZmZXIiLCJzZW5kQnVmZmVyIiwiY29ubmVjdGVkIiwiZGlzY29ubmVjdGVkIiwiZmxhZ3MiLCJzdWJFdmVudHMiLCIkNW1Pa0QiLCJCSU5BUllfRVZFTlQiLCJFVkVOVCIsInBvcCIsIkNPTk5FQ1QiLCJvbnBhY2tldCIsInJvb3ROYW1lc3BhY2VFcnJvciIsIkVSUk9SIiwib25jb25uZWN0Iiwib25ldmVudCIsIkFDSyIsIkJJTkFSWV9BQ0siLCJvbmFjayIsIkRJU0NPTk5FQ1QiLCJvbmRpc2Nvbm5lY3QiLCJhY2siLCJzZW50IiwiZW1pdEJ1ZmZlcmVkIiwiJDIyMWRlNTg5YzVmY2UyNTQkdmFyJHNsaWNlIiwiJGFhMTVjNWZjNTM2N2ExZmQkdmFyJEJhY2tvZmYiLCJmYWN0b3IiLCJyYW5kIiwicmFuZG9tIiwiZGV2aWF0aW9uIiwiJDI2NjFhZGU2ZGQ1NmViYWUkZXhwb3J0JGRjYTNiMDg3NWJkOWE5NTQiLCIkMjY2MWFkZTZkZDU2ZWJhZSRleHBvcnQkMTZmYTJmNDViZTA0ZGFhOCIsIiQyNjYxYWRlNmRkNTZlYmFlJGV4cG9ydCRmZmIwMDA0ZTAwNTczN2ZhIiwiJDI2NjFhZGU2ZGQ1NmViYWUkZXhwb3J0JGUyYzI5ZjE4NzcxOTk1Y2IiLCIkMjY2MWFkZTZkZDU2ZWJhZSRleHBvcnQkMjIxZDc1YjNmNTViYjBiZCIsIiQyNjYxYWRlNmRkNTZlYmFlJGV4cG9ydCQ1ZjhkMzk4MzRmZDYxNzk3IiwiJDI2NjFhZGU2ZGQ1NmViYWUkZXhwb3J0JDc0YmY0NDRlM2NkMTFlYTUiLCIkMjY2MWFkZTZkZDU2ZWJhZSRleHBvcnQkYWU1NWJlODVkOTgyMjRlZCIsIiQyNjYxYWRlNmRkNTZlYmFlJGV4cG9ydCRlNTMwMDM3MTkxZmNkNWQ3IiwiJDI2NjFhZGU2ZGQ1NmViYWUkZXhwb3J0JGZkNDJmNTJmZDNhZTExMDkiLCIkMjY2MWFkZTZkZDU2ZWJhZSRleHBvcnQkYzhhODk4N2Q0NDEwYmYyZCIsIiQyNjYxYWRlNmRkNTZlYmFlJGV4cG9ydCRkMzhjZDcyMTA0YzFmMGU5IiwiJDI2NjFhZGU2ZGQ1NmViYWUkZXhwb3J0JDdkMWUzYTVlOTVjZWNhNDMiLCIkMjY2MWFkZTZkZDU2ZWJhZSRleHBvcnQkMjU3YTg4NjJiODUxY2I1YiIsIiQyNjYxYWRlNmRkNTZlYmFlJGV4cG9ydCRhODI1NzY5MmFjODgzMTZjIiwiJDI2NjFhZGU2ZGQ1NmViYWUkZXhwb3J0JDQ4ODAxM2JhZTYzYjIxZGEiLCIkMjY2MWFkZTZkZDU2ZWJhZSRleHBvcnQkN2M3MzQ2MmUwZDI1ZTUxNCIsIiQyNjYxYWRlNmRkNTZlYmFlJGV4cG9ydCQ3NTY4NjMyZDBkMzNkMTZkIiwiJDI2NjFhZGU2ZGQ1NmViYWUkZXhwb3J0JDg4OTQ4Y2UxMjBlYTI2MTkiLCIkMjY2MWFkZTZkZDU2ZWJhZSRleHBvcnQkMzU4MDhlZTY0MGU4N2NhNyIsIiQyNjYxYWRlNmRkNTZlYmFlJGV4cG9ydCRmYWU3NDAwNWU3OGIxYTI3IiwiJDI2NjFhZGU2ZGQ1NmViYWUkZXhwb3J0JGRjOGZiY2UzZWI5NGRjMWUiLCIkMjY2MWFkZTZkZDU2ZWJhZSRleHBvcnQkNmE3YmM0ZTkxMWRjMDFjZiIsIiQyNjYxYWRlNmRkNTZlYmFlJGV4cG9ydCQ2ZDljNjliMGRlMjliNTkxIiwiJDI2NjFhZGU2ZGQ1NmViYWUkZXhwb3J0JGY2ODA4NzdhMzQ3MTFlMzciLCIkMjY2MWFkZTZkZDU2ZWJhZSRleHBvcnQkZDVhNTUyYTc2ZGVkYTNjMiIsIiQyNjYxYWRlNmRkNTZlYmFlJGV4cG9ydCRhYWFiZTRlZGE5ZWQ5OTY5IiwiJDI2NjFhZGU2ZGQ1NmViYWUkZXhwb3J0JGU1YzVhNWY5MTdhNTg3MWMiLCIkMjY2MWFkZTZkZDU2ZWJhZSRleHBvcnQkMTUzOGMzM2RlODg4N2I1OSIsIiQyNjYxYWRlNmRkNTZlYmFlJGV4cG9ydCQxM2UzMzkyMTkyMjYzOTU0IiwiJDI2NjFhZGU2ZGQ1NmViYWUkZXhwb3J0JGI4ZjU4OTBmYzc5ZDZhY2EiLCIkMjY2MWFkZTZkZDU2ZWJhZSRleHBvcnQkNjAyNDEzODU0NjVkMGEzNCIsIiQyNjYxYWRlNmRkNTZlYmFlJGV4cG9ydCQzMDZjMGFhNjVmZjllYzE2IiwiJDI2NjFhZGU2ZGQ1NmViYWUkZXhwb3J0JDdiMjg2OTcyYjhkOGNjYmYiLCIkMjY2MWFkZTZkZDU2ZWJhZSRleHBvcnQkODNkODlmYmZkODIzNjQ5MiIsIiQyNjYxYWRlNmRkNTZlYmFlJHZhciRsIiwiJDI2NjFhZGU2ZGQ1NmViYWUkdmFyJG4iLCIkMjY2MWFkZTZkZDU2ZWJhZSR2YXIkcCIsIiQyNjYxYWRlNmRkNTZlYmFlJHZhciRxIiwiJDI2NjFhZGU2ZGQ1NmViYWUkdmFyJHIiLCIkMjY2MWFkZTZkZDU2ZWJhZSR2YXIkdCIsIiQyNjYxYWRlNmRkNTZlYmFlJHZhciR1IiwiJDI2NjFhZGU2ZGQ1NmViYWUkdmFyJHYiLCIkMjY2MWFkZTZkZDU2ZWJhZSR2YXIkdyIsIiQyNjYxYWRlNmRkNTZlYmFlJHZhciR4IiwiJDI2NjFhZGU2ZGQ1NmViYWUkdmFyJHkiLCIkMjY2MWFkZTZkZDU2ZWJhZSR2YXIkeiIsIml0ZXJhdG9yIiwiJDI2NjFhZGU2ZGQ1NmViYWUkdmFyJEIiLCJpc01vdW50ZWQiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZVNldFN0YXRlIiwiJDI2NjFhZGU2ZGQ1NmViYWUkdmFyJEMiLCJhc3NpZ24iLCIkMjY2MWFkZTZkZDU2ZWJhZSR2YXIkRCIsIiQyNjYxYWRlNmRkNTZlYmFlJHZhciRFIiwicHJvcHMiLCJjb250ZXh0IiwicmVmcyIsInVwZGF0ZXIiLCIkMjY2MWFkZTZkZDU2ZWJhZSR2YXIkRiIsIiQyNjYxYWRlNmRkNTZlYmFlJHZhciRHIiwiaXNSZWFjdENvbXBvbmVudCIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCIkMjY2MWFkZTZkZDU2ZWJhZSR2YXIkSCIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiJDI2NjFhZGU2ZGQ1NmViYWUkdmFyJEkiLCIkMjY2MWFkZTZkZDU2ZWJhZSR2YXIkSiIsIiQyNjYxYWRlNmRkNTZlYmFlJHZhciRLIiwiJDI2NjFhZGU2ZGQ1NmViYWUkdmFyJEwiLCJyZWYiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIiQyNjYxYWRlNmRkNTZlYmFlJHZhciRNIiwiY2hpbGRyZW4iLCJkZWZhdWx0UHJvcHMiLCIkJHR5cGVvZiIsIl9vd25lciIsIiQyNjYxYWRlNmRkNTZlYmFlJHZhciRPIiwiJDI2NjFhZGU2ZGQ1NmViYWUkdmFyJFAiLCIkMjY2MWFkZTZkZDU2ZWJhZSR2YXIkUSIsIiQyNjYxYWRlNmRkNTZlYmFlJHZhciRlc2NhcGUiLCIkMjY2MWFkZTZkZDU2ZWJhZSR2YXIkUiIsIiQyNjYxYWRlNmRkNTZlYmFlJHZhciROIiwiJDI2NjFhZGU2ZGQ1NmViYWUkdmFyJFMiLCIkMjY2MWFkZTZkZDU2ZWJhZSR2YXIkVCIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiJDI2NjFhZGU2ZGQ1NmViYWUkdmFyJFUiLCIkMjY2MWFkZTZkZDU2ZWJhZSR2YXIkViIsInRyYW5zaXRpb24iLCJvbmx5IiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwiUmVhY3RDdXJyZW50T3duZXIiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2RlZmF1bHRWYWx1ZSIsIl9nbG9iYWxOYW1lIiwiX2NvbnRleHQiLCJyZW5kZXIiLCJfcGF5bG9hZCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VFZmZlY3QiLCJ1c2VJZCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VJbnNlcnRpb25FZmZlY3QiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJ1c2VUcmFuc2l0aW9uIiwiUEFSU0VfRVJST1IiLCJJTlZBTElEX1JFUVVFU1QiLCJNRVRIT0RfTk9UX0ZPVU5EIiwiSU5WQUxJRF9QQVJBTVMiLCJJTlRFUk5BTF9FUlJPUiIsIlNFUlZFUl9FUlJPUiIsIlJFU0VSVkVEX0VSUk9SX0NPREVTIiwiU0VSVkVSX0VSUk9SX0NPREVfUkFOR0UiLCJTVEFOREFSRF9FUlJPUl9NQVAiLCIkNjE0OGQzMjQwOWQwMWVkNCR2YXIkaXNSZXNlcnZlZEVycm9yQ29kZSIsIiRqTnBLcyIsIiQ2MTQ4ZDMyNDA5ZDAxZWQ0JHZhciRpc1ZhbGlkRXJyb3JDb2RlIiwiJDYxNDhkMzI0MDlkMDFlZDQkdmFyJGdldEVycm9yQnlDb2RlIiwidmFsdWVzIiwiZmluZCIsImlzU2VydmVyRXJyb3JDb2RlIiwiaXNSZXNlcnZlZEVycm9yQ29kZSIsImlzVmFsaWRFcnJvckNvZGUiLCJnZXRFcnJvciIsImdldEVycm9yQnlDb2RlIiwidmFsaWRhdGVKc29uUnBjRXJyb3IiLCJ2YWxpZCIsImlzTm9kZUpzIiwiaXNOb2RlIiwiJDZNZlMxIiwiX19leHBvcnRTdGFyIiwiJDRlZjM4OTQ4ZWQwZTdhN2IkZXhwb3J0JDEwNTBmODM1YjYzYjY3MWUiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJmdWxmaWxsZWQiLCJzdGVwIiwicmVqZWN0ZWQiLCIkNGVmMzg5NDhlZDBlN2E3YiRleHBvcnQkNDVkMzcxN2E0YzY5MDkyZSIsImsyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIiQ0ZWYzODk0OGVkMGU3YTdiJGV4cG9ydCRmMzM2NDNjMGRlYmVmMDg3IiwiJDRlZjM4OTQ4ZWQwZTdhN2IkZXhwb3J0JGRhNTliMTRhNjliYWVmMDQiLCIkOWY5YjczNWQxOTcyZjMwMyR2YXIkX19leHBvcnRTdGFyIiwiJDNkMzFhOWY0YTk3NDVlNzYkdmFyJGdldEJyb3dlckNyeXB0byIsIiRwYXJjZWwkZ2xvYmFsIiwiY3J5cHRvIiwibXNDcnlwdG8iLCIkM2QzMWE5ZjRhOTc0NWU3NiR2YXIkZ2V0U3VidGxlQ3J5cHRvIiwiYnJvd3NlckNyeXB0byIsInN1YnRsZSIsIndlYmtpdFN1YnRsZSIsImdldEJyb3dlckNyeXB0byIsImdldFN1YnRsZUNyeXB0byIsImlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZSIsIiRiNzU2MTI4MjQxZDYzMTk4JHZhciRpc1JlYWN0TmF0aXZlIiwiJGI3NTYxMjgyNDFkNjMxOTgkdmFyJGlzTm9kZSIsIm5vZGUiLCJpc0Jyb3dzZXIiLCIkOTg1ZjcxNjZkNzVhYjIxYyR2YXIkcGF5bG9hZElkIiwiJDk4NWY3MTY2ZDc1YWIyMWMkdmFyJGZvcm1hdEVycm9yTWVzc2FnZSIsIiQ4bFFnbCIsInBheWxvYWRJZCIsImZvcm1hdEpzb25ScGNSZXF1ZXN0IiwianNvbnJwYyIsImZvcm1hdEpzb25ScGNSZXN1bHQiLCJmb3JtYXRKc29uUnBjRXJyb3IiLCJmb3JtYXRFcnJvck1lc3NhZ2UiLCIkM2VmY2FjNTI2MGI5NDAzYyR2YXIkaXNWYWxpZERlZmF1bHRSb3V0ZSIsInJvdXRlIiwiJDNlZmNhYzUyNjBiOTQwM2MkdmFyJGlzVmFsaWRXaWxkY2FyZFJvdXRlIiwiZmlsdGVyIiwiaXNWYWxpZFJvdXRlIiwiaXNWYWxpZERlZmF1bHRSb3V0ZSIsImlzVmFsaWRXaWxkY2FyZFJvdXRlIiwiaXNWYWxpZExlYWRpbmdXaWxkY2FyZFJvdXRlIiwiaXNWYWxpZFRyYWlsaW5nV2lsZGNhcmRSb3V0ZSIsIklQZW5kaW5nUmVxdWVzdHMiLCIkZGNlNGZhOGYwNmI4NmU5MSR2YXIkSUJsb2NrY2hhaW5BdXRoZW50aWNhdG9yIiwiJDVkSjVIIiwiSUV2ZW50cyIsImNvbmZpZyIsIklCbG9ja2NoYWluQXV0aGVudGljYXRvciIsIiRkY2U0ZmE4ZjA2Yjg2ZTkxJHZhciRJQmxvY2tjaGFpblByb3ZpZGVyIiwiJDVNYjNmIiwiSUpzb25ScGNQcm92aWRlciIsImNvbm5lY3Rpb24iLCJJQmxvY2tjaGFpblByb3ZpZGVyIiwiJDQzNGEwMWZmMDRjNTg3NmUkdmFyJElKc29uUnBjQ29ubmVjdGlvbiIsIklKc29uUnBjQ29ubmVjdGlvbiIsIiQ0MzRhMDFmZjA0YzU4NzZlJHZhciRJQmFzZUpzb25ScGNQcm92aWRlciIsIklCYXNlSnNvblJwY1Byb3ZpZGVyIiwiJDM3ZDljNjBkNGIxNTQ0ZWUkdmFyJElNdWx0aVNlcnZpY2VQcm92aWRlciIsIklNdWx0aVNlcnZpY2VQcm92aWRlciIsIklKc29uUnBjUm91dGVyIiwicm91dGVzIiwiSUpzb25ScGNWYWxpZGF0b3IiLCJzY2hlbWFzIiwiJDRlODlkNDJkYzQzOGM5YWEkdmFyJGlzSnNvblJwY1BheWxvYWQiLCIkNGU4OWQ0MmRjNDM4YzlhYSR2YXIkaXNKc29uUnBjUmVzdWx0IiwiJDRlODlkNDJkYzQzOGM5YWEkdmFyJGlzSnNvblJwY0Vycm9yIiwiaXNKc29uUnBjUGF5bG9hZCIsImlzSnNvblJwY1JlcXVlc3QiLCJpc0pzb25ScGNSZXNwb25zZSIsImlzSnNvblJwY1Jlc3VsdCIsImlzSnNvblJwY0Vycm9yIiwiaXNKc29uUnBjVmFsaWRhdGlvbkludmFsaWQiLCJ2YWxpZGF0aW9uIiwiJDZiOGQ3Yjk5YjgzMmExMTYkZXhwb3J0JGJkZmQ3MDlhZTQ4MjY2OTciLCIkNmI4ZDdiOTliODMyYTExNiR2YXIkYnVuZGxlVVJMIiwiJDZiOGQ3Yjk5YjgzMmExMTYkdmFyJGdldEJhc2VVUkwiLCJtYXRjaGVzIiwiJDZiOGQ3Yjk5YjgzMmExMTYkdmFyJGdldEJ1bmRsZVVSTCIsIiQzMDNEVCIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwiJGNDQ2dLIiwiJGZ1bW5VIiwiJDIyZjQzMjdhOTgxMzU3MDEkdmFyJGZyZWVTZWxmIiwiJDIyZjQzMjdhOTgxMzU3MDEkdmFyJHJvb3QiLCIkYjQ2YjA1NzllYWNmZmM3MyR2YXIkZnJlZUdsb2JhbCIsImZyZWVQcm9jZXNzIiwibm9kZVV0aWwiLCJ0eXBlcyIsInJlcXVpcmUiLCJpc0RlZXAiLCJyZWdpc3RlciIsIiRpTE5zOSIsIiRqYzZKOCIsIiQ5ZTdlNDUyN2ZlMGQ4YjgxJGV4cG9ydCQ4M2Q4OWZiZmQ4MjM2NDkyIiwiJGQ0Mzc1YjBlZGE5NzZlYmQkdmFyJEJOIiwiJHBhcmNlbCRpbnRlcm9wRGVmYXVsdCIsIiRkNDM3NWIwZWRhOTc2ZWJkJHZhciRsb2dnZXIiLCIkZDQzNzViMGVkYTk3NmViZCR2YXIkX2NvbnN0cnVjdG9yR3VhcmQiLCIkZDQzNzViMGVkYTk3NmViZCR2YXIkTUFYX1NBRkUiLCIkZDQzNzViMGVkYTk3NmViZCRleHBvcnQkYTNkMGE3ZmE5YjY1NjgzYiIsIiRkNDM3NWIwZWRhOTc2ZWJkJGV4cG9ydCRkOTdhYTM0OWVkMjA2OTYiLCJpc0JpZ051bWJlciIsImlzSGV4U3RyaW5nIiwiaXNCeXRlcyIsIiRkNDM3NWIwZWRhOTc2ZWJkJHZhciRfd2FybmVkVG9TdHJpbmdSYWRpeCIsIiRkNDM3NWIwZWRhOTc2ZWJkJHZhciR0b0JpZ051bWJlciIsIiRkNDM3NWIwZWRhOTc2ZWJkJHZhciR0b0JOIiwiX2hleCIsIm90aGVyIiwiJGQ0Mzc1YjBlZGE5NzZlYmQkdmFyJHRocm93RmF1bHQiLCJpc05lZ2F0aXZlIiwic2hyIiwidG9CaWdJbnQiLCIkZDQzNzViMGVkYTk3NmViZCR2YXIkdG9IZXgiLCJhbnlWYWx1ZSIsIl9pc0JpZ051bWJlciIsImNvbnN0cnVjdG9yR3VhcmQiLCJmcmVlemUiLCIkMzkxZDUwZWRiNzc5MzA0MCR2YXIkbG9nZ2VyIiwiJDM5MWQ1MGVkYjc3OTMwNDAkdmFyJF9jb25zdHJ1Y3Rvckd1YXJkIiwiJDM5MWQ1MGVkYjc3OTMwNDAkdmFyJFplcm8iLCIkMzkxZDUwZWRiNzc5MzA0MCR2YXIkTmVnYXRpdmVPbmUiLCIkMzkxZDUwZWRiNzc5MzA0MCR2YXIkdGhyb3dGYXVsdCIsIiQzOTFkNTBlZGI3NzkzMDQwJHZhciR6ZXJvcyIsIiQzOTFkNTBlZGI3NzkzMDQwJHZhciRnZXRNdWx0aXBsaWVyIiwiZGVjaW1hbHMiLCIkMzkxZDUwZWRiNzc5MzA0MCRleHBvcnQkY2MwMTFiODQzYjVkNjlmMiIsIm11bHRpcGxpZXIiLCJmcmFjdGlvbiIsIndob2xlIiwiJDM5MWQ1MGVkYjc3OTMwNDAkZXhwb3J0JDFiMDM5OTg3ZTg2ZDcyNjkiLCJjb21wcyIsIndob2xlVmFsdWUiLCJmcmFjdGlvblZhbHVlIiwid2VpIiwiJDM5MWQ1MGVkYjc3OTMwNDAkZXhwb3J0JDFmM2VjNWI4ZjQ3ZWJkNGQiLCJzaWduZWQiLCJkZWZhdWx0VmFsdWUiLCJfbXVsdGlwbGllciIsIiQzOTFkNTBlZGI3NzkzMDQwJGV4cG9ydCRkNDY5M2M2NmMyMjEzZTQ1IiwiX2NoZWNrRm9ybWF0IiwiYWRkVW5zYWZlIiwiX3ZhbHVlIiwiZnJvbVZhbHVlIiwic3ViVW5zYWZlIiwibXVsVW5zYWZlIiwiZGl2VW5zYWZlIiwiaGFzRnJhY3Rpb24iLCIkMzkxZDUwZWRiNzc5MzA0MCR2YXIkT05FIiwidG9Gb3JtYXQiLCJjZWlsaW5nIiwiYnVtcCIsIiQzOTFkNTBlZGI3NzkzMDQwJHZhciRCVU1QIiwiaGV4WmVyb1BhZCIsInRvVW5zYWZlRmxvYXQiLCJmcm9tU3RyaW5nIiwiZml4ZWRGb3JtYXQiLCJudW1lcmljIiwiZGVjaW1hbCIsImZyb21CeXRlcyIsIl9pc0ZpeGVkTnVtYmVyIiwiJDI5NzQ1N2UyZDhlOWRkYjQkdmFyJGxvZ2dlciIsIiQyOTc0NTdlMmQ4ZTlkZGI0JGV4cG9ydCQxMDQyMzY1MzQ1MzRmOWJlIiwiJDI5NzQ1N2UyZDhlOWRkYjQkZXhwb3J0JGY2OTVmYmJmM2NkYWFmNDciLCIkMjk3NDU3ZTJkOGU5ZGRiNCRleHBvcnQkZDUwM2RkMTU3ZDk2M2I2MCIsInByb21pc2VzIiwiYWxsIiwiJDI5NzQ1N2UyZDhlOWRkYjQkZXhwb3J0JGFlNWEzMTZiYTYyM2I3M2EiLCJwcm9wZXJ0aWVzIiwiJDI5NzQ1N2UyZDhlOWRkYjQkZXhwb3J0JDljMTMyMzY4NzNiMTE4YTUiLCIkMjk3NDU3ZTJkOGU5ZGRiNCR2YXIkb3BhcXVlIiwiYmlnaW50IiwiYm9vbGVhbiIsImZ1bmN0aW9uIiwiJDI5NzQ1N2UyZDhlOWRkYjQkdmFyJF9pc0Zyb3plbiIsImlzRnJvemVuIiwiJDI5NzQ1N2UyZDhlOWRkYjQkdmFyJF9kZWVwQ29weSIsIiQyOTc0NTdlMmQ4ZTlkZGI0JGV4cG9ydCQ2YzQwMDUyYmVkNDMwMjEyIiwiJDI5NzQ1N2UyZDhlOWRkYjQkZXhwb3J0JDM5M2VkYzc5OGM0NzM3OWQiLCIkYTE4MWRkZDBmYTA1MDViMSRleHBvcnQkODNkODlmYmZkODIzNjQ5MiIsIiQwNDFkZDA0NzBmNWZiYjdkJHZhciRsb2dnZXIiLCIkMDQxZGQwNDcwZjVmYmI3ZCR2YXIkX2NvbnN0cnVjdG9yR3VhcmQiLCIkMDQxZGQwNDcwZjVmYmI3ZCR2YXIkTW9kaWZpZXJzQnl0ZXMiLCJjYWxsZGF0YSIsIm1lbW9yeSIsIiQwNDFkZDA0NzBmNWZiYjdkJHZhciRNb2RpZmllcnNOZXN0IiwiJDA0MWRkMDQ3MGY1ZmJiN2QkdmFyJGNoZWNrTW9kaWZpZXIiLCIkMDQxZGQwNDcwZjVmYmI3ZCR2YXIkcG9wdWxhdGUiLCIkMjk3NDU3ZTJkOGU5ZGRiNCRleHBvcnRzIiwiZGVmaW5lUmVhZE9ubHkiLCIkMDQxZGQwNDcwZjVmYmI3ZCRleHBvcnQkZjAxMGYyMzllZmM0ZDQ0NSIsInNpZ2hhc2giLCJtaW5pbWFsIiwiZnVsbCIsIiQwNDFkZDA0NzBmNWZiYjdkJHZhciRwYXJhbVR5cGVBcnJheSIsIiQwNDFkZDA0NzBmNWZiYjdkJGV4cG9ydCQ0MjZkYzA3ZjQ5M2E0YzQ3IiwiYmFzZVR5cGUiLCJpbmRleGVkIiwiY29tcG9uZW50cyIsImNvbXAiLCJhcnJheUNoaWxkcmVuIiwiYXJyYXlMZW5ndGgiLCJhbGxvd0luZGV4ZWQiLCJmcm9tT2JqZWN0IiwiaXNQYXJhbVR5cGUiLCIkMDQxZGQwNDcwZjVmYmI3ZCR2YXIkdmVyaWZ5VHlwZSIsInBhcmFtIiwib3JpZ2luYWxQYXJhbSIsIm5ld05vZGUiLCJwYXJlbnQiLCJzdGF0ZSIsImFsbG93VHlwZSIsInBhcmVudDEiLCJub2RlMSIsImFsbG93UGFyYW1zIiwiYWxsb3dOYW1lIiwiYWxsb3dBcnJheSIsInNpYmxpbmciLCJyZWFkQXJyYXkiLCIkMDQxZGQwNDcwZjVmYmI3ZCR2YXIkcGFyc2VQYXJhbVR5cGUiLCJfaXNQYXJhbVR5cGUiLCIkMDQxZGQwNDcwZjVmYmI3ZCR2YXIkcGFyc2VQYXJhbXMiLCJhbGxvd0luZGV4IiwiZGVwdGgiLCIkMDQxZGQwNDcwZjVmYmI3ZCR2YXIkc3BsaXROZXN0aW5nIiwiJDA0MWRkMDQ3MGY1ZmJiN2QkZXhwb3J0JGZmYjAwMDRlMDA1NzM3ZmEiLCJpc0ZyYWdtZW50IiwiJDA0MWRkMDQ3MGY1ZmJiN2QkZXhwb3J0JDhkNTc2YzkyOGI5MzY2OGYiLCIkMDQxZGQwNDcwZjVmYmI3ZCRleHBvcnQkOTU4NTQ4ZjA4YmFjMjgzMyIsIiQwNDFkZDA0NzBmNWZiYjdkJGV4cG9ydCQzYWM1Yzk1MDRmODAxZWE0IiwiJDA0MWRkMDQ3MGY1ZmJiN2QkZXhwb3J0JDJjNDJjNmQ1NDNhYTliNTkiLCJfaXNGcmFnbWVudCIsImFub255bW91cyIsImlucHV0cyIsImlzRXZlbnRGcmFnbWVudCIsIiQwNDFkZDA0NzBmNWZiYjdkJHZhciR2ZXJpZnlJZGVudGlmaWVyIiwiJDA0MWRkMDQ3MGY1ZmJiN2QkdmFyJHJlZ2V4UGFyZW4iLCJtb2RpZmllciIsIiQwNDFkZDA0NzBmNWZiYjdkJHZhciRwYXJzZUdhcyIsImdhcyIsIiQwNDFkZDA0NzBmNWZiYjdkJHZhciRwYXJzZU1vZGlmaWVycyIsImNvbnN0YW50IiwicGF5YWJsZSIsInN0YXRlTXV0YWJpbGl0eSIsIiQwNDFkZDA0NzBmNWZiYjdkJHZhciR2ZXJpZnlTdGF0ZSIsImlzQ29uc3RydWN0b3JGcmFnbWVudCIsInBhcmVucyIsIm91dHB1dHMiLCJpc0Z1bmN0aW9uRnJhZ21lbnQiLCJyZXR1cm5zIiwiJDA0MWRkMDQ3MGY1ZmJiN2QkdmFyJGNoZWNrRm9yYmlkZGVuIiwiZnJhZ21lbnQiLCJzaWciLCJpc0Vycm9yRnJhZ21lbnQiLCIkMDQxZGQwNDcwZjVmYmI3ZCR2YXIkcmVnZXhJZGVudGlmaWVyIiwiJGRlMGVlMGJiODdjN2E2MDgkdmFyJGxvZ2dlciIsIiRkZTBlZTBiYjg3YzdhNjA4JGV4cG9ydCQ1NTQ2YjllYzIxMTU3Y2MyIiwiY2hlY2tFcnJvcnMiLCJjaGlsZFBhdGgiLCIkZGUwZWUwYmI4N2M3YTYwOCRleHBvcnQkMmMwYzM5NTI2ZjhiYWQ0NiIsIl90aHJvd0Vycm9yIiwibG9jYWxOYW1lIiwiZHluYW1pYyIsIiRkZTBlZTBiYjg3YzdhNjA4JGV4cG9ydCRkN2E5NjAxNDZlMWEyNjllIiwiaGV4Q29uY2F0IiwiX2RhdGEiLCJfZGF0YUxlbmd0aCIsIl93cml0ZURhdGEiLCJhcHBlbmRXcml0ZXIiLCJ3cml0ZXIiLCJ3cml0ZUJ5dGVzIiwicGFkZGluZ09mZnNldCIsIl9wYWRkaW5nIiwiX2dldFZhbHVlIiwid3JpdGVWYWx1ZSIsIndyaXRlVXBkYXRhYmxlVmFsdWUiLCIkZGUwZWUwYmI4N2M3YTYwOCRleHBvcnQkMmY3YTJmMGU5MGMwN2RjNCIsIl9vZmZzZXQiLCJfY29lcmNlRnVuYyIsIl9wZWVrQnl0ZXMiLCJsb29zZSIsImFsaWduZWRMZW5ndGgiLCJhbGxvd0xvb3NlIiwic3ViUmVhZGVyIiwicmVhZEJ5dGVzIiwicmVhZFZhbHVlIiwiY29lcmNlRnVuYyIsIklOUFVUX0VSUk9SIiwiV0lORE9XIiwicm9vdCIsIkpTX1NIQTNfTk9fV0lORE9XIiwiV0VCX1dPUktFUiIsIkpTX1NIQTNfTk9fTk9ERV9KUyIsIkNPTU1PTl9KUyIsIkpTX1NIQTNfTk9fQ09NTU9OX0pTIiwiJDYzZDE4MzAwNzhkYjk0MWMkZXhwb3J0cyIsIkFNRCIsImRlZmluZSIsImFtZCIsIkFSUkFZX0JVRkZFUiIsIkpTX1NIQTNfTk9fQVJSQVlfQlVGRkVSIiwiSEVYX0NIQVJTIiwiQ1NIQUtFX1BBRERJTkciLCJTSElGVCIsIlJDIiwiQklUUyIsIlNIQUtFX0JJVFMiLCJPVVRQVVRfVFlQRVMiLCJDU0hBS0VfQllURVBBRCIsIkpTX1NIQTNfTk9fQVJSQVlfQlVGRkVSX0lTX1ZJRVciLCJjcmVhdGVPdXRwdXRNZXRob2QiLCJvdXRwdXRUeXBlIiwiS2VjY2FrIiwiY3JlYXRlU2hha2VPdXRwdXRNZXRob2QiLCJvdXRwdXRCaXRzIiwiY3JlYXRlQ3NoYWtlT3V0cHV0TWV0aG9kIiwibWV0aG9kcyIsImNyZWF0ZUttYWNPdXRwdXRNZXRob2QiLCJjcmVhdGVPdXRwdXRNZXRob2RzIiwiY3JlYXRlTWV0aG9kIiwiY3JlYXRlTWV0aG9kMSIsImFsZ29yaXRobXMiLCJieXRlcGFkIiwiS21hYyIsIm1ldGhvZE5hbWVzIiwiYWxnb3JpdGhtIiwiYml0czEiLCJtZXRob2ROYW1lIiwibmV3TWV0aG9kTmFtZSIsImJsb2NrcyIsImZpbmFsaXplZCIsImJsb2NrIiwiYmxvY2tDb3VudCIsImJ5dGVDb3VudCIsIm91dHB1dEJsb2NrcyIsIm5vdFN0cmluZyIsImxhc3RCeXRlSW5kZXgiLCJlbmNvZGVTdHJpbmciLCJzdHJzIiwicGFkZGluZ0J5dGVzIiwiZmluYWxpemUiLCJhcnJheUJ1ZmZlciIsIlVpbnQzMkFycmF5IiwiYzAiLCJjMSIsImMyIiwiYzMiLCJjNCIsImM1IiwiYzYiLCJjNyIsImM4IiwiYzkiLCJiMTAiLCJiMTEiLCJiMTIiLCJiMTMiLCJiMTQiLCJiMTUiLCJiMTYiLCJiMTciLCJiMTgiLCJiMTkiLCJiMjAiLCJiMjEiLCJiMjIiLCJiMjMiLCJiMjQiLCJiMjUiLCJiMjYiLCJiMjciLCJiMjgiLCJiMjkiLCJiMzAiLCJiMzEiLCJiMzIiLCJiMzMiLCJiMzQiLCJiMzUiLCJiMzYiLCJiMzciLCJiMzgiLCJiMzkiLCJiNDAiLCJiNDEiLCJiNDIiLCJiNDMiLCJiNDQiLCJiNDUiLCJiNDYiLCJiNDciLCJiNDgiLCJiNDkiLCIkMzZmZGM1YWEzNjU0OTg0ZiRleHBvcnQkZjgxNTFmY2U0N2FkMWMzNSIsImtlY2Nha18yNTYiLCIkYmY1NzNlYjVhMDI1MTY0ZiR2YXIkbG9nZ2VyIiwiJGJmNTczZWI1YTAyNTE2NGYkdmFyJGdldENoZWNrc3VtQWRkcmVzcyIsImFkZHJlc3MiLCJleHBhbmRlZCIsImhhc2hlZCIsIiRiZjU3M2ViNWEwMjUxNjRmJHZhciRpYmFuTG9va3VwIiwiJGJmNTczZWI1YTAyNTE2NGYkdmFyJHNhZmVEaWdpdHMiLCJsb2cxMCIsIkxOMTAiLCIkYmY1NzNlYjVhMDI1MTY0ZiR2YXIkaWJhbkNoZWNrc3VtIiwiY2hlY2tzdW0iLCIkYmY1NzNlYjVhMDI1MTY0ZiRleHBvcnQkODg0MTExMjVmMDEyOTU3YSIsIiRiZjU3M2ViNWEwMjUxNjRmJGV4cG9ydCQ5NzdlMjU1MTI2ZDc2M2Q2IiwiJGJmNTczZWI1YTAyNTE2NGYkZXhwb3J0JDk2MmM0ZGRhZGE5ZjY2OGYiLCJiYXNlMzYiLCIkYmY1NzNlYjVhMDI1MTY0ZiRleHBvcnQkYjdmYmZmZWYxMjI3MmU0MCIsInRyYW5zYWN0aW9uIiwibm9uY2UiLCJzdHJpcFplcm9zIiwiaGV4RGF0YVNsaWNlIiwiJDdaZFV1IiwiJGJmNTczZWI1YTAyNTE2NGYkZXhwb3J0JGUwYjIyZDk2NjIxZjczYTIiLCJzYWx0IiwiaW5pdENvZGVIYXNoIiwiaGV4RGF0YUxlbmd0aCIsIiQ4OWNjMGJlODAxZGQ5ZGY5JGV4cG9ydCQ1OWRiYmRlZDc3NzViZmU3IiwicmVhZGVyIiwiJDVjMjI5YmI2NDNiODdkYWMkZXhwb3J0JDg3YzQxZDExMzlhMDNmYTIiLCJjb2RlciIsIiQyMTk0Nzc1MDAwZTA4ZjU0JHZhciRsb2dnZXIiLCIkMjE5NDc3NTAwMGUwOGY1NCRleHBvcnQkMmE3MDNkYmIwY2IzNTMzOSIsImNvZGVycyIsImFycmF5VmFsdWVzIiwidW5pcXVlIiwic3RhdGljV3JpdGVyIiwiZHluYW1pY1dyaXRlciIsInVwZGF0ZUZ1bmNzIiwiZHluYW1pY09mZnNldCIsInVwZGF0ZUZ1bmMiLCJiYXNlT2Zmc2V0IiwiZnVuYyIsIiQyMTk0Nzc1MDAwZTA4ZjU0JGV4cG9ydCQ0MTc4NTcwMTBkYzkyODdmIiwiYmFzZVJlYWRlciIsIm9mZnNldFJlYWRlciIsInVuaXF1ZU5hbWVzIiwiJDIxOTQ3NzUwMDBlMDhmNTQkZXhwb3J0JDg4YmM0MTlkMmRmMTFmNTQiLCJkZWZhdWx0Q2hpbGQiLCIkNjJmYTJjZWM0ZWE3MmIwMCRleHBvcnQkZmU5MTE4ZDZjMDkzMTUwYyIsIiQ0MGQ5NmU4Y2JmZDczYmM1JGV4cG9ydCRkYjllYWRkOGRmMTJhZDJlIiwiJDQwZDk2ZThjYmZkNzNiYzUkZXhwb3J0JGU1ODIzZTk1NzRkZjE4ZDIiLCIkMWZiYTRjMTA3NGIzYmYzMiRleHBvcnQkN2RlYzlkYjY4ZTZiY2Y1YSIsIiQyOWFmMDE2MjNjNzE5NWNhJGV4cG9ydCQ3MDk4MmNhZGYyZDZiNGVjIiwiJDgyN2RmYTQ0NmJkNGZlNmUkZXhwb3J0JGJhZGQxMzE4N2MwODc2MTciLCIkYjUxOTcwMzk2ZjBiYzM3NCRleHBvcnQkYzgzZWYwOTA5YTZkZGVlYyIsIiRiNTE5NzAzOTZmMGJjMzc0JGV4cG9ydCRhYWVmOGEzZWFlOTQ4ZjAzIiwiJGI1MTk3MDM5NmYwYmMzNzQkZXhwb3J0JDlhYTA1YTU4NjYzNTBiY2YiLCIkYjUxOTcwMzk2ZjBiYzM3NCRleHBvcnQkOTI3NmRkOTdiZjYyY2M4ZCIsIiRiNTE5NzAzOTZmMGJjMzc0JGV4cG9ydCRjOGRiNTViZDc0MDUyMDllIiwiJGI1MTk3MDM5NmYwYmMzNzQkZXhwb3J0JDFiNTM4OTBkZTVhYWJkZDAiLCIkYjUxOTcwMzk2ZjBiYzM3NCRleHBvcnQkOTYzYzliOTMxN2I4MGFhZiIsIiRiNTE5NzAzOTZmMGJjMzc0JGV4cG9ydCQ2ZjhkYmIwN2ViZTZkNzM4IiwiJDU5NjZlYzVkZWIwYjliYjIkZXhwb3J0JDcxYzJlNGUyMTNkY2I3ZjIiLCIkYjM1ZTgxODM5ZjBhN2I2YSRleHBvcnQkYzdlNzlmY2I2ZjhhYzA0OCIsIiRjNjNiYmI0YTVjMDVmNGJhJGV4cG9ydCRiOTM0ZGM4Y2ZlMTM5MzhjIiwibWF4VWludFZhbHVlIiwiYm91bmRzIiwiJDFhMjdmOGZhYzkxZWI4M2YkdmFyJGxvZ2dlciIsIiQxYTI3ZjhmYWM5MWViODNmJGV4cG9ydCRjNjk4NjQ0Mjk2NDEyOWY1IiwiVW5pY29kZU5vcm1hbGl6YXRpb25Gb3JtMSIsIiQxYTI3ZjhmYWM5MWViODNmJGV4cG9ydCRjMjg1ZmE2YWMxNWZmNmE2IiwiVXRmOEVycm9yUmVhc29uMSIsIiQxYTI3ZjhmYWM5MWViODNmJHZhciRpZ25vcmVGdW5jIiwiYmFkQ29kZXBvaW50IiwiQkFEX1BSRUZJWCIsIlVORVhQRUNURURfQ09OVElOVUUiLCJPVkVSUlVOIiwiJDFhMjdmOGZhYzkxZWI4M2YkZXhwb3J0JGM2ZTIxODBjNWJiNWJjMDUiLCJpZ25vcmUiLCJPVkVSTE9ORyIsIiQxYTI3ZjhmYWM5MWViODNmJHZhciRnZXRVdGY4Q29kZVBvaW50cyIsImV4dHJhTGVuZ3RoIiwib3ZlcmxvbmdNYXNrIiwibmV4dENoYXIiLCJNSVNTSU5HX0NPTlRJTlVFIiwiT1VUX09GX1JBTkdFIiwiVVRGMTZfU1VSUk9HQVRFIiwiJDFhMjdmOGZhYzkxZWI4M2YkZXhwb3J0JDhmZWViMzEwYjRiNDc1MmYiLCIkMWEyN2Y4ZmFjOTFlYjgzZiR2YXIkZXNjYXBlQ2hhciIsIiQxYTI3ZjhmYWM5MWViODNmJGV4cG9ydCRhN2EwZWMxNTk2MGI5MDU1IiwiJDFhMjdmOGZhYzkxZWI4M2YkZXhwb3J0JDIzMmUxZGFiMDMxMzIyMzUiLCIkMWEyN2Y4ZmFjOTFlYjgzZiRleHBvcnQkNzY0M2ExZGMyYzM4ZDVlYiIsIiQxYTI3ZjhmYWM5MWViODNmJGV4cG9ydCRhZTQ3MGEzNmEzMWIyOGMyIiwiJDVkNWRlMzFmNzkwYzI0MjYkZXhwb3J0JGI5N2U5NDljMDA3NmU5NzEiLCJ0ZXh0IiwiJDVkNWRlMzFmNzkwYzI0MjYkZXhwb3J0JDQ5MzQwY2I4ZjM5NTRkYjgiLCIkZDNmZGNmYmRhNjgzYWJkNCR2YXIkY3JlYXRlVGFibGUiLCIkZDNmZGNmYmRhNjgzYWJkNCR2YXIkY3JlYXRlUmFuZ2VUYWJsZSIsIiRkM2ZkY2ZiZGE2ODNhYmQ0JHZhciRtYXRjaE1hcCIsInJhbmdlcyIsIiRkM2ZkY2ZiZGE2ODNhYmQ0JHZhciRUYWJsZV9BXzFfcmFuZ2VzIiwiJGQzZmRjZmJkYTY4M2FiZDQkdmFyJFRhYmxlX0JfMV9mbGFncyIsIiRkM2ZkY2ZiZGE2ODNhYmQ0JHZhciRUYWJsZV9CXzJfcmFuZ2VzIiwiJGQzZmRjZmJkYTY4M2FiZDQkdmFyJFRhYmxlX0JfMl9sdXRfYWJzIiwiJGQzZmRjZmJkYTY4M2FiZDQkdmFyJFRhYmxlX0JfMl9sdXRfcmVsIiwiJGQzZmRjZmJkYTY4M2FiZDQkdmFyJFRhYmxlX0JfMl9jb21wbGV4IiwiJGQzZmRjZmJkYTY4M2FiZDQkdmFyJFRhYmxlX0NfcmFuZ2VzIiwiJGQzZmRjZmJkYTY4M2FiZDQkZXhwb3J0JDk0ZjBiNmY5M2M2MTliYyIsImNvZGVzIiwiY29kZXNUYWJsZUIyIiwiY29kZXBvaW50IiwiJGQzZmRjZmJkYTY4M2FiZDQkZXhwb3J0JDk2MzBhMWYyNmE0M2I3NmMiLCJ2YWx1ZTEiLCJORktDIiwiJDkwNWE4NmI3MzYwZmM3NmUkZXhwb3J0JDJkMWI4NTQ1MTg3MzE0MjYiLCIkZjEyMDkwMGMzYWQzNGZlNiRleHBvcnQkZTlmY2ViYThmMTEwZmVhNiIsIiQ3MGRhOGU2Zjg1OTQ0NWQwJHZhciRsb2dnZXIiLCIkNzBkYThlNmY4NTk0NDVkMCR2YXIkcGFyYW1UeXBlQnl0ZXMiLCIkNzBkYThlNmY4NTk0NDVkMCR2YXIkcGFyYW1UeXBlTnVtYmVyIiwiJDcwZGE4ZTZmODU5NDQ1ZDAkZXhwb3J0JGZlMDQxZTFhODNkM2VmYzYiLCJfZ2V0Q29kZXIiLCJjb21wb25lbnQiLCJfZ2V0V29yZFNpemUiLCJfZ2V0UmVhZGVyIiwiX2dldFdyaXRlciIsImdldERlZmF1bHRWYWx1ZSIsIiQ3MGRhOGU2Zjg1OTQ0NWQwJGV4cG9ydCQ1MWQxY2ZjZGI5MTNhZGZmIiwiJDA1ZjEwNDFjMzQ5ZDI5ZDYkZXhwb3J0JGQ1NjBjN2U0YTI5NDUxYzIiLCIkOGYxNzkxNjNlZmVlY2JhNSRleHBvcnQkODNkODlmYmZkODIzNjQ5MiIsIiRiYmUzNjhjYWVhNjc0MGJkJHZhciRmbGF0IiwiZGVwdGgxIiwiZmxhdERlZXAiLCIkYmJlMzY4Y2FlYTY3NDBiZCRleHBvcnQkNjcxZDhiNGViYzBjNDJhZCIsIiRiYmUzNjhjYWVhNjc0MGJkJGV4cG9ydCQyY2RhODEyZjIyMjc2ODcxIiwidTE2Iiwic3ltYm9sX2NvdW50Iiwic2tpcCIsInBvc19wYXlsb2FkIiwicmVhZF93aWR0aCIsInJlYWRfYnVmZmVyIiwicmVhZF9iaXQiLCJGVUxMIiwiSEFMRiIsIlFSVFIiLCJNQVNLIiwic3ltYm9scyIsImxvdyIsIiRiYmUzNjhjYWVhNjc0MGJkJGV4cG9ydCQ5NTZlZWVkMGY4ZjJjZWZmIiwiJGJiZTM2OGNhZWE2NzQwYmQkZXhwb3J0JGE3ODVkZTNhMmE4ZGQxYWEiLCIkYmJlMzY4Y2FlYTY3NDBiZCR2YXIkcmVhZF9hc2NlbmRpbmciLCIkYmJlMzY4Y2FlYTY3NDBiZCR2YXIkcmVhZF9kZWx0YXMiLCIkYmJlMzY4Y2FlYTY3NDBiZCRleHBvcnQkOTMwM2JmNGUxZWRlNDkxNCIsInZYIiwidk4iLCIkYmJlMzY4Y2FlYTY3NDBiZCR2YXIkcmVhZF9jb3VudHMiLCIkYmJlMzY4Y2FlYTY3NDBiZCR2YXIkcmVhZF90cmFuc3Bvc2VkIiwiJGJiZTM2OGNhZWE2NzQwYmQkdmFyJHJlYWRfbGluZWFyX3RhYmxlIiwiZHgiLCJkeSIsIiRiYmUzNjhjYWVhNjc0MGJkJGV4cG9ydCRlOTAxMTA3MTU5MGFiNDMxIiwieXMiLCJqX2R5IiwiJGJiZTM2OGNhZWE2NzQwYmQkdmFyJHJlYWRfcmVwbGFjZW1lbnRfdGFibGUiLCIkMDYzNzc4NmI0N2NkOGIzYyR2YXIkciIsIiQ5ZkUweCIsIiQwNjM3Nzg2YjQ3Y2Q4YjNjJHZhciRWQUxJRCIsIlNldCIsIiQwNjM3Nzg2YjQ3Y2Q4YjNjJHZhciRJR05PUkVEIiwiJDA2Mzc3ODZiNDdjZDhiM2MkdmFyJE1BUFBFRCIsIiRiYmUzNjhjYWVhNjc0MGJkJHZhciRmcm9tRW50cmllcyIsIiQwNjM3Nzg2YjQ3Y2Q4YjNjJHZhciRFTU9KSV9ST09UIiwic29ydGVkIiwic29ydCIsImJyYW5jaGVzIiwidGVtcCIsImZlMGYiLCIkMDYzNzc4NmI0N2NkOGIzYyR2YXIkZXhwbG9kZV9jcCIsIiQwNjM3Nzg2YjQ3Y2Q4YjNjJHZhciRmaWx0ZXJfZmUwZiIsImNwcyIsImNwIiwiJDA2Mzc3ODZiNDdjZDhiM2MkZXhwb3J0JDUyNTJlNTRiNTdmY2Y0ZmQiLCJsYWJlbCIsImV2ZXJ5IiwiJDA2Mzc3ODZiNDdjZDhiM2MkZXhwb3J0JDQ5OWY3MTU4ODE4MzFhNTEiLCJlbW9qaV9maWx0ZXIiLCJyZXZlcnNlIiwiZW1vamkiLCIkMDYzNzc4NmI0N2NkOGIzYyR2YXIkY29uc3VtZV9lbW9qaV9yZXZlcnNlZCIsImZyb21Db2RlUG9pbnQiLCIkMDYzNzc4NmI0N2NkOGIzYyR2YXIkbm9ybWFsaXplIiwiZWF0ZW4iLCJzYXZlZCIsIl9hIiwiJDlkZTdlZTA2MDBhMmY5YjgkdmFyJGxvZ2dlciIsIiQ5ZGU3ZWUwNjAwYTJmOWI4JHZhciRaZXJvcyIsIiQ5ZGU3ZWUwNjAwYTJmOWI4JHZhciRjaGVja0NvbXBvbmVudCIsIiQ5ZGU3ZWUwNjAwYTJmOWI4JHZhciRlbnNOYW1lU3BsaXQiLCIkOWRlN2VlMDYwMGEyZjliOCRleHBvcnQkY2NlMjMwMDg4NmU3YWNlNiIsIiQ5ZGU3ZWUwNjAwYTJmOWI4JGV4cG9ydCQ5MWQ2NTFlZTM2M2UxMjA5IiwiJDlkZTdlZTA2MDBhMmY5YjgkZXhwb3J0JDZjMGE4Y2RhZTUxY2I1MTIiLCIkOGVjNmQzN2FhNzhhZDczMiRleHBvcnQkZDRjMjQxY2VjOTY1NjRjMSIsIiQwMDU4MWFkMTQ2YjQyZmZkJHZhciRsb2dnZXIiLCIkMDA1ODFhZDE0NmI0MmZmZCR2YXIkcGFkZGluZyIsIiQwMDU4MWFkMTQ2YjQyZmZkJHZhciROZWdhdGl2ZU9uZSIsIiQwMDU4MWFkMTQ2YjQyZmZkJHZhciRaZXJvIiwiJDAwNTgxYWQxNDZiNDJmZmQkdmFyJE9uZSIsIiQwMDU4MWFkMTQ2YjQyZmZkJHZhciRNYXhVaW50MjU2IiwiJDAwNTgxYWQxNDZiNDJmZmQkdmFyJGhleFRydWUiLCIkMDA1ODFhZDE0NmI0MmZmZCR2YXIkaGV4RmFsc2UiLCIkMDA1ODFhZDE0NmI0MmZmZCR2YXIkZG9tYWluRmllbGRUeXBlcyIsImNoYWluSWQiLCJ2ZXJpZnlpbmdDb250cmFjdCIsIiQwMDU4MWFkMTQ2YjQyZmZkJHZhciRkb21haW5GaWVsZE5hbWVzIiwiJDAwNTgxYWQxNDZiNDJmZmQkdmFyJGNoZWNrU3RyaW5nIiwiJDAwNTgxYWQxNDZiNDJmZmQkdmFyJGRvbWFpbkNoZWNrcyIsIiQwMDU4MWFkMTQ2YjQyZmZkJHZhciRnZXRCYXNlRW5jb2RlciIsImJvdW5kc1VwcGVyIiwiYm91bmRzTG93ZXIiLCJwYWRPZmZzZXQiLCIkMDA1ODFhZDE0NmI0MmZmZCR2YXIkaGV4UGFkUmlnaHQiLCIkMDA1ODFhZDE0NmI0MmZmZCR2YXIkZW5jb2RlVHlwZSIsIm5hbWUxIiwiZmllbGRzIiwiJDAwNTgxYWQxNDZiNDJmZmQkZXhwb3J0JDQ1OGFiOTI3YWU2MzVjMyIsImdldEVuY29kZXIiLCJfZW5jb2RlckNhY2hlIiwiX2dldEVuY29kZXIiLCJ0eXBlMSIsInN1YnR5cGUiLCJzdWJFbmNvZGVyIiwiX3R5cGVzIiwiZW5jb2RlZFR5cGUiLCJlbmNvZGVUeXBlIiwiZW5jb2RlRGF0YSIsImhhc2hTdHJ1Y3QiLCJwcmltYXJ5VHlwZSIsIl92aXNpdCIsInR5cGUyIiwidmlzaXQiLCJkb21haW4iLCJkb21haW5GaWVsZHMiLCJFSVA3MTJEb21haW4iLCJoYXNoRG9tYWluIiwicmVzb2x2ZU5hbWUiLCJzaGFsbG93Q29weSIsImVuc0NhY2hlIiwidmFsdWUyIiwiZG9tYWluVmFsdWVzIiwiZG9tYWluVHlwZXMiLCJ0eXBlc1dpdGhEb21haW4iLCJkZWVwQ29weSIsImxpbmtzIiwicGFyZW50cyIsInN1YnR5cGVzIiwiZmllbGQiLCJwcmltYXJ5VHlwZXMiLCJjaGVja0NpcmN1bGFyIiwibmFtZTIiLCJzdCIsIiRhYTdkMmUwZTdiMTI4NWI0JHZhciRsb2dnZXIiLCIkYWE3ZDJlMGU3YjEyODViNCRleHBvcnQkYzJhYjY0OTliZTk4YjNjNSIsIkRlc2NyaXB0aW9uIiwiJGFhN2QyZTBlN2IxMjg1YjQkZXhwb3J0JDdhMzIyM2IwZmFkYjY5MGIiLCIkYWE3ZDJlMGU3YjEyODViNCRleHBvcnQkY2ZiYTA4ZmMwZTQwZTJhYiIsIiRhYTdkMmUwZTdiMTI4NWI0JGV4cG9ydCQ4ZWY5OTEwMGEzYzU2ZjhjIiwiX2lzSW5kZXhlZCIsIiRhYTdkMmUwZTdiMTI4NWI0JHZhciRCdWlsdGluRXJyb3JzIiwiJGFhN2QyZTBlN2IxMjg1YjQkdmFyJHdyYXBBY2Nlc3NFcnJvciIsInByb3BlcnR5Iiwid3JhcCIsIiRhYTdkMmUwZTdiMTI4NWI0JGV4cG9ydCQ0OGNlZmI1MWE0ZTMxNWIyIiwiYWJpIiwiZnJhZ21lbnRzIiwiZXZlbnRGcmFnbWVudCIsImdldEZ1bmN0aW9uIiwibmFtZU9yU2lnbmF0dXJlT3JTaWdoYXNoIiwiZnVuY3Rpb25zIiwiZ2V0U2lnaGFzaCIsIm1hdGNoaW5nIiwiZ2V0RXZlbnQiLCJuYW1lT3JTaWduYXR1cmVPclRvcGljIiwidG9waWNoYXNoIiwiZ2V0RXZlbnRUb3BpYyIsImdldFN0YXRpYyIsIl9kZWNvZGVQYXJhbXMiLCJfYWJpQ29kZXIiLCJfZW5jb2RlUGFyYW1zIiwiZW5jb2RlRGVwbG95IiwiZGVwbG95IiwiZGVjb2RlRXJyb3JSZXN1bHQiLCJlbmNvZGVFcnJvclJlc3VsdCIsImRlY29kZUZ1bmN0aW9uRGF0YSIsImZ1bmN0aW9uRnJhZ21lbnQiLCJlbmNvZGVGdW5jdGlvbkRhdGEiLCJkZWNvZGVGdW5jdGlvblJlc3VsdCIsImVycm9yQXJncyIsImVycm9yTmFtZSIsImVycm9yU2lnbmF0dXJlIiwic2VsZWN0b3IiLCJidWlsdGluIiwiZW5jb2RlRnVuY3Rpb25SZXN1bHQiLCJlbmNvZGVGaWx0ZXJUb3BpY3MiLCJ0b3BpY3MiLCJlbmNvZGVUb3BpYyIsImVuY29kZUV2ZW50TG9nIiwiZGF0YVR5cGVzIiwiZGF0YVZhbHVlcyIsImRlY29kZUV2ZW50TG9nIiwidG9waWNIYXNoIiwiZXhwZWN0ZWQiLCJub25JbmRleGVkIiwicmVzdWx0SW5kZXhlZCIsInJlc3VsdE5vbkluZGV4ZWQiLCJub25JbmRleGVkSW5kZXgiLCJpbmRleGVkSW5kZXgiLCJwYXJzZVRyYW5zYWN0aW9uIiwidHgiLCJwYXJzZUxvZyIsInRvcGljIiwicGFyc2VFcnJvciIsImhleERhdGEiLCJlcnJvckZyYWdtZW50IiwiX2lzSW50ZXJmYWNlIiwiYnVja2V0IiwiJGFkZWE2MzJiYjAwMzUyNTEkdmFyJGxvZ2dlciIsIiRhZGVhNjMyYmIwMDM1MjUxJGV4cG9ydCQ0MDZlY2UxNTQ5Y2NkMDBlIiwiX2lzRm9ya0V2ZW50IiwiJGFkZWE2MzJiYjAwMzUyNTEkZXhwb3J0JDI4ODE0OTllMzdiNzViOWEiLCJnZXRGZWVEYXRhIiwiZ2FzUHJpY2UiLCJyZXNvbHZlUHJvcGVydGllcyIsImdldEJsb2NrIiwiZ2V0R2FzUHJpY2UiLCJsYXN0QmFzZUZlZVBlckdhcyIsIm1heEZlZVBlckdhcyIsIm1heFByaW9yaXR5RmVlUGVyR2FzIiwiYmFzZUZlZVBlckdhcyIsImV2ZW50TmFtZSIsIl9pc1Byb3ZpZGVyIiwiJGE2NDFkZDY2YTNmNWNiZjgkdmFyJGxvZ2dlciIsIiRhNjQxZGQ2NmEzZjVjYmY4JHZhciRhbGxvd2VkVHJhbnNhY3Rpb25LZXlzIiwiJGE2NDFkZDY2YTNmNWNiZjgkdmFyJGZvcndhcmRFcnJvcnMiLCIkYTY0MWRkNjZhM2Y1Y2JmOCRleHBvcnQkZmRmNTRmZGRlODFjYzlmMCIsImdldEJhbGFuY2UiLCJibG9ja1RhZyIsIl9jaGVja1Byb3ZpZGVyIiwicHJvdmlkZXIiLCJnZXRBZGRyZXNzIiwiZ2V0VHJhbnNhY3Rpb25Db3VudCIsImVzdGltYXRlR2FzIiwiY2hlY2tUcmFuc2FjdGlvbiIsInNlbmRUcmFuc2FjdGlvbiIsInBvcHVsYXRlVHJhbnNhY3Rpb24iLCJzaWduZWRUeCIsInNpZ25UcmFuc2FjdGlvbiIsImdldENoYWluSWQiLCJnZXROZXR3b3JrIiwiJGE2NDFkZDY2YTNmNWNiZjgkdmFyJF9fYXdhaXRlciIsImhhc0VpcDE1NTkiLCJmZWVEYXRhIiwiZ2FzTGltaXQiLCJfaXNTaWduZXIiLCIkYTY0MWRkNjZhM2Y1Y2JmOCRleHBvcnQkN2RiYzU2ZDliOTYxMmJhZCIsIl9mYWlsIiwic2lnbk1lc3NhZ2UiLCJfc2lnblR5cGVkRGF0YSIsIiRmYzJlYjEzOWQwNzdkNWNhJHZhciRoYXNoIiwiJGZjMmViMTM5ZDA3N2Q1Y2EkZXhwb3J0cyIsInV0aWxzIiwiY29tbW9uIiwic2hhIiwicmlwZW1kIiwiaG1hYyIsInNoYTEiLCJzaGEyNTYiLCJzaGEyMjQiLCJzaGEzODQiLCJzaGE1MTIiLCJyaXBlbWQxNjAiLCIkZDZlNDRkMzJiMzdjOTM0NCR2YXIkbWluaW1hbGlzdGljQXNzZXJ0IiwiJGQ2ZTQ0ZDMyYjM3YzkzNDQkdmFyJGFzc2VydCIsInplcm8yIiwidG9IZXgiLCJtaW5Bc3NlcnQiLCJtaW5VdGlscyIsImdldE5BRiIsIm5hZiIsImdldEpTRiIsImsxIiwianNmIiwibTgiLCJkMSIsImQyIiwidTEiLCJ1MiIsIm0xNCIsIm0yNCIsImNhY2hlZFByb3BlcnR5IiwiY29tcHV0ZXIiLCJrZXkxIiwicGFyc2VCeXRlcyIsImludEZyb21MRSIsIiRkNmU0NGQzMmIzN2M5MzQ0JHZhciRnZXROQUYiLCIkZDZlNDRkMzJiMzdjOTM0NCR2YXIkZ2V0SlNGIiwiJGQ2ZTQ0ZDMyYjM3YzkzNDQkdmFyJEJhc2VDdXJ2ZSIsImNvbmYiLCJ6ZXJvIiwidHdvIiwicG9pbnRGcm9tSlNPTiIsImdSZWQiLCJfd25hZlQxIiwiX3duYWZUMiIsIl93bmFmVDMiLCJfd25hZlQ0IiwiX2JpdExlbmd0aCIsImFkanVzdENvdW50IiwicmVkTiIsIl9tYXh3ZWxsVHJpY2siLCIkZDZlNDRkMzJiMzdjOTM0NCR2YXIkYmFzZSIsIiRkNmU0NGQzMmIzN2M5MzQ0JHZhciRCYXNlUG9pbnQiLCJjdXJ2ZSIsInByZWNvbXB1dGVkIiwicG9pbnQiLCJ2YWxpZGF0ZSIsIl9maXhlZE5hZk11bCIsImRvdWJsZXMiLCJfZ2V0RG91YmxlcyIsIkkiLCJuYWZXIiwicmVwciIsImpwb2ludCIsIm1peGVkQWRkIiwicG9pbnRzIiwidG9QIiwiX3duYWZNdWwiLCJuYWZQb2ludHMiLCJfZ2V0TkFGUG9pbnRzIiwiZGJscCIsIl93bmFmTXVsQWRkIiwiZGVmVyIsImNvZWZmcyIsImphY29iaWFuUmVzdWx0Iiwid25kV2lkdGgiLCJjb21iIiwidG9KIiwiamEiLCJqYiIsIkJhc2VQb2ludCIsImRlY29kZVBvaW50IiwicG9pbnRGcm9tWCIsImVuY29kZUNvbXByZXNzZWQiLCJfZW5jb2RlIiwiZ2V0WCIsImdldFkiLCJwcmVjb21wdXRlIiwicG93ZXIiLCJiZXRhIiwiX2dldEJldGEiLCJfaGFzRG91YmxlcyIsImRibCIsIiRkNmU0NGQzMmIzN2M5MzQ0JHZhciRTaG9ydEN1cnZlIiwidGludiIsInplcm9BIiwidGhyZWVBIiwiZW5kbyIsIl9nZXRFbmRvbW9ycGhpc20iLCJfZW5kb1duYWZUMSIsIl9lbmRvV25hZlQyIiwiJGQ2ZTQ0ZDMyYjM3YzkzNDQkdmFyJHNob3J0XzEiLCIkZDZlNDRkMzJiMzdjOTM0NCR2YXIkUG9pbnQiLCJpc1JlZCIsImluZiIsIiRkNmU0NGQzMmIzN2M5MzQ0JHZhciRKUG9pbnQiLCJ6T25lIiwibGFtYmRhIiwiYmV0YXMiLCJfZ2V0RW5kb1Jvb3RzIiwibGFtYmRhcyIsImJhc2lzIiwidmVjIiwiX2dldEVuZG9CYXNpcyIsIm50aW52IiwicHJldlIiLCJhcHJ4U3FydCIsInkxIiwieTIiLCJfZW5kb1NwbGl0IiwidjEiLCJ2MiIsInAxIiwicDIiLCJxMSIsInEyIiwiYXgiLCJyaHMiLCJfZW5kb1duYWZNdWxBZGQiLCJucG9pbnRzIiwibmNvZWZmcyIsImZyb21KU09OIiwicHJlIiwiZW5kb011bCIsIm9iajEiLCJvYmoycG9pbnQiLCJpc0luZmluaXR5IiwibngiLCJueSIsInlzMSIsImR5aW52IiwibXVsQWRkIiwiam11bEFkZCIsIl9wcmVjb21wdXRlIiwibmVnYXRlIiwiemludiIsInppbnYyIiwiYXkiLCJwejIiLCJ6MiIsInMxIiwiczIiLCJoMiIsImgzIiwibnoiLCJqeCIsImp5IiwianoiLCJqejQiLCJqeWQiLCJqeDIiLCJqeWQyIiwianlkNCIsInQxIiwidDIiLCJkbnkiLCJfemVyb0RibCIsIl90aHJlZURibCIsIl9kYmwiLCJ4eCIsInl5IiwieXl5eSIsInl5eXk4IiwiZ2FtbWEiLCJhbHBoYSIsImJldGE0IiwiYmV0YTgiLCJnZ2FtbWE4IiwiankyIiwianhkNCIsImp5ZDgiLCJ0cnBsIiwienoiLCJtbSIsImVlIiwieXl1NCIsImtiYXNlIiwiejMiLCJwejMiLCJlcVhUb1AiLCJ6cyIsInhjIiwicmVxdWlyZSQkMCIsInNob3J0IiwicmVxdWlyZSQkMSIsImVkd2FyZHMiLCJjdXJ2ZXMiLCJhc3NlcnQxIiwiUHJlc2V0Q3VydmUiLCJkZWZpbmVDdXJ2ZSIsImNyYXNoIiwiJGQ2ZTQ0ZDMyYjM3YzkzNDQkdmFyJEhtYWNEUkJHIiwicHJlZFJlc2lzdCIsIm1pbkVudHJvcHkiLCJfcmVzZWVkIiwicmVzZWVkSW50ZXJ2YWwiLCJLIiwiViIsImVudHJvcHkiLCJlbnRyb3B5RW5jIiwibm9uY2VFbmMiLCJwZXJzIiwicGVyc0VuYyIsIiRkNmU0NGQzMmIzN2M5MzQ0JHZhciRobWFjRHJiZyIsInNlZWQiLCJfaG1hYyIsImttYWMiLCJyZXNlZWQiLCJhZGRFbmMiLCJnZW5lcmF0ZSIsIiRkNmU0NGQzMmIzN2M5MzQ0JHZhciRLZXlQYWlyIiwiZWMxIiwiZWMiLCJwcml2IiwicHViIiwiX2ltcG9ydFByaXZhdGUiLCJwcml2RW5jIiwiX2ltcG9ydFB1YmxpYyIsInB1YkVuYyIsIiRkNmU0NGQzMmIzN2M5MzQ0JHZhciRrZXkiLCJmcm9tUHVibGljIiwiZWMyIiwiZnJvbVByaXZhdGUiLCJlYzMiLCJnZXRQdWJsaWMiLCJnZXRQcml2YXRlIiwia2V5MiIsImtleTMiLCJkZXJpdmUiLCJzaWduIiwidmVyaWZ5Iiwic2lnbmF0dXJlMSIsIiRkNmU0NGQzMmIzN2M5MzQ0JHZhciRTaWduYXR1cmUiLCJfaW1wb3J0REVSIiwiJGQ2ZTQ0ZDMyYjM3YzkzNDQkdmFyJHNpZ25hdHVyZSIsIiRkNmU0NGQzMmIzN2M5MzQ0JHZhciRQb3NpdGlvbiIsInBsYWNlIiwiJGQ2ZTQ0ZDMyYjM3YzkzNDQkdmFyJGdldExlbmd0aCIsImluaXRpYWwiLCJvY3RldExlbiIsIiRkNmU0NGQzMmIzN2M5MzQ0JHZhciRybVBhZGRpbmciLCIkZDZlNDRkMzJiMzdjOTM0NCR2YXIkY29uc3RydWN0TGVuZ3RoIiwib2N0ZXRzIiwic2xlbiIsInRvREVSIiwiYmFja0hhbGYiLCIkZDZlNDRkMzJiMzdjOTM0NCR2YXIkcmFuZCIsIiRkNmU0NGQzMmIzN2M5MzQ0JHZhciRFQyIsIm5oIiwiJGQ2ZTQ0ZDMyYjM3YzkzNDQkdmFyJGVjIiwia2V5UGFpciIsIktleVBhaXIiLCJrZXlGcm9tUHJpdmF0ZSIsImtleUZyb21QdWJsaWMiLCJnZW5LZXlQYWlyIiwiZHJiZyIsIkhtYWNEUkJHIiwibnMyIiwiX3RydW5jYXRlVG9OIiwidHJ1bmNPbmx5Iiwia2V5NCIsImJrZXkiLCJuczEiLCJpdGVyIiwia3AiLCJrcFgiLCJjYW5vbmljYWwiLCJTaWduYXR1cmUiLCJrZXk1Iiwic2ludiIsInJlY292ZXJQdWJLZXkiLCJpc1lPZGQiLCJpc1NlY29uZEtleSIsInJJbnYiLCJnZXRLZXlSZWNvdmVyeVBhcmFtIiwiUSIsIlFwcmltZSIsIkVDIiwiZWxsaXB0aWMiLCJyZXF1aXJlJCQyIiwicmVxdWlyZSQkMyIsImVkZHNhIiwiJDlkMWUxMTNkYjg5YjNhN2YkdmFyJGxvZ2dlciIsIiQ5ZDFlMTEzZGI4OWIzYTdmJHZhciRfY3VydmUiLCIkOWQxZTExM2RiODliM2E3ZiR2YXIkZ2V0Q3VydmUiLCIkZDZlNDRkMzJiMzdjOTM0NCRleHBvcnQkMTI5ZmUxMmQzMmFiYzMxMSIsIiQ5ZDFlMTEzZGI4OWIzYTdmJGV4cG9ydCQyMTY0M2NhOTRhZWQzZTgzIiwiX2FkZFBvaW50IiwicDAiLCJwdWJsaWNLZXkiLCJzaWduRGlnZXN0IiwicHJpdmF0ZUtleSIsImRpZ2VzdEJ5dGVzIiwic3BsaXRTaWduYXR1cmUiLCJjb21wdXRlU2hhcmVkU2VjcmV0Iiwib3RoZXJLZXkiLCJvdGhlcktleVBhaXIiLCIkOWQxZTExM2RiODliM2E3ZiRleHBvcnQkNGE4OTQ3M2QzOTMwMTIyNCIsIl9pc1NpZ25pbmdLZXkiLCIkOWQxZTExM2RiODliM2E3ZiRleHBvcnQkOTUyZGQwOWZiZTAyMzJiNyIsInJzIiwiY29tcHJlc3NlZCIsInNpZ25pbmdLZXkiLCIkMmU3MWY4YmI1OGE2OWUwNSR2YXIkbG9nZ2VyIiwiJDJlNzFmOGJiNThhNjllMDUkZXhwb3J0JDgwMzQ5ZTA1ZTA3MjRlMTEiLCJUcmFuc2FjdGlvblR5cGVzMSIsIiQyZTcxZjhiYjU4YTY5ZTA1JHZhciRoYW5kbGVBZGRyZXNzIiwiJDJlNzFmOGJiNThhNjllMDUkdmFyJGhhbmRsZU51bWJlciIsIiQyZTcxZjhiYjU4YTY5ZTA1JHZhciR0cmFuc2FjdGlvbkZpZWxkcyIsIm1heExlbmd0aCIsIiQyZTcxZjhiYjU4YTY5ZTA1JHZhciRhbGxvd2VkVHJhbnNhY3Rpb25LZXlzIiwiJDJlNzFmOGJiNThhNjllMDUkZXhwb3J0JGU2N2UyNzMyYmE5ODAzZjkiLCIkMmU3MWY4YmI1OGE2OWUwNSRleHBvcnQkMjNjYzE4Zjk2ZDg1MTBlMiIsIiQyZTcxZjhiYjU4YTY5ZTA1JHZhciRmb3JtYXROdW1iZXIiLCIkMmU3MWY4YmI1OGE2OWUwNSR2YXIkYWNjZXNzU2V0aWZ5IiwiYWRkciIsInN0b3JhZ2VLZXlzIiwic3RvcmFnZUtleSIsIiQyZTcxZjhiYjU4YTY5ZTA1JGV4cG9ydCQ2Yzg2NjJiMTYwMGRjZTIiLCJsb2NhbGVDb21wYXJlIiwiJDJlNzFmOGJiNThhNjllMDUkdmFyJGZvcm1hdEFjY2Vzc0xpc3QiLCIkMmU3MWY4YmI1OGE2OWUwNSR2YXIkX3NlcmlhbGl6ZUVpcDE1NTkiLCJhY2Nlc3NMaXN0IiwiJDJlNzFmOGJiNThhNjllMDUkdmFyJF9zZXJpYWxpemVFaXAyOTMwIiwiJDJlNzFmOGJiNThhNjllMDUkZXhwb3J0JGRmZGMxNjU1Y2NjNWI5Y2IiLCJjaGVja1Byb3BlcnRpZXMiLCJyYXciLCJmaWVsZEluZm8iLCIkMmU3MWY4YmI1OGE2OWUwNSR2YXIkX3NlcmlhbGl6ZSIsInRyYW5zYWN0aW9uVHlwZSIsIiQyZTcxZjhiYjU4YTY5ZTA1JHZhciRfcGFyc2VFaXBTaWduYXR1cmUiLCJzZXJpYWxpemUxIiwicmVjaWQiLCJlcnJvcjEiLCIkMmU3MWY4YmI1OGE2OWUwNSRleHBvcnQkOThlNmEzOWMwNDYwM2QzNiIsInJhd1RyYW5zYWN0aW9uIiwiJDJlNzFmOGJiNThhNjllMDUkdmFyJF9wYXJzZSIsIiQyZTcxZjhiYjU4YTY5ZTA1JHZhciRfcGFyc2VFaXAyOTMwIiwiJDJlNzFmOGJiNThhNjllMDUkdmFyJF9wYXJzZUVpcDE1NTkiLCIkY2U3NTQ3N2VhOWVlN2Y1NCR2YXIkbG9nZ2VyIiwiJGNlNzU0NzdlYTllZTdmNTQkdmFyJGFsbG93ZWRUcmFuc2FjdGlvbktleXMiLCJjdXN0b21EYXRhIiwiY2NpcFJlYWRFbmFibGVkIiwiJGNlNzU0NzdlYTllZTdmNTQkdmFyJHJlc29sdmVOYW1lIiwicmVzb2x2ZXIiLCJuYW1lT3JQcm9taXNlIiwiJGNlNzU0NzdlYTllZTdmNTQkdmFyJHJlc29sdmVBZGRyZXNzZXMiLCJwYXJhbVR5cGUxIiwicGFyYW1UeXBlIiwiJGNlNzU0NzdlYTllZTdmNTQkdmFyJHBvcHVsYXRlVHJhbnNhY3Rpb24iLCJjb250cmFjdCIsIm92ZXJyaWRlcyIsInNpZ25lciIsIm92ZXJyaWRlIiwiJGNlNzU0NzdlYTllZTdmNTQkdmFyJF9fYXdhaXRlciIsInJlc29sdmVkQWRkcmVzcyIsImludGVyZmFjZSIsImludHJpbnNpYyIsInJvVmFsdWUiLCJsZWZ0b3ZlcnMiLCIkY2U3NTQ3N2VhOWVlN2Y1NCR2YXIkYWRkQ29udHJhY3RXYWl0Iiwid2FpdCIsImNvbmZpcm1hdGlvbnMiLCJyZWNlaXB0IiwibG9ncyIsImV2ZW50U2lnbmF0dXJlIiwiYmxvY2tIYXNoIiwiZ2V0VHJhbnNhY3Rpb24iLCJ0cmFuc2FjdGlvbkhhc2giLCJnZXRUcmFuc2FjdGlvblJlY2VpcHQiLCIkY2U3NTQ3N2VhOWVlN2Y1NCR2YXIkYnVpbGRDYWxsIiwiY29sbGFwc2VTaW1wbGUiLCJzaWduZXJPclByb3ZpZGVyIiwiZGVwbG95VHJhbnNhY3Rpb24iLCJfZGVwbG95ZWQiLCIkY2U3NTQ3N2VhOWVlN2Y1NCR2YXIkYnVpbGREZWZhdWx0IiwidHhSZXF1ZXN0IiwiJGNlNzU0NzdlYTllZTdmNTQkdmFyJGJ1aWxkU2VuZCIsIiRjZTc1NDc3ZWE5ZWU3ZjU0JHZhciRnZXRFdmVudFRhZyIsIiRjZTc1NDc3ZWE5ZWU3ZjU0JHZhciRSdW5uaW5nRXZlbnQiLCJfbGlzdGVuZXJzIiwibGlzdGVuZXJDb3VudCIsImFyZ3NDb3B5IiwicHJlcGFyZUV2ZW50IiwiZ2V0RW1pdCIsInRhZyIsIiRjZTc1NDc3ZWE5ZWU3ZjU0JHZhciRFcnJvclJ1bm5pbmdFdmVudCIsIiRjZTc1NDc3ZWE5ZWU3ZjU0JHZhciRGcmFnbWVudFJ1bm5pbmdFdmVudCIsImRlY29kZUVycm9yIiwiY29udHJhY3RJbnRlcmZhY2UiLCIkY2U3NTQ3N2VhOWVlN2Y1NCR2YXIkV2lsZGNhcmRSdW5uaW5nRXZlbnQiLCIkY2U3NTQ3N2VhOWVlN2Y1NCRleHBvcnQkMzA0ZmFhNGZjMTc1MjhkYiIsImlzSW50ZXJmYWNlIiwiZGVwbG95ZWQiLCJfZGVwbG95ZWRQcm9taXNlIiwiZ2V0Q29kZSIsImNvbnRyYWN0QWRkcmVzcyIsImZhbGxiYWNrIiwiJGE2NDFkZDY2YTNmNWNiZjgkZXhwb3J0cyIsIlZvaWRTaWduZXIiLCJhdHRhY2giLCJhZGRyZXNzT3JOYW1lIiwiaXNJbmRleGVkIiwiX25vcm1hbGl6ZVJ1bm5pbmdFdmVudCIsInJ1bm5pbmdFdmVudCIsIl9ydW5uaW5nRXZlbnRzIiwiX2dldFJ1bm5pbmdFdmVudCIsIl9jaGVja1J1bm5pbmdFdmVudHMiLCJfd3JhcHBlZEVtaXRzIiwiX3dyYXBFdmVudCIsIl9hZGRFdmVudExpc3RlbmVyIiwid3JhcHBlZEVtaXQiLCJxdWVyeUZpbHRlciIsImZyb21CbG9ja09yQmxvY2toYXNoIiwidG9CbG9jayIsImZyb21CbG9jayIsImdldExvZ3MiLCJTaWduZXIiLCJpc1NpZ25lciIsIiRhZGVhNjMyYmIwMDM1MjUxJGV4cG9ydHMiLCJpc1Byb3ZpZGVyIiwidW5pcXVlRmlsdGVycyIsImZpbHRlcnMiLCJ1bmlxdWVTaWduYXR1cmVzIiwiY2FsbFN0YXRpYyIsIiRjZTc1NDc3ZWE5ZWU3ZjU0JHZhciRidWlsZFBvcHVsYXRlIiwiJGNlNzU0NzdlYTllZTdmNTQkdmFyJGJ1aWxkRXN0aW1hdGUiLCJzaWduYXR1cmVzIiwiJGNlNzU0NzdlYTllZTdmNTQkZXhwb3J0JDg1MTdkODBhY2YwMGUxOWEiLCIkY2U3NTQ3N2VhOWVlN2Y1NCRleHBvcnQkNTA1NTY5YTZiZjU4NGZkOSIsImdldERlcGxveVRyYW5zYWN0aW9uIiwiYnl0ZWNvZGUiLCJ1bnNpZ25lZFR4IiwiZ2V0Q29udHJhY3QiLCJjb21waWxlck91dHB1dCIsImV2bSIsImdldEludGVyZmFjZSIsImJ5dGVjb2RlSGV4IiwiJDY1ZGVjMzAwMWNiMjRlZWEkZXhwb3J0JDI0MDA0M2FiOGU4MDZlYzciLCJkaWdpdHMiLCJfbGVhZGVyIiwiYnl0ZSIsIl9hbHBoYWJldE1hcCIsIiQ2NWRlYzMwMDFjYjI0ZWVhJGV4cG9ydCQ0NWE1ODc2MzVjOTk1NGIyIiwiJDliY2IwMDM4MTcwNGQxOGEkZXhwb3J0JGQyYTg4NDljZmIyNzdjIiwiU3VwcG9ydGVkQWxnb3JpdGhtMSIsIiQwYzVjMmVkN2U0ZmRjZDAwJHZhciRsb2dnZXIiLCIkMGM1YzJlZDdlNGZkY2QwMCRleHBvcnQkZDFjZWEwZWU0ZTNmMGQzZSIsIiQwYzVjMmVkN2U0ZmRjZDAwJGV4cG9ydCRiY2VkOGQyYWFkYTJkMWM5IiwiJDBjNWMyZWQ3ZTRmZGNkMDAkZXhwb3J0JGE4ODhkMjUzMmU2ZGM3YmIiLCIkMGM1YzJlZDdlNGZkY2QwMCRleHBvcnQkOTY3MDc1ZDJmM2I4ZTdmZiIsIiQ5ODg1OGMxY2EyYjhmOTU0JGV4cG9ydCQ0NDhmYTIyYWVkYzlkYmNhIiwicGFzc3dvcmQiLCJpdGVyYXRpb25zIiwia2V5bGVuIiwiaGFzaEFsZ29yaXRobSIsImhMZW4iLCJESyIsImJsb2NrMSIsIlUiLCJkZXN0UG9zIiwiJDhhMDQ3MDk3MzBlMGE4MmYkZXhwb3J0JGFmODhkMDBkYmU3ZjUyMSIsIiQ4YTA0NzA5NzMwZTBhODJmJGV4cG9ydCQ0ZDk1MzFhOGRkYjBlYmNhIiwibW5lbW9uaWMiLCJ3b3JkbGlzdCIsImdldFdvcmQiLCJnZXRXb3JkSW5kZXgiLCJsYW5nIiwibG9jYWxlIiwiJGFkM2YzNmY1NmZkYzA0ZjMkdmFyJHdvcmRsaXN0IiwiJGFkM2YzNmY1NmZkYzA0ZjMkdmFyJGxvYWRXb3JkcyIsIiRhZDNmMzZmNTZmZGMwNGYzJGV4cG9ydCRhMmM5NTE4NzEwY2YxZjQ5IiwiJGEzNjc2NzFiZTExMjk0ZGIkZXhwb3J0JGU4ZTFiNDcxMWMyZDE5MzkiLCJlbiIsIiQ4MTc4MjU5OGNmYTgyYWFhJHZhciRsb2dnZXIiLCIkODE3ODI1OThjZmE4MmFhYSR2YXIkTiIsIiQ4MTc4MjU5OGNmYTgyYWFhJHZhciRNYXN0ZXJTZWNyZXQiLCIkODE3ODI1OThjZmE4MmFhYSR2YXIkSGFyZGVuZWRCaXQiLCIkODE3ODI1OThjZmE4MmFhYSR2YXIkZ2V0VXBwZXJNYXNrIiwiJDgxNzgyNTk4Y2ZhODJhYWEkdmFyJGJ5dGVzMzIiLCIkODE3ODI1OThjZmE4MmFhYSR2YXIkYmFzZTU4Y2hlY2siLCIkODE3ODI1OThjZmE4MmFhYSR2YXIkZ2V0V29yZGxpc3QiLCIkODE3ODI1OThjZmE4MmFhYSR2YXIkX2NvbnN0cnVjdG9yR3VhcmQiLCIkODE3ODI1OThjZmE4MmFhYSRleHBvcnQkZDQ4YWQ4OWY3ZTExYTYwMyIsIiQ4MTc4MjU5OGNmYTgyYWFhJGV4cG9ydCRiNjg2NDBjNTNlMjJiOTUyIiwiZXh0ZW5kZWRLZXkiLCJwYXJlbnRGaW5nZXJwcmludCIsImNoYWluQ29kZSIsIm5ldXRlciIsIl9kZXJpdmUiLCJJTCIsIklSIiwia2kiLCJLaSIsIm1uZW1vbmljT3JQYXRoIiwic3JjTW5lbW9uaWMiLCJwaHJhc2UiLCJmaW5nZXJwcmludCIsImRlcml2ZVBhdGgiLCJzZWVkQXJyYXkiLCIkODE3ODI1OThjZmE4MmFhYSRleHBvcnQkNGJlY2Q2NWViMjMzMTJlNiIsIiQ4MTc4MjU5OGNmYTgyYWFhJGV4cG9ydCQxMzVlMDkwZDU4YjMxMGNhIiwiX2Zyb21TZWVkIiwiJDgxNzgyNTk4Y2ZhODJhYWEkZXhwb3J0JDNkZWU3NGYxMjA0YWIwOWYiLCJjb21wcmVzc2VkUHVibGljS2V5IiwiTkZLRCIsImVudHJvcHlCaXRzIiwiY2hlY2tzdW1NYXNrIiwiaW5kaWNlcyIsInJlbWFpbmluZ0JpdHMiLCJjaGVja3N1bUJpdHMiLCIkODE3ODI1OThjZmE4MmFhYSRleHBvcnQkNWVlYTMzOTNjNjExOWM4MCIsIiQ4MTc4MjU5OGNmYTgyYWFhJGV4cG9ydCQyMmI4MGU0ZjllZmY2MzZkIiwiJDM4MTk4NjUwM2MwODEwMGUkdmFyJGxvZ2dlciIsIiQzODE5ODY1MDNjMDgxMDBlJHZhciRhbnlHbG9iYWwiLCIkMzgxOTg2NTAzYzA4MTAwZSR2YXIkZ2V0R2xvYmFsIiwiJDM4MTk4NjUwM2MwODEwMGUkdmFyJGNyeXB0byIsIiQzODE5ODY1MDNjMDgxMDBlJGV4cG9ydCQ1ZjgyOGQ5M2ZmMDM1YWE4IiwiZ2V0UmFuZG9tVmFsdWVzIiwiJDZlMTM5NDI2MmQ3ZWY4N2QkZXhwb3J0JGU2YzcyOTY4MDFiOWIzNDEiLCJjaGVja0ludCIsImNoZWNrSW50cyIsImFycmF5aXNoIiwiY29lcmNlQXJyYXkiLCJjcmVhdGVBcnJheSIsImNvcHlBcnJheSIsInNvdXJjZUFycmF5IiwidGFyZ2V0QXJyYXkiLCJzb3VyY2VTdGFydCIsInNvdXJjZUVuZCIsIkhleCIsImNvbnZlcnRVdGY4IiwidG9CeXRlcyIsImVuY29kZVVSSSIsImNvbnZlcnRIZXgiLCJudW1iZXJPZlJvdW5kcyIsInJjb24iLCJTIiwiU2kiLCJUMyIsIlQ0IiwiVDUiLCJUNiIsIlQ3IiwiVDgiLCJVMSIsIlUyIiwiVTMiLCJVNCIsImNvbnZlcnRUb0ludDMyIiwiQUVTIiwiX3ByZXBhcmUiLCJyb3VuZHMiLCJfS2UiLCJfS2QiLCJyb3VuZEtleUNvdW50IiwiS0MiLCJ0ayIsInR0IiwicmNvbnBvaW50ZXIiLCJlbmNyeXB0IiwicGxhaW50ZXh0IiwiZGVjcnlwdCIsImNpcGhlcnRleHQiLCJNb2RlT2ZPcGVyYXRpb25FQ0IiLCJfYWVzIiwiTW9kZU9mT3BlcmF0aW9uQ0JDIiwiaXYiLCJfbGFzdENpcGhlcmJsb2NrIiwiTW9kZU9mT3BlcmF0aW9uQ0ZCIiwic2VnbWVudFNpemUiLCJfc2hpZnRSZWdpc3RlciIsInhvclNlZ21lbnQiLCJlbmNyeXB0ZWQiLCJNb2RlT2ZPcGVyYXRpb25PRkIiLCJfbGFzdFByZWNpcGhlciIsIl9sYXN0UHJlY2lwaGVySW5kZXgiLCJDb3VudGVyIiwiaW5pdGlhbFZhbHVlIiwiX2NvdW50ZXIiLCJzZXRWYWx1ZSIsInNldEJ5dGVzIiwiaW5jcmVtZW50IiwiTW9kZU9mT3BlcmF0aW9uQ1RSIiwiX3JlbWFpbmluZ0NvdW50ZXIiLCJfcmVtYWluaW5nQ291bnRlckluZGV4IiwiJGUzNGEzMmZmM2E1NmY2MTgkZXhwb3J0cyIsIk1vZGVPZk9wZXJhdGlvbiIsImVjYiIsImNiYyIsImNmYiIsIm9mYiIsImN0ciIsInV0ZjgiLCJwa2NzNyIsInBhZCIsInBhZGRlciIsIl9hcnJheVRlc3QiLCIkNTllNzBhMjNkOWY2ZjA1NCRleHBvcnQkODNkODlmYmZkODIzNjQ5MiIsIiRjNDg4YWNhYjgyMjdkOWY5JGV4cG9ydCQyY2RlMDhiZGUwY2ZkOTMyIiwiaGV4U3RyaW5nIiwiJGM0ODhhY2FiODIyN2Q5ZjkkZXhwb3J0JDY3NzUyYjk5ZDNiYzYxYzYiLCIkYzQ4OGFjYWI4MjI3ZDlmOSRleHBvcnQkMzUwYmQzMzEyMGY3NDEzZSIsIiRjNDg4YWNhYjgyMjdkOWY5JGV4cG9ydCQ1YTVjMWRiZDkxMGUyYzMyIiwiY3VycmVudENoaWxkIiwibWF0Y2hpbmdDaGlsZCIsIiRjNDg4YWNhYjgyMjdkOWY5JGV4cG9ydCRlYzdiMThlYmFkNTVhM2E5IiwicmFuZG9tQnl0ZXMiLCIkNzk2ZGVhOWQ2Y2E2MmU4OCR2YXIkbG9nZ2VyIiwiJDc5NmRlYTlkNmNhNjJlODgkZXhwb3J0JDkzYTc2ZDE2Zjg4ZjJiMyIsImlzQ3Jvd2RzYWxlQWNjb3VudCIsIl9pc0Nyb3dkc2FsZUFjY291bnQiLCIkNzk2ZGVhOWQ2Y2E2MmU4OCRleHBvcnQkZTg1YTBjOWExMDY3YzVkMyIsImV0aGFkZHIiLCJlbmNzZWVkIiwiZW5jcnlwdGVkU2VlZCIsImFlc0NiYyIsInNlZWRIZXgiLCIkYjZiZjJiZGZiOThjYjAwYiRleHBvcnQkNzI0ZDZjZjZiOWZkODU3OCIsIiRiNmJmMmJkZmI5OGNiMDBiJGV4cG9ydCQ2N2RjOTI2YjhlNjhiMmQ4IiwiJGI2YmYyYmRmYjk4Y2IwMGIkZXhwb3J0JDlhNjhlZTlmOGYzYWZkMzgiLCJNQVhfVkFMVUUiLCJTSEEyNTYiLCJoMCIsImgxIiwiaDQiLCJoNSIsImg2IiwiaDciLCJieXRlc0xlZnQiLCJiaXRMZW5IaSIsImJpdExlbkxvIiwibnVtWmVyb3MiLCJQQktERjJfSE1BQ19TSEEyNTZfT25lSXRlciIsImRrTGVuIiwiaW5uZXJMZW4iLCJvdXRlcktleSIsImRrIiwiaW5jcmVtZW50Q291bnRlciIsImJsb2NrbWl4X3NhbHNhOCIsIkJZIiwiWWkiLCJfWCIsImFycmF5Y29weSIsImJsb2NreG9yIiwic2Fsc2EyMF84IiwiUiIsInNyY1BvcyIsImNoZWNrQnVmZmVyaXNoIiwiZW5zdXJlSW50ZWdlciIsIl9zY3J5cHQiLCJpNiIsIlhZIiwidG90YWxPcHMiLCJCaSIsImN1cnJlbnRPcCIsImxhc3RQZXJjZW50MTAiLCJzdG9wIiwiaTAiLCJzZXRJbW1lZGlhdGUiLCJpbmNyZW1lbnRhbFNNaXgiLCJzdGVwcyIsInBlcmNlbnQxMCIsImk0IiwiaTUiLCJkZXJpdmVkS2V5IiwibGliIiwic2NyeXB0IiwicHJvZ3Jlc3NDYWxsYmFjayIsImxhc3RQcm9ncmVzcyIsInByb2dyZXNzIiwic3luY1NjcnlwdCIsIiRjNDM2ZjY5ODA5YWMxYjc0JGV4cG9ydHMiLCIkOGRiNGVmOTJiZDhjMGVkZCR2YXIkbG9nZ2VyIiwiJDhkYjRlZjkyYmQ4YzBlZGQkdmFyJGhhc01uZW1vbmljIiwiJDhkYjRlZjkyYmQ4YzBlZGQkZXhwb3J0JGNmOWRjNGZkNmRkZTAzMTUiLCJpc0tleXN0b3JlQWNjb3VudCIsIl9pc0tleXN0b3JlQWNjb3VudCIsIiQ4ZGI0ZWY5MmJkOGMwZWRkJHZhciRfZ2V0QWNjb3VudCIsImFlc0N0ciIsIiQ4ZGI0ZWY5MmJkOGMwZWRkJHZhciRfZGVjcnlwdCIsIm1uZW1vbmljS2V5IiwiYWNjb3VudCIsIm1uZW1vbmljQ2lwaGVydGV4dCIsIm1uZW1vbmljSXYiLCJtbmVtb25pY0NvdW50ZXIiLCJtbmVtb25pY0Flc0N0ciIsImZyb21NbmVtb25pYyIsIiQ4ZGI0ZWY5MmJkOGMwZWRkJHZhciRwYmtkZjJTeW5jIiwicGFzc3dvcmRCeXRlcyIsInByZkZ1bmMiLCIkOGRiNGVmOTJiZDhjMGVkZCR2YXIkcGJrZGYyIiwiJDhkYjRlZjkyYmQ4YzBlZGQkdmFyJF9jb21wdXRlS2RmS2V5IiwicGJrZGYyRnVuYyIsInNjcnlwdEZ1bmMiLCJrZGYiLCJwcmYiLCIkOGRiNGVmOTJiZDhjMGVkZCRleHBvcnQkOWJkMmMzNzg4OWVlNWUzNiIsIiQ4ZGI0ZWY5MmJkOGMwZWRkJGV4cG9ydCRlODVhMGM5YTEwNjdjNWQzIiwiJDhkYjRlZjkyYmQ4YzBlZGQkZXhwb3J0JDViMGY2MjkyZjExZDFkMTgiLCJjbGllbnQiLCJ1dWlkUmFuZG9tIiwidXVpZCIsIm1hY1ByZWZpeCIsIm1hYyIsImNpcGhlciIsImNpcGhlcnBhcmFtcyIsImtkZnBhcmFtcyIsImRrbGVuIiwidGltZXN0YW1wIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0aEZpbGVuYW1lIiwiJGM2MWQ2MWRiODUxNmEyMjgkZXhwb3J0JGU3NGZjZGUzNzQ4ODI2N2EiLCIkOGRiNGVmOTJiZDhjMGVkZCRleHBvcnRzIiwiJGM2MWQ2MWRiODUxNmEyMjgkZXhwb3J0JDdhODFjNDM3YTY3ODg5MWEiLCJkZWNyeXB0U3luYyIsIiQ2NWRkZDIxY2ZmMmJlYWFiJHZhciRsb2dnZXIiLCIkNjVkZGQyMWNmZjJiZWFhYiRleHBvcnQkYmNjYTNlYTUxNDc3NDY1NiIsIl9tbmVtb25pYyIsIl9zaWduaW5nS2V5Iiwiam9pblNpZ25hdHVyZSIsInBvcHVsYXRlZCIsIiQwMDU4MWFkMTQ2YjQyZmZkJGV4cG9ydHMiLCJUeXBlZERhdGFFbmNvZGVyIiwicmVzb2x2ZU5hbWVzIiwiZXh0cmFFbnRyb3B5IiwiJDY1ZGRkMjFjZmYyYmVhYWIkdmFyJGhhc01uZW1vbmljIiwiaXNTaWduaW5nS2V5IiwiJDY1ZGRkMjFjZmYyYmVhYWIkZXhwb3J0JDIyOGQwZTc3MmNjMTU4Y2IiLCIkNjVkZGQyMWNmZjJiZWFhYiRleHBvcnQkMzYwM2IxYzFiY2Q3Njc5OCIsIiQ5ZWQwOWZmYTM2ODIwMDU2JHZhciRsb2dnZXIiLCIkOWVkMDlmZmEzNjgyMDA1NiR2YXIkZXRoRGVmYXVsdFByb3ZpZGVyIiwibmV0d29yazEiLCJwcm92aWRlcnMiLCJwcm92aWRlckxpc3QiLCJJbmZ1cmFQcm92aWRlciIsImluZnVyYSIsIkV0aGVyc2NhblByb3ZpZGVyIiwiZXRoZXJzY2FuIiwiQWxjaGVteVByb3ZpZGVyIiwiYWxjaGVteSIsImVycm9yMiIsIlBvY2tldFByb3ZpZGVyIiwicG9ja2V0IiwiQ2xvdWRmbGFyZVByb3ZpZGVyIiwiY2xvdWRmbGFyZSIsImVycm9yMyIsIkFua3JQcm92aWRlciIsImFua3IiLCJlcnJvcjQiLCJGYWxsYmFja1Byb3ZpZGVyIiwicXVvcnVtIiwicmVuZXR3b3JrIiwiJDllZDA5ZmZhMzY4MjAwNTYkdmFyJGV0Y0RlZmF1bHRQcm92aWRlciIsIm5ldHdvcmsyIiwiSnNvblJwY1Byb3ZpZGVyIiwiJDllZDA5ZmZhMzY4MjAwNTYkdmFyJGhvbWVzdGVhZCIsImVuc0FkZHJlc3MiLCJfZGVmYXVsdFByb3ZpZGVyIiwiJDllZDA5ZmZhMzY4MjAwNTYkdmFyJHJvcHN0ZW4iLCIkOWVkMDlmZmEzNjgyMDA1NiR2YXIkY2xhc3NpY01vcmRvciIsIiQ5ZWQwOWZmYTM2ODIwMDU2JHZhciRuZXR3b3JrcyIsInVuc3BlY2lmaWVkIiwiaG9tZXN0ZWFkIiwibWFpbm5ldCIsIm1vcmRlbiIsInJvcHN0ZW4iLCJ0ZXN0bmV0Iiwicmlua2VieSIsImtvdmFuIiwiZ29lcmxpIiwia2ludHN1Z2kiLCJjbGFzc2ljIiwiY2xhc3NpY01vcmRlbiIsImNsYXNzaWNNb3Jkb3IiLCJjbGFzc2ljVGVzdG5ldCIsImNsYXNzaWNLb3R0aSIsInhkYWkiLCJtYXRpYyIsIm1hdGljbXVtIiwib3B0aW1pc20iLCJhcmJpdHJ1bSIsImJuYiIsImJuYnQiLCIkOWVkMDlmZmEzNjgyMDA1NiRleHBvcnQkN2RlNDk3MGViZmQ4MjA2ZCIsInN0YW5kYXJkIiwiZGVmYXVsdFByb3ZpZGVyIiwiJGRhNTVkNmQ4MGRkNmYzM2EkZXhwb3J0JDk0ZGYwZTU5ZWJlYmY0YTciLCJza2lwRmV0Y2hTZXR1cCIsImNyZWRlbnRpYWxzIiwicmVkaXJlY3QiLCJyZWZlcnJlciIsImZldGNoT3B0aW9ucyIsImZldGNoIiwic3RhdHVzQ29kZSIsInN0YXR1c01lc3NhZ2UiLCJzdGF0dXNUZXh0IiwiJDkwMDljZWUxYTY2ZTllYTQkdmFyJGxvZ2dlciIsIiQ5MDA5Y2VlMWE2NmU5ZWE0JHZhciRzdGFsbGVyIiwiJDkwMDljZWUxYTY2ZTllYTQkdmFyJGJvZHlpZnkiLCIkOTAwOWNlZTFhNjZlOWVhNCRleHBvcnQkZTM3ZmEyNzAxN2M2YzAxMiIsImJvZHkxIiwicHJvY2Vzc0Z1bmMiLCJhdHRlbXB0TGltaXQiLCJ0aHJvdHRsZUxpbWl0IiwidGhyb3R0bGVDYWxsYmFjayIsInRocm90dGxlU2xvdEludGVydmFsIiwiZXJyb3JQYXNzVGhyb3VnaCIsImFsbG93MzA0IiwidGltZW91dDEiLCJhbGxvd0d6aXAiLCJ1c2VyIiwiYWxsb3dJbnNlY3VyZUF1dGhlbnRpY2F0aW9uIiwiYXV0aG9yaXphdGlvbiIsInJlRGF0YSIsImRhdGFNYXRjaCIsInJlcXVlc3RCb2R5IiwicmVxdWVzdE1ldGhvZCIsImZsYXRIZWFkZXJzIiwiaGVhZGVyIiwicnVubmluZ1RpbWVvdXQiLCJUSU1FT1VUIiwicnVubmluZ0ZldGNoIiwiJGRhNTVkNmQ4MGRkNmYzM2EkZXhwb3J0cyIsImdldFVybCIsInRyeUFnYWluIiwic3RhbGwiLCJyZXRyeUFmdGVyIiwic2VydmVyRXJyb3IiLCJ0aHJvdHRsZVJldHJ5IiwicmFjZSIsIiQ5MDA5Y2VlMWE2NmU5ZWE0JGV4cG9ydCQ2ZDcxYjY1NWFmZTE2MzhkIiwidXBkYXRlZCIsIiQ5MDA5Y2VlMWE2NmU5ZWE0JGV4cG9ydCRlMGMxMDM0OWIyYzVlMWQ0IiwiaW50ZXJ2YWwiLCJyZXRyeUxpbWl0Iiwib25jZVBvbGwiLCJvbmNlQmxvY2siLCIkMTRiM2ZjOGEwYTAxMTE2MiR2YXIkQUxQSEFCRVQiLCIkMTRiM2ZjOGEwYTAxMTE2MiR2YXIkQUxQSEFCRVRfTUFQIiwiJDE0YjNmYzhhMGEwMTExNjIkdmFyJHoiLCIkMTRiM2ZjOGEwYTAxMTE2MiR2YXIkeCIsIiQxNGIzZmM4YTBhMDExMTYyJHZhciRwb2x5bW9kU3RlcCIsIiQxNGIzZmM4YTBhMDExMTYyJHZhciRwcmVmaXhDaGsiLCJwcmVmaXgiLCJjaGsiLCIkMTRiM2ZjOGEwYTAxMTE2MiR2YXIkX19kZWNvZGUiLCJMSU1JVCIsImxvd2VyZWQiLCJ1cHBlcmVkIiwid29yZENoYXJzIiwiJDE0YjNmYzhhMGEwMTExNjIkdmFyJGNvbnZlcnQiLCJpbkJpdHMiLCJvdXRCaXRzIiwibWF4ViIsIiQxNGIzZmM4YTBhMDExMTYyJGV4cG9ydHMiLCJkZWNvZGVVbnNhZmUiLCJ0b1dvcmRzVW5zYWZlIiwidG9Xb3JkcyIsImZyb21Xb3Jkc1Vuc2FmZSIsImZyb21Xb3JkcyIsIiQwMjY4NjljNGUzMjllMzk1JGV4cG9ydCQ4M2Q4OWZiZmQ4MjM2NDkyIiwiJGNlZTRkNWUxYTJjMjllZWEkdmFyJGxvZ2dlciIsIiRjZWU0ZDVlMWEyYzI5ZWVhJGV4cG9ydCRhMDY2MzZhZGQyYTA5ZmQ4IiwiZ2V0RGVmYXVsdEZvcm1hdHMiLCJmb3JtYXRzIiwiYmlnTnVtYmVyIiwiYWxsb3dOdWxsIiwiYmxvY2tOdW1iZXIiLCJ0cmFuc2FjdGlvbkluZGV4IiwidWludDI1NiIsImNyZWF0ZXMiLCJ0cmFuc2FjdGlvblJlcXVlc3QiLCJyZWNlaXB0TG9nIiwiYXJyYXlPZiIsImxvZ0luZGV4IiwiZ2FzVXNlZCIsImxvZ3NCbG9vbSIsImN1bXVsYXRpdmVHYXNVc2VkIiwiZWZmZWN0aXZlR2FzUHJpY2UiLCJwYXJlbnRIYXNoIiwiZGlmZmljdWx0eSIsIm1pbmVyIiwiZXh0cmFEYXRhIiwidHJhbnNhY3Rpb25zIiwiYmxvY2tXaXRoVHJhbnNhY3Rpb25zIiwidHJhbnNhY3Rpb25SZXNwb25zZSIsImZpbHRlckxvZyIsInJlbW92ZWQiLCJhbGxvd0ZhbHNpc2giLCJjYWxsQWRkcmVzcyIsImhleFZhbHVlIiwiX2Jsb2NrIiwiYXV0aG9yIiwiX2RpZmZpY3VsdHkiLCJuZXR3b3JrSWQiLCJieXphbnRpdW0iLCJjaGVja0tleSIsImNoZWNrVmFsdWUiLCJudWxsVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCIkY2VlNGQ1ZTFhMmMyOWVlYSRleHBvcnQkMzA5MTIzOWY1YjIwYjg5NiIsImlzQ29tbXVuaXR5UmVzb3VyY2UiLCIkY2VlNGQ1ZTFhMmMyOWVlYSRleHBvcnQkZDkzZDVmNjFjMjQ5OGI2IiwiJGNlZTRkNWUxYTJjMjllZWEkdmFyJHRocm90dGxlTWVzc2FnZSIsIiRjZWU0ZDVlMWEyYzI5ZWVhJGV4cG9ydCQ0YzQxYmQ0OWU4MmU4MmFiIiwiJGRhNWMzMzUyY2ZmNTIzMjIkdmFyJGxvZ2dlciIsIiRkYTVjMzM1MmNmZjUyMzIyJHZhciRjaGVja1RvcGljIiwiJGRhNWMzMzUyY2ZmNTIzMjIkdmFyJHNlcmlhbGl6ZVRvcGljcyIsInRvcGljMSIsIiRkYTVjMzM1MmNmZjUyMzIyJHZhciRnZXRFdmVudFRhZyIsIkZvcmtFdmVudCIsImlzRm9ya0V2ZW50IiwiJGRhNWMzMzUyY2ZmNTIzMjIkdmFyJGdldFRpbWUiLCJnZXRUaW1lIiwiJGRhNWMzMzUyY2ZmNTIzMjIkdmFyJHN0YWxsIiwiJGRhNWMzMzUyY2ZmNTIzMjIkdmFyJFBvbGxhYmxlRXZlbnRzIiwiJGRhNWMzMzUyY2ZmNTIzMjIkZXhwb3J0JGQ2MWUyNGE2ODRmOWU1MSIsInRvcGljMiIsInBvbGxhYmxlIiwiX2xhc3RCbG9ja051bWJlciIsIl9pbmZsaWdodCIsIiRkYTVjMzM1MmNmZjUyMzIyJHZhciRjb2luSW5mb3MiLCJwMnBraCIsInAyc2giLCJpbGsiLCIkZGE1YzMzNTJjZmY1MjMyMiR2YXIkYnl0ZXMzMmlmeSIsIiRkYTVjMzM1MmNmZjUyMzIyJHZhciRiYXNlNThFbmNvZGUiLCIkZGE1YzMzNTJjZmY1MjMyMiR2YXIkbWF0Y2hlcklwZnMiLCIkZGE1YzMzNTJjZmY1MjMyMiR2YXIkbWF0Y2hlcnMiLCIkZGE1YzMzNTJjZmY1MjMyMiR2YXIkX3BhcnNlU3RyaW5nIiwiJGRhNWMzMzUyY2ZmNTIzMjIkdmFyJF9wYXJzZUJ5dGVzIiwiJGRhNWMzMzUyY2ZmNTIzMjIkdmFyJGdldElwZnNMaW5rIiwibGluayIsIiRkYTVjMzM1MmNmZjUyMzIyJHZhciRudW1QYWQiLCJwYWRkZWQiLCIkZGE1YzMzNTJjZmY1MjMyMiR2YXIkYnl0ZXNQYWQiLCIkZGE1YzMzNTJjZmY1MjMyMiR2YXIkZW5jb2RlQnl0ZXMiLCJkYXRhcyIsIiRkYTVjMzM1MmNmZjUyMzIyJGV4cG9ydCQ4YjRjODM5ODY1YjA4Mjg4Iiwic3VwcG9ydHNXaWxkY2FyZCIsIl9zdXBwb3J0c0VpcDI1NDQiLCJfZmV0Y2giLCJwYXJhbWV0ZXJzIiwiX2ZldGNoQnl0ZXMiLCJfZ2V0QWRkcmVzcyIsImNvaW5UeXBlIiwiaGV4Qnl0ZXMiLCJjb2luSW5mbyIsImdldEF2YXRhciIsImxpbmthZ2UiLCJjb250ZW50IiwiYXZhdGFyIiwiZ2V0VGV4dCIsInNjaGVtZSIsIm93bmVyIiwiX3Jlc29sdmVkQWRkcmVzcyIsInRva2VuSWQiLCJ0b2tlbk93bmVyIiwiYmFsYW5jZSIsIm1ldGFkYXRhVXJsIiwiJDkwMDljZWUxYTY2ZTllYTQkZXhwb3J0cyIsImZldGNoSnNvbiIsImltYWdlVXJsIiwiaW1hZ2UiLCJnZXRDb250ZW50SGFzaCIsImlwZnMiLCJpcG5zIiwic3dhcm0iLCJza3luZXQiLCJ1cmxTYWZlIiwia2V5Qnl0ZXMiLCIkZGE1YzMzNTJjZmY1MjMyMiR2YXIkZGVmYXVsdEZvcm1hdHRlciIsIiRkYTVjMzM1MmNmZjUyMzIyJHZhciRuZXh0UG9sbElkIiwiJGRhNWMzMzUyY2ZmNTIzMjIkZXhwb3J0JGZmM2Y2ZGQ4MzEyNWFjNDUiLCJfcmVhZHkiLCJfbmV0d29yayIsIl9uZXR3b3JrUHJvbWlzZSIsImRldGVjdE5ldHdvcmsiLCJhbnlOZXR3b3JrIiwicmVhZHkiLCJORVRXT1JLX0VSUk9SIiwiY2NpcFJlYWRGZXRjaCIsInVybHMiLCJkaXNhYmxlQ2NpcFJlYWQiLCJlcnJvck1lc3NhZ2VzIiwiZXJyb3JNZXNzYWdlIiwiX2dldEludGVybmFsQmxvY2tOdW1iZXIiLCJtYXhBZ2UiLCJfaW50ZXJuYWxCbG9ja051bWJlciIsImludGVybmFsQmxvY2tOdW1iZXIiLCJyZXNwVGltZSIsInJlcVRpbWUiLCJjaGVja0ludGVybmFsQmxvY2tOdW1iZXIiLCJwZXJmb3JtIiwibmV0d29ya0Vycm9yIiwiX21heEludGVybmFsQmxvY2tOdW1iZXIiLCJfc2V0RmFzdEJsb2NrTnVtYmVyIiwicG9sbElkIiwicnVubmVycyIsInBvbGxpbmdJbnRlcnZhbCIsIl9lbWl0dGVkIiwicHJldmlvdXNCbG9ja051bWJlciIsImV2ZW50QmxvY2tOdW1iZXIiLCJfZXZlbnRzIiwicnVubmVyIiwibWluRnJvbUJsb2NrIiwiX21heEZpbHRlckJsb2NrUmFuZ2UiLCJyZXNldEV2ZW50c0Jsb2NrIiwiY3VycmVudE5ldHdvcmsiLCJfZmFzdEJsb2NrTnVtYmVyIiwiX2Zhc3RCbG9ja051bWJlclByb21pc2UiLCJfZmFzdFF1ZXJ5RGF0ZSIsImRldGVjdGVkTmV0d29yayIsIl9wb2xsZXIiLCJzZXRJbnRlcnZhbCIsIl9ib290c3RyYXBQb2xsIiwiY2xlYXJJbnRlcnZhbCIsIl9wb2xsaW5nSW50ZXJ2YWwiLCJfZ2V0RmFzdEJsb2NrTnVtYmVyIiwiZ2V0QmxvY2tOdW1iZXIiLCJ3YWl0Rm9yVHJhbnNhY3Rpb24iLCJfd2FpdEZvclRyYW5zYWN0aW9uIiwicmVwbGFjZWFibGUiLCJyZWNlaXB0MSIsImNhbmNlbEZ1bmNzIiwiYWxyZWFkeURvbmUiLCJtaW5lZEhhbmRsZXIiLCJsYXN0QmxvY2tOdW1iZXIiLCJzdGFydEJsb2NrIiwic2Nhbm5lZEJsb2NrIiwicmVwbGFjZUhhbmRsZXIiLCIkZGE1YzMzNTJjZmY1MjMyMiR2YXIkX19hd2FpdGVyIiwibWluZWQiLCJnZXRCbG9ja1dpdGhUcmFuc2FjdGlvbnMiLCJ0aSIsImNhbmNlbGxlZCIsInJlcGxhY2VtZW50IiwiX3dyYXBUcmFuc2FjdGlvbiIsInVucmVmIiwiX2dldEJsb2NrVGFnIiwiZ2V0U3RvcmFnZUF0IiwiZXhwZWN0ZWRIYXNoIiwicmV0dXJuZWRIYXNoIiwiY29uZmlybXMiLCJzaWduZWRUcmFuc2FjdGlvbiIsImhleFR4IiwiX2dldFRyYW5zYWN0aW9uUmVxdWVzdCIsIl9nZXRGaWx0ZXIiLCJfY2FsbCIsInJlZGlyZWN0cyIsInR4U2VuZGVyIiwidXJsc09mZnNldCIsInVybHNMZW5ndGgiLCJ1cmxzRGF0YSIsImNhbGxiYWNrU2VsZWN0b3IiLCJjY2lwUmVzdWx0IiwiX2dldEJsb2NrIiwiYmxvY2tIYXNoT3JCbG9ja1RhZyIsImluY2x1ZGVUcmFuc2FjdGlvbnMiLCJibG9ja051bWJlcjEiLCJibG9ja1dpdGhUeHMiLCJnZXRFdGhlclByaWNlIiwiZ2V0UmVzb2x2ZXIiLCJjdXJyZW50TmFtZSIsIl9nZXRSZXNvbHZlciIsImFkZHJEYXRhIiwibG9va3VwQWRkcmVzcyIsInJlc29sdmVyQWRkciIsIm5hbWVPckFkZHJlc3MiLCJyZXNvbHZlckFkZHJlc3MiLCJOT1RfSU1QTEVNRU5URUQiLCJfc3RhcnRFdmVudCIsIl9zdG9wRXZlbnQiLCJzdG9wcGVkIiwiZXZlbnRUYWciLCJnZXRGb3JtYXR0ZXIiLCJrbm93bk5ldHdvcmsiLCIkOTA2NWYyYzYwZjIwYTdmOSR2YXIkbG9nZ2VyIiwiJDkwNjVmMmM2MGYyMGE3ZjkkdmFyJGVycm9yR2FzIiwiJDkwNjVmMmM2MGYyMGE3ZjkkdmFyJHNwZWx1bmsiLCJyZXF1aXJlRGF0YSIsIiQ5MDY1ZjJjNjBmMjBhN2Y5JHZhciRjaGVja0Vycm9yIiwiJDkwNjVmMmM2MGYyMGE3ZjkkdmFyJHRpbWVyIiwiJDkwNjVmMmM2MGYyMGE3ZjkkdmFyJGdldFJlc3VsdCIsIiQ5MDY1ZjJjNjBmMjBhN2Y5JHZhciRnZXRMb3dlckNhc2UiLCIkOTA2NWYyYzYwZjIwYTdmOSR2YXIkX2NvbnN0cnVjdG9yR3VhcmQiLCIkOTA2NWYyYzYwZjIwYTdmOSRleHBvcnQkNWY3YjVmY2EzNTA4NTQ1YSIsImNvbm5lY3RVbmNoZWNrZWQiLCIkOTA2NWYyYzYwZjIwYTdmOSR2YXIkVW5jaGVja2VkSnNvblJwY1NpZ25lciIsIl9hZGRyZXNzIiwiX2luZGV4IiwiYWNjb3VudHMiLCJzZW5kVW5jaGVja2VkVHJhbnNhY3Rpb24iLCJmcm9tQWRkcmVzcyIsImVzdGltYXRlIiwiJDkwNjVmMmM2MGYyMGE3ZjkkdmFyJF9fYXdhaXRlciIsImhleGxpZnlUcmFuc2FjdGlvbiIsIkFDVElPTl9SRUpFQ1RFRCIsIl9sZWdhY3lTaWduTWVzc2FnZSIsImdldFBheWxvYWQiLCJ1bmxvY2siLCJhZGRyZXNzT3JJbmRleCIsIiQ5MDY1ZjJjNjBmMjBhN2Y5JHZhciRhbGxvd2VkVHJhbnNhY3Rpb25LZXlzIiwiJDkwNjVmMmM2MGYyMGE3ZjkkZXhwb3J0JGRhMjgzMDgwMTJiZjY3NDgiLCIkZGE1YzMzNTJjZmY1MjMyMiRleHBvcnRzIiwiQmFzZVByb3ZpZGVyIiwiX2NhY2hlIiwiX2V2ZW50TG9vcENhY2hlIiwiX3VuY2FjaGVkRGV0ZWN0TmV0d29yayIsImdldFNpZ25lciIsImdldFVuY2hlY2tlZFNpZ25lciIsImxpc3RBY2NvdW50cyIsIl9uZXh0SWQiLCJyZXN1bHQxIiwicHJlcGFyZVJlcXVlc3QiLCJfc3RhcnRQZW5kaW5nIiwiX3BlbmRpbmdGaWx0ZXIiLCJwZW5kaW5nRmlsdGVyIiwiZmlsdGVySWQiLCJwb2xsMSIsImhhc2hlcyIsInNlcSIsImFsbG93RXh0cmEiLCJhbGxvd2VkIiwibmV0d29ya09yUmVhZHkiLCIkZWRjYjllNzYwNzE2MTEwZSRleHBvcnQkMzkwOWZiMzAxZDNkYzhjOSIsImxvZ2dlciIsIiQwMmUzNDgwMWM4MjJlNWFmJHZhciRsb2dnZXIiLCIkMDJlMzQ4MDFjODIyZTVhZiR2YXIkTmV4dElkIiwiJDAyZTM0ODAxYzgyMmU1YWYkZXhwb3J0JGJmYWZlNjI5MjQyZjMwYmQiLCIkOTA2NWYyYzYwZjIwYTdmOSRleHBvcnRzIiwid2Vic29ja2V0IiwiX3dlYnNvY2tldCIsIl9kZXRlY3ROZXR3b3JrIiwicmlkIiwiX3JlcXVlc3RzIiwiX3dzUmVhZHkiLCJfc3Vic2NyaWJlIiwicGFyYW0xIiwic3ViSWRQcm9taXNlIiwiX3N1YklkcyIsInN1YklkIiwiX3N1YnMiLCJldmVudDEiLCJlbWl0UmVjZWlwdCIsInN1YklkMSIsIkNPTk5FQ1RJTkciLCJtZXNzYWdlRXZlbnQiLCJzdWJzY3JpcHRpb24iLCJmYXV4UG9sbCIsIiQ1ZDQ2ZTllZWJiOTRhNWEyJHZhciRsb2dnZXIiLCIkNWQ0NmU5ZWViYjk0YTVhMiRleHBvcnQkYjNkNjQ3YzFjMjlkZjQ0ZCIsIl9zdXBlciIsIiQ1ZDQ2ZTllZWJiOTRhNWEyJGV4cG9ydCQ2NjQxMjhkNjIzOWNjZjk2IiwiYXBpS2V5IiwiJGUzMDNjZmIzZjgxMjUyNTckdmFyJGxvZ2dlciIsIiRlMzAzY2ZiM2Y4MTI1MjU3JHZhciRkZWZhdWx0QXBpS2V5IiwiJGUzMDNjZmIzZjgxMjUyNTckZXhwb3J0JGY2YzEzMzAxYzdiNzYzNzEiLCIkMDJlMzQ4MDFjODIyZTVhZiRleHBvcnRzIiwiV2ViU29ja2V0UHJvdmlkZXIiLCIkZTMwM2NmYjNmODEyNTI1NyRleHBvcnQkOTk5Y2M0MGRhM2ZiYzZmIiwiJDVkNDZlOWVlYmI5NGE1YTIkZXhwb3J0cyIsIlVybEpzb25ScGNQcm92aWRlciIsIiQxYWIxMGQwMjBmOTk4NTcyJHZhciRsb2dnZXIiLCIkMWFiMTBkMDIwZjk5ODU3MiR2YXIkZGVmYXVsdEFwaUtleSIsIiQxYWIxMGQwMjBmOTk4NTcyJHZhciRnZXRIb3N0IiwiJDFhYjEwZDAyMGY5OTg1NzIkZXhwb3J0JDcyNzgzYjJhZWZhNzJhNDUiLCJwcm9qZWN0U2VjcmV0IiwiJDBkYzg4NTY5ZTAzNmE4ZDQkdmFyJGxvZ2dlciIsIiQwZGM4ODU2OWUwMzZhOGQ0JGV4cG9ydCQ3MTEzMzgxZjhmMjY0ZmMwIiwiJGY1NmFhOTFjZDJiNWVmNTMkdmFyJGxvZ2dlciIsIiRmNTZhYTkxY2QyYjVlZjUzJHZhciRnZXRUcmFuc2FjdGlvblBvc3REYXRhIiwibWF4RmVlUGVyR3MiLCIkZjU2YWE5MWNkMmI1ZWY1MyR2YXIkZ2V0UmVzdWx0IiwiJGY1NmFhOTFjZDJiNWVmNTMkdmFyJGdldEpzb25SZXN1bHQiLCIkZjU2YWE5MWNkMmI1ZWY1MyR2YXIkY2hlY2tMb2dUYWciLCIkZjU2YWE5MWNkMmI1ZWY1MyR2YXIkY2hlY2tFcnJvciIsIiRmNTZhYTkxY2QyYjVlZjUzJGV4cG9ydCRkZDFkOTQyYTUzNmM3OTEyIiwiZ2V0QmFzZVVybCIsImJhc2VVcmwiLCJnZXRQb3N0VXJsIiwiZ2V0UG9zdERhdGEiLCJhcGlrZXkiLCJwb3N0IiwicHJvY0Z1bmMiLCJwYXlsb2FkU3RyIiwidHhoYXNoIiwicG9zdERhdGEiLCJ0b3BpYzAiLCJldGh1c2QiLCJnZXRIaXN0b3J5IiwiZW5kQmxvY2siLCJzdGFydGJsb2NrIiwiZW5kYmxvY2siLCJ0aW1lU3RhbXAiLCIkMGUwMGRkNTI1YTM0OGUxYiR2YXIkbG9nZ2VyIiwiJDBlMDBkZDUyNWEzNDhlMWIkdmFyJG5vdyIsIiQwZTAwZGQ1MjVhMzQ4ZTFiJHZhciRjaGVja05ldHdvcmtzIiwibmV0d29ya3MiLCIkMGUwMGRkNTI1YTM0OGUxYiR2YXIkbWVkaWFuIiwibWF4RGVsdGEiLCJtaWRkbGUiLCIkMGUwMGRkNTI1YTM0OGUxYiR2YXIkc2VyaWFsaXplIiwiJDBlMDBkZDUyNWEzNDhlMWIkdmFyJG5leHRSaWQiLCIkMGUwMGRkNTI1YTM0OGUxYiR2YXIkc3RhbGwiLCIkMGUwMGRkNTI1YTM0OGUxYiR2YXIkRm9yd2FyZEVycm9ycyIsIiQwZTAwZGQ1MjVhMzQ4ZTFiJHZhciRGb3J3YXJkUHJvcGVydGllcyIsIiQwZTAwZGQ1MjVhMzQ4ZTFiJHZhciRleHBvc2VEZWJ1Z0NvbmZpZyIsIm5vdzEiLCJ3ZWlnaHQiLCIkMGUwMGRkNTI1YTM0OGUxYiR2YXIkZ2V0UHJvY2Vzc0Z1bmMiLCJjb25maWdzIiwiX2hpZ2hlc3RCbG9ja051bWJlciIsInRhbGx5IiwiJDBlMDBkZDUyNWEzNDhlMWIkdmFyJG5vcm1hbGl6ZWRUYWxseSIsIiQwZTAwZGQ1MjVhMzQ4ZTFiJHZhciR3YWl0Rm9yU3luYyIsIiQwZTAwZGQ1MjVhMzQ4ZTFiJHZhciRnZXRSdW5uZXIiLCJjdXJyZW50QmxvY2tOdW1iZXIiLCIkMGUwMGRkNTI1YTM0OGUxYiRleHBvcnQkY2IxZDBiZWFjYjU1ZmViNyIsInByb3ZpZGVyQ29uZmlncyIsInByaW9yaXR5IiwidDAiLCJpbmZsaWdodFdlaWdodCIsInN0YWxsVGltZW91dCIsInN0YWxsZXIiLCJiYWNrZW5kIiwid2FpdGluZyIsImdldFByb21pc2UiLCJlcnJvckNvZGUiLCJjb25maWdPclByb3ZpZGVyIiwiJDMxMTc1OTNmZjYxZjRjODYkZXhwb3J0JGZiZTE1MWY5MGExZWNlMDEiLCIkNDk4N2E3YTliMWJmYWVhYiR2YXIkbG9nZ2VyIiwiJDQ5ODdhN2E5YjFiZmFlYWIkdmFyJGRlZmF1bHRQcm9qZWN0SWQiLCIkNDk4N2E3YTliMWJmYWVhYiRleHBvcnQkZGQxNjhhODA3ZDYwZGE0ZiIsInByb2plY3RJZCIsIiQ0OTg3YTdhOWIxYmZhZWFiJGV4cG9ydCQ2MGZmMWE1NTliNWM2ZWJkIiwiYXBpS2V5T2JqIiwiJDI1ZWI5NTcxMjIzNzlkNTEkZXhwb3J0JDVhMTYwOTJiZjIwZWRmOTciLCJyZXF1ZXN0MSIsIl9wZW5kaW5nQmF0Y2giLCJpbmZsaWdodFJlcXVlc3QxIiwiX3BlbmRpbmdCYXRjaEFnZ3JlZ2F0b3IiLCJiYXRjaCIsImluZmxpZ2h0IiwiaW5mbGlnaHRSZXF1ZXN0IiwiJDIyM2JhMzZjY2MzMzE3ZjkkdmFyJGxvZ2dlciIsIiQyMjNiYTM2Y2NjMzMxN2Y5JGV4cG9ydCQ4MjM1Y2JjZTNjZTI3M2JkIiwiJDI3OTA4ZmU4ZTc0OTZmMjgkdmFyJGxvZ2dlciIsIiQyNzkwOGZlOGU3NDk2ZjI4JHZhciRkZWZhdWx0QXBwbGljYXRpb25JZCIsIiQyNzkwOGZlOGU3NDk2ZjI4JGV4cG9ydCQ1OGJiNDdlNDJmNmIwOTJlIiwiYXBwbGljYXRpb25JZCIsImxvYWRCYWxhbmNlciIsImFwcGxpY2F0aW9uU2VjcmV0S2V5IiwiJDQ2NTRiZmQ2Mzg1NjNhOTEkdmFyJGxvZ2dlciIsIiQ0NjU0YmZkNjM4NTYzYTkxJHZhciRfbmV4dElkIiwiJDQ2NTRiZmQ2Mzg1NjNhOTEkdmFyJGJ1aWxkV2ViM0xlZ2FjeUZldGNoZXIiLCJzZW5kRnVuYyIsImZldGNoZXIiLCIkNDY1NGJmZDYzODU2M2E5MSRleHBvcnQkZDA1MDk2YzlmZDlkOTM2ZCIsImpzb25ScGNGZXRjaEZ1bmMiLCJzdWJwcm92aWRlciIsImlzTWV0YU1hc2siLCIkNDY1NGJmZDYzODU2M2E5MSR2YXIkYnVpbGRFaXAxMTkzRmV0Y2hlciIsInNlbmRBc3luYyIsIiRmZTMyYmEzNDJjZTMwYWE5JHZhciRsb2dnZXIiLCIkZmUzMmJhMzQyY2UzMGFhOSRleHBvcnQkNGY3N2ExZDNjMWFjNjY0MiIsIiQwZTAwZGQ1MjVhMzQ4ZTFiJGV4cG9ydHMiLCIkMGRjODg1NjllMDM2YThkNCRleHBvcnRzIiwiJGY1NmFhOTFjZDJiNWVmNTMkZXhwb3J0cyIsIiQzMmIxMmU5MjVmOWY3MjY1JHZhciRyZWdleEJ5dGVzIiwiJDMyYjEyZTkyNWY5ZjcyNjUkdmFyJHJlZ2V4TnVtYmVyIiwiJDMyYjEyZTkyNWY5ZjcyNjUkdmFyJHJlZ2V4QXJyYXkiLCIkMzJiMTJlOTI1ZjlmNzI2NSR2YXIkbG9nZ2VyIiwiJDMyYjEyZTkyNWY5ZjcyNjUkdmFyJF9wYWNrIiwiemVyb1BhZCIsIiQzMmIxMmU5MjVmOWY3MjY1JGV4cG9ydCQyYTcwM2RiYjBjYjM1MzM5IiwidGlnaHQiLCIkMzJiMTJlOTI1ZjlmNzI2NSRleHBvcnQkZjgxNTFmY2U0N2FkMWMzNSIsIiQzMmIxMmU5MjVmOWY3MjY1JGV4cG9ydCRiY2VkOGQyYWFkYTJkMWM5IiwiJDE1Yzk1YTgxYjNkNWU2NTYkdmFyJGxvZ2dlciIsIiQxNWM5NWE4MWIzZDVlNjU2JHZhciRuYW1lcyIsIiQxNWM5NWE4MWIzZDVlNjU2JGV4cG9ydCRkZTEyOTQ3NjdlNmVmNjYxIiwic3VmZml4IiwiZm9ybWF0dGVkIiwiJDE1Yzk1YTgxYjNkNWU2NTYkZXhwb3J0JGJkMzliOTZmNzFkYTE4ODUiLCJ1bml0TmFtZSIsIiQxNWM5NWE4MWIzZDVlNjU2JGV4cG9ydCQyMDNhZTMwYjRmNjQ5MGIzIiwiJDE1Yzk1YTgxYjNkNWU2NTYkZXhwb3J0JDExYmM2M2I0YzAzZWE1MTgiLCIkMTVjOTVhODFiM2Q1ZTY1NiRleHBvcnQkNjQyYzRlNjdiYmRjMGJjNyIsImV0aGVyIiwiJGJmMzc5NTdmYTBhMTQ4Y2QkZXhwb3J0JDgzZDg5ZmJmZDgyMzY0OTIiLCIkZGIxOGNkMTE3MTlmMzQ2MCRleHBvcnQkYWY4OGQwMGRiZTdmNTIxIiwiYW55R2xvYmFsIiwiX2V0aGVycyIsIiRkYjE4Y2QxMTcxOWYzNDYwJGV4cG9ydHMiLCIkNzEzNTJiMzFiNGM0NWYxMyRleHBvcnRzIiwiJDU3ODBlMjE3OWZmMTQwNDEkZXhwb3J0JGM5NDRhNDUyNmQ0ZWQ0ZjMiLCJTdG9yZSIsImU0IiwiaW5pdGlhbFN0YXRlIiwiZW1pdHRlciIsImNyZWF0ZUVtaXR0ZXIiLCJuMiIsImdldFN0YXRlIiwic3RhdGVPclN0YXRlU2V0dGVyIiwibmV3U3RhdGUiLCJwcmV2U3RhdGUiLCJzZXRTdGF0ZVNpbGVudCIsIiQzN2E0NmEwYTY4M2M4MGY0JGV4cG9ydCQ4ZjljYWU2NTQ2Zjk3YTlmIiwiY2FwaXRhbGl6ZSIsIiQ2Zjc4MjA0YzM0NjgzZDI1JGV4cG9ydHMiLCIkNmIzMDg5NjYwZDM4NDdhOSR2YXIkb2JqZWN0UHJvdG8iLCIkNmIzMDg5NjYwZDM4NDdhOSR2YXIkaGFzT3duUHJvcGVydHkiLCIkNmIzMDg5NjYwZDM4NDdhOSR2YXIkbmF0aXZlT2JqZWN0VG9TdHJpbmciLCIkNmIzMDg5NjYwZDM4NDdhOSR2YXIkc3ltVG9TdHJpbmdUYWciLCJ0b1N0cmluZ1RhZyIsIiQ2YjMwODk2NjBkMzg0N2E5JGV4cG9ydHMiLCJpc093biIsInVubWFza2VkIiwiJDk3NDIzODMyZDBkMzA4Y2YkdmFyJG5hdGl2ZU9iamVjdFRvU3RyaW5nIiwiJDk3NDIzODMyZDBkMzA4Y2YkZXhwb3J0cyIsIiQ3MmZhZjYyMjlhMDNmMmExJHZhciRzeW1Ub1N0cmluZ1RhZyIsIiQ3MmZhZjYyMjlhMDNmMmExJGV4cG9ydHMiLCIkMzdhZDQ2MzE3Y2I4NDdlZCRleHBvcnRzIiwiJGI4MGMxNTU1MGUwNDJlZTgkZXhwb3J0cyIsInVpZCIsIiRiMWIyNTJlYzYzNjIxZTAwJHZhciRjb3JlSnNEYXRhIiwiJGVmZjAxZWQ0OGY2MTFlZjEkdmFyJG1hc2tTcmNLZXkiLCIkYjFiMjUyZWM2MzYyMWUwMCRleHBvcnRzIiwiSUVfUFJPVE8iLCIkZWZmMDFlZDQ4ZjYxMWVmMSRleHBvcnRzIiwiJDBlMzE2YWY3ZTI5OWEwZDMkdmFyJGZ1bmNUb1N0cmluZyIsIiQwZTMxNmFmN2UyOTlhMGQzJGV4cG9ydHMiLCIkY2EwYWY4ZjJhN2E3YzdlNSR2YXIkcmVJc0hvc3RDdG9yIiwiJGNhMGFmOGYyYTdhN2M3ZTUkdmFyJGZ1bmNQcm90byIsIiRjYTBhZjhmMmE3YTdjN2U1JHZhciRvYmplY3RQcm90byIsIiRjYTBhZjhmMmE3YTdjN2U1JHZhciRmdW5jVG9TdHJpbmciLCIkY2EwYWY4ZjJhN2E3YzdlNSR2YXIkaGFzT3duUHJvcGVydHkiLCIkY2EwYWY4ZjJhN2E3YzdlNSR2YXIkcmVJc05hdGl2ZSIsIiRjYTBhZjhmMmE3YTdjN2U1JGV4cG9ydHMiLCIkZWUwYTA4YzY1Y2QyZDc1YSRleHBvcnRzIiwiJDk5NWM1MDA1M2ZmODYxYTQkdmFyJG5hdGl2ZUNyZWF0ZSIsIiRiYjEzNjc1ZGE4MDJiZWYzJGV4cG9ydHMiLCIkOTk1YzUwMDUzZmY4NjFhNCRleHBvcnRzIiwiJGVkZDVjODQ5NjQ4MTU3OTYkZXhwb3J0cyIsIl9fZGF0YV9fIiwiJDgwZTVmNjcyNjVhZjhhNDAkZXhwb3J0cyIsIiQwYzA5OGZiZGE0NWFlMmQ2JHZhciRoYXNPd25Qcm9wZXJ0eSIsIiQwYzA5OGZiZGE0NWFlMmQ2JGV4cG9ydHMiLCIkMGQ4OGFhZTBkM2NmOGEwYiR2YXIkaGFzT3duUHJvcGVydHkiLCIkMGQ4OGFhZTBkM2NmOGEwYiRleHBvcnRzIiwiJGY5ZjljZDdiYzU1Zjk4NmYkdmFyJEhhc2giLCJlbnRyaWVzIiwiZW50cnkiLCIkZWM3MDhjNmZiNjEzMDE3OCRleHBvcnRzIiwiJGY5ZjljZDdiYzU1Zjk4NmYkZXhwb3J0cyIsIiQyOGU4N2FhMjk5ZDhiMWUyJGV4cG9ydHMiLCIkYjVhZTM3NDc5ZGQ0OWNhOSRleHBvcnRzIiwiJDljNWY3ZDE4ZTk1NTljNTEkZXhwb3J0cyIsIiQzZTNkYzk1MzJiOWU3MDk5JHZhciRzcGxpY2UiLCIkM2UzZGM5NTMyYjllNzA5OSRleHBvcnRzIiwiJDIyODM2OWIxY2FlZmVlYzQkZXhwb3J0cyIsIiQ1NmQyNDE2YmI5YWVhYjlhJGV4cG9ydHMiLCIkNjE2ODEyMDg0NzFhMDc1NyR2YXIkTGlzdENhY2hlIiwiJDM3NDBmMmUyMzAyOTNkODAkZXhwb3J0cyIsIiQ2MTY4MTIwODQ3MWEwNzU3JGV4cG9ydHMiLCIkYWU3ZDY2YmFmOTA4NTA5NiR2YXIkTWFwIiwiJGFlN2Q2NmJhZjkwODUwOTYkZXhwb3J0cyIsIiRlYmI4Mzk2MjMyYjM2YzliJGV4cG9ydHMiLCIkNjU5MmNmMjNmMGRkMTg2NyRleHBvcnRzIiwiJGRjYTQ0MzU5NGZlNjMzYTMkZXhwb3J0cyIsIiQwY2MwZmM5MzQzYmViOGIzJGV4cG9ydHMiLCIkNzQwNDFkNzRlZmQ1ZjcwYyRleHBvcnRzIiwiJDA1N2QyMjFhMzRjNzRkNmIkZXhwb3J0cyIsIiRmZDE4MDhhYjgxMGYyYTY2JHZhciRNYXBDYWNoZSIsIiRiZjBlMDM1OTllZTZhNjIwJGV4cG9ydHMiLCIkZmQxODA4YWI4MTBmMmE2NiRleHBvcnRzIiwiJGY5OWM4OTUwMTgyMDA5MjEkdmFyJG1lbW9pemUiLCJtZW1vaXplZCIsIkNhY2hlIiwiJGY5OWM4OTUwMTgyMDA5MjEkZXhwb3J0cyIsIiQ5MTkwMTk1NWUzOGU0Y2U3JGV4cG9ydCRmMThkNWFjYzI3ZDcwNDIzIiwiJDkxOTAxOTU1ZTM4ZTRjZTckZXhwb3J0JDNmZmIxYzczMmJjODM5MmQiLCJjaGFpbiIsIiQwZjNhOTY1YzRjZmQ1ZTIyJGV4cG9ydCQ4NjA1MjE5OWU0MDIzM2E4IiwiJDBmM2E5NjVjNGNmZDVlMjIkZXhwb3J0JDc2OWVlY2I5Yjc4MzExNDgiLCIkODFkZGExMWZjNWRiYWRmYiRleHBvcnQkZWQ5N2YzMzE4NmQ0YjgxNiIsIkFSQklUUlVNX0lORlVSQV9BUElfS0VZIiwiQVVST1JBX0FQSV9LRVkiLCJFVEhFUkVVTV9BTENIRU1ZX0FQSV9LRVkiLCJPUFRJTUlTTV9JTkZVUkFfQVBJX0tFWSIsIlBPTFlHT05fSU5GVVJBX0FQSV9LRVkiLCJTT0xBTkFfQVBJX0tFWSIsIiQ4MWRkYTExZmM1ZGJhZGZiJGV4cG9ydCRmNGZhNmNhYTYyOTk3YjQiLCJlbmRwb2ludCIsImtleXMxIiwiJGRhMjM5ZDk2NjNhMDdhOGIkZXhwb3J0JDdmYTFlOGM4NWRmOWM0MzYiLCJhc3NldCIsImltcGxlbWVudGF0aW9ucyIsIiRkYTIzOWQ5NjYzYTA3YThiJGV4cG9ydCQ4ODQxMTEyNWYwMTI5NTdhIiwiY2hhaW5JbXBsZW1lbnRhdGlvbiIsIiRiYWZkZjQ5ZDEyYTQ3ZWEyJHZhciR0b0NvbGxlY3Rpb24iLCJnZXRLZXkiLCJnZXRJdGVtIiwiJGJhZmRmNDlkMTJhNDdlYTIkZXhwb3J0JDJlODE5MWY0ODJhMzhjY2QiLCIkZmJmNDg0YTAzMGI4NWE1NSRleHBvcnQkOWEwMGRlZTFiZWI4ZjU3NiIsInRvSWQiLCJuYW1lVG9JZCIsImdldE5ldHdvcmtzIiwiZ2V0TmF0aXZlQXNzZXRJZHNGb3JUcmFkaW5nIiwic3VwcG9ydHNfdHJhZGluZyIsIm5hdGl2ZV9hc3NldCIsImdldENoYWluTmFtZSIsImNvbGxlY3Rpb24iLCJnZXROZXR3b3JrQnlJZCIsImdldE5ldHdvcmtCeU5hbWUiLCJnZXRDaGFpbkJ5SWQiLCJnZXRDaGFpbk5hbWVCeUlkIiwiZ2V0RXhwbG9yZXJIb21lVXJsQnlOYW1lIiwiZXhwbG9yZXJfaG9tZV91cmwiLCJnZXRFeHBsb3JlclR4VXJsIiwiZXhwbG9yZXJfdHhfdXJsIiwiZ2V0RXhwbG9yZXJUeFVybEJ5SWQiLCJnZXRFeHBsb3JlclR4VXJsQnlOYW1lIiwiZ2V0RXhwbG9yZXJUb2tlblVybCIsImV4cGxvcmVyX3Rva2VuX3VybCIsImdldEV4cGxvcmVyVG9rZW5VcmxCeUlkIiwiZ2V0RXhwbG9yZXJUb2tlblVybEJ5TmFtZSIsImdldEV4cGxvcmVyTmFtZUJ5SWQiLCJleHBsb3Jlcl9uYW1lIiwiZ2V0RXRoZXJldW1DaGFpblBhcmFtZXRlciIsInJwY191cmxfcHVibGljIiwicnBjVXJscyIsImNoYWluTmFtZSIsIm5hdGl2ZUN1cnJlbmN5IiwiaWNvblVybHMiLCJpY29uX3VybCIsImJsb2NrRXhwbG9yZXJVcmxzIiwicHVycG9zZSIsInB1cnBvc2VLZXlNYXAiLCJpc05hdGl2ZUFzc2V0IiwiaXNOYXRpdmVBZGRyZXNzIiwiZ2V0UnBjVXJsSW50ZXJuYWwiLCJycGNfdXJsX2ludGVybmFsIiwibmV0d29ya3MxIiwic3RyMSIsInN0cjIiLCJwcmlvcml0eVN0cmluZyIsIiRiYWZkZjQ5ZDEyYTQ3ZWEyJHZhciRsb2NhbGVDb21wYXJlV2l0aFByaW9yaXR5IiwiZXh0ZXJuYWxfaWQiLCJzZW5kaW5nIiwidHJhZGluZyIsImJyaWRnZSIsIiRkOGU5NmEzMDlkZmYxZjRmJHZhciRkZWZhdWx0R2V0U3RvcmVGdW5jIiwiJGQ4ZTk2YTMwOWRmZjFmNGYkdmFyJF9zbGljZWRUb0FycmF5IiwiJGQ4ZTk2YTMwOWRmZjFmNGYkdmFyJF9hcnJheVdpdGhIb2xlcyIsIl9pIiwiX3MiLCJfZSIsIl9uIiwiX2QiLCIkZDhlOTZhMzA5ZGZmMWY0ZiR2YXIkX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibWluTGVuIiwiJGQ4ZTk2YTMwOWRmZjFmNGYkdmFyJF9hcnJheUxpa2VUb0FycmF5IiwiJGQ4ZTk2YTMwOWRmZjFmNGYkdmFyJF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIiRkOGU5NmEzMDlkZmYxZjRmJHZhciRfbm9uSXRlcmFibGVSZXN0IiwiYXJyMiIsIiRkOGU5NmEzMDlkZmYxZjRmJGV4cG9ydCRiMzI3MTUwMzk2MTM1ZmU3Iiwib25jb21wbGV0ZSIsIm9uc3VjY2VzcyIsIm9uYWJvcnQiLCIkZDhlOTZhMzA5ZGZmMWY0ZiR2YXIkZGVmYXVsdEdldFN0b3JlIiwiZGJOYW1lIiwic3RvcmVOYW1lIiwiaW5kZXhlZERCIiwib251cGdyYWRlbmVlZGVkIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJkYnAiLCJ0eE1vZGUiLCJkYiIsIm9iamVjdFN0b3JlIiwiJGQ4ZTk2YTMwOWRmZjFmNGYkZXhwb3J0JGY1MWE5MDY4YWM4MmVhNDMiLCIkZDhlOTZhMzA5ZGZmMWY0ZiRleHBvcnQkYWRhYTRjZjdlZjFiNjViZSIsImN1c3RvbVN0b3JlIiwic3RvcmUiLCJwdXQiLCIkZDhlOTZhMzA5ZGZmMWY0ZiRleHBvcnQkMWQyZjIxZTU0OTc3MWU2NyIsImRlbGV0ZSIsIiRkOGU5NmEzMDlkZmYxZjRmJGV4cG9ydCQ0MmZmZDM4ODg0YWVjZGFjIiwiJGQ4ZTk2YTMwOWRmZjFmNGYkdmFyJGVhY2hDdXJzb3IiLCJvcGVuQ3Vyc29yIiwiY29udGludWUiLCIkZDhlOTZhMzA5ZGZmMWY0ZiRleHBvcnQkM2U5Zjk0OGI0MTk2NDg2NiIsInN0b3JlMSIsImdldEFsbEtleXMiLCJfcmVmIiwiX3JlZjIiLCJrZXlzMyIsInZhbHVlczEiLCJjdXJzb3IiLCIkYjNhMGE4NTJkMWViNzJjZCR2YXIkcGVyZiIsInBlcmZvcm1hbmNlIiwiJGIzYTBhODUyZDFlYjcyY2QkdmFyJEFDIiwiQWJvcnRDb250cm9sbGVyIiwic2lnbmFsIiwiZGlzcGF0Y2hFdmVudCIsIiRiM2EwYTg1MmQxZWI3MmNkJHZhciRBUyIsIiRiM2EwYTg1MmQxZWI3MmNkJHZhciRoYXNBYm9ydFNpZ25hbCIsIkFib3J0U2lnbmFsIiwiJGIzYTBhODUyZDFlYjcyY2QkdmFyJGhhc0FDQWJvcnRTaWduYWwiLCJhYm9ydGVkIiwiJGIzYTBhODUyZDFlYjcyY2QkdmFyJHdhcm5lZCIsIiRiM2EwYTg1MmQxZWI3MmNkJHZhciRkZXByZWNhdGVkT3B0aW9uIiwib3B0IiwiaW5zdGVhZCIsIiRiM2EwYTg1MmQxZWI3MmNkJHZhciRzaG91bGRXYXJuIiwiJGIzYTBhODUyZDFlYjcyY2QkdmFyJHdhcm4iLCIkYjNhMGE4NTJkMWViNzJjZCR2YXIkTFJVQ2FjaGUiLCIkYjNhMGE4NTJkMWViNzJjZCR2YXIkZGVwcmVjYXRlZE1ldGhvZCIsIiRiM2EwYTg1MmQxZWI3MmNkJHZhciRlbWl0V2FybmluZyIsImVtaXRXYXJuaW5nIiwid2hhdCIsIiRiM2EwYTg1MmQxZWI3MmNkJHZhciRpc1Bvc0ludCIsIiRiM2EwYTg1MmQxZWI3MmNkJHZhciRnZXRVaW50QXJyYXkiLCJVaW50MTZBcnJheSIsIk1BWF9TQUZFX0lOVEVHRVIiLCIkYjNhMGE4NTJkMWViNzJjZCR2YXIkWmVyb0FycmF5IiwiJGIzYTBhODUyZDFlYjcyY2QkdmFyJFN0YWNrIiwiaGVhcCIsIlVpbnRBcnJheSIsIiRiM2EwYTg1MmQxZWI3MmNkJHZhciRfaXRlcmF0b3IiLCJnZXRSZW1haW5pbmdUVEwiLCJ1cGRhdGVBZ2VPbkhhcyIsImluaXRpYWxpemVUVExUcmFja2luZyIsInR0bHMiLCJzdGFydHMiLCJzZXRJdGVtVFRMIiwidHRsIiwidHRsQXV0b3B1cmdlIiwiaXNTdGFsZSIsImtleUxpc3QiLCJ1cGRhdGVJdGVtQWdlIiwiY2FjaGVkTm93IiwiZ2V0Tm93IiwidHRsUmVzb2x1dGlvbiIsImtleU1hcCIsImluaXRpYWxpemVTaXplVHJhY2tpbmciLCJjYWxjdWxhdGVkU2l6ZSIsInNpemVzIiwicmVtb3ZlSXRlbVNpemUiLCJyZXF1aXJlU2l6ZSIsInNpemVDYWxjdWxhdGlvbiIsImFkZEl0ZW1TaXplIiwibWF4U2l6ZSIsImV2aWN0IiwiaW5kZXhlcyIsImFsbG93U3RhbGUiLCJ0YWlsIiwiaXNWYWxpZEluZGV4IiwicmluZGV4ZXMiLCJ2YWxMaXN0IiwicmVudHJpZXMiLCJya2V5cyIsInJ2YWx1ZXMiLCJnZXRPcHRpb25zIiwidGhpc3AiLCJyZm9yRWFjaCIsInBydW5lIiwicHVyZ2VTdGFsZSIsImRlbGV0ZWQiLCJkdW1wIiwiaXNCYWNrZ3JvdW5kRmV0Y2giLCJfX3N0YWxlV2hpbGVGZXRjaGluZyIsImFnZSIsImRpc3Bvc2UiLCJub0Rpc3Bvc2VPblNldCIsIm5vVXBkYXRlVFRMIiwibWF4RW50cnlTaXplIiwibmV3SW5kZXgiLCJvbGRWYWwiLCJfX2Fib3J0Q29udHJvbGxlciIsImRpc3Bvc2VBZnRlciIsImRpc3Bvc2VkIiwibW92ZVRvVGFpbCIsImZyZWUiLCJpbml0aWFsRmlsbCIsInBlZWsiLCJiYWNrZ3JvdW5kRmV0Y2giLCJhYyIsImZldGNoT3B0cyIsImZldGNoTWV0aG9kIiwiZXIiLCJub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb24iLCJfX3JldHVybmVkIiwidXBkYXRlQWdlT25HZXQiLCJub0RlbGV0ZU9uU3RhbGVHZXQiLCJmZXRjaENvbnRleHQiLCJmb3JjZVJlZnJlc2giLCJmZXRjaGluZyIsImRlbCIsIiRiM2EwYTg1MmQxZWI3MmNkJHZhciRkZXByZWNhdGVkUHJvcGVydHkiLCJzdGFsZSIsIk1hcCIsIiRiM2EwYTg1MmQxZWI3MmNkJGV4cG9ydHMiLCIkNWE3ZWQxMTM3OWRmMDRjOCRleHBvcnRzIiwiRGF0YVN0YXR1cyIsInJlcXVlc3RWYWx1ZSIsInJlc3BvbnNlTWV0YVZhbHVlIiwibWV0YSIsImlzSWRsZVN0YXR1cyIsIm9rIiwiaXNMb2FkaW5nU3RhdHVzIiwicmVxdWVzdGVkIiwiaXNGZXRjaGluZ1N0YXR1cyIsInVwZGF0aW5nIiwiJDcwMjgwODkwOWQ3N2MyZjgkZXhwb3J0cyIsIm5vUmVxdWVzdHMiLCJnZXRJbml0aWFsU3RhdGUiLCJpbml0aWFsU3RhdHVzIiwiaGFzU3Vic2NyaWJlcnMiLCJpc0xvYWRpbmciLCJpc0ZldGNoaW5nIiwiaXNEb25lIiwiRW50cnlTdG9yZSIsIl9TdG9yZSIsIl90aGlzIiwiYXBpU3Vic2NyaXB0aW9uIiwibGlzdGVuZXJzQ291bnQiLCJfaW5oZXJpdHNMb29zZSIsImZyb21TdGF0dXMiLCJzZXREYXRhIiwiX3JlZiRtZXRhIiwic2NvcGVOYW1lIiwiX2V4dGVuZHMiLCJfcHJvdG8iLCJtYWtlU3Vic2NyaXB0aW9uIiwidW5zdWJzY3JpYmUiLCJyZW1vdmVTdWJzY3JpcHRpb24iLCJhZGRDbGllbnRMaXN0ZW5lciIsIl90aGlzMiIsInVubGlzdGVuIiwiZGVmYXVsdEdldElkIiwibWVyZ2VEaWN0IiwiZXZlbnREYXRhIiwicHJldkRhdGEiLCJnZXRJZCIsIm1lcmdlU2luZ2xlRW50aXR5IiwidG9Db2xsZWN0aW9uIiwibGlzdENoYW5nZWQiLCJkaWRVcGRhdGVTb21ldGhpbmciLCJvbGRFbnRpdHkiLCJsaXN0UmVtb3ZlZCIsIndpdGhvdXQiLCJvbGRNb2RlbCIsIm1lcmdlTGlzdCIsInZlcmlmeUJ5UmVxdWVzdElkIiwicmVxdWVzdF9pZCIsInNob3VsZFJldHVybkNhY2hlZERhdGEiLCJjYWNoZVBvbGljeSIsImRlZmF1bHRDYWNoZVBvbGljeSIsIlJlcXVlc3RDYWNoZSIsInQyNCIsImUzNyIsIl9jYWNoZVBvbGljeSIsInBlbmRpbmdSZXF1ZXN0cyIsImFjdGl2ZVN1YnNjcmlwdGlvbnMiLCJoYW5kbGVHZXQiLCJzY29wZSIsImhhbmRsZVJlY2VpdmUiLCJoYW5kbGVTdWJzY3JpYmUiLCJjYWNoZWQiLCJjcmVhdGVEb21haW5SZXF1ZXN0IiwibWVyZ2VTdHJhdGVneSIsInZlcmlmeUZuIiwiZG9tYWluUmVxdWVzdCIsImN1cnJlbnRDbGllbnQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImNhY2hlZFN1YnNjcmliZSIsImFzc2V0X2NvZGUiLCJhc3NldF9jb2RlcyIsIl9yZXNwb25zZSRtZXRhIiwiX3JlcXVlc3QkcGF5bG9hZCIsInJlcXVlc3RBc3NldENvZGVzIiwiczgiLCJjdXJyZW5jeSIsImFzc2V0Q29kZXNTZXQiLCJhc3NldENvZGUiLCJhc3NldHNQcmljZXMiLCJhc3NldHNJbmZvIiwiYWRkcmVzc0xvYW5zIiwiYWRkcmVzc0Fzc2V0cyIsImFkZHJlc3NQb3NpdGlvbnMiLCJhZGRyZXNzQ2hhcnRzIiwiYXNzZXRzQ2hhcnRzIiwiYXNzZXRzRnVsbEluZm8iLCJhZGRyZXNzUG9ydGZvbGlvIiwiYWRkcmVzc1BvcnRmb2xpb0RlY29tcG9zaXRpb24iLCJQZXJzaXN0ZW50Q2FjaGUiLCJfdGVtcCIsIl9yZWYkbWF4IiwidXNlc1N0YWxlRW50cmllcyIsImxydUNhY2hlIiwic3RhbGVFbnRyaWVzIiwiTFJVQ2FjaGUiLCJpZGJEZWwiLCJnZXRDaGFuZ2VIYW5kbGVyIiwiZW50cnlTdG9yZSIsInNhZmVXcml0ZUVudHJ5IiwiaWRiU2V0IiwiX3RoaXM0IiwiaWRiRW50cmllcyIsIl9yZWYzIiwiX3RoaXM1IiwiaWRiQ2xlYXIiLCJlNjQiLCJ0MzMiLCJzdWJzY2lwdGlvbkV2ZW50cyIsInN1YnNjcmliZSIsInNvY2tldE5hbWVzcGFjZSIsIl9yZWYkbWV0aG9kIiwib25BbnlNZXNzYWdlIiwiX3JlZiR2ZXJpZnlGbiIsIm1vZGVsIiwiaGFuZGxlciIsImNyZWF0ZUtleSIsInJlcUlkIiwibWVtb0NhY2hlIiwia2V5VG9SZXF1ZXN0SWQiLCJub3JtYWxpemVPcHRpb25zIiwibmFtZXNwYWNlRmFjdG9yeSIsImRlZmF1bHRIb29rcyIsIndpbGxTZW5kUmVxdWVzdCIsIkJhcmVDbGllbnQiLCJhcGlUb2tlbiIsImlvT3B0aW9ucyIsImhvb2tzIiwiY3VzdG9tR2V0Q2FjaGVLZXkiLCJnZXRDYWNoZUtleSIsImNvbmZpZ3VyZUhvb2tzIiwibmFtZXNwYWNlTmFtZSIsIl9pb09wdGlvbnMkcXVlcnkiLCJyZXN0T3B0aW9ucyIsInVwZGF0ZWRTb2NrZXQiLCJyZWNvbm5lY3Rpb25Qcm94eSIsIm9yaWdpbmFsRW1pdCIsImRpZEhhbmRsZVJlY29ubmVjdCIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiX3N0ZXAyIiwiX2l0ZXJhdG9yMiIsIlVSTCIsImFwaV90b2tlbiIsInRpbWVySWQiLCJ2aXNpYmlsaXR5U3RhdGUiLCJXQUlUX0JFRk9SRV9ESVNDT05ORUNUIiwiY3JlYXRlU29ja2V0TmFtZXNwYWNlIiwidDQ3IiwiY29uZmlndXJlIiwiZTc4IiwiX3JlZjIkdmVyaWZ5Rm4iLCJyYXdPcHRpb25zIiwicmVxdWVzdElkIiwiZ2V0RnJvbUNhY2hlIiwiY2FjaGVLZXkiLCJlODEiLCJfcmVmMyRjYWNoZVBvbGljeSIsImNvbnZlbmllbmNlT3B0aW9ucyIsIm1heWJlRW50cnlTdG9yZSIsInNob3VsZE1ha2VSZXF1ZXN0IiwiaXNSZXF1ZXN0TmVlZGVkIiwiZW50cnlTdGF0ZSIsIm1lcmdlZCIsIm5leHRfY3Vyc29yIiwiX2VudHJ5U3RhdGUkbWV0YSIsIkNsaWVudCIsIl9CYXJlQ2xpZW50IiwiX2xlbiIsIl9rZXkiLCJoYXNEYXRhIiwiZW1wdHlFbnRyeUlkbGUiLCJlbXB0eUVudHJ5TG9hZGluZyIsImNyZWF0ZURvbWFpbkhvb2siLCJfdXNlU3RhdGUiLCJjdXJyZW50UGF5bG9hZCIsInNldEN1cnJlbnRQYXlsb2FkIiwiX3JlZiRrZWVwU3RhbGVEYXRhIiwia2VlcFN0YWxlRGF0YSIsIl9yZWYkZW5hYmxlZCIsImhvb2tPcHRpb25zIiwiZGVmYXVsdENsaWVudCIsInNldEVudHJ5IiwiZ3VhcmRlZFNldEVudHJ5IiwicHJldkVudHJ5IiwibmV3RW50cnlIYXNEYXRhIiwicHJldkVudHJ5SGFzRGF0YSIsIm5ld0VudHJ5IiwiZW50cnlIYXNPcldpbGxIYXZlUmVxdWVzdCIsInVzZVN1YnNjcmlwdGlvbiIsIiQ0MjgxYWJmNzg4OTEwZGU2JGV4cG9ydCRlNzkxODZjYzY3YWM5NDBiIiwiJGJhMzYyNjNkZDlmN2IxMmMkZXhwb3J0JDM5MGYzMjQwMGVhZjk4YzkiLCJsb2FkZXJQcm9taXNlIiwiJDZiODE4ODgzZTk2YWY2MWEkZXhwb3J0JDM4OGUwMzAyY2EwZDlhNDEiLCIkNTBlYTZjNmFlN2EzNWI4NCRleHBvcnRzIiwiJDdiODJjYzdmY2I1NWFiMGQkZXhwb3J0JDk5ZDQ5OGJkODI2ZWMyNzAiLCJwb3N0TWVzc2FnZSIsIiRmZjUxYWIxNzBiNWQyMWQyJHZhciRFcnJvcldpdGhFbnVtZXJhYmxlTWVzc2FnZSIsIiRmZjUxYWIxNzBiNWQyMWQyJGV4cG9ydCQxZWY0Y2M1MzE5NWM2OGUyIiwiJGZmNTFhYjE3MGI1ZDIxZDIkZXhwb3J0JDkxMTUwZTg3N2IzZWI2ZmIiLCIkZmY1MWFiMTcwYjVkMjFkMiRleHBvcnQkOGE4ZTk5ZWIwMzViY2IyZCIsIiRmZjUxYWIxNzBiNWQyMWQyJGV4cG9ydCRiYTEyZjZmMDMxZjVmMjIzIiwiJGZmNTFhYjE3MGI1ZDIxZDIkZXhwb3J0JGQ5ZjA4OTczOGE0M2Q4YmYiLCIkZmY1MWFiMTcwYjVkMjFkMiRleHBvcnQkMWM4YTMxYjZjMzE5ZmFkZCIsIiRmZjUxYWIxNzBiNWQyMWQyJGV4cG9ydCQxZjQ1ZDAzNjBjMTcwMTIwIiwiJDQ2NDJhYTdjZmIwMWQ1MGIkZXhwb3J0JDY4ODYzOTA0NTU3MGYzNWEiLCIkNDY0MmFhN2NmYjAxZDUwYiRleHBvcnQkNDc1N2UxYjE4MWNhZTFlMCIsIiQ0NjQyYWE3Y2ZiMDFkNTBiJGV4cG9ydCQ4ZTMxMTJmOWJmMDliNzg5IiwiY29uZmlybSIsIndpbmRvd0lkIiwiJDZiODE4ODgzZTk2YWY2MWEkZXhwb3J0JDQ3MjI0MDAyZDYzOTI2ZWYiLCJjYWNoZU9iamVjdCIsIiQ2YjgxODg4M2U5NmFmNjFhJGV4cG9ydCQyYzhjYjA5ZGJkMzBiZTE5IiwiJGJmZDZmZDc0NDI4NjA3YmQkZXhwb3J0JDM5ODhhZTYyYjcxYmU5YTMiLCIkYmZkNmZkNzQ0Mjg2MDdiZCRleHBvcnQkYWRhYTRjZjdlZjFiNjViZSIsIiRiZmQ2ZmQ3NDQyODYwN2JkJGV4cG9ydCRjZDdmNDgwZDZiODI4NmMzIiwiJGIxNzMyZTM4Mjg4N2M5MzIkdmFyJFNUT1JBR0VfVkVSU0lPTiIsIiRiMTczMmUzODI4ODdjOTMyJHZhciRnZXRDdXJyZW50VmVyc2lvbiIsIiRiMTczMmUzODI4ODdjOTMyJHZhciR1cGdyYWRlcyIsIiRiMTczMmUzODI4ODdjOTMyJGV4cG9ydCQzMTI2ZjFiMTY1Y2UyMjdhIiwiaGFzU29tZURhdGEiLCJCb29sZWFuIiwic3RvcmFnZVZlcnNpb24iLCIkZTQ3YTgzNWEzM2ViZGFlZCR2YXIkUmVmbGVjdE93bktleXMiLCIkZTQ3YTgzNWEzM2ViZGFlZCR2YXIkUiIsIiRlNDdhODM1YTMzZWJkYWVkJHZhciRSZWZsZWN0QXBwbHkiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRlNDdhODM1YTMzZWJkYWVkJHZhciROdW1iZXJJc05hTiIsIiRlNDdhODM1YTMzZWJkYWVkJHZhciRFdmVudEVtaXR0ZXIiLCIkZTQ3YTgzNWEzM2ViZGFlZCRleHBvcnRzIiwiZXJyb3JMaXN0ZW5lciIsIiRlNDdhODM1YTMzZWJkYWVkJHZhciRldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIiLCIkZTQ3YTgzNWEzM2ViZGFlZCR2YXIkYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIiLCJFdmVudEVtaXR0ZXIiLCJfZXZlbnRzQ291bnQiLCJfbWF4TGlzdGVuZXJzIiwiJGU0N2E4MzVhMzNlYmRhZWQkdmFyJGRlZmF1bHRNYXhMaXN0ZW5lcnMiLCIkZTQ3YTgzNWEzM2ViZGFlZCR2YXIkY2hlY2tMaXN0ZW5lciIsIiRlNDdhODM1YTMzZWJkYWVkJHZhciRfZ2V0TWF4TGlzdGVuZXJzIiwidGhhdCIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCIkZTQ3YTgzNWEzM2ViZGFlZCR2YXIkX2FkZExpc3RlbmVyIiwicHJlcGVuZCIsImV4aXN0aW5nIiwibmV3TGlzdGVuZXIiLCJ3YXJuZWQiLCIkZTQ3YTgzNWEzM2ViZGFlZCR2YXIkb25jZVdyYXBwZXIiLCJmaXJlZCIsIndyYXBGbiIsIiRlNDdhODM1YTMzZWJkYWVkJHZhciRfb25jZVdyYXAiLCJ3cmFwcGVkIiwiJGU0N2E4MzVhMzNlYmRhZWQkdmFyJF9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwiJGU0N2E4MzVhMzNlYmRhZWQkdmFyJHVud3JhcExpc3RlbmVycyIsIiRlNDdhODM1YTMzZWJkYWVkJHZhciRhcnJheUNsb25lIiwiJGU0N2E4MzVhMzNlYmRhZWQkdmFyJGxpc3RlbmVyQ291bnQiLCJ3cmFwTGlzdGVuZXIiLCJzZXRNYXhMaXN0ZW5lcnMiLCJnZXRNYXhMaXN0ZW5lcnMiLCJkb0Vycm9yIiwib3JpZ2luYWxMaXN0ZW5lciIsIiRlNDdhODM1YTMzZWJkYWVkJHZhciRzcGxpY2VPbmUiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwiJGQ0Njc2NjhlYjlhYmQ4NmUkZXhwb3J0JGFjNDk1OWY0ZjEzMzhkZmMiLCIkYmQ4NzA2MzZhYzdlYTBhZiRleHBvcnQkY2U5ZjEzMzFkMmM4NzMyOSIsIlRleHRFbmNvZGVyIiwiJGJkODcwNjM2YWM3ZWEwYWYkZXhwb3J0JDNiM2Q4NWUwOWFkZmJiZmUiLCJUZXh0RGVjb2RlciIsIiRiZDg3MDYzNmFjN2VhMGFmJGV4cG9ydCRmMDEwNjlhM2MzMDdlNTBlIiwiJGJkODcwNjM2YWM3ZWEwYWYkZXhwb3J0JDM2YmFjODRiMWMyZGE5YzciLCIkYmQ4NzA2MzZhYzdlYTBhZiRleHBvcnQkNzBjNGFlMjkzMjkzY2ExZSIsIiRiZDg3MDYzNmFjN2VhMGFmJGV4cG9ydCRhN2ExN2U3NjY2NGUzZTQ0IiwiJDY3Zjc1MTJjZWUxYWI2MzEkZXhwb3J0JDIzYjI4MTM5Y2MxZjY1ZmIiLCIkNjdmNzUxMmNlZTFhYjYzMSRleHBvcnQkNjFmZDQ4YTk2MTE0ODFhNyIsIiRmZDdiNmM2YmUxNmIwNTA5JGV4cG9ydCQ3Y2RlNWRhMDBmZDAyYWFjIiwiJGZkN2I2YzZiZTE2YjA1MDkkZXhwb3J0JGUxMmM5YzYyNDM3OGUzZDciLCJtYXN0ZXJLZXkiLCJwYXNzQXJyYXkiLCJpbXBvcnRLZXkiLCIkZmQ3YjZjNmJlMTZiMDUwOSR2YXIkY3JlYXRlTWFzdGVyS2V5Iiwic2VjcmV0S2V5Iiwic2FsdEFycmF5IiwiZGVyaXZlS2V5IiwiJGZkN2I2YzZiZTE2YjA1MDkkdmFyJGNyZWF0ZVNlY3JldEtleSIsIiQ3MDM5Y2JmNWJjZTg2ZWRiJHZhciRlbmNyeXB0T2JqZWN0IiwiZGF0YUFycmF5IiwiZW5jcnlwdGVkQnVmZmVyIiwiJDcwMzljYmY1YmNlODZlZGIkZXhwb3J0JDViMGY2MjkyZjExZDFkMTgiLCIkNzAzOWNiZjViY2U4NmVkYiRleHBvcnQkZTg1YTBjOWExMDY3YzVkMyIsIml2QmFzZTY0IiwiZGF0YUJhc2U2NCIsImRlY3J5cHRlZEJ1ZmZlciIsImRlY3J5cHRlZFN0cmluZyIsIiQ3MDM5Y2JmNWJjZTg2ZWRiJHZhciRkZWNyeXB0T2JqZWN0IiwiJGE3OGM5OTBlYjEyZTliMzMkdmFyJGdldElWIiwiJGE3OGM5OTBlYjEyZTliMzMkZXhwb3J0JGFlYmYwMzBkN2QyZDFhMWIiLCIkYTc4Yzk5MGViMTJlOWIzMyRleHBvcnQkODg3ODQ4MDQ2ZTg5ZDUyOCIsIiRhNzhjOTkwZWIxMmU5YjMzJGV4cG9ydCQ3ZDQ1NjI0NmYyZDQzN2IyIiwiJGE3OGM5OTBlYjEyZTliMzMkZXhwb3J0JDE3OWVmYjMxYTE4NmIxYzAiLCIkMDg2ZTBjNzdlNmViZjFmZiRleHBvcnQkYTM5ZDhjZTg3ODhjNmQ2ZCIsImhhc2hCdWZmZXIiLCJwYWRTdGFydCIsIiQzMmEyZTgzNzE0YzJmMjk2JGV4cG9ydCRhMjI3NzVmYTVlMmVlYmQ5IiwiJDQ4ZDBjODFiYTE2ZWZjOGMkZXhwb3J0JGM5NDRhNDUyNmQ0ZWQ0ZjMiLCIkNmUyYjZjZWFmMjQ2NDFkMCR2YXIkSVNfV0lORE9XUyIsIiQ2ZTJiNmNlYWYyNDY0MWQwJHZhciRldmVudCIsIm9uRm9jdXNDaGFuZ2VkIiwid2luSWQiLCJvblJlbW92ZWQiLCIkNmUyYjZjZWFmMjQ2NDFkMCR2YXIkV0lORE9XX1NJWkUiLCJoZWlnaHQiLCIkNDA1YTIwZjFjNWJmOThmYiRleHBvcnRzIiwiZ2V0QnVuZGxlVVJMIiwiJDZlMmI2Y2VhZjI0NjQxZDAkZXhwb3J0JGVlMDIyNWE2MGFkMTBmNGYiLCJjdXJyZW50V2luZG93VG9wIiwiY3VycmVudFdpbmRvd0xlZnQiLCJjdXJyZW50V2luZG93V2lkdGgiLCJ3aW5kb3dUeXBlcyIsImN1cnJlbnRXaW5kb3ciLCJmb2N1c2VkIiwiJDZlMmI2Y2VhZjI0NjQxZDAkdmFyJGNyZWF0ZSIsIiQ2ZWI4ZmIyNDJkMWViYzY2JGV4cG9ydCQ3NDFkZWJiMGMwZmFjNDNiIiwiZ2V0V2luZG93SWQiLCJpZHNNYXAiLCJnZXROZXdJZCIsImluaXRpYWxSb3V0ZSIsIm9uRGlzbWlzcyIsIm9uUmVzb2x2ZSIsImRpc3Bvc2FibGVzIiwib25Eb25lIiwiaWQxIiwiVVJMU2VhcmNoUGFyYW1zIiwid2luZG93SWQxIiwib3Blbk5vdGlmaWNhdGlvbiIsImhhbmRsZURpc21pc3MiLCJoYW5kbGVXaW5kb3dSZW1vdmVkIiwiaGFuZGxlUmVzb2x2ZSIsImhhbmRsZVJlamVjdCIsImNsb3NlQ3VycmVudFdpbmRvdyIsIiQxN2U3NmU4YmIwNzRjNTFlJGV4cG9ydCRlOGJjZWQ2Nzg3OWEzM2EwIiwiJDE3ZTc2ZThiYjA3NGM1MWUkZXhwb3J0JDc4MjYzMzRlYjEwMTAxYzkiLCIkMjIyMWY5NTA0MzQyNmNlNCR2YXIka25vd25GaWVsZHMiLCIkMjIyMWY5NTA0MzQyNmNlNCRleHBvcnQkN2UwNTcyZGZmZGM5MjNhMyIsImluY29taW5nVHJhbnNhY3Rpb24iLCJrbm93bkZpZWxkIiwiJDkxYzZhOWIxYjcyNTVmYzIkdmFyJGlzTm90RW1wdHkiLCIkOTFjNmE5YjFiNzI1NWZjMiRleHBvcnQkMWJlZWU4OWJkMTE2MDM5NyIsIiQ5MWM2YTliMWI3MjU1ZmMyJHZhciRoYXNFSVAxNTU5R2FzUHJpY2UiLCIkOTFjNmE5YjFiNzI1NWZjMiR2YXIkaGFzQ2xhc3NpY0dhc1ByaWNlIiwiJDYzMzRlYjYwNThlZjIzODYkZXhwb3J0JGIwMDliNjQxMTQ1Y2VkZCIsImVpcDE1NTkiLCJtYXhfZmVlIiwicHJpb3JpdHlfZmVlIiwiJGI0NWY0NTVjYjlmMTU1N2EkZXhwb3J0JDE3ZjIyMDM4NDlhZjYwMmUiLCJsYXRlc3RWYWx1ZSIsImluaXRpYWxQcm9taXNlIiwiaW5pdGlhdGVSZXF1ZXN0IiwiJDZiODE4ODgzZTk2YWY2MWEkZXhwb3J0JDI4MWM5NWI5YzAyZjA1YzEiLCIkZDYzNzhiNTYzOTI3MmYyZiRleHBvcnQkYTRjMTQzMzcwM2RjM2QxNSIsImdhc1ByaWNlc0luZm8iLCJnYXNDaGFpblByaWNlcyIsIiRkNjM3OGI1NjM5MjcyZjJmJHZhciRmZXRjaEdhc1ByaWNlIiwiZmFzdCIsIiRlNzNkZTE5MDlmMTQ5ZTZhJGV4cG9ydHMiLCJpdGVyYXRlZSIsIiQxNjNjODY5ZjI3MThlZmNjJGV4cG9ydHMiLCIkM2IzNzM3YWJmMzk1M2YwNSRleHBvcnRzIiwiJDQxYmVjYmUxMWMyYTdmNWEkZXhwb3J0cyIsIiQ4ZTFhZmM3Y2Y5MzU3OGY0JGV4cG9ydHMiLCIkNTllNGExOWNlM2M2Yjc2YiR2YXIkU3RhY2siLCIkNjExNDU1MzM4YzlhYTllMiRleHBvcnRzIiwiJDYxMTQ1NTMzOGM5YWE5ZTIkdmFyJExBUkdFX0FSUkFZX1NJWkUiLCIkNTllNGExOWNlM2M2Yjc2YiRleHBvcnRzIiwiJGRiNTE2MDhjY2E3ZmY4YjkkZXhwb3J0cyIsIiQ2YmNmY2NjYjBlYmJhOTFjJHZhciRkZWZpbmVQcm9wZXJ0eSIsIiQ2YmNmY2NjYjBlYmJhOTFjJGV4cG9ydHMiLCIkMDM1YzI2YjEwNGY3OTE3NiRleHBvcnRzIiwiJDJkZThiMmMyNGI3OGViYzMkdmFyJGhhc093blByb3BlcnR5IiwiJDJkZThiMmMyNGI3OGViYzMkZXhwb3J0cyIsIm9ialZhbHVlIiwiJGY5MmE1MmM1ZDNhMDQ2NDAkZXhwb3J0cyIsImN1c3RvbWl6ZXIiLCJpc05ldyIsIm5ld1ZhbHVlIiwiJDkwOGNiYTEyZjNjZWE4YjckZXhwb3J0cyIsIiQ3Mjc5NzliMDhlYzM4ZGViJGV4cG9ydHMiLCIkMjA2MDljZWMxMjY2NDc2YyRleHBvcnRzIiwiJGMzYjg3MmIxMzBlMjYyNTEkdmFyJG9iamVjdFByb3RvIiwiJGMzYjg3MmIxMzBlMjYyNTEkdmFyJGhhc093blByb3BlcnR5IiwiJGMzYjg3MmIxMzBlMjYyNTEkdmFyJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCIkYzNiODcyYjEzMGUyNjI1MSR2YXIkaXNBcmd1bWVudHMiLCIkYzNiODcyYjEzMGUyNjI1MSRleHBvcnRzIiwiJDAzNzBmOGUyOTgzOWM0M2QkdmFyJGlzQXJyYXkiLCIkMDM3MGY4ZTI5ODM5YzQzZCRleHBvcnRzIiwiJGM4YjE4MDJjMWIyMjFhNGEkdmFyJHJlSXNVaW50IiwiJGM4YjE4MDJjMWIyMjFhNGEkZXhwb3J0cyIsIiQxN2YxMGY5MzdjMmQzYjQ4JGV4cG9ydHMiLCIkZTBlMGRiNGMxMjlkNjNhOSR2YXIkdHlwZWRBcnJheVRhZ3MiLCIkZTBlMGRiNGMxMjlkNjNhOSRleHBvcnRzIiwiJGY0NzYwY2ZlMDY1YWIwNDIkZXhwb3J0cyIsIiQ3YWVjMDEwM2M1MzIyY2NkJHZhciRub2RlSXNUeXBlZEFycmF5IiwiJGRCd0p1IiwiaXNUeXBlZEFycmF5IiwiJDdhZWMwMTAzYzUzMjJjY2QkdmFyJGlzVHlwZWRBcnJheSIsIiQ3YWVjMDEwM2M1MzIyY2NkJGV4cG9ydHMiLCIkOTEyYjMzODI1OTRkY2NmNiR2YXIkaGFzT3duUHJvcGVydHkiLCIkOTEyYjMzODI1OTRkY2NmNiRleHBvcnRzIiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQnVmZiIsIiQyQlFYeSIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiJDU4ZGU0YWVkMGUzNDBkZTIkdmFyJG9iamVjdFByb3RvIiwiJDU4ZGU0YWVkMGUzNDBkZTIkZXhwb3J0cyIsIkN0b3IiLCIkNmJlZmQxZjY2YzljMmE4OCR2YXIkbmF0aXZlS2V5cyIsIiQ1MjYyNmI1NjRhYWU3MTM1JGV4cG9ydHMiLCIkNmJlZmQxZjY2YzljMmE4OCRleHBvcnRzIiwiJDg5NDg4NzY4NjY3YzUyZDckdmFyJGhhc093blByb3BlcnR5IiwiJDg5NDg4NzY4NjY3YzUyZDckZXhwb3J0cyIsIiQ5ZGVjMWIwMWQ0NjA1NzYzJGV4cG9ydHMiLCIkMDQzMGNmNjRlOWMzZWM3NyRleHBvcnRzIiwiJDMyNjJhNzMyOTk3Mzg4OGUkZXhwb3J0cyIsIiRhZTU1NTQ0YWUwMjM4N2JkJGV4cG9ydHMiLCIkZWE5YTkzMDVhODYyOWY0ZCR2YXIkaGFzT3duUHJvcGVydHkiLCIkZWE5YTkzMDVhODYyOWY0ZCRleHBvcnRzIiwiaXNQcm90byIsIiRiZDg1NWM1YzljYzQ0YzM0JGV4cG9ydHMiLCIkNTY2MmM3ODVhY2FiOWI4ZiRleHBvcnRzIiwiJGI1OWExNzE3OWQ1ODQ4ZjgkZXhwb3J0cyIsIiRiYmJmNTY5MTkwODEyZTQzJGV4cG9ydHMiLCJwcmVkaWNhdGUiLCJyZXNJbmRleCIsIiQwN2U3ZjkyMWM5NzY3MmQ3JGV4cG9ydHMiLCIkZDc5OWFhZTU0Y2JhYTE1MyR2YXIkcHJvcGVydHlJc0VudW1lcmFibGUiLCIkZDc5OWFhZTU0Y2JhYTE1MyR2YXIkbmF0aXZlR2V0U3ltYm9scyIsIiRkNzk5YWFlNTRjYmFhMTUzJGV4cG9ydHMiLCIkZjJlOGNiOGU0MzdmNzFjNiRleHBvcnRzIiwiJDQzYTI0YjY2MTBlMzlhMGQkZXhwb3J0cyIsIiQzMDMwZTMxYTMzOWNmZmNhJHZhciRnZXRQcm90b3R5cGUiLCIkMzAzMGUzMWEzMzljZmZjYSRleHBvcnRzIiwiJDg5ZDMzOTdjNzRlYjZiYzkkdmFyJG5hdGl2ZUdldFN5bWJvbHMiLCIkODlkMzM5N2M3NGViNmJjOSRleHBvcnRzIiwiJDg5OWNlOGVjM2FjMDU2MDQkZXhwb3J0cyIsIiRjMGIwNzNlZjI3Yjk0Zjg3JGV4cG9ydHMiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiJDVmZTg0YmE5NzczMWU2MzUkZXhwb3J0cyIsIiQ0NGIzYzczYzkxNTljMWRhJGV4cG9ydHMiLCIkMzQwOGNjNzNmNGNhZTcyMSRleHBvcnRzIiwiJGFmOWIzMGE5NGM4NjMyNzQkZXhwb3J0cyIsIiQ2Yzg3NThkZGVkNDFmOGY3JGV4cG9ydHMiLCIkOGQxYzQ4N2M0ODIwNWVmMyRleHBvcnRzIiwiJGZkNzc4YzMxMjU0MmJmNjIkdmFyJG1hcFRhZyIsIiRmZDc3OGMzMTI1NDJiZjYyJHZhciRwcm9taXNlVGFnIiwiJGZkNzc4YzMxMjU0MmJmNjIkdmFyJHNldFRhZyIsIiRmZDc3OGMzMTI1NDJiZjYyJHZhciR3ZWFrTWFwVGFnIiwiJGZkNzc4YzMxMjU0MmJmNjIkdmFyJGRhdGFWaWV3VGFnIiwiJGZkNzc4YzMxMjU0MmJmNjIkdmFyJGRhdGFWaWV3Q3RvclN0cmluZyIsIiRmZDc3OGMzMTI1NDJiZjYyJHZhciRtYXBDdG9yU3RyaW5nIiwiJGZkNzc4YzMxMjU0MmJmNjIkdmFyJHByb21pc2VDdG9yU3RyaW5nIiwiJGZkNzc4YzMxMjU0MmJmNjIkdmFyJHNldEN0b3JTdHJpbmciLCIkZmQ3NzhjMzEyNTQyYmY2MiR2YXIkd2Vha01hcEN0b3JTdHJpbmciLCIkZmQ3NzhjMzEyNTQyYmY2MiR2YXIkZ2V0VGFnIiwiY3RvclN0cmluZyIsIiRmZDc3OGMzMTI1NDJiZjYyJGV4cG9ydHMiLCIkNGQyYTdhNWQyNmVhOWExNyR2YXIkaGFzT3duUHJvcGVydHkiLCIkNGQyYTdhNWQyNmVhOWExNyRleHBvcnRzIiwiJDRjYjNiN2MwYzAwOTMwMWMkdmFyJFVpbnQ4QXJyYXkiLCIkNGNiM2I3YzBjMDA5MzAxYyRleHBvcnRzIiwiJGIyOTVlM2M5NTFiMDBiMTYkZXhwb3J0cyIsIiQ3YmViMDQxYzA3YjU4M2U0JGV4cG9ydHMiLCJkYXRhVmlldyIsIiQzNjI2YTIxYjVlZDNlMDA5JHZhciRyZUZsYWdzIiwiJDM2MjZhMjFiNWVkM2UwMDkkZXhwb3J0cyIsInJlZ2V4cCIsImxhc3RJbmRleCIsIiQ3NTZiNjg3N2Q5NWQyYzg4JHZhciRzeW1ib2xQcm90byIsIiQ3NTZiNjg3N2Q5NWQyYzg4JHZhciRzeW1ib2xWYWx1ZU9mIiwiJDc1NmI2ODc3ZDk1ZDJjODgkZXhwb3J0cyIsIiRjYzM0ZmMyNDM4YjhmZTM4JGV4cG9ydHMiLCJ0eXBlZEFycmF5IiwiJDE4YzYxYzg0MDU0M2FlMTAkZXhwb3J0cyIsIiQ2YmIzMWU4ZWEyNzIyMTc2JHZhciRvYmplY3RDcmVhdGUiLCIkNmJiMzFlOGVhMjcyMjE3NiR2YXIkYmFzZUNyZWF0ZSIsIiQ2YmIzMWU4ZWEyNzIyMTc2JGV4cG9ydHMiLCIkYzFkZjRkOWE3ZDlmYWM3OCRleHBvcnRzIiwiJDUwM2M0YWNiOTIzMTJlZmUkZXhwb3J0cyIsIiRhNzNhMTU3NDRhM2JjYjYzJHZhciRub2RlSXNNYXAiLCJpc01hcCIsIiRhNzNhMTU3NDRhM2JjYjYzJHZhciRpc01hcCIsIiRhNzNhMTU3NDRhM2JjYjYzJGV4cG9ydHMiLCIkMWVjNmVlNGYxOWQ5MDk3MiRleHBvcnRzIiwiJDZlY2E2MTExYTFjYjMxZDEkdmFyJG5vZGVJc1NldCIsImlzU2V0IiwiJDZlY2E2MTExYTFjYjMxZDEkdmFyJGlzU2V0IiwiJDZlY2E2MTExYTFjYjMxZDEkZXhwb3J0cyIsIiQ2MWY1YmYwYjczOGE5ZGY3JHZhciRhcmdzVGFnIiwiJDYxZjViZjBiNzM4YTlkZjckdmFyJGZ1bmNUYWciLCIkNjFmNWJmMGI3MzhhOWRmNyR2YXIkb2JqZWN0VGFnIiwiJDYxZjViZjBiNzM4YTlkZjckdmFyJGNsb25lYWJsZVRhZ3MiLCIkNjFmNWJmMGI3MzhhOWRmNyRleHBvcnRzIiwiJDYxZjViZjBiNzM4YTlkZjckdmFyJGJhc2VDbG9uZSIsImJpdG1hc2siLCJpc0ZsYXQiLCJpc0Z1bGwiLCJpc0Z1bmMiLCIkODBmcjQiLCJzdGFja2VkIiwic3ViVmFsdWUiLCIkZmQ3YTJlNGRiMDBjMmNmZCRleHBvcnRzIiwiJDFlZTk0OWFlYmZiMzExMTIkdmFyJHJlSXNEZWVwUHJvcCIsIiQxZWU5NDlhZWJmYjMxMTEyJHZhciRyZUlzUGxhaW5Qcm9wIiwiJDFlZTk0OWFlYmZiMzExMTIkZXhwb3J0cyIsIiQ3YTVmZmFhM2UxNDM0ZmJhJHZhciRyZVByb3BOYW1lIiwiJDdhNWZmYWEzZTE0MzRmYmEkdmFyJHJlRXNjYXBlQ2hhciIsIiQ3YTVmZmFhM2UxNDM0ZmJhJHZhciRzdHJpbmdUb1BhdGgiLCIkM2I3MzRjYTMyMzEzYjQ4YiRleHBvcnRzIiwicXVvdGUiLCJzdWJTdHJpbmciLCIkN2E1ZmZhYTNlMTQzNGZiYSRleHBvcnRzIiwiJDQ3MWY3YzgzYjBmNTIzMTIkdmFyJHN5bWJvbFByb3RvIiwiJDQ3MWY3YzgzYjBmNTIzMTIkdmFyJHN5bWJvbFRvU3RyaW5nIiwiJDQ3MWY3YzgzYjBmNTIzMTIkZXhwb3J0cyIsIiQ0NzFmN2M4M2IwZjUyMzEyJHZhciRiYXNlVG9TdHJpbmciLCIkMjc1YzkwYjYwYTY0NjA5ZiRleHBvcnRzIiwiJDUwODllZjM1MGYyOThlMzgkZXhwb3J0cyIsIiRmMWQ1YjRjNWNlNzcyMDIzJGV4cG9ydHMiLCIkMGEyNzYyZjk2NDhlN2EzNCRleHBvcnRzIiwiJGE5Mzc2YmQ3MWFhNWFjNmYkZXhwb3J0cyIsIiRjNzc1OTA3Y2NjMjc3MTFmJGV4cG9ydHMiLCIkMmRiOGYzMWI5ZWMxYTA5ZCRleHBvcnRzIiwiJDkxM2ZiODljY2QxYmRhMzMkZXhwb3J0cyIsIiQ2NjFhY2E3NDM0NGJjMjMyJHZhciRmdW5jUHJvdG8iLCIkNjYxYWNhNzQzNDRiYzIzMiR2YXIkb2JqZWN0UHJvdG8iLCIkNjYxYWNhNzQzNDRiYzIzMiR2YXIkZnVuY1RvU3RyaW5nIiwiJDY2MWFjYTc0MzQ0YmMyMzIkdmFyJGhhc093blByb3BlcnR5IiwiJDY2MWFjYTc0MzQ0YmMyMzIkdmFyJG9iamVjdEN0b3JTdHJpbmciLCIkNjYxYWNhNzQzNDRiYzIzMiRleHBvcnRzIiwiJDgzNmZkMzIyZDdiNzJlMjUkZXhwb3J0cyIsIiQwZDQ4ZWViYWNkY2RiNTc2JHZhciRzcHJlYWRhYmxlU3ltYm9sIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwiJDBkNDhlZWJhY2RjZGI1NzYkZXhwb3J0cyIsIiQ1MDY2Zjg4YTdmNDZkNGJiJGV4cG9ydHMiLCIkNTA2NmY4OGE3ZjQ2ZDRiYiR2YXIkYmFzZUZsYXR0ZW4iLCJpc1N0cmljdCIsIiQ2ZmVhMGQ2NWQ5MTk5NGQ1JGV4cG9ydHMiLCIkZDI3ODFiOWY4ZDU1MzQ2OCRleHBvcnRzIiwiJGMzNTFiZmVjNDhkZTIyZmQkdmFyJG5hdGl2ZU1heCIsIiRjMzUxYmZlYzQ4ZGUyMmZkJGV4cG9ydHMiLCJvdGhlckFyZ3MiLCIkODYzYzkyMDZhYmIzZDc0NCRleHBvcnRzIiwiJGY1NTgzOWE5YTc3NWVlMzckZXhwb3J0cyIsIiQ1NzEzOGI0MzMwYmQ3MGE1JHZhciRuYXRpdmVOb3ciLCIkNTcxMzhiNDMzMGJkNzBhNSRleHBvcnRzIiwibGFzdENhbGxlZCIsInN0YW1wIiwiJDBhZmM3MTMxMTZmZjQ2ZTkkdmFyJHNldFRvU3RyaW5nIiwiJDBhZmM3MTMxMTZmZjQ2ZTkkZXhwb3J0cyIsIiQ0NWViZGQ4MGI0MmY3NzBkJHZhciRvbWl0IiwiJDFiY2Q0NmQ3YTE2Zjc0YWYkZXhwb3J0cyIsInBhdGhzIiwiJDQ1ZWJkZDgwYjQyZjc3MGQkdmFyJENMT05FX0RFRVBfRkxBRyIsIiRkZWYzNzRkNzg4ZWU2MjNkJHZhciR0b1R5cGVkRGF0YSIsIiRkZWYzNzRkNzg4ZWU2MjNkJHZhciRpc1R5cGVkRGF0YSIsIiRkZWYzNzRkNzg4ZWU2MjNkJGV4cG9ydCQ4N2UyYjYwNTZlZTE5ZjI1IiwidHlwZWREYXRhIiwiJDQ1ZWJkZDgwYjQyZjc3MGQkZXhwb3J0cyIsIiRmZmEzYTg2ZmU0ZjI2NmUxJGV4cG9ydHMiLCIkZmZhM2E4NmZlNGYyNjZlMSR2YXIkYmFzZTY0IiwiJGZmYTNhODZmZTRmMjY2ZTEkdmFyJF9faW1wb3J0U3RhciIsImhleFN0cmlwWmVyb3MiLCIkZmZhM2E4NmZlNGYyNjZlMSR2YXIkUkxQIiwiJGIwOTVlNTUzN2JmMGY1NmEkZXhwb3J0JDNkNjQ1ZjhkMGVkYzdlYTIiLCJzdGFydHNXaXRoIiwiJGI2ZTg2MTY0NjIwYzA5ZWEkZXhwb3J0JGRjYmNlODQ5ZDk3MWQyZmQiLCJSTFAiLCIkNjVkZGQyMWNmZjJiZWFhYiRleHBvcnRzIiwidmVyaWZ5TWVzc2FnZSIsInZlcmlmeVR5cGVkRGF0YSIsIl9mZXRjaERhdGEiLCIkNmRlMTdlZDhlOGFiOTkwYiRleHBvcnQkYmFkMjQyMThlYmQ3NzIyMyIsIiRjOWVlM2ZmOTE5NmJiMzY5JGV4cG9ydCQ4N2QxM2RiYzVmZWFiM2UwIiwid2FsbGV0IiwiV2FsbGV0IiwiZGllIiwiaXNEcmFmdCIsIkRSQUZUX1NUQVRFIiwiaXNEcmFmdGFibGUiLCJvYmplY3RDdG9yU3RyaW5nIiwiRFJBRlRBQkxFIiwiZW51bWVyYWJsZU9ubHkiLCJnZXRBcmNodHlwZSIsInRoaW5nIiwidHlwZV8iLCJwcm9wT3JPbGRWYWx1ZSIsImlzIiwiaGFzTWFwIiwiaGFzU2V0IiwibGF0ZXN0IiwiY29weV8iLCJiYXNlXyIsImRlc2NyaXB0b3JzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZXAiLCJkb250TXV0YXRlRnJvemVuQ29sbGVjdGlvbnMiLCJnZXRQbHVnaW4iLCJwbHVnaW5LZXkiLCJwbHVnaW4iLCJwbHVnaW5zIiwiZ2V0Q3VycmVudFNjb3BlIiwiY3VycmVudFNjb3BlIiwidXNlUGF0Y2hlc0luU2NvcGUiLCJwYXRjaExpc3RlbmVyIiwicGF0Y2hlc18iLCJpbnZlcnNlUGF0Y2hlc18iLCJwYXRjaExpc3RlbmVyXyIsInJldm9rZVNjb3BlIiwibGVhdmVTY29wZSIsImRyYWZ0c18iLCJyZXZva2VEcmFmdCIsInBhcmVudF8iLCJlbnRlclNjb3BlIiwiaW1tZXIiLCJpbW1lcl8iLCJjYW5BdXRvRnJlZXplXyIsInVuZmluYWxpemVkRHJhZnRzXyIsImRyYWZ0IiwicmV2b2tlXyIsInJldm9rZWRfIiwicHJvY2Vzc1Jlc3VsdCIsImJhc2VEcmFmdCIsImlzUmVwbGFjZWQiLCJ1c2VQcm94aWVzXyIsIndpbGxGaW5hbGl6ZUVTNV8iLCJtb2RpZmllZF8iLCJtYXliZUZyZWV6ZSIsImdlbmVyYXRlUmVwbGFjZW1lbnRQYXRjaGVzXyIsIk5PVEhJTkciLCJyb290U2NvcGUiLCJjaGlsZFZhbHVlIiwiZmluYWxpemVQcm9wZXJ0eSIsInNjb3BlXyIsImZpbmFsaXplZF8iLCJkcmFmdF8iLCJnZW5lcmF0ZVBhdGNoZXNfIiwicGFyZW50U3RhdGUiLCJ0YXJnZXRPYmplY3QiLCJyb290UGF0aCIsImFzc2lnbmVkXyIsImF1dG9GcmVlemVfIiwiZ2V0RGVzY3JpcHRvckZyb21Qcm90byIsIm1hcmtDaGFuZ2VkIiwicHJlcGFyZUNvcHkiLCJjcmVhdGVQcm94eSIsInByb3h5TWFwXyIsInByb3h5U2V0XyIsImlzTWFudWFsXyIsInRyYXBzIiwib2JqZWN0VHJhcHMiLCJhcnJheVRyYXBzIiwicmV2b2NhYmxlIiwicmV2b2tlIiwiY3JlYXRlRVM1UHJveHlfIiwiY29weUhlbHBlciIsImFyY2hUeXBlIiwiaGFzU3ltYm9sIiwiaGFzUHJveGllcyIsIiQxNmE3NmRhZWQ4NTMyYzUwJHZhciRHIiwiX2Rlc2MkZ2V0IiwiY3VycmVudFN0YXRlIiwiSW1tZXIiLCJlMzYiLCJwcm9kdWNlIiwicmVjaXBlIiwiZGVmYXVsdEJhc2UiLCJoYXNFcnJvciIsImlwIiwiYXJnMSIsImFyZzIiLCJwcm9kdWNlV2l0aFBhdGNoZXMiLCJwYXRjaGVzIiwiaW52ZXJzZVBhdGNoZXMiLCJuZXh0U3RhdGUiLCJ1c2VQcm94aWVzIiwic2V0VXNlUHJveGllcyIsImF1dG9GcmVlemUiLCJzZXRBdXRvRnJlZXplIiwiY3JlYXRlRHJhZnQiLCJjdXJyZW50SW1wbCIsImhhc0NoYW5nZXNfIiwiZmluaXNoRHJhZnQiLCJhcHBseVBhdGNoZXMiLCJwYXRjaCIsIm9wIiwiYXBwbHlQYXRjaGVzSW1wbCIsImFwcGx5UGF0Y2hlc18iLCIkODkyMDM1Y2Q3Mzk0ZjU3ZSRleHBvcnQkNjU0NGU2MTdhMTIxMjRkZiIsIiQxNmE3NmRhZWQ4NTMyYzUwJGV4cG9ydCQyZTJiY2Q4NzM5YWUwMzkiLCIkODkyMDM1Y2Q3Mzk0ZjU3ZSRleHBvcnQkYmJiMDk1NzA3MzA5NDVjZSIsImdyb3VwIiwid2FsbGV0Q29udGFpbmVyIiwid2FsbGV0cyIsIiQ4OTIwMzVjZDczOTRmNTdlJGV4cG9ydCQ1MTEzNzMyY2MyNmVmMzE5IiwiZ3JvdXBzIiwiJGNjZjEzNDM4YmUwZjg3YjYkZXhwb3J0JDdmNjZiMjc5NWVhOGJmNzAiLCJTZWVkVHlwZTEiLCIkN2Y1YTQ5OTA4YTVlMjg2YiRleHBvcnQkODc0ZjgwNDJlNjFlMjMzYSIsIiQ3ZjVhNDk5MDhhNWUyODZiJGV4cG9ydCQyYzJiZGM4NTJlODVmOTJjIiwiJDdmNWE0OTkwOGE1ZTI4NmIkZXhwb3J0JGU0NTBlOGYwY2YyYzYxMmUiLCJjcmVhdGVSYW5kb20iLCIkOGY4M2YxYWE2YTFlNGZhMSR2YXIkX2ltbWVyYWJsZSIsIiQxNmE3NmRhZWQ4NTMyYzUwJGV4cG9ydCQ2ZWUyMDgyOTI4YmNiMGVlIiwiJDhmODNmMWFhNmExZTRmYTEkdmFyJFdhbGxldENvbnRhaW5lckltcGwiLCJnZXRGaXJzdFdhbGxldCIsImdldE1uZW1vbmljIiwic2VlZFR5cGUiLCJhZGRXYWxsZXQiLCJjdXJyZW50TW5lbW9uaWMiLCJzb21lIiwicmVtb3ZlV2FsbGV0IiwiZmluZEluZGV4IiwiZ2V0V2FsbGV0QnlBZGRyZXNzIiwidG9QbGFpbk9iamVjdCIsIiQ4ZjgzZjFhYTZhMWU0ZmExJGV4cG9ydCQ3YjE0NGJiN2ZlNThjOTljIiwiZW5jcnlwdGlvbktleSIsImVuY3J5cHRlZE1uZW1vbmljIiwiJDhmODNmMWFhNmExZTRmYTEkZXhwb3J0JGM0MmIxYWU2NDVlNTg1N2YiLCJfd2FsbGV0IiwiJDk5NzgyY2RhNjdlZTQ5YTckZXhwb3J0JDM0ZGFhZWM3MjE4YjFjZDgiLCJkZWZhdWx0UGF0aCIsIiQ0MDcwZTBmNDc1ODE3ZWM5JGV4cG9ydCRlYWQwM2Q4MGNmYWY5NDEwIiwiJGI1MGU5MjQwYjk3NzRlNGEkdmFyJGlzV2FsbGV0VmVyc2lvbjAiLCIkYjUwZTkyNDBiOTc3NGU0YSR2YXIkdXBncmFkZXMiLCJwcmVmZXJlbmNlcyIsImVudHJ5MSIsImNhbGxiYWNrRm4iLCJhZGRyZXNzZXMiLCJmcm9tRW50cmllcyIsIiRiNTBlOTI0MGI5Nzc0ZTRhJHZhciRnZXROZXh0VmVyc2lvbiIsIiRiNTBlOTI0MGI5Nzc0ZTRhJGV4cG9ydCRiYTM4NzUwOWRiYWY5NDJlIiwibmV4dFZlcnNpb24iLCIkYWFjMjlkMDZkYjcyNmRkOCR2YXIkZ2VuZXJhdGVHcm91cE5hbWUiLCJyZWNvcmQiLCJtbmVtb25pY0dyb3VwcyIsIndhbGxldE1hbmFnZXIiLCJpc05hbWVVc2VkIiwicG90ZW50aWFsTmFtZSIsImludGVybmFsTW5lbW9uaWNHcm91cENvdW50ZXIiLCIkYWFjMjlkMDZkYjcyNmRkOCR2YXIkY3JlYXRlR3JvdXAiLCJsYXN0QmFja2VkVXAiLCIkYWFjMjlkMDZkYjcyNmRkOCR2YXIkdmFsaWRhdGVOYW1lIiwibWluTGVuZ3RoIiwiRVRIRVJFVU1fQUREUkVTU19MRU5HVEgiLCIkYWFjMjlkMDZkYjcyNmRkOCR2YXIkZmluZFdpdGhJbmRleCIsIiRhYWMyOWQwNmRiNzI2ZGQ4JGV4cG9ydCQ1ODliMWJmYTEwMmQ5ZTM5IiwiY3VycmVudEFkZHJlc3MiLCJub3JtYWxpemVkQWRkcmVzcyIsIiRhYWMyOWQwNmRiNzI2ZGQ4JHZhciR2ZXJpZnlDdXJyZW50QWRkcmVzcyIsInBlbmRpbmdXYWxsZXQiLCJpc01uZW1vbmljV2FsbGV0IiwiZXhpc3RpbmdHcm91cCIsIiRhYWMyOWQwNmRiNzI2ZGQ4JHZhciR0b1BsYWluT2JqZWN0IiwiZW5jcnlwdGVkUmVjb3JkIiwidmVyaWZ5U3RhdGVJbnRlZ3JpdHkiLCJncm91cElkIiwiZ3JvdXAxIiwibWF0Y2hlZFdhbGxldCIsImNoZWNrU3VtQWRkcmVzcyIsImdyb3VwMiIsIm1heWJlRXJyb3JNZXNzYWdlIiwic2hvdWxkQ2hhbmdlQ3VycmVudEFkZHJlc3MiLCJuZXdBZGRyZXNzIiwiZ3JvdXAzIiwiaXNMYXN0QWRkcmVzcyIsIm9yaWdpbiIsImV4aXN0aW5nUGVybWlzc2lvbnMiLCJleGlzdGluZ1Blcm1pc3Npb25zU2V0IiwidXBkYXRlZEFkZHJlc3NlcyIsInBlcm1pc3Npb24iLCIkYWFjMjlkMDZkYjcyNmRkOCR2YXIkc3BsaWNlSXRlbSIsInNob3dOZXR3b3JrU3dpdGNoU2hvcnRjdXQiLCJmbGFnIiwid2FsbGV0TmFtZUZsYWdzIiwiZ3JvdXA0IiwiJDk1ODU0YWQ1YTBjOTZkZGUkZXhwb3J0JGJkYjMxZTRjNjlmNDgwY2EiLCJzYXZlZFZhbHVlIiwiaXNSZWFkeSIsInBlbmRpbmdSZWFkeVN0YXRlTGlzdGVuZXJzIiwiJDk1ODU0YWQ1YTBjOTZkZGUkdmFyJHJlbW92ZSIsIiQxNmU5MTFjZTE2YmFjNzM5JGV4cG9ydCQ0OGE4MjljYjM2MDQ1MTM0IiwiZGVjcnlwdFJlY29yZCIsImRlY3J5cHRBbmRSZXN0b3JlUmVjb3JkIiwiZW5jcnlwdFJlY29yZCIsImRlbGV0ZU1hbnkiLCIkOTE1OGU1MWQ3Y2IzMGNiMSR2YXIkSU5URVJOQUxfU1lNQk9MX0NPTlRFWFQiLCIkOTE1OGU1MWQ3Y2IzMGNiMSRleHBvcnQkYmNjYTNlYTUxNDc3NDY1NiIsIndhbGxldFN0b3JlIiwidmVyaWZ5SW50ZXJuYWxPcmlnaW4iLCJoYXNTZWVkUGhyYXNlRW5jcnlwdGlvbktleSIsInNlZWRQaHJhc2VFbmNyeXB0aW9uS2V5IiwicmVtb3ZlU2VlZFBocmFzZUVuY3J5cHRpb25LZXkiLCJzZXRFeHBpcmF0aW9uRm9yU2VlZFBocmFzZUVuY3J5cHRpb25LZXkiLCJzZWVkUGhyYXNlRXhwaXJ5VGltZXJJZCIsInN5bmNXaXRoV2FsbGV0U3RvcmUiLCJtbmVtb25pY3MiLCJlbnN1cmVSZWNvcmQiLCJnZXRSZWNvdmVyeVBocmFzZSIsImdldFByaXZhdGVLZXkiLCJyZWFkQ3VycmVudEFkZHJlc3MiLCJjcmVhdGVPclVwZGF0ZVJlY29yZCIsInVwZGF0ZVdhbGxldFN0b3JlIiwiYWRkUGVybWlzc2lvbiIsInJlbW92ZUFsbE9yaWdpblBlcm1pc3Npb25zIiwicmVtb3ZlUGVybWlzc2lvbiIsImFsbG93ZWRPcmlnaW4iLCJyZWYyIiwic2V0Q3VycmVudEFkZHJlc3MiLCJlbnN1cmVDdXJyZW50QWRkcmVzcyIsImVuc3VyZVN0cmluZ09yaWdpbiIsInJlbW92ZVdhbGxldEdyb3VwIiwicmVuYW1lV2FsbGV0R3JvdXAiLCJyZW5hbWVBZGRyZXNzIiwicmVtb3ZlQWRkcmVzcyIsInVwZGF0ZUxhc3RCYWNrZWRVcCIsInNldFByZWZlcmVuY2UiLCJnZXRQcmVmZXJlbmNlcyIsImNoZWNrZWQiLCJzZXRXYWxsZXROYW1lRmxhZyIsInJlbW92ZVdhbGxldE5hbWVGbGFnIiwiX2NoYWluU3RyIiwic2V0Q2hhaW5Gb3JPcmlnaW4iLCJnZXRDaGFpbkZvck9yaWdpbiIsInNldENoYWluSWQiLCJfY2hhaW5JZCIsIm5vZGVVcmwiLCJjdXJyZW50V2FsbGV0IiwianNvblJwY1Byb3ZpZGVyIiwiZ2V0UHJvdmlkZXIiLCJ0cmFuc2FjdGlvbk9yaWdpbiIsImdldENoYWluSWRGb3JPcmlnaW4iLCJ0YXJnZXRDaGFpbklkIiwic2FmZVR4IiwicmF3VHlwZWREYXRhIiwibWVzc2FnZUFzVXRmOFN0cmluZyIsInRvVXRmOFN0cmluZyIsInB1YmxpY0V0aGVyZXVtQ29udHJvbGxlciIsIiQ5MTU4ZTUxZDdjYjMwY2IxJHZhciRQdWJsaWNDb250cm9sbGVyIiwiY3VycmVudEFkZHJlc3MxIiwiYWNjZXB0T3JpZ2luIiwiZXRoX2FjY291bnRzIiwiZXRoX2NoYWluSWQiLCJ0cmFuc2FjdGlvblRvU2VuZCIsInN0cmluZ2lmaWVkRGF0YSIsIl9wYXNzd29yZCIsImNoYWluSWRQYXJhbWV0ZXIiLCJnZW5lcmF0ZVBlcm1pc3Npb25SZXNwb25zZSIsInBhcmVudENhcGFiaWxpdHkiLCJnZXRJc0FsbG93ZWRPcmlnaW4iLCJldGhfcmVxdWVzdEFjY291bnRzIiwid2FsbGV0Q29udHJvbGxlciIsIiQ1MTFkNjIyZDY1ZWUxOWI4JHZhciRURU1QT1JBUllfSUQiLCIkNTExZDYyMmQ2NWVlMTliOCR2YXIkY3JlYXRlRW5jcnlwdGlvbktleSIsIiQ1MTFkNjIyZDY1ZWUxOWI4JGV4cG9ydCQxZWQ0YjEwZTRhYmEwNGE3IiwiZXhpc3RpbmdVc2VyIiwicmVhZEN1cnJlbnRVc2VyIiwid2FsbGV0VGFibGUiLCJnZXRTYXZlZFN0YXRlIiwicmVtb3ZlQ3VycmVudFVzZXIiLCJ2YWxpZGl0eSIsInZlcmlmeUNyZWRlbnRpYWxzIiwidmVyaWZ5UGFzc3dvcmQiLCJzZXROZXdVc2VyIiwiaXNOZXdVc2VyIiwiaXNQZW5kaW5nTmV3VXNlciIsInVwZGF0ZUNyZWRlbnRpYWxzIiwiZ2V0RW5jcnlwdGlvbktleSIsImdldFVzZXIiLCJnZXRDdXJyZW50V2FsbGV0IiwiaGFzQWN0aXZlUGFzc3dvcmRTZXNzaW9uIiwiZXhwaXJlUGFzc3dvcmRTZXNzaW9uIiwid3JpdGVDdXJyZW50VXNlciIsInNhdmVQZW5kaW5nV2FsbGV0IiwibG9nb3V0IiwiJDUxMWQ2MjJkNjVlZTE5YjgkZXhwb3J0JDZlZDA5Zjc4ZmM2OWQ1MDMiLCJjdXJyZW50VXNlciIsImxvZ2luIiwiY3JlYXRlVXNlciIsInNhdmVVc2VyQW5kV2FsbGV0IiwiJDIwNTY4YWFiMTFlZTA5MjYkZXhwb3J0JGM1YjYwNjFjZmRlMTU2MDIiLCJuZXdJdGVtIiwiaWRLZXkiLCIkMTgwMDdiOTZjYjdhNGRkMiR2YXIkVHJhbnNhY3Rpb25zU3RvcmUiLCIkMTgwMDdiOTZjYjdhNGRkMiR2YXIkREVCVUdHSU5HX1RYX0hBU0giLCIkMTgwMDdiOTZjYjdhNGRkMiRleHBvcnQkOTg1Yzg2NTNkMTM5ODQ1MCIsInRyYW5zYWN0aW9uc1N0b3JlIiwiYWRkTGlzdGVuZXJzIiwidHJhbnNhY3Rpb25PYmplY3QiLCJjaGFpbklkQXNOdW1iZXIiLCJ0eFJlY2VpcHQiLCIkMTgwMDdiOTZjYjdhNGRkMiR2YXIkd2FpdEZvclRyYW5zYWN0aW9uIiwidXBzZXJ0VHJhbnNhY3Rpb24iLCIkNmZkMzQ1Zjk5NTM2Mzc5YSR2YXIkZGlkSW5pdGlhbGl6ZSIsIiQ5ZjAzMDczMzgzODM3N2E2JGV4cG9ydCQxM2MxZjljZjhhMjgzNTc1Iiwid2FsbGV0R2V0dGVyIiwiZ2V0V2FsbGV0IiwiJDY2ZmJhZWU3YTM5Y2MwZDAkZXhwb3J0JDQyMmRlZTkxOWI0OGViMmQiLCJvbkRpc2Nvbm5lY3QiLCJwb3J0cyIsImRpc2Nvbm5lY3RIYW5kbGVyIiwiZXZlbnRMaXN0ZW5lciIsInVucmVnaXN0ZXIiLCIkNjZmYmFlZTdhMzljYzBkMCR2YXIkcmVtb3ZlIiwiZ2V0QWN0aXZlUG9ydHMiLCJhZGRNZXNzYWdlSGFuZGxlciIsInBvcnROYW1lIiwicG9ydDEiLCIkMzdmODgzNzQ4NGVhMTg0OSRleHBvcnQkZjU0YmVlZmFlN2U0MTAxZCIsIiRiNjg2NGVlZmU2MTAyODg4JGV4cG9ydCQyYTU2MDQ3YmQyMGIyYjc1IiwiJGZkZGY5ODllODNjMjFjNTIkZXhwb3J0JGYwODYyNjEwMDUzYWM2OGMiLCIkOTgyZjJlNWM3ODYwYWJkMSRleHBvcnQkYjJiZWM5Mjc5YjFmMTQxZiIsImNvbnRyb2xsZXIiLCIkYmUxOWFmOGU1N2FlYjg1ZCR2YXIkZ2V0UG9ydE9yaWdpbiIsIiRiZTE5YWY4ZTU3YWViODVkJHZhciRpc0Nocm9tZVBvcnRTZW5kZXIiLCIkYmUxOWFmOGU1N2FlYjg1ZCRleHBvcnQkODc3NzFlNTRhMzEzY2E0YSIsInRhYklkIiwidGFiIiwiJDlmNGM3NWFlOTY4ZDkzODkkZXhwb3J0JGUzZTdlZjYzM2FiN2JjYWIiLCIkMGVlNjNmYTk5ZGRkMjUxOCRleHBvcnQkZjUyZjA4YzU2ZmFmZTAwMSIsImh0dHBDb25uZWN0aW9uIiwiJDUxZmY2NjU0MDI4MGZmN2EkZXhwb3J0JGQ2ODVlZjI5N2NhZDUwOTAiLCJkaXNwb3NlcnMiLCJhZGRXYWxsZXRFdmVudExpc3RlbmVycyIsIiQ4YzdjNTkwMDZlODVlNmEzJGV4cG9ydCQyNmRjM2EzMmZlMTc4NjEwIiwiZ2V0Q2xpZW50UG9ydHMiLCJzdGFydExpc3RlbmluZyIsInN0b3BMaXN0ZW5pbmciLCIkZWMxYmMwNGNlZWY1ZDBhYiRleHBvcnQkNjg4NDU4NDM5OGM4MzI2MyIsIiQ4NGRiZjA0ZjY4MDY2MjhlJGV4cG9ydCRiMzU3MTE4OGM3NzBjYzVhIiwib25JZGxlIiwiJDFqMG9ZIiwiZW5zdXJlVXNlckFuZFdhbGxldCIsImFjY291bnRQdWJsaWNSUEMiLCJ0cmFuc2FjdGlvblNlcnZpY2UiLCJpbml0aWFsaXplIiwibWVtb3J5Q2FjaGVSUEMiLCJwb3J0UmVnaXN0cnkiLCJtYXBUb0NvbnRyb2xsZXJJZlBvc3NpYmxlIiwib25Db25uZWN0IiwiJDgyZTMyN2QyODg2YmZhZDQkdmFyJHZlcmlmeVBvcnQiXSwidmVyc2lvbiI6MywiZmlsZSI6ImJhY2tncm91bmQuOTBlMjNlYzIuanMubWFwIn0=
