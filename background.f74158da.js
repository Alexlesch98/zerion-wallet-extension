function e(e,t,r,n){Object.defineProperty(e,t,{get:r,set:n,enumerable:!0,configurable:!0})}var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};function r(e){return e&&e.__esModule?e.default:e}var n={},i={},o=t.parcelRequire7f4b;null==o&&((o=function(e){if(e in n)return n[e].exports;if(e in i){var t=i[e];delete i[e];var r={id:e,exports:{}};return n[e]=r,t.call(r.exports,r,r.exports),r.exports}var o=new Error("Cannot find module '"+e+"'");throw o.code="MODULE_NOT_FOUND",o}).register=function(e,t){i[e]=t},t.parcelRequire7f4b=o),o.register("22Rdj",(function(t,r){var n,i;e(t.exports,"register",(function(){return n}),(function(e){return n=e})),e(t.exports,"resolve",(function(){return i}),(function(e){return i=e}));var o={};n=function(e){for(var t=Object.keys(e),r=0;r<t.length;r++)o[t[r]]=e[t[r]]},i=function(e){var t=o[e];if(null==t)throw new Error("Could not resolve bundle with id "+e);return t}})),o.register("8WZ8I",(function(e,t){var r;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,r=function(e){if(!globalThis.chrome?.runtime?.id)throw new Error("This script should only be loaded in a browser extension.");if(void 0===globalThis.browser||Object.getPrototypeOf(globalThis.browser)!==Object.prototype){const t="The message port closed before a response was received.",r=e=>{const r={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(r).length)throw new Error("api-metadata.json has not been included in browser-polyfill");class n extends WeakMap{get(e){return this.has(e)||this.set(e,this.createItem(e)),super.get(e)}constructor(e,t){super(t),this.createItem=e}}const i=(t,r)=>(...n)=>{e.runtime.lastError?t.reject(new Error(e.runtime.lastError.message)):r.singleCallbackArg||n.length<=1&&!1!==r.singleCallbackArg?t.resolve(n[0]):t.resolve(n)},o=e=>1==e?"argument":"arguments",s=(e,t,r)=>new Proxy(t,{apply:(t,n,i)=>r.call(n,e,...i)});let a=Function.call.bind(Object.prototype.hasOwnProperty);const c=(e,t={},r={})=>{let n=Object.create(null),u={has:(t,r)=>r in e||r in n,get(u,l,h){if(l in n)return n[l];if(!(l in e))return;let f=e[l];if("function"==typeof f)if("function"==typeof t[l])f=s(e,e[l],t[l]);else if(a(r,l)){let t=((e,t)=>function(r,...n){if(n.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${o(t.minArgs)} for ${e}(), got ${n.length}`);if(n.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${o(t.maxArgs)} for ${e}(), got ${n.length}`);return new Promise(((o,s)=>{if(t.fallbackToNoCallback)try{r[e](...n,i({resolve:o,reject:s},t))}catch(i){console.warn(`${e} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,i),r[e](...n),t.fallbackToNoCallback=!1,t.noCallback=!0,o()}else t.noCallback?(r[e](...n),o()):r[e](...n,i({resolve:o,reject:s},t))}))})(l,r[l]);f=s(e,e[l],t)}else f=f.bind(e);else if("object"==typeof f&&null!==f&&(a(t,l)||a(r,l)))f=c(f,t[l],r[l]);else{if(!a(r,"*"))return Object.defineProperty(n,l,{configurable:!0,enumerable:!0,get:()=>e[l],set(t){e[l]=t}}),f;f=c(f,t[l],r["*"])}return n[l]=f,f},set:(t,r,i,o)=>(r in n?n[r]=i:e[r]=i,!0),defineProperty:(e,t,r)=>Reflect.defineProperty(n,t,r),deleteProperty:(e,t)=>Reflect.deleteProperty(n,t)},l=Object.create(e);return new Proxy(l,u)},u=e=>({addListener(t,r,...n){t.addListener(e.get(r),...n)},hasListener:(t,r)=>t.hasListener(e.get(r)),removeListener(t,r){t.removeListener(e.get(r))}}),l=new n((e=>"function"!=typeof e?e:function(t){const r=c(t,{},{getContent:{minArgs:0,maxArgs:0}});e(r)})),h=new n((e=>"function"!=typeof e?e:function(t,r,n){let i,o,s=!1,a=new Promise((e=>{i=function(t){s=!0,e(t)}}));try{o=e(t,r,i)}catch(e){o=Promise.reject(e)}const c=!0!==o&&(u=o)&&"object"==typeof u&&"function"==typeof u.then;var u;if(!0!==o&&!c&&!s)return!1;const l=e=>{e.then((e=>{n(e)}),(e=>{let t;t=e&&(e instanceof Error||"string"==typeof e.message)?e.message:"An unexpected error occurred",n({__mozWebExtensionPolyfillReject__:!0,message:t})})).catch((e=>{console.error("Failed to send onMessage rejected reply",e)}))};return l(c?o:a),!0})),f=({reject:r,resolve:n},i)=>{e.runtime.lastError?e.runtime.lastError.message===t?n():r(new Error(e.runtime.lastError.message)):i&&i.__mozWebExtensionPolyfillReject__?r(new Error(i.message)):n(i)},d=(e,t,r,...n)=>{if(n.length<t.minArgs)throw new Error(`Expected at least ${t.minArgs} ${o(t.minArgs)} for ${e}(), got ${n.length}`);if(n.length>t.maxArgs)throw new Error(`Expected at most ${t.maxArgs} ${o(t.maxArgs)} for ${e}(), got ${n.length}`);return new Promise(((e,t)=>{const i=f.bind(null,{resolve:e,reject:t});n.push(i),r.sendMessage(...n)}))},p={devtools:{network:{onRequestFinished:u(l)}},runtime:{onMessage:u(h),onMessageExternal:u(h),sendMessage:d.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:d.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},g={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return r.privacy={network:{"*":g},services:{"*":g},websites:{"*":g}},c(e,p,r)};e.exports=r(chrome)}else e.exports=globalThis.browser},"function"==typeof define&&define.amd?define("webextension-polyfill",["module"],r):r(e)})),o.register("9kH0C",(function(e,t){!function(e,t){function r(e,t){if(!e)throw new Error(t||"Assertion failed")}function n(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}function i(e,t,r){if(i.isBN(e))return e;this.negative=0,this.words=null,this.length=0,this.red=null,null!==e&&("le"!==t&&"be"!==t||(r=t,t=10),this._init(e||0,t||10,r||"be"))}var s;"object"==typeof e?e.exports=i:t.BN=i,i.BN=i,i.wordSize=26;try{s="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:o("WBjuC").Buffer}catch(e){}function a(e,t){var n=e.charCodeAt(t);return n>=48&&n<=57?n-48:n>=65&&n<=70?n-55:n>=97&&n<=102?n-87:void r(!1,"Invalid character in "+e)}function c(e,t,r){var n=a(e,r);return r-1>=t&&(n|=a(e,r-1)<<4),n}function u(e,t,n,i){for(var o=0,s=0,a=Math.min(e.length,n),c=t;c<a;c++){var u=e.charCodeAt(c)-48;o*=i,s=u>=49?u-49+10:u>=17?u-17+10:u,r(u>=0&&s<i,"Invalid character"),o+=s}return o}function l(e,t){e.words=t.words,e.length=t.length,e.negative=t.negative,e.red=t.red}if(i.isBN=function(e){return e instanceof i||null!==e&&"object"==typeof e&&e.constructor.wordSize===i.wordSize&&Array.isArray(e.words)},i.max=function(e,t){return e.cmp(t)>0?e:t},i.min=function(e,t){return e.cmp(t)<0?e:t},i.prototype._init=function(e,t,n){if("number"==typeof e)return this._initNumber(e,t,n);if("object"==typeof e)return this._initArray(e,t,n);"hex"===t&&(t=16),r(t===(0|t)&&t>=2&&t<=36);var i=0;"-"===(e=e.toString().replace(/\s+/g,""))[0]&&(i++,this.negative=1),i<e.length&&(16===t?this._parseHex(e,i,n):(this._parseBase(e,t,i),"le"===n&&this._initArray(this.toArray(),t,n)))},i.prototype._initNumber=function(e,t,n){e<0&&(this.negative=1,e=-e),e<67108864?(this.words=[67108863&e],this.length=1):e<4503599627370496?(this.words=[67108863&e,e/67108864&67108863],this.length=2):(r(e<9007199254740992),this.words=[67108863&e,e/67108864&67108863,1],this.length=3),"le"===n&&this._initArray(this.toArray(),t,n)},i.prototype._initArray=function(e,t,n){if(r("number"==typeof e.length),e.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(e.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,s,a=0;if("be"===n)for(i=e.length-1,o=0;i>=0;i-=3)s=e[i]|e[i-1]<<8|e[i-2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);else if("le"===n)for(i=0,o=0;i<e.length;i+=3)s=e[i]|e[i+1]<<8|e[i+2]<<16,this.words[o]|=s<<a&67108863,this.words[o+1]=s>>>26-a&67108863,(a+=24)>=26&&(a-=26,o++);return this._strip()},i.prototype._parseHex=function(e,t,r){this.length=Math.ceil((e.length-t)/6),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var i,o=0,s=0;if("be"===r)for(n=e.length-1;n>=t;n-=2)i=c(e,t,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;else for(n=(e.length-t)%2==0?t+1:t;n<e.length;n+=2)i=c(e,t,n)<<o,this.words[s]|=67108863&i,o>=18?(o-=18,s+=1,this.words[s]|=i>>>26):o+=8;this._strip()},i.prototype._parseBase=function(e,t,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=t)n++;n--,i=i/t|0;for(var o=e.length-r,s=o%n,a=Math.min(o,o-s)+r,c=0,l=r;l<a;l+=n)c=u(e,l,l+n,t),this.imuln(i),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c);if(0!==s){var h=1;for(c=u(e,l,e.length,t),l=0;l<s;l++)h*=t;this.imuln(h),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c)}this._strip()},i.prototype.copy=function(e){e.words=new Array(this.length);for(var t=0;t<this.length;t++)e.words[t]=this.words[t];e.length=this.length,e.negative=this.negative,e.red=this.red},i.prototype._move=function(e){l(e,this)},i.prototype.clone=function(){var e=new i(null);return this.copy(e),e},i.prototype._expand=function(e){for(;this.length<e;)this.words[this.length++]=0;return this},i.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},i.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for)try{i.prototype[Symbol.for("nodejs.util.inspect.custom")]=h}catch(e){i.prototype.inspect=h}else i.prototype.inspect=h;function h(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var f=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],d=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],p=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];i.prototype.toString=function(e,t){var n;if(t=0|t||1,16===(e=e||10)||"hex"===e){n="";for(var i=0,o=0,s=0;s<this.length;s++){var a=this.words[s],c=(16777215&(a<<i|o)).toString(16);o=a>>>24-i&16777215,(i+=2)>=26&&(i-=26,s--),n=0!==o||s!==this.length-1?f[6-c.length]+c+n:c+n}for(0!==o&&(n=o.toString(16)+n);n.length%t!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}if(e===(0|e)&&e>=2&&e<=36){var u=d[e],l=p[e];n="";var h=this.clone();for(h.negative=0;!h.isZero();){var g=h.modrn(l).toString(e);n=(h=h.idivn(l)).isZero()?g+n:f[u-g.length]+g+n}for(this.isZero()&&(n="0"+n);n.length%t!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}r(!1,"Base should be between 2 and 36")},i.prototype.toNumber=function(){var e=this.words[0];return 2===this.length?e+=67108864*this.words[1]:3===this.length&&1===this.words[2]?e+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-e:e},i.prototype.toJSON=function(){return this.toString(16,2)},s&&(i.prototype.toBuffer=function(e,t){return this.toArrayLike(s,e,t)}),i.prototype.toArray=function(e,t){return this.toArrayLike(Array,e,t)};function g(e,t,r){r.negative=t.negative^e.negative;var n=e.length+t.length|0;r.length=n,n=n-1|0;var i=0|e.words[0],o=0|t.words[0],s=i*o,a=67108863&s,c=s/67108864|0;r.words[0]=a;for(var u=1;u<n;u++){for(var l=c>>>26,h=67108863&c,f=Math.min(u,t.length-1),d=Math.max(0,u-e.length+1);d<=f;d++){var p=u-d|0;l+=(s=(i=0|e.words[p])*(o=0|t.words[d])+h)/67108864|0,h=67108863&s}r.words[u]=0|h,c=0|l}return 0!==c?r.words[u]=0|c:r.length--,r._strip()}i.prototype.toArrayLike=function(e,t,n){this._strip();var i=this.byteLength(),o=n||Math.max(1,i);r(i<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0");var s=function(e,t){return e.allocUnsafe?e.allocUnsafe(t):new e(t)}(e,o);return this["_toArrayLike"+("le"===t?"LE":"BE")](s,i),s},i.prototype._toArrayLikeLE=function(e,t){for(var r=0,n=0,i=0,o=0;i<this.length;i++){var s=this.words[i]<<o|n;e[r++]=255&s,r<e.length&&(e[r++]=s>>8&255),r<e.length&&(e[r++]=s>>16&255),6===o?(r<e.length&&(e[r++]=s>>24&255),n=0,o=0):(n=s>>>24,o+=2)}if(r<e.length)for(e[r++]=n;r<e.length;)e[r++]=0},i.prototype._toArrayLikeBE=function(e,t){for(var r=e.length-1,n=0,i=0,o=0;i<this.length;i++){var s=this.words[i]<<o|n;e[r--]=255&s,r>=0&&(e[r--]=s>>8&255),r>=0&&(e[r--]=s>>16&255),6===o?(r>=0&&(e[r--]=s>>24&255),n=0,o=0):(n=s>>>24,o+=2)}if(r>=0)for(e[r--]=n;r>=0;)e[r--]=0},Math.clz32?i.prototype._countBits=function(e){return 32-Math.clz32(e)}:i.prototype._countBits=function(e){var t=e,r=0;return t>=4096&&(r+=13,t>>>=13),t>=64&&(r+=7,t>>>=7),t>=8&&(r+=4,t>>>=4),t>=2&&(r+=2,t>>>=2),r+t},i.prototype._zeroBits=function(e){if(0===e)return 26;var t=e,r=0;return 0==(8191&t)&&(r+=13,t>>>=13),0==(127&t)&&(r+=7,t>>>=7),0==(15&t)&&(r+=4,t>>>=4),0==(3&t)&&(r+=2,t>>>=2),0==(1&t)&&r++,r},i.prototype.bitLength=function(){var e=this.words[this.length-1],t=this._countBits(e);return 26*(this.length-1)+t},i.prototype.zeroBits=function(){if(this.isZero())return 0;for(var e=0,t=0;t<this.length;t++){var r=this._zeroBits(this.words[t]);if(e+=r,26!==r)break}return e},i.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},i.prototype.toTwos=function(e){return 0!==this.negative?this.abs().inotn(e).iaddn(1):this.clone()},i.prototype.fromTwos=function(e){return this.testn(e-1)?this.notn(e).iaddn(1).ineg():this.clone()},i.prototype.isNeg=function(){return 0!==this.negative},i.prototype.neg=function(){return this.clone().ineg()},i.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},i.prototype.iuor=function(e){for(;this.length<e.length;)this.words[this.length++]=0;for(var t=0;t<e.length;t++)this.words[t]=this.words[t]|e.words[t];return this._strip()},i.prototype.ior=function(e){return r(0==(this.negative|e.negative)),this.iuor(e)},i.prototype.or=function(e){return this.length>e.length?this.clone().ior(e):e.clone().ior(this)},i.prototype.uor=function(e){return this.length>e.length?this.clone().iuor(e):e.clone().iuor(this)},i.prototype.iuand=function(e){var t;t=this.length>e.length?e:this;for(var r=0;r<t.length;r++)this.words[r]=this.words[r]&e.words[r];return this.length=t.length,this._strip()},i.prototype.iand=function(e){return r(0==(this.negative|e.negative)),this.iuand(e)},i.prototype.and=function(e){return this.length>e.length?this.clone().iand(e):e.clone().iand(this)},i.prototype.uand=function(e){return this.length>e.length?this.clone().iuand(e):e.clone().iuand(this)},i.prototype.iuxor=function(e){var t,r;this.length>e.length?(t=this,r=e):(t=e,r=this);for(var n=0;n<r.length;n++)this.words[n]=t.words[n]^r.words[n];if(this!==t)for(;n<t.length;n++)this.words[n]=t.words[n];return this.length=t.length,this._strip()},i.prototype.ixor=function(e){return r(0==(this.negative|e.negative)),this.iuxor(e)},i.prototype.xor=function(e){return this.length>e.length?this.clone().ixor(e):e.clone().ixor(this)},i.prototype.uxor=function(e){return this.length>e.length?this.clone().iuxor(e):e.clone().iuxor(this)},i.prototype.inotn=function(e){r("number"==typeof e&&e>=0);var t=0|Math.ceil(e/26),n=e%26;this._expand(t),n>0&&t--;for(var i=0;i<t;i++)this.words[i]=67108863&~this.words[i];return n>0&&(this.words[i]=~this.words[i]&67108863>>26-n),this._strip()},i.prototype.notn=function(e){return this.clone().inotn(e)},i.prototype.setn=function(e,t){r("number"==typeof e&&e>=0);var n=e/26|0,i=e%26;return this._expand(n+1),this.words[n]=t?this.words[n]|1<<i:this.words[n]&~(1<<i),this._strip()},i.prototype.iadd=function(e){var t,r,n;if(0!==this.negative&&0===e.negative)return this.negative=0,t=this.isub(e),this.negative^=1,this._normSign();if(0===this.negative&&0!==e.negative)return e.negative=0,t=this.isub(e),e.negative=1,t._normSign();this.length>e.length?(r=this,n=e):(r=e,n=this);for(var i=0,o=0;o<n.length;o++)t=(0|r.words[o])+(0|n.words[o])+i,this.words[o]=67108863&t,i=t>>>26;for(;0!==i&&o<r.length;o++)t=(0|r.words[o])+i,this.words[o]=67108863&t,i=t>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},i.prototype.add=function(e){var t;return 0!==e.negative&&0===this.negative?(e.negative=0,t=this.sub(e),e.negative^=1,t):0===e.negative&&0!==this.negative?(this.negative=0,t=e.sub(this),this.negative=1,t):this.length>e.length?this.clone().iadd(e):e.clone().iadd(this)},i.prototype.isub=function(e){if(0!==e.negative){e.negative=0;var t=this.iadd(e);return e.negative=1,t._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(e),this.negative=1,this._normSign();var r,n,i=this.cmp(e);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=e):(r=e,n=this);for(var o=0,s=0;s<n.length;s++)o=(t=(0|r.words[s])-(0|n.words[s])+o)>>26,this.words[s]=67108863&t;for(;0!==o&&s<r.length;s++)o=(t=(0|r.words[s])+o)>>26,this.words[s]=67108863&t;if(0===o&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this._strip()},i.prototype.sub=function(e){return this.clone().isub(e)};var m=function(e,t,r){var n,i,o,s=e.words,a=t.words,c=r.words,u=0,l=0|s[0],h=8191&l,f=l>>>13,d=0|s[1],p=8191&d,g=d>>>13,m=0|s[2],y=8191&m,v=m>>>13,w=0|s[3],b=8191&w,A=w>>>13,E=0|s[4],x=8191&E,S=E>>>13,C=0|s[5],k=8191&C,_=C>>>13,P=0|s[6],R=8191&P,O=P>>>13,I=0|s[7],N=8191&I,T=I>>>13,M=0|s[8],B=8191&M,F=M>>>13,L=0|s[9],j=8191&L,D=L>>>13,U=0|a[0],z=8191&U,q=U>>>13,K=0|a[1],G=8191&K,W=K>>>13,H=0|a[2],J=8191&H,V=H>>>13,Q=0|a[3],Z=8191&Q,Y=Q>>>13,X=0|a[4],$=8191&X,ee=X>>>13,te=0|a[5],re=8191&te,ne=te>>>13,ie=0|a[6],oe=8191&ie,se=ie>>>13,ae=0|a[7],ce=8191&ae,ue=ae>>>13,le=0|a[8],he=8191&le,fe=le>>>13,de=0|a[9],pe=8191&de,ge=de>>>13;r.negative=e.negative^t.negative,r.length=19;var me=(u+(n=Math.imul(h,z))|0)+((8191&(i=(i=Math.imul(h,q))+Math.imul(f,z)|0))<<13)|0;u=((o=Math.imul(f,q))+(i>>>13)|0)+(me>>>26)|0,me&=67108863,n=Math.imul(p,z),i=(i=Math.imul(p,q))+Math.imul(g,z)|0,o=Math.imul(g,q);var ye=(u+(n=n+Math.imul(h,G)|0)|0)+((8191&(i=(i=i+Math.imul(h,W)|0)+Math.imul(f,G)|0))<<13)|0;u=((o=o+Math.imul(f,W)|0)+(i>>>13)|0)+(ye>>>26)|0,ye&=67108863,n=Math.imul(y,z),i=(i=Math.imul(y,q))+Math.imul(v,z)|0,o=Math.imul(v,q),n=n+Math.imul(p,G)|0,i=(i=i+Math.imul(p,W)|0)+Math.imul(g,G)|0,o=o+Math.imul(g,W)|0;var ve=(u+(n=n+Math.imul(h,J)|0)|0)+((8191&(i=(i=i+Math.imul(h,V)|0)+Math.imul(f,J)|0))<<13)|0;u=((o=o+Math.imul(f,V)|0)+(i>>>13)|0)+(ve>>>26)|0,ve&=67108863,n=Math.imul(b,z),i=(i=Math.imul(b,q))+Math.imul(A,z)|0,o=Math.imul(A,q),n=n+Math.imul(y,G)|0,i=(i=i+Math.imul(y,W)|0)+Math.imul(v,G)|0,o=o+Math.imul(v,W)|0,n=n+Math.imul(p,J)|0,i=(i=i+Math.imul(p,V)|0)+Math.imul(g,J)|0,o=o+Math.imul(g,V)|0;var we=(u+(n=n+Math.imul(h,Z)|0)|0)+((8191&(i=(i=i+Math.imul(h,Y)|0)+Math.imul(f,Z)|0))<<13)|0;u=((o=o+Math.imul(f,Y)|0)+(i>>>13)|0)+(we>>>26)|0,we&=67108863,n=Math.imul(x,z),i=(i=Math.imul(x,q))+Math.imul(S,z)|0,o=Math.imul(S,q),n=n+Math.imul(b,G)|0,i=(i=i+Math.imul(b,W)|0)+Math.imul(A,G)|0,o=o+Math.imul(A,W)|0,n=n+Math.imul(y,J)|0,i=(i=i+Math.imul(y,V)|0)+Math.imul(v,J)|0,o=o+Math.imul(v,V)|0,n=n+Math.imul(p,Z)|0,i=(i=i+Math.imul(p,Y)|0)+Math.imul(g,Z)|0,o=o+Math.imul(g,Y)|0;var be=(u+(n=n+Math.imul(h,$)|0)|0)+((8191&(i=(i=i+Math.imul(h,ee)|0)+Math.imul(f,$)|0))<<13)|0;u=((o=o+Math.imul(f,ee)|0)+(i>>>13)|0)+(be>>>26)|0,be&=67108863,n=Math.imul(k,z),i=(i=Math.imul(k,q))+Math.imul(_,z)|0,o=Math.imul(_,q),n=n+Math.imul(x,G)|0,i=(i=i+Math.imul(x,W)|0)+Math.imul(S,G)|0,o=o+Math.imul(S,W)|0,n=n+Math.imul(b,J)|0,i=(i=i+Math.imul(b,V)|0)+Math.imul(A,J)|0,o=o+Math.imul(A,V)|0,n=n+Math.imul(y,Z)|0,i=(i=i+Math.imul(y,Y)|0)+Math.imul(v,Z)|0,o=o+Math.imul(v,Y)|0,n=n+Math.imul(p,$)|0,i=(i=i+Math.imul(p,ee)|0)+Math.imul(g,$)|0,o=o+Math.imul(g,ee)|0;var Ae=(u+(n=n+Math.imul(h,re)|0)|0)+((8191&(i=(i=i+Math.imul(h,ne)|0)+Math.imul(f,re)|0))<<13)|0;u=((o=o+Math.imul(f,ne)|0)+(i>>>13)|0)+(Ae>>>26)|0,Ae&=67108863,n=Math.imul(R,z),i=(i=Math.imul(R,q))+Math.imul(O,z)|0,o=Math.imul(O,q),n=n+Math.imul(k,G)|0,i=(i=i+Math.imul(k,W)|0)+Math.imul(_,G)|0,o=o+Math.imul(_,W)|0,n=n+Math.imul(x,J)|0,i=(i=i+Math.imul(x,V)|0)+Math.imul(S,J)|0,o=o+Math.imul(S,V)|0,n=n+Math.imul(b,Z)|0,i=(i=i+Math.imul(b,Y)|0)+Math.imul(A,Z)|0,o=o+Math.imul(A,Y)|0,n=n+Math.imul(y,$)|0,i=(i=i+Math.imul(y,ee)|0)+Math.imul(v,$)|0,o=o+Math.imul(v,ee)|0,n=n+Math.imul(p,re)|0,i=(i=i+Math.imul(p,ne)|0)+Math.imul(g,re)|0,o=o+Math.imul(g,ne)|0;var Ee=(u+(n=n+Math.imul(h,oe)|0)|0)+((8191&(i=(i=i+Math.imul(h,se)|0)+Math.imul(f,oe)|0))<<13)|0;u=((o=o+Math.imul(f,se)|0)+(i>>>13)|0)+(Ee>>>26)|0,Ee&=67108863,n=Math.imul(N,z),i=(i=Math.imul(N,q))+Math.imul(T,z)|0,o=Math.imul(T,q),n=n+Math.imul(R,G)|0,i=(i=i+Math.imul(R,W)|0)+Math.imul(O,G)|0,o=o+Math.imul(O,W)|0,n=n+Math.imul(k,J)|0,i=(i=i+Math.imul(k,V)|0)+Math.imul(_,J)|0,o=o+Math.imul(_,V)|0,n=n+Math.imul(x,Z)|0,i=(i=i+Math.imul(x,Y)|0)+Math.imul(S,Z)|0,o=o+Math.imul(S,Y)|0,n=n+Math.imul(b,$)|0,i=(i=i+Math.imul(b,ee)|0)+Math.imul(A,$)|0,o=o+Math.imul(A,ee)|0,n=n+Math.imul(y,re)|0,i=(i=i+Math.imul(y,ne)|0)+Math.imul(v,re)|0,o=o+Math.imul(v,ne)|0,n=n+Math.imul(p,oe)|0,i=(i=i+Math.imul(p,se)|0)+Math.imul(g,oe)|0,o=o+Math.imul(g,se)|0;var xe=(u+(n=n+Math.imul(h,ce)|0)|0)+((8191&(i=(i=i+Math.imul(h,ue)|0)+Math.imul(f,ce)|0))<<13)|0;u=((o=o+Math.imul(f,ue)|0)+(i>>>13)|0)+(xe>>>26)|0,xe&=67108863,n=Math.imul(B,z),i=(i=Math.imul(B,q))+Math.imul(F,z)|0,o=Math.imul(F,q),n=n+Math.imul(N,G)|0,i=(i=i+Math.imul(N,W)|0)+Math.imul(T,G)|0,o=o+Math.imul(T,W)|0,n=n+Math.imul(R,J)|0,i=(i=i+Math.imul(R,V)|0)+Math.imul(O,J)|0,o=o+Math.imul(O,V)|0,n=n+Math.imul(k,Z)|0,i=(i=i+Math.imul(k,Y)|0)+Math.imul(_,Z)|0,o=o+Math.imul(_,Y)|0,n=n+Math.imul(x,$)|0,i=(i=i+Math.imul(x,ee)|0)+Math.imul(S,$)|0,o=o+Math.imul(S,ee)|0,n=n+Math.imul(b,re)|0,i=(i=i+Math.imul(b,ne)|0)+Math.imul(A,re)|0,o=o+Math.imul(A,ne)|0,n=n+Math.imul(y,oe)|0,i=(i=i+Math.imul(y,se)|0)+Math.imul(v,oe)|0,o=o+Math.imul(v,se)|0,n=n+Math.imul(p,ce)|0,i=(i=i+Math.imul(p,ue)|0)+Math.imul(g,ce)|0,o=o+Math.imul(g,ue)|0;var Se=(u+(n=n+Math.imul(h,he)|0)|0)+((8191&(i=(i=i+Math.imul(h,fe)|0)+Math.imul(f,he)|0))<<13)|0;u=((o=o+Math.imul(f,fe)|0)+(i>>>13)|0)+(Se>>>26)|0,Se&=67108863,n=Math.imul(j,z),i=(i=Math.imul(j,q))+Math.imul(D,z)|0,o=Math.imul(D,q),n=n+Math.imul(B,G)|0,i=(i=i+Math.imul(B,W)|0)+Math.imul(F,G)|0,o=o+Math.imul(F,W)|0,n=n+Math.imul(N,J)|0,i=(i=i+Math.imul(N,V)|0)+Math.imul(T,J)|0,o=o+Math.imul(T,V)|0,n=n+Math.imul(R,Z)|0,i=(i=i+Math.imul(R,Y)|0)+Math.imul(O,Z)|0,o=o+Math.imul(O,Y)|0,n=n+Math.imul(k,$)|0,i=(i=i+Math.imul(k,ee)|0)+Math.imul(_,$)|0,o=o+Math.imul(_,ee)|0,n=n+Math.imul(x,re)|0,i=(i=i+Math.imul(x,ne)|0)+Math.imul(S,re)|0,o=o+Math.imul(S,ne)|0,n=n+Math.imul(b,oe)|0,i=(i=i+Math.imul(b,se)|0)+Math.imul(A,oe)|0,o=o+Math.imul(A,se)|0,n=n+Math.imul(y,ce)|0,i=(i=i+Math.imul(y,ue)|0)+Math.imul(v,ce)|0,o=o+Math.imul(v,ue)|0,n=n+Math.imul(p,he)|0,i=(i=i+Math.imul(p,fe)|0)+Math.imul(g,he)|0,o=o+Math.imul(g,fe)|0;var Ce=(u+(n=n+Math.imul(h,pe)|0)|0)+((8191&(i=(i=i+Math.imul(h,ge)|0)+Math.imul(f,pe)|0))<<13)|0;u=((o=o+Math.imul(f,ge)|0)+(i>>>13)|0)+(Ce>>>26)|0,Ce&=67108863,n=Math.imul(j,G),i=(i=Math.imul(j,W))+Math.imul(D,G)|0,o=Math.imul(D,W),n=n+Math.imul(B,J)|0,i=(i=i+Math.imul(B,V)|0)+Math.imul(F,J)|0,o=o+Math.imul(F,V)|0,n=n+Math.imul(N,Z)|0,i=(i=i+Math.imul(N,Y)|0)+Math.imul(T,Z)|0,o=o+Math.imul(T,Y)|0,n=n+Math.imul(R,$)|0,i=(i=i+Math.imul(R,ee)|0)+Math.imul(O,$)|0,o=o+Math.imul(O,ee)|0,n=n+Math.imul(k,re)|0,i=(i=i+Math.imul(k,ne)|0)+Math.imul(_,re)|0,o=o+Math.imul(_,ne)|0,n=n+Math.imul(x,oe)|0,i=(i=i+Math.imul(x,se)|0)+Math.imul(S,oe)|0,o=o+Math.imul(S,se)|0,n=n+Math.imul(b,ce)|0,i=(i=i+Math.imul(b,ue)|0)+Math.imul(A,ce)|0,o=o+Math.imul(A,ue)|0,n=n+Math.imul(y,he)|0,i=(i=i+Math.imul(y,fe)|0)+Math.imul(v,he)|0,o=o+Math.imul(v,fe)|0;var ke=(u+(n=n+Math.imul(p,pe)|0)|0)+((8191&(i=(i=i+Math.imul(p,ge)|0)+Math.imul(g,pe)|0))<<13)|0;u=((o=o+Math.imul(g,ge)|0)+(i>>>13)|0)+(ke>>>26)|0,ke&=67108863,n=Math.imul(j,J),i=(i=Math.imul(j,V))+Math.imul(D,J)|0,o=Math.imul(D,V),n=n+Math.imul(B,Z)|0,i=(i=i+Math.imul(B,Y)|0)+Math.imul(F,Z)|0,o=o+Math.imul(F,Y)|0,n=n+Math.imul(N,$)|0,i=(i=i+Math.imul(N,ee)|0)+Math.imul(T,$)|0,o=o+Math.imul(T,ee)|0,n=n+Math.imul(R,re)|0,i=(i=i+Math.imul(R,ne)|0)+Math.imul(O,re)|0,o=o+Math.imul(O,ne)|0,n=n+Math.imul(k,oe)|0,i=(i=i+Math.imul(k,se)|0)+Math.imul(_,oe)|0,o=o+Math.imul(_,se)|0,n=n+Math.imul(x,ce)|0,i=(i=i+Math.imul(x,ue)|0)+Math.imul(S,ce)|0,o=o+Math.imul(S,ue)|0,n=n+Math.imul(b,he)|0,i=(i=i+Math.imul(b,fe)|0)+Math.imul(A,he)|0,o=o+Math.imul(A,fe)|0;var _e=(u+(n=n+Math.imul(y,pe)|0)|0)+((8191&(i=(i=i+Math.imul(y,ge)|0)+Math.imul(v,pe)|0))<<13)|0;u=((o=o+Math.imul(v,ge)|0)+(i>>>13)|0)+(_e>>>26)|0,_e&=67108863,n=Math.imul(j,Z),i=(i=Math.imul(j,Y))+Math.imul(D,Z)|0,o=Math.imul(D,Y),n=n+Math.imul(B,$)|0,i=(i=i+Math.imul(B,ee)|0)+Math.imul(F,$)|0,o=o+Math.imul(F,ee)|0,n=n+Math.imul(N,re)|0,i=(i=i+Math.imul(N,ne)|0)+Math.imul(T,re)|0,o=o+Math.imul(T,ne)|0,n=n+Math.imul(R,oe)|0,i=(i=i+Math.imul(R,se)|0)+Math.imul(O,oe)|0,o=o+Math.imul(O,se)|0,n=n+Math.imul(k,ce)|0,i=(i=i+Math.imul(k,ue)|0)+Math.imul(_,ce)|0,o=o+Math.imul(_,ue)|0,n=n+Math.imul(x,he)|0,i=(i=i+Math.imul(x,fe)|0)+Math.imul(S,he)|0,o=o+Math.imul(S,fe)|0;var Pe=(u+(n=n+Math.imul(b,pe)|0)|0)+((8191&(i=(i=i+Math.imul(b,ge)|0)+Math.imul(A,pe)|0))<<13)|0;u=((o=o+Math.imul(A,ge)|0)+(i>>>13)|0)+(Pe>>>26)|0,Pe&=67108863,n=Math.imul(j,$),i=(i=Math.imul(j,ee))+Math.imul(D,$)|0,o=Math.imul(D,ee),n=n+Math.imul(B,re)|0,i=(i=i+Math.imul(B,ne)|0)+Math.imul(F,re)|0,o=o+Math.imul(F,ne)|0,n=n+Math.imul(N,oe)|0,i=(i=i+Math.imul(N,se)|0)+Math.imul(T,oe)|0,o=o+Math.imul(T,se)|0,n=n+Math.imul(R,ce)|0,i=(i=i+Math.imul(R,ue)|0)+Math.imul(O,ce)|0,o=o+Math.imul(O,ue)|0,n=n+Math.imul(k,he)|0,i=(i=i+Math.imul(k,fe)|0)+Math.imul(_,he)|0,o=o+Math.imul(_,fe)|0;var Re=(u+(n=n+Math.imul(x,pe)|0)|0)+((8191&(i=(i=i+Math.imul(x,ge)|0)+Math.imul(S,pe)|0))<<13)|0;u=((o=o+Math.imul(S,ge)|0)+(i>>>13)|0)+(Re>>>26)|0,Re&=67108863,n=Math.imul(j,re),i=(i=Math.imul(j,ne))+Math.imul(D,re)|0,o=Math.imul(D,ne),n=n+Math.imul(B,oe)|0,i=(i=i+Math.imul(B,se)|0)+Math.imul(F,oe)|0,o=o+Math.imul(F,se)|0,n=n+Math.imul(N,ce)|0,i=(i=i+Math.imul(N,ue)|0)+Math.imul(T,ce)|0,o=o+Math.imul(T,ue)|0,n=n+Math.imul(R,he)|0,i=(i=i+Math.imul(R,fe)|0)+Math.imul(O,he)|0,o=o+Math.imul(O,fe)|0;var Oe=(u+(n=n+Math.imul(k,pe)|0)|0)+((8191&(i=(i=i+Math.imul(k,ge)|0)+Math.imul(_,pe)|0))<<13)|0;u=((o=o+Math.imul(_,ge)|0)+(i>>>13)|0)+(Oe>>>26)|0,Oe&=67108863,n=Math.imul(j,oe),i=(i=Math.imul(j,se))+Math.imul(D,oe)|0,o=Math.imul(D,se),n=n+Math.imul(B,ce)|0,i=(i=i+Math.imul(B,ue)|0)+Math.imul(F,ce)|0,o=o+Math.imul(F,ue)|0,n=n+Math.imul(N,he)|0,i=(i=i+Math.imul(N,fe)|0)+Math.imul(T,he)|0,o=o+Math.imul(T,fe)|0;var Ie=(u+(n=n+Math.imul(R,pe)|0)|0)+((8191&(i=(i=i+Math.imul(R,ge)|0)+Math.imul(O,pe)|0))<<13)|0;u=((o=o+Math.imul(O,ge)|0)+(i>>>13)|0)+(Ie>>>26)|0,Ie&=67108863,n=Math.imul(j,ce),i=(i=Math.imul(j,ue))+Math.imul(D,ce)|0,o=Math.imul(D,ue),n=n+Math.imul(B,he)|0,i=(i=i+Math.imul(B,fe)|0)+Math.imul(F,he)|0,o=o+Math.imul(F,fe)|0;var Ne=(u+(n=n+Math.imul(N,pe)|0)|0)+((8191&(i=(i=i+Math.imul(N,ge)|0)+Math.imul(T,pe)|0))<<13)|0;u=((o=o+Math.imul(T,ge)|0)+(i>>>13)|0)+(Ne>>>26)|0,Ne&=67108863,n=Math.imul(j,he),i=(i=Math.imul(j,fe))+Math.imul(D,he)|0,o=Math.imul(D,fe);var Te=(u+(n=n+Math.imul(B,pe)|0)|0)+((8191&(i=(i=i+Math.imul(B,ge)|0)+Math.imul(F,pe)|0))<<13)|0;u=((o=o+Math.imul(F,ge)|0)+(i>>>13)|0)+(Te>>>26)|0,Te&=67108863;var Me=(u+(n=Math.imul(j,pe))|0)+((8191&(i=(i=Math.imul(j,ge))+Math.imul(D,pe)|0))<<13)|0;return u=((o=Math.imul(D,ge))+(i>>>13)|0)+(Me>>>26)|0,Me&=67108863,c[0]=me,c[1]=ye,c[2]=ve,c[3]=we,c[4]=be,c[5]=Ae,c[6]=Ee,c[7]=xe,c[8]=Se,c[9]=Ce,c[10]=ke,c[11]=_e,c[12]=Pe,c[13]=Re,c[14]=Oe,c[15]=Ie,c[16]=Ne,c[17]=Te,c[18]=Me,0!==u&&(c[19]=u,r.length++),r};function y(e,t,r){r.negative=t.negative^e.negative,r.length=e.length+t.length;for(var n=0,i=0,o=0;o<r.length-1;o++){var s=i;i=0;for(var a=67108863&n,c=Math.min(o,t.length-1),u=Math.max(0,o-e.length+1);u<=c;u++){var l=o-u,h=(0|e.words[l])*(0|t.words[u]),f=67108863&h;a=67108863&(f=f+a|0),i+=(s=(s=s+(h/67108864|0)|0)+(f>>>26)|0)>>>26,s&=67108863}r.words[o]=a,n=s,s=i}return 0!==n?r.words[o]=n:r.length--,r._strip()}function v(e,t,r){return y(e,t,r)}function w(e,t){this.x=e,this.y=t}Math.imul||(m=g),i.prototype.mulTo=function(e,t){var r=this.length+e.length;return 10===this.length&&10===e.length?m(this,e,t):r<63?g(this,e,t):r<1024?y(this,e,t):v(this,e,t)},w.prototype.makeRBT=function(e){for(var t=new Array(e),r=i.prototype._countBits(e)-1,n=0;n<e;n++)t[n]=this.revBin(n,r,e);return t},w.prototype.revBin=function(e,t,r){if(0===e||e===r-1)return e;for(var n=0,i=0;i<t;i++)n|=(1&e)<<t-i-1,e>>=1;return n},w.prototype.permute=function(e,t,r,n,i,o){for(var s=0;s<o;s++)n[s]=t[e[s]],i[s]=r[e[s]]},w.prototype.transform=function(e,t,r,n,i,o){this.permute(o,e,t,r,n,i);for(var s=1;s<i;s<<=1)for(var a=s<<1,c=Math.cos(2*Math.PI/a),u=Math.sin(2*Math.PI/a),l=0;l<i;l+=a)for(var h=c,f=u,d=0;d<s;d++){var p=r[l+d],g=n[l+d],m=r[l+d+s],y=n[l+d+s],v=h*m-f*y;y=h*y+f*m,m=v,r[l+d]=p+m,n[l+d]=g+y,r[l+d+s]=p-m,n[l+d+s]=g-y,d!==a&&(v=c*h-u*f,f=c*f+u*h,h=v)}},w.prototype.guessLen13b=function(e,t){var r=1|Math.max(t,e),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},w.prototype.conjugate=function(e,t,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=e[n];e[n]=e[r-n-1],e[r-n-1]=i,i=t[n],t[n]=-t[r-n-1],t[r-n-1]=-i}},w.prototype.normalize13b=function(e,t){for(var r=0,n=0;n<t/2;n++){var i=8192*Math.round(e[2*n+1]/t)+Math.round(e[2*n]/t)+r;e[n]=67108863&i,r=i<67108864?0:i/67108864|0}return e},w.prototype.convert13b=function(e,t,n,i){for(var o=0,s=0;s<t;s++)o+=0|e[s],n[2*s]=8191&o,o>>>=13,n[2*s+1]=8191&o,o>>>=13;for(s=2*t;s<i;++s)n[s]=0;r(0===o),r(0==(-8192&o))},w.prototype.stub=function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=0;return t},w.prototype.mulp=function(e,t,r){var n=2*this.guessLen13b(e.length,t.length),i=this.makeRBT(n),o=this.stub(n),s=new Array(n),a=new Array(n),c=new Array(n),u=new Array(n),l=new Array(n),h=new Array(n),f=r.words;f.length=n,this.convert13b(e.words,e.length,s,n),this.convert13b(t.words,t.length,u,n),this.transform(s,o,a,c,n,i),this.transform(u,o,l,h,n,i);for(var d=0;d<n;d++){var p=a[d]*l[d]-c[d]*h[d];c[d]=a[d]*h[d]+c[d]*l[d],a[d]=p}return this.conjugate(a,c,n),this.transform(a,c,f,o,n,i),this.conjugate(f,o,n),this.normalize13b(f,n),r.negative=e.negative^t.negative,r.length=e.length+t.length,r._strip()},i.prototype.mul=function(e){var t=new i(null);return t.words=new Array(this.length+e.length),this.mulTo(e,t)},i.prototype.mulf=function(e){var t=new i(null);return t.words=new Array(this.length+e.length),v(this,e,t)},i.prototype.imul=function(e){return this.clone().mulTo(e,this)},i.prototype.imuln=function(e){var t=e<0;t&&(e=-e),r("number"==typeof e),r(e<67108864);for(var n=0,i=0;i<this.length;i++){var o=(0|this.words[i])*e,s=(67108863&o)+(67108863&n);n>>=26,n+=o/67108864|0,n+=s>>>26,this.words[i]=67108863&s}return 0!==n&&(this.words[i]=n,this.length++),t?this.ineg():this},i.prototype.muln=function(e){return this.clone().imuln(e)},i.prototype.sqr=function(){return this.mul(this)},i.prototype.isqr=function(){return this.imul(this.clone())},i.prototype.pow=function(e){var t=function(e){for(var t=new Array(e.bitLength()),r=0;r<t.length;r++){var n=r/26|0,i=r%26;t[r]=e.words[n]>>>i&1}return t}(e);if(0===t.length)return new i(1);for(var r=this,n=0;n<t.length&&0===t[n];n++,r=r.sqr());if(++n<t.length)for(var o=r.sqr();n<t.length;n++,o=o.sqr())0!==t[n]&&(r=r.mul(o));return r},i.prototype.iushln=function(e){r("number"==typeof e&&e>=0);var t,n=e%26,i=(e-n)/26,o=67108863>>>26-n<<26-n;if(0!==n){var s=0;for(t=0;t<this.length;t++){var a=this.words[t]&o,c=(0|this.words[t])-a<<n;this.words[t]=c|s,s=a>>>26-n}s&&(this.words[t]=s,this.length++)}if(0!==i){for(t=this.length-1;t>=0;t--)this.words[t+i]=this.words[t];for(t=0;t<i;t++)this.words[t]=0;this.length+=i}return this._strip()},i.prototype.ishln=function(e){return r(0===this.negative),this.iushln(e)},i.prototype.iushrn=function(e,t,n){var i;r("number"==typeof e&&e>=0),i=t?(t-t%26)/26:0;var o=e%26,s=Math.min((e-o)/26,this.length),a=67108863^67108863>>>o<<o,c=n;if(i-=s,i=Math.max(0,i),c){for(var u=0;u<s;u++)c.words[u]=this.words[u];c.length=s}if(0===s);else if(this.length>s)for(this.length-=s,u=0;u<this.length;u++)this.words[u]=this.words[u+s];else this.words[0]=0,this.length=1;var l=0;for(u=this.length-1;u>=0&&(0!==l||u>=i);u--){var h=0|this.words[u];this.words[u]=l<<26-o|h>>>o,l=h&a}return c&&0!==l&&(c.words[c.length++]=l),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},i.prototype.ishrn=function(e,t,n){return r(0===this.negative),this.iushrn(e,t,n)},i.prototype.shln=function(e){return this.clone().ishln(e)},i.prototype.ushln=function(e){return this.clone().iushln(e)},i.prototype.shrn=function(e){return this.clone().ishrn(e)},i.prototype.ushrn=function(e){return this.clone().iushrn(e)},i.prototype.testn=function(e){r("number"==typeof e&&e>=0);var t=e%26,n=(e-t)/26,i=1<<t;return!(this.length<=n)&&!!(this.words[n]&i)},i.prototype.imaskn=function(e){r("number"==typeof e&&e>=0);var t=e%26,n=(e-t)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=n)return this;if(0!==t&&n++,this.length=Math.min(n,this.length),0!==t){var i=67108863^67108863>>>t<<t;this.words[this.length-1]&=i}return this._strip()},i.prototype.maskn=function(e){return this.clone().imaskn(e)},i.prototype.iaddn=function(e){return r("number"==typeof e),r(e<67108864),e<0?this.isubn(-e):0!==this.negative?1===this.length&&(0|this.words[0])<=e?(this.words[0]=e-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(e),this.negative=1,this):this._iaddn(e)},i.prototype._iaddn=function(e){this.words[0]+=e;for(var t=0;t<this.length&&this.words[t]>=67108864;t++)this.words[t]-=67108864,t===this.length-1?this.words[t+1]=1:this.words[t+1]++;return this.length=Math.max(this.length,t+1),this},i.prototype.isubn=function(e){if(r("number"==typeof e),r(e<67108864),e<0)return this.iaddn(-e);if(0!==this.negative)return this.negative=0,this.iaddn(e),this.negative=1,this;if(this.words[0]-=e,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var t=0;t<this.length&&this.words[t]<0;t++)this.words[t]+=67108864,this.words[t+1]-=1;return this._strip()},i.prototype.addn=function(e){return this.clone().iaddn(e)},i.prototype.subn=function(e){return this.clone().isubn(e)},i.prototype.iabs=function(){return this.negative=0,this},i.prototype.abs=function(){return this.clone().iabs()},i.prototype._ishlnsubmul=function(e,t,n){var i,o,s=e.length+n;this._expand(s);var a=0;for(i=0;i<e.length;i++){o=(0|this.words[i+n])+a;var c=(0|e.words[i])*t;a=((o-=67108863&c)>>26)-(c/67108864|0),this.words[i+n]=67108863&o}for(;i<this.length-n;i++)a=(o=(0|this.words[i+n])+a)>>26,this.words[i+n]=67108863&o;if(0===a)return this._strip();for(r(-1===a),a=0,i=0;i<this.length;i++)a=(o=-(0|this.words[i])+a)>>26,this.words[i]=67108863&o;return this.negative=1,this._strip()},i.prototype._wordDiv=function(e,t){var r=(this.length,e.length),n=this.clone(),o=e,s=0|o.words[o.length-1];0!==(r=26-this._countBits(s))&&(o=o.ushln(r),n.iushln(r),s=0|o.words[o.length-1]);var a,c=n.length-o.length;if("mod"!==t){(a=new i(null)).length=c+1,a.words=new Array(a.length);for(var u=0;u<a.length;u++)a.words[u]=0}var l=n.clone()._ishlnsubmul(o,1,c);0===l.negative&&(n=l,a&&(a.words[c]=1));for(var h=c-1;h>=0;h--){var f=67108864*(0|n.words[o.length+h])+(0|n.words[o.length+h-1]);for(f=Math.min(f/s|0,67108863),n._ishlnsubmul(o,f,h);0!==n.negative;)f--,n.negative=0,n._ishlnsubmul(o,1,h),n.isZero()||(n.negative^=1);a&&(a.words[h]=f)}return a&&a._strip(),n._strip(),"div"!==t&&0!==r&&n.iushrn(r),{div:a||null,mod:n}},i.prototype.divmod=function(e,t,n){return r(!e.isZero()),this.isZero()?{div:new i(0),mod:new i(0)}:0!==this.negative&&0===e.negative?(a=this.neg().divmod(e,t),"mod"!==t&&(o=a.div.neg()),"div"!==t&&(s=a.mod.neg(),n&&0!==s.negative&&s.iadd(e)),{div:o,mod:s}):0===this.negative&&0!==e.negative?(a=this.divmod(e.neg(),t),"mod"!==t&&(o=a.div.neg()),{div:o,mod:a.mod}):0!=(this.negative&e.negative)?(a=this.neg().divmod(e.neg(),t),"div"!==t&&(s=a.mod.neg(),n&&0!==s.negative&&s.isub(e)),{div:a.div,mod:s}):e.length>this.length||this.cmp(e)<0?{div:new i(0),mod:this}:1===e.length?"div"===t?{div:this.divn(e.words[0]),mod:null}:"mod"===t?{div:null,mod:new i(this.modrn(e.words[0]))}:{div:this.divn(e.words[0]),mod:new i(this.modrn(e.words[0]))}:this._wordDiv(e,t);var o,s,a},i.prototype.div=function(e){return this.divmod(e,"div",!1).div},i.prototype.mod=function(e){return this.divmod(e,"mod",!1).mod},i.prototype.umod=function(e){return this.divmod(e,"mod",!0).mod},i.prototype.divRound=function(e){var t=this.divmod(e);if(t.mod.isZero())return t.div;var r=0!==t.div.negative?t.mod.isub(e):t.mod,n=e.ushrn(1),i=e.andln(1),o=r.cmp(n);return o<0||1===i&&0===o?t.div:0!==t.div.negative?t.div.isubn(1):t.div.iaddn(1)},i.prototype.modrn=function(e){var t=e<0;t&&(e=-e),r(e<=67108863);for(var n=67108864%e,i=0,o=this.length-1;o>=0;o--)i=(n*i+(0|this.words[o]))%e;return t?-i:i},i.prototype.modn=function(e){return this.modrn(e)},i.prototype.idivn=function(e){var t=e<0;t&&(e=-e),r(e<=67108863);for(var n=0,i=this.length-1;i>=0;i--){var o=(0|this.words[i])+67108864*n;this.words[i]=o/e|0,n=o%e}return this._strip(),t?this.ineg():this},i.prototype.divn=function(e){return this.clone().idivn(e)},i.prototype.egcd=function(e){r(0===e.negative),r(!e.isZero());var t=this,n=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var o=new i(1),s=new i(0),a=new i(0),c=new i(1),u=0;t.isEven()&&n.isEven();)t.iushrn(1),n.iushrn(1),++u;for(var l=n.clone(),h=t.clone();!t.isZero();){for(var f=0,d=1;0==(t.words[0]&d)&&f<26;++f,d<<=1);if(f>0)for(t.iushrn(f);f-- >0;)(o.isOdd()||s.isOdd())&&(o.iadd(l),s.isub(h)),o.iushrn(1),s.iushrn(1);for(var p=0,g=1;0==(n.words[0]&g)&&p<26;++p,g<<=1);if(p>0)for(n.iushrn(p);p-- >0;)(a.isOdd()||c.isOdd())&&(a.iadd(l),c.isub(h)),a.iushrn(1),c.iushrn(1);t.cmp(n)>=0?(t.isub(n),o.isub(a),s.isub(c)):(n.isub(t),a.isub(o),c.isub(s))}return{a:a,b:c,gcd:n.iushln(u)}},i.prototype._invmp=function(e){r(0===e.negative),r(!e.isZero());var t=this,n=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var o,s=new i(1),a=new i(0),c=n.clone();t.cmpn(1)>0&&n.cmpn(1)>0;){for(var u=0,l=1;0==(t.words[0]&l)&&u<26;++u,l<<=1);if(u>0)for(t.iushrn(u);u-- >0;)s.isOdd()&&s.iadd(c),s.iushrn(1);for(var h=0,f=1;0==(n.words[0]&f)&&h<26;++h,f<<=1);if(h>0)for(n.iushrn(h);h-- >0;)a.isOdd()&&a.iadd(c),a.iushrn(1);t.cmp(n)>=0?(t.isub(n),s.isub(a)):(n.isub(t),a.isub(s))}return(o=0===t.cmpn(1)?s:a).cmpn(0)<0&&o.iadd(e),o},i.prototype.gcd=function(e){if(this.isZero())return e.abs();if(e.isZero())return this.abs();var t=this.clone(),r=e.clone();t.negative=0,r.negative=0;for(var n=0;t.isEven()&&r.isEven();n++)t.iushrn(1),r.iushrn(1);for(;;){for(;t.isEven();)t.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=t.cmp(r);if(i<0){var o=t;t=r,r=o}else if(0===i||0===r.cmpn(1))break;t.isub(r)}return r.iushln(n)},i.prototype.invm=function(e){return this.egcd(e).a.umod(e)},i.prototype.isEven=function(){return 0==(1&this.words[0])},i.prototype.isOdd=function(){return 1==(1&this.words[0])},i.prototype.andln=function(e){return this.words[0]&e},i.prototype.bincn=function(e){r("number"==typeof e);var t=e%26,n=(e-t)/26,i=1<<t;if(this.length<=n)return this._expand(n+1),this.words[n]|=i,this;for(var o=i,s=n;0!==o&&s<this.length;s++){var a=0|this.words[s];o=(a+=o)>>>26,a&=67108863,this.words[s]=a}return 0!==o&&(this.words[s]=o,this.length++),this},i.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},i.prototype.cmpn=function(e){var t,n=e<0;if(0!==this.negative&&!n)return-1;if(0===this.negative&&n)return 1;if(this._strip(),this.length>1)t=1;else{n&&(e=-e),r(e<=67108863,"Number is too big");var i=0|this.words[0];t=i===e?0:i<e?-1:1}return 0!==this.negative?0|-t:t},i.prototype.cmp=function(e){if(0!==this.negative&&0===e.negative)return-1;if(0===this.negative&&0!==e.negative)return 1;var t=this.ucmp(e);return 0!==this.negative?0|-t:t},i.prototype.ucmp=function(e){if(this.length>e.length)return 1;if(this.length<e.length)return-1;for(var t=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|e.words[r];if(n!==i){n<i?t=-1:n>i&&(t=1);break}}return t},i.prototype.gtn=function(e){return 1===this.cmpn(e)},i.prototype.gt=function(e){return 1===this.cmp(e)},i.prototype.gten=function(e){return this.cmpn(e)>=0},i.prototype.gte=function(e){return this.cmp(e)>=0},i.prototype.ltn=function(e){return-1===this.cmpn(e)},i.prototype.lt=function(e){return-1===this.cmp(e)},i.prototype.lten=function(e){return this.cmpn(e)<=0},i.prototype.lte=function(e){return this.cmp(e)<=0},i.prototype.eqn=function(e){return 0===this.cmpn(e)},i.prototype.eq=function(e){return 0===this.cmp(e)},i.red=function(e){return new k(e)},i.prototype.toRed=function(e){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),e.convertTo(this)._forceRed(e)},i.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},i.prototype._forceRed=function(e){return this.red=e,this},i.prototype.forceRed=function(e){return r(!this.red,"Already a number in reduction context"),this._forceRed(e)},i.prototype.redAdd=function(e){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,e)},i.prototype.redIAdd=function(e){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,e)},i.prototype.redSub=function(e){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,e)},i.prototype.redISub=function(e){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,e)},i.prototype.redShl=function(e){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,e)},i.prototype.redMul=function(e){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.mul(this,e)},i.prototype.redIMul=function(e){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.imul(this,e)},i.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},i.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},i.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},i.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},i.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},i.prototype.redPow=function(e){return r(this.red&&!e.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,e)};var b={k256:null,p224:null,p192:null,p25519:null};function A(e,t){this.name=e,this.p=new i(t,16),this.n=this.p.bitLength(),this.k=new i(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function E(){A.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function x(){A.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function S(){A.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function C(){A.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function k(e){if("string"==typeof e){var t=i._prime(e);this.m=t.p,this.prime=t}else r(e.gtn(1),"modulus must be greater than 1"),this.m=e,this.prime=null}function _(e){k.call(this,e),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new i(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}A.prototype._tmp=function(){var e=new i(null);return e.words=new Array(Math.ceil(this.n/13)),e},A.prototype.ireduce=function(e){var t,r=e;do{this.split(r,this.tmp),t=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(t>this.n);var n=t<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},A.prototype.split=function(e,t){e.iushrn(this.n,0,t)},A.prototype.imulK=function(e){return e.imul(this.k)},n(E,A),E.prototype.split=function(e,t){for(var r=4194303,n=Math.min(e.length,9),i=0;i<n;i++)t.words[i]=e.words[i];if(t.length=n,e.length<=9)return e.words[0]=0,void(e.length=1);var o=e.words[9];for(t.words[t.length++]=o&r,i=10;i<e.length;i++){var s=0|e.words[i];e.words[i-10]=(s&r)<<4|o>>>22,o=s}o>>>=22,e.words[i-10]=o,0===o&&e.length>10?e.length-=10:e.length-=9},E.prototype.imulK=function(e){e.words[e.length]=0,e.words[e.length+1]=0,e.length+=2;for(var t=0,r=0;r<e.length;r++){var n=0|e.words[r];t+=977*n,e.words[r]=67108863&t,t=64*n+(t/67108864|0)}return 0===e.words[e.length-1]&&(e.length--,0===e.words[e.length-1]&&e.length--),e},n(x,A),n(S,A),n(C,A),C.prototype.imulK=function(e){for(var t=0,r=0;r<e.length;r++){var n=19*(0|e.words[r])+t,i=67108863&n;n>>>=26,e.words[r]=i,t=n}return 0!==t&&(e.words[e.length++]=t),e},i._prime=function(e){if(b[e])return b[e];var t;if("k256"===e)t=new E;else if("p224"===e)t=new x;else if("p192"===e)t=new S;else{if("p25519"!==e)throw new Error("Unknown prime "+e);t=new C}return b[e]=t,t},k.prototype._verify1=function(e){r(0===e.negative,"red works only with positives"),r(e.red,"red works only with red numbers")},k.prototype._verify2=function(e,t){r(0==(e.negative|t.negative),"red works only with positives"),r(e.red&&e.red===t.red,"red works only with red numbers")},k.prototype.imod=function(e){return this.prime?this.prime.ireduce(e)._forceRed(this):(l(e,e.umod(this.m)._forceRed(this)),e)},k.prototype.neg=function(e){return e.isZero()?e.clone():this.m.sub(e)._forceRed(this)},k.prototype.add=function(e,t){this._verify2(e,t);var r=e.add(t);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},k.prototype.iadd=function(e,t){this._verify2(e,t);var r=e.iadd(t);return r.cmp(this.m)>=0&&r.isub(this.m),r},k.prototype.sub=function(e,t){this._verify2(e,t);var r=e.sub(t);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},k.prototype.isub=function(e,t){this._verify2(e,t);var r=e.isub(t);return r.cmpn(0)<0&&r.iadd(this.m),r},k.prototype.shl=function(e,t){return this._verify1(e),this.imod(e.ushln(t))},k.prototype.imul=function(e,t){return this._verify2(e,t),this.imod(e.imul(t))},k.prototype.mul=function(e,t){return this._verify2(e,t),this.imod(e.mul(t))},k.prototype.isqr=function(e){return this.imul(e,e.clone())},k.prototype.sqr=function(e){return this.mul(e,e)},k.prototype.sqrt=function(e){if(e.isZero())return e.clone();var t=this.m.andln(3);if(r(t%2==1),3===t){var n=this.m.add(new i(1)).iushrn(2);return this.pow(e,n)}for(var o=this.m.subn(1),s=0;!o.isZero()&&0===o.andln(1);)s++,o.iushrn(1);r(!o.isZero());var a=new i(1).toRed(this),c=a.redNeg(),u=this.m.subn(1).iushrn(1),l=this.m.bitLength();for(l=new i(2*l*l).toRed(this);0!==this.pow(l,u).cmp(c);)l.redIAdd(c);for(var h=this.pow(l,o),f=this.pow(e,o.addn(1).iushrn(1)),d=this.pow(e,o),p=s;0!==d.cmp(a);){for(var g=d,m=0;0!==g.cmp(a);m++)g=g.redSqr();r(m<p);var y=this.pow(h,new i(1).iushln(p-m-1));f=f.redMul(y),h=y.redSqr(),d=d.redMul(h),p=m}return f},k.prototype.invm=function(e){var t=e._invmp(this.m);return 0!==t.negative?(t.negative=0,this.imod(t).redNeg()):this.imod(t)},k.prototype.pow=function(e,t){if(t.isZero())return new i(1).toRed(this);if(0===t.cmpn(1))return e.clone();var r=new Array(16);r[0]=new i(1).toRed(this),r[1]=e;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],e);var o=r[0],s=0,a=0,c=t.bitLength()%26;for(0===c&&(c=26),n=t.length-1;n>=0;n--){for(var u=t.words[n],l=c-1;l>=0;l--){var h=u>>l&1;o!==r[0]&&(o=this.sqr(o)),0!==h||0!==s?(s<<=1,s|=h,(4===++a||0===n&&0===l)&&(o=this.mul(o,r[s]),a=0,s=0)):a=0}c=26}return o},k.prototype.convertTo=function(e){var t=e.umod(this.m);return t===e?t.clone():t},k.prototype.convertFrom=function(e){var t=e.clone();return t.red=null,t},i.mont=function(e){return new _(e)},n(_,k),_.prototype.convertTo=function(e){return this.imod(e.ushln(this.shift))},_.prototype.convertFrom=function(e){var t=this.imod(e.mul(this.rinv));return t.red=null,t},_.prototype.imul=function(e,t){if(e.isZero()||t.isZero())return e.words[0]=0,e.length=1,e;var r=e.imul(t),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},_.prototype.mul=function(e,t){if(e.isZero()||t.isZero())return new i(0)._forceRed(this);var r=e.mul(t),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),o=r.isub(n).iushrn(this.shift),s=o;return o.cmp(this.m)>=0?s=o.isub(this.m):o.cmpn(0)<0&&(s=o.iadd(this.m)),s._forceRed(this)},_.prototype.invm=function(e){return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this)}}(e,this)})),o.register("WBjuC",(function(e,t){})),o.register("3hJ1y",(function(t,r){e(t.exports,"encode",(function(){return h})),e(t.exports,"decode",(function(){return p}));var n=o("jNZoB"),i=o("3Qchy"),s=o("3YiXP");const a=new(0,i.Logger)(s.version);function c(e){const t=[];for(;e;)t.unshift(255&e),e>>=8;return t}function u(e,t,r){let n=0;for(let i=0;i<r;i++)n=256*n+e[t+i];return n}function l(e){if(Array.isArray(e)){let t=[];if(e.forEach((function(e){t=t.concat(l(e))})),t.length<=55)return t.unshift(192+t.length),t;const r=c(t.length);return r.unshift(247+r.length),r.concat(t)}(0,n.isBytesLike)(e)||a.throwArgumentError("RLP object must be BytesLike","object",e);const t=Array.prototype.slice.call((0,n.arrayify)(e));if(1===t.length&&t[0]<=127)return t;if(t.length<=55)return t.unshift(128+t.length),t;const r=c(t.length);return r.unshift(183+r.length),r.concat(t)}function h(e){return(0,n.hexlify)(l(e))}function f(e,t,r,n){const o=[];for(;r<t+1+n;){const s=d(e,r);o.push(s.result),(r+=s.consumed)>t+1+n&&a.throwError("child data too short",i.Logger.errors.BUFFER_OVERRUN,{})}return{consumed:1+n,result:o}}function d(e,t){if(0===e.length&&a.throwError("data too short",i.Logger.errors.BUFFER_OVERRUN,{}),e[t]>=248){const r=e[t]-247;t+1+r>e.length&&a.throwError("data short segment too short",i.Logger.errors.BUFFER_OVERRUN,{});const n=u(e,t+1,r);return t+1+r+n>e.length&&a.throwError("data long segment too short",i.Logger.errors.BUFFER_OVERRUN,{}),f(e,t,t+1+r,r+n)}if(e[t]>=192){const r=e[t]-192;return t+1+r>e.length&&a.throwError("data array too short",i.Logger.errors.BUFFER_OVERRUN,{}),f(e,t,t+1,r)}if(e[t]>=184){const r=e[t]-183;t+1+r>e.length&&a.throwError("data array too short",i.Logger.errors.BUFFER_OVERRUN,{});const o=u(e,t+1,r);t+1+r+o>e.length&&a.throwError("data array too short",i.Logger.errors.BUFFER_OVERRUN,{});return{consumed:1+r+o,result:(0,n.hexlify)(e.slice(t+1+r,t+1+r+o))}}if(e[t]>=128){const r=e[t]-128;t+1+r>e.length&&a.throwError("data too short",i.Logger.errors.BUFFER_OVERRUN,{});return{consumed:1+r,result:(0,n.hexlify)(e.slice(t+1,t+1+r))}}return{consumed:1,result:(0,n.hexlify)(e[t])}}function p(e){const t=(0,n.arrayify)(e),r=d(t,0);return r.consumed!==t.length&&a.throwArgumentError("invalid rlp data","data",e),r.result}})),o.register("jNZoB",(function(t,r){e(t.exports,"isBytesLike",(function(){return u})),e(t.exports,"isHexString",(function(){return m})),e(t.exports,"isBytes",(function(){return h})),e(t.exports,"arrayify",(function(){return f})),e(t.exports,"concat",(function(){return d})),e(t.exports,"stripZeros",(function(){return p})),e(t.exports,"zeroPad",(function(){return g})),e(t.exports,"hexlify",(function(){return v})),e(t.exports,"hexDataLength",(function(){return w})),e(t.exports,"hexDataSlice",(function(){return b})),e(t.exports,"hexConcat",(function(){return A})),e(t.exports,"hexValue",(function(){return E})),e(t.exports,"hexStripZeros",(function(){return x})),e(t.exports,"hexZeroPad",(function(){return S})),e(t.exports,"splitSignature",(function(){return C})),e(t.exports,"joinSignature",(function(){return k}));var n=o("3Qchy"),i=o("7hAVt");const s=new(0,n.Logger)(i.version);function a(e){return!!e.toHexString}function c(e){return e.slice||(e.slice=function(){const t=Array.prototype.slice.call(arguments);return c(new Uint8Array(Array.prototype.slice.apply(e,t)))}),e}function u(e){return m(e)&&!(e.length%2)||h(e)}function l(e){return"number"==typeof e&&e==e&&e%1==0}function h(e){if(null==e)return!1;if(e.constructor===Uint8Array)return!0;if("string"==typeof e)return!1;if(!l(e.length)||e.length<0)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(!l(r)||r<0||r>=256)return!1}return!0}function f(e,t){if(t||(t={}),"number"==typeof e){s.checkSafeUint53(e,"invalid arrayify value");const t=[];for(;e;)t.unshift(255&e),e=parseInt(String(e/256));return 0===t.length&&t.push(0),c(new Uint8Array(t))}if(t.allowMissingPrefix&&"string"==typeof e&&"0x"!==e.substring(0,2)&&(e="0x"+e),a(e)&&(e=e.toHexString()),m(e)){let r=e.substring(2);r.length%2&&("left"===t.hexPad?r="0"+r:"right"===t.hexPad?r+="0":s.throwArgumentError("hex data is odd-length","value",e));const n=[];for(let e=0;e<r.length;e+=2)n.push(parseInt(r.substring(e,e+2),16));return c(new Uint8Array(n))}return h(e)?c(new Uint8Array(e)):s.throwArgumentError("invalid arrayify value","value",e)}function d(e){const t=e.map((e=>f(e))),r=t.reduce(((e,t)=>e+t.length),0),n=new Uint8Array(r);return t.reduce(((e,t)=>(n.set(t,e),e+t.length)),0),c(n)}function p(e){let t=f(e);if(0===t.length)return t;let r=0;for(;r<t.length&&0===t[r];)r++;return r&&(t=t.slice(r)),t}function g(e,t){(e=f(e)).length>t&&s.throwArgumentError("value out of range","value",arguments[0]);const r=new Uint8Array(t);return r.set(e,t-e.length),c(r)}function m(e,t){return!("string"!=typeof e||!e.match(/^0x[0-9A-Fa-f]*$/))&&(!t||e.length===2+2*t)}const y="0123456789abcdef";function v(e,t){if(t||(t={}),"number"==typeof e){s.checkSafeUint53(e,"invalid hexlify value");let t="";for(;e;)t=y[15&e]+t,e=Math.floor(e/16);return t.length?(t.length%2&&(t="0"+t),"0x"+t):"0x00"}if("bigint"==typeof e)return(e=e.toString(16)).length%2?"0x0"+e:"0x"+e;if(t.allowMissingPrefix&&"string"==typeof e&&"0x"!==e.substring(0,2)&&(e="0x"+e),a(e))return e.toHexString();if(m(e))return e.length%2&&("left"===t.hexPad?e="0x0"+e.substring(2):"right"===t.hexPad?e+="0":s.throwArgumentError("hex data is odd-length","value",e)),e.toLowerCase();if(h(e)){let t="0x";for(let r=0;r<e.length;r++){let n=e[r];t+=y[(240&n)>>4]+y[15&n]}return t}return s.throwArgumentError("invalid hexlify value","value",e)}function w(e){if("string"!=typeof e)e=v(e);else if(!m(e)||e.length%2)return null;return(e.length-2)/2}function b(e,t,r){return"string"!=typeof e?e=v(e):(!m(e)||e.length%2)&&s.throwArgumentError("invalid hexData","value",e),t=2+2*t,null!=r?"0x"+e.substring(t,2+2*r):"0x"+e.substring(t)}function A(e){let t="0x";return e.forEach((e=>{t+=v(e).substring(2)})),t}function E(e){const t=x(v(e,{hexPad:"left"}));return"0x"===t?"0x0":t}function x(e){"string"!=typeof e&&(e=v(e)),m(e)||s.throwArgumentError("invalid hex string","value",e),e=e.substring(2);let t=0;for(;t<e.length&&"0"===e[t];)t++;return"0x"+e.substring(t)}function S(e,t){for("string"!=typeof e?e=v(e):m(e)||s.throwArgumentError("invalid hex string","value",e),e.length>2*t+2&&s.throwArgumentError("value out of range","value",arguments[1]);e.length<2*t+2;)e="0x0"+e.substring(2);return e}function C(e){const t={r:"0x",s:"0x",_vs:"0x",recoveryParam:0,v:0,yParityAndS:"0x",compact:"0x"};if(u(e)){let r=f(e);64===r.length?(t.v=27+(r[32]>>7),r[32]&=127,t.r=v(r.slice(0,32)),t.s=v(r.slice(32,64))):65===r.length?(t.r=v(r.slice(0,32)),t.s=v(r.slice(32,64)),t.v=r[64]):s.throwArgumentError("invalid signature string","signature",e),t.v<27&&(0===t.v||1===t.v?t.v+=27:s.throwArgumentError("signature invalid v byte","signature",e)),t.recoveryParam=1-t.v%2,t.recoveryParam&&(r[32]|=128),t._vs=v(r.slice(32,64))}else{if(t.r=e.r,t.s=e.s,t.v=e.v,t.recoveryParam=e.recoveryParam,t._vs=e._vs,null!=t._vs){const r=g(f(t._vs),32);t._vs=v(r);const n=r[0]>=128?1:0;null==t.recoveryParam?t.recoveryParam=n:t.recoveryParam!==n&&s.throwArgumentError("signature recoveryParam mismatch _vs","signature",e),r[0]&=127;const i=v(r);null==t.s?t.s=i:t.s!==i&&s.throwArgumentError("signature v mismatch _vs","signature",e)}if(null==t.recoveryParam)null==t.v?s.throwArgumentError("signature missing v and recoveryParam","signature",e):0===t.v||1===t.v?t.recoveryParam=t.v:t.recoveryParam=1-t.v%2;else if(null==t.v)t.v=27+t.recoveryParam;else{const r=0===t.v||1===t.v?t.v:1-t.v%2;t.recoveryParam!==r&&s.throwArgumentError("signature recoveryParam mismatch v","signature",e)}null!=t.r&&m(t.r)?t.r=S(t.r,32):s.throwArgumentError("signature missing or invalid r","signature",e),null!=t.s&&m(t.s)?t.s=S(t.s,32):s.throwArgumentError("signature missing or invalid s","signature",e);const r=f(t.s);r[0]>=128&&s.throwArgumentError("signature s out of range","signature",e),t.recoveryParam&&(r[0]|=128);const n=v(r);t._vs&&(m(t._vs)||s.throwArgumentError("signature invalid _vs","signature",e),t._vs=S(t._vs,32)),null==t._vs?t._vs=n:t._vs!==n&&s.throwArgumentError("signature _vs mismatch v and s","signature",e)}return t.yParityAndS=t._vs,t.compact=t.r+t.yParityAndS.substring(2),t}function k(e){return v(d([(e=C(e)).r,e.s,e.recoveryParam?"0x1c":"0x1b"]))}})),o.register("3Qchy",(function(t,r){e(t.exports,"ErrorCode",(function(){return d})),e(t.exports,"Logger",(function(){return m}));var n=o("lnmmq");let i=!1,s=!1;const a={debug:1,default:2,info:2,warning:3,error:4,off:5};let c=a.default,u=null;const l=function(){try{const e=[];if(["NFD","NFC","NFKD","NFKC"].forEach((t=>{try{if("test"!=="test".normalize(t))throw new Error("bad normalize")}catch(r){e.push(t)}})),e.length)throw new Error("missing "+e.join(", "));if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken implementation")}catch(e){return e.message}return null}();var h,f,d,p;(f=h||(h={})).DEBUG="DEBUG",f.INFO="INFO",f.WARNING="WARNING",f.ERROR="ERROR",f.OFF="OFF",(p=d||(d={})).UNKNOWN_ERROR="UNKNOWN_ERROR",p.NOT_IMPLEMENTED="NOT_IMPLEMENTED",p.UNSUPPORTED_OPERATION="UNSUPPORTED_OPERATION",p.NETWORK_ERROR="NETWORK_ERROR",p.SERVER_ERROR="SERVER_ERROR",p.TIMEOUT="TIMEOUT",p.BUFFER_OVERRUN="BUFFER_OVERRUN",p.NUMERIC_FAULT="NUMERIC_FAULT",p.MISSING_NEW="MISSING_NEW",p.INVALID_ARGUMENT="INVALID_ARGUMENT",p.MISSING_ARGUMENT="MISSING_ARGUMENT",p.UNEXPECTED_ARGUMENT="UNEXPECTED_ARGUMENT",p.CALL_EXCEPTION="CALL_EXCEPTION",p.INSUFFICIENT_FUNDS="INSUFFICIENT_FUNDS",p.NONCE_EXPIRED="NONCE_EXPIRED",p.REPLACEMENT_UNDERPRICED="REPLACEMENT_UNDERPRICED",p.UNPREDICTABLE_GAS_LIMIT="UNPREDICTABLE_GAS_LIMIT",p.TRANSACTION_REPLACED="TRANSACTION_REPLACED",p.ACTION_REJECTED="ACTION_REJECTED";const g="0123456789abcdef";class m{_log(e,t){const r=e.toLowerCase();null==a[r]&&this.throwArgumentError("invalid log level name","logLevel",e),c>a[r]||console.log.apply(console,t)}debug(...e){this._log(m.levels.DEBUG,e)}info(...e){this._log(m.levels.INFO,e)}warn(...e){this._log(m.levels.WARNING,e)}makeError(e,t,r){if(s)return this.makeError("censored error",t,{});t||(t=m.errors.UNKNOWN_ERROR),r||(r={});const n=[];Object.keys(r).forEach((e=>{const t=r[e];try{if(t instanceof Uint8Array){let r="";for(let e=0;e<t.length;e++)r+=g[t[e]>>4],r+=g[15&t[e]];n.push(e+"=Uint8Array(0x"+r+")")}else n.push(e+"="+JSON.stringify(t))}catch(t){n.push(e+"="+JSON.stringify(r[e].toString()))}})),n.push(`code=${t}`),n.push(`version=${this.version}`);const i=e;let o="";switch(t){case d.NUMERIC_FAULT:{o="NUMERIC_FAULT";const t=e;switch(t){case"overflow":case"underflow":case"division-by-zero":o+="-"+t;break;case"negative-power":case"negative-width":o+="-unsupported";break;case"unbound-bitwise-result":o+="-unbound-result"}break}case d.CALL_EXCEPTION:case d.INSUFFICIENT_FUNDS:case d.MISSING_NEW:case d.NONCE_EXPIRED:case d.REPLACEMENT_UNDERPRICED:case d.TRANSACTION_REPLACED:case d.UNPREDICTABLE_GAS_LIMIT:o=t}o&&(e+=" [ See: https://links.ethers.org/v5-errors-"+o+" ]"),n.length&&(e+=" ("+n.join(", ")+")");const a=new Error(e);return a.reason=i,a.code=t,Object.keys(r).forEach((function(e){a[e]=r[e]})),a}throwError(e,t,r){throw this.makeError(e,t,r)}throwArgumentError(e,t,r){return this.throwError(e,m.errors.INVALID_ARGUMENT,{argument:t,value:r})}assert(e,t,r,n){e||this.throwError(t,r,n)}assertArgument(e,t,r,n){e||this.throwArgumentError(t,r,n)}checkNormalize(e){null==e&&(e="platform missing String.prototype.normalize"),l&&this.throwError("platform missing String.prototype.normalize",m.errors.UNSUPPORTED_OPERATION,{operation:"String.prototype.normalize",form:l})}checkSafeUint53(e,t){"number"==typeof e&&(null==t&&(t="value not safe"),(e<0||e>=9007199254740991)&&this.throwError(t,m.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"out-of-safe-range",value:e}),e%1&&this.throwError(t,m.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"non-integer",value:e}))}checkArgumentCount(e,t,r){r=r?": "+r:"",e<t&&this.throwError("missing argument"+r,m.errors.MISSING_ARGUMENT,{count:e,expectedCount:t}),e>t&&this.throwError("too many arguments"+r,m.errors.UNEXPECTED_ARGUMENT,{count:e,expectedCount:t})}checkNew(e,t){e!==Object&&null!=e||this.throwError("missing new",m.errors.MISSING_NEW,{name:t.name})}checkAbstract(e,t){e===t?this.throwError("cannot instantiate abstract class "+JSON.stringify(t.name)+" directly; use a sub-class",m.errors.UNSUPPORTED_OPERATION,{name:e.name,operation:"new"}):e!==Object&&null!=e||this.throwError("missing new",m.errors.MISSING_NEW,{name:t.name})}static globalLogger(){return u||(u=new m(n.version)),u}static setCensorship(e,t){if(!e&&t&&this.globalLogger().throwError("cannot permanently disable censorship",m.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"}),i){if(!e)return;this.globalLogger().throwError("error censorship permanent",m.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"})}s=!!e,i=!!t}static setLogLevel(e){const t=a[e.toLowerCase()];null!=t?c=t:m.globalLogger().warn("invalid log level - "+e)}static from(e){return new m(e)}constructor(e){Object.defineProperty(this,"version",{enumerable:!0,value:e,writable:!1})}}m.errors=d,m.levels=h})),o.register("lnmmq",(function(t,r){e(t.exports,"version",(function(){return n}));const n="logger/5.7.0"})),o.register("7hAVt",(function(t,r){e(t.exports,"version",(function(){return n}));const n="bytes/5.7.0"})),o.register("3YiXP",(function(t,r){e(t.exports,"version",(function(){return n}));const n="rlp/5.7.0"})),o.register("7WFd0",(function(t,r){e(t.exports,"decode",(function(){return o("8Fe00").decode})),e(t.exports,"encode",(function(){return o("8Fe00").encode}));o("8Fe00")})),o.register("8Fe00",(function(t,r){e(t.exports,"decode",(function(){return i})),e(t.exports,"encode",(function(){return s}));var n=o("jNZoB");function i(e){e=atob(e);const t=[];for(let r=0;r<e.length;r++)t.push(e.charCodeAt(r));return(0,n.arrayify)(t)}function s(e){e=(0,n.arrayify)(e);let t="";for(let r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return btoa(t)}})),o.register("7Fm4Z",(function(t,r){var n,i,s,a,c,u,l,h,f,d,p,g,m,y,v,w,b,A,E,x,S,C,k,_,P,R;e(t.exports,"inherits",(function(){return n}),(function(e){return n=e})),e(t.exports,"toArray",(function(){return i}),(function(e){return i=e})),e(t.exports,"toHex",(function(){return s}),(function(e){return s=e})),e(t.exports,"htonl",(function(){return a}),(function(e){return a=e})),e(t.exports,"toHex32",(function(){return c}),(function(e){return c=e})),e(t.exports,"zero2",(function(){return u}),(function(e){return u=e})),e(t.exports,"zero8",(function(){return l}),(function(e){return l=e})),e(t.exports,"join32",(function(){return h}),(function(e){return h=e})),e(t.exports,"split32",(function(){return f}),(function(e){return f=e})),e(t.exports,"rotr32",(function(){return d}),(function(e){return d=e})),e(t.exports,"rotl32",(function(){return p}),(function(e){return p=e})),e(t.exports,"sum32",(function(){return g}),(function(e){return g=e})),e(t.exports,"sum32_3",(function(){return m}),(function(e){return m=e})),e(t.exports,"sum32_4",(function(){return y}),(function(e){return y=e})),e(t.exports,"sum32_5",(function(){return v}),(function(e){return v=e})),e(t.exports,"sum64",(function(){return w}),(function(e){return w=e})),e(t.exports,"sum64_hi",(function(){return b}),(function(e){return b=e})),e(t.exports,"sum64_lo",(function(){return A}),(function(e){return A=e})),e(t.exports,"sum64_4_hi",(function(){return E}),(function(e){return E=e})),e(t.exports,"sum64_4_lo",(function(){return x}),(function(e){return x=e})),e(t.exports,"sum64_5_hi",(function(){return S}),(function(e){return S=e})),e(t.exports,"sum64_5_lo",(function(){return C}),(function(e){return C=e})),e(t.exports,"rotr64_hi",(function(){return k}),(function(e){return k=e})),e(t.exports,"rotr64_lo",(function(){return _}),(function(e){return _=e})),e(t.exports,"shr64_hi",(function(){return P}),(function(e){return P=e})),e(t.exports,"shr64_lo",(function(){return R}),(function(e){return R=e}));var O=o("8Ybo3"),I=o("2iAzR");function N(e,t){return 55296==(64512&e.charCodeAt(t))&&(!(t<0||t+1>=e.length)&&56320==(64512&e.charCodeAt(t+1)))}function T(e){return(e>>>24|e>>>8&65280|e<<8&16711680|(255&e)<<24)>>>0}function M(e){return 1===e.length?"0"+e:e}function B(e){return 7===e.length?"0"+e:6===e.length?"00"+e:5===e.length?"000"+e:4===e.length?"0000"+e:3===e.length?"00000"+e:2===e.length?"000000"+e:1===e.length?"0000000"+e:e}n=I,i=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"==typeof e)if(t){if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),i=0;i<e.length;i+=2)r.push(parseInt(e[i]+e[i+1],16))}else for(var n=0,i=0;i<e.length;i++){var o=e.charCodeAt(i);o<128?r[n++]=o:o<2048?(r[n++]=o>>6|192,r[n++]=63&o|128):N(e,i)?(o=65536+((1023&o)<<10)+(1023&e.charCodeAt(++i)),r[n++]=o>>18|240,r[n++]=o>>12&63|128,r[n++]=o>>6&63|128,r[n++]=63&o|128):(r[n++]=o>>12|224,r[n++]=o>>6&63|128,r[n++]=63&o|128)}else for(i=0;i<e.length;i++)r[i]=0|e[i];return r},s=function(e){for(var t="",r=0;r<e.length;r++)t+=M(e[r].toString(16));return t},a=T,c=function(e,t){for(var r="",n=0;n<e.length;n++){var i=e[n];"little"===t&&(i=T(i)),r+=B(i.toString(16))}return r},u=M,l=B,h=function(e,t,r,n){var i=r-t;O(i%4==0);for(var o=new Array(i/4),s=0,a=t;s<o.length;s++,a+=4){var c;c="big"===n?e[a]<<24|e[a+1]<<16|e[a+2]<<8|e[a+3]:e[a+3]<<24|e[a+2]<<16|e[a+1]<<8|e[a],o[s]=c>>>0}return o},f=function(e,t){for(var r=new Array(4*e.length),n=0,i=0;n<e.length;n++,i+=4){var o=e[n];"big"===t?(r[i]=o>>>24,r[i+1]=o>>>16&255,r[i+2]=o>>>8&255,r[i+3]=255&o):(r[i+3]=o>>>24,r[i+2]=o>>>16&255,r[i+1]=o>>>8&255,r[i]=255&o)}return r},d=function(e,t){return e>>>t|e<<32-t},p=function(e,t){return e<<t|e>>>32-t},g=function(e,t){return e+t>>>0},m=function(e,t,r){return e+t+r>>>0},y=function(e,t,r,n){return e+t+r+n>>>0},v=function(e,t,r,n,i){return e+t+r+n+i>>>0},w=function(e,t,r,n){var i=e[t],o=n+e[t+1]>>>0,s=(o<n?1:0)+r+i;e[t]=s>>>0,e[t+1]=o},b=function(e,t,r,n){return(t+n>>>0<t?1:0)+e+r>>>0},A=function(e,t,r,n){return t+n>>>0},E=function(e,t,r,n,i,o,s,a){var c=0,u=t;return c+=(u=u+n>>>0)<t?1:0,c+=(u=u+o>>>0)<o?1:0,e+r+i+s+(c+=(u=u+a>>>0)<a?1:0)>>>0},x=function(e,t,r,n,i,o,s,a){return t+n+o+a>>>0},S=function(e,t,r,n,i,o,s,a,c,u){var l=0,h=t;return l+=(h=h+n>>>0)<t?1:0,l+=(h=h+o>>>0)<o?1:0,l+=(h=h+a>>>0)<a?1:0,e+r+i+s+c+(l+=(h=h+u>>>0)<u?1:0)>>>0},C=function(e,t,r,n,i,o,s,a,c,u){return t+n+o+a+u>>>0},k=function(e,t,r){return(t<<32-r|e>>>r)>>>0},_=function(e,t,r){return(e<<32-r|t>>>r)>>>0},P=function(e,t,r){return e>>>r},R=function(e,t,r){return(e<<32-r|t>>>r)>>>0}})),o.register("8Ybo3",(function(e,t){function r(e,t){if(!e)throw new Error(t||"Assertion failed")}e.exports=r,r.equal=function(e,t,r){if(e!=t)throw new Error(r||"Assertion failed: "+e+" != "+t)}})),o.register("2iAzR",(function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}})),o.register("36o5p",(function(t,r){var n;e(t.exports,"BlockHash",(function(){return n}),(function(e){return n=e}));var i=o("7Fm4Z"),s=o("8Ybo3");function a(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}n=a,a.prototype.update=function(e,t){if(e=i.toArray(e,t),this.pending?this.pending=this.pending.concat(e):this.pending=e,this.pendingTotal+=e.length,this.pending.length>=this._delta8){var r=(e=this.pending).length%this._delta8;this.pending=e.slice(e.length-r,e.length),0===this.pending.length&&(this.pending=null),e=i.join32(e,0,e.length-r,this.endian);for(var n=0;n<e.length;n+=this._delta32)this._update(e,n,n+this._delta32)}return this},a.prototype.digest=function(e){return this.update(this._pad()),s(null===this.pending),this._digest(e)},a.prototype._pad=function(){var e=this.pendingTotal,t=this._delta8,r=t-(e+this.padLength)%t,n=new Array(r+this.padLength);n[0]=128;for(var i=1;i<r;i++)n[i]=0;if(e<<=3,"big"===this.endian){for(var o=8;o<this.padLength;o++)n[i++]=0;n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=e>>>24&255,n[i++]=e>>>16&255,n[i++]=e>>>8&255,n[i++]=255&e}else for(n[i++]=255&e,n[i++]=e>>>8&255,n[i++]=e>>>16&255,n[i++]=e>>>24&255,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,o=8;o<this.padLength;o++)n[i++]=0;return n}})),o.register("5aMqG",(function(t,r){var n,i,s,a,c;e(t.exports,"sha1",(function(){return n}),(function(e){return n=e})),e(t.exports,"sha224",(function(){return i}),(function(e){return i=e})),e(t.exports,"sha256",(function(){return s}),(function(e){return s=e})),e(t.exports,"sha384",(function(){return a}),(function(e){return a=e})),e(t.exports,"sha512",(function(){return c}),(function(e){return c=e})),n=o("kmlEt"),i=o("60teA"),s=o("fpRcZ"),a=o("dDdv5"),c=o("j0Kux")})),o.register("kmlEt",(function(e,t){var r=o("7Fm4Z"),n=o("36o5p"),i=o("JKjAa"),s=r.rotl32,a=r.sum32,c=r.sum32_5,u=i.ft_1,l=n.BlockHash,h=[1518500249,1859775393,2400959708,3395469782];function f(){if(!(this instanceof f))return new f;l.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}r.inherits(f,l),e.exports=f,f.blockSize=512,f.outSize=160,f.hmacStrength=80,f.padLength=64,f.prototype._update=function(e,t){for(var r=this.W,n=0;n<16;n++)r[n]=e[t+n];for(;n<r.length;n++)r[n]=s(r[n-3]^r[n-8]^r[n-14]^r[n-16],1);var i=this.h[0],o=this.h[1],l=this.h[2],f=this.h[3],d=this.h[4];for(n=0;n<r.length;n++){var p=~~(n/20),g=c(s(i,5),u(p,o,l,f),d,r[n],h[p]);d=f,f=l,l=s(o,30),o=i,i=g}this.h[0]=a(this.h[0],i),this.h[1]=a(this.h[1],o),this.h[2]=a(this.h[2],l),this.h[3]=a(this.h[3],f),this.h[4]=a(this.h[4],d)},f.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h,"big"):r.split32(this.h,"big")}})),o.register("JKjAa",(function(t,r){var n,i,s,a,c,u,l;e(t.exports,"ft_1",(function(){return n}),(function(e){return n=e})),e(t.exports,"ch32",(function(){return i}),(function(e){return i=e})),e(t.exports,"maj32",(function(){return s}),(function(e){return s=e})),e(t.exports,"s0_256",(function(){return a}),(function(e){return a=e})),e(t.exports,"s1_256",(function(){return c}),(function(e){return c=e})),e(t.exports,"g0_256",(function(){return u}),(function(e){return u=e})),e(t.exports,"g1_256",(function(){return l}),(function(e){return l=e}));var h=o("7Fm4Z").rotr32;function f(e,t,r){return e&t^~e&r}function d(e,t,r){return e&t^e&r^t&r}function p(e,t,r){return e^t^r}n=function(e,t,r,n){return 0===e?f(t,r,n):1===e||3===e?p(t,r,n):2===e?d(t,r,n):void 0},i=f,s=d,a=function(e){return h(e,2)^h(e,13)^h(e,22)},c=function(e){return h(e,6)^h(e,11)^h(e,25)},u=function(e){return h(e,7)^h(e,18)^e>>>3},l=function(e){return h(e,17)^h(e,19)^e>>>10}})),o.register("60teA",(function(e,t){var r=o("7Fm4Z"),n=o("fpRcZ");function i(){if(!(this instanceof i))return new i;n.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}r.inherits(i,n),e.exports=i,i.blockSize=512,i.outSize=224,i.hmacStrength=192,i.padLength=64,i.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h.slice(0,7),"big"):r.split32(this.h.slice(0,7),"big")}})),o.register("fpRcZ",(function(e,t){var r=o("7Fm4Z"),n=o("36o5p"),i=o("JKjAa"),s=o("8Ybo3"),a=r.sum32,c=r.sum32_4,u=r.sum32_5,l=i.ch32,h=i.maj32,f=i.s0_256,d=i.s1_256,p=i.g0_256,g=i.g1_256,m=n.BlockHash,y=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function v(){if(!(this instanceof v))return new v;m.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=y,this.W=new Array(64)}r.inherits(v,m),e.exports=v,v.blockSize=512,v.outSize=256,v.hmacStrength=192,v.padLength=64,v.prototype._update=function(e,t){for(var r=this.W,n=0;n<16;n++)r[n]=e[t+n];for(;n<r.length;n++)r[n]=c(g(r[n-2]),r[n-7],p(r[n-15]),r[n-16]);var i=this.h[0],o=this.h[1],m=this.h[2],y=this.h[3],v=this.h[4],w=this.h[5],b=this.h[6],A=this.h[7];for(s(this.k.length===r.length),n=0;n<r.length;n++){var E=u(A,d(v),l(v,w,b),this.k[n],r[n]),x=a(f(i),h(i,o,m));A=b,b=w,w=v,v=a(y,E),y=m,m=o,o=i,i=a(E,x)}this.h[0]=a(this.h[0],i),this.h[1]=a(this.h[1],o),this.h[2]=a(this.h[2],m),this.h[3]=a(this.h[3],y),this.h[4]=a(this.h[4],v),this.h[5]=a(this.h[5],w),this.h[6]=a(this.h[6],b),this.h[7]=a(this.h[7],A)},v.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h,"big"):r.split32(this.h,"big")}})),o.register("dDdv5",(function(e,t){var r=o("7Fm4Z"),n=o("j0Kux");function i(){if(!(this instanceof i))return new i;n.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}r.inherits(i,n),e.exports=i,i.blockSize=1024,i.outSize=384,i.hmacStrength=192,i.padLength=128,i.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h.slice(0,12),"big"):r.split32(this.h.slice(0,12),"big")}})),o.register("j0Kux",(function(e,t){var r=o("7Fm4Z"),n=o("36o5p"),i=o("8Ybo3"),s=r.rotr64_hi,a=r.rotr64_lo,c=r.shr64_hi,u=r.shr64_lo,l=r.sum64,h=r.sum64_hi,f=r.sum64_lo,d=r.sum64_4_hi,p=r.sum64_4_lo,g=r.sum64_5_hi,m=r.sum64_5_lo,y=n.BlockHash,v=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function w(){if(!(this instanceof w))return new w;y.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=v,this.W=new Array(160)}function b(e,t,r,n,i){var o=e&r^~e&i;return o<0&&(o+=4294967296),o}function A(e,t,r,n,i,o){var s=t&n^~t&o;return s<0&&(s+=4294967296),s}function E(e,t,r,n,i){var o=e&r^e&i^r&i;return o<0&&(o+=4294967296),o}function x(e,t,r,n,i,o){var s=t&n^t&o^n&o;return s<0&&(s+=4294967296),s}function S(e,t){var r=s(e,t,28)^s(t,e,2)^s(t,e,7);return r<0&&(r+=4294967296),r}function C(e,t){var r=a(e,t,28)^a(t,e,2)^a(t,e,7);return r<0&&(r+=4294967296),r}function k(e,t){var r=s(e,t,14)^s(e,t,18)^s(t,e,9);return r<0&&(r+=4294967296),r}function _(e,t){var r=a(e,t,14)^a(e,t,18)^a(t,e,9);return r<0&&(r+=4294967296),r}function P(e,t){var r=s(e,t,1)^s(e,t,8)^c(e,t,7);return r<0&&(r+=4294967296),r}function R(e,t){var r=a(e,t,1)^a(e,t,8)^u(e,t,7);return r<0&&(r+=4294967296),r}function O(e,t){var r=s(e,t,19)^s(t,e,29)^c(e,t,6);return r<0&&(r+=4294967296),r}function I(e,t){var r=a(e,t,19)^a(t,e,29)^u(e,t,6);return r<0&&(r+=4294967296),r}r.inherits(w,y),e.exports=w,w.blockSize=1024,w.outSize=512,w.hmacStrength=192,w.padLength=128,w.prototype._prepareBlock=function(e,t){for(var r=this.W,n=0;n<32;n++)r[n]=e[t+n];for(;n<r.length;n+=2){var i=O(r[n-4],r[n-3]),o=I(r[n-4],r[n-3]),s=r[n-14],a=r[n-13],c=P(r[n-30],r[n-29]),u=R(r[n-30],r[n-29]),l=r[n-32],h=r[n-31];r[n]=d(i,o,s,a,c,u,l,h),r[n+1]=p(i,o,s,a,c,u,l,h)}},w.prototype._update=function(e,t){this._prepareBlock(e,t);var r=this.W,n=this.h[0],o=this.h[1],s=this.h[2],a=this.h[3],c=this.h[4],u=this.h[5],d=this.h[6],p=this.h[7],y=this.h[8],v=this.h[9],w=this.h[10],P=this.h[11],R=this.h[12],O=this.h[13],I=this.h[14],N=this.h[15];i(this.k.length===r.length);for(var T=0;T<r.length;T+=2){var M=I,B=N,F=k(y,v),L=_(y,v),j=b(y,v,w,P,R),D=A(y,v,w,P,R,O),U=this.k[T],z=this.k[T+1],q=r[T],K=r[T+1],G=g(M,B,F,L,j,D,U,z,q,K),W=m(M,B,F,L,j,D,U,z,q,K);M=S(n,o),B=C(n,o),F=E(n,o,s,a,c),L=x(n,o,s,a,c,u);var H=h(M,B,F,L),J=f(M,B,F,L);I=R,N=O,R=w,O=P,w=y,P=v,y=h(d,p,G,W),v=f(p,p,G,W),d=c,p=u,c=s,u=a,s=n,a=o,n=h(G,W,H,J),o=f(G,W,H,J)}l(this.h,0,n,o),l(this.h,2,s,a),l(this.h,4,c,u),l(this.h,6,d,p),l(this.h,8,y,v),l(this.h,10,w,P),l(this.h,12,R,O),l(this.h,14,I,N)},w.prototype._digest=function(e){return"hex"===e?r.toHex32(this.h,"big"):r.split32(this.h,"big")}})),o.register("ba7vz",(function(t,r){var n;e(t.exports,"ripemd160",(function(){return n}),(function(e){return n=e}));var i=o("7Fm4Z"),s=o("36o5p"),a=i.rotl32,c=i.sum32,u=i.sum32_3,l=i.sum32_4,h=s.BlockHash;function f(){if(!(this instanceof f))return new f;h.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function d(e,t,r,n){return e<=15?t^r^n:e<=31?t&r|~t&n:e<=47?(t|~r)^n:e<=63?t&n|r&~n:t^(r|~n)}function p(e){return e<=15?0:e<=31?1518500249:e<=47?1859775393:e<=63?2400959708:2840853838}function g(e){return e<=15?1352829926:e<=31?1548603684:e<=47?1836072691:e<=63?2053994217:0}i.inherits(f,h),n=f,f.blockSize=512,f.outSize=160,f.hmacStrength=192,f.padLength=64,f.prototype._update=function(e,t){for(var r=this.h[0],n=this.h[1],i=this.h[2],o=this.h[3],s=this.h[4],h=r,f=n,b=i,A=o,E=s,x=0;x<80;x++){var S=c(a(l(r,d(x,n,i,o),e[m[x]+t],p(x)),v[x]),s);r=s,s=o,o=a(i,10),i=n,n=S,S=c(a(l(h,d(79-x,f,b,A),e[y[x]+t],g(x)),w[x]),E),h=E,E=A,A=a(b,10),b=f,f=S}S=u(this.h[1],i,A),this.h[1]=u(this.h[2],o,E),this.h[2]=u(this.h[3],s,h),this.h[3]=u(this.h[4],r,f),this.h[4]=u(this.h[0],n,b),this.h[0]=S},f.prototype._digest=function(e){return"hex"===e?i.toHex32(this.h,"little"):i.split32(this.h,"little")};var m=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],y=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],v=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],w=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]})),o.register("jdCxY",(function(e,t){var r=o("7Fm4Z"),n=o("8Ybo3");function i(e,t,n){if(!(this instanceof i))return new i(e,t,n);this.Hash=e,this.blockSize=e.blockSize/8,this.outSize=e.outSize/8,this.inner=null,this.outer=null,this._init(r.toArray(t,n))}e.exports=i,i.prototype._init=function(e){e.length>this.blockSize&&(e=(new this.Hash).update(e).digest()),n(e.length<=this.blockSize);for(var t=e.length;t<this.blockSize;t++)e.push(0);for(t=0;t<e.length;t++)e[t]^=54;for(this.inner=(new this.Hash).update(e),t=0;t<e.length;t++)e[t]^=106;this.outer=(new this.Hash).update(e)},i.prototype.update=function(e,t){return this.inner.update(e,t),this},i.prototype.digest=function(e){return this.outer.update(this.inner.digest()),this.outer.digest(e)}})),o.register("fG8HP",(function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.STANDARD_ERROR_MAP=e.exports.SERVER_ERROR_CODE_RANGE=e.exports.RESERVED_ERROR_CODES=e.exports.SERVER_ERROR=e.exports.INTERNAL_ERROR=e.exports.INVALID_PARAMS=e.exports.METHOD_NOT_FOUND=e.exports.INVALID_REQUEST=e.exports.PARSE_ERROR=void 0,e.exports.PARSE_ERROR="PARSE_ERROR",e.exports.INVALID_REQUEST="INVALID_REQUEST",e.exports.METHOD_NOT_FOUND="METHOD_NOT_FOUND",e.exports.INVALID_PARAMS="INVALID_PARAMS",e.exports.INTERNAL_ERROR="INTERNAL_ERROR",e.exports.SERVER_ERROR="SERVER_ERROR",e.exports.RESERVED_ERROR_CODES=[-32700,-32600,-32601,-32602,-32603],e.exports.SERVER_ERROR_CODE_RANGE=[-32e3,-32099],e.exports.STANDARD_ERROR_MAP={[e.exports.PARSE_ERROR]:{code:-32700,message:"Parse error"},[e.exports.INVALID_REQUEST]:{code:-32600,message:"Invalid Request"},[e.exports.METHOD_NOT_FOUND]:{code:-32601,message:"Method not found"},[e.exports.INVALID_PARAMS]:{code:-32602,message:"Invalid params"},[e.exports.INTERNAL_ERROR]:{code:-32603,message:"Internal error"},[e.exports.SERVER_ERROR]:{code:-32e3,message:"Server error"}}})),o.register("io3EQ",(function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.validateJsonRpcError=e.exports.getErrorByCode=e.exports.getError=e.exports.isValidErrorCode=e.exports.isReservedErrorCode=e.exports.isServerErrorCode=void 0;var r=o("fG8HP");function n(e){return r.RESERVED_ERROR_CODES.includes(e)}function i(e){return"number"==typeof e}function s(e){const t=Object.values(r.STANDARD_ERROR_MAP).find((t=>t.code===e));return t||r.STANDARD_ERROR_MAP[r.INTERNAL_ERROR]}e.exports.isServerErrorCode=function(e){return e<=r.SERVER_ERROR_CODE_RANGE[0]&&e>=r.SERVER_ERROR_CODE_RANGE[1]},e.exports.isReservedErrorCode=n,e.exports.isValidErrorCode=i,e.exports.getError=function(e){return Object.keys(r.STANDARD_ERROR_MAP).includes(e)?r.STANDARD_ERROR_MAP[e]:r.STANDARD_ERROR_MAP[r.INTERNAL_ERROR]},e.exports.getErrorByCode=s,e.exports.validateJsonRpcError=function(e){if(void 0===e.error.code)return{valid:!1,error:"Missing code for JSON-RPC error"};if(void 0===e.error.message)return{valid:!1,error:"Missing message for JSON-RPC error"};if(!i(e.error.code))return{valid:!1,error:`Invalid error code type for JSON-RPC: ${e.error.code}`};if(n(e.error.code)){const t=s(e.error.code);if(t.message!==r.STANDARD_ERROR_MAP[r.INTERNAL_ERROR].message&&e.error.message===t.message)return{valid:!1,error:`Invalid error code message for JSON-RPC: ${e.error.code}`}}return{valid:!0}}})),o.register("j0xaI",(function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.isNodeJs=void 0;var r=o("h8CUm");e.exports.isNodeJs=o("gjjxU").isNode,r.__exportStar(o("gjjxU"),e.exports)})),o.register("h8CUm",(function(t,r){e(t.exports,"__exportStar",(function(){return i}));var n=Object.create?function(e,t,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(t,r);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,i)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]};function i(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)}Object.create})),o.register("gjjxU",(function(e,t){var r=e.exports&&e.exports.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),n=e.exports&&e.exports.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(e.exports,"__esModule",{value:!0}),n(o("4Po1k"),e.exports),n(o("8OB4b"),e.exports)})),o.register("4Po1k",(function(e,r){function n(){return(null==t?void 0:t.crypto)||(null==t?void 0:t.msCrypto)||{}}function i(){const e=n();return e.subtle||e.webkitSubtle}Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.isBrowserCryptoAvailable=e.exports.getSubtleCrypto=e.exports.getBrowerCrypto=void 0,e.exports.getBrowerCrypto=n,e.exports.getSubtleCrypto=i,e.exports.isBrowserCryptoAvailable=function(){return!!n()&&!!i()}})),o.register("8OB4b",(function(e,t){var r=o("iQPfu");function n(){return"undefined"==typeof document&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product}function i(){return void 0!==r&&void 0!==r.versions&&void 0!==r.versions.node}Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.isBrowser=e.exports.isNode=e.exports.isReactNative=void 0,e.exports.isReactNative=n,e.exports.isNode=i,e.exports.isBrowser=function(){return!n()&&!i()}})),o.register("iQPfu",(function(e,t){var r,n,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(r===setTimeout)return setTimeout(e,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(e){r=o}try{n="function"==typeof clearTimeout?clearTimeout:s}catch(e){n=s}}();var c,u=[],l=!1,h=-1;function f(){l&&c&&(l=!1,c.length?u=c.concat(u):h=-1,u.length&&d())}function d(){if(!l){var e=a(f);l=!0;for(var t=u.length;t;){for(c=u,u=[];++h<t;)c&&c[h].run();h=-1,t=u.length}c=null,l=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function g(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];u.push(new p(e,t)),1!==u.length||l||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}})),o.register("iK5ls",(function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.formatErrorMessage=e.exports.formatJsonRpcError=e.exports.formatJsonRpcResult=e.exports.formatJsonRpcRequest=e.exports.payloadId=void 0;var r=o("io3EQ"),n=o("fG8HP");function i(){return Date.now()*Math.pow(10,3)+Math.floor(Math.random()*Math.pow(10,3))}function s(e){if(void 0===e)return r.getError(n.INTERNAL_ERROR);if("string"==typeof e&&(e=Object.assign(Object.assign({},r.getError(n.SERVER_ERROR)),{message:e})),r.isReservedErrorCode(e.code)&&(e=r.getErrorByCode(e.code)),!r.isServerErrorCode(e.code))throw new Error("Error code is not in server code range");return e}e.exports.payloadId=i,e.exports.formatJsonRpcRequest=function(e,t,r){return{id:r||i(),jsonrpc:"2.0",method:e,params:t}},e.exports.formatJsonRpcResult=function(e,t){return{id:e,jsonrpc:"2.0",result:t}},e.exports.formatJsonRpcError=function(e,t){return{id:e,jsonrpc:"2.0",error:s(t)}},e.exports.formatErrorMessage=s})),o.register("jYFOA",(function(e,t){function r(e){return"*"===e}function n(e){return!!r(e)||!!e.includes("*")&&(2===e.split("*").length&&1===e.split("*").filter((e=>""===e.trim())).length)}Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.isValidTrailingWildcardRoute=e.exports.isValidLeadingWildcardRoute=e.exports.isValidWildcardRoute=e.exports.isValidDefaultRoute=e.exports.isValidRoute=void 0,e.exports.isValidRoute=function(e){return e.includes("*")?n(e):!/\W/g.test(e)},e.exports.isValidDefaultRoute=r,e.exports.isValidWildcardRoute=n,e.exports.isValidLeadingWildcardRoute=function(e){return!r(e)&&n(e)&&!e.split("*")[0].trim()},e.exports.isValidTrailingWildcardRoute=function(e){return!r(e)&&n(e)&&!e.split("*")[1].trim()}})),o.register("atZCx",(function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),o("h8CUm").__exportStar(o("h27su"),e.exports)})),o.register("h27su",(function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0});var r=o("h8CUm");r.__exportStar(o("gO4h0"),e.exports),r.__exportStar(o("b9KhY"),e.exports),r.__exportStar(o("dcsli"),e.exports),r.__exportStar(o("gvRCw"),e.exports),r.__exportStar(o("RwMi0"),e.exports),r.__exportStar(o("cSJjU"),e.exports),r.__exportStar(o("jxcUY"),e.exports),r.__exportStar(o("guU3r"),e.exports)})),o.register("gO4h0",(function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.IBlockchainProvider=e.exports.IBlockchainAuthenticator=e.exports.IPendingRequests=void 0;var r=o("dcsli"),n=o("RwMi0");e.exports.IPendingRequests=class{constructor(e){this.storage=e}};class i extends r.IEvents{constructor(e){super(),this.config=e}}e.exports.IBlockchainAuthenticator=i;class s extends n.IJsonRpcProvider{constructor(e,t){super(e)}}e.exports.IBlockchainProvider=s})),o.register("dcsli",(function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.IEvents=void 0;e.exports.IEvents=class{}})),o.register("RwMi0",(function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.IJsonRpcProvider=e.exports.IBaseJsonRpcProvider=e.exports.IJsonRpcConnection=void 0;var r=o("dcsli");class n extends r.IEvents{constructor(e){super()}}e.exports.IJsonRpcConnection=n;class i extends r.IEvents{constructor(){super()}}e.exports.IBaseJsonRpcProvider=i;e.exports.IJsonRpcProvider=class extends i{constructor(e){super()}}})),o.register("b9KhY",(function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0})})),o.register("gvRCw",(function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.IMultiServiceProvider=void 0;var r=o("RwMi0");class n extends r.IBaseJsonRpcProvider{constructor(e){super(),this.config=e}}e.exports.IMultiServiceProvider=n})),o.register("cSJjU",(function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.IJsonRpcRouter=void 0;e.exports.IJsonRpcRouter=class{constructor(e){this.routes=e}}})),o.register("jxcUY",(function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0})})),o.register("guU3r",(function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.IJsonRpcValidator=void 0;e.exports.IJsonRpcValidator=class{constructor(e){this.schemas=e}}})),o.register("9Ev6W",(function(e,t){function r(e){return"id"in e&&"jsonrpc"in e&&"2.0"===e.jsonrpc}function n(e){return"result"in e}function i(e){return"error"in e}Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.isJsonRpcValidationInvalid=e.exports.isJsonRpcError=e.exports.isJsonRpcResult=e.exports.isJsonRpcResponse=e.exports.isJsonRpcRequest=e.exports.isJsonRpcPayload=void 0,e.exports.isJsonRpcPayload=r,e.exports.isJsonRpcRequest=function(e){return r(e)&&"method"in e},e.exports.isJsonRpcResponse=function(e){return r(e)&&(n(e)||i(e))},e.exports.isJsonRpcResult=n,e.exports.isJsonRpcError=i,e.exports.isJsonRpcValidationInvalid=function(e){return"error"in e&&!1===e.valid}})),o.register("jkiLj",(function(e,t){var r=o("2Kjqd"),n=o("j0wbb"),i=o("lAIQ5")("socket.io-client");e.exports=t=a;var s=t.managers={};function a(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,a=r(e),c=a.source,u=a.id,l=a.path,h=s[u]&&l in s[u].nsps;return t.forceNew||t["force new connection"]||!1===t.multiplex||h?(i("ignoring socket cache for %s",c),n=o("j8kbF")(c,t)):(s[u]||(i("new io instance for %s",c),s[u]=o("j8kbF")(c,t)),n=s[u]),a.query&&!t.query&&(t.query=a.query),n.socket(a.path,t)}t.protocol=n.protocol,t.connect=a,t.Manager=o("j8kbF"),t.Socket=o("9eK3d")})),o.register("2Kjqd",(function(e,t){var r=o("a1DD1"),n=o("lAIQ5")("socket.io-client:url");e.exports=function(e,t){var i=e;t=t||"undefined"!=typeof location&&location,null==e&&(e=t.protocol+"//"+t.host);"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?t.protocol+e:t.host+e),/^(https?|wss?):\/\//.test(e)||(n("protocol-less url %s",e),e=void 0!==t?t.protocol+"//"+e:"https://"+e),n("parse %s",e),i=r(e));i.port||(/^(http|ws)$/.test(i.protocol)?i.port="80":/^(http|ws)s$/.test(i.protocol)&&(i.port="443"));i.path=i.path||"/";var o=-1!==i.host.indexOf(":")?"["+i.host+"]":i.host;return i.id=i.protocol+"://"+o+":"+i.port,i.href=i.protocol+"://"+o+(t&&t.port===i.port?"":":"+i.port),i}})),o.register("a1DD1",(function(e,t){var r=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var t=e,i=e.indexOf("["),o=e.indexOf("]");-1!=i&&-1!=o&&(e=e.substring(0,i)+e.substring(i,o).replace(/:/g,";")+e.substring(o,e.length));for(var s,a,c=r.exec(e||""),u={},l=14;l--;)u[n[l]]=c[l]||"";return-1!=i&&-1!=o&&(u.source=t,u.host=u.host.substring(1,u.host.length-1).replace(/;/g,":"),u.authority=u.authority.replace("[","").replace("]","").replace(/;/g,":"),u.ipv6uri=!0),u.pathNames=function(e,t){var r=/\/{2,9}/g,n=t.replace(r,"/").split("/");"/"!=t.substr(0,1)&&0!==t.length||n.splice(0,1);"/"==t.substr(t.length-1,1)&&n.splice(n.length-1,1);return n}(0,u.path),u.queryKey=(s=u.query,a={},s.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,t,r){t&&(a[t]=r)})),a),u}})),o.register("lAIQ5",(function(e,t){var r=o("iQPfu");function n(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=void 0),e}(t=e.exports=o("QeIy3")).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var r=this.useColors;if(e[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+e[0]+(r?"%c ":" ")+"+"+t.humanize(this.diff),!r)return;var n="color: "+this.color;e.splice(1,0,n,"color: inherit");var i=0,o=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(i++,"%c"===e&&(o=i))})),e.splice(o,0,n)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=n,t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(n())})),o.register("QeIy3",(function(e,t){function r(e){var r;function i(){if(i.enabled){var e=i,n=+new Date,o=n-(r||n);e.diff=o,e.prev=r,e.curr=n,r=n;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=t.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var c=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,(function(r,n){if("%%"===r)return r;c++;var i=t.formatters[n];if("function"==typeof i){var o=s[c];r=i.call(e,o),s.splice(c,1),c--}return r})),t.formatArgs.call(e,s);var u=i.log||t.log||console.log.bind(console);u.apply(e,s)}}return i.namespace=e,i.enabled=t.enabled(e),i.useColors=t.useColors(),i.color=function(e){var r,n=0;for(r in e)n=(n<<5)-n+e.charCodeAt(r),n|=0;return t.colors[Math.abs(n)%t.colors.length]}(e),i.destroy=n,"function"==typeof t.init&&t.init(i),t.instances.push(i),i}function n(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var r;t.save(e),t.names=[],t.skips=[];var n=("string"==typeof e?e:"").split(/[\s,]+/),i=n.length;for(r=0;r<i;r++)n[r]&&("-"===(e=n[r].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(r=0;r<t.instances.length;r++){var o=t.instances[r];o.enabled=t.enabled(o.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var r,n;for(r=0,n=t.skips.length;r<n;r++)if(t.skips[r].test(e))return!1;for(r=0,n=t.names.length;r<n;r++)if(t.names[r].test(e))return!0;return!1},t.humanize=o("3wrFx"),t.instances=[],t.names=[],t.skips=[],t.formatters={}})),o.register("3wrFx",(function(e,t){var r=1e3,n=6e4,i=36e5,o=864e5,s=315576e5;function a(e,t,r){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+r:Math.ceil(e/t)+" "+r+"s"}e.exports=function(e,t){t=t||{};var c,u=typeof e;if("string"===u&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var a=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*i;case"minutes":case"minute":case"mins":case"min":case"m":return a*n;case"seconds":case"second":case"secs":case"sec":case"s":return a*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(e);if("number"===u&&!1===isNaN(e))return t.long?a(c=e,o,"day")||a(c,i,"hour")||a(c,n,"minute")||a(c,r,"second")||c+" ms":function(e){return e>=o?Math.round(e/o)+"d":e>=i?Math.round(e/i)+"h":e>=n?Math.round(e/n)+"m":e>=r?Math.round(e/r)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}})),o.register("j0wbb",(function(t,r){var n,i,s,a,c,u,l,h,f,d,p;e(t.exports,"protocol",(function(){return n}),(function(e){return n=e})),e(t.exports,"types",(function(){return i}),(function(e){return i=e})),e(t.exports,"CONNECT",(function(){return s}),(function(e){return s=e})),e(t.exports,"DISCONNECT",(function(){return a}),(function(e){return a=e})),e(t.exports,"EVENT",(function(){return c}),(function(e){return c=e})),e(t.exports,"ACK",(function(){return u}),(function(e){return u=e})),e(t.exports,"ERROR",(function(){return l}),(function(e){return l=e})),e(t.exports,"BINARY_EVENT",(function(){return h}),(function(e){return h=e})),e(t.exports,"BINARY_ACK",(function(){return f}),(function(e){return f=e})),e(t.exports,"Encoder",(function(){return d}),(function(e){return d=e})),e(t.exports,"Decoder",(function(){return p}),(function(e){return p=e}));var g=o("7SEnx")("socket.io-parser"),m=o("gZQx7"),y=o("j2xAB"),v=o("77ozp"),w=o("5gg1T");function b(){}n=4,i=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],s=0,a=1,c=2,u=3,h=5,f=6,d=b,p=x;var A=(l=4)+'"encode error"';function E(e){var t=""+e.type;if(h!==e.type&&f!==e.type||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data){var r=function(e){try{return JSON.stringify(e)}catch(e){return!1}}(e.data);if(!1===r)return A;t+=r}return g("encoded %j as %s",e,t),t}function x(){this.reconstructor=null}function S(e){this.reconPack=e,this.buffers=[]}function C(e){return{type:l,data:"parser error: "+e}}b.prototype.encode=function(e,t){(g("encoding packet %j",e),h===e.type||f===e.type)?function(e,t){function r(e){var r=y.deconstructPacket(e),n=E(r.packet),i=r.buffers;i.unshift(n),t(i)}y.removeBlobs(e,r)}(e,t):t([E(e)])},m(x.prototype),x.prototype.add=function(e){var t;if("string"==typeof e)t=function(e){var t=0,r={type:Number(e.charAt(0))};if(null==i[r.type])return C("unknown packet type "+r.type);if(h===r.type||f===r.type){for(var n=t+1;"-"!==e.charAt(++t)&&t!=e.length;);var o=e.substring(n,t);if(o!=Number(o)||"-"!==e.charAt(t))throw new Error("Illegal attachments");r.attachments=Number(o)}if("/"===e.charAt(t+1)){for(n=t+1;++t;){if(","===(a=e.charAt(t)))break;if(t===e.length)break}r.nsp=e.substring(n,t)}else r.nsp="/";var s=e.charAt(t+1);if(""!==s&&Number(s)==s){for(n=t+1;++t;){var a;if(null==(a=e.charAt(t))||Number(a)!=a){--t;break}if(t===e.length)break}r.id=Number(e.substring(n,t+1))}if(e.charAt(++t)){var c=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(t));if(!(!1!==c&&(r.type===l||v(c))))return C("invalid payload");r.data=c}return g("decoded %s as %j",e,r),r}(e),h===t.type||f===t.type?(this.reconstructor=new S(t),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",t)):this.emit("decoded",t);else{if(!w(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(t=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,this.emit("decoded",t))}},x.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},S.prototype.takeBinaryData=function(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){var t=y.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null},S.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}})),o.register("7SEnx",(function(e,t){var r=o("iQPfu");function n(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=void 0),e}(t=e.exports=o("d3eQ3")).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var r=this.useColors;if(e[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+e[0]+(r?"%c ":" ")+"+"+t.humanize(this.diff),!r)return;var n="color: "+this.color;e.splice(1,0,n,"color: inherit");var i=0,o=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(i++,"%c"===e&&(o=i))})),e.splice(o,0,n)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=n,t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(n())})),o.register("d3eQ3",(function(e,t){function r(e){var r;function i(){if(i.enabled){var e=i,n=+new Date,o=n-(r||n);e.diff=o,e.prev=r,e.curr=n,r=n;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=t.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var c=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,(function(r,n){if("%%"===r)return r;c++;var i=t.formatters[n];if("function"==typeof i){var o=s[c];r=i.call(e,o),s.splice(c,1),c--}return r})),t.formatArgs.call(e,s);var u=i.log||t.log||console.log.bind(console);u.apply(e,s)}}return i.namespace=e,i.enabled=t.enabled(e),i.useColors=t.useColors(),i.color=function(e){var r,n=0;for(r in e)n=(n<<5)-n+e.charCodeAt(r),n|=0;return t.colors[Math.abs(n)%t.colors.length]}(e),i.destroy=n,"function"==typeof t.init&&t.init(i),t.instances.push(i),i}function n(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var r;t.save(e),t.names=[],t.skips=[];var n=("string"==typeof e?e:"").split(/[\s,]+/),i=n.length;for(r=0;r<i;r++)n[r]&&("-"===(e=n[r].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(r=0;r<t.instances.length;r++){var o=t.instances[r];o.enabled=t.enabled(o.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var r,n;for(r=0,n=t.skips.length;r<n;r++)if(t.skips[r].test(e))return!1;for(r=0,n=t.names.length;r<n;r++)if(t.names[r].test(e))return!0;return!1},t.humanize=o("8UJqf"),t.instances=[],t.names=[],t.skips=[],t.formatters={}})),o.register("8UJqf",(function(e,t){var r=1e3,n=6e4,i=36e5,o=864e5,s=315576e5;function a(e,t,r){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+r:Math.ceil(e/t)+" "+r+"s"}e.exports=function(e,t){t=t||{};var c,u=typeof e;if("string"===u&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var a=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*i;case"minutes":case"minute":case"mins":case"min":case"m":return a*n;case"seconds":case"second":case"secs":case"sec":case"s":return a*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(e);if("number"===u&&!1===isNaN(e))return t.long?a(c=e,o,"day")||a(c,i,"hour")||a(c,n,"minute")||a(c,r,"second")||c+" ms":function(e){return e>=o?Math.round(e/o)+"d":e>=i?Math.round(e/i)+"h":e>=n?Math.round(e/n)+"m":e>=r?Math.round(e/r)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}})),o.register("gZQx7",(function(e,t){function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function r(){this.off(e,r),t.apply(this,arguments)}return r.fn=t,this.on(e,r),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var r,n=this._callbacks["$"+e];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var i=0;i<n.length;i++)if((r=n[i])===t||r.fn===t){n.splice(i,1);break}return 0===n.length&&delete this._callbacks["$"+e],this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),r=this._callbacks["$"+e],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(r){n=0;for(var i=(r=r.slice(0)).length;n<i;++n)r[n].apply(this,t)}return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}})),o.register("j2xAB",(function(t,r){var n,i,s;e(t.exports,"deconstructPacket",(function(){return n}),(function(e){return n=e})),e(t.exports,"reconstructPacket",(function(){return i}),(function(e){return i=e})),e(t.exports,"removeBlobs",(function(){return s}),(function(e){return s=e}));var a=o("77ozp"),c=o("5gg1T"),u=Object.prototype.toString,l="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===u.call(Blob),h="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===u.call(File);function f(e,t){if(!e)return e;if(c(e)){var r={_placeholder:!0,num:t.length};return t.push(e),r}if(a(e)){for(var n=new Array(e.length),i=0;i<e.length;i++)n[i]=f(e[i],t);return n}if("object"==typeof e&&!(e instanceof Date)){n={};for(var o in e)n[o]=f(e[o],t);return n}return e}function d(e,t){if(!e)return e;if(e&&e._placeholder)return t[e.num];if(a(e))for(var r=0;r<e.length;r++)e[r]=d(e[r],t);else if("object"==typeof e)for(var n in e)e[n]=d(e[n],t);return e}n=function(e){var t=[],r=e.data,n=e;return n.data=f(r,t),n.attachments=t.length,{packet:n,buffers:t}},i=function(e,t){return e.data=d(e.data,t),e.attachments=void 0,e},s=function(e,t){var r=0,n=e;!function e(i,o,s){if(!i)return i;if(l&&i instanceof Blob||h&&i instanceof File){r++;var u=new FileReader;u.onload=function(){s?s[o]=this.result:n=this.result,--r||t(n)},u.readAsArrayBuffer(i)}else if(a(i))for(var f=0;f<i.length;f++)e(i[f],f,i);else if("object"==typeof i&&!c(i))for(var d in i)e(i[d],d,i)}(n),r||t(n)}})),o.register("77ozp",(function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}})),o.register("5gg1T",(function(e,t){var r=o("b8Dez").Buffer;e.exports=function(e){return n&&r.isBuffer(e)||i&&(e instanceof ArrayBuffer||function(e){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer}(e))};var n="function"==typeof r&&"function"==typeof r.isBuffer,i="function"==typeof ArrayBuffer})),o.register("b8Dez",(function(t,r){var n,i,s,a;e(t.exports,"Buffer",(function(){return n}),(function(e){return n=e})),e(t.exports,"SlowBuffer",(function(){return i}),(function(e){return i=e})),e(t.exports,"INSPECT_MAX_BYTES",(function(){return s}),(function(e){return s=e})),e(t.exports,"kMaxLength",(function(){return a}),(function(e){return a=e}));var c=o("kDDjR"),u=o("3VsHd");const l="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;n=d,i=function(e){+e!=e&&(e=0);return d.alloc(+e)},s=50;const h=2147483647;function f(e){if(e>h)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,d.prototype),t}function d(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return m(e)}return p(e,t,r)}function p(e,t,r){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!d.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const r=0|b(e,t);let n=f(r);const i=n.write(e,t);i!==r&&(n=n.slice(0,i));return n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(ee(e,Uint8Array)){const t=new Uint8Array(e);return v(t.buffer,t.byteOffset,t.byteLength)}return y(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(ee(e,ArrayBuffer)||e&&ee(e.buffer,ArrayBuffer))return v(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&(ee(e,SharedArrayBuffer)||e&&ee(e.buffer,SharedArrayBuffer)))return v(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return d.from(n,t,r);const i=function(e){if(d.isBuffer(e)){const t=0|w(e.length),r=f(t);return 0===r.length||e.copy(r,0,0,t),r}if(void 0!==e.length)return"number"!=typeof e.length||te(e.length)?f(0):y(e);if("Buffer"===e.type&&Array.isArray(e.data))return y(e.data)}(e);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return d.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function g(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function m(e){return g(e),f(e<0?0:0|w(e))}function y(e){const t=e.length<0?0:0|w(e.length),r=f(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function v(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(n,d.prototype),n}function w(e){if(e>=h)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+h.toString(16)+" bytes");return 0|e}function b(e,t){if(d.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||ee(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let i=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return Y(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return X(e).length;default:if(i)return n?-1:Y(e).length;t=(""+t).toLowerCase(),i=!0}}function A(e,t,r){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return B(this,t,r);case"utf8":case"utf-8":return I(this,t,r);case"ascii":return T(this,t,r);case"latin1":case"binary":return M(this,t,r);case"base64":return O(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return F(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function E(e,t,r){const n=e[t];e[t]=e[r],e[r]=n}function x(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),te(r=+r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=d.from(t,n)),d.isBuffer(t))return 0===t.length?-1:S(e,t,r,n,i);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):S(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function S(e,t,r,n,i){let o,s=1,a=e.length,c=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;s=2,a/=2,c/=2,r/=2}function u(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(i){let n=-1;for(o=r;o<a;o++)if(u(e,o)===u(t,-1===n?0:o-n)){if(-1===n&&(n=o),o-n+1===c)return n*s}else-1!==n&&(o-=o-n),n=-1}else for(r+c>a&&(r=a-c),o=r;o>=0;o--){let r=!0;for(let n=0;n<c;n++)if(u(e,o+n)!==u(t,n)){r=!1;break}if(r)return o}return-1}function C(e,t,r,n){r=Number(r)||0;const i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;const o=t.length;let s;for(n>o/2&&(n=o/2),s=0;s<n;++s){const n=parseInt(t.substr(2*s,2),16);if(te(n))return s;e[r+s]=n}return s}function k(e,t,r,n){return $(Y(t,e.length-r),e,r,n)}function _(e,t,r,n){return $(function(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function P(e,t,r,n){return $(X(t),e,r,n)}function R(e,t,r,n){return $(function(e,t){let r,n,i;const o=[];for(let s=0;s<e.length&&!((t-=2)<0);++s)r=e.charCodeAt(s),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(t,e.length-r),e,r,n)}function O(e,t,r){return 0===t&&r===e.length?c.fromByteArray(e):c.fromByteArray(e.slice(t,r))}function I(e,t,r){r=Math.min(e.length,r);const n=[];let i=t;for(;i<r;){const t=e[i];let o=null,s=t>239?4:t>223?3:t>191?2:1;if(i+s<=r){let r,n,a,c;switch(s){case 1:t<128&&(o=t);break;case 2:r=e[i+1],128==(192&r)&&(c=(31&t)<<6|63&r,c>127&&(o=c));break;case 3:r=e[i+1],n=e[i+2],128==(192&r)&&128==(192&n)&&(c=(15&t)<<12|(63&r)<<6|63&n,c>2047&&(c<55296||c>57343)&&(o=c));break;case 4:r=e[i+1],n=e[i+2],a=e[i+3],128==(192&r)&&128==(192&n)&&128==(192&a)&&(c=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&a,c>65535&&c<1114112&&(o=c))}}null===o?(o=65533,s=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),i+=s}return function(e){const t=e.length;if(t<=N)return String.fromCharCode.apply(String,e);let r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=N));return r}(n)}a=h,d.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),d.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(d.prototype,"parent",{enumerable:!0,get:function(){if(d.isBuffer(this))return this.buffer}}),Object.defineProperty(d.prototype,"offset",{enumerable:!0,get:function(){if(d.isBuffer(this))return this.byteOffset}}),d.poolSize=8192,d.from=function(e,t,r){return p(e,t,r)},Object.setPrototypeOf(d.prototype,Uint8Array.prototype),Object.setPrototypeOf(d,Uint8Array),d.alloc=function(e,t,r){return function(e,t,r){return g(e),e<=0?f(e):void 0!==t?"string"==typeof r?f(e).fill(t,r):f(e).fill(t):f(e)}(e,t,r)},d.allocUnsafe=function(e){return m(e)},d.allocUnsafeSlow=function(e){return m(e)},d.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==d.prototype},d.compare=function(e,t){if(ee(e,Uint8Array)&&(e=d.from(e,e.offset,e.byteLength)),ee(t,Uint8Array)&&(t=d.from(t,t.offset,t.byteLength)),!d.isBuffer(e)||!d.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},d.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},d.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return d.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const n=d.allocUnsafe(t);let i=0;for(r=0;r<e.length;++r){let t=e[r];if(ee(t,Uint8Array))i+t.length>n.length?(d.isBuffer(t)||(t=d.from(t)),t.copy(n,i)):Uint8Array.prototype.set.call(n,t,i);else{if(!d.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(n,i)}i+=t.length}return n},d.byteLength=b,d.prototype._isBuffer=!0,d.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)E(this,t,t+1);return this},d.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)E(this,t,t+3),E(this,t+1,t+2);return this},d.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)E(this,t,t+7),E(this,t+1,t+6),E(this,t+2,t+5),E(this,t+3,t+4);return this},d.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?I(this,0,e):A.apply(this,arguments)},d.prototype.toLocaleString=d.prototype.toString,d.prototype.equals=function(e){if(!d.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===d.compare(this,e)},d.prototype.inspect=function(){let e="";const t=s;return e=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim(),this.length>t&&(e+=" ... "),"<Buffer "+e+">"},l&&(d.prototype[l]=d.prototype.inspect),d.prototype.compare=function(e,t,r,n,i){if(ee(e,Uint8Array)&&(e=d.from(e,e.offset,e.byteLength)),!d.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;let o=(i>>>=0)-(n>>>=0),s=(r>>>=0)-(t>>>=0);const a=Math.min(o,s),c=this.slice(n,i),u=e.slice(t,r);for(let e=0;e<a;++e)if(c[e]!==u[e]){o=c[e],s=u[e];break}return o<s?-1:s<o?1:0},d.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},d.prototype.indexOf=function(e,t,r){return x(this,e,t,r,!0)},d.prototype.lastIndexOf=function(e,t,r){return x(this,e,t,r,!1)},d.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let o=!1;for(;;)switch(n){case"hex":return C(this,e,t,r);case"utf8":case"utf-8":return k(this,e,t,r);case"ascii":case"latin1":case"binary":return _(this,e,t,r);case"base64":return P(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},d.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const N=4096;function T(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function M(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function B(e,t,r){const n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let i="";for(let n=t;n<r;++n)i+=re[e[n]];return i}function F(e,t,r){const n=e.slice(t,r);let i="";for(let e=0;e<n.length-1;e+=2)i+=String.fromCharCode(n[e]+256*n[e+1]);return i}function L(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function j(e,t,r,n,i,o){if(!d.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function D(e,t,r,n,i){J(t,n,i,e,r,7);let o=Number(t&BigInt(4294967295));e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o;let s=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,r}function U(e,t,r,n,i){J(t,n,i,e,r,7);let o=Number(t&BigInt(4294967295));e[r+7]=o,o>>=8,e[r+6]=o,o>>=8,e[r+5]=o,o>>=8,e[r+4]=o;let s=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=s,s>>=8,e[r+2]=s,s>>=8,e[r+1]=s,s>>=8,e[r]=s,r+8}function z(e,t,r,n,i,o){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function q(e,t,r,n,i){return t=+t,r>>>=0,i||z(e,0,r,4),u.write(e,t,r,n,23,4),r+4}function K(e,t,r,n,i){return t=+t,r>>>=0,i||z(e,0,r,8),u.write(e,t,r,n,52,8),r+8}d.prototype.slice=function(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);const n=this.subarray(e,t);return Object.setPrototypeOf(n,d.prototype),n},d.prototype.readUintLE=d.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||L(e,t,this.length);let n=this[e],i=1,o=0;for(;++o<t&&(i*=256);)n+=this[e+o]*i;return n},d.prototype.readUintBE=d.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||L(e,t,this.length);let n=this[e+--t],i=1;for(;t>0&&(i*=256);)n+=this[e+--t]*i;return n},d.prototype.readUint8=d.prototype.readUInt8=function(e,t){return e>>>=0,t||L(e,1,this.length),this[e]},d.prototype.readUint16LE=d.prototype.readUInt16LE=function(e,t){return e>>>=0,t||L(e,2,this.length),this[e]|this[e+1]<<8},d.prototype.readUint16BE=d.prototype.readUInt16BE=function(e,t){return e>>>=0,t||L(e,2,this.length),this[e]<<8|this[e+1]},d.prototype.readUint32LE=d.prototype.readUInt32LE=function(e,t){return e>>>=0,t||L(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},d.prototype.readUint32BE=d.prototype.readUInt32BE=function(e,t){return e>>>=0,t||L(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},d.prototype.readBigUInt64LE=ne((function(e){V(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||Q(e,this.length-8);const n=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,i=this[++e]+256*this[++e]+65536*this[++e]+r*2**24;return BigInt(n)+(BigInt(i)<<BigInt(32))})),d.prototype.readBigUInt64BE=ne((function(e){V(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||Q(e,this.length-8);const n=t*2**24+65536*this[++e]+256*this[++e]+this[++e],i=this[++e]*2**24+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(i)})),d.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||L(e,t,this.length);let n=this[e],i=1,o=0;for(;++o<t&&(i*=256);)n+=this[e+o]*i;return i*=128,n>=i&&(n-=Math.pow(2,8*t)),n},d.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||L(e,t,this.length);let n=t,i=1,o=this[e+--n];for(;n>0&&(i*=256);)o+=this[e+--n]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*t)),o},d.prototype.readInt8=function(e,t){return e>>>=0,t||L(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},d.prototype.readInt16LE=function(e,t){e>>>=0,t||L(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},d.prototype.readInt16BE=function(e,t){e>>>=0,t||L(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},d.prototype.readInt32LE=function(e,t){return e>>>=0,t||L(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},d.prototype.readInt32BE=function(e,t){return e>>>=0,t||L(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},d.prototype.readBigInt64LE=ne((function(e){V(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||Q(e,this.length-8);const n=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),d.prototype.readBigInt64BE=ne((function(e){V(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||Q(e,this.length-8);const n=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(n)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+r)})),d.prototype.readFloatLE=function(e,t){return e>>>=0,t||L(e,4,this.length),u.read(this,e,!0,23,4)},d.prototype.readFloatBE=function(e,t){return e>>>=0,t||L(e,4,this.length),u.read(this,e,!1,23,4)},d.prototype.readDoubleLE=function(e,t){return e>>>=0,t||L(e,8,this.length),u.read(this,e,!0,52,8)},d.prototype.readDoubleBE=function(e,t){return e>>>=0,t||L(e,8,this.length),u.read(this,e,!1,52,8)},d.prototype.writeUintLE=d.prototype.writeUIntLE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){j(this,e,t,r,Math.pow(2,8*r)-1,0)}let i=1,o=0;for(this[t]=255&e;++o<r&&(i*=256);)this[t+o]=e/i&255;return t+r},d.prototype.writeUintBE=d.prototype.writeUIntBE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){j(this,e,t,r,Math.pow(2,8*r)-1,0)}let i=r-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+r},d.prototype.writeUint8=d.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,1,255,0),this[t]=255&e,t+1},d.prototype.writeUint16LE=d.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},d.prototype.writeUint16BE=d.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},d.prototype.writeUint32LE=d.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},d.prototype.writeUint32BE=d.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},d.prototype.writeBigUInt64LE=ne((function(e,t=0){return D(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),d.prototype.writeBigUInt64BE=ne((function(e,t=0){return U(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),d.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);j(this,e,t,r,n-1,-n)}let i=0,o=1,s=0;for(this[t]=255&e;++i<r&&(o*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/o>>0)-s&255;return t+r},d.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);j(this,e,t,r,n-1,-n)}let i=r-1,o=1,s=0;for(this[t+i]=255&e;--i>=0&&(o*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/o>>0)-s&255;return t+r},d.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},d.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},d.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},d.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},d.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},d.prototype.writeBigInt64LE=ne((function(e,t=0){return D(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),d.prototype.writeBigInt64BE=ne((function(e,t=0){return U(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),d.prototype.writeFloatLE=function(e,t,r){return q(this,e,t,!0,r)},d.prototype.writeFloatBE=function(e,t,r){return q(this,e,t,!1,r)},d.prototype.writeDoubleLE=function(e,t,r){return K(this,e,t,!0,r)},d.prototype.writeDoubleBE=function(e,t,r){return K(this,e,t,!1,r)},d.prototype.copy=function(e,t,r,n){if(!d.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);const i=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),i},d.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!d.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){const t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;let i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{const o=d.isBuffer(e)?e:d.from(e,n),s=o.length;if(0===s)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<r-t;++i)this[i+t]=o[i%s]}return this};const G={};function W(e,t,r){G[e]=class extends r{get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}}}function H(e){let t="",r=e.length;const n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function J(e,t,r,n,i,o){if(e>r||e<t){const n="bigint"==typeof t?"n":"";let i;throw i=o>3?0===t||t===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(o+1)}${n}`:`>= -(2${n} ** ${8*(o+1)-1}${n}) and < 2 ** ${8*(o+1)-1}${n}`:`>= ${t}${n} and <= ${r}${n}`,new G.ERR_OUT_OF_RANGE("value",i,e)}!function(e,t,r){V(t,"offset"),void 0!==e[t]&&void 0!==e[t+r]||Q(t,e.length-(r+1))}(n,i,o)}function V(e,t){if("number"!=typeof e)throw new G.ERR_INVALID_ARG_TYPE(t,"number",e)}function Q(e,t,r){if(Math.floor(e)!==e)throw V(e,r),new G.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new G.ERR_BUFFER_OUT_OF_BOUNDS;throw new G.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}W("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),W("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),W("ERR_OUT_OF_RANGE",(function(e,t,r){let n=`The value of "${e}" is out of range.`,i=r;return Number.isInteger(r)&&Math.abs(r)>2**32?i=H(String(r)):"bigint"==typeof r&&(i=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(i=H(i)),i+="n"),n+=` It must be ${t}. Received ${i}`,n}),RangeError);const Z=/[^+/0-9A-Za-z-_]/g;function Y(e,t){let r;t=t||1/0;const n=e.length;let i=null;const o=[];for(let s=0;s<n;++s){if(r=e.charCodeAt(s),r>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(t-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function X(e){return c.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(Z,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function $(e,t,r,n){let i;for(i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}function ee(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function te(e){return e!=e}const re=function(){const e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let i=0;i<16;++i)t[n+i]=e[r]+e[i]}return t}();function ne(e){return"undefined"==typeof BigInt?ie:e}function ie(){throw new Error("BigInt not supported")}})),o.register("kDDjR",(function(t,r){var n,i;e(t.exports,"toByteArray",(function(){return n}),(function(e){return n=e})),e(t.exports,"fromByteArray",(function(){return i}),(function(e){return i=e})),n=function(e){var t,r,n=h(e),i=n[0],o=n[1],c=new a(function(e,t,r){return 3*(t+r)/4-r}(0,i,o)),u=0,l=o>0?i-4:i;for(r=0;r<l;r+=4)t=s[e.charCodeAt(r)]<<18|s[e.charCodeAt(r+1)]<<12|s[e.charCodeAt(r+2)]<<6|s[e.charCodeAt(r+3)],c[u++]=t>>16&255,c[u++]=t>>8&255,c[u++]=255&t;2===o&&(t=s[e.charCodeAt(r)]<<2|s[e.charCodeAt(r+1)]>>4,c[u++]=255&t);1===o&&(t=s[e.charCodeAt(r)]<<10|s[e.charCodeAt(r+1)]<<4|s[e.charCodeAt(r+2)]>>2,c[u++]=t>>8&255,c[u++]=255&t);return c},i=function(e){for(var t,r=e.length,n=r%3,i=[],s=16383,a=0,c=r-n;a<c;a+=s)i.push(f(e,a,a+s>c?c:a+s));1===n?(t=e[r-1],i.push(o[t>>2]+o[t<<4&63]+"==")):2===n&&(t=(e[r-2]<<8)+e[r-1],i.push(o[t>>10]+o[t>>4&63]+o[t<<2&63]+"="));return i.join("")};for(var o=[],s=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,c="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",u=0,l=c.length;u<l;++u)o[u]=c[u],s[c.charCodeAt(u)]=u;function h(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function f(e,t,r){for(var n,i,s=[],a=t;a<r;a+=3)n=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(o[(i=n)>>18&63]+o[i>>12&63]+o[i>>6&63]+o[63&i]);return s.join("")}s["-".charCodeAt(0)]=62,s["_".charCodeAt(0)]=63})),o.register("3VsHd",(function(t,r){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */var n,i;e(t.exports,"read",(function(){return n}),(function(e){return n=e})),e(t.exports,"write",(function(){return i}),(function(e){return i=e})),n=function(e,t,r,n,i){var o,s,a=8*i-n-1,c=(1<<a)-1,u=c>>1,l=-7,h=r?i-1:0,f=r?-1:1,d=e[t+h];for(h+=f,o=d&(1<<-l)-1,d>>=-l,l+=a;l>0;o=256*o+e[t+h],h+=f,l-=8);for(s=o&(1<<-l)-1,o>>=-l,l+=n;l>0;s=256*s+e[t+h],h+=f,l-=8);if(0===o)o=1-u;else{if(o===c)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,n),o-=u}return(d?-1:1)*s*Math.pow(2,o-n)},i=function(e,t,r,n,i,o){var s,a,c,u=8*o-i-1,l=(1<<u)-1,h=l>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:o-1,p=n?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-s))<1&&(s--,c*=2),(t+=s+h>=1?f/c:f*Math.pow(2,1-h))*c>=2&&(s++,c/=2),s+h>=l?(a=0,s=l):s+h>=1?(a=(t*c-1)*Math.pow(2,i),s+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,i),s=0));i>=8;e[r+d]=255&a,d+=p,a/=256,i-=8);for(s=s<<i|a,u+=i;u>0;e[r+d]=255&s,d+=p,s/=256,u-=8);e[r+d-p]|=128*g}})),o.register("j8kbF",(function(e,t){var r=o("jcer5"),n=o("9eK3d"),i=o("gZQx7"),s=o("j0wbb"),a=o("6qhog"),c=o("a3vhi"),u=o("lAIQ5")("socket.io-client:manager"),l=o("iWYOO"),h=o("iuNav"),f=Object.prototype.hasOwnProperty;function d(e,t){if(!(this instanceof d))return new d(e,t);e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.nsps={},this.subs=[],this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new h({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this.readyState="closed",this.uri=e,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var r=t.parser||s;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this.autoConnect=!1!==t.autoConnect,this.autoConnect&&this.open()}e.exports=d,d.prototype.emitAll=function(){for(var e in this.emit.apply(this,arguments),this.nsps)f.call(this.nsps,e)&&this.nsps[e].emit.apply(this.nsps[e],arguments)},d.prototype.updateSocketIds=function(){for(var e in this.nsps)f.call(this.nsps,e)&&(this.nsps[e].id=this.generateId(e))},d.prototype.generateId=function(e){return("/"===e?"":e+"#")+this.engine.id},i(d.prototype),d.prototype.reconnection=function(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection},d.prototype.reconnectionAttempts=function(e){return arguments.length?(this._reconnectionAttempts=e,this):this._reconnectionAttempts},d.prototype.reconnectionDelay=function(e){return arguments.length?(this._reconnectionDelay=e,this.backoff&&this.backoff.setMin(e),this):this._reconnectionDelay},d.prototype.randomizationFactor=function(e){return arguments.length?(this._randomizationFactor=e,this.backoff&&this.backoff.setJitter(e),this):this._randomizationFactor},d.prototype.reconnectionDelayMax=function(e){return arguments.length?(this._reconnectionDelayMax=e,this.backoff&&this.backoff.setMax(e),this):this._reconnectionDelayMax},d.prototype.timeout=function(e){return arguments.length?(this._timeout=e,this):this._timeout},d.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},d.prototype.open=d.prototype.connect=function(e,t){if(u("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;u("opening %s",this.uri),this.engine=r(this.uri,this.opts);var n=this.engine,i=this;this.readyState="opening",this.skipReconnect=!1;var o=a(n,"open",(function(){i.onopen(),e&&e()})),s=a(n,"error",(function(t){if(u("connect_error"),i.cleanup(),i.readyState="closed",i.emitAll("connect_error",t),e){var r=new Error("Connection error");r.data=t,e(r)}else i.maybeReconnectOnOpen()}));if(!1!==this._timeout){var c=this._timeout;u("connect attempt will timeout after %d",c),0===c&&o.destroy();var l=setTimeout((function(){u("connect attempt timed out after %d",c),o.destroy(),n.close(),n.emit("error","timeout"),i.emitAll("connect_timeout",c)}),c);this.subs.push({destroy:function(){clearTimeout(l)}})}return this.subs.push(o),this.subs.push(s),this},d.prototype.onopen=function(){u("open"),this.cleanup(),this.readyState="open",this.emit("open");var e=this.engine;this.subs.push(a(e,"data",c(this,"ondata"))),this.subs.push(a(e,"ping",c(this,"onping"))),this.subs.push(a(e,"pong",c(this,"onpong"))),this.subs.push(a(e,"error",c(this,"onerror"))),this.subs.push(a(e,"close",c(this,"onclose"))),this.subs.push(a(this.decoder,"decoded",c(this,"ondecoded")))},d.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},d.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},d.prototype.ondata=function(e){this.decoder.add(e)},d.prototype.ondecoded=function(e){this.emit("packet",e)},d.prototype.onerror=function(e){u("error",e),this.emitAll("error",e)},d.prototype.socket=function(e,t){var r=this.nsps[e];if(!r){r=new n(this,e,t),this.nsps[e]=r;var i=this;r.on("connecting",o),r.on("connect",(function(){r.id=i.generateId(e)})),this.autoConnect&&o()}function o(){~l(i.connecting,r)||i.connecting.push(r)}return r},d.prototype.destroy=function(e){var t=l(this.connecting,e);~t&&this.connecting.splice(t,1),this.connecting.length||this.close()},d.prototype.packet=function(e){u("writing packet %j",e);var t=this;e.query&&0===e.type&&(e.nsp+="?"+e.query),t.encoding?t.packetBuffer.push(e):(t.encoding=!0,this.encoder.encode(e,(function(r){for(var n=0;n<r.length;n++)t.engine.write(r[n],e.options);t.encoding=!1,t.processPacketQueue()})))},d.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var e=this.packetBuffer.shift();this.packet(e)}},d.prototype.cleanup=function(){u("cleanup");for(var e=this.subs.length,t=0;t<e;t++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},d.prototype.close=d.prototype.disconnect=function(){u("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},d.prototype.onclose=function(e){u("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()},d.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var e=this;if(this.backoff.attempts>=this._reconnectionAttempts)u("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var t=this.backoff.duration();u("will wait %dms before reconnect attempt",t),this.reconnecting=!0;var r=setTimeout((function(){e.skipReconnect||(u("attempting reconnect"),e.emitAll("reconnect_attempt",e.backoff.attempts),e.emitAll("reconnecting",e.backoff.attempts),e.skipReconnect||e.open((function(t){t?(u("reconnect attempt error"),e.reconnecting=!1,e.reconnect(),e.emitAll("reconnect_error",t.data)):(u("reconnect success"),e.onreconnect())})))}),t);this.subs.push({destroy:function(){clearTimeout(r)}})}},d.prototype.onreconnect=function(){var e=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",e)}})),o.register("jcer5",(function(e,t){e.exports=o("8Fgx5"),e.exports.parser=o("9dAMg")})),o.register("8Fgx5",(function(e,t){var r=o("gZQx7"),n=o("cdJLB")("engine.io-client:socket"),i=o("iWYOO"),s=o("a1DD1"),a=o("aDYB4");function c(e,t){if(!(this instanceof c))return new c(e,t);t=t||{},e&&"object"==typeof e&&(t=e,e=null),e?(e=s(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=s(t.host).host),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.agent=t.agent||!1,this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=t.query||{},"string"==typeof this.query&&(this.query=a.decode(this.query)),this.upgrade=!1!==t.upgrade,this.path=(t.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!t.forceJSONP,this.jsonp=!1!==t.jsonp,this.forceBase64=!!t.forceBase64,this.enablesXDR=!!t.enablesXDR,this.withCredentials=!1!==t.withCredentials,this.timestampParam=t.timestampParam||"t",this.timestampRequests=t.timestampRequests,this.transports=t.transports||["polling","websocket"],this.transportOptions=t.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=t.policyPort||843,this.rememberUpgrade=t.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=t.onlyBinaryUpgrades,this.perMessageDeflate=!1!==t.perMessageDeflate&&(t.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=t.pfx||void 0,this.key=t.key||void 0,this.passphrase=t.passphrase||void 0,this.cert=t.cert||void 0,this.ca=t.ca||void 0,this.ciphers=t.ciphers||void 0,this.rejectUnauthorized=void 0===t.rejectUnauthorized||t.rejectUnauthorized,this.forceNode=!!t.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(t.extraHeaders&&Object.keys(t.extraHeaders).length>0&&(this.extraHeaders=t.extraHeaders),t.localAddress&&(this.localAddress=t.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}e.exports=c,c.priorWebsocketSuccess=!1,r(c.prototype),c.protocol=o("9dAMg").protocol,c.Socket=c,c.Transport=o("37m8b"),c.transports=o("2GZKi"),c.parser=o("9dAMg"),c.prototype.createTransport=function(e){n('creating transport "%s"',e);var t=function(e){var t={};for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);return t}(this.query);t.EIO=o("9dAMg").protocol,t.transport=e;var r=this.transportOptions[e]||{};return this.id&&(t.sid=this.id),new(o("2GZKi")[e])({query:t,socket:this,agent:r.agent||this.agent,hostname:r.hostname||this.hostname,port:r.port||this.port,secure:r.secure||this.secure,path:r.path||this.path,forceJSONP:r.forceJSONP||this.forceJSONP,jsonp:r.jsonp||this.jsonp,forceBase64:r.forceBase64||this.forceBase64,enablesXDR:r.enablesXDR||this.enablesXDR,withCredentials:r.withCredentials||this.withCredentials,timestampRequests:r.timestampRequests||this.timestampRequests,timestampParam:r.timestampParam||this.timestampParam,policyPort:r.policyPort||this.policyPort,pfx:r.pfx||this.pfx,key:r.key||this.key,passphrase:r.passphrase||this.passphrase,cert:r.cert||this.cert,ca:r.ca||this.ca,ciphers:r.ciphers||this.ciphers,rejectUnauthorized:r.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:r.perMessageDeflate||this.perMessageDeflate,extraHeaders:r.extraHeaders||this.extraHeaders,forceNode:r.forceNode||this.forceNode,localAddress:r.localAddress||this.localAddress,requestTimeout:r.requestTimeout||this.requestTimeout,protocols:r.protocols||void 0,isReactNative:this.isReactNative})},c.prototype.open=function(){var e;if(this.rememberUpgrade&&c.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length){var t=this;return void setTimeout((function(){t.emit("error","No transports available")}),0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)},c.prototype.setTransport=function(e){n("setting transport %s",e.name);var t=this;this.transport&&(n("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",(function(){t.onDrain()})).on("packet",(function(e){t.onPacket(e)})).on("error",(function(e){t.onError(e)})).on("close",(function(){t.onClose("transport close")}))},c.prototype.probe=function(e){n('probing transport "%s"',e);var t=this.createTransport(e,{probe:1}),r=!1,i=this;function o(){if(i.onlyBinaryUpgrades){var o=!this.supportsBinary&&i.transport.supportsBinary;r=r||o}r||(n('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",(function(o){if(!r)if("pong"===o.type&&"probe"===o.data){if(n('probe transport "%s" pong',e),i.upgrading=!0,i.emit("upgrading",t),!t)return;c.priorWebsocketSuccess="websocket"===t.name,n('pausing current transport "%s"',i.transport.name),i.transport.pause((function(){r||"closed"!==i.readyState&&(n("changing transport and sending upgrade packet"),f(),i.setTransport(t),t.send([{type:"upgrade"}]),i.emit("upgrade",t),t=null,i.upgrading=!1,i.flush())}))}else{n('probe transport "%s" failed',e);var s=new Error("probe error");s.transport=t.name,i.emit("upgradeError",s)}})))}function s(){r||(r=!0,f(),t.close(),t=null)}function a(r){var o=new Error("probe error: "+r);o.transport=t.name,s(),n('probe transport "%s" failed because of error: %s',e,r),i.emit("upgradeError",o)}function u(){a("transport closed")}function l(){a("socket closed")}function h(e){t&&e.name!==t.name&&(n('"%s" works - aborting "%s"',e.name,t.name),s())}function f(){t.removeListener("open",o),t.removeListener("error",a),t.removeListener("close",u),i.removeListener("close",l),i.removeListener("upgrading",h)}c.priorWebsocketSuccess=!1,t.once("open",o),t.once("error",a),t.once("close",u),this.once("close",l),this.once("upgrading",h),t.open()},c.prototype.onOpen=function(){if(n("socket open"),this.readyState="open",c.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){n("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}},c.prototype.onPacket=function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(n('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else n('packet received with socket readyState "%s"',this.readyState)},c.prototype.onHandshake=function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},c.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout((function(){"closed"!==t.readyState&&t.onClose("ping timeout")}),e||t.pingInterval+t.pingTimeout)},c.prototype.setPing=function(){var e=this;clearTimeout(e.pingIntervalTimer),e.pingIntervalTimer=setTimeout((function(){n("writing ping packet - expecting pong within %sms",e.pingTimeout),e.ping(),e.onHeartbeat(e.pingTimeout)}),e.pingInterval)},c.prototype.ping=function(){var e=this;this.sendPacket("ping",(function(){e.emit("ping")}))},c.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},c.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(n("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},c.prototype.write=c.prototype.send=function(e,t,r){return this.sendPacket("message",e,t,r),this},c.prototype.sendPacket=function(e,t,r,n){if("function"==typeof t&&(n=t,t=void 0),"function"==typeof r&&(n=r,r=null),"closing"!==this.readyState&&"closed"!==this.readyState){(r=r||{}).compress=!1!==r.compress;var i={type:e,data:t,options:r};this.emit("packetCreate",i),this.writeBuffer.push(i),n&&this.once("flush",n),this.flush()}},c.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var e=this;this.writeBuffer.length?this.once("drain",(function(){this.upgrading?i():t()})):this.upgrading?i():t()}function t(){e.onClose("forced close"),n("socket closing - telling transport to close"),e.transport.close()}function r(){e.removeListener("upgrade",r),e.removeListener("upgradeError",r),t()}function i(){e.once("upgrade",r),e.once("upgradeError",r)}return this},c.prototype.onError=function(e){n("socket error %j",e),c.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)},c.prototype.onClose=function(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){n('socket close with reason: "%s"',e);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",e,t),this.writeBuffer=[],this.prevBufferLen=0}},c.prototype.filterUpgrades=function(e){for(var t=[],r=0,n=e.length;r<n;r++)~i(this.transports,e[r])&&t.push(e[r]);return t}})),o.register("2GZKi",(function(t,r){var n,i;e(t.exports,"polling",(function(){return n}),(function(e){return n=e})),e(t.exports,"websocket",(function(){return i}),(function(e){return i=e}));var s=o("agCzp"),a=o("lHCt3"),c=o("d7gdF"),u=o("lgf6Z");n=function(e){var t=!1,r=!1,n=!1!==e.jsonp;if("undefined"!=typeof location){var i="https:"===location.protocol,o=location.port;o||(o=i?443:80),t=e.hostname!==location.hostname||o!==e.port,r=e.secure!==i}if(e.xdomain=t,e.xscheme=r,"open"in new s(e)&&!e.forceJSONP)return new a(e);if(!n)throw new Error("JSONP disabled");return new c(e)},i=u})),o.register("agCzp",(function(e,t){var r=o("jXWXD"),n=o("ffLFK");e.exports=function(e){var t=e.xdomain,i=e.xscheme,o=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!t||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!i&&o)return new XDomainRequest}catch(e){}if(!t)try{return new(n[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}})),o.register("jXWXD",(function(e,t){try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}})),o.register("ffLFK",(function(e,t){e.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()})),o.register("lHCt3",(function(e,t){var r=o("agCzp"),n=o("ctoJz"),i=o("gZQx7"),s=o("8Je39"),a=o("cdJLB")("engine.io-client:polling-xhr"),c=o("ffLFK");function u(){}function l(e){if(n.call(this,e),this.requestTimeout=e.requestTimeout,this.extraHeaders=e.extraHeaders,"undefined"!=typeof location){var t="https:"===location.protocol,r=location.port;r||(r=t?443:80),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||r!==e.port,this.xs=e.secure!==t}}function h(e){this.method=e.method||"GET",this.uri=e.uri,this.xd=!!e.xd,this.xs=!!e.xs,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.agent=e.agent,this.isBinary=e.isBinary,this.supportsBinary=e.supportsBinary,this.enablesXDR=e.enablesXDR,this.withCredentials=e.withCredentials,this.requestTimeout=e.requestTimeout,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.extraHeaders=e.extraHeaders,this.create()}if(e.exports=l,e.exports.Request=h,s(l,n),l.prototype.supportsBinary=!0,l.prototype.request=function(e){return(e=e||{}).uri=this.uri(),e.xd=this.xd,e.xs=this.xs,e.agent=this.agent||!1,e.supportsBinary=this.supportsBinary,e.enablesXDR=this.enablesXDR,e.withCredentials=this.withCredentials,e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized,e.requestTimeout=this.requestTimeout,e.extraHeaders=this.extraHeaders,new h(e)},l.prototype.doWrite=function(e,t){var r="string"!=typeof e&&void 0!==e,n=this.request({method:"POST",data:e,isBinary:r}),i=this;n.on("success",t),n.on("error",(function(e){i.onError("xhr post error",e)})),this.sendXhr=n},l.prototype.doPoll=function(){a("xhr poll");var e=this.request(),t=this;e.on("data",(function(e){t.onData(e)})),e.on("error",(function(e){t.onError("xhr poll error",e)})),this.pollXhr=e},i(h.prototype),h.prototype.create=function(){var e={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized;var t=this.xhr=new r(e),n=this;try{a("xhr open %s: %s",this.method,this.uri),t.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var i in t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(i)&&t.setRequestHeader(i,this.extraHeaders[i])}catch(e){}if("POST"===this.method)try{this.isBinary?t.setRequestHeader("Content-type","application/octet-stream"):t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.withCredentials),this.requestTimeout&&(t.timeout=this.requestTimeout),this.hasXDR()?(t.onload=function(){n.onLoad()},t.onerror=function(){n.onError(t.responseText)}):t.onreadystatechange=function(){if(2===t.readyState)try{var e=t.getResponseHeader("Content-Type");(n.supportsBinary&&"application/octet-stream"===e||"application/octet-stream; charset=UTF-8"===e)&&(t.responseType="arraybuffer")}catch(e){}4===t.readyState&&(200===t.status||1223===t.status?n.onLoad():setTimeout((function(){n.onError("number"==typeof t.status?t.status:0)}),0))},a("xhr data %s",this.data),t.send(this.data)}catch(e){return void setTimeout((function(){n.onError(e)}),0)}"undefined"!=typeof document&&(this.index=h.requestsCount++,h.requests[this.index]=this)},h.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},h.prototype.onData=function(e){this.emit("data",e),this.onSuccess()},h.prototype.onError=function(e){this.emit("error",e),this.cleanup(!0)},h.prototype.cleanup=function(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete h.requests[this.index],this.xhr=null}},h.prototype.onLoad=function(){var e;try{var t;try{t=this.xhr.getResponseHeader("Content-Type")}catch(e){}e=("application/octet-stream"===t||"application/octet-stream; charset=UTF-8"===t)&&this.xhr.response||this.xhr.responseText}catch(e){this.onError(e)}null!=e&&this.onData(e)},h.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},h.prototype.abort=function(){this.cleanup()},h.requestsCount=0,h.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",f);else if("function"==typeof addEventListener){addEventListener("onpagehide"in c?"pagehide":"unload",f,!1)}function f(){for(var e in h.requests)h.requests.hasOwnProperty(e)&&h.requests[e].abort()}})),o.register("ctoJz",(function(e,t){var r=o("37m8b"),n=o("aDYB4"),i=o("9dAMg"),s=o("8Je39"),a=o("683LF"),c=o("cdJLB")("engine.io-client:polling");e.exports=l;var u=null!=new(o("agCzp"))({xdomain:!1}).responseType;function l(e){var t=e&&e.forceBase64;u&&!t||(this.supportsBinary=!1),r.call(this,e)}s(l,r),l.prototype.name="polling",l.prototype.doOpen=function(){this.poll()},l.prototype.pause=function(e){var t=this;function r(){c("paused"),t.readyState="paused",e()}if(this.readyState="pausing",this.polling||!this.writable){var n=0;this.polling&&(c("we are currently polling - waiting to pause"),n++,this.once("pollComplete",(function(){c("pre-pause polling complete"),--n||r()}))),this.writable||(c("we are currently writing - waiting to pause"),n++,this.once("drain",(function(){c("pre-pause writing complete"),--n||r()})))}else r()},l.prototype.poll=function(){c("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},l.prototype.onData=function(e){var t=this;c("polling got data %s",e);i.decodePayload(e,this.socket.binaryType,(function(e,r,n){if("opening"===t.readyState&&"open"===e.type&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():c('ignoring poll - transport state "%s"',this.readyState))},l.prototype.doClose=function(){var e=this;function t(){c("writing close packet"),e.write([{type:"close"}])}"open"===this.readyState?(c("transport open - closing"),t()):(c("transport not open - deferring close"),this.once("open",t))},l.prototype.write=function(e){var t=this;this.writable=!1;var r=function(){t.writable=!0,t.emit("drain")};i.encodePayload(e,this.supportsBinary,(function(e){t.doWrite(e,r)}))},l.prototype.uri=function(){var e=this.query||{},t=this.secure?"https":"http",r="";return!1!==this.timestampRequests&&(e[this.timestampParam]=a()),this.supportsBinary||e.sid||(e.b64=1),e=n.encode(e),this.port&&("https"===t&&443!==Number(this.port)||"http"===t&&80!==Number(this.port))&&(r=":"+this.port),e.length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+r+this.path+e}})),o.register("37m8b",(function(e,t){var r=o("9dAMg"),n=o("gZQx7");function i(e){this.path=e.path,this.hostname=e.hostname,this.port=e.port,this.secure=e.secure,this.query=e.query,this.timestampParam=e.timestampParam,this.timestampRequests=e.timestampRequests,this.readyState="",this.agent=e.agent||!1,this.socket=e.socket,this.enablesXDR=e.enablesXDR,this.withCredentials=e.withCredentials,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.forceNode=e.forceNode,this.isReactNative=e.isReactNative,this.extraHeaders=e.extraHeaders,this.localAddress=e.localAddress}e.exports=i,n(i.prototype),i.prototype.onError=function(e,t){var r=new Error(e);return r.type="TransportError",r.description=t,this.emit("error",r),this},i.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},i.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},i.prototype.send=function(e){if("open"!==this.readyState)throw new Error("Transport not open");this.write(e)},i.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},i.prototype.onData=function(e){var t=r.decodePacket(e,this.socket.binaryType);this.onPacket(t)},i.prototype.onPacket=function(e){this.emit("packet",e)},i.prototype.onClose=function(){this.readyState="closed",this.emit("close")}})),o.register("9dAMg",(function(t,r){var n,i,s,a,c,u,l,h,f,d,p;e(t.exports,"protocol",(function(){return n}),(function(e){return n=e})),e(t.exports,"packets",(function(){return i}),(function(e){return i=e})),e(t.exports,"encodePacket",(function(){return s}),(function(e){return s=e})),e(t.exports,"encodeBase64Packet",(function(){return a}),(function(e){return a=e})),e(t.exports,"decodePacket",(function(){return c}),(function(e){return c=e})),e(t.exports,"decodeBase64Packet",(function(){return u}),(function(e){return u=e})),e(t.exports,"encodePayload",(function(){return l}),(function(e){return l=e})),e(t.exports,"encodePayloadAsBlob",(function(){return d}),(function(e){return d=e})),e(t.exports,"encodePayloadAsArrayBuffer",(function(){return f}),(function(e){return f=e})),e(t.exports,"decodePayload",(function(){return h}),(function(e){return h=e})),e(t.exports,"decodePayloadAsBinary",(function(){return p}),(function(e){return p=e}));var g,m=o("8ZPtT"),y=o("dSjSc"),v=o("xG03r"),w=o("7yXxI"),b=o("hRvux");"undefined"!=typeof ArrayBuffer&&(g=o("ccgZq"));var A="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),E="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),x=A||E;n=3;var S=i={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},C=m(S),k={type:"error",data:"parser error"},_=o("wIt1q");function P(e,t,r){for(var n=new Array(e.length),i=w(e.length,r),o=function(e,r,i){t(r,(function(t,r){n[e]=r,i(t,n)}))},s=0;s<e.length;s++)o(s,e[s],i)}s=function(e,t,r,n){"function"==typeof t&&(n=t,t=!1),"function"==typeof r&&(n=r,r=null);var o=void 0===e.data?void 0:e.data.buffer||e.data;if("undefined"!=typeof ArrayBuffer&&o instanceof ArrayBuffer)return function(e,t,r){if(!t)return a(e,r);var n=e.data,i=new Uint8Array(n),o=new Uint8Array(1+n.byteLength);o[0]=S[e.type];for(var s=0;s<i.length;s++)o[s+1]=i[s];return r(o.buffer)}(e,t,n);if(void 0!==_&&o instanceof _)return function(e,t,r){if(!t)return a(e,r);if(x)return function(e,t,r){if(!t)return a(e,r);var n=new FileReader;return n.onload=function(){s({type:e.type,data:n.result},t,!0,r)},n.readAsArrayBuffer(e.data)}(e,t,r);var n=new Uint8Array(1);n[0]=S[e.type];var i=new _([n.buffer,e.data]);return r(i)}(e,t,n);if(o&&o.base64)return function(e,t){var r="b"+i[e.type]+e.data.data;return t(r)}(e,n);var c=S[e.type];return void 0!==e.data&&(c+=r?b.encode(String(e.data),{strict:!1}):String(e.data)),n(""+c)},a=function(e,t){var r,n="b"+i[e.type];if(void 0!==_&&e.data instanceof _){var o=new FileReader;return o.onload=function(){var e=o.result.split(",")[1];t(n+e)},o.readAsDataURL(e.data)}try{r=String.fromCharCode.apply(null,new Uint8Array(e.data))}catch(t){for(var s=new Uint8Array(e.data),a=new Array(s.length),c=0;c<s.length;c++)a[c]=s[c];r=String.fromCharCode.apply(null,a)}return n+=btoa(r),t(n)},c=function(e,t,r){if(void 0===e)return k;if("string"==typeof e){if("b"===e.charAt(0))return u(e.substr(1),t);if(r&&!1===(e=function(e){try{e=b.decode(e,{strict:!1})}catch(e){return!1}return e}(e)))return k;var n=e.charAt(0);return Number(n)==n&&C[n]?e.length>1?{type:C[n],data:e.substring(1)}:{type:C[n]}:k}n=new Uint8Array(e)[0];var i=v(e,1);return _&&"blob"===t&&(i=new _([i])),{type:C[n],data:i}},u=function(e,t){var r=C[e.charAt(0)];if(!g)return{type:r,data:{base64:!0,data:e.substr(1)}};var n=g.decode(e.substr(1));return"blob"===t&&_&&(n=new _([n])),{type:r,data:n}},l=function(e,t,r){"function"==typeof t&&(r=t,t=null);var n=y(e);if(t&&n)return _&&!x?d(e,r):f(e,r);if(!e.length)return r("0:");P(e,(function(e,r){s(e,!!n&&t,!1,(function(e){r(null,function(e){return e.length+":"+e}(e))}))}),(function(e,t){return r(t.join(""))}))},h=function(e,t,r){if("string"!=typeof e)return p(e,t,r);var n;if("function"==typeof t&&(r=t,t=null),""===e)return r(k,0,1);for(var i,o,s="",a=0,u=e.length;a<u;a++){var l=e.charAt(a);if(":"===l){if(""===s||s!=(i=Number(s)))return r(k,0,1);if(s!=(o=e.substr(a+1,i)).length)return r(k,0,1);if(o.length){if(n=c(o,t,!1),k.type===n.type&&k.data===n.data)return r(k,0,1);if(!1===r(n,a+i,u))return}a+=i,s=""}else s+=l}return""!==s?r(k,0,1):void 0},f=function(e,t){if(!e.length)return t(new ArrayBuffer(0));P(e,(function(e,t){s(e,!0,!0,(function(e){return t(null,e)}))}),(function(e,r){var n=r.reduce((function(e,t){var r;return e+(r="string"==typeof t?t.length:t.byteLength).toString().length+r+2}),0),i=new Uint8Array(n),o=0;return r.forEach((function(e){var t="string"==typeof e,r=e;if(t){for(var n=new Uint8Array(e.length),s=0;s<e.length;s++)n[s]=e.charCodeAt(s);r=n.buffer}i[o++]=t?0:1;var a=r.byteLength.toString();for(s=0;s<a.length;s++)i[o++]=parseInt(a[s]);i[o++]=255;for(n=new Uint8Array(r),s=0;s<n.length;s++)i[o++]=n[s]})),t(i.buffer)}))},d=function(e,t){P(e,(function(e,t){s(e,!0,!0,(function(e){var r=new Uint8Array(1);if(r[0]=1,"string"==typeof e){for(var n=new Uint8Array(e.length),i=0;i<e.length;i++)n[i]=e.charCodeAt(i);e=n.buffer,r[0]=0}var o=(e instanceof ArrayBuffer?e.byteLength:e.size).toString(),s=new Uint8Array(o.length+1);for(i=0;i<o.length;i++)s[i]=parseInt(o[i]);if(s[o.length]=255,_){var a=new _([r.buffer,s.buffer,e]);t(null,a)}}))}),(function(e,r){return t(new _(r))}))},p=function(e,t,r){"function"==typeof t&&(r=t,t=null);for(var n=e,i=[];n.byteLength>0;){for(var o=new Uint8Array(n),s=0===o[0],a="",u=1;255!==o[u];u++){if(a.length>310)return r(k,0,1);a+=o[u]}n=v(n,2+a.length),a=parseInt(a);var l=v(n,0,a);if(s)try{l=String.fromCharCode.apply(null,new Uint8Array(l))}catch(e){var h=new Uint8Array(l);l="";for(u=0;u<h.length;u++)l+=String.fromCharCode(h[u])}i.push(l),n=v(n,a)}var f=i.length;i.forEach((function(e,n){r(c(e,t,!0),n,f)}))}})),o.register("8ZPtT",(function(e,t){e.exports=Object.keys||function(e){var t=[],r=Object.prototype.hasOwnProperty;for(var n in e)r.call(e,n)&&t.push(n);return t}})),o.register("dSjSc",(function(e,t){var r=o("b8Dez").Buffer,n=o("77ozp"),i=Object.prototype.toString,s="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);e.exports=function e(t){if(!t||"object"!=typeof t)return!1;if(n(t)){for(var i=0,o=t.length;i<o;i++)if(e(t[i]))return!0;return!1}if("function"==typeof r&&r.isBuffer&&r.isBuffer(t)||"function"==typeof ArrayBuffer&&t instanceof ArrayBuffer||s&&t instanceof Blob||a&&t instanceof File)return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return e(t.toJSON(),!0);for(var c in t)if(Object.prototype.hasOwnProperty.call(t,c)&&e(t[c]))return!0;return!1}})),o.register("xG03r",(function(e,t){e.exports=function(e,t,r){var n=e.byteLength;if(t=t||0,r=r||n,e.slice)return e.slice(t,r);if(t<0&&(t+=n),r<0&&(r+=n),r>n&&(r=n),t>=n||t>=r||0===n)return new ArrayBuffer(0);for(var i=new Uint8Array(e),o=new Uint8Array(r-t),s=t,a=0;s<r;s++,a++)o[a]=i[s];return o.buffer}})),o.register("7yXxI",(function(e,t){function r(){}e.exports=function(e,t,n){var i=!1;return n=n||r,o.count=e,0===e?t():o;function o(e,r){if(o.count<=0)throw new Error("after called too many times");--o.count,e?(i=!0,t(e),t=n):0!==o.count||i||t(null,r)}}})),o.register("hRvux",(function(e,t){
/*! https://mths.be/utf8js v2.1.2 by @mathias */var r,n,i,o=String.fromCharCode;function s(e){for(var t,r,n=[],i=0,o=e.length;i<o;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<o?56320==(64512&(r=e.charCodeAt(i++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),i--):n.push(t);return n}function a(e,t){if(e>=55296&&e<=57343){if(t)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function c(e,t){return o(e>>t&63|128)}function u(e,t){if(0==(4294967168&e))return o(e);var r="";return 0==(4294965248&e)?r=o(e>>6&31|192):0==(4294901760&e)?(a(e,t)||(e=65533),r=o(e>>12&15|224),r+=c(e,6)):0==(4292870144&e)&&(r=o(e>>18&7|240),r+=c(e,12),r+=c(e,6)),r+=o(63&e|128)}function l(){if(i>=n)throw Error("Invalid byte index");var e=255&r[i];if(i++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function h(e){var t,o;if(i>n)throw Error("Invalid byte index");if(i==n)return!1;if(t=255&r[i],i++,0==(128&t))return t;if(192==(224&t)){if((o=(31&t)<<6|l())>=128)return o;throw Error("Invalid continuation byte")}if(224==(240&t)){if((o=(15&t)<<12|l()<<6|l())>=2048)return a(o,e)?o:65533;throw Error("Invalid continuation byte")}if(240==(248&t)&&(o=(7&t)<<18|l()<<12|l()<<6|l())>=65536&&o<=1114111)return o;throw Error("Invalid UTF-8 detected")}e.exports={version:"2.1.2",encode:function(e,t){for(var r=!1!==(t=t||{}).strict,n=s(e),i=n.length,o=-1,a="";++o<i;)a+=u(n[o],r);return a},decode:function(e,t){var a=!1!==(t=t||{}).strict;r=s(e),n=r.length,i=0;for(var c,u=[];!1!==(c=h(a));)u.push(c);return function(e){for(var t,r=e.length,n=-1,i="";++n<r;)(t=e[n])>65535&&(i+=o((t-=65536)>>>10&1023|55296),t=56320|1023&t),i+=o(t);return i}(u)}}})),o.register("ccgZq",(function(t,r){var n,i,o;e(t.exports,"encode",(function(){return n}),(function(e){return n=e})),e(t.exports,"decode",(function(){return i}),(function(e){return i=e})),o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=function(e){var t,r=new Uint8Array(e),n=r.length,i="";for(t=0;t<n;t+=3)i+=o[r[t]>>2],i+=o[(3&r[t])<<4|r[t+1]>>4],i+=o[(15&r[t+1])<<2|r[t+2]>>6],i+=o[63&r[t+2]];return n%3==2?i=i.substring(0,i.length-1)+"=":n%3==1&&(i=i.substring(0,i.length-2)+"=="),i},i=function(e){var t,r,n,i,s,a=.75*e.length,c=e.length,u=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var l=new ArrayBuffer(a),h=new Uint8Array(l);for(t=0;t<c;t+=4)r=o.indexOf(e[t]),n=o.indexOf(e[t+1]),i=o.indexOf(e[t+2]),s=o.indexOf(e[t+3]),h[u++]=r<<2|n>>4,h[u++]=(15&n)<<4|i>>2,h[u++]=(3&i)<<6|63&s;return l}})),o.register("wIt1q",(function(e,t){var r=void 0!==r?r:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder,n=function(){try{return 2===new Blob(["hi"]).size}catch(e){return!1}}(),i=n&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(e){return!1}}(),o=r&&r.prototype.append&&r.prototype.getBlob;function s(e){return e.map((function(e){if(e.buffer instanceof ArrayBuffer){var t=e.buffer;if(e.byteLength!==t.byteLength){var r=new Uint8Array(e.byteLength);r.set(new Uint8Array(t,e.byteOffset,e.byteLength)),t=r.buffer}return t}return e}))}function a(e,t){t=t||{};var n=new r;return s(e).forEach((function(e){n.append(e)})),t.type?n.getBlob(t.type):n.getBlob()}function c(e,t){return new Blob(s(e),t||{})}"undefined"!=typeof Blob&&(a.prototype=Blob.prototype,c.prototype=Blob.prototype),e.exports=n?i?Blob:c:o?a:void 0})),o.register("aDYB4",(function(t,r){var n,i;e(t.exports,"encode",(function(){return n}),(function(e){return n=e})),e(t.exports,"decode",(function(){return i}),(function(e){return i=e})),n=function(e){var t="";for(var r in e)e.hasOwnProperty(r)&&(t.length&&(t+="&"),t+=encodeURIComponent(r)+"="+encodeURIComponent(e[r]));return t},i=function(e){for(var t={},r=e.split("&"),n=0,i=r.length;n<i;n++){var o=r[n].split("=");t[decodeURIComponent(o[0])]=decodeURIComponent(o[1])}return t}})),o.register("8Je39",(function(e,t){e.exports=function(e,t){var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}})),o.register("683LF",(function(e,t){var r,n="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i={},o=0,s=0;function a(e){var t="";do{t=n[e%64]+t,e=Math.floor(e/64)}while(e>0);return t}function c(){var e=a(+new Date);return e!==r?(o=0,r=e):e+"."+a(o++)}for(;s<64;s++)i[n[s]]=s;c.encode=a,c.decode=function(e){var t=0;for(s=0;s<e.length;s++)t=64*t+i[e.charAt(s)];return t},e.exports=c})),o.register("cdJLB",(function(e,t){var r=o("iQPfu");function n(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=void 0),e}(t=e.exports=o("hGWVE")).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var r=this.useColors;if(e[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+e[0]+(r?"%c ":" ")+"+"+t.humanize(this.diff),!r)return;var n="color: "+this.color;e.splice(1,0,n,"color: inherit");var i=0,o=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(i++,"%c"===e&&(o=i))})),e.splice(o,0,n)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=n,t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(n())})),o.register("hGWVE",(function(e,t){function r(e){var r;function i(){if(i.enabled){var e=i,n=+new Date,o=n-(r||n);e.diff=o,e.prev=r,e.curr=n,r=n;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=t.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var c=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,(function(r,n){if("%%"===r)return r;c++;var i=t.formatters[n];if("function"==typeof i){var o=s[c];r=i.call(e,o),s.splice(c,1),c--}return r})),t.formatArgs.call(e,s);var u=i.log||t.log||console.log.bind(console);u.apply(e,s)}}return i.namespace=e,i.enabled=t.enabled(e),i.useColors=t.useColors(),i.color=function(e){var r,n=0;for(r in e)n=(n<<5)-n+e.charCodeAt(r),n|=0;return t.colors[Math.abs(n)%t.colors.length]}(e),i.destroy=n,"function"==typeof t.init&&t.init(i),t.instances.push(i),i}function n(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var r;t.save(e),t.names=[],t.skips=[];var n=("string"==typeof e?e:"").split(/[\s,]+/),i=n.length;for(r=0;r<i;r++)n[r]&&("-"===(e=n[r].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(r=0;r<t.instances.length;r++){var o=t.instances[r];o.enabled=t.enabled(o.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var r,n;for(r=0,n=t.skips.length;r<n;r++)if(t.skips[r].test(e))return!1;for(r=0,n=t.names.length;r<n;r++)if(t.names[r].test(e))return!0;return!1},t.humanize=o("2yB3C"),t.instances=[],t.names=[],t.skips=[],t.formatters={}})),o.register("2yB3C",(function(e,t){var r=1e3,n=6e4,i=36e5,o=864e5,s=315576e5;function a(e,t,r){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+r:Math.ceil(e/t)+" "+r+"s"}e.exports=function(e,t){t=t||{};var c,u=typeof e;if("string"===u&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var a=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*i;case"minutes":case"minute":case"mins":case"min":case"m":return a*n;case"seconds":case"second":case"secs":case"sec":case"s":return a*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(e);if("number"===u&&!1===isNaN(e))return t.long?a(c=e,o,"day")||a(c,i,"hour")||a(c,n,"minute")||a(c,r,"second")||c+" ms":function(e){return e>=o?Math.round(e/o)+"d":e>=i?Math.round(e/i)+"h":e>=n?Math.round(e/n)+"m":e>=r?Math.round(e/r)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}})),o.register("d7gdF",(function(e,t){var r=o("ctoJz"),n=o("8Je39"),i=o("ffLFK");e.exports=l;var s,a=/\n/g,c=/\\n/g;function u(){}function l(e){r.call(this,e),this.query=this.query||{},s||(s=i.___eio=i.___eio||[]),this.index=s.length;var t=this;s.push((function(e){t.onData(e)})),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",(function(){t.script&&(t.script.onerror=u)}),!1)}n(l,r),l.prototype.supportsBinary=!1,l.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),r.prototype.doClose.call(this)},l.prototype.doPoll=function(){var e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};var r=document.getElementsByTagName("script")[0];r?r.parentNode.insertBefore(t,r):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){var e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)}),100)},l.prototype.doWrite=function(e,t){var r=this;if(!this.form){var n,i=document.createElement("form"),o=document.createElement("textarea"),s=this.iframeId="eio_iframe_"+this.index;i.className="socketio",i.style.position="absolute",i.style.top="-1000px",i.style.left="-1000px",i.target=s,i.method="POST",i.setAttribute("accept-charset","utf-8"),o.name="d",i.appendChild(o),document.body.appendChild(i),this.form=i,this.area=o}function u(){l(),t()}function l(){if(r.iframe)try{r.form.removeChild(r.iframe)}catch(e){r.onError("jsonp polling iframe removal error",e)}try{var e='<iframe src="javascript:0" name="'+r.iframeId+'">';n=document.createElement(e)}catch(e){(n=document.createElement("iframe")).name=r.iframeId,n.src="javascript:0"}n.id=r.iframeId,r.form.appendChild(n),r.iframe=n}this.form.action=this.uri(),l(),e=e.replace(c,"\\\n"),this.area.value=e.replace(a,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===r.iframe.readyState&&u()}:this.iframe.onload=u}})),o.register("lgf6Z",(function(e,t){var r,n,i=o("b8Dez").Buffer,s=o("37m8b"),a=o("9dAMg"),c=o("aDYB4"),u=o("8Je39"),l=o("683LF"),h=o("cdJLB")("engine.io-client:websocket");if("undefined"!=typeof WebSocket?r=WebSocket:"undefined"!=typeof self&&(r=self.WebSocket||self.MozWebSocket),"undefined"==typeof window)try{n=o("WBjuC")}catch(e){}var f=r||n;function d(e){e&&e.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=e.perMessageDeflate,this.usingBrowserWebSocket=r&&!e.forceNode,this.protocols=e.protocols,this.usingBrowserWebSocket||(f=n),s.call(this,e)}e.exports=d,u(d,s),d.prototype.name="websocket",d.prototype.supportsBinary=!0,d.prototype.doOpen=function(){if(this.check()){var e=this.uri(),t=this.protocols,r={};this.isReactNative||(r.agent=this.agent,r.perMessageDeflate=this.perMessageDeflate,r.pfx=this.pfx,r.key=this.key,r.passphrase=this.passphrase,r.cert=this.cert,r.ca=this.ca,r.ciphers=this.ciphers,r.rejectUnauthorized=this.rejectUnauthorized),this.extraHeaders&&(r.headers=this.extraHeaders),this.localAddress&&(r.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?t?new f(e,t):new f(e):new f(e,t,r)}catch(e){return this.emit("error",e)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},d.prototype.addEventListeners=function(){var e=this;this.ws.onopen=function(){e.onOpen()},this.ws.onclose=function(){e.onClose()},this.ws.onmessage=function(t){e.onData(t.data)},this.ws.onerror=function(t){e.onError("websocket error",t)}},d.prototype.write=function(e){var t=this;this.writable=!1;for(var r=e.length,n=0,o=r;n<o;n++)!function(e){a.encodePacket(e,t.supportsBinary,(function(n){if(!t.usingBrowserWebSocket){var o={};if(e.options&&(o.compress=e.options.compress),t.perMessageDeflate)("string"==typeof n?i.byteLength(n):n.length)<t.perMessageDeflate.threshold&&(o.compress=!1)}try{t.usingBrowserWebSocket?t.ws.send(n):t.ws.send(n,o)}catch(e){h("websocket closed before onclose event")}--r||s()}))}(e[n]);function s(){t.emit("flush"),setTimeout((function(){t.writable=!0,t.emit("drain")}),0)}},d.prototype.onClose=function(){s.prototype.onClose.call(this)},d.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},d.prototype.uri=function(){var e=this.query||{},t=this.secure?"wss":"ws",r="";return this.port&&("wss"===t&&443!==Number(this.port)||"ws"===t&&80!==Number(this.port))&&(r=":"+this.port),this.timestampRequests&&(e[this.timestampParam]=l()),this.supportsBinary||(e.b64=1),(e=c.encode(e)).length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+r+this.path+e},d.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===d.prototype.name)}})),o.register("iWYOO",(function(e,t){var r=[].indexOf;e.exports=function(e,t){if(r)return e.indexOf(t);for(var n=0;n<e.length;++n)if(e[n]===t)return n;return-1}})),o.register("9eK3d",(function(e,t){var r=o("j0wbb"),n=o("gZQx7"),i=o("e88nb"),s=o("6qhog"),a=o("a3vhi"),c=o("lAIQ5")("socket.io-client:socket"),u=o("aDYB4"),l=o("dSjSc");e.exports=d;var h={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},f=n.prototype.emit;function d(e,t,r){this.io=e,this.nsp=t,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},r&&r.query&&(this.query=r.query),this.io.autoConnect&&this.open()}n(d.prototype),d.prototype.subEvents=function(){if(!this.subs){var e=this.io;this.subs=[s(e,"open",a(this,"onopen")),s(e,"packet",a(this,"onpacket")),s(e,"close",a(this,"onclose"))]}},d.prototype.open=d.prototype.connect=function(){return this.connected||(this.subEvents(),this.io.reconnecting||this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting")),this},d.prototype.send=function(){var e=i(arguments);return e.unshift("message"),this.emit.apply(this,e),this},d.prototype.emit=function(e){if(h.hasOwnProperty(e))return f.apply(this,arguments),this;var t=i(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:l(t))?r.BINARY_EVENT:r.EVENT,data:t,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(c("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},d.prototype.packet=function(e){e.nsp=this.nsp,this.io.packet(e)},d.prototype.onopen=function(){if(c("transport is open - connecting"),"/"!==this.nsp)if(this.query){var e="object"==typeof this.query?u.encode(this.query):this.query;c("sending connect packet with query %s",e),this.packet({type:r.CONNECT,query:e})}else this.packet({type:r.CONNECT})},d.prototype.onclose=function(e){c("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",e)},d.prototype.onpacket=function(e){var t=e.nsp===this.nsp,n=e.type===r.ERROR&&"/"===e.nsp;if(t||n)switch(e.type){case r.CONNECT:this.onconnect();break;case r.EVENT:case r.BINARY_EVENT:this.onevent(e);break;case r.ACK:case r.BINARY_ACK:this.onack(e);break;case r.DISCONNECT:this.ondisconnect();break;case r.ERROR:this.emit("error",e.data)}},d.prototype.onevent=function(e){var t=e.data||[];c("emitting event %j",t),null!=e.id&&(c("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?f.apply(this,t):this.receiveBuffer.push(t)},d.prototype.ack=function(e){var t=this,n=!1;return function(){if(!n){n=!0;var o=i(arguments);c("sending ack %j",o),t.packet({type:l(o)?r.BINARY_ACK:r.ACK,id:e,data:o})}}},d.prototype.onack=function(e){var t=this.acks[e.id];"function"==typeof t?(c("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):c("bad ack %s",e.id)},d.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},d.prototype.emitBuffered=function(){var e;for(e=0;e<this.receiveBuffer.length;e++)f.apply(this,this.receiveBuffer[e]);for(this.receiveBuffer=[],e=0;e<this.sendBuffer.length;e++)this.packet(this.sendBuffer[e]);this.sendBuffer=[]},d.prototype.ondisconnect=function(){c("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},d.prototype.destroy=function(){if(this.subs){for(var e=0;e<this.subs.length;e++)this.subs[e].destroy();this.subs=null}this.io.destroy(this)},d.prototype.close=d.prototype.disconnect=function(){return this.connected&&(c("performing disconnect (%s)",this.nsp),this.packet({type:r.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},d.prototype.compress=function(e){return this.flags.compress=e,this},d.prototype.binary=function(e){return this.flags.binary=e,this}})),o.register("e88nb",(function(e,t){e.exports=function(e,t){for(var r=[],n=(t=t||0)||0;n<e.length;n++)r[n-t]=e[n];return r}})),o.register("6qhog",(function(e,t){e.exports=function(e,t,r){return e.on(t,r),{destroy:function(){e.removeListener(t,r)}}}})),o.register("a3vhi",(function(e,t){var r=[].slice;e.exports=function(e,t){if("string"==typeof t&&(t=e[t]),"function"!=typeof t)throw new Error("bind() requires a function");var n=r.call(arguments,2);return function(){return t.apply(e,n.concat(r.call(arguments)))}}})),o.register("iuNav",(function(e,t){function r(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=r,r.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),r=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-r:e+r}return 0|Math.min(e,this.max)},r.prototype.reset=function(){this.attempts=0},r.prototype.setMin=function(e){this.ms=e},r.prototype.setMax=function(e){this.max=e},r.prototype.setJitter=function(e){this.jitter=e}})),o.register("3A4KR",(function(t,r){var n,i,o,s,a,c,u,l,h,f,d,p,g,m,y,v,w,b,A,E,x,S,C,k,_,P,R,O,I,N,T,M,B,F,L;e(t.exports,"Children",(function(){return n}),(function(e){return n=e})),e(t.exports,"Component",(function(){return i}),(function(e){return i=e})),e(t.exports,"Fragment",(function(){return o}),(function(e){return o=e})),e(t.exports,"Profiler",(function(){return s}),(function(e){return s=e})),e(t.exports,"PureComponent",(function(){return a}),(function(e){return a=e})),e(t.exports,"StrictMode",(function(){return c}),(function(e){return c=e})),e(t.exports,"Suspense",(function(){return u}),(function(e){return u=e})),e(t.exports,"__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED",(function(){return l}),(function(e){return l=e})),e(t.exports,"cloneElement",(function(){return h}),(function(e){return h=e})),e(t.exports,"createContext",(function(){return f}),(function(e){return f=e})),e(t.exports,"createElement",(function(){return d}),(function(e){return d=e})),e(t.exports,"createFactory",(function(){return p}),(function(e){return p=e})),e(t.exports,"createRef",(function(){return g}),(function(e){return g=e})),e(t.exports,"forwardRef",(function(){return m}),(function(e){return m=e})),e(t.exports,"isValidElement",(function(){return y}),(function(e){return y=e})),e(t.exports,"lazy",(function(){return v}),(function(e){return v=e})),e(t.exports,"memo",(function(){return w}),(function(e){return w=e})),e(t.exports,"startTransition",(function(){return b}),(function(e){return b=e})),e(t.exports,"unstable_act",(function(){return A}),(function(e){return A=e})),e(t.exports,"useCallback",(function(){return E}),(function(e){return E=e})),e(t.exports,"useContext",(function(){return x}),(function(e){return x=e})),e(t.exports,"useDebugValue",(function(){return S}),(function(e){return S=e})),e(t.exports,"useDeferredValue",(function(){return C}),(function(e){return C=e})),e(t.exports,"useEffect",(function(){return k}),(function(e){return k=e})),e(t.exports,"useId",(function(){return _}),(function(e){return _=e})),e(t.exports,"useImperativeHandle",(function(){return P}),(function(e){return P=e})),e(t.exports,"useInsertionEffect",(function(){return R}),(function(e){return R=e})),e(t.exports,"useLayoutEffect",(function(){return O}),(function(e){return O=e})),e(t.exports,"useMemo",(function(){return I}),(function(e){return I=e})),e(t.exports,"useReducer",(function(){return N}),(function(e){return N=e})),e(t.exports,"useRef",(function(){return T}),(function(e){return T=e})),e(t.exports,"useState",(function(){return M}),(function(e){return M=e})),e(t.exports,"useSyncExternalStore",(function(){return B}),(function(e){return B=e})),e(t.exports,"useTransition",(function(){return F}),(function(e){return F=e})),e(t.exports,"version",(function(){return L}),(function(e){return L=e}));var j=Symbol.for("react.element"),D=Symbol.for("react.portal"),U=Symbol.for("react.fragment"),z=Symbol.for("react.strict_mode"),q=Symbol.for("react.profiler"),K=Symbol.for("react.provider"),G=Symbol.for("react.context"),W=Symbol.for("react.forward_ref"),H=Symbol.for("react.suspense"),J=Symbol.for("react.memo"),V=Symbol.for("react.lazy"),Q=Symbol.iterator;var Z={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Y=Object.assign,X={};function $(e,t,r){this.props=e,this.context=t,this.refs=X,this.updater=r||Z}function ee(){}function te(e,t,r){this.props=e,this.context=t,this.refs=X,this.updater=r||Z}$.prototype.isReactComponent={},$.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},$.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},ee.prototype=$.prototype;var re=te.prototype=new ee;re.constructor=te,Y(re,$.prototype),re.isPureReactComponent=!0;var ne=Array.isArray,ie=Object.prototype.hasOwnProperty,oe={current:null},se={key:!0,ref:!0,__self:!0,__source:!0};function ae(e,t,r){var n,i={},o=null,s=null;if(null!=t)for(n in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(o=""+t.key),t)ie.call(t,n)&&!se.hasOwnProperty(n)&&(i[n]=t[n]);var a=arguments.length-2;if(1===a)i.children=r;else if(1<a){for(var c=Array(a),u=0;u<a;u++)c[u]=arguments[u+2];i.children=c}if(e&&e.defaultProps)for(n in a=e.defaultProps)void 0===i[n]&&(i[n]=a[n]);return{$$typeof:j,type:e,key:o,ref:s,props:i,_owner:oe.current}}function ce(e){return"object"==typeof e&&null!==e&&e.$$typeof===j}var ue=/\/+/g;function le(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function he(e,t,r,n,i){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var s,a=!1;if(null===e)a=!0;else switch(o){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case j:case D:a=!0}}if(a)return i=i(a=e),e=""===n?"."+le(a,0):n,ne(i)?(r="",null!=e&&(r=e.replace(ue,"$&/")+"/"),he(i,t,r,"",(function(e){return e}))):null!=i&&(ce(i)&&(i=function(e,t){return{$$typeof:j,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,r+(!i.key||a&&a.key===i.key?"":(""+i.key).replace(ue,"$&/")+"/")+e)),t.push(i)),1;if(a=0,n=""===n?".":n+":",ne(e))for(var c=0;c<e.length;c++){var u=n+le(o=e[c],c);a+=he(o,t,r,u,i)}else if("function"==typeof(u=null===(s=e)||"object"!=typeof s?null:"function"==typeof(s=Q&&s[Q]||s["@@iterator"])?s:null))for(e=u.call(e),c=0;!(o=e.next()).done;)a+=he(o=o.value,t,r,u=n+le(o,c++),i);else if("object"===o)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return a}function fe(e,t,r){if(null==e)return e;var n=[],i=0;return he(e,n,"","",(function(e){return t.call(r,e,i++)})),n}function de(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var pe={current:null},ge={transition:null};n={map:fe,forEach:function(e,t,r){fe(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return fe(e,(function(){t++})),t},toArray:function(e){return fe(e,(function(e){return e}))||[]},only:function(e){if(!ce(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},i=$,o=U,s=q,a=te,c=z,u=H,l={ReactCurrentDispatcher:pe,ReactCurrentBatchConfig:ge,ReactCurrentOwner:oe},h=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var n=Y({},e.props),i=e.key,o=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(o=t.ref,s=oe.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var a=e.type.defaultProps;for(c in t)ie.call(t,c)&&!se.hasOwnProperty(c)&&(n[c]=void 0===t[c]&&void 0!==a?a[c]:t[c])}var c=arguments.length-2;if(1===c)n.children=r;else if(1<c){a=Array(c);for(var u=0;u<c;u++)a[u]=arguments[u+2];n.children=a}return{$$typeof:j,type:e.type,key:i,ref:o,props:n,_owner:s}},f=function(e){return(e={$$typeof:G,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:K,_context:e},e.Consumer=e},d=ae,p=function(e){var t=ae.bind(null,e);return t.type=e,t},g=function(){return{current:null}},m=function(e){return{$$typeof:W,render:e}},y=ce,v=function(e){return{$$typeof:V,_payload:{_status:-1,_result:e},_init:de}},w=function(e,t){return{$$typeof:J,type:e,compare:void 0===t?null:t}},b=function(e){var t=ge.transition;ge.transition={};try{e()}finally{ge.transition=t}},A=function(){throw Error("act(...) is not supported in production builds of React.")},E=function(e,t){return pe.current.useCallback(e,t)},x=function(e){return pe.current.useContext(e)},S=function(){},C=function(e){return pe.current.useDeferredValue(e)},k=function(e,t){return pe.current.useEffect(e,t)},_=function(){return pe.current.useId()},P=function(e,t,r){return pe.current.useImperativeHandle(e,t,r)},R=function(e,t){return pe.current.useInsertionEffect(e,t)},O=function(e,t){return pe.current.useLayoutEffect(e,t)},I=function(e,t){return pe.current.useMemo(e,t)},N=function(e,t,r){return pe.current.useReducer(e,t,r)},T=function(e){return pe.current.useRef(e)},M=function(e){return pe.current.useState(e)},B=function(e,t,r){return pe.current.useSyncExternalStore(e,t,r)},F=function(){return pe.current.useTransition()},L="18.2.0"})),o.register("icXFK",(function(e,t){var r=o("dV0Jg"),n=o("1BhqT"),i=t&&!t.nodeType&&t,s=i&&e&&!e.nodeType&&e,a=s&&s.exports===i?r.Buffer:void 0,c=(a?a.isBuffer:void 0)||n;e.exports=c})),o.register("dV0Jg",(function(e,t){var r=o("i3zF1"),n="object"==typeof self&&self&&self.Object===Object&&self,i=r||n||Function("return this")();e.exports=i})),o.register("i3zF1",(function(e,r){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n})),o.register("1BhqT",(function(e,t){e.exports=function(){return!1}})),o.register("g4FAe",(function(e,t){var r=o("i3zF1"),n=t&&!t.nodeType&&t,i=n&&e&&!e.nodeType&&e,s=i&&i.exports===n&&r.process,a=function(){try{var e=i&&i.require&&i.require("util").types;return e||s&&s.binding&&s.binding("util")}catch(e){}}();e.exports=a})),o.register("arjK4",(function(e,t){var r=o("dV0Jg"),n=t&&!t.nodeType&&t,i=n&&e&&!e.nodeType&&e,s=i&&i.exports===n?r.Buffer:void 0,a=s?s.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var r=e.length,n=a?a(r):new e.constructor(r);return e.copy(n),n}})),o("22Rdj").register(JSON.parse('{"dG6tI":"background.f74158da.js","3m7r6":"dialog.1a477ff7.html","2A3mm":"popup.5d78e648.js","ctEUo":"popup.9a58e125.css"}'));var s=o("8WZ8I"),a={};e(a,"logger",(function(){return Oc})),e(a,"Signer",(function(){return Wr.Signer})),e(a,"Wallet",(function(){return Si.Wallet})),e(a,"VoidSigner",(function(){return Wr.VoidSigner})),e(a,"getDefaultProvider",(function(){return fc})),e(a,"providers",(function(){return Do})),e(a,"BaseContract",(function(){return c.BaseContract})),e(a,"Contract",(function(){return c.Contract})),e(a,"ContractFactory",(function(){return c.ContractFactory})),e(a,"BigNumber",(function(){return y})),e(a,"FixedNumber",(function(){return N})),e(a,"constants",(function(){return Ve})),e(a,"errors",(function(){return o("3Qchy").ErrorCode})),e(a,"utils",(function(){return dc})),e(a,"wordlists",(function(){return Ui})),e(a,"version",(function(){return Rc})),e(a,"Wordlist",(function(){return Fi}));var c={};e(c,"BaseContract",(function(){return Ai}),(function(e){return Ai=e})),e(c,"Contract",(function(){return Ei}),(function(e){return Ei=e})),e(c,"ContractFactory",(function(){return xi}),(function(e){return xi=e}));var u=o("9kH0C"),l=o("jNZoB"),h=o("3Qchy");var f=r(u).BN;const d=new(0,h.Logger)("bignumber/5.7.0"),p={};function g(e){return null!=e&&(y.isBigNumber(e)||"number"==typeof e&&e%1==0||"string"==typeof e&&!!e.match(/^-?[0-9]+$/)||(0,l.isHexString)(e)||"bigint"==typeof e||(0,l.isBytes)(e))}let m=!1;class y{fromTwos(e){return w(b(this).fromTwos(e))}toTwos(e){return w(b(this).toTwos(e))}abs(){return"-"===this._hex[0]?y.from(this._hex.substring(1)):this}add(e){return w(b(this).add(b(e)))}sub(e){return w(b(this).sub(b(e)))}div(e){return y.from(e).isZero()&&A("division-by-zero","div"),w(b(this).div(b(e)))}mul(e){return w(b(this).mul(b(e)))}mod(e){const t=b(e);return t.isNeg()&&A("division-by-zero","mod"),w(b(this).umod(t))}pow(e){const t=b(e);return t.isNeg()&&A("negative-power","pow"),w(b(this).pow(t))}and(e){const t=b(e);return(this.isNegative()||t.isNeg())&&A("unbound-bitwise-result","and"),w(b(this).and(t))}or(e){const t=b(e);return(this.isNegative()||t.isNeg())&&A("unbound-bitwise-result","or"),w(b(this).or(t))}xor(e){const t=b(e);return(this.isNegative()||t.isNeg())&&A("unbound-bitwise-result","xor"),w(b(this).xor(t))}mask(e){return(this.isNegative()||e<0)&&A("negative-width","mask"),w(b(this).maskn(e))}shl(e){return(this.isNegative()||e<0)&&A("negative-width","shl"),w(b(this).shln(e))}shr(e){return(this.isNegative()||e<0)&&A("negative-width","shr"),w(b(this).shrn(e))}eq(e){return b(this).eq(b(e))}lt(e){return b(this).lt(b(e))}lte(e){return b(this).lte(b(e))}gt(e){return b(this).gt(b(e))}gte(e){return b(this).gte(b(e))}isNegative(){return"-"===this._hex[0]}isZero(){return b(this).isZero()}toNumber(){try{return b(this).toNumber()}catch(e){A("overflow","toNumber",this.toString())}return null}toBigInt(){try{return BigInt(this.toString())}catch(e){}return d.throwError("this platform does not support BigInt",h.Logger.errors.UNSUPPORTED_OPERATION,{value:this.toString()})}toString(){return arguments.length>0&&(10===arguments[0]?m||(m=!0,d.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")):16===arguments[0]?d.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",h.Logger.errors.UNEXPECTED_ARGUMENT,{}):d.throwError("BigNumber.toString does not accept parameters",h.Logger.errors.UNEXPECTED_ARGUMENT,{})),b(this).toString(10)}toHexString(){return this._hex}toJSON(e){return{type:"BigNumber",hex:this.toHexString()}}static from(e){if(e instanceof y)return e;if("string"==typeof e)return e.match(/^-?0x[0-9a-f]+$/i)?new y(p,v(e)):e.match(/^-?[0-9]+$/)?new y(p,v(new f(e))):d.throwArgumentError("invalid BigNumber string","value",e);if("number"==typeof e)return e%1&&A("underflow","BigNumber.from",e),(e>=9007199254740991||e<=-9007199254740991)&&A("overflow","BigNumber.from",e),y.from(String(e));const t=e;if("bigint"==typeof t)return y.from(t.toString());if((0,l.isBytes)(t))return y.from((0,l.hexlify)(t));if(t)if(t.toHexString){const e=t.toHexString();if("string"==typeof e)return y.from(e)}else{let e=t._hex;if(null==e&&"BigNumber"===t.type&&(e=t.hex),"string"==typeof e&&((0,l.isHexString)(e)||"-"===e[0]&&(0,l.isHexString)(e.substring(1))))return y.from(e)}return d.throwArgumentError("invalid BigNumber value","value",e)}static isBigNumber(e){return!(!e||!e._isBigNumber)}constructor(e,t){e!==p&&d.throwError("cannot call constructor directly; use BigNumber.from",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new (BigNumber)"}),this._hex=t,this._isBigNumber=!0,Object.freeze(this)}}function v(e){if("string"!=typeof e)return v(e.toString(16));if("-"===e[0])return"-"===(e=e.substring(1))[0]&&d.throwArgumentError("invalid hex","value",e),"0x00"===(e=v(e))?e:"-"+e;if("0x"!==e.substring(0,2)&&(e="0x"+e),"0x"===e)return"0x00";for(e.length%2&&(e="0x0"+e.substring(2));e.length>4&&"0x00"===e.substring(0,4);)e="0x"+e.substring(4);return e}function w(e){return y.from(v(e))}function b(e){const t=y.from(e).toHexString();return"-"===t[0]?new f("-"+t.substring(3),16):new f(t.substring(2),16)}function A(e,t,r){const n={fault:e,operation:t};return null!=r&&(n.value=r),d.throwError(e,h.Logger.errors.NUMERIC_FAULT,n)}l=o("jNZoB");const E=new(0,(h=o("3Qchy")).Logger)("bignumber/5.7.0"),x={},S=y.from(0),C=y.from(-1);function k(e,t,r,n){const i={fault:t,operation:r};return void 0!==n&&(i.value=n),E.throwError(e,h.Logger.errors.NUMERIC_FAULT,i)}let _="0";for(;_.length<256;)_+=_;function P(e){if("number"!=typeof e)try{e=y.from(e).toNumber()}catch(e){}return"number"==typeof e&&e>=0&&e<=256&&!(e%1)?"1"+_.substring(0,e):E.throwArgumentError("invalid decimal size","decimals",e)}function R(e,t){null==t&&(t=0);const r=P(t),n=(e=y.from(e)).lt(S);n&&(e=e.mul(C));let i=e.mod(r).toString();for(;i.length<r.length-1;)i="0"+i;i=i.match(/^([0-9]*[1-9]|0)(0*)/)[1];const o=e.div(r).toString();return e=1===r.length?o:o+"."+i,n&&(e="-"+e),e}function O(e,t){null==t&&(t=0);const r=P(t);"string"==typeof e&&e.match(/^-?[0-9.]+$/)||E.throwArgumentError("invalid decimal value","value",e);const n="-"===e.substring(0,1);n&&(e=e.substring(1)),"."===e&&E.throwArgumentError("missing value","value",e);const i=e.split(".");i.length>2&&E.throwArgumentError("too many decimal points","value",e);let o=i[0],s=i[1];for(o||(o="0"),s||(s="0");"0"===s[s.length-1];)s=s.substring(0,s.length-1);for(s.length>r.length-1&&k("fractional component exceeds decimals","underflow","parseFixed"),""===s&&(s="0");s.length<r.length-1;)s+="0";const a=y.from(o),c=y.from(s);let u=a.mul(r).add(c);return n&&(u=u.mul(C)),u}class I{static from(e){if(e instanceof I)return e;"number"==typeof e&&(e=`fixed128x${e}`);let t=!0,r=128,n=18;if("string"==typeof e)if("fixed"===e);else if("ufixed"===e)t=!1;else{const i=e.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);i||E.throwArgumentError("invalid fixed format","format",e),t="u"!==i[1],r=parseInt(i[2]),n=parseInt(i[3])}else if(e){const i=(t,r,n)=>null==e[t]?n:(typeof e[t]!==r&&E.throwArgumentError("invalid fixed format ("+t+" not "+r+")","format."+t,e[t]),e[t]);t=i("signed","boolean",t),r=i("width","number",r),n=i("decimals","number",n)}return r%8&&E.throwArgumentError("invalid fixed format width (not byte aligned)","format.width",r),n>80&&E.throwArgumentError("invalid fixed format (decimals too large)","format.decimals",n),new I(x,t,r,n)}constructor(e,t,r,n){e!==x&&E.throwError("cannot use FixedFormat constructor; use FixedFormat.from",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new FixedFormat"}),this.signed=t,this.width=r,this.decimals=n,this.name=(t?"":"u")+"fixed"+String(r)+"x"+String(n),this._multiplier=P(n),Object.freeze(this)}}class N{_checkFormat(e){this.format.name!==e.format.name&&E.throwArgumentError("incompatible format; use fixedNumber.toFormat","other",e)}addUnsafe(e){this._checkFormat(e);const t=O(this._value,this.format.decimals),r=O(e._value,e.format.decimals);return N.fromValue(t.add(r),this.format.decimals,this.format)}subUnsafe(e){this._checkFormat(e);const t=O(this._value,this.format.decimals),r=O(e._value,e.format.decimals);return N.fromValue(t.sub(r),this.format.decimals,this.format)}mulUnsafe(e){this._checkFormat(e);const t=O(this._value,this.format.decimals),r=O(e._value,e.format.decimals);return N.fromValue(t.mul(r).div(this.format._multiplier),this.format.decimals,this.format)}divUnsafe(e){this._checkFormat(e);const t=O(this._value,this.format.decimals),r=O(e._value,e.format.decimals);return N.fromValue(t.mul(this.format._multiplier).div(r),this.format.decimals,this.format)}floor(){const e=this.toString().split(".");1===e.length&&e.push("0");let t=N.from(e[0],this.format);const r=!e[1].match(/^(0*)$/);return this.isNegative()&&r&&(t=t.subUnsafe(T.toFormat(t.format))),t}ceiling(){const e=this.toString().split(".");1===e.length&&e.push("0");let t=N.from(e[0],this.format);const r=!e[1].match(/^(0*)$/);return!this.isNegative()&&r&&(t=t.addUnsafe(T.toFormat(t.format))),t}round(e){null==e&&(e=0);const t=this.toString().split(".");if(1===t.length&&t.push("0"),(e<0||e>80||e%1)&&E.throwArgumentError("invalid decimal count","decimals",e),t[1].length<=e)return this;const r=N.from("1"+_.substring(0,e),this.format),n=M.toFormat(this.format);return this.mulUnsafe(r).addUnsafe(n).floor().divUnsafe(r)}isZero(){return"0.0"===this._value||"0"===this._value}isNegative(){return"-"===this._value[0]}toString(){return this._value}toHexString(e){if(null==e)return this._hex;e%8&&E.throwArgumentError("invalid byte width","width",e);const t=y.from(this._hex).fromTwos(this.format.width).toTwos(e).toHexString();return(0,l.hexZeroPad)(t,e/8)}toUnsafeFloat(){return parseFloat(this.toString())}toFormat(e){return N.fromString(this._value,e)}static fromValue(e,t,r){return null!=r||null==t||g(t)||(r=t,t=null),null==t&&(t=0),null==r&&(r="fixed"),N.fromString(R(e,t),I.from(r))}static fromString(e,t){null==t&&(t="fixed");const r=I.from(t),n=O(e,r.decimals);!r.signed&&n.lt(S)&&k("unsigned value cannot be negative","overflow","value",e);let i=null;r.signed?i=n.toTwos(r.width).toHexString():(i=n.toHexString(),i=(0,l.hexZeroPad)(i,r.width/8));const o=R(n,r.decimals);return new N(x,i,o,r)}static fromBytes(e,t){null==t&&(t="fixed");const r=I.from(t);if((0,l.arrayify)(e).length>r.width/8)throw new Error("overflow");let n=y.from(e);r.signed&&(n=n.fromTwos(r.width));const i=n.toTwos((r.signed?0:1)+r.width).toHexString(),o=R(n,r.decimals);return new N(x,i,o,r)}static from(e,t){if("string"==typeof e)return N.fromString(e,t);if((0,l.isBytes)(e))return N.fromBytes(e,t);try{return N.fromValue(e,0,t)}catch(e){if(e.code!==h.Logger.errors.INVALID_ARGUMENT)throw e}return E.throwArgumentError("invalid FixedNumber value","value",e)}static isFixedNumber(e){return!(!e||!e._isFixedNumber)}constructor(e,t,r,n){e!==x&&E.throwError("cannot use FixedNumber constructor; use FixedNumber.from",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new FixedFormat"}),this.format=n,this._hex=t,this._value=r,this._isFixedNumber=!0,Object.freeze(this)}}const T=N.from(1),M=N.from("0.5");var B={};e(B,"defineReadOnly",(function(){return j}),(function(e){return j=e})),e(B,"getStatic",(function(){return D}),(function(e){return D=e})),e(B,"resolveProperties",(function(){return U}),(function(e){return U=e})),e(B,"checkProperties",(function(){return z}),(function(e){return z=e})),e(B,"shallowCopy",(function(){return q}),(function(e){return q=e})),e(B,"deepCopy",(function(){return H}),(function(e){return H=e})),e(B,"Description",(function(){return J}),(function(e){return J=e}));h=o("3Qchy");var F=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};const L=new(0,h.Logger)("properties/5.7.0");function j(e,t,r){Object.defineProperty(e,t,{enumerable:!0,value:r,writable:!1})}function D(e,t){for(let r=0;r<32;r++){if(e[t])return e[t];if(!e.prototype||"object"!=typeof e.prototype)break;e=Object.getPrototypeOf(e.prototype).constructor}return null}function U(e){return F(this,void 0,void 0,(function*(){const t=Object.keys(e).map((t=>{const r=e[t];return Promise.resolve(r).then((e=>({key:t,value:e})))}));return(yield Promise.all(t)).reduce(((e,t)=>(e[t.key]=t.value,e)),{})}))}function z(e,t){e&&"object"==typeof e||L.throwArgumentError("invalid object","object",e),Object.keys(e).forEach((r=>{t[r]||L.throwArgumentError("invalid object key - "+r,"transaction:"+r,e)}))}function q(e){const t={};for(const r in e)t[r]=e[r];return t}const K={bigint:!0,boolean:!0,function:!0,number:!0,string:!0};function G(e){if(null==e||K[typeof e])return!0;if(Array.isArray(e)||"object"==typeof e){if(!Object.isFrozen(e))return!1;const t=Object.keys(e);for(let r=0;r<t.length;r++){let n=null;try{n=e[t[r]]}catch(e){continue}if(!G(n))return!1}return!0}return L.throwArgumentError("Cannot deepCopy "+typeof e,"object",e)}function W(e){if(G(e))return e;if(Array.isArray(e))return Object.freeze(e.map((e=>H(e))));if("object"==typeof e){const t={};for(const r in e){const n=e[r];void 0!==n&&j(t,r,H(n))}return t}return L.throwArgumentError("Cannot deepCopy "+typeof e,"object",e)}function H(e){return W(e)}class J{constructor(e){for(const t in e)this[t]=H(e[t])}}const V=new(0,(h=o("3Qchy")).Logger)("abi/5.7.0"),Q={};let Z={calldata:!0,memory:!0,storage:!0},Y={calldata:!0,memory:!0};function X(e,t){if("bytes"===e||"string"===e){if(Z[t])return!0}else if("address"===e){if("payable"===t)return!0}else if((e.indexOf("[")>=0||"tuple"===e)&&Y[t])return!0;return(Z[t]||"payable"===t)&&V.throwArgumentError("invalid modifier","name",t),!1}function $(e,t){for(let r in t)(0,B.defineReadOnly)(e,r,t[r])}const ee=Object.freeze({sighash:"sighash",minimal:"minimal",full:"full",json:"json"}),te=new RegExp(/^(.*)\[([0-9]*)\]$/);class re{format(e){if(e||(e=ee.sighash),ee[e]||V.throwArgumentError("invalid format type","format",e),e===ee.json){let t={type:"tuple"===this.baseType?"tuple":this.type,name:this.name||void 0};return"boolean"==typeof this.indexed&&(t.indexed=this.indexed),this.components&&(t.components=this.components.map((t=>JSON.parse(t.format(e))))),JSON.stringify(t)}let t="";return"array"===this.baseType?(t+=this.arrayChildren.format(e),t+="["+(this.arrayLength<0?"":String(this.arrayLength))+"]"):"tuple"===this.baseType?(e!==ee.sighash&&(t+=this.type),t+="("+this.components.map((t=>t.format(e))).join(e===ee.full?", ":",")+")"):t+=this.type,e!==ee.sighash&&(!0===this.indexed&&(t+=" indexed"),e===ee.full&&this.name&&(t+=" "+this.name)),t}static from(e,t){return"string"==typeof e?re.fromString(e,t):re.fromObject(e)}static fromObject(e){return re.isParamType(e)?e:new re(Q,{name:e.name||null,type:de(e.type),indexed:null==e.indexed?null:!!e.indexed,components:e.components?e.components.map(re.fromObject):null})}static fromString(e,t){return r=function(e,t){let r=e;function n(t){V.throwArgumentError(`unexpected character at position ${t}`,"param",e)}function i(e){let r={type:"",name:"",parent:e,state:{allowType:!0}};return t&&(r.indexed=!1),r}e=e.replace(/\s/g," ");let o={type:"",name:"",state:{allowType:!0}},s=o;for(let r=0;r<e.length;r++){let o=e[r];switch(o){case"(":s.state.allowType&&""===s.type?s.type="tuple":s.state.allowParams||n(r),s.state.allowType=!1,s.type=de(s.type),s.components=[i(s)],s=s.components[0];break;case")":delete s.state,"indexed"===s.name&&(t||n(r),s.indexed=!0,s.name=""),X(s.type,s.name)&&(s.name=""),s.type=de(s.type);let e=s;s=s.parent,s||n(r),delete e.parent,s.state.allowParams=!1,s.state.allowName=!0,s.state.allowArray=!0;break;case",":delete s.state,"indexed"===s.name&&(t||n(r),s.indexed=!0,s.name=""),X(s.type,s.name)&&(s.name=""),s.type=de(s.type);let a=i(s.parent);s.parent.components.push(a),delete s.parent,s=a;break;case" ":s.state.allowType&&""!==s.type&&(s.type=de(s.type),delete s.state.allowType,s.state.allowName=!0,s.state.allowParams=!0),s.state.allowName&&""!==s.name&&("indexed"===s.name?(t||n(r),s.indexed&&n(r),s.indexed=!0,s.name=""):X(s.type,s.name)?s.name="":s.state.allowName=!1);break;case"[":s.state.allowArray||n(r),s.type+=o,s.state.allowArray=!1,s.state.allowName=!1,s.state.readArray=!0;break;case"]":s.state.readArray||n(r),s.type+=o,s.state.readArray=!1,s.state.allowArray=!0,s.state.allowName=!0;break;default:s.state.allowType?(s.type+=o,s.state.allowParams=!0,s.state.allowArray=!0):s.state.allowName?(s.name+=o,delete s.state.allowArray):s.state.readArray?s.type+=o:n(r)}}return s.parent&&V.throwArgumentError("unexpected eof","param",e),delete o.state,"indexed"===s.name?(t||n(r.length-7),s.indexed&&n(r.length-7),s.indexed=!0,s.name=""):X(s.type,s.name)&&(s.name=""),o.type=de(o.type),o}(e,!!t),re.fromObject({name:r.name,type:r.type,indexed:r.indexed,components:r.components});var r}static isParamType(e){return!(null==e||!e._isParamType)}constructor(e,t){e!==Q&&V.throwError("use fromString",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new ParamType()"}),$(this,t);let r=this.type.match(te);$(this,r?{arrayLength:parseInt(r[2]||"-1"),arrayChildren:re.fromObject({type:r[1],components:this.components}),baseType:"array"}:{arrayLength:null,arrayChildren:null,baseType:null!=this.components?"tuple":this.type}),this._isParamType=!0,Object.freeze(this)}}function ne(e,t){return function(e){e=e.trim();let t=[],r="",n=0;for(let i=0;i<e.length;i++){let o=e[i];","===o&&0===n?(t.push(r),r=""):(r+=o,"("===o?n++:")"===o&&(n--,-1===n&&V.throwArgumentError("unbalanced parenthesis","value",e)))}r&&t.push(r);return t}(e).map((e=>re.fromString(e,t)))}class ie{static from(e){return ie.isFragment(e)?e:"string"==typeof e?ie.fromString(e):ie.fromObject(e)}static fromObject(e){if(ie.isFragment(e))return e;switch(e.type){case"function":return le.fromObject(e);case"event":return oe.fromObject(e);case"constructor":return ue.fromObject(e);case"error":return fe.fromObject(e);case"fallback":case"receive":return null}return V.throwArgumentError("invalid fragment object","value",e)}static fromString(e){return"event"===(e=(e=(e=e.replace(/\s/g," ")).replace(/\(/g," (").replace(/\)/g,") ").replace(/\s+/g," ")).trim()).split(" ")[0]?oe.fromString(e.substring(5).trim()):"function"===e.split(" ")[0]?le.fromString(e.substring(8).trim()):"constructor"===e.split("(")[0].trim()?ue.fromString(e.trim()):"error"===e.split(" ")[0]?fe.fromString(e.substring(5).trim()):V.throwArgumentError("unsupported fragment","value",e)}static isFragment(e){return!(!e||!e._isFragment)}constructor(e,t){e!==Q&&V.throwError("use a static from method",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new Fragment()"}),$(this,t),this._isFragment=!0,Object.freeze(this)}}class oe extends ie{format(e){if(e||(e=ee.sighash),ee[e]||V.throwArgumentError("invalid format type","format",e),e===ee.json)return JSON.stringify({type:"event",anonymous:this.anonymous,name:this.name,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});let t="";return e!==ee.sighash&&(t+="event "),t+=this.name+"("+this.inputs.map((t=>t.format(e))).join(e===ee.full?", ":",")+") ",e!==ee.sighash&&this.anonymous&&(t+="anonymous "),t.trim()}static from(e){return"string"==typeof e?oe.fromString(e):oe.fromObject(e)}static fromObject(e){if(oe.isEventFragment(e))return e;"event"!==e.type&&V.throwArgumentError("invalid event object","value",e);const t={name:ge(e.name),anonymous:e.anonymous,inputs:e.inputs?e.inputs.map(re.fromObject):[],type:"event"};return new oe(Q,t)}static fromString(e){let t=e.match(me);t||V.throwArgumentError("invalid event string","value",e);let r=!1;return t[3].split(" ").forEach((e=>{switch(e.trim()){case"anonymous":r=!0;break;case"":break;default:V.warn("unknown modifier: "+e)}})),oe.fromObject({name:t[1].trim(),anonymous:r,inputs:ne(t[2],!0),type:"event"})}static isEventFragment(e){return e&&e._isFragment&&"event"===e.type}}function se(e,t){t.gas=null;let r=e.split("@");return 1!==r.length?(r.length>2&&V.throwArgumentError("invalid human-readable ABI signature","value",e),r[1].match(/^[0-9]+$/)||V.throwArgumentError("invalid human-readable ABI signature gas","value",e),t.gas=y.from(r[1]),r[0]):e}function ae(e,t){t.constant=!1,t.payable=!1,t.stateMutability="nonpayable",e.split(" ").forEach((e=>{switch(e.trim()){case"constant":t.constant=!0;break;case"payable":t.payable=!0,t.stateMutability="payable";break;case"nonpayable":t.payable=!1,t.stateMutability="nonpayable";break;case"pure":t.constant=!0,t.stateMutability="pure";break;case"view":t.constant=!0,t.stateMutability="view";break;case"external":case"public":case"":break;default:console.log("unknown modifier: "+e)}}))}function ce(e){let t={constant:!1,payable:!0,stateMutability:"payable"};return null!=e.stateMutability?(t.stateMutability=e.stateMutability,t.constant="view"===t.stateMutability||"pure"===t.stateMutability,null!=e.constant&&!!e.constant!==t.constant&&V.throwArgumentError("cannot have constant function with mutability "+t.stateMutability,"value",e),t.payable="payable"===t.stateMutability,null!=e.payable&&!!e.payable!==t.payable&&V.throwArgumentError("cannot have payable function with mutability "+t.stateMutability,"value",e)):null!=e.payable?(t.payable=!!e.payable,null!=e.constant||t.payable||"constructor"===e.type||V.throwArgumentError("unable to determine stateMutability","value",e),t.constant=!!e.constant,t.constant?t.stateMutability="view":t.stateMutability=t.payable?"payable":"nonpayable",t.payable&&t.constant&&V.throwArgumentError("cannot have constant payable function","value",e)):null!=e.constant?(t.constant=!!e.constant,t.payable=!t.constant,t.stateMutability=t.constant?"view":"payable"):"constructor"!==e.type&&V.throwArgumentError("unable to determine stateMutability","value",e),t}class ue extends ie{format(e){if(e||(e=ee.sighash),ee[e]||V.throwArgumentError("invalid format type","format",e),e===ee.json)return JSON.stringify({type:"constructor",stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:void 0,payable:this.payable,gas:this.gas?this.gas.toNumber():void 0,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});e===ee.sighash&&V.throwError("cannot format a constructor for sighash",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"format(sighash)"});let t="constructor("+this.inputs.map((t=>t.format(e))).join(e===ee.full?", ":",")+") ";return this.stateMutability&&"nonpayable"!==this.stateMutability&&(t+=this.stateMutability+" "),t.trim()}static from(e){return"string"==typeof e?ue.fromString(e):ue.fromObject(e)}static fromObject(e){if(ue.isConstructorFragment(e))return e;"constructor"!==e.type&&V.throwArgumentError("invalid constructor object","value",e);let t=ce(e);t.constant&&V.throwArgumentError("constructor cannot be constant","value",e);const r={name:null,type:e.type,inputs:e.inputs?e.inputs.map(re.fromObject):[],payable:t.payable,stateMutability:t.stateMutability,gas:e.gas?y.from(e.gas):null};return new ue(Q,r)}static fromString(e){let t={type:"constructor"},r=(e=se(e,t)).match(me);return r&&"constructor"===r[1].trim()||V.throwArgumentError("invalid constructor string","value",e),t.inputs=ne(r[2].trim(),!1),ae(r[3].trim(),t),ue.fromObject(t)}static isConstructorFragment(e){return e&&e._isFragment&&"constructor"===e.type}}class le extends ue{format(e){if(e||(e=ee.sighash),ee[e]||V.throwArgumentError("invalid format type","format",e),e===ee.json)return JSON.stringify({type:"function",name:this.name,constant:this.constant,stateMutability:"nonpayable"!==this.stateMutability?this.stateMutability:void 0,payable:this.payable,gas:this.gas?this.gas.toNumber():void 0,inputs:this.inputs.map((t=>JSON.parse(t.format(e)))),outputs:this.outputs.map((t=>JSON.parse(t.format(e))))});let t="";return e!==ee.sighash&&(t+="function "),t+=this.name+"("+this.inputs.map((t=>t.format(e))).join(e===ee.full?", ":",")+") ",e!==ee.sighash&&(this.stateMutability?"nonpayable"!==this.stateMutability&&(t+=this.stateMutability+" "):this.constant&&(t+="view "),this.outputs&&this.outputs.length&&(t+="returns ("+this.outputs.map((t=>t.format(e))).join(", ")+") "),null!=this.gas&&(t+="@"+this.gas.toString()+" ")),t.trim()}static from(e){return"string"==typeof e?le.fromString(e):le.fromObject(e)}static fromObject(e){if(le.isFunctionFragment(e))return e;"function"!==e.type&&V.throwArgumentError("invalid function object","value",e);let t=ce(e);const r={type:e.type,name:ge(e.name),constant:t.constant,inputs:e.inputs?e.inputs.map(re.fromObject):[],outputs:e.outputs?e.outputs.map(re.fromObject):[],payable:t.payable,stateMutability:t.stateMutability,gas:e.gas?y.from(e.gas):null};return new le(Q,r)}static fromString(e){let t={type:"function"},r=(e=se(e,t)).split(" returns ");r.length>2&&V.throwArgumentError("invalid function string","value",e);let n=r[0].match(me);if(n||V.throwArgumentError("invalid function signature","value",e),t.name=n[1].trim(),t.name&&ge(t.name),t.inputs=ne(n[2],!1),ae(n[3].trim(),t),r.length>1){let n=r[1].match(me);""==n[1].trim()&&""==n[3].trim()||V.throwArgumentError("unexpected tokens","value",e),t.outputs=ne(n[2],!1)}else t.outputs=[];return le.fromObject(t)}static isFunctionFragment(e){return e&&e._isFragment&&"function"===e.type}}function he(e){const t=e.format();return"Error(string)"!==t&&"Panic(uint256)"!==t||V.throwArgumentError(`cannot specify user defined ${t} error`,"fragment",e),e}class fe extends ie{format(e){if(e||(e=ee.sighash),ee[e]||V.throwArgumentError("invalid format type","format",e),e===ee.json)return JSON.stringify({type:"error",name:this.name,inputs:this.inputs.map((t=>JSON.parse(t.format(e))))});let t="";return e!==ee.sighash&&(t+="error "),t+=this.name+"("+this.inputs.map((t=>t.format(e))).join(e===ee.full?", ":",")+") ",t.trim()}static from(e){return"string"==typeof e?fe.fromString(e):fe.fromObject(e)}static fromObject(e){if(fe.isErrorFragment(e))return e;"error"!==e.type&&V.throwArgumentError("invalid error object","value",e);const t={type:e.type,name:ge(e.name),inputs:e.inputs?e.inputs.map(re.fromObject):[]};return he(new fe(Q,t))}static fromString(e){let t={type:"error"},r=e.match(me);return r||V.throwArgumentError("invalid error signature","value",e),t.name=r[1].trim(),t.name&&ge(t.name),t.inputs=ne(r[2],!1),he(fe.fromObject(t))}static isErrorFragment(e){return e&&e._isFragment&&"error"===e.type}}function de(e){return e.match(/^uint($|[^1-9])/)?e="uint256"+e.substring(4):e.match(/^int($|[^1-9])/)&&(e="int256"+e.substring(3)),e}const pe=new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");function ge(e){return e&&e.match(pe)||V.throwArgumentError(`invalid identifier "${e}"`,"value",e),e}const me=new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");l=o("jNZoB"),h=o("3Qchy"),l=o("jNZoB");const ye=new(0,(h=o("3Qchy")).Logger)("abi/5.7.0");function ve(e){const t=[],r=function(e,n){if(Array.isArray(n))for(let i in n){const o=e.slice();o.push(i);try{r(o,n[i])}catch(e){t.push({path:o,error:e})}}};return r([],e),t}class we{_throwError(e,t){ye.throwArgumentError(e,this.localName,t)}constructor(e,t,r,n){this.name=e,this.type=t,this.localName=r,this.dynamic=n}}class be{get data(){return(0,l.hexConcat)(this._data)}get length(){return this._dataLength}_writeData(e){return this._data.push(e),this._dataLength+=e.length,e.length}appendWriter(e){return this._writeData((0,l.concat)(e._data))}writeBytes(e){let t=(0,l.arrayify)(e);const r=t.length%this.wordSize;return r&&(t=(0,l.concat)([t,this._padding.slice(r)])),this._writeData(t)}_getValue(e){let t=(0,l.arrayify)(y.from(e));return t.length>this.wordSize&&ye.throwError("value out-of-bounds",h.Logger.errors.BUFFER_OVERRUN,{length:this.wordSize,offset:t.length}),t.length%this.wordSize&&(t=(0,l.concat)([this._padding.slice(t.length%this.wordSize),t])),t}writeValue(e){return this._writeData(this._getValue(e))}writeUpdatableValue(){const e=this._data.length;return this._data.push(this._padding),this._dataLength+=this.wordSize,t=>{this._data[e]=this._getValue(t)}}constructor(e){(0,B.defineReadOnly)(this,"wordSize",e||32),this._data=[],this._dataLength=0,this._padding=new Uint8Array(e)}}class Ae{get data(){return(0,l.hexlify)(this._data)}get consumed(){return this._offset}static coerce(e,t){let r=e.match("^u?int([0-9]+)$");return r&&parseInt(r[1])<=48&&(t=t.toNumber()),t}coerce(e,t){return this._coerceFunc?this._coerceFunc(e,t):Ae.coerce(e,t)}_peekBytes(e,t,r){let n=Math.ceil(t/this.wordSize)*this.wordSize;return this._offset+n>this._data.length&&(this.allowLoose&&r&&this._offset+t<=this._data.length?n=t:ye.throwError("data out-of-bounds",h.Logger.errors.BUFFER_OVERRUN,{length:this._data.length,offset:this._offset+n})),this._data.slice(this._offset,this._offset+n)}subReader(e){return new Ae(this._data.slice(this._offset+e),this.wordSize,this._coerceFunc,this.allowLoose)}readBytes(e,t){let r=this._peekBytes(0,e,!!t);return this._offset+=r.length,r.slice(0,e)}readValue(){return y.from(this.readBytes(this.wordSize))}constructor(e,t,r,n){(0,B.defineReadOnly)(this,"_data",(0,l.arrayify)(e)),(0,B.defineReadOnly)(this,"wordSize",t||32),(0,B.defineReadOnly)(this,"_coerceFunc",r),(0,B.defineReadOnly)(this,"allowLoose",n),this._offset=0}}l=o("jNZoB");var Ee={},xe=o("iQPfu");
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */!function(){var e="input is invalid type",r="object"==typeof window,n=r?window:{};n.JS_SHA3_NO_WINDOW&&(r=!1);var i=!r&&"object"==typeof self;!n.JS_SHA3_NO_NODE_JS&&"object"==typeof xe&&xe.versions&&xe.versions.node?n=t:i&&(n=self);var o=!n.JS_SHA3_NO_COMMON_JS&&Ee,s="function"==typeof define&&define.amd,a=!n.JS_SHA3_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,c="0123456789abcdef".split(""),u=[4,1024,262144,67108864],l=[0,8,16,24],h=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],f=[224,256,384,512],d=[128,256],p=["hex","buffer","arrayBuffer","array","digest"],g={128:168,256:136};!n.JS_SHA3_NO_NODE_JS&&Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),!a||!n.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(e){return"object"==typeof e&&e.buffer&&e.buffer.constructor===ArrayBuffer});for(var m=function(e,t,r){return function(n){return new I(e,t,e).update(n)[r]()}},y=function(e,t,r){return function(n,i){return new I(e,t,i).update(n)[r]()}},v=function(e,t,r){return function(t,n,i,o){return x["cshake"+e].update(t,n,i,o)[r]()}},w=function(e,t,r){return function(t,n,i,o){return x["kmac"+e].update(t,n,i,o)[r]()}},b=function(e,t,r,n){for(var i=0;i<p.length;++i){var o=p[i];e[o]=t(r,n,o)}return e},A=function(e,t){var r=m(e,t,"hex");return r.create=function(){return new I(e,t,e)},r.update=function(e){return r.create().update(e)},b(r,m,e,t)},E=[{name:"keccak",padding:[1,256,65536,16777216],bits:f,createMethod:A},{name:"sha3",padding:[6,1536,393216,100663296],bits:f,createMethod:A},{name:"shake",padding:[31,7936,2031616,520093696],bits:d,createMethod:function(e,t){var r=y(e,t,"hex");return r.create=function(r){return new I(e,t,r)},r.update=function(e,t){return r.create(t).update(e)},b(r,y,e,t)}},{name:"cshake",padding:u,bits:d,createMethod:function(e,t){var r=g[e],n=v(e,0,"hex");return n.create=function(n,i,o){return i||o?new I(e,t,n).bytepad([i,o],r):x["shake"+e].create(n)},n.update=function(e,t,r,i){return n.create(t,r,i).update(e)},b(n,v,e,t)}},{name:"kmac",padding:u,bits:d,createMethod:function(e,t){var r=g[e],n=w(e,0,"hex");return n.create=function(n,i,o){return new N(e,t,i).bytepad(["KMAC",o],r).bytepad([n],r)},n.update=function(e,t,r,i){return n.create(e,r,i).update(t)},b(n,w,e,t)}}],x={},S=[],C=0;C<E.length;++C)for(var k=E[C],_=k.bits,P=0;P<_.length;++P){var R=k.name+"_"+_[P];if(S.push(R),x[R]=k.createMethod(_[P],k.padding),"sha3"!==k.name){var O=k.name+_[P];S.push(O),x[O]=x[R]}}function I(e,t,r){this.blocks=[],this.s=[],this.padding=t,this.outputBits=r,this.reset=!0,this.finalized=!1,this.block=0,this.start=0,this.blockCount=1600-(e<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=r>>5,this.extraBytes=(31&r)>>3;for(var n=0;n<50;++n)this.s[n]=0}function N(e,t,r){I.call(this,e,t,r)}I.prototype.update=function(t){if(this.finalized)throw new Error("finalize already called");var r,n=typeof t;if("string"!==n){if("object"!==n)throw new Error(e);if(null===t)throw new Error(e);if(a&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||a&&ArrayBuffer.isView(t)))throw new Error(e);r=!0}for(var i,o,s=this.blocks,c=this.byteCount,u=t.length,h=this.blockCount,f=0,d=this.s;f<u;){if(this.reset)for(this.reset=!1,s[0]=this.block,i=1;i<h+1;++i)s[i]=0;if(r)for(i=this.start;f<u&&i<c;++f)s[i>>2]|=t[f]<<l[3&i++];else for(i=this.start;f<u&&i<c;++f)(o=t.charCodeAt(f))<128?s[i>>2]|=o<<l[3&i++]:o<2048?(s[i>>2]|=(192|o>>6)<<l[3&i++],s[i>>2]|=(128|63&o)<<l[3&i++]):o<55296||o>=57344?(s[i>>2]|=(224|o>>12)<<l[3&i++],s[i>>2]|=(128|o>>6&63)<<l[3&i++],s[i>>2]|=(128|63&o)<<l[3&i++]):(o=65536+((1023&o)<<10|1023&t.charCodeAt(++f)),s[i>>2]|=(240|o>>18)<<l[3&i++],s[i>>2]|=(128|o>>12&63)<<l[3&i++],s[i>>2]|=(128|o>>6&63)<<l[3&i++],s[i>>2]|=(128|63&o)<<l[3&i++]);if(this.lastByteIndex=i,i>=c){for(this.start=i-c,this.block=s[h],i=0;i<h;++i)d[i]^=s[i];T(d),this.reset=!0}else this.start=i}return this},I.prototype.encode=function(e,t){var r=255&e,n=1,i=[r];for(r=255&(e>>=8);r>0;)i.unshift(r),r=255&(e>>=8),++n;return t?i.push(n):i.unshift(n),this.update(i),i.length},I.prototype.encodeString=function(t){var r,n=typeof t;if("string"!==n){if("object"!==n)throw new Error(e);if(null===t)throw new Error(e);if(a&&t.constructor===ArrayBuffer)t=new Uint8Array(t);else if(!(Array.isArray(t)||a&&ArrayBuffer.isView(t)))throw new Error(e);r=!0}var i=0,o=t.length;if(r)i=o;else for(var s=0;s<t.length;++s){var c=t.charCodeAt(s);c<128?i+=1:c<2048?i+=2:c<55296||c>=57344?i+=3:(c=65536+((1023&c)<<10|1023&t.charCodeAt(++s)),i+=4)}return i+=this.encode(8*i),this.update(t),i},I.prototype.bytepad=function(e,t){for(var r=this.encode(t),n=0;n<e.length;++n)r+=this.encodeString(e[n]);var i=t-r%t,o=[];return o.length=i,this.update(o),this},I.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var e=this.blocks,t=this.lastByteIndex,r=this.blockCount,n=this.s;if(e[t>>2]|=this.padding[3&t],this.lastByteIndex===this.byteCount)for(e[0]=e[r],t=1;t<r+1;++t)e[t]=0;for(e[r-1]|=2147483648,t=0;t<r;++t)n[t]^=e[t];T(n)}},I.prototype.toString=I.prototype.hex=function(){this.finalize();for(var e,t=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,o=0,s=0,a="";s<n;){for(o=0;o<t&&s<n;++o,++s)e=r[o],a+=c[e>>4&15]+c[15&e]+c[e>>12&15]+c[e>>8&15]+c[e>>20&15]+c[e>>16&15]+c[e>>28&15]+c[e>>24&15];s%t==0&&(T(r),o=0)}return i&&(e=r[o],a+=c[e>>4&15]+c[15&e],i>1&&(a+=c[e>>12&15]+c[e>>8&15]),i>2&&(a+=c[e>>20&15]+c[e>>16&15])),a},I.prototype.arrayBuffer=function(){this.finalize();var e,t=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,o=0,s=0,a=this.outputBits>>3;e=i?new ArrayBuffer(n+1<<2):new ArrayBuffer(a);for(var c=new Uint32Array(e);s<n;){for(o=0;o<t&&s<n;++o,++s)c[s]=r[o];s%t==0&&T(r)}return i&&(c[o]=r[o],e=e.slice(0,a)),e},I.prototype.buffer=I.prototype.arrayBuffer,I.prototype.digest=I.prototype.array=function(){this.finalize();for(var e,t,r=this.blockCount,n=this.s,i=this.outputBlocks,o=this.extraBytes,s=0,a=0,c=[];a<i;){for(s=0;s<r&&a<i;++s,++a)e=a<<2,t=n[s],c[e]=255&t,c[e+1]=t>>8&255,c[e+2]=t>>16&255,c[e+3]=t>>24&255;a%r==0&&T(n)}return o&&(e=a<<2,t=n[s],c[e]=255&t,o>1&&(c[e+1]=t>>8&255),o>2&&(c[e+2]=t>>16&255)),c},N.prototype=new I,N.prototype.finalize=function(){return this.encode(this.outputBits,!0),I.prototype.finalize.call(this)};var T=function(e){var t,r,n,i,o,s,a,c,u,l,f,d,p,g,m,y,v,w,b,A,E,x,S,C,k,_,P,R,O,I,N,T,M,B,F,L,j,D,U,z,q,K,G,W,H,J,V,Q,Z,Y,X,$,ee,te,re,ne,ie,oe,se,ae,ce,ue,le;for(n=0;n<48;n+=2)i=e[0]^e[10]^e[20]^e[30]^e[40],o=e[1]^e[11]^e[21]^e[31]^e[41],s=e[2]^e[12]^e[22]^e[32]^e[42],a=e[3]^e[13]^e[23]^e[33]^e[43],c=e[4]^e[14]^e[24]^e[34]^e[44],u=e[5]^e[15]^e[25]^e[35]^e[45],l=e[6]^e[16]^e[26]^e[36]^e[46],f=e[7]^e[17]^e[27]^e[37]^e[47],t=(d=e[8]^e[18]^e[28]^e[38]^e[48])^(s<<1|a>>>31),r=(p=e[9]^e[19]^e[29]^e[39]^e[49])^(a<<1|s>>>31),e[0]^=t,e[1]^=r,e[10]^=t,e[11]^=r,e[20]^=t,e[21]^=r,e[30]^=t,e[31]^=r,e[40]^=t,e[41]^=r,t=i^(c<<1|u>>>31),r=o^(u<<1|c>>>31),e[2]^=t,e[3]^=r,e[12]^=t,e[13]^=r,e[22]^=t,e[23]^=r,e[32]^=t,e[33]^=r,e[42]^=t,e[43]^=r,t=s^(l<<1|f>>>31),r=a^(f<<1|l>>>31),e[4]^=t,e[5]^=r,e[14]^=t,e[15]^=r,e[24]^=t,e[25]^=r,e[34]^=t,e[35]^=r,e[44]^=t,e[45]^=r,t=c^(d<<1|p>>>31),r=u^(p<<1|d>>>31),e[6]^=t,e[7]^=r,e[16]^=t,e[17]^=r,e[26]^=t,e[27]^=r,e[36]^=t,e[37]^=r,e[46]^=t,e[47]^=r,t=l^(i<<1|o>>>31),r=f^(o<<1|i>>>31),e[8]^=t,e[9]^=r,e[18]^=t,e[19]^=r,e[28]^=t,e[29]^=r,e[38]^=t,e[39]^=r,e[48]^=t,e[49]^=r,g=e[0],m=e[1],J=e[11]<<4|e[10]>>>28,V=e[10]<<4|e[11]>>>28,R=e[20]<<3|e[21]>>>29,O=e[21]<<3|e[20]>>>29,ae=e[31]<<9|e[30]>>>23,ce=e[30]<<9|e[31]>>>23,K=e[40]<<18|e[41]>>>14,G=e[41]<<18|e[40]>>>14,B=e[2]<<1|e[3]>>>31,F=e[3]<<1|e[2]>>>31,y=e[13]<<12|e[12]>>>20,v=e[12]<<12|e[13]>>>20,Q=e[22]<<10|e[23]>>>22,Z=e[23]<<10|e[22]>>>22,I=e[33]<<13|e[32]>>>19,N=e[32]<<13|e[33]>>>19,ue=e[42]<<2|e[43]>>>30,le=e[43]<<2|e[42]>>>30,te=e[5]<<30|e[4]>>>2,re=e[4]<<30|e[5]>>>2,L=e[14]<<6|e[15]>>>26,j=e[15]<<6|e[14]>>>26,w=e[25]<<11|e[24]>>>21,b=e[24]<<11|e[25]>>>21,Y=e[34]<<15|e[35]>>>17,X=e[35]<<15|e[34]>>>17,T=e[45]<<29|e[44]>>>3,M=e[44]<<29|e[45]>>>3,C=e[6]<<28|e[7]>>>4,k=e[7]<<28|e[6]>>>4,ne=e[17]<<23|e[16]>>>9,ie=e[16]<<23|e[17]>>>9,D=e[26]<<25|e[27]>>>7,U=e[27]<<25|e[26]>>>7,A=e[36]<<21|e[37]>>>11,E=e[37]<<21|e[36]>>>11,$=e[47]<<24|e[46]>>>8,ee=e[46]<<24|e[47]>>>8,W=e[8]<<27|e[9]>>>5,H=e[9]<<27|e[8]>>>5,_=e[18]<<20|e[19]>>>12,P=e[19]<<20|e[18]>>>12,oe=e[29]<<7|e[28]>>>25,se=e[28]<<7|e[29]>>>25,z=e[38]<<8|e[39]>>>24,q=e[39]<<8|e[38]>>>24,x=e[48]<<14|e[49]>>>18,S=e[49]<<14|e[48]>>>18,e[0]=g^~y&w,e[1]=m^~v&b,e[10]=C^~_&R,e[11]=k^~P&O,e[20]=B^~L&D,e[21]=F^~j&U,e[30]=W^~J&Q,e[31]=H^~V&Z,e[40]=te^~ne&oe,e[41]=re^~ie&se,e[2]=y^~w&A,e[3]=v^~b&E,e[12]=_^~R&I,e[13]=P^~O&N,e[22]=L^~D&z,e[23]=j^~U&q,e[32]=J^~Q&Y,e[33]=V^~Z&X,e[42]=ne^~oe&ae,e[43]=ie^~se&ce,e[4]=w^~A&x,e[5]=b^~E&S,e[14]=R^~I&T,e[15]=O^~N&M,e[24]=D^~z&K,e[25]=U^~q&G,e[34]=Q^~Y&$,e[35]=Z^~X&ee,e[44]=oe^~ae&ue,e[45]=se^~ce&le,e[6]=A^~x&g,e[7]=E^~S&m,e[16]=I^~T&C,e[17]=N^~M&k,e[26]=z^~K&B,e[27]=q^~G&F,e[36]=Y^~$&W,e[37]=X^~ee&H,e[46]=ae^~ue&te,e[47]=ce^~le&re,e[8]=x^~g&y,e[9]=S^~m&v,e[18]=T^~C&_,e[19]=M^~k&P,e[28]=K^~B&L,e[29]=G^~F&j,e[38]=$^~W&J,e[39]=ee^~H&V,e[48]=ue^~te&ne,e[49]=le^~re&ie,e[0]^=h[n],e[1]^=h[n+1]};if(o)Ee=x;else{for(C=0;C<S.length;++C)n[S[C]]=x[S[C]];s&&define((function(){return x}))}}();l=o("jNZoB");function Se(e){return"0x"+r(Ee).keccak_256((0,l.arrayify)(e))}var Ce=o("3hJ1y");const ke=new(0,(h=o("3Qchy")).Logger)("address/5.7.0");function _e(e){(0,l.isHexString)(e,20)||ke.throwArgumentError("invalid address","address",e);const t=(e=e.toLowerCase()).substring(2).split(""),r=new Uint8Array(40);for(let e=0;e<40;e++)r[e]=t[e].charCodeAt(0);const n=(0,l.arrayify)(Se(r));for(let e=0;e<40;e+=2)n[e>>1]>>4>=8&&(t[e]=t[e].toUpperCase()),(15&n[e>>1])>=8&&(t[e+1]=t[e+1].toUpperCase());return"0x"+t.join("")}const Pe={};for(let e=0;e<10;e++)Pe[String(e)]=String(e);for(let e=0;e<26;e++)Pe[String.fromCharCode(65+e)]=String(10+e);const Re=Math.floor((Oe=9007199254740991,Math.log10?Math.log10(Oe):Math.log(Oe)/Math.LN10));var Oe;function Ie(e){let t=(e=(e=e.toUpperCase()).substring(4)+e.substring(0,2)+"00").split("").map((e=>Pe[e])).join("");for(;t.length>=Re;){let e=t.substring(0,Re);t=parseInt(e,10)%97+t.substring(e.length)}let r=String(98-parseInt(t,10)%97);for(;r.length<2;)r="0"+r;return r}function Ne(e){let t=null;if("string"!=typeof e&&ke.throwArgumentError("invalid address","address",e),e.match(/^(0x)?[0-9a-fA-F]{40}$/))"0x"!==e.substring(0,2)&&(e="0x"+e),t=_e(e),e.match(/([A-F].*[a-f])|([a-f].*[A-F])/)&&t!==e&&ke.throwArgumentError("bad address checksum","address",e);else if(e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){for(e.substring(2,4)!==Ie(e)&&ke.throwArgumentError("bad icap checksum","address",e),r=e.substring(4),t=new f(r,36).toString(16);t.length<40;)t="0"+t;t=_e("0x"+t)}else ke.throwArgumentError("invalid address","address",e);var r;return t}function Te(e){try{return Ne(e),!0}catch(e){}return!1}function Me(e){let t=(r=Ne(e).substring(2),new f(r,16).toString(36)).toUpperCase();for(var r;t.length<30;)t="0"+t;return"XE"+Ie("XE00"+t)+t}function Be(e){let t=null;try{t=Ne(e.from)}catch(t){ke.throwArgumentError("missing from address","transaction",e)}const r=(0,l.stripZeros)((0,l.arrayify)(y.from(e.nonce).toHexString()));return Ne((0,l.hexDataSlice)(Se((0,Ce.encode)([t,r])),12))}function Fe(e,t,r){return 32!==(0,l.hexDataLength)(t)&&ke.throwArgumentError("salt must be 32 bytes","salt",t),32!==(0,l.hexDataLength)(r)&&ke.throwArgumentError("initCodeHash must be 32 bytes","initCodeHash",r),Ne((0,l.hexDataSlice)(Se((0,l.concat)(["0xff",Ne(e),t,r])),12))}l=o("jNZoB");class Le extends we{defaultValue(){return"0x0000000000000000000000000000000000000000"}encode(e,t){try{t=Ne(t)}catch(e){this._throwError(e.message,t)}return e.writeValue(t)}decode(e){return Ne((0,l.hexZeroPad)(e.readValue().toHexString(),20))}constructor(e){super("address","address",e,!1)}}h=o("3Qchy");class je extends we{defaultValue(){return this.coder.defaultValue()}encode(e,t){return this.coder.encode(e,t)}decode(e){return this.coder.decode(e)}constructor(e){super(e.name,e.type,void 0,e.dynamic),this.coder=e}}const De=new(0,h.Logger)("abi/5.7.0");function Ue(e,t,r){let n=null;if(Array.isArray(r))n=r;else if(r&&"object"==typeof r){let e={};n=t.map((t=>{const n=t.localName;return n||De.throwError("cannot encode object for signature with missing names",h.Logger.errors.INVALID_ARGUMENT,{argument:"values",coder:t,value:r}),e[n]&&De.throwError("cannot encode object for signature with duplicate names",h.Logger.errors.INVALID_ARGUMENT,{argument:"values",coder:t,value:r}),e[n]=!0,r[n]}))}else De.throwArgumentError("invalid tuple value","tuple",r);t.length!==n.length&&De.throwArgumentError("types/value length mismatch","tuple",r);let i=new be(e.wordSize),o=new be(e.wordSize),s=[];t.forEach(((e,t)=>{let r=n[t];if(e.dynamic){let t=o.length;e.encode(o,r);let n=i.writeUpdatableValue();s.push((e=>{n(e+t)}))}else e.encode(i,r)})),s.forEach((e=>{e(i.length)}));let a=e.appendWriter(i);return a+=e.appendWriter(o),a}function ze(e,t){let r=[],n=e.subReader(0);t.forEach((t=>{let i=null;if(t.dynamic){let r=e.readValue(),o=n.subReader(r.toNumber());try{i=t.decode(o)}catch(e){if(e.code===h.Logger.errors.BUFFER_OVERRUN)throw e;i=e,i.baseType=t.name,i.name=t.localName,i.type=t.type}}else try{i=t.decode(e)}catch(e){if(e.code===h.Logger.errors.BUFFER_OVERRUN)throw e;i=e,i.baseType=t.name,i.name=t.localName,i.type=t.type}null!=i&&r.push(i)}));const i=t.reduce(((e,t)=>{const r=t.localName;return r&&(e[r]||(e[r]=0),e[r]++),e}),{});t.forEach(((e,t)=>{let n=e.localName;if(!n||1!==i[n])return;if("length"===n&&(n="_length"),null!=r[n])return;const o=r[t];o instanceof Error?Object.defineProperty(r,n,{enumerable:!0,get:()=>{throw o}}):r[n]=o}));for(let e=0;e<r.length;e++){const t=r[e];t instanceof Error&&Object.defineProperty(r,e,{enumerable:!0,get:()=>{throw t}})}return Object.freeze(r)}class qe extends we{defaultValue(){const e=this.coder.defaultValue(),t=[];for(let r=0;r<this.length;r++)t.push(e);return t}encode(e,t){Array.isArray(t)||this._throwError("expected array value",t);let r=this.length;-1===r&&(r=t.length,e.writeValue(t.length)),De.checkArgumentCount(t.length,r,"coder array"+(this.localName?" "+this.localName:""));let n=[];for(let e=0;e<t.length;e++)n.push(this.coder);return Ue(e,n,t)}decode(e){let t=this.length;-1===t&&(t=e.readValue().toNumber(),32*t>e._data.length&&De.throwError("insufficient data length",h.Logger.errors.BUFFER_OVERRUN,{length:e._data.length,count:t}));let r=[];for(let e=0;e<t;e++)r.push(new je(this.coder));return e.coerce(this.name,ze(e,r))}constructor(e,t,r){super("array",e.type+"["+(t>=0?t:"")+"]",r,-1===t||e.dynamic),this.coder=e,this.length=t}}class Ke extends we{defaultValue(){return!1}encode(e,t){return e.writeValue(t?1:0)}decode(e){return e.coerce(this.type,!e.readValue().isZero())}constructor(e){super("bool","bool",e,!1)}}l=o("jNZoB");class Ge extends we{defaultValue(){return"0x"}encode(e,t){t=(0,l.arrayify)(t);let r=e.writeValue(t.length);return r+=e.writeBytes(t),r}decode(e){return e.readBytes(e.readValue().toNumber(),!0)}constructor(e,t){super(e,e,t,!0)}}class We extends Ge{decode(e){return e.coerce(this.name,(0,l.hexlify)(super.decode(e)))}constructor(e){super("bytes",e)}}l=o("jNZoB");class He extends we{defaultValue(){return"0x0000000000000000000000000000000000000000000000000000000000000000".substring(0,2+2*this.size)}encode(e,t){let r=(0,l.arrayify)(t);return r.length!==this.size&&this._throwError("incorrect data length",t),e.writeBytes(r)}decode(e){return e.coerce(this.name,(0,l.hexlify)(e.readBytes(this.size)))}constructor(e,t){let r="bytes"+String(e);super(r,r,t,!1),this.size=e}}class Je extends we{defaultValue(){return null}encode(e,t){return null!=t&&this._throwError("not null",t),e.writeBytes([])}decode(e){return e.readBytes(0),e.coerce(this.name,null)}constructor(e){super("null","",e,!1)}}var Ve={};e(Ve,"AddressZero",(function(){return Qe})),e(Ve,"NegativeOne",(function(){return Ze})),e(Ve,"Zero",(function(){return Ye})),e(Ve,"One",(function(){return Xe})),e(Ve,"Two",(function(){return $e})),e(Ve,"WeiPerEther",(function(){return et})),e(Ve,"MaxUint256",(function(){return tt})),e(Ve,"MinInt256",(function(){return rt})),e(Ve,"MaxInt256",(function(){return nt})),e(Ve,"HashZero",(function(){return it})),e(Ve,"EtherSymbol",(function(){return ot}));const Qe="0x0000000000000000000000000000000000000000",Ze=y.from(-1),Ye=y.from(0),Xe=y.from(1),$e=y.from(2),et=y.from("1000000000000000000"),tt=y.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),rt=y.from("-0x8000000000000000000000000000000000000000000000000000000000000000"),nt=y.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),it="0x0000000000000000000000000000000000000000000000000000000000000000",ot="Ξ";class st extends we{defaultValue(){return 0}encode(e,t){let r=y.from(t),n=tt.mask(8*e.wordSize);if(this.signed){let e=n.mask(8*this.size-1);(r.gt(e)||r.lt(e.add(Xe).mul(Ze)))&&this._throwError("value out-of-bounds",t)}else(r.lt(Ye)||r.gt(n.mask(8*this.size)))&&this._throwError("value out-of-bounds",t);return r=r.toTwos(8*this.size).mask(8*this.size),this.signed&&(r=r.fromTwos(8*this.size).toTwos(8*e.wordSize)),e.writeValue(r)}decode(e){let t=e.readValue().mask(8*this.size);return this.signed&&(t=t.fromTwos(8*this.size)),e.coerce(this.name,t)}constructor(e,t,r){const n=(t?"int":"uint")+8*e;super(n,n,r,!1),this.size=e,this.signed=t}}l=o("jNZoB"),l=o("jNZoB");const at=new(0,(h=o("3Qchy")).Logger)("strings/5.7.0");var ct,ut,lt,ht;function ft(e,t,r,n,i){if(e===lt.BAD_PREFIX||e===lt.UNEXPECTED_CONTINUE){let e=0;for(let n=t+1;n<r.length&&r[n]>>6==2;n++)e++;return e}return e===lt.OVERRUN?r.length-t-1:0}(ut=ct||(ct={})).current="",ut.NFC="NFC",ut.NFD="NFD",ut.NFKC="NFKC",ut.NFKD="NFKD",(ht=lt||(lt={})).UNEXPECTED_CONTINUE="unexpected continuation byte",ht.BAD_PREFIX="bad codepoint prefix",ht.OVERRUN="string overrun",ht.MISSING_CONTINUE="missing continuation byte",ht.OUT_OF_RANGE="out of UTF-8 range",ht.UTF16_SURROGATE="UTF-16 surrogate",ht.OVERLONG="overlong representation";const dt=Object.freeze({error:function(e,t,r,n,i){return at.throwArgumentError(`invalid codepoint at offset ${t}; ${e}`,"bytes",r)},ignore:ft,replace:function(e,t,r,n,i){return e===lt.OVERLONG?(n.push(i),0):(n.push(65533),ft(e,t,r))}});function pt(e,t){null==t&&(t=dt.error),e=(0,l.arrayify)(e);const r=[];let n=0;for(;n<e.length;){const i=e[n++];if(i>>7==0){r.push(i);continue}let o=null,s=null;if(192==(224&i))o=1,s=127;else if(224==(240&i))o=2,s=2047;else{if(240!=(248&i)){n+=t(128==(192&i)?lt.UNEXPECTED_CONTINUE:lt.BAD_PREFIX,n-1,e,r);continue}o=3,s=65535}if(n-1+o>=e.length){n+=t(lt.OVERRUN,n-1,e,r);continue}let a=i&(1<<8-o-1)-1;for(let i=0;i<o;i++){let i=e[n];if(128!=(192&i)){n+=t(lt.MISSING_CONTINUE,n,e,r),a=null;break}a=a<<6|63&i,n++}null!==a&&(a>1114111?n+=t(lt.OUT_OF_RANGE,n-1-o,e,r,a):a>=55296&&a<=57343?n+=t(lt.UTF16_SURROGATE,n-1-o,e,r,a):a<=s?n+=t(lt.OVERLONG,n-1-o,e,r,a):r.push(a))}return r}function gt(e,t=ct.current){t!=ct.current&&(at.checkNormalize(),e=e.normalize(t));let r=[];for(let t=0;t<e.length;t++){const n=e.charCodeAt(t);if(n<128)r.push(n);else if(n<2048)r.push(n>>6|192),r.push(63&n|128);else if(55296==(64512&n)){t++;const i=e.charCodeAt(t);if(t>=e.length||56320!=(64512&i))throw new Error("invalid utf-8 string");const o=65536+((1023&n)<<10)+(1023&i);r.push(o>>18|240),r.push(o>>12&63|128),r.push(o>>6&63|128),r.push(63&o|128)}else r.push(n>>12|224),r.push(n>>6&63|128),r.push(63&n|128)}return(0,l.arrayify)(r)}function mt(e){const t="0000"+e.toString(16);return"\\u"+t.substring(t.length-4)}function yt(e,t){return'"'+pt(e,t).map((e=>{if(e<256){switch(e){case 8:return"\\b";case 9:return"\\t";case 10:return"\\n";case 13:return"\\r";case 34:return'\\"';case 92:return"\\\\"}if(e>=32&&e<127)return String.fromCharCode(e)}return e<=65535?mt(e):mt(55296+((e-=65536)>>10&1023))+mt(56320+(1023&e))})).join("")+'"'}function vt(e){return e.map((e=>e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(55296+(e>>10&1023),56320+(1023&e))))).join("")}function wt(e,t){return vt(pt(e,t))}function bt(e,t=ct.current){return pt(gt(e,t))}function At(e){const t=gt(e);if(t.length>31)throw new Error("bytes32 string must be less than 32 bytes");return(0,l.hexlify)((0,l.concat)([t,it]).slice(0,32))}function Et(e){const t=(0,l.arrayify)(e);if(32!==t.length)throw new Error("invalid bytes32 - not 32 bytes long");if(0!==t[31])throw new Error("invalid bytes32 string - no null terminator");let r=31;for(;0===t[r-1];)r--;return wt(t.slice(0,r))}function xt(e,t){t||(t=function(e){return[parseInt(e,16)]});let r=0,n={};return e.split(",").forEach((e=>{let i=e.split(":");r+=parseInt(i[0],16),n[r]=t(i[1])})),n}function St(e){let t=0;return e.split(",").map((e=>{let r=e.split("-");1===r.length?r[1]="0":""===r[1]&&(r[1]="1");let n=t+parseInt(r[0],16);return t=parseInt(r[1],16),{l:n,h:t}}))}function Ct(e,t){let r=0;for(let n=0;n<t.length;n++){let i=t[n];if(r+=i.l,e>=r&&e<=r+i.h&&(e-r)%(i.d||1)==0){if(i.e&&-1!==i.e.indexOf(e-r))continue;return i}}return null}const kt=St("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d"),_t="ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((e=>parseInt(e,16))),Pt=[{h:25,s:32,l:65},{h:30,s:32,e:[23],l:127},{h:54,s:1,e:[48],l:64,d:2},{h:14,s:1,l:57,d:2},{h:44,s:1,l:17,d:2},{h:10,s:1,e:[2,6,8],l:61,d:2},{h:16,s:1,l:68,d:2},{h:84,s:1,e:[18,24,66],l:19,d:2},{h:26,s:32,e:[17],l:435},{h:22,s:1,l:71,d:2},{h:15,s:80,l:40},{h:31,s:32,l:16},{h:32,s:1,l:80,d:2},{h:52,s:1,l:42,d:2},{h:12,s:1,l:55,d:2},{h:40,s:1,e:[38],l:15,d:2},{h:14,s:1,l:48,d:2},{h:37,s:48,l:49},{h:148,s:1,l:6351,d:2},{h:88,s:1,l:160,d:2},{h:15,s:16,l:704},{h:25,s:26,l:854},{h:25,s:32,l:55915},{h:37,s:40,l:1247},{h:25,s:-119711,l:53248},{h:25,s:-119763,l:52},{h:25,s:-119815,l:52},{h:25,s:-119867,e:[1,4,5,7,8,11,12,17],l:52},{h:25,s:-119919,l:52},{h:24,s:-119971,e:[2,7,8,17],l:52},{h:24,s:-120023,e:[2,7,13,15,16,17],l:52},{h:25,s:-120075,l:52},{h:25,s:-120127,l:52},{h:25,s:-120179,l:52},{h:25,s:-120231,l:52},{h:25,s:-120283,l:52},{h:25,s:-120335,l:52},{h:24,s:-119543,e:[17],l:56},{h:24,s:-119601,e:[17],l:58},{h:24,s:-119659,e:[17],l:58},{h:24,s:-119717,e:[17],l:58},{h:24,s:-119775,e:[17],l:58}],Rt=xt("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3"),Ot=xt("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7"),It=xt("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D",(function(e){if(e.length%4!=0)throw new Error("bad data");let t=[];for(let r=0;r<e.length;r+=4)t.push(parseInt(e.substring(r,r+4),16));return t})),Nt=St("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");function Tt(e){if(e.match(/^[a-z0-9-]*$/i)&&e.length<=59)return e.toLowerCase();let t=bt(e);var r;r=t.map((e=>{if(_t.indexOf(e)>=0)return[];if(e>=65024&&e<=65039)return[];let t=function(e){let t=Ct(e,Pt);if(t)return[e+t.s];let r=Rt[e];if(r)return r;let n=Ot[e];return n?[e+n[0]]:It[e]||null}(e);return t||[e]})),t=r.reduce(((e,t)=>(t.forEach((t=>{e.push(t)})),e)),[]),t=bt(vt(t),ct.NFKC),t.forEach((e=>{if(Ct(e,Nt))throw new Error("STRINGPREP_CONTAINS_PROHIBITED")})),t.forEach((e=>{if(Ct(e,kt))throw new Error("STRINGPREP_CONTAINS_UNASSIGNED")}));let n=vt(t);if("-"===n.substring(0,1)||"--"===n.substring(2,4)||"-"===n.substring(n.length-1))throw new Error("invalid hyphen");return n}class Mt extends Ge{defaultValue(){return""}encode(e,t){return super.encode(e,gt(t))}decode(e){return wt(super.decode(e))}constructor(e){super("string",e)}}class Bt extends we{defaultValue(){const e=[];this.coders.forEach((t=>{e.push(t.defaultValue())}));const t=this.coders.reduce(((e,t)=>{const r=t.localName;return r&&(e[r]||(e[r]=0),e[r]++),e}),{});return this.coders.forEach(((r,n)=>{let i=r.localName;i&&1===t[i]&&("length"===i&&(i="_length"),null==e[i]&&(e[i]=e[n]))})),Object.freeze(e)}encode(e,t){return Ue(e,this.coders,t)}decode(e){return e.coerce(this.name,ze(e,this.coders))}constructor(e,t){let r=!1;const n=[];e.forEach((e=>{e.dynamic&&(r=!0),n.push(e.type)}));super("tuple","tuple("+n.join(",")+")",t,r),this.coders=e}}const Ft=new(0,h.Logger)("abi/5.7.0"),Lt=new RegExp(/^bytes([0-9]*)$/),jt=new RegExp(/^(u?int)([0-9]*)$/);class Dt{_getCoder(e){switch(e.baseType){case"address":return new Le(e.name);case"bool":return new Ke(e.name);case"string":return new Mt(e.name);case"bytes":return new We(e.name);case"array":return new qe(this._getCoder(e.arrayChildren),e.arrayLength,e.name);case"tuple":return new Bt((e.components||[]).map((e=>this._getCoder(e))),e.name);case"":return new Je(e.name)}let t=e.type.match(jt);if(t){let r=parseInt(t[2]||"256");return(0===r||r>256||r%8!=0)&&Ft.throwArgumentError("invalid "+t[1]+" bit length","param",e),new st(r/8,"int"===t[1],e.name)}if(t=e.type.match(Lt),t){let r=parseInt(t[1]);return(0===r||r>32)&&Ft.throwArgumentError("invalid bytes length","param",e),new He(r,e.name)}return Ft.throwArgumentError("invalid type","type",e.type)}_getWordSize(){return 32}_getReader(e,t){return new Ae(e,this._getWordSize(),this.coerceFunc,t)}_getWriter(){return new be(this._getWordSize())}getDefaultValue(e){const t=e.map((e=>this._getCoder(re.from(e))));return new Bt(t,"_").defaultValue()}encode(e,t){e.length!==t.length&&Ft.throwError("types/values length mismatch",h.Logger.errors.INVALID_ARGUMENT,{count:{types:e.length,values:t.length},value:{types:e,values:t}});const r=e.map((e=>this._getCoder(re.from(e)))),n=new Bt(r,"_"),i=this._getWriter();return n.encode(i,t),i.data}decode(e,t,r){const n=e.map((e=>this._getCoder(re.from(e))));return new Bt(n,"_").decode(this._getReader((0,l.arrayify)(t),r))}constructor(e){(0,B.defineReadOnly)(this,"coerceFunc",e||null)}}const Ut=new Dt;l=o("jNZoB");function zt(e){return Se(gt(e))}l=o("jNZoB"),h=o("3Qchy");function qt(e,t){null==t&&(t=1);const r=[],n=r.forEach,i=function(e,t){n.call(e,(function(e){t>0&&Array.isArray(e)?i(e,t-1):r.push(e)}))};return i(e,t),r}function Kt(e){return function(e){let t=0;return()=>e[t++]}(function(e){let t=0;function r(){return e[t++]<<8|e[t++]}let n=r(),i=1,o=[0,1];for(let e=1;e<n;e++)o.push(i+=r());let s=r(),a=t;t+=s;let c=0,u=0;function l(){return 0==c&&(u=u<<8|e[t++],c=8),u>>--c&1}const h=Math.pow(2,31),f=h>>>1,d=f>>1,p=h-1;let g=0;for(let e=0;e<31;e++)g=g<<1|l();let m=[],y=0,v=h;for(;;){let e=Math.floor(((g-y+1)*i-1)/v),t=0,r=n;for(;r-t>1;){let n=t+r>>>1;e<o[n]?r=n:t=n}if(0==t)break;m.push(t);let s=y+Math.floor(v*o[t]/i),a=y+Math.floor(v*o[t+1]/i)-1;for(;0==((s^a)&f);)g=g<<1&p|l(),s=s<<1&p,a=a<<1&p|1;for(;s&~a&d;)g=g&f|g<<1&p>>>1|l(),s=s<<1^f,a=(a^f)<<1|f|1;y=s,v=1+a-s}let w=n-4;return m.map((t=>{switch(t-w){case 3:return w+65792+(e[a++]<<16|e[a++]<<8|e[a++]);case 2:return w+256+(e[a++]<<8|e[a++]);case 1:return w+e[a++];default:return t-1}}))}(e))}function Gt(e){return 1&e?~e>>1:e>>1}function Wt(e,t){let r=Array(e);for(let n=0,i=-1;n<e;n++)r[n]=i+=1+t();return r}function Ht(e,t){let r=Array(e);for(let n=0,i=0;n<e;n++)r[n]=i+=Gt(t());return r}function Jt(e,t){let r=Wt(e(),e),n=e(),i=Wt(n,e),o=function(e,t){let r=Array(e);for(let n=0;n<e;n++)r[n]=1+t();return r}(n,e);for(let e=0;e<n;e++)for(let t=0;t<o[e];t++)r.push(i[e]+t);return t?r.map((e=>t[e])):r}function Vt(e,t,r){let n=Array(e).fill(void 0).map((()=>[]));for(let i=0;i<t;i++)Ht(e,r).forEach(((e,t)=>n[t].push(e)));return n}function Qt(e,t){let r=1+t(),n=t(),i=function(e){let t=[];for(;;){let r=e();if(0==r)break;t.push(r)}return t}(t);return qt(Vt(i.length,1+e,t).map(((e,t)=>{const o=e[0],s=e.slice(1);return Array(i[t]).fill(void 0).map(((e,t)=>{let i=t*n;return[o+t*r,s.map((e=>e+i))]}))})))}function Zt(e,t){return Vt(1+t(),1+e,t).map((e=>[e[0],e.slice(1)]))}o("7WFd0");const Yt=Kt((0,(Qo=o("8Fe00")).decode)("")),Xt=new Set(Jt(Yt)),$t=new Set(Jt(Yt)),er=function(e){let t=[];for(;;){let r=e();if(0==r)break;t.push(Qt(r,e))}for(;;){let r=e()-1;if(r<0)break;t.push(Zt(r,e))}return function(e){const t={};for(let r=0;r<e.length;r++){const n=e[r];t[n[0]]=n[1]}return t}(qt(t))}(Yt),tr=function(e){let t=Jt(e).sort(((e,t)=>e-t));return function r(){let n=[];for(;;){let i=Jt(e,t);if(0==i.length)break;n.push({set:new Set(i),node:r()})}n.sort(((e,t)=>t.set.size-e.set.size));let i=e(),o=i%3;i=i/3|0;let s=!!(1&i);return i>>=1,{branches:n,valid:o,fe0f:s,save:1==i,check:2==i}}()}(Yt);function rr(e){return bt(e)}function nr(e){return e.filter((e=>65039!=e))}function ir(e){for(let t of e.split(".")){let e=rr(t);try{for(let t=e.lastIndexOf(95)-1;t>=0;t--)if(95!==e[t])throw new Error("underscore only allowed at start");if(e.length>=4&&e.every((e=>e<128))&&45===e[2]&&45===e[3])throw new Error("invalid label extension")}catch(e){throw new Error(`Invalid label "${t}": ${e.message}`)}}return e}function or(e){return ir(function(e,t){let r=rr(e).reverse(),n=[];for(;r.length;){let e=sr(r);if(e){n.push(...t(e));continue}let i=r.pop();if(Xt.has(i)){n.push(i);continue}if($t.has(i))continue;let o=er[i];if(!o)throw new Error(`Disallowed codepoint: 0x${i.toString(16).toUpperCase()}`);n.push(...o)}return ir((i=String.fromCodePoint(...n),i.normalize("NFC")));var i}(e,nr))}function sr(e,t){var r;let n,i,o=tr,s=[],a=e.length;for(t&&(t.length=0);a;){let c=e[--a];if(o=null===(r=o.branches.find((e=>e.set.has(c))))||void 0===r?void 0:r.node,!o)break;if(o.save)i=c;else if(o.check&&c===i)break;s.push(c),o.fe0f&&(s.push(65039),a>0&&65039==e[a-1]&&a--),o.valid&&(n=s.slice(),2==o.valid&&n.splice(1,1),t&&t.push(...e.slice(a).reverse()),e.length=a)}return n}const ar=new(0,h.Logger)("hash/5.7.0"),cr=new Uint8Array(32);function ur(e){if(0===e.length)throw new Error("invalid ENS name; empty component");return e}function lr(e){const t=gt(or(e)),r=[];if(0===e.length)return r;let n=0;for(let e=0;e<t.length;e++){46===t[e]&&(r.push(ur(t.slice(n,e))),n=e+1)}if(n>=t.length)throw new Error("invalid ENS name; empty component");return r.push(ur(t.slice(n))),r}function hr(e){try{return 0!==lr(e).length}catch(e){}return!1}function fr(e){"string"!=typeof e&&ar.throwArgumentError("invalid ENS name; not a string","name",e);let t=cr;const r=lr(e);for(;r.length;)t=Se((0,l.concat)([t,Se(r.pop())]));return(0,l.hexlify)(t)}function dr(e){return(0,l.hexlify)((0,l.concat)(lr(e).map((e=>{if(e.length>63)throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");const t=new Uint8Array(e.length+1);return t.set(e,1),t[0]=t.length-1,t}))))+"00"}cr.fill(0);l=o("jNZoB");function pr(e){return"string"==typeof e&&(e=gt(e)),Se((0,l.concat)([gt("Ethereum Signed Message:\n"),gt(String(e.length)),e]))}var gr={};e(gr,"TypedDataEncoder",(function(){return Ir}),(function(e){return Ir=e}));l=o("jNZoB"),h=o("3Qchy");var mr=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};const yr=new(0,h.Logger)("hash/5.7.0"),vr=new Uint8Array(32);vr.fill(0);const wr=y.from(-1),br=y.from(0),Ar=y.from(1),Er=y.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");const xr=(0,l.hexZeroPad)(Ar.toHexString(),32),Sr=(0,l.hexZeroPad)(br.toHexString(),32),Cr={name:"string",version:"string",chainId:"uint256",verifyingContract:"address",salt:"bytes32"},kr=["name","version","chainId","verifyingContract","salt"];function _r(e){return function(t){return"string"!=typeof t&&yr.throwArgumentError(`invalid domain value for ${JSON.stringify(e)}`,`domain.${e}`,t),t}}const Pr={name:_r("name"),version:_r("version"),chainId:function(e){try{return y.from(e).toString()}catch(e){}return yr.throwArgumentError('invalid domain value for "chainId"',"domain.chainId",e)},verifyingContract:function(e){try{return Ne(e).toLowerCase()}catch(e){}return yr.throwArgumentError('invalid domain value "verifyingContract"',"domain.verifyingContract",e)},salt:function(e){try{const t=(0,l.arrayify)(e);if(32!==t.length)throw new Error("bad length");return(0,l.hexlify)(t)}catch(e){}return yr.throwArgumentError('invalid domain value "salt"',"domain.salt",e)}};function Rr(e){{const t=e.match(/^(u?)int(\d*)$/);if(t){const r=""===t[1],n=parseInt(t[2]||"256");(n%8!=0||n>256||t[2]&&t[2]!==String(n))&&yr.throwArgumentError("invalid numeric width","type",e);const i=Er.mask(r?n-1:n),o=r?i.add(Ar).mul(wr):br;return function(t){const r=y.from(t);return(r.lt(o)||r.gt(i))&&yr.throwArgumentError(`value out-of-bounds for ${e}`,"value",t),(0,l.hexZeroPad)(r.toTwos(256).toHexString(),32)}}}{const t=e.match(/^bytes(\d+)$/);if(t){const r=parseInt(t[1]);return(0===r||r>32||t[1]!==String(r))&&yr.throwArgumentError("invalid bytes width","type",e),function(t){return(0,l.arrayify)(t).length!==r&&yr.throwArgumentError(`invalid length for ${e}`,"value",t),function(e){const t=(0,l.arrayify)(e),r=t.length%32;return r?(0,l.hexConcat)([t,vr.slice(r)]):(0,l.hexlify)(t)}(t)}}}switch(e){case"address":return function(e){return(0,l.hexZeroPad)(Ne(e),32)};case"bool":return function(e){return e?xr:Sr};case"bytes":return function(e){return Se(e)};case"string":return function(e){return zt(e)}}return null}function Or(e,t){return`${e}(${t.map((({name:e,type:t})=>t+" "+e)).join(",")})`}class Ir{getEncoder(e){let t=this._encoderCache[e];return t||(t=this._encoderCache[e]=this._getEncoder(e)),t}_getEncoder(e){{const t=Rr(e);if(t)return t}const t=e.match(/^(.*)(\x5b(\d*)\x5d)$/);if(t){const e=t[1],r=this.getEncoder(e),n=parseInt(t[3]);return t=>{n>=0&&t.length!==n&&yr.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",t);let i=t.map(r);return this._types[e]&&(i=i.map(Se)),Se((0,l.hexConcat)(i))}}const r=this.types[e];if(r){const t=zt(this._types[e]);return e=>{const n=r.map((({name:t,type:r})=>{const n=this.getEncoder(r)(e[t]);return this._types[r]?Se(n):n}));return n.unshift(t),(0,l.hexConcat)(n)}}return yr.throwArgumentError(`unknown type: ${e}`,"type",e)}encodeType(e){const t=this._types[e];return t||yr.throwArgumentError(`unknown type: ${JSON.stringify(e)}`,"name",e),t}encodeData(e,t){return this.getEncoder(e)(t)}hashStruct(e,t){return Se(this.encodeData(e,t))}encode(e){return this.encodeData(this.primaryType,e)}hash(e){return this.hashStruct(this.primaryType,e)}_visit(e,t,r){if(Rr(e))return r(e,t);const n=e.match(/^(.*)(\x5b(\d*)\x5d)$/);if(n){const e=n[1],i=parseInt(n[3]);return i>=0&&t.length!==i&&yr.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",t),t.map((t=>this._visit(e,t,r)))}const i=this.types[e];return i?i.reduce(((e,{name:n,type:i})=>(e[n]=this._visit(i,t[n],r),e)),{}):yr.throwArgumentError(`unknown type: ${e}`,"type",e)}visit(e,t){return this._visit(this.primaryType,e,t)}static from(e){return new Ir(e)}static getPrimaryType(e){return Ir.from(e).primaryType}static hashStruct(e,t,r){return Ir.from(t).hashStruct(e,r)}static hashDomain(e){const t=[];for(const r in e){const n=Cr[r];n||yr.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(r)}`,"domain",e),t.push({name:r,type:n})}return t.sort(((e,t)=>kr.indexOf(e.name)-kr.indexOf(t.name))),Ir.hashStruct("EIP712Domain",{EIP712Domain:t},e)}static encode(e,t,r){return(0,l.hexConcat)(["0x1901",Ir.hashDomain(e),Ir.from(t).hash(r)])}static hash(e,t,r){return Se(Ir.encode(e,t,r))}static resolveNames(e,t,r,n){return mr(this,void 0,void 0,(function*(){e=(0,B.shallowCopy)(e);const i={};e.verifyingContract&&!(0,l.isHexString)(e.verifyingContract,20)&&(i[e.verifyingContract]="0x");const o=Ir.from(t);o.visit(r,((e,t)=>("address"!==e||(0,l.isHexString)(t,20)||(i[t]="0x"),t)));for(const e in i)i[e]=yield n(e);return e.verifyingContract&&i[e.verifyingContract]&&(e.verifyingContract=i[e.verifyingContract]),r=o.visit(r,((e,t)=>"address"===e&&i[t]?i[t]:t)),{domain:e,value:r}}))}static getPayload(e,t,r){Ir.hashDomain(e);const n={},i=[];kr.forEach((t=>{const r=e[t];null!=r&&(n[t]=Pr[t](r),i.push({name:t,type:Cr[t]}))}));const o=Ir.from(t),s=(0,B.shallowCopy)(t);return s.EIP712Domain?yr.throwArgumentError("types must not contain EIP712Domain type","types.EIP712Domain",t):s.EIP712Domain=i,o.encode(r),{types:s,domain:n,primaryType:o.primaryType,message:o.visit(r,((e,t)=>{if(e.match(/^bytes(\d*)/))return(0,l.hexlify)((0,l.arrayify)(t));if(e.match(/^u?int/))return y.from(t).toString();switch(e){case"address":return t.toLowerCase();case"bool":return!!t;case"string":return"string"!=typeof t&&yr.throwArgumentError("invalid string","value",t),t}return yr.throwArgumentError("unsupported type","type",e)}))}}constructor(e){(0,B.defineReadOnly)(this,"types",Object.freeze((0,B.deepCopy)(e))),(0,B.defineReadOnly)(this,"_encoderCache",{}),(0,B.defineReadOnly)(this,"_types",{});const t={},r={},n={};Object.keys(e).forEach((e=>{t[e]={},r[e]=[],n[e]={}}));for(const n in e){const i={};e[n].forEach((o=>{i[o.name]&&yr.throwArgumentError(`duplicate variable name ${JSON.stringify(o.name)} in ${JSON.stringify(n)}`,"types",e),i[o.name]=!0;const s=o.type.match(/^([^\x5b]*)(\x5b|$)/)[1];s===n&&yr.throwArgumentError(`circular type reference to ${JSON.stringify(s)}`,"types",e);Rr(s)||(r[s]||yr.throwArgumentError(`unknown type ${JSON.stringify(s)}`,"types",e),r[s].push(n),t[n][s]=!0)}))}const i=Object.keys(r).filter((e=>0===r[e].length));0===i.length?yr.throwArgumentError("missing primary type","types",e):i.length>1&&yr.throwArgumentError(`ambiguous primary types or unused types: ${i.map((e=>JSON.stringify(e))).join(", ")}`,"types",e),(0,B.defineReadOnly)(this,"primaryType",i[0]),function i(o,s){s[o]&&yr.throwArgumentError(`circular type reference to ${JSON.stringify(o)}`,"types",e),s[o]=!0,Object.keys(t[o]).forEach((e=>{r[e]&&(i(e,s),Object.keys(s).forEach((t=>{n[t][e]=!0})))})),delete s[o]}(this.primaryType,{});for(const t in n){const r=Object.keys(n[t]);r.sort(),this._types[t]=Or(t,e[t])+r.map((t=>Or(t,e[t]))).join("")}}}const Nr=new(0,(h=o("3Qchy")).Logger)("abi/5.7.0");class Tr extends B.Description{}class Mr extends B.Description{}class Br extends B.Description{}class Fr extends B.Description{static isIndexed(e){return!(!e||!e._isIndexed)}}const Lr={"0x08c379a0":{signature:"Error(string)",name:"Error",inputs:["string"],reason:!0},"0x4e487b71":{signature:"Panic(uint256)",name:"Panic",inputs:["uint256"]}};function jr(e,t){const r=new Error(`deferred error during ABI decoding triggered accessing ${e}`);return r.error=t,r}class Dr{format(e){e||(e=ee.full),e===ee.sighash&&Nr.throwArgumentError("interface does not support formatting sighash","format",e);const t=this.fragments.map((t=>t.format(e)));return e===ee.json?JSON.stringify(t.map((e=>JSON.parse(e)))):t}static getAbiCoder(){return Ut}static getAddress(e){return Ne(e)}static getSighash(e){return(0,l.hexDataSlice)(zt(e.format()),0,4)}static getEventTopic(e){return zt(e.format())}getFunction(e){if((0,l.isHexString)(e)){for(const t in this.functions)if(e===this.getSighash(t))return this.functions[t];Nr.throwArgumentError("no matching function","sighash",e)}if(-1===e.indexOf("(")){const t=e.trim(),r=Object.keys(this.functions).filter((e=>e.split("(")[0]===t));return 0===r.length?Nr.throwArgumentError("no matching function","name",t):r.length>1&&Nr.throwArgumentError("multiple matching functions","name",t),this.functions[r[0]]}const t=this.functions[le.fromString(e).format()];return t||Nr.throwArgumentError("no matching function","signature",e),t}getEvent(e){if((0,l.isHexString)(e)){const t=e.toLowerCase();for(const e in this.events)if(t===this.getEventTopic(e))return this.events[e];Nr.throwArgumentError("no matching event","topichash",t)}if(-1===e.indexOf("(")){const t=e.trim(),r=Object.keys(this.events).filter((e=>e.split("(")[0]===t));return 0===r.length?Nr.throwArgumentError("no matching event","name",t):r.length>1&&Nr.throwArgumentError("multiple matching events","name",t),this.events[r[0]]}const t=this.events[oe.fromString(e).format()];return t||Nr.throwArgumentError("no matching event","signature",e),t}getError(e){if((0,l.isHexString)(e)){const t=(0,B.getStatic)(this.constructor,"getSighash");for(const r in this.errors){if(e===t(this.errors[r]))return this.errors[r]}Nr.throwArgumentError("no matching error","sighash",e)}if(-1===e.indexOf("(")){const t=e.trim(),r=Object.keys(this.errors).filter((e=>e.split("(")[0]===t));return 0===r.length?Nr.throwArgumentError("no matching error","name",t):r.length>1&&Nr.throwArgumentError("multiple matching errors","name",t),this.errors[r[0]]}const t=this.errors[le.fromString(e).format()];return t||Nr.throwArgumentError("no matching error","signature",e),t}getSighash(e){if("string"==typeof e)try{e=this.getFunction(e)}catch(t){try{e=this.getError(e)}catch(e){throw t}}return(0,B.getStatic)(this.constructor,"getSighash")(e)}getEventTopic(e){return"string"==typeof e&&(e=this.getEvent(e)),(0,B.getStatic)(this.constructor,"getEventTopic")(e)}_decodeParams(e,t){return this._abiCoder.decode(e,t)}_encodeParams(e,t){return this._abiCoder.encode(e,t)}encodeDeploy(e){return this._encodeParams(this.deploy.inputs,e||[])}decodeErrorResult(e,t){"string"==typeof e&&(e=this.getError(e));const r=(0,l.arrayify)(t);return(0,l.hexlify)(r.slice(0,4))!==this.getSighash(e)&&Nr.throwArgumentError(`data signature does not match error ${e.name}.`,"data",(0,l.hexlify)(r)),this._decodeParams(e.inputs,r.slice(4))}encodeErrorResult(e,t){return"string"==typeof e&&(e=this.getError(e)),(0,l.hexlify)((0,l.concat)([this.getSighash(e),this._encodeParams(e.inputs,t||[])]))}decodeFunctionData(e,t){"string"==typeof e&&(e=this.getFunction(e));const r=(0,l.arrayify)(t);return(0,l.hexlify)(r.slice(0,4))!==this.getSighash(e)&&Nr.throwArgumentError(`data signature does not match function ${e.name}.`,"data",(0,l.hexlify)(r)),this._decodeParams(e.inputs,r.slice(4))}encodeFunctionData(e,t){return"string"==typeof e&&(e=this.getFunction(e)),(0,l.hexlify)((0,l.concat)([this.getSighash(e),this._encodeParams(e.inputs,t||[])]))}decodeFunctionResult(e,t){"string"==typeof e&&(e=this.getFunction(e));let r=(0,l.arrayify)(t),n=null,i="",o=null,s=null,a=null;switch(r.length%this._abiCoder._getWordSize()){case 0:try{return this._abiCoder.decode(e.outputs,r)}catch(e){}break;case 4:{const e=(0,l.hexlify)(r.slice(0,4)),t=Lr[e];if(t)o=this._abiCoder.decode(t.inputs,r.slice(4)),s=t.name,a=t.signature,t.reason&&(n=o[0]),"Error"===s?i=`; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(o[0])}`:"Panic"===s&&(i=`; VM Exception while processing transaction: reverted with panic code ${o[0]}`);else try{const t=this.getError(e);o=this._abiCoder.decode(t.inputs,r.slice(4)),s=t.name,a=t.format()}catch(e){}break}}return Nr.throwError("call revert exception"+i,h.Logger.errors.CALL_EXCEPTION,{method:e.format(),data:(0,l.hexlify)(t),errorArgs:o,errorName:s,errorSignature:a,reason:n})}encodeFunctionResult(e,t){return"string"==typeof e&&(e=this.getFunction(e)),(0,l.hexlify)(this._abiCoder.encode(e.outputs,t||[]))}encodeFilterTopics(e,t){"string"==typeof e&&(e=this.getEvent(e)),t.length>e.inputs.length&&Nr.throwError("too many arguments for "+e.format(),h.Logger.errors.UNEXPECTED_ARGUMENT,{argument:"values",value:t});let r=[];e.anonymous||r.push(this.getEventTopic(e));const n=(e,t)=>"string"===e.type?zt(t):"bytes"===e.type?Se((0,l.hexlify)(t)):("bool"===e.type&&"boolean"==typeof t&&(t=t?"0x01":"0x00"),e.type.match(/^u?int/)&&(t=y.from(t).toHexString()),"address"===e.type&&this._abiCoder.encode(["address"],[t]),(0,l.hexZeroPad)((0,l.hexlify)(t),32));for(t.forEach(((t,i)=>{let o=e.inputs[i];o.indexed?null==t?r.push(null):"array"===o.baseType||"tuple"===o.baseType?Nr.throwArgumentError("filtering with tuples or arrays not supported","contract."+o.name,t):Array.isArray(t)?r.push(t.map((e=>n(o,e)))):r.push(n(o,t)):null!=t&&Nr.throwArgumentError("cannot filter non-indexed parameters; must be null","contract."+o.name,t)}));r.length&&null===r[r.length-1];)r.pop();return r}encodeEventLog(e,t){"string"==typeof e&&(e=this.getEvent(e));const r=[],n=[],i=[];return e.anonymous||r.push(this.getEventTopic(e)),t.length!==e.inputs.length&&Nr.throwArgumentError("event arguments/values mismatch","values",t),e.inputs.forEach(((e,o)=>{const s=t[o];if(e.indexed)if("string"===e.type)r.push(zt(s));else if("bytes"===e.type)r.push(Se(s));else{if("tuple"===e.baseType||"array"===e.baseType)throw new Error("not implemented");r.push(this._abiCoder.encode([e.type],[s]))}else n.push(e),i.push(s)})),{data:this._abiCoder.encode(n,i),topics:r}}decodeEventLog(e,t,r){if("string"==typeof e&&(e=this.getEvent(e)),null!=r&&!e.anonymous){let t=this.getEventTopic(e);(0,l.isHexString)(r[0],32)&&r[0].toLowerCase()===t||Nr.throwError("fragment/topic mismatch",h.Logger.errors.INVALID_ARGUMENT,{argument:"topics[0]",expected:t,value:r[0]}),r=r.slice(1)}let n=[],i=[],o=[];e.inputs.forEach(((e,t)=>{e.indexed?"string"===e.type||"bytes"===e.type||"tuple"===e.baseType||"array"===e.baseType?(n.push(re.fromObject({type:"bytes32",name:e.name})),o.push(!0)):(n.push(e),o.push(!1)):(i.push(e),o.push(!1))}));let s=null!=r?this._abiCoder.decode(n,(0,l.concat)(r)):null,a=this._abiCoder.decode(i,t,!0),c=[],u=0,f=0;e.inputs.forEach(((e,t)=>{if(e.indexed)if(null==s)c[t]=new Fr({_isIndexed:!0,hash:null});else if(o[t])c[t]=new Fr({_isIndexed:!0,hash:s[f++]});else try{c[t]=s[f++]}catch(e){c[t]=e}else try{c[t]=a[u++]}catch(e){c[t]=e}if(e.name&&null==c[e.name]){const r=c[t];r instanceof Error?Object.defineProperty(c,e.name,{enumerable:!0,get:()=>{throw jr(`property ${JSON.stringify(e.name)}`,r)}}):c[e.name]=r}}));for(let e=0;e<c.length;e++){const t=c[e];t instanceof Error&&Object.defineProperty(c,e,{enumerable:!0,get:()=>{throw jr(`index ${e}`,t)}})}return Object.freeze(c)}parseTransaction(e){let t=this.getFunction(e.data.substring(0,10).toLowerCase());return t?new Mr({args:this._abiCoder.decode(t.inputs,"0x"+e.data.substring(10)),functionFragment:t,name:t.name,signature:t.format(),sighash:this.getSighash(t),value:y.from(e.value||"0")}):null}parseLog(e){let t=this.getEvent(e.topics[0]);return!t||t.anonymous?null:new Tr({eventFragment:t,name:t.name,signature:t.format(),topic:this.getEventTopic(t),args:this.decodeEventLog(t,e.data,e.topics)})}parseError(e){const t=(0,l.hexlify)(e);let r=this.getError(t.substring(0,10).toLowerCase());return r?new Br({args:this._abiCoder.decode(r.inputs,"0x"+t.substring(10)),errorFragment:r,name:r.name,signature:r.format(),sighash:this.getSighash(r)}):null}static isInterface(e){return!(!e||!e._isInterface)}constructor(e){let t=[];t="string"==typeof e?JSON.parse(e):e,(0,B.defineReadOnly)(this,"fragments",t.map((e=>ie.from(e))).filter((e=>null!=e))),(0,B.defineReadOnly)(this,"_abiCoder",(0,B.getStatic)(new.target,"getAbiCoder")()),(0,B.defineReadOnly)(this,"functions",{}),(0,B.defineReadOnly)(this,"errors",{}),(0,B.defineReadOnly)(this,"events",{}),(0,B.defineReadOnly)(this,"structs",{}),this.fragments.forEach((e=>{let t=null;switch(e.type){case"constructor":return this.deploy?void Nr.warn("duplicate definition - constructor"):void(0,B.defineReadOnly)(this,"deploy",e);case"function":t=this.functions;break;case"event":t=this.events;break;case"error":t=this.errors;break;default:return}let r=e.format();t[r]?Nr.warn("duplicate definition - "+r):t[r]=e})),this.deploy||(0,B.defineReadOnly)(this,"deploy",ue.from({payable:!1,type:"constructor"})),(0,B.defineReadOnly)(this,"_isInterface",!0)}}var Ur={};e(Ur,"ForkEvent",(function(){return Kr}),(function(e){return Kr=e})),e(Ur,"Provider",(function(){return Gr}),(function(e){return Gr=e}));l=o("jNZoB"),h=o("3Qchy");var zr=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};const qr=new(0,h.Logger)("abstract-provider/5.7.0");class Kr extends B.Description{static isForkEvent(e){return!(!e||!e._isForkEvent)}}class Gr{getFeeData(){return zr(this,void 0,void 0,(function*(){const{block:e,gasPrice:t}=yield(0,B.resolveProperties)({block:this.getBlock("latest"),gasPrice:this.getGasPrice().catch((e=>null))});let r=null,n=null,i=null;return e&&e.baseFeePerGas&&(r=e.baseFeePerGas,i=y.from("1500000000"),n=e.baseFeePerGas.mul(2).add(i)),{lastBaseFeePerGas:r,maxFeePerGas:n,maxPriorityFeePerGas:i,gasPrice:t}}))}addListener(e,t){return this.on(e,t)}removeListener(e,t){return this.off(e,t)}static isProvider(e){return!(!e||!e._isProvider)}constructor(){qr.checkAbstract(new.target,Gr),(0,B.defineReadOnly)(this,"_isProvider",!0)}}var Wr={};e(Wr,"Signer",(function(){return Zr}),(function(e){return Zr=e})),e(Wr,"VoidSigner",(function(){return Yr}),(function(e){return Yr=e}));h=o("3Qchy");var Hr=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};const Jr=new(0,h.Logger)("abstract-signer/5.7.0"),Vr=["accessList","ccipReadEnabled","chainId","customData","data","from","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","type","value"],Qr=[h.Logger.errors.INSUFFICIENT_FUNDS,h.Logger.errors.NONCE_EXPIRED,h.Logger.errors.REPLACEMENT_UNDERPRICED];class Zr{getBalance(e){return Hr(this,void 0,void 0,(function*(){return this._checkProvider("getBalance"),yield this.provider.getBalance(this.getAddress(),e)}))}getTransactionCount(e){return Hr(this,void 0,void 0,(function*(){return this._checkProvider("getTransactionCount"),yield this.provider.getTransactionCount(this.getAddress(),e)}))}estimateGas(e){return Hr(this,void 0,void 0,(function*(){this._checkProvider("estimateGas");const t=yield(0,B.resolveProperties)(this.checkTransaction(e));return yield this.provider.estimateGas(t)}))}call(e,t){return Hr(this,void 0,void 0,(function*(){this._checkProvider("call");const r=yield(0,B.resolveProperties)(this.checkTransaction(e));return yield this.provider.call(r,t)}))}sendTransaction(e){return Hr(this,void 0,void 0,(function*(){this._checkProvider("sendTransaction");const t=yield this.populateTransaction(e),r=yield this.signTransaction(t);return yield this.provider.sendTransaction(r)}))}getChainId(){return Hr(this,void 0,void 0,(function*(){this._checkProvider("getChainId");return(yield this.provider.getNetwork()).chainId}))}getGasPrice(){return Hr(this,void 0,void 0,(function*(){return this._checkProvider("getGasPrice"),yield this.provider.getGasPrice()}))}getFeeData(){return Hr(this,void 0,void 0,(function*(){return this._checkProvider("getFeeData"),yield this.provider.getFeeData()}))}resolveName(e){return Hr(this,void 0,void 0,(function*(){return this._checkProvider("resolveName"),yield this.provider.resolveName(e)}))}checkTransaction(e){for(const t in e)-1===Vr.indexOf(t)&&Jr.throwArgumentError("invalid transaction key: "+t,"transaction",e);const t=(0,B.shallowCopy)(e);return null==t.from?t.from=this.getAddress():t.from=Promise.all([Promise.resolve(t.from),this.getAddress()]).then((t=>(t[0].toLowerCase()!==t[1].toLowerCase()&&Jr.throwArgumentError("from address mismatch","transaction",e),t[0]))),t}populateTransaction(e){return Hr(this,void 0,void 0,(function*(){const t=yield(0,B.resolveProperties)(this.checkTransaction(e));null!=t.to&&(t.to=Promise.resolve(t.to).then((e=>Hr(this,void 0,void 0,(function*(){if(null==e)return null;const t=yield this.resolveName(e);return null==t&&Jr.throwArgumentError("provided ENS name resolves to null","tx.to",e),t})))),t.to.catch((e=>{})));const r=null!=t.maxFeePerGas||null!=t.maxPriorityFeePerGas;if(null==t.gasPrice||2!==t.type&&!r?0!==t.type&&1!==t.type||!r||Jr.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas","transaction",e):Jr.throwArgumentError("eip-1559 transaction do not support gasPrice","transaction",e),2!==t.type&&null!=t.type||null==t.maxFeePerGas||null==t.maxPriorityFeePerGas)if(0===t.type||1===t.type)null==t.gasPrice&&(t.gasPrice=this.getGasPrice());else{const e=yield this.getFeeData();if(null==t.type)if(null!=e.maxFeePerGas&&null!=e.maxPriorityFeePerGas)if(t.type=2,null!=t.gasPrice){const e=t.gasPrice;delete t.gasPrice,t.maxFeePerGas=e,t.maxPriorityFeePerGas=e}else null==t.maxFeePerGas&&(t.maxFeePerGas=e.maxFeePerGas),null==t.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=e.maxPriorityFeePerGas);else null!=e.gasPrice?(r&&Jr.throwError("network does not support EIP-1559",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"populateTransaction"}),null==t.gasPrice&&(t.gasPrice=e.gasPrice),t.type=0):Jr.throwError("failed to get consistent fee data",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"signer.getFeeData"});else 2===t.type&&(null==t.maxFeePerGas&&(t.maxFeePerGas=e.maxFeePerGas),null==t.maxPriorityFeePerGas&&(t.maxPriorityFeePerGas=e.maxPriorityFeePerGas))}else t.type=2;return null==t.nonce&&(t.nonce=this.getTransactionCount("pending")),null==t.gasLimit&&(t.gasLimit=this.estimateGas(t).catch((e=>{if(Qr.indexOf(e.code)>=0)throw e;return Jr.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",h.Logger.errors.UNPREDICTABLE_GAS_LIMIT,{error:e,tx:t})}))),null==t.chainId?t.chainId=this.getChainId():t.chainId=Promise.all([Promise.resolve(t.chainId),this.getChainId()]).then((t=>(0!==t[1]&&t[0]!==t[1]&&Jr.throwArgumentError("chainId address mismatch","transaction",e),t[0]))),yield(0,B.resolveProperties)(t)}))}_checkProvider(e){this.provider||Jr.throwError("missing provider",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:e||"_checkProvider"})}static isSigner(e){return!(!e||!e._isSigner)}constructor(){Jr.checkAbstract(new.target,Zr),(0,B.defineReadOnly)(this,"_isSigner",!0)}}class Yr extends Zr{getAddress(){return Promise.resolve(this.address)}_fail(e,t){return Promise.resolve().then((()=>{Jr.throwError(e,h.Logger.errors.UNSUPPORTED_OPERATION,{operation:t})}))}signMessage(e){return this._fail("VoidSigner cannot sign messages","signMessage")}signTransaction(e){return this._fail("VoidSigner cannot sign transactions","signTransaction")}_signTypedData(e,t,r){return this._fail("VoidSigner cannot sign typed data","signTypedData")}connect(e){return new Yr(this.address,e)}constructor(e,t){super(),(0,B.defineReadOnly)(this,"address",e),(0,B.defineReadOnly)(this,"provider",t||null)}}l=o("jNZoB"),l=o("jNZoB"),Ce=o("3hJ1y"),u=o("9kH0C");var Xr={},$r=Xr;$r.utils=o("7Fm4Z"),$r.common=o("36o5p"),$r.sha=o("5aMqG"),$r.ripemd=o("ba7vz"),$r.hmac=o("jdCxY"),$r.sha1=$r.sha.sha1,$r.sha256=$r.sha.sha256,$r.sha224=$r.sha.sha224,$r.sha384=$r.sha.sha384,$r.sha512=$r.sha.sha512,$r.ripemd160=$r.ripemd.ripemd160;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t||"undefined"!=typeof self&&self;function en(e,t,r){return e(r={path:t,exports:{},require:function(e,t){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==t&&r.path)}},r.exports),r.exports}var tn=rn;function rn(e,t){if(!e)throw new Error(t||"Assertion failed")}rn.equal=function(e,t,r){if(e!=t)throw new Error(r||"Assertion failed: "+e+" != "+t)};var nn=en((function(e,t){var r=t;function n(e){return 1===e.length?"0"+e:e}function i(e){for(var t="",r=0;r<e.length;r++)t+=n(e[r].toString(16));return t}r.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"!=typeof e){for(var n=0;n<e.length;n++)r[n]=0|e[n];return r}if("hex"===t){(e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e);for(n=0;n<e.length;n+=2)r.push(parseInt(e[n]+e[n+1],16))}else for(n=0;n<e.length;n++){var i=e.charCodeAt(n),o=i>>8,s=255&i;o?r.push(o,s):r.push(s)}return r},r.zero2=n,r.toHex=i,r.encode=function(e,t){return"hex"===t?i(e):e}})),on=en((function(e,t){var n=t;n.assert=tn,n.toArray=nn.toArray,n.zero2=nn.zero2,n.toHex=nn.toHex,n.encode=nn.encode,n.getNAF=function(e,t,r){var n=new Array(Math.max(e.bitLength(),r)+1);n.fill(0);for(var i=1<<t+1,o=e.clone(),s=0;s<n.length;s++){var a,c=o.andln(i-1);o.isOdd()?(a=c>(i>>1)-1?(i>>1)-c:c,o.isubn(a)):a=0,n[s]=a,o.iushrn(1)}return n},n.getJSF=function(e,t){var r=[[],[]];e=e.clone(),t=t.clone();for(var n,i=0,o=0;e.cmpn(-i)>0||t.cmpn(-o)>0;){var s,a,c=e.andln(3)+i&3,u=t.andln(3)+o&3;3===c&&(c=-1),3===u&&(u=-1),s=0==(1&c)?0:3!==(n=e.andln(7)+i&7)&&5!==n||2!==u?c:-c,r[0].push(s),a=0==(1&u)?0:3!==(n=t.andln(7)+o&7)&&5!==n||2!==c?u:-u,r[1].push(a),2*i===s+1&&(i=1-i),2*o===a+1&&(o=1-o),e.iushrn(1),t.iushrn(1)}return r},n.cachedProperty=function(e,t,r){var n="_"+t;e.prototype[t]=function(){return void 0!==this[n]?this[n]:this[n]=r.call(this)}},n.parseBytes=function(e){return"string"==typeof e?n.toArray(e,"hex"):e},n.intFromLE=function(e){return new(r(u))(e,"hex","le")}})),sn=on.getNAF,an=on.getJSF,cn=on.assert;function un(e,t){this.type=e,this.p=new(r(u))(t.p,16),this.red=t.prime?r(u).red(t.prime):r(u).mont(this.p),this.zero=new(r(u))(0).toRed(this.red),this.one=new(r(u))(1).toRed(this.red),this.two=new(r(u))(2).toRed(this.red),this.n=t.n&&new(r(u))(t.n,16),this.g=t.g&&this.pointFromJSON(t.g,t.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4),this._bitLength=this.n?this.n.bitLength():0;var n=this.n&&this.p.div(this.n);!n||n.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}var ln=un;function hn(e,t){this.curve=e,this.type=t,this.precomputed=null}un.prototype.point=function(){throw new Error("Not implemented")},un.prototype.validate=function(){throw new Error("Not implemented")},un.prototype._fixedNafMul=function(e,t){cn(e.precomputed);var r=e._getDoubles(),n=sn(t,1,this._bitLength),i=(1<<r.step+1)-(r.step%2==0?2:1);i/=3;var o,s,a=[];for(o=0;o<n.length;o+=r.step){s=0;for(var c=o+r.step-1;c>=o;c--)s=(s<<1)+n[c];a.push(s)}for(var u=this.jpoint(null,null,null),l=this.jpoint(null,null,null),h=i;h>0;h--){for(o=0;o<a.length;o++)(s=a[o])===h?l=l.mixedAdd(r.points[o]):s===-h&&(l=l.mixedAdd(r.points[o].neg()));u=u.add(l)}return u.toP()},un.prototype._wnafMul=function(e,t){var r=4,n=e._getNAFPoints(r);r=n.wnd;for(var i=n.points,o=sn(t,r,this._bitLength),s=this.jpoint(null,null,null),a=o.length-1;a>=0;a--){for(var c=0;a>=0&&0===o[a];a--)c++;if(a>=0&&c++,s=s.dblp(c),a<0)break;var u=o[a];cn(0!==u),s="affine"===e.type?u>0?s.mixedAdd(i[u-1>>1]):s.mixedAdd(i[-u-1>>1].neg()):u>0?s.add(i[u-1>>1]):s.add(i[-u-1>>1].neg())}return"affine"===e.type?s.toP():s},un.prototype._wnafMulAdd=function(e,t,r,n,i){var o,s,a,c=this._wnafT1,u=this._wnafT2,l=this._wnafT3,h=0;for(o=0;o<n;o++){var f=(a=t[o])._getNAFPoints(e);c[o]=f.wnd,u[o]=f.points}for(o=n-1;o>=1;o-=2){var d=o-1,p=o;if(1===c[d]&&1===c[p]){var g=[t[d],null,null,t[p]];0===t[d].y.cmp(t[p].y)?(g[1]=t[d].add(t[p]),g[2]=t[d].toJ().mixedAdd(t[p].neg())):0===t[d].y.cmp(t[p].y.redNeg())?(g[1]=t[d].toJ().mixedAdd(t[p]),g[2]=t[d].add(t[p].neg())):(g[1]=t[d].toJ().mixedAdd(t[p]),g[2]=t[d].toJ().mixedAdd(t[p].neg()));var m=[-3,-1,-5,-7,0,7,5,1,3],y=an(r[d],r[p]);for(h=Math.max(y[0].length,h),l[d]=new Array(h),l[p]=new Array(h),s=0;s<h;s++){var v=0|y[0][s],w=0|y[1][s];l[d][s]=m[3*(v+1)+(w+1)],l[p][s]=0,u[d]=g}}else l[d]=sn(r[d],c[d],this._bitLength),l[p]=sn(r[p],c[p],this._bitLength),h=Math.max(l[d].length,h),h=Math.max(l[p].length,h)}var b=this.jpoint(null,null,null),A=this._wnafT4;for(o=h;o>=0;o--){for(var E=0;o>=0;){var x=!0;for(s=0;s<n;s++)A[s]=0|l[s][o],0!==A[s]&&(x=!1);if(!x)break;E++,o--}if(o>=0&&E++,b=b.dblp(E),o<0)break;for(s=0;s<n;s++){var S=A[s];0!==S&&(S>0?a=u[s][S-1>>1]:S<0&&(a=u[s][-S-1>>1].neg()),b="affine"===a.type?b.mixedAdd(a):b.add(a))}}for(o=0;o<n;o++)u[o]=null;return i?b:b.toP()},un.BasePoint=hn,hn.prototype.eq=function(){throw new Error("Not implemented")},hn.prototype.validate=function(){return this.curve.validate(this)},un.prototype.decodePoint=function(e,t){e=on.toArray(e,t);var r=this.p.byteLength();if((4===e[0]||6===e[0]||7===e[0])&&e.length-1==2*r)return 6===e[0]?cn(e[e.length-1]%2==0):7===e[0]&&cn(e[e.length-1]%2==1),this.point(e.slice(1,1+r),e.slice(1+r,1+2*r));if((2===e[0]||3===e[0])&&e.length-1===r)return this.pointFromX(e.slice(1,1+r),3===e[0]);throw new Error("Unknown point format")},hn.prototype.encodeCompressed=function(e){return this.encode(e,!0)},hn.prototype._encode=function(e){var t=this.curve.p.byteLength(),r=this.getX().toArray("be",t);return e?[this.getY().isEven()?2:3].concat(r):[4].concat(r,this.getY().toArray("be",t))},hn.prototype.encode=function(e,t){return on.encode(this._encode(t),e)},hn.prototype.precompute=function(e){if(this.precomputed)return this;var t={doubles:null,naf:null,beta:null};return t.naf=this._getNAFPoints(8),t.doubles=this._getDoubles(4,e),t.beta=this._getBeta(),this.precomputed=t,this},hn.prototype._hasDoubles=function(e){if(!this.precomputed)return!1;var t=this.precomputed.doubles;return!!t&&t.points.length>=Math.ceil((e.bitLength()+1)/t.step)},hn.prototype._getDoubles=function(e,t){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var r=[this],n=this,i=0;i<t;i+=e){for(var o=0;o<e;o++)n=n.dbl();r.push(n)}return{step:e,points:r}},hn.prototype._getNAFPoints=function(e){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var t=[this],r=(1<<e)-1,n=1===r?null:this.dbl(),i=1;i<r;i++)t[i]=t[i-1].add(n);return{wnd:e,points:t}},hn.prototype._getBeta=function(){return null},hn.prototype.dblp=function(e){for(var t=this,r=0;r<e;r++)t=t.dbl();return t};var fn=en((function(e){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}})),dn=on.assert;function pn(e){ln.call(this,"short",e),this.a=new(r(u))(e.a,16).toRed(this.red),this.b=new(r(u))(e.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(e),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}fn(pn,ln);var gn=pn;function mn(e,t,n,i){ln.BasePoint.call(this,e,"affine"),null===t&&null===n?(this.x=null,this.y=null,this.inf=!0):(this.x=new(r(u))(t,16),this.y=new(r(u))(n,16),i&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function yn(e,t,n,i){ln.BasePoint.call(this,e,"jacobian"),null===t&&null===n&&null===i?(this.x=this.curve.one,this.y=this.curve.one,this.z=new(r(u))(0)):(this.x=new(r(u))(t,16),this.y=new(r(u))(n,16),this.z=new(r(u))(i,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}pn.prototype._getEndomorphism=function(e){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var t,n;if(e.beta)t=new(r(u))(e.beta,16).toRed(this.red);else{var i=this._getEndoRoots(this.p);t=(t=i[0].cmp(i[1])<0?i[0]:i[1]).toRed(this.red)}if(e.lambda)n=new(r(u))(e.lambda,16);else{var o=this._getEndoRoots(this.n);0===this.g.mul(o[0]).x.cmp(this.g.x.redMul(t))?n=o[0]:(n=o[1],dn(0===this.g.mul(n).x.cmp(this.g.x.redMul(t))))}return{beta:t,lambda:n,basis:e.basis?e.basis.map((function(e){return{a:new(r(u))(e.a,16),b:new(r(u))(e.b,16)}})):this._getEndoBasis(n)}}},pn.prototype._getEndoRoots=function(e){var t=e===this.p?this.red:r(u).mont(e),n=new(r(u))(2).toRed(t).redInvm(),i=n.redNeg(),o=new(r(u))(3).toRed(t).redNeg().redSqrt().redMul(n);return[i.redAdd(o).fromRed(),i.redSub(o).fromRed()]},pn.prototype._getEndoBasis=function(e){for(var t,n,i,o,s,a,c,l,h,f=this.n.ushrn(Math.floor(this.n.bitLength()/2)),d=e,p=this.n.clone(),g=new(r(u))(1),m=new(r(u))(0),y=new(r(u))(0),v=new(r(u))(1),w=0;0!==d.cmpn(0);){var b=p.div(d);l=p.sub(b.mul(d)),h=y.sub(b.mul(g));var A=v.sub(b.mul(m));if(!i&&l.cmp(f)<0)t=c.neg(),n=g,i=l.neg(),o=h;else if(i&&2==++w)break;c=l,p=d,d=l,y=g,g=h,v=m,m=A}s=l.neg(),a=h;var E=i.sqr().add(o.sqr());return s.sqr().add(a.sqr()).cmp(E)>=0&&(s=t,a=n),i.negative&&(i=i.neg(),o=o.neg()),s.negative&&(s=s.neg(),a=a.neg()),[{a:i,b:o},{a:s,b:a}]},pn.prototype._endoSplit=function(e){var t=this.endo.basis,r=t[0],n=t[1],i=n.b.mul(e).divRound(this.n),o=r.b.neg().mul(e).divRound(this.n),s=i.mul(r.a),a=o.mul(n.a),c=i.mul(r.b),u=o.mul(n.b);return{k1:e.sub(s).sub(a),k2:c.add(u).neg()}},pn.prototype.pointFromX=function(e,t){(e=new(r(u))(e,16)).red||(e=e.toRed(this.red));var n=e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),i=n.redSqrt();if(0!==i.redSqr().redSub(n).cmp(this.zero))throw new Error("invalid point");var o=i.fromRed().isOdd();return(t&&!o||!t&&o)&&(i=i.redNeg()),this.point(e,i)},pn.prototype.validate=function(e){if(e.inf)return!0;var t=e.x,r=e.y,n=this.a.redMul(t),i=t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);return 0===r.redSqr().redISub(i).cmpn(0)},pn.prototype._endoWnafMulAdd=function(e,t,r){for(var n=this._endoWnafT1,i=this._endoWnafT2,o=0;o<e.length;o++){var s=this._endoSplit(t[o]),a=e[o],c=a._getBeta();s.k1.negative&&(s.k1.ineg(),a=a.neg(!0)),s.k2.negative&&(s.k2.ineg(),c=c.neg(!0)),n[2*o]=a,n[2*o+1]=c,i[2*o]=s.k1,i[2*o+1]=s.k2}for(var u=this._wnafMulAdd(1,n,i,2*o,r),l=0;l<2*o;l++)n[l]=null,i[l]=null;return u},fn(mn,ln.BasePoint),pn.prototype.point=function(e,t,r){return new mn(this,e,t,r)},pn.prototype.pointFromJSON=function(e,t){return mn.fromJSON(this,e,t)},mn.prototype._getBeta=function(){if(this.curve.endo){var e=this.precomputed;if(e&&e.beta)return e.beta;var t=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(e){var r=this.curve,n=function(e){return r.point(e.x.redMul(r.endo.beta),e.y)};e.beta=t,t.precomputed={beta:null,naf:e.naf&&{wnd:e.naf.wnd,points:e.naf.points.map(n)},doubles:e.doubles&&{step:e.doubles.step,points:e.doubles.points.map(n)}}}return t}},mn.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},mn.fromJSON=function(e,t,r){"string"==typeof t&&(t=JSON.parse(t));var n=e.point(t[0],t[1],r);if(!t[2])return n;function i(t){return e.point(t[0],t[1],r)}var o=t[2];return n.precomputed={beta:null,doubles:o.doubles&&{step:o.doubles.step,points:[n].concat(o.doubles.points.map(i))},naf:o.naf&&{wnd:o.naf.wnd,points:[n].concat(o.naf.points.map(i))}},n},mn.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},mn.prototype.isInfinity=function(){return this.inf},mn.prototype.add=function(e){if(this.inf)return e;if(e.inf)return this;if(this.eq(e))return this.dbl();if(this.neg().eq(e))return this.curve.point(null,null);if(0===this.x.cmp(e.x))return this.curve.point(null,null);var t=this.y.redSub(e.y);0!==t.cmpn(0)&&(t=t.redMul(this.x.redSub(e.x).redInvm()));var r=t.redSqr().redISub(this.x).redISub(e.x),n=t.redMul(this.x.redSub(r)).redISub(this.y);return this.curve.point(r,n)},mn.prototype.dbl=function(){if(this.inf)return this;var e=this.y.redAdd(this.y);if(0===e.cmpn(0))return this.curve.point(null,null);var t=this.curve.a,r=this.x.redSqr(),n=e.redInvm(),i=r.redAdd(r).redIAdd(r).redIAdd(t).redMul(n),o=i.redSqr().redISub(this.x.redAdd(this.x)),s=i.redMul(this.x.redSub(o)).redISub(this.y);return this.curve.point(o,s)},mn.prototype.getX=function(){return this.x.fromRed()},mn.prototype.getY=function(){return this.y.fromRed()},mn.prototype.mul=function(e){return e=new(r(u))(e,16),this.isInfinity()?this:this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve.endo?this.curve._endoWnafMulAdd([this],[e]):this.curve._wnafMul(this,e)},mn.prototype.mulAdd=function(e,t,r){var n=[this,t],i=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i):this.curve._wnafMulAdd(1,n,i,2)},mn.prototype.jmulAdd=function(e,t,r){var n=[this,t],i=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i,!0):this.curve._wnafMulAdd(1,n,i,2,!0)},mn.prototype.eq=function(e){return this===e||this.inf===e.inf&&(this.inf||0===this.x.cmp(e.x)&&0===this.y.cmp(e.y))},mn.prototype.neg=function(e){if(this.inf)return this;var t=this.curve.point(this.x,this.y.redNeg());if(e&&this.precomputed){var r=this.precomputed,n=function(e){return e.neg()};t.precomputed={naf:r.naf&&{wnd:r.naf.wnd,points:r.naf.points.map(n)},doubles:r.doubles&&{step:r.doubles.step,points:r.doubles.points.map(n)}}}return t},mn.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},fn(yn,ln.BasePoint),pn.prototype.jpoint=function(e,t,r){return new yn(this,e,t,r)},yn.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var e=this.z.redInvm(),t=e.redSqr(),r=this.x.redMul(t),n=this.y.redMul(t).redMul(e);return this.curve.point(r,n)},yn.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},yn.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var t=e.z.redSqr(),r=this.z.redSqr(),n=this.x.redMul(t),i=e.x.redMul(r),o=this.y.redMul(t.redMul(e.z)),s=e.y.redMul(r.redMul(this.z)),a=n.redSub(i),c=o.redSub(s);if(0===a.cmpn(0))return 0!==c.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var u=a.redSqr(),l=u.redMul(a),h=n.redMul(u),f=c.redSqr().redIAdd(l).redISub(h).redISub(h),d=c.redMul(h.redISub(f)).redISub(o.redMul(l)),p=this.z.redMul(e.z).redMul(a);return this.curve.jpoint(f,d,p)},yn.prototype.mixedAdd=function(e){if(this.isInfinity())return e.toJ();if(e.isInfinity())return this;var t=this.z.redSqr(),r=this.x,n=e.x.redMul(t),i=this.y,o=e.y.redMul(t).redMul(this.z),s=r.redSub(n),a=i.redSub(o);if(0===s.cmpn(0))return 0!==a.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var c=s.redSqr(),u=c.redMul(s),l=r.redMul(c),h=a.redSqr().redIAdd(u).redISub(l).redISub(l),f=a.redMul(l.redISub(h)).redISub(i.redMul(u)),d=this.z.redMul(s);return this.curve.jpoint(h,f,d)},yn.prototype.dblp=function(e){if(0===e)return this;if(this.isInfinity())return this;if(!e)return this.dbl();var t;if(this.curve.zeroA||this.curve.threeA){var r=this;for(t=0;t<e;t++)r=r.dbl();return r}var n=this.curve.a,i=this.curve.tinv,o=this.x,s=this.y,a=this.z,c=a.redSqr().redSqr(),u=s.redAdd(s);for(t=0;t<e;t++){var l=o.redSqr(),h=u.redSqr(),f=h.redSqr(),d=l.redAdd(l).redIAdd(l).redIAdd(n.redMul(c)),p=o.redMul(h),g=d.redSqr().redISub(p.redAdd(p)),m=p.redISub(g),y=d.redMul(m);y=y.redIAdd(y).redISub(f);var v=u.redMul(a);t+1<e&&(c=c.redMul(f)),o=g,a=v,u=y}return this.curve.jpoint(o,u.redMul(i),a)},yn.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},yn.prototype._zeroDbl=function(){var e,t,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),s=this.x.redAdd(i).redSqr().redISub(n).redISub(o);s=s.redIAdd(s);var a=n.redAdd(n).redIAdd(n),c=a.redSqr().redISub(s).redISub(s),u=o.redIAdd(o);u=(u=u.redIAdd(u)).redIAdd(u),e=c,t=a.redMul(s.redISub(c)).redISub(u),r=this.y.redAdd(this.y)}else{var l=this.x.redSqr(),h=this.y.redSqr(),f=h.redSqr(),d=this.x.redAdd(h).redSqr().redISub(l).redISub(f);d=d.redIAdd(d);var p=l.redAdd(l).redIAdd(l),g=p.redSqr(),m=f.redIAdd(f);m=(m=m.redIAdd(m)).redIAdd(m),e=g.redISub(d).redISub(d),t=p.redMul(d.redISub(e)).redISub(m),r=(r=this.y.redMul(this.z)).redIAdd(r)}return this.curve.jpoint(e,t,r)},yn.prototype._threeDbl=function(){var e,t,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),s=this.x.redAdd(i).redSqr().redISub(n).redISub(o);s=s.redIAdd(s);var a=n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),c=a.redSqr().redISub(s).redISub(s);e=c;var u=o.redIAdd(o);u=(u=u.redIAdd(u)).redIAdd(u),t=a.redMul(s.redISub(c)).redISub(u),r=this.y.redAdd(this.y)}else{var l=this.z.redSqr(),h=this.y.redSqr(),f=this.x.redMul(h),d=this.x.redSub(l).redMul(this.x.redAdd(l));d=d.redAdd(d).redIAdd(d);var p=f.redIAdd(f),g=(p=p.redIAdd(p)).redAdd(p);e=d.redSqr().redISub(g),r=this.y.redAdd(this.z).redSqr().redISub(h).redISub(l);var m=h.redSqr();m=(m=(m=m.redIAdd(m)).redIAdd(m)).redIAdd(m),t=d.redMul(p.redISub(e)).redISub(m)}return this.curve.jpoint(e,t,r)},yn.prototype._dbl=function(){var e=this.curve.a,t=this.x,r=this.y,n=this.z,i=n.redSqr().redSqr(),o=t.redSqr(),s=r.redSqr(),a=o.redAdd(o).redIAdd(o).redIAdd(e.redMul(i)),c=t.redAdd(t),u=(c=c.redIAdd(c)).redMul(s),l=a.redSqr().redISub(u.redAdd(u)),h=u.redISub(l),f=s.redSqr();f=(f=(f=f.redIAdd(f)).redIAdd(f)).redIAdd(f);var d=a.redMul(h).redISub(f),p=r.redAdd(r).redMul(n);return this.curve.jpoint(l,d,p)},yn.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var e=this.x.redSqr(),t=this.y.redSqr(),r=this.z.redSqr(),n=t.redSqr(),i=e.redAdd(e).redIAdd(e),o=i.redSqr(),s=this.x.redAdd(t).redSqr().redISub(e).redISub(n),a=(s=(s=(s=s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(o)).redSqr(),c=n.redIAdd(n);c=(c=(c=c.redIAdd(c)).redIAdd(c)).redIAdd(c);var u=i.redIAdd(s).redSqr().redISub(o).redISub(a).redISub(c),l=t.redMul(u);l=(l=l.redIAdd(l)).redIAdd(l);var h=this.x.redMul(a).redISub(l);h=(h=h.redIAdd(h)).redIAdd(h);var f=this.y.redMul(u.redMul(c.redISub(u)).redISub(s.redMul(a)));f=(f=(f=f.redIAdd(f)).redIAdd(f)).redIAdd(f);var d=this.z.redAdd(s).redSqr().redISub(r).redISub(a);return this.curve.jpoint(h,f,d)},yn.prototype.mul=function(e,t){return e=new(r(u))(e,t),this.curve._wnafMul(this,e)},yn.prototype.eq=function(e){if("affine"===e.type)return this.eq(e.toJ());if(this===e)return!0;var t=this.z.redSqr(),r=e.z.redSqr();if(0!==this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0))return!1;var n=t.redMul(this.z),i=r.redMul(e.z);return 0===this.y.redMul(i).redISub(e.y.redMul(n)).cmpn(0)},yn.prototype.eqXToP=function(e){var t=this.z.redSqr(),r=e.toRed(this.curve.red).redMul(t);if(0===this.x.cmp(r))return!0;for(var n=e.clone(),i=this.curve.redN.redMul(t);;){if(n.iadd(this.curve.n),n.cmp(this.curve.p)>=0)return!1;if(r.redIAdd(i),0===this.x.cmp(r))return!0}},yn.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},yn.prototype.isInfinity=function(){return 0===this.z.cmpn(0)};var vn=en((function(e,t){var r=t;r.base=ln,r.short=gn,r.mont=null,r.edwards=null})),wn=en((function(e,t){var n,i=t,o=on.assert;function s(e){"short"===e.type?this.curve=new vn.short(e):"edwards"===e.type?this.curve=new vn.edwards(e):this.curve=new vn.mont(e),this.g=this.curve.g,this.n=this.curve.n,this.hash=e.hash,o(this.g.validate(),"Invalid curve"),o(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function a(e,t){Object.defineProperty(i,e,{configurable:!0,enumerable:!0,get:function(){var r=new s(t);return Object.defineProperty(i,e,{configurable:!0,enumerable:!0,value:r}),r}})}i.PresetCurve=s,a("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:r(Xr).sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),a("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:r(Xr).sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),a("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:r(Xr).sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),a("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:r(Xr).sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),a("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:r(Xr).sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),a("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:r(Xr).sha256,gRed:!1,g:["9"]}),a("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:r(Xr).sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{n=null.crash()}catch(e){n=void 0}a("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:r(Xr).sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",n]})}));function bn(e){if(!(this instanceof bn))return new bn(e);this.hash=e.hash,this.predResist=!!e.predResist,this.outLen=this.hash.outSize,this.minEntropy=e.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var t=nn.toArray(e.entropy,e.entropyEnc||"hex"),r=nn.toArray(e.nonce,e.nonceEnc||"hex"),n=nn.toArray(e.pers,e.persEnc||"hex");tn(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(t,r,n)}var An=bn;bn.prototype._init=function(e,t,r){var n=e.concat(t).concat(r);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var i=0;i<this.V.length;i++)this.K[i]=0,this.V[i]=1;this._update(n),this._reseed=1,this.reseedInterval=281474976710656},bn.prototype._hmac=function(){return new(r(Xr).hmac)(this.hash,this.K)},bn.prototype._update=function(e){var t=this._hmac().update(this.V).update([0]);e&&(t=t.update(e)),this.K=t.digest(),this.V=this._hmac().update(this.V).digest(),e&&(this.K=this._hmac().update(this.V).update([1]).update(e).digest(),this.V=this._hmac().update(this.V).digest())},bn.prototype.reseed=function(e,t,r,n){"string"!=typeof t&&(n=r,r=t,t=null),e=nn.toArray(e,t),r=nn.toArray(r,n),tn(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(e.concat(r||[])),this._reseed=1},bn.prototype.generate=function(e,t,r,n){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof t&&(n=r,r=t,t=null),r&&(r=nn.toArray(r,n||"hex"),this._update(r));for(var i=[];i.length<e;)this.V=this._hmac().update(this.V).digest(),i=i.concat(this.V);var o=i.slice(0,e);return this._update(r),this._reseed++,nn.encode(o,t)};var En=on.assert;function xn(e,t){this.ec=e,this.priv=null,this.pub=null,t.priv&&this._importPrivate(t.priv,t.privEnc),t.pub&&this._importPublic(t.pub,t.pubEnc)}var Sn=xn;xn.fromPublic=function(e,t,r){return t instanceof xn?t:new xn(e,{pub:t,pubEnc:r})},xn.fromPrivate=function(e,t,r){return t instanceof xn?t:new xn(e,{priv:t,privEnc:r})},xn.prototype.validate=function(){var e=this.getPublic();return e.isInfinity()?{result:!1,reason:"Invalid public key"}:e.validate()?e.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},xn.prototype.getPublic=function(e,t){return"string"==typeof e&&(t=e,e=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),t?this.pub.encode(t,e):this.pub},xn.prototype.getPrivate=function(e){return"hex"===e?this.priv.toString(16,2):this.priv},xn.prototype._importPrivate=function(e,t){this.priv=new(r(u))(e,t||16),this.priv=this.priv.umod(this.ec.curve.n)},xn.prototype._importPublic=function(e,t){if(e.x||e.y)return"mont"===this.ec.curve.type?En(e.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||En(e.x&&e.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(e.x,e.y));this.pub=this.ec.curve.decodePoint(e,t)},xn.prototype.derive=function(e){return e.validate()||En(e.validate(),"public point not validated"),e.mul(this.priv).getX()},xn.prototype.sign=function(e,t,r){return this.ec.sign(e,this,t,r)},xn.prototype.verify=function(e,t){return this.ec.verify(e,t,this)},xn.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"};var Cn=on.assert;function kn(e,t){if(e instanceof kn)return e;this._importDER(e,t)||(Cn(e.r&&e.s,"Signature without r or s"),this.r=new(r(u))(e.r,16),this.s=new(r(u))(e.s,16),void 0===e.recoveryParam?this.recoveryParam=null:this.recoveryParam=e.recoveryParam)}var _n=kn;function Pn(){this.place=0}function Rn(e,t){var r=e[t.place++];if(!(128&r))return r;var n=15&r;if(0===n||n>4)return!1;for(var i=0,o=0,s=t.place;o<n;o++,s++)i<<=8,i|=e[s],i>>>=0;return!(i<=127)&&(t.place=s,i)}function On(e){for(var t=0,r=e.length-1;!e[t]&&!(128&e[t+1])&&t<r;)t++;return 0===t?e:e.slice(t)}function In(e,t){if(t<128)e.push(t);else{var r=1+(Math.log(t)/Math.LN2>>>3);for(e.push(128|r);--r;)e.push(t>>>(r<<3)&255);e.push(t)}}kn.prototype._importDER=function(e,t){e=on.toArray(e,t);var n=new Pn;if(48!==e[n.place++])return!1;var i=Rn(e,n);if(!1===i)return!1;if(i+n.place!==e.length)return!1;if(2!==e[n.place++])return!1;var o=Rn(e,n);if(!1===o)return!1;var s=e.slice(n.place,o+n.place);if(n.place+=o,2!==e[n.place++])return!1;var a=Rn(e,n);if(!1===a)return!1;if(e.length!==a+n.place)return!1;var c=e.slice(n.place,a+n.place);if(0===s[0]){if(!(128&s[1]))return!1;s=s.slice(1)}if(0===c[0]){if(!(128&c[1]))return!1;c=c.slice(1)}return this.r=new(r(u))(s),this.s=new(r(u))(c),this.recoveryParam=null,!0},kn.prototype.toDER=function(e){var t=this.r.toArray(),r=this.s.toArray();for(128&t[0]&&(t=[0].concat(t)),128&r[0]&&(r=[0].concat(r)),t=On(t),r=On(r);!(r[0]||128&r[1]);)r=r.slice(1);var n=[2];In(n,t.length),(n=n.concat(t)).push(2),In(n,r.length);var i=n.concat(r),o=[48];return In(o,i.length),o=o.concat(i),on.encode(o,e)};var Nn=function(){throw new Error("unsupported")},Tn=on.assert;function Mn(e){if(!(this instanceof Mn))return new Mn(e);"string"==typeof e&&(Tn(Object.prototype.hasOwnProperty.call(wn,e),"Unknown curve "+e),e=wn[e]),e instanceof wn.PresetCurve&&(e={curve:e}),this.curve=e.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=e.curve.g,this.g.precompute(e.curve.n.bitLength()+1),this.hash=e.hash||e.curve.hash}var Bn=Mn;Mn.prototype.keyPair=function(e){return new Sn(this,e)},Mn.prototype.keyFromPrivate=function(e,t){return Sn.fromPrivate(this,e,t)},Mn.prototype.keyFromPublic=function(e,t){return Sn.fromPublic(this,e,t)},Mn.prototype.genKeyPair=function(e){e||(e={});for(var t=new An({hash:this.hash,pers:e.pers,persEnc:e.persEnc||"utf8",entropy:e.entropy||Nn(this.hash.hmacStrength),entropyEnc:e.entropy&&e.entropyEnc||"utf8",nonce:this.n.toArray()}),n=this.n.byteLength(),i=this.n.sub(new(r(u))(2));;){var o=new(r(u))(t.generate(n));if(!(o.cmp(i)>0))return o.iaddn(1),this.keyFromPrivate(o)}},Mn.prototype._truncateToN=function(e,t){var r=8*e.byteLength()-this.n.bitLength();return r>0&&(e=e.ushrn(r)),!t&&e.cmp(this.n)>=0?e.sub(this.n):e},Mn.prototype.sign=function(e,t,n,i){"object"==typeof n&&(i=n,n=null),i||(i={}),t=this.keyFromPrivate(t,n),e=this._truncateToN(new(r(u))(e,16));for(var o=this.n.byteLength(),s=t.getPrivate().toArray("be",o),a=e.toArray("be",o),c=new An({hash:this.hash,entropy:s,nonce:a,pers:i.pers,persEnc:i.persEnc||"utf8"}),l=this.n.sub(new(r(u))(1)),h=0;;h++){var f=i.k?i.k(h):new(r(u))(c.generate(this.n.byteLength()));if(!((f=this._truncateToN(f,!0)).cmpn(1)<=0||f.cmp(l)>=0)){var d=this.g.mul(f);if(!d.isInfinity()){var p=d.getX(),g=p.umod(this.n);if(0!==g.cmpn(0)){var m=f.invm(this.n).mul(g.mul(t.getPrivate()).iadd(e));if(0!==(m=m.umod(this.n)).cmpn(0)){var y=(d.getY().isOdd()?1:0)|(0!==p.cmp(g)?2:0);return i.canonical&&m.cmp(this.nh)>0&&(m=this.n.sub(m),y^=1),new _n({r:g,s:m,recoveryParam:y})}}}}}},Mn.prototype.verify=function(e,t,n,i){e=this._truncateToN(new(r(u))(e,16)),n=this.keyFromPublic(n,i);var o=(t=new _n(t,"hex")).r,s=t.s;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;if(s.cmpn(1)<0||s.cmp(this.n)>=0)return!1;var a,c=s.invm(this.n),l=c.mul(e).umod(this.n),h=c.mul(o).umod(this.n);return this.curve._maxwellTrick?!(a=this.g.jmulAdd(l,n.getPublic(),h)).isInfinity()&&a.eqXToP(o):!(a=this.g.mulAdd(l,n.getPublic(),h)).isInfinity()&&0===a.getX().umod(this.n).cmp(o)},Mn.prototype.recoverPubKey=function(e,t,n,i){Tn((3&n)===n,"The recovery param is more than two bits"),t=new _n(t,i);var o=this.n,s=new(r(u))(e),a=t.r,c=t.s,l=1&n,h=n>>1;if(a.cmp(this.curve.p.umod(this.curve.n))>=0&&h)throw new Error("Unable to find sencond key candinate");a=h?this.curve.pointFromX(a.add(this.curve.n),l):this.curve.pointFromX(a,l);var f=t.r.invm(o),d=o.sub(s).mul(f).umod(o),p=c.mul(f).umod(o);return this.g.mulAdd(d,a,p)},Mn.prototype.getKeyRecoveryParam=function(e,t,r,n){if(null!==(t=new _n(t,n)).recoveryParam)return t.recoveryParam;for(var i=0;i<4;i++){var o;try{o=this.recoverPubKey(e,t,i)}catch(e){continue}if(o.eq(r))return i}throw new Error("Unable to find valid recovery factor")};var Fn=en((function(e,t){var r=t;r.version="6.5.4",r.utils=on,r.rand=function(){throw new Error("unsupported")},r.curve=vn,r.curves=wn,r.ec=Bn,r.eddsa=null})).ec;l=o("jNZoB");const Ln=new(0,(h=o("3Qchy")).Logger)("signing-key/5.7.0");let jn=null;function Dn(){return jn||(jn=new Fn("secp256k1")),jn}class Un{_addPoint(e){const t=Dn().keyFromPublic((0,l.arrayify)(this.publicKey)),r=Dn().keyFromPublic((0,l.arrayify)(e));return"0x"+t.pub.add(r.pub).encodeCompressed("hex")}signDigest(e){const t=Dn().keyFromPrivate((0,l.arrayify)(this.privateKey)),r=(0,l.arrayify)(e);32!==r.length&&Ln.throwArgumentError("bad digest length","digest",e);const n=t.sign(r,{canonical:!0});return(0,l.splitSignature)({recoveryParam:n.recoveryParam,r:(0,l.hexZeroPad)("0x"+n.r.toString(16),32),s:(0,l.hexZeroPad)("0x"+n.s.toString(16),32)})}computeSharedSecret(e){const t=Dn().keyFromPrivate((0,l.arrayify)(this.privateKey)),r=Dn().keyFromPublic((0,l.arrayify)(qn(e)));return(0,l.hexZeroPad)("0x"+t.derive(r.getPublic()).toString(16),32)}static isSigningKey(e){return!(!e||!e._isSigningKey)}constructor(e){(0,B.defineReadOnly)(this,"curve","secp256k1"),(0,B.defineReadOnly)(this,"privateKey",(0,l.hexlify)(e)),32!==(0,l.hexDataLength)(this.privateKey)&&Ln.throwArgumentError("invalid private key","privateKey","[[ REDACTED ]]");const t=Dn().keyFromPrivate((0,l.arrayify)(this.privateKey));(0,B.defineReadOnly)(this,"publicKey","0x"+t.getPublic(!1,"hex")),(0,B.defineReadOnly)(this,"compressedPublicKey","0x"+t.getPublic(!0,"hex")),(0,B.defineReadOnly)(this,"_isSigningKey",!0)}}function zn(e,t){const r=(0,l.splitSignature)(t),n={r:(0,l.arrayify)(r.r),s:(0,l.arrayify)(r.s)};return"0x"+Dn().recoverPubKey((0,l.arrayify)(e),n,r.recoveryParam).encode("hex",!1)}function qn(e,t){const r=(0,l.arrayify)(e);if(32===r.length){const e=new Un(r);return t?"0x"+Dn().keyFromPrivate(r).getPublic(!0,"hex"):e.publicKey}return 33===r.length?t?(0,l.hexlify)(r):"0x"+Dn().keyFromPublic(r).getPublic(!1,"hex"):65===r.length?t?"0x"+Dn().keyFromPublic(r).getPublic(!0,"hex"):(0,l.hexlify)(r):Ln.throwArgumentError("invalid public or private key","key","[REDACTED]")}const Kn=new(0,(h=o("3Qchy")).Logger)("transactions/5.7.0");var Gn,Wn;function Hn(e){return"0x"===e?null:Ne(e)}function Jn(e){return"0x"===e?Ye:y.from(e)}(Wn=Gn||(Gn={}))[Wn.legacy=0]="legacy",Wn[Wn.eip2930=1]="eip2930",Wn[Wn.eip1559=2]="eip1559";const Vn=[{name:"nonce",maxLength:32,numeric:!0},{name:"gasPrice",maxLength:32,numeric:!0},{name:"gasLimit",maxLength:32,numeric:!0},{name:"to",length:20},{name:"value",maxLength:32,numeric:!0},{name:"data"}],Qn={chainId:!0,data:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,type:!0,value:!0};function Zn(e){const t=qn(e);return Ne((0,l.hexDataSlice)(Se((0,l.hexDataSlice)(t,1)),12))}function Yn(e,t){return Zn(zn((0,l.arrayify)(e),t))}function Xn(e,t){const r=(0,l.stripZeros)(y.from(e).toHexString());return r.length>32&&Kn.throwArgumentError("invalid length for "+t,"transaction:"+t,e),r}function $n(e,t){return{address:Ne(e),storageKeys:(t||[]).map(((t,r)=>(32!==(0,l.hexDataLength)(t)&&Kn.throwArgumentError("invalid access list storageKey",`accessList[${e}:${r}]`,t),t.toLowerCase())))}}function ei(e){if(Array.isArray(e))return e.map(((e,t)=>Array.isArray(e)?(e.length>2&&Kn.throwArgumentError("access list expected to be [ address, storageKeys[] ]",`value[${t}]`,e),$n(e[0],e[1])):$n(e.address,e.storageKeys)));const t=Object.keys(e).map((t=>{const r=e[t].reduce(((e,t)=>(e[t]=!0,e)),{});return $n(t,Object.keys(r).sort())}));return t.sort(((e,t)=>e.address.localeCompare(t.address))),t}function ti(e){return ei(e).map((e=>[e.address,e.storageKeys]))}function ri(e,t){if(null!=e.gasPrice){const t=y.from(e.gasPrice),r=y.from(e.maxFeePerGas||0);t.eq(r)||Kn.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas","tx",{gasPrice:t,maxFeePerGas:r})}const r=[Xn(e.chainId||0,"chainId"),Xn(e.nonce||0,"nonce"),Xn(e.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),Xn(e.maxFeePerGas||0,"maxFeePerGas"),Xn(e.gasLimit||0,"gasLimit"),null!=e.to?Ne(e.to):"0x",Xn(e.value||0,"value"),e.data||"0x",ti(e.accessList||[])];if(t){const e=(0,l.splitSignature)(t);r.push(Xn(e.recoveryParam,"recoveryParam")),r.push((0,l.stripZeros)(e.r)),r.push((0,l.stripZeros)(e.s))}return(0,l.hexConcat)(["0x02",Ce.encode(r)])}function ni(e,t){const r=[Xn(e.chainId||0,"chainId"),Xn(e.nonce||0,"nonce"),Xn(e.gasPrice||0,"gasPrice"),Xn(e.gasLimit||0,"gasLimit"),null!=e.to?Ne(e.to):"0x",Xn(e.value||0,"value"),e.data||"0x",ti(e.accessList||[])];if(t){const e=(0,l.splitSignature)(t);r.push(Xn(e.recoveryParam,"recoveryParam")),r.push((0,l.stripZeros)(e.r)),r.push((0,l.stripZeros)(e.s))}return(0,l.hexConcat)(["0x01",Ce.encode(r)])}function ii(e,t){if(null==e.type||0===e.type)return null!=e.accessList&&Kn.throwArgumentError("untyped transactions do not support accessList; include type: 1","transaction",e),function(e,t){(0,B.checkProperties)(e,Qn);const r=[];Vn.forEach((function(t){let n=e[t.name]||[];const i={};t.numeric&&(i.hexPad="left"),n=(0,l.arrayify)((0,l.hexlify)(n,i)),t.length&&n.length!==t.length&&n.length>0&&Kn.throwArgumentError("invalid length for "+t.name,"transaction:"+t.name,n),t.maxLength&&(n=(0,l.stripZeros)(n),n.length>t.maxLength&&Kn.throwArgumentError("invalid length for "+t.name,"transaction:"+t.name,n)),r.push((0,l.hexlify)(n))}));let n=0;if(null!=e.chainId?(n=e.chainId,"number"!=typeof n&&Kn.throwArgumentError("invalid transaction.chainId","transaction",e)):t&&!(0,l.isBytesLike)(t)&&t.v>28&&(n=Math.floor((t.v-35)/2)),0!==n&&(r.push((0,l.hexlify)(n)),r.push("0x"),r.push("0x")),!t)return Ce.encode(r);const i=(0,l.splitSignature)(t);let o=27+i.recoveryParam;return 0!==n?(r.pop(),r.pop(),r.pop(),o+=2*n+8,i.v>28&&i.v!==o&&Kn.throwArgumentError("transaction.chainId/signature.v mismatch","signature",t)):i.v!==o&&Kn.throwArgumentError("transaction.chainId/signature.v mismatch","signature",t),r.push((0,l.hexlify)(o)),r.push((0,l.stripZeros)((0,l.arrayify)(i.r))),r.push((0,l.stripZeros)((0,l.arrayify)(i.s))),Ce.encode(r)}(e,t);switch(e.type){case 1:return ni(e,t);case 2:return ri(e,t)}return Kn.throwError(`unsupported transaction type: ${e.type}`,h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"serializeTransaction",transactionType:e.type})}function oi(e,t,r){try{const r=Jn(t[0]).toNumber();if(0!==r&&1!==r)throw new Error("bad recid");e.v=r}catch(e){Kn.throwArgumentError("invalid v for transaction type: 1","v",t[0])}e.r=(0,l.hexZeroPad)(t[1],32),e.s=(0,l.hexZeroPad)(t[2],32);try{const t=Se(r(e));e.from=Yn(t,{r:e.r,s:e.s,recoveryParam:e.v})}catch(e){}}function si(e){const t=(0,l.arrayify)(e);if(t[0]>127)return function(e){const t=Ce.decode(e);9!==t.length&&6!==t.length&&Kn.throwArgumentError("invalid raw transaction","rawTransaction",e);const r={nonce:Jn(t[0]).toNumber(),gasPrice:Jn(t[1]),gasLimit:Jn(t[2]),to:Hn(t[3]),value:Jn(t[4]),data:t[5],chainId:0};if(6===t.length)return r;try{r.v=y.from(t[6]).toNumber()}catch(e){return r}if(r.r=(0,l.hexZeroPad)(t[7],32),r.s=(0,l.hexZeroPad)(t[8],32),y.from(r.r).isZero()&&y.from(r.s).isZero())r.chainId=r.v,r.v=0;else{r.chainId=Math.floor((r.v-35)/2),r.chainId<0&&(r.chainId=0);let n=r.v-27;const i=t.slice(0,6);0!==r.chainId&&(i.push((0,l.hexlify)(r.chainId)),i.push("0x"),i.push("0x"),n-=2*r.chainId+8);const o=Se(Ce.encode(i));try{r.from=Yn(o,{r:(0,l.hexlify)(r.r),s:(0,l.hexlify)(r.s),recoveryParam:n})}catch(e){}r.hash=Se(e)}return r.type=null,r}(t);switch(t[0]){case 1:return function(e){const t=Ce.decode(e.slice(1));8!==t.length&&11!==t.length&&Kn.throwArgumentError("invalid component count for transaction type: 1","payload",(0,l.hexlify)(e));const r={type:1,chainId:Jn(t[0]).toNumber(),nonce:Jn(t[1]).toNumber(),gasPrice:Jn(t[2]),gasLimit:Jn(t[3]),to:Hn(t[4]),value:Jn(t[5]),data:t[6],accessList:ei(t[7])};return 8===t.length||(r.hash=Se(e),oi(r,t.slice(8),ni)),r}(t);case 2:return function(e){const t=Ce.decode(e.slice(1));9!==t.length&&12!==t.length&&Kn.throwArgumentError("invalid component count for transaction type: 2","payload",(0,l.hexlify)(e));const r=Jn(t[2]),n=Jn(t[3]),i={type:2,chainId:Jn(t[0]).toNumber(),nonce:Jn(t[1]).toNumber(),maxPriorityFeePerGas:r,maxFeePerGas:n,gasPrice:null,gasLimit:Jn(t[4]),to:Hn(t[5]),value:Jn(t[6]),data:t[7],accessList:ei(t[8])};return 9===t.length||(i.hash=Se(e),oi(i,t.slice(9),ri)),i}(t)}return Kn.throwError(`unsupported transaction type: ${t[0]}`,h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"parseTransaction",transactionType:t[0]})}h=o("3Qchy");var ai=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};const ci=new(0,h.Logger)("contracts/5.7.0"),ui={chainId:!0,data:!0,from:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,value:!0,type:!0,accessList:!0,maxFeePerGas:!0,maxPriorityFeePerGas:!0,customData:!0,ccipReadEnabled:!0};function li(e,t){return ai(this,void 0,void 0,(function*(){const r=yield t;"string"!=typeof r&&ci.throwArgumentError("invalid address or ENS name","name",r);try{return Ne(r)}catch(e){}e||ci.throwError("a provider or signer is needed to resolve ENS names",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"resolveName"});const n=yield e.resolveName(r);return null==n&&ci.throwArgumentError("resolver or addr is not configured for ENS name","name",r),n}))}function hi(e,t,r){return ai(this,void 0,void 0,(function*(){return Array.isArray(r)?yield Promise.all(r.map(((r,n)=>hi(e,Array.isArray(t)?t[n]:t[r.name],r)))):"address"===r.type?yield li(e,t):"tuple"===r.type?yield hi(e,t,r.components):"array"===r.baseType?Array.isArray(t)?yield Promise.all(t.map((t=>hi(e,t,r.arrayChildren)))):Promise.reject(ci.makeError("invalid value for array",h.Logger.errors.INVALID_ARGUMENT,{argument:"value",value:t})):t}))}function fi(e,t,r){return ai(this,void 0,void 0,(function*(){let n={};r.length===t.inputs.length+1&&"object"==typeof r[r.length-1]&&(n=(0,B.shallowCopy)(r.pop())),ci.checkArgumentCount(r.length,t.inputs.length,"passed to contract"),e.signer?n.from?n.from=(0,B.resolveProperties)({override:li(e.signer,n.from),signer:e.signer.getAddress()}).then((e=>ai(this,void 0,void 0,(function*(){return Ne(e.signer)!==e.override&&ci.throwError("Contract with a Signer cannot override from",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"overrides.from"}),e.override})))):n.from=e.signer.getAddress():n.from&&(n.from=li(e.provider,n.from));const i=yield(0,B.resolveProperties)({args:hi(e.signer||e.provider,r,t.inputs),address:e.resolvedAddress,overrides:(0,B.resolveProperties)(n)||{}}),o=e.interface.encodeFunctionData(t,i.args),s={data:o,to:i.address},a=i.overrides;if(null!=a.nonce&&(s.nonce=y.from(a.nonce).toNumber()),null!=a.gasLimit&&(s.gasLimit=y.from(a.gasLimit)),null!=a.gasPrice&&(s.gasPrice=y.from(a.gasPrice)),null!=a.maxFeePerGas&&(s.maxFeePerGas=y.from(a.maxFeePerGas)),null!=a.maxPriorityFeePerGas&&(s.maxPriorityFeePerGas=y.from(a.maxPriorityFeePerGas)),null!=a.from&&(s.from=a.from),null!=a.type&&(s.type=a.type),null!=a.accessList&&(s.accessList=ei(a.accessList)),null==s.gasLimit&&null!=t.gas){let e=21e3;const r=(0,l.arrayify)(o);for(let t=0;t<r.length;t++)e+=4,r[t]&&(e+=64);s.gasLimit=y.from(t.gas).add(e)}if(a.value){const e=y.from(a.value);e.isZero()||t.payable||ci.throwError("non-payable method cannot override value",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"overrides.value",value:n.value}),s.value=e}a.customData&&(s.customData=(0,B.shallowCopy)(a.customData)),a.ccipReadEnabled&&(s.ccipReadEnabled=!!a.ccipReadEnabled),delete n.nonce,delete n.gasLimit,delete n.gasPrice,delete n.from,delete n.value,delete n.type,delete n.accessList,delete n.maxFeePerGas,delete n.maxPriorityFeePerGas,delete n.customData,delete n.ccipReadEnabled;const c=Object.keys(n).filter((e=>null!=n[e]));return c.length&&ci.throwError(`cannot override ${c.map((e=>JSON.stringify(e))).join(",")}`,h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"overrides",overrides:c}),s}))}function di(e,t){const r=t.wait.bind(t);t.wait=t=>r(t).then((t=>(t.events=t.logs.map((r=>{let n=(0,B.deepCopy)(r),i=null;try{i=e.interface.parseLog(r)}catch(e){}return i&&(n.args=i.args,n.decode=(t,r)=>e.interface.decodeEventLog(i.eventFragment,t,r),n.event=i.name,n.eventSignature=i.signature),n.removeListener=()=>e.provider,n.getBlock=()=>e.provider.getBlock(t.blockHash),n.getTransaction=()=>e.provider.getTransaction(t.transactionHash),n.getTransactionReceipt=()=>Promise.resolve(t),n})),t)))}function pi(e,t,r){const n=e.signer||e.provider;return function(...i){return ai(this,void 0,void 0,(function*(){let o;if(i.length===t.inputs.length+1&&"object"==typeof i[i.length-1]){const e=(0,B.shallowCopy)(i.pop());null!=e.blockTag&&(o=yield e.blockTag),delete e.blockTag,i.push(e)}null!=e.deployTransaction&&(yield e._deployed(o));const s=yield fi(e,t,i),a=yield n.call(s,o);try{let n=e.interface.decodeFunctionResult(t,a);return r&&1===t.outputs.length&&(n=n[0]),n}catch(t){throw t.code===h.Logger.errors.CALL_EXCEPTION&&(t.address=e.address,t.args=i,t.transaction=s),t}}))}}function gi(e,t,r){return t.constant?pi(e,t,r):function(e,t){return function(...r){return ai(this,void 0,void 0,(function*(){e.signer||ci.throwError("sending a transaction requires a signer",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"sendTransaction"}),null!=e.deployTransaction&&(yield e._deployed());const n=yield fi(e,t,r),i=yield e.signer.sendTransaction(n);return di(e,i),i}))}}(e,t)}function mi(e){return!e.address||null!=e.topics&&0!==e.topics.length?(e.address||"*")+"@"+(e.topics?e.topics.map((e=>Array.isArray(e)?e.join("|"):e)).join(":"):""):"*"}class yi{addListener(e,t){this._listeners.push({listener:e,once:t})}removeListener(e){let t=!1;this._listeners=this._listeners.filter((r=>!(!t&&r.listener===e)||(t=!0,!1)))}removeAllListeners(){this._listeners=[]}listeners(){return this._listeners.map((e=>e.listener))}listenerCount(){return this._listeners.length}run(e){const t=this.listenerCount();return this._listeners=this._listeners.filter((t=>{const r=e.slice();return setTimeout((()=>{t.listener.apply(this,r)}),0),!t.once})),t}prepareEvent(e){}getEmit(e){return[e]}constructor(e,t){(0,B.defineReadOnly)(this,"tag",e),(0,B.defineReadOnly)(this,"filter",t),this._listeners=[]}}class vi extends yi{constructor(){super("error",null)}}class wi extends yi{prepareEvent(e){super.prepareEvent(e),e.event=this.fragment.name,e.eventSignature=this.fragment.format(),e.decode=(e,t)=>this.interface.decodeEventLog(this.fragment,e,t);try{e.args=this.interface.decodeEventLog(this.fragment,e.data,e.topics)}catch(t){e.args=null,e.decodeError=t}}getEmit(e){const t=ve(e.args);if(t.length)throw t[0].error;const r=(e.args||[]).slice();return r.push(e),r}constructor(e,t,r,n){const i={address:e};let o=t.getEventTopic(r);n?(o!==n[0]&&ci.throwArgumentError("topic mismatch","topics",n),i.topics=n.slice()):i.topics=[o],super(mi(i),i),(0,B.defineReadOnly)(this,"address",e),(0,B.defineReadOnly)(this,"interface",t),(0,B.defineReadOnly)(this,"fragment",r)}}class bi extends yi{prepareEvent(e){super.prepareEvent(e);try{const t=this.interface.parseLog(e);e.event=t.name,e.eventSignature=t.signature,e.decode=(e,r)=>this.interface.decodeEventLog(t.eventFragment,e,r),e.args=t.args}catch(e){}}constructor(e,t){super("*",{address:e}),(0,B.defineReadOnly)(this,"address",e),(0,B.defineReadOnly)(this,"interface",t)}}class Ai{static getContractAddress(e){return Be(e)}static getInterface(e){return Dr.isInterface(e)?e:new Dr(e)}deployed(){return this._deployed()}_deployed(e){return this._deployedPromise||(this.deployTransaction?this._deployedPromise=this.deployTransaction.wait().then((()=>this)):this._deployedPromise=this.provider.getCode(this.address,e).then((e=>("0x"===e&&ci.throwError("contract not deployed",h.Logger.errors.UNSUPPORTED_OPERATION,{contractAddress:this.address,operation:"getDeployed"}),this)))),this._deployedPromise}fallback(e){this.signer||ci.throwError("sending a transactions require a signer",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"sendTransaction(fallback)"});const t=(0,B.shallowCopy)(e||{});return["from","to"].forEach((function(e){null!=t[e]&&ci.throwError("cannot override "+e,h.Logger.errors.UNSUPPORTED_OPERATION,{operation:e})})),t.to=this.resolvedAddress,this.deployed().then((()=>this.signer.sendTransaction(t)))}connect(e){"string"==typeof e&&(e=new(0,Wr.VoidSigner)(e,this.provider));const t=new this.constructor(this.address,this.interface,e);return this.deployTransaction&&(0,B.defineReadOnly)(t,"deployTransaction",this.deployTransaction),t}attach(e){return new this.constructor(e,this.interface,this.signer||this.provider)}static isIndexed(e){return Fr.isIndexed(e)}_normalizeRunningEvent(e){return this._runningEvents[e.tag]?this._runningEvents[e.tag]:e}_getRunningEvent(e){if("string"==typeof e){if("error"===e)return this._normalizeRunningEvent(new vi);if("event"===e)return this._normalizeRunningEvent(new yi("event",null));if("*"===e)return this._normalizeRunningEvent(new bi(this.address,this.interface));const t=this.interface.getEvent(e);return this._normalizeRunningEvent(new wi(this.address,this.interface,t))}if(e.topics&&e.topics.length>0){try{const t=e.topics[0];if("string"!=typeof t)throw new Error("invalid topic");const r=this.interface.getEvent(t);return this._normalizeRunningEvent(new wi(this.address,this.interface,r,e.topics))}catch(e){}const t={address:this.address,topics:e.topics};return this._normalizeRunningEvent(new yi(mi(t),t))}return this._normalizeRunningEvent(new bi(this.address,this.interface))}_checkRunningEvents(e){if(0===e.listenerCount()){delete this._runningEvents[e.tag];const t=this._wrappedEmits[e.tag];t&&e.filter&&(this.provider.off(e.filter,t),delete this._wrappedEmits[e.tag])}}_wrapEvent(e,t,r){const n=(0,B.deepCopy)(t);return n.removeListener=()=>{r&&(e.removeListener(r),this._checkRunningEvents(e))},n.getBlock=()=>this.provider.getBlock(t.blockHash),n.getTransaction=()=>this.provider.getTransaction(t.transactionHash),n.getTransactionReceipt=()=>this.provider.getTransactionReceipt(t.transactionHash),e.prepareEvent(n),n}_addEventListener(e,t,r){if(this.provider||ci.throwError("events require a provider or a signer with a provider",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"once"}),e.addListener(t,r),this._runningEvents[e.tag]=e,!this._wrappedEmits[e.tag]){const r=r=>{let n=this._wrapEvent(e,r,t);if(null==n.decodeError)try{const t=e.getEmit(n);this.emit(e.filter,...t)}catch(e){n.decodeError=e.error}null!=e.filter&&this.emit("event",n),null!=n.decodeError&&this.emit("error",n.decodeError,n)};this._wrappedEmits[e.tag]=r,null!=e.filter&&this.provider.on(e.filter,r)}}queryFilter(e,t,r){const n=this._getRunningEvent(e),i=(0,B.shallowCopy)(n.filter);return"string"==typeof t&&(0,l.isHexString)(t,32)?(null!=r&&ci.throwArgumentError("cannot specify toBlock with blockhash","toBlock",r),i.blockHash=t):(i.fromBlock=null!=t?t:0,i.toBlock=null!=r?r:"latest"),this.provider.getLogs(i).then((e=>e.map((e=>this._wrapEvent(n,e,null)))))}on(e,t){return this._addEventListener(this._getRunningEvent(e),t,!1),this}once(e,t){return this._addEventListener(this._getRunningEvent(e),t,!0),this}emit(e,...t){if(!this.provider)return!1;const r=this._getRunningEvent(e),n=r.run(t)>0;return this._checkRunningEvents(r),n}listenerCount(e){return this.provider?null==e?Object.keys(this._runningEvents).reduce(((e,t)=>e+this._runningEvents[t].listenerCount()),0):this._getRunningEvent(e).listenerCount():0}listeners(e){if(!this.provider)return[];if(null==e){const e=[];for(let t in this._runningEvents)this._runningEvents[t].listeners().forEach((t=>{e.push(t)}));return e}return this._getRunningEvent(e).listeners()}removeAllListeners(e){if(!this.provider)return this;if(null==e){for(const e in this._runningEvents){const t=this._runningEvents[e];t.removeAllListeners(),this._checkRunningEvents(t)}return this}const t=this._getRunningEvent(e);return t.removeAllListeners(),this._checkRunningEvents(t),this}off(e,t){if(!this.provider)return this;const r=this._getRunningEvent(e);return r.removeListener(t),this._checkRunningEvents(r),this}removeListener(e,t){return this.off(e,t)}constructor(e,t,r){(0,B.defineReadOnly)(this,"interface",(0,B.getStatic)(new.target,"getInterface")(t)),null==r?((0,B.defineReadOnly)(this,"provider",null),(0,B.defineReadOnly)(this,"signer",null)):Wr.Signer.isSigner(r)?((0,B.defineReadOnly)(this,"provider",r.provider||null),(0,B.defineReadOnly)(this,"signer",r)):Ur.Provider.isProvider(r)?((0,B.defineReadOnly)(this,"provider",r),(0,B.defineReadOnly)(this,"signer",null)):ci.throwArgumentError("invalid signer or provider","signerOrProvider",r),(0,B.defineReadOnly)(this,"callStatic",{}),(0,B.defineReadOnly)(this,"estimateGas",{}),(0,B.defineReadOnly)(this,"functions",{}),(0,B.defineReadOnly)(this,"populateTransaction",{}),(0,B.defineReadOnly)(this,"filters",{});{const e={};Object.keys(this.interface.events).forEach((t=>{const r=this.interface.events[t];(0,B.defineReadOnly)(this.filters,t,((...e)=>({address:this.address,topics:this.interface.encodeFilterTopics(r,e)}))),e[r.name]||(e[r.name]=[]),e[r.name].push(t)})),Object.keys(e).forEach((t=>{const r=e[t];1===r.length?(0,B.defineReadOnly)(this.filters,t,this.filters[r[0]]):ci.warn(`Duplicate definition of ${t} (${r.join(", ")})`)}))}if((0,B.defineReadOnly)(this,"_runningEvents",{}),(0,B.defineReadOnly)(this,"_wrappedEmits",{}),null==e&&ci.throwArgumentError("invalid contract address or ENS name","addressOrName",e),(0,B.defineReadOnly)(this,"address",e),this.provider)(0,B.defineReadOnly)(this,"resolvedAddress",li(this.provider,e));else try{(0,B.defineReadOnly)(this,"resolvedAddress",Promise.resolve(Ne(e)))}catch(e){ci.throwError("provider is required to use ENS name as contract address",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new Contract"})}this.resolvedAddress.catch((e=>{}));const n={},i={};Object.keys(this.interface.functions).forEach((e=>{const t=this.interface.functions[e];if(i[e])ci.warn(`Duplicate ABI entry for ${JSON.stringify(e)}`);else{i[e]=!0;{const r=t.name;n[`%${r}`]||(n[`%${r}`]=[]),n[`%${r}`].push(e)}null==this[e]&&(0,B.defineReadOnly)(this,e,gi(this,t,!0)),null==this.functions[e]&&(0,B.defineReadOnly)(this.functions,e,gi(this,t,!1)),null==this.callStatic[e]&&(0,B.defineReadOnly)(this.callStatic,e,pi(this,t,!0)),null==this.populateTransaction[e]&&(0,B.defineReadOnly)(this.populateTransaction,e,function(e,t){return function(...r){return fi(e,t,r)}}(this,t)),null==this.estimateGas[e]&&(0,B.defineReadOnly)(this.estimateGas,e,function(e,t){const r=e.signer||e.provider;return function(...n){return ai(this,void 0,void 0,(function*(){r||ci.throwError("estimate require a provider or signer",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"estimateGas"});const i=yield fi(e,t,n);return yield r.estimateGas(i)}))}}(this,t))}})),Object.keys(n).forEach((e=>{const t=n[e];if(t.length>1)return;e=e.substring(1);const r=t[0];try{null==this[e]&&(0,B.defineReadOnly)(this,e,this[r])}catch(e){}null==this.functions[e]&&(0,B.defineReadOnly)(this.functions,e,this.functions[r]),null==this.callStatic[e]&&(0,B.defineReadOnly)(this.callStatic,e,this.callStatic[r]),null==this.populateTransaction[e]&&(0,B.defineReadOnly)(this.populateTransaction,e,this.populateTransaction[r]),null==this.estimateGas[e]&&(0,B.defineReadOnly)(this.estimateGas,e,this.estimateGas[r])}))}}class Ei extends Ai{}class xi{getDeployTransaction(...e){let t={};if(e.length===this.interface.deploy.inputs.length+1&&"object"==typeof e[e.length-1]){t=(0,B.shallowCopy)(e.pop());for(const e in t)if(!ui[e])throw new Error("unknown transaction override "+e)}if(["data","from","to"].forEach((e=>{null!=t[e]&&ci.throwError("cannot override "+e,h.Logger.errors.UNSUPPORTED_OPERATION,{operation:e})})),t.value){y.from(t.value).isZero()||this.interface.deploy.payable||ci.throwError("non-payable constructor cannot override value",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"overrides.value",value:t.value})}return ci.checkArgumentCount(e.length,this.interface.deploy.inputs.length," in Contract constructor"),t.data=(0,l.hexlify)((0,l.concat)([this.bytecode,this.interface.encodeDeploy(e)])),t}deploy(...e){return ai(this,void 0,void 0,(function*(){let t={};e.length===this.interface.deploy.inputs.length+1&&(t=e.pop()),ci.checkArgumentCount(e.length,this.interface.deploy.inputs.length," in Contract constructor");const r=yield hi(this.signer,e,this.interface.deploy.inputs);r.push(t);const n=this.getDeployTransaction(...r),i=yield this.signer.sendTransaction(n),o=(0,B.getStatic)(this.constructor,"getContractAddress")(i),s=(0,B.getStatic)(this.constructor,"getContract")(o,this.interface,this.signer);return di(s,i),(0,B.defineReadOnly)(s,"deployTransaction",i),s}))}attach(e){return this.constructor.getContract(e,this.interface,this.signer)}connect(e){return new this.constructor(this.interface,this.bytecode,e)}static fromSolidity(e,t){null==e&&ci.throwError("missing compiler output",h.Logger.errors.MISSING_ARGUMENT,{argument:"compilerOutput"}),"string"==typeof e&&(e=JSON.parse(e));const r=e.abi;let n=null;return e.bytecode?n=e.bytecode:e.evm&&e.evm.bytecode&&(n=e.evm.bytecode),new this(r,n,t)}static getInterface(e){return Ei.getInterface(e)}static getContractAddress(e){return Be(e)}static getContract(e,t,r){return new Ei(e,t,r)}constructor(e,t,r){let n=null;n="string"==typeof t?t:(0,l.isBytes)(t)?(0,l.hexlify)(t):t&&"string"==typeof t.object?t.object:"!","0x"!==n.substring(0,2)&&(n="0x"+n),(!(0,l.isHexString)(n)||n.length%2)&&ci.throwArgumentError("invalid bytecode","bytecode",t),r&&!Wr.Signer.isSigner(r)&&ci.throwArgumentError("invalid signer","signer",r),(0,B.defineReadOnly)(this,"bytecode",n),(0,B.defineReadOnly)(this,"interface",(0,B.getStatic)(new.target,"getInterface")(e)),(0,B.defineReadOnly)(this,"signer",r||null)}}var Si={};e(Si,"Wallet",(function(){return Fo}),(function(e){return Fo=e})),e(Si,"verifyMessage",(function(){return Lo}),(function(e){return Lo=e})),e(Si,"verifyTypedData",(function(){return jo}),(function(e){return jo=e}));l=o("jNZoB"),l=o("jNZoB");class Ci{encode(e){let t=(0,l.arrayify)(e);if(0===t.length)return"";let r=[0];for(let e=0;e<t.length;++e){let n=t[e];for(let e=0;e<r.length;++e)n+=r[e]<<8,r[e]=n%this.base,n=n/this.base|0;for(;n>0;)r.push(n%this.base),n=n/this.base|0}let n="";for(let e=0;0===t[e]&&e<t.length-1;++e)n+=this._leader;for(let e=r.length-1;e>=0;--e)n+=this.alphabet[r[e]];return n}decode(e){if("string"!=typeof e)throw new TypeError("Expected String");let t=[];if(0===e.length)return new Uint8Array(t);t.push(0);for(let r=0;r<e.length;r++){let n=this._alphabetMap[e[r]];if(void 0===n)throw new Error("Non-base"+this.base+" character");let i=n;for(let e=0;e<t.length;++e)i+=t[e]*this.base,t[e]=255&i,i>>=8;for(;i>0;)t.push(255&i),i>>=8}for(let r=0;e[r]===this._leader&&r<e.length-1;++r)t.push(0);return(0,l.arrayify)(new Uint8Array(t.reverse()))}constructor(e){(0,B.defineReadOnly)(this,"alphabet",e),(0,B.defineReadOnly)(this,"base",e.length),(0,B.defineReadOnly)(this,"_alphabetMap",{}),(0,B.defineReadOnly)(this,"_leader",e.charAt(0));for(let t=0;t<e.length;t++)this._alphabetMap[e.charAt(t)]=t}}new Ci("abcdefghijklmnopqrstuvwxyz234567");const ki=new Ci("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");var _i,Pi;l=o("jNZoB"),l=o("jNZoB"),l=o("jNZoB");(Pi=_i||(_i={})).sha256="sha256",Pi.sha512="sha512";const Ri=new(0,(h=o("3Qchy")).Logger)("sha2/5.7.0");function Oi(e){return"0x"+r(Xr).ripemd160().update((0,l.arrayify)(e)).digest("hex")}function Ii(e){return"0x"+r(Xr).sha256().update((0,l.arrayify)(e)).digest("hex")}function Ni(e){return"0x"+r(Xr).sha512().update((0,l.arrayify)(e)).digest("hex")}function Ti(e,t,n){return _i[e]||Ri.throwError("unsupported algorithm "+e,h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"hmac",algorithm:e}),"0x"+r(Xr).hmac(r(Xr)[e],(0,l.arrayify)(t)).update((0,l.arrayify)(n)).digest("hex")}function Mi(e,t,r,n,i){let o;e=(0,l.arrayify)(e),t=(0,l.arrayify)(t);let s=1;const a=new Uint8Array(n),c=new Uint8Array(t.length+4);let u,h;c.set(t);for(let f=1;f<=s;f++){c[t.length]=f>>24&255,c[t.length+1]=f>>16&255,c[t.length+2]=f>>8&255,c[t.length+3]=255&f;let d=(0,l.arrayify)(Ti(i,e,c));o||(o=d.length,h=new Uint8Array(o),s=Math.ceil(n/o),u=n-(s-1)*o),h.set(d);for(let t=1;t<r;t++){d=(0,l.arrayify)(Ti(i,e,d));for(let e=0;e<o;e++)h[e]^=d[e]}const p=(f-1)*o,g=f===s?u:o;a.set((0,l.arrayify)(h).slice(0,g),p)}return(0,l.hexlify)(a)}h=o("3Qchy");const Bi=new(0,h.Logger)("wordlists/5.7.0");class Fi{split(e){return e.toLowerCase().split(/ +/g)}join(e){return e.join(" ")}static check(e){const t=[];for(let r=0;r<2048;r++){const n=e.getWord(r);if(r!==e.getWordIndex(n))return"0x";t.push(n)}return zt(t.join("\n")+"\n")}static register(e,t){t||(t=e.locale)}constructor(e){Bi.checkAbstract(new.target,Fi),(0,B.defineReadOnly)(this,"locale",e)}}let Li=null;function ji(e){if(null==Li&&(Li="AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo".replace(/([A-Z])/g," $1").toLowerCase().substring(1).split(" "),"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60"!==Fi.check(e)))throw Li=null,new Error("BIP39 Wordlist for en (English) FAILED")}const Di=new class extends Fi{getWord(e){return ji(this),Li[e]}getWordIndex(e){return ji(this),Li.indexOf(e)}constructor(){super("en")}};Fi.register(Di);const Ui={en:Di};const zi=new(0,(h=o("3Qchy")).Logger)("hdnode/5.7.0"),qi=y.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),Ki=gt("Bitcoin seed");function Gi(e){return(1<<e)-1<<8-e}function Wi(e){return(0,l.hexZeroPad)((0,l.hexlify)(e),32)}function Hi(e){return ki.encode((0,l.concat)([e,(0,l.hexDataSlice)(Ii(Ii(e)),0,4)]))}function Ji(e){if(null==e)return Ui.en;if("string"==typeof e){const t=Ui[e];return null==t&&zi.throwArgumentError("unknown locale","wordlist",e),t}return e}const Vi={};class Qi{get extendedKey(){if(this.depth>=256)throw new Error("Depth too large!");return Hi((0,l.concat)([null!=this.privateKey?"0x0488ADE4":"0x0488B21E",(0,l.hexlify)(this.depth),this.parentFingerprint,(0,l.hexZeroPad)((0,l.hexlify)(this.index),4),this.chainCode,null!=this.privateKey?(0,l.concat)(["0x00",this.privateKey]):this.publicKey]))}neuter(){return new Qi(Vi,null,this.publicKey,this.parentFingerprint,this.chainCode,this.index,this.depth,this.path)}_derive(e){if(e>4294967295)throw new Error("invalid index - "+String(e));let t=this.path;t&&(t+="/"+(2147483647&e));const r=new Uint8Array(37);if(2147483648&e){if(!this.privateKey)throw new Error("cannot derive child of neutered node");r.set((0,l.arrayify)(this.privateKey),1),t&&(t+="'")}else r.set((0,l.arrayify)(this.publicKey));for(let t=24;t>=0;t-=8)r[33+(t>>3)]=e>>24-t&255;const n=(0,l.arrayify)(Ti(_i.sha512,this.chainCode,r)),i=n.slice(0,32),o=n.slice(32);let s=null,a=null;if(this.privateKey)s=Wi(y.from(i).add(this.privateKey).mod(qi));else{a=new Un((0,l.hexlify)(i))._addPoint(this.publicKey)}let c=t;const u=this.mnemonic;return u&&(c=Object.freeze({phrase:u.phrase,path:t,locale:u.locale||"en"})),new Qi(Vi,s,a,this.fingerprint,Wi(o),e,this.depth+1,c)}derivePath(e){const t=e.split("/");if(0===t.length||"m"===t[0]&&0!==this.depth)throw new Error("invalid path - "+e);"m"===t[0]&&t.shift();let r=this;for(let e=0;e<t.length;e++){const n=t[e];if(n.match(/^[0-9]+'$/)){const e=parseInt(n.substring(0,n.length-1));if(e>=2147483648)throw new Error("invalid path index - "+n);r=r._derive(2147483648+e)}else{if(!n.match(/^[0-9]+$/))throw new Error("invalid path component - "+n);{const e=parseInt(n);if(e>=2147483648)throw new Error("invalid path index - "+n);r=r._derive(e)}}}return r}static _fromSeed(e,t){const r=(0,l.arrayify)(e);if(r.length<16||r.length>64)throw new Error("invalid seed");const n=(0,l.arrayify)(Ti(_i.sha512,Ki,r));return new Qi(Vi,Wi(n.slice(0,32)),null,"0x00000000",Wi(n.slice(32)),0,0,t)}static fromMnemonic(e,t,r){return e=Xi(Yi(e,r=Ji(r)),r),Qi._fromSeed(Zi(e,t),{phrase:e,path:"m",locale:r.locale})}static fromSeed(e){return Qi._fromSeed(e,null)}static fromExtendedKey(e){const t=ki.decode(e);82===t.length&&Hi(t.slice(0,78))===e||zi.throwArgumentError("invalid extended key","extendedKey","[REDACTED]");const r=t[4],n=(0,l.hexlify)(t.slice(5,9)),i=parseInt((0,l.hexlify)(t.slice(9,13)).substring(2),16),o=(0,l.hexlify)(t.slice(13,45)),s=t.slice(45,78);switch((0,l.hexlify)(t.slice(0,4))){case"0x0488b21e":case"0x043587cf":return new Qi(Vi,null,(0,l.hexlify)(s),n,o,i,r,null);case"0x0488ade4":case"0x04358394 ":if(0!==s[0])break;return new Qi(Vi,(0,l.hexlify)(s.slice(1)),null,n,o,i,r,null)}return zi.throwArgumentError("invalid extended key","extendedKey","[REDACTED]")}constructor(e,t,r,n,i,o,s,a){if(e!==Vi)throw new Error("HDNode constructor cannot be called directly");if(t){const e=new Un(t);(0,B.defineReadOnly)(this,"privateKey",e.privateKey),(0,B.defineReadOnly)(this,"publicKey",e.compressedPublicKey)}else(0,B.defineReadOnly)(this,"privateKey",null),(0,B.defineReadOnly)(this,"publicKey",(0,l.hexlify)(r));(0,B.defineReadOnly)(this,"parentFingerprint",n),(0,B.defineReadOnly)(this,"fingerprint",(0,l.hexDataSlice)(Oi(Ii(this.publicKey)),0,4)),(0,B.defineReadOnly)(this,"address",Zn(this.publicKey)),(0,B.defineReadOnly)(this,"chainCode",i),(0,B.defineReadOnly)(this,"index",o),(0,B.defineReadOnly)(this,"depth",s),null==a?((0,B.defineReadOnly)(this,"mnemonic",null),(0,B.defineReadOnly)(this,"path",null)):"string"==typeof a?((0,B.defineReadOnly)(this,"mnemonic",null),(0,B.defineReadOnly)(this,"path",a)):((0,B.defineReadOnly)(this,"mnemonic",a),(0,B.defineReadOnly)(this,"path",a.path))}}function Zi(e,t){t||(t="");const r=gt("mnemonic"+t,ct.NFKD);return Mi(gt(e,ct.NFKD),r,2048,64,"sha512")}function Yi(e,t){t=Ji(t),zi.checkNormalize();const r=t.split(e);if(r.length%3!=0)throw new Error("invalid mnemonic");const n=(0,l.arrayify)(new Uint8Array(Math.ceil(11*r.length/8)));let i=0;for(let e=0;e<r.length;e++){let o=t.getWordIndex(r[e].normalize("NFKD"));if(-1===o)throw new Error("invalid mnemonic");for(let e=0;e<11;e++)o&1<<10-e&&(n[i>>3]|=1<<7-i%8),i++}const o=32*r.length/3,s=Gi(r.length/3);if(((0,l.arrayify)(Ii(n.slice(0,o/8)))[0]&s)!==(n[n.length-1]&s))throw new Error("invalid checksum");return(0,l.hexlify)(n.slice(0,o/8))}function Xi(e,t){if(t=Ji(t),(e=(0,l.arrayify)(e)).length%4!=0||e.length<16||e.length>32)throw new Error("invalid entropy");const r=[0];let n=11;for(let t=0;t<e.length;t++)n>8?(r[r.length-1]<<=8,r[r.length-1]|=e[t],n-=8):(r[r.length-1]<<=n,r[r.length-1]|=e[t]>>8-n,r.push(e[t]&(1<<8-n)-1),n+=3);const i=e.length/4,o=(0,l.arrayify)(Ii(e))[0]&Gi(i);return r[r.length-1]<<=i,r[r.length-1]|=o>>8-i,t.join(r.map((e=>t.getWord(e))))}function $i(e,t){try{return Yi(e,t),!0}catch(e){}return!1}function eo(e){return("number"!=typeof e||e<0||e>=2147483648||e%1)&&zi.throwArgumentError("invalid account index","index",e),`m/44'/60'/${e}'/0/0`}l=o("jNZoB");const to=new(0,(h=o("3Qchy")).Logger)("random/5.7.0");const ro=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==t)return t;throw new Error("unable to locate global object")}();let no=ro.crypto||ro.msCrypto;function io(e){(e<=0||e>1024||e%1||e!=e)&&to.throwArgumentError("invalid length","length",e);const t=new Uint8Array(e);return no.getRandomValues(t),(0,l.arrayify)(t)}function oo(e){for(let t=(e=e.slice()).length-1;t>0;t--){const r=Math.floor(Math.random()*(t+1)),n=e[t];e[t]=e[r],e[r]=n}return e}no&&no.getRandomValues||(to.warn("WARNING: Missing strong random number source"),no={getRandomValues:function(e){return to.throwError("no secure random source avaialble",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"crypto.getRandomValues"})}});var so={};!function(e){function t(e){return parseInt(e)===e}function r(e){if(!t(e.length))return!1;for(var r=0;r<e.length;r++)if(!t(e[r])||e[r]<0||e[r]>255)return!1;return!0}function n(e,n){if(e.buffer&&ArrayBuffer.isView(e)&&"Uint8Array"===e.name)return n&&(e=e.slice?e.slice():Array.prototype.slice.call(e)),e;if(Array.isArray(e)){if(!r(e))throw new Error("Array contains invalid value: "+e);return new Uint8Array(e)}if(t(e.length)&&r(e))return new Uint8Array(e);throw new Error("unsupported array-like object")}function i(e){return new Uint8Array(e)}function o(e,t,r,n,i){null==n&&null==i||(e=e.slice?e.slice(n,i):Array.prototype.slice.call(e,n,i)),t.set(e,r)}var s,a={toBytes:function(e){var t=[],r=0;for(e=encodeURI(e);r<e.length;){var i=e.charCodeAt(r++);37===i?(t.push(parseInt(e.substr(r,2),16)),r+=2):t.push(i)}return n(t)},fromBytes:function(e){for(var t=[],r=0;r<e.length;){var n=e[r];n<128?(t.push(String.fromCharCode(n)),r++):n>191&&n<224?(t.push(String.fromCharCode((31&n)<<6|63&e[r+1])),r+=2):(t.push(String.fromCharCode((15&n)<<12|(63&e[r+1])<<6|63&e[r+2])),r+=3)}return t.join("")}},c=(s="0123456789abcdef",{toBytes:function(e){for(var t=[],r=0;r<e.length;r+=2)t.push(parseInt(e.substr(r,2),16));return t},fromBytes:function(e){for(var t=[],r=0;r<e.length;r++){var n=e[r];t.push(s[(240&n)>>4]+s[15&n])}return t.join("")}}),u={16:10,24:12,32:14},l=[1,2,4,8,16,32,64,128,27,54,108,216,171,77,154,47,94,188,99,198,151,53,106,212,179,125,250,239,197,145],h=[99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118,202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192,183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21,4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117,9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132,83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207,208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168,81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210,205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115,96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219,224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121,231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8,186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138,112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158,225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223,140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22],f=[82,9,106,213,48,54,165,56,191,64,163,158,129,243,215,251,124,227,57,130,155,47,255,135,52,142,67,68,196,222,233,203,84,123,148,50,166,194,35,61,238,76,149,11,66,250,195,78,8,46,161,102,40,217,36,178,118,91,162,73,109,139,209,37,114,248,246,100,134,104,152,22,212,164,92,204,93,101,182,146,108,112,72,80,253,237,185,218,94,21,70,87,167,141,157,132,144,216,171,0,140,188,211,10,247,228,88,5,184,179,69,6,208,44,30,143,202,63,15,2,193,175,189,3,1,19,138,107,58,145,17,65,79,103,220,234,151,242,207,206,240,180,230,115,150,172,116,34,231,173,53,133,226,249,55,232,28,117,223,110,71,241,26,113,29,41,197,137,111,183,98,14,170,24,190,27,252,86,62,75,198,210,121,32,154,219,192,254,120,205,90,244,31,221,168,51,136,7,199,49,177,18,16,89,39,128,236,95,96,81,127,169,25,181,74,13,45,229,122,159,147,201,156,239,160,224,59,77,174,42,245,176,200,235,187,60,131,83,153,97,23,43,4,126,186,119,214,38,225,105,20,99,85,33,12,125],d=[3328402341,4168907908,4000806809,4135287693,4294111757,3597364157,3731845041,2445657428,1613770832,33620227,3462883241,1445669757,3892248089,3050821474,1303096294,3967186586,2412431941,528646813,2311702848,4202528135,4026202645,2992200171,2387036105,4226871307,1101901292,3017069671,1604494077,1169141738,597466303,1403299063,3832705686,2613100635,1974974402,3791519004,1033081774,1277568618,1815492186,2118074177,4126668546,2211236943,1748251740,1369810420,3521504564,4193382664,3799085459,2883115123,1647391059,706024767,134480908,2512897874,1176707941,2646852446,806885416,932615841,168101135,798661301,235341577,605164086,461406363,3756188221,3454790438,1311188841,2142417613,3933566367,302582043,495158174,1479289972,874125870,907746093,3698224818,3025820398,1537253627,2756858614,1983593293,3084310113,2108928974,1378429307,3722699582,1580150641,327451799,2790478837,3117535592,0,3253595436,1075847264,3825007647,2041688520,3059440621,3563743934,2378943302,1740553945,1916352843,2487896798,2555137236,2958579944,2244988746,3151024235,3320835882,1336584933,3992714006,2252555205,2588757463,1714631509,293963156,2319795663,3925473552,67240454,4269768577,2689618160,2017213508,631218106,1269344483,2723238387,1571005438,2151694528,93294474,1066570413,563977660,1882732616,4059428100,1673313503,2008463041,2950355573,1109467491,537923632,3858759450,4260623118,3218264685,2177748300,403442708,638784309,3287084079,3193921505,899127202,2286175436,773265209,2479146071,1437050866,4236148354,2050833735,3362022572,3126681063,840505643,3866325909,3227541664,427917720,2655997905,2749160575,1143087718,1412049534,999329963,193497219,2353415882,3354324521,1807268051,672404540,2816401017,3160301282,369822493,2916866934,3688947771,1681011286,1949973070,336202270,2454276571,201721354,1210328172,3093060836,2680341085,3184776046,1135389935,3294782118,965841320,831886756,3554993207,4068047243,3588745010,2345191491,1849112409,3664604599,26054028,2983581028,2622377682,1235855840,3630984372,2891339514,4092916743,3488279077,3395642799,4101667470,1202630377,268961816,1874508501,4034427016,1243948399,1546530418,941366308,1470539505,1941222599,2546386513,3421038627,2715671932,3899946140,1042226977,2521517021,1639824860,227249030,260737669,3765465232,2084453954,1907733956,3429263018,2420656344,100860677,4160157185,470683154,3261161891,1781871967,2924959737,1773779408,394692241,2579611992,974986535,664706745,3655459128,3958962195,731420851,571543859,3530123707,2849626480,126783113,865375399,765172662,1008606754,361203602,3387549984,2278477385,2857719295,1344809080,2782912378,59542671,1503764984,160008576,437062935,1707065306,3622233649,2218934982,3496503480,2185314755,697932208,1512910199,504303377,2075177163,2824099068,1841019862,739644986],p=[2781242211,2230877308,2582542199,2381740923,234877682,3184946027,2984144751,1418839493,1348481072,50462977,2848876391,2102799147,434634494,1656084439,3863849899,2599188086,1167051466,2636087938,1082771913,2281340285,368048890,3954334041,3381544775,201060592,3963727277,1739838676,4250903202,3930435503,3206782108,4149453988,2531553906,1536934080,3262494647,484572669,2923271059,1783375398,1517041206,1098792767,49674231,1334037708,1550332980,4098991525,886171109,150598129,2481090929,1940642008,1398944049,1059722517,201851908,1385547719,1699095331,1587397571,674240536,2704774806,252314885,3039795866,151914247,908333586,2602270848,1038082786,651029483,1766729511,3447698098,2682942837,454166793,2652734339,1951935532,775166490,758520603,3000790638,4004797018,4217086112,4137964114,1299594043,1639438038,3464344499,2068982057,1054729187,1901997871,2534638724,4121318227,1757008337,0,750906861,1614815264,535035132,3363418545,3988151131,3201591914,1183697867,3647454910,1265776953,3734260298,3566750796,3903871064,1250283471,1807470800,717615087,3847203498,384695291,3313910595,3617213773,1432761139,2484176261,3481945413,283769337,100925954,2180939647,4037038160,1148730428,3123027871,3813386408,4087501137,4267549603,3229630528,2315620239,2906624658,3156319645,1215313976,82966005,3747855548,3245848246,1974459098,1665278241,807407632,451280895,251524083,1841287890,1283575245,337120268,891687699,801369324,3787349855,2721421207,3431482436,959321879,1469301956,4065699751,2197585534,1199193405,2898814052,3887750493,724703513,2514908019,2696962144,2551808385,3516813135,2141445340,1715741218,2119445034,2872807568,2198571144,3398190662,700968686,3547052216,1009259540,2041044702,3803995742,487983883,1991105499,1004265696,1449407026,1316239930,504629770,3683797321,168560134,1816667172,3837287516,1570751170,1857934291,4014189740,2797888098,2822345105,2754712981,936633572,2347923833,852879335,1133234376,1500395319,3084545389,2348912013,1689376213,3533459022,3762923945,3034082412,4205598294,133428468,634383082,2949277029,2398386810,3913789102,403703816,3580869306,2297460856,1867130149,1918643758,607656988,4049053350,3346248884,1368901318,600565992,2090982877,2632479860,557719327,3717614411,3697393085,2249034635,2232388234,2430627952,1115438654,3295786421,2865522278,3633334344,84280067,33027830,303828494,2747425121,1600795957,4188952407,3496589753,2434238086,1486471617,658119965,3106381470,953803233,334231800,3005978776,857870609,3151128937,1890179545,2298973838,2805175444,3056442267,574365214,2450884487,550103529,1233637070,4289353045,2018519080,2057691103,2399374476,4166623649,2148108681,387583245,3664101311,836232934,3330556482,3100665960,3280093505,2955516313,2002398509,287182607,3413881008,4238890068,3597515707,975967766],g=[1671808611,2089089148,2006576759,2072901243,4061003762,1807603307,1873927791,3310653893,810573872,16974337,1739181671,729634347,4263110654,3613570519,2883997099,1989864566,3393556426,2191335298,3376449993,2106063485,4195741690,1508618841,1204391495,4027317232,2917941677,3563566036,2734514082,2951366063,2629772188,2767672228,1922491506,3227229120,3082974647,4246528509,2477669779,644500518,911895606,1061256767,4144166391,3427763148,878471220,2784252325,3845444069,4043897329,1905517169,3631459288,827548209,356461077,67897348,3344078279,593839651,3277757891,405286936,2527147926,84871685,2595565466,118033927,305538066,2157648768,3795705826,3945188843,661212711,2999812018,1973414517,152769033,2208177539,745822252,439235610,455947803,1857215598,1525593178,2700827552,1391895634,994932283,3596728278,3016654259,695947817,3812548067,795958831,2224493444,1408607827,3513301457,0,3979133421,543178784,4229948412,2982705585,1542305371,1790891114,3410398667,3201918910,961245753,1256100938,1289001036,1491644504,3477767631,3496721360,4012557807,2867154858,4212583931,1137018435,1305975373,861234739,2241073541,1171229253,4178635257,33948674,2139225727,1357946960,1011120188,2679776671,2833468328,1374921297,2751356323,1086357568,2408187279,2460827538,2646352285,944271416,4110742005,3168756668,3066132406,3665145818,560153121,271589392,4279952895,4077846003,3530407890,3444343245,202643468,322250259,3962553324,1608629855,2543990167,1154254916,389623319,3294073796,2817676711,2122513534,1028094525,1689045092,1575467613,422261273,1939203699,1621147744,2174228865,1339137615,3699352540,577127458,712922154,2427141008,2290289544,1187679302,3995715566,3100863416,339486740,3732514782,1591917662,186455563,3681988059,3762019296,844522546,978220090,169743370,1239126601,101321734,611076132,1558493276,3260915650,3547250131,2901361580,1655096418,2443721105,2510565781,3828863972,2039214713,3878868455,3359869896,928607799,1840765549,2374762893,3580146133,1322425422,2850048425,1823791212,1459268694,4094161908,3928346602,1706019429,2056189050,2934523822,135794696,3134549946,2022240376,628050469,779246638,472135708,2800834470,3032970164,3327236038,3894660072,3715932637,1956440180,522272287,1272813131,3185336765,2340818315,2323976074,1888542832,1044544574,3049550261,1722469478,1222152264,50660867,4127324150,236067854,1638122081,895445557,1475980887,3117443513,2257655686,3243809217,489110045,2662934430,3778599393,4162055160,2561878936,288563729,1773916777,3648039385,2391345038,2493985684,2612407707,505560094,2274497927,3911240169,3460925390,1442818645,678973480,3749357023,2358182796,2717407649,2306869641,219617805,3218761151,3862026214,1120306242,1756942440,1103331905,2578459033,762796589,252780047,2966125488,1425844308,3151392187,372911126],m=[1667474886,2088535288,2004326894,2071694838,4075949567,1802223062,1869591006,3318043793,808472672,16843522,1734846926,724270422,4278065639,3621216949,2880169549,1987484396,3402253711,2189597983,3385409673,2105378810,4210693615,1499065266,1195886990,4042263547,2913856577,3570689971,2728590687,2947541573,2627518243,2762274643,1920112356,3233831835,3082273397,4261223649,2475929149,640051788,909531756,1061110142,4160160501,3435941763,875846760,2779116625,3857003729,4059105529,1903268834,3638064043,825316194,353713962,67374088,3351728789,589522246,3284360861,404236336,2526454071,84217610,2593830191,117901582,303183396,2155911963,3806477791,3958056653,656894286,2998062463,1970642922,151591698,2206440989,741110872,437923380,454765878,1852748508,1515908788,2694904667,1381168804,993742198,3604373943,3014905469,690584402,3823320797,791638366,2223281939,1398011302,3520161977,0,3991743681,538992704,4244381667,2981218425,1532751286,1785380564,3419096717,3200178535,960056178,1246420628,1280103576,1482221744,3486468741,3503319995,4025428677,2863326543,4227536621,1128514950,1296947098,859002214,2240123921,1162203018,4193849577,33687044,2139062782,1347481760,1010582648,2678045221,2829640523,1364325282,2745433693,1077985408,2408548869,2459086143,2644360225,943212656,4126475505,3166494563,3065430391,3671750063,555836226,269496352,4294908645,4092792573,3537006015,3452783745,202118168,320025894,3974901699,1600119230,2543297077,1145359496,387397934,3301201811,2812801621,2122220284,1027426170,1684319432,1566435258,421079858,1936954854,1616945344,2172753945,1330631070,3705438115,572679748,707427924,2425400123,2290647819,1179044492,4008585671,3099120491,336870440,3739122087,1583276732,185277718,3688593069,3772791771,842159716,976899700,168435220,1229577106,101059084,606366792,1549591736,3267517855,3553849021,2897014595,1650632388,2442242105,2509612081,3840161747,2038008818,3890688725,3368567691,926374254,1835907034,2374863873,3587531953,1313788572,2846482505,1819063512,1448540844,4109633523,3941213647,1701162954,2054852340,2930698567,134748176,3132806511,2021165296,623210314,774795868,471606328,2795958615,3031746419,3334885783,3907527627,3722280097,1953799400,522133822,1263263126,3183336545,2341176845,2324333839,1886425312,1044267644,3048588401,1718004428,1212733584,50529542,4143317495,235803164,1633788866,892690282,1465383342,3115962473,2256965911,3250673817,488449850,2661202215,3789633753,4177007595,2560144171,286339874,1768537042,3654906025,2391705863,2492770099,2610673197,505291324,2273808917,3924369609,3469625735,1431699370,673740880,3755965093,2358021891,2711746649,2307489801,218961690,3217021541,3873845719,1111672452,1751693520,1094828930,2576986153,757954394,252645662,2964376443,1414855848,3149649517,370555436],y=[1374988112,2118214995,437757123,975658646,1001089995,530400753,2902087851,1273168787,540080725,2910219766,2295101073,4110568485,1340463100,3307916247,641025152,3043140495,3736164937,632953703,1172967064,1576976609,3274667266,2169303058,2370213795,1809054150,59727847,361929877,3211623147,2505202138,3569255213,1484005843,1239443753,2395588676,1975683434,4102977912,2572697195,666464733,3202437046,4035489047,3374361702,2110667444,1675577880,3843699074,2538681184,1649639237,2976151520,3144396420,4269907996,4178062228,1883793496,2403728665,2497604743,1383856311,2876494627,1917518562,3810496343,1716890410,3001755655,800440835,2261089178,3543599269,807962610,599762354,33778362,3977675356,2328828971,2809771154,4077384432,1315562145,1708848333,101039829,3509871135,3299278474,875451293,2733856160,92987698,2767645557,193195065,1080094634,1584504582,3178106961,1042385657,2531067453,3711829422,1306967366,2438237621,1908694277,67556463,1615861247,429456164,3602770327,2302690252,1742315127,2968011453,126454664,3877198648,2043211483,2709260871,2084704233,4169408201,0,159417987,841739592,504459436,1817866830,4245618683,260388950,1034867998,908933415,168810852,1750902305,2606453969,607530554,202008497,2472011535,3035535058,463180190,2160117071,1641816226,1517767529,470948374,3801332234,3231722213,1008918595,303765277,235474187,4069246893,766945465,337553864,1475418501,2943682380,4003061179,2743034109,4144047775,1551037884,1147550661,1543208500,2336434550,3408119516,3069049960,3102011747,3610369226,1113818384,328671808,2227573024,2236228733,3535486456,2935566865,3341394285,496906059,3702665459,226906860,2009195472,733156972,2842737049,294930682,1206477858,2835123396,2700099354,1451044056,573804783,2269728455,3644379585,2362090238,2564033334,2801107407,2776292904,3669462566,1068351396,742039012,1350078989,1784663195,1417561698,4136440770,2430122216,775550814,2193862645,2673705150,1775276924,1876241833,3475313331,3366754619,270040487,3902563182,3678124923,3441850377,1851332852,3969562369,2203032232,3868552805,2868897406,566021896,4011190502,3135740889,1248802510,3936291284,699432150,832877231,708780849,3332740144,899835584,1951317047,4236429990,3767586992,866637845,4043610186,1106041591,2144161806,395441711,1984812685,1139781709,3433712980,3835036895,2664543715,1282050075,3240894392,1181045119,2640243204,25965917,4203181171,4211818798,3009879386,2463879762,3910161971,1842759443,2597806476,933301370,1509430414,3943906441,3467192302,3076639029,3776767469,2051518780,2631065433,1441952575,404016761,1942435775,1408749034,1610459739,3745345300,2017778566,3400528769,3110650942,941896748,3265478751,371049330,3168937228,675039627,4279080257,967311729,135050206,3635733660,1683407248,2076935265,3576870512,1215061108,3501741890],v=[1347548327,1400783205,3273267108,2520393566,3409685355,4045380933,2880240216,2471224067,1428173050,4138563181,2441661558,636813900,4233094615,3620022987,2149987652,2411029155,1239331162,1730525723,2554718734,3781033664,46346101,310463728,2743944855,3328955385,3875770207,2501218972,3955191162,3667219033,768917123,3545789473,692707433,1150208456,1786102409,2029293177,1805211710,3710368113,3065962831,401639597,1724457132,3028143674,409198410,2196052529,1620529459,1164071807,3769721975,2226875310,486441376,2499348523,1483753576,428819965,2274680428,3075636216,598438867,3799141122,1474502543,711349675,129166120,53458370,2592523643,2782082824,4063242375,2988687269,3120694122,1559041666,730517276,2460449204,4042459122,2706270690,3446004468,3573941694,533804130,2328143614,2637442643,2695033685,839224033,1973745387,957055980,2856345839,106852767,1371368976,4181598602,1033297158,2933734917,1179510461,3046200461,91341917,1862534868,4284502037,605657339,2547432937,3431546947,2003294622,3182487618,2282195339,954669403,3682191598,1201765386,3917234703,3388507166,0,2198438022,1211247597,2887651696,1315723890,4227665663,1443857720,507358933,657861945,1678381017,560487590,3516619604,975451694,2970356327,261314535,3535072918,2652609425,1333838021,2724322336,1767536459,370938394,182621114,3854606378,1128014560,487725847,185469197,2918353863,3106780840,3356761769,2237133081,1286567175,3152976349,4255350624,2683765030,3160175349,3309594171,878443390,1988838185,3704300486,1756818940,1673061617,3403100636,272786309,1075025698,545572369,2105887268,4174560061,296679730,1841768865,1260232239,4091327024,3960309330,3497509347,1814803222,2578018489,4195456072,575138148,3299409036,446754879,3629546796,4011996048,3347532110,3252238545,4270639778,915985419,3483825537,681933534,651868046,2755636671,3828103837,223377554,2607439820,1649704518,3270937875,3901806776,1580087799,4118987695,3198115200,2087309459,2842678573,3016697106,1003007129,2802849917,1860738147,2077965243,164439672,4100872472,32283319,2827177882,1709610350,2125135846,136428751,3874428392,3652904859,3460984630,3572145929,3593056380,2939266226,824852259,818324884,3224740454,930369212,2801566410,2967507152,355706840,1257309336,4148292826,243256656,790073846,2373340630,1296297904,1422699085,3756299780,3818836405,457992840,3099667487,2135319889,77422314,1560382517,1945798516,788204353,1521706781,1385356242,870912086,325965383,2358957921,2050466060,2388260884,2313884476,4006521127,901210569,3990953189,1014646705,1503449823,1062597235,2031621326,3212035895,3931371469,1533017514,350174575,2256028891,2177544179,1052338372,741876788,1606591296,1914052035,213705253,2334669897,1107234197,1899603969,3725069491,2631447780,2422494913,1635502980,1893020342,1950903388,1120974935],w=[2807058932,1699970625,2764249623,1586903591,1808481195,1173430173,1487645946,59984867,4199882800,1844882806,1989249228,1277555970,3623636965,3419915562,1149249077,2744104290,1514790577,459744698,244860394,3235995134,1963115311,4027744588,2544078150,4190530515,1608975247,2627016082,2062270317,1507497298,2200818878,567498868,1764313568,3359936201,2305455554,2037970062,1047239e3,1910319033,1337376481,2904027272,2892417312,984907214,1243112415,830661914,861968209,2135253587,2011214180,2927934315,2686254721,731183368,1750626376,4246310725,1820824798,4172763771,3542330227,48394827,2404901663,2871682645,671593195,3254988725,2073724613,145085239,2280796200,2779915199,1790575107,2187128086,472615631,3029510009,4075877127,3802222185,4107101658,3201631749,1646252340,4270507174,1402811438,1436590835,3778151818,3950355702,3963161475,4020912224,2667994737,273792366,2331590177,104699613,95345982,3175501286,2377486676,1560637892,3564045318,369057872,4213447064,3919042237,1137477952,2658625497,1119727848,2340947849,1530455833,4007360968,172466556,266959938,516552836,0,2256734592,3980931627,1890328081,1917742170,4294704398,945164165,3575528878,958871085,3647212047,2787207260,1423022939,775562294,1739656202,3876557655,2530391278,2443058075,3310321856,547512796,1265195639,437656594,3121275539,719700128,3762502690,387781147,218828297,3350065803,2830708150,2848461854,428169201,122466165,3720081049,1627235199,648017665,4122762354,1002783846,2117360635,695634755,3336358691,4234721005,4049844452,3704280881,2232435299,574624663,287343814,612205898,1039717051,840019705,2708326185,793451934,821288114,1391201670,3822090177,376187827,3113855344,1224348052,1679968233,2361698556,1058709744,752375421,2431590963,1321699145,3519142200,2734591178,188127444,2177869557,3727205754,2384911031,3215212461,2648976442,2450346104,3432737375,1180849278,331544205,3102249176,4150144569,2952102595,2159976285,2474404304,766078933,313773861,2570832044,2108100632,1668212892,3145456443,2013908262,418672217,3070356634,2594734927,1852171925,3867060991,3473416636,3907448597,2614737639,919489135,164948639,2094410160,2997825956,590424639,2486224549,1723872674,3157750862,3399941250,3501252752,3625268135,2555048196,3673637356,1343127501,4130281361,3599595085,2957853679,1297403050,81781910,3051593425,2283490410,532201772,1367295589,3926170974,895287692,1953757831,1093597963,492483431,3528626907,1446242576,1192455638,1636604631,209336225,344873464,1015671571,669961897,3375740769,3857572124,2973530695,3747192018,1933530610,3464042516,935293895,3454686199,2858115069,1863638845,3683022916,4085369519,3292445032,875313188,1080017571,3279033885,621591778,1233856572,2504130317,24197544,3017672716,3835484340,3247465558,2220981195,3060847922,1551124588,1463996600],b=[4104605777,1097159550,396673818,660510266,2875968315,2638606623,4200115116,3808662347,821712160,1986918061,3430322568,38544885,3856137295,718002117,893681702,1654886325,2975484382,3122358053,3926825029,4274053469,796197571,1290801793,1184342925,3556361835,2405426947,2459735317,1836772287,1381620373,3196267988,1948373848,3764988233,3385345166,3263785589,2390325492,1480485785,3111247143,3780097726,2293045232,548169417,3459953789,3746175075,439452389,1362321559,1400849762,1685577905,1806599355,2174754046,137073913,1214797936,1174215055,3731654548,2079897426,1943217067,1258480242,529487843,1437280870,3945269170,3049390895,3313212038,923313619,679998e3,3215307299,57326082,377642221,3474729866,2041877159,133361907,1776460110,3673476453,96392454,878845905,2801699524,777231668,4082475170,2330014213,4142626212,2213296395,1626319424,1906247262,1846563261,562755902,3708173718,1040559837,3871163981,1418573201,3294430577,114585348,1343618912,2566595609,3186202582,1078185097,3651041127,3896688048,2307622919,425408743,3371096953,2081048481,1108339068,2216610296,0,2156299017,736970802,292596766,1517440620,251657213,2235061775,2933202493,758720310,265905162,1554391400,1532285339,908999204,174567692,1474760595,4002861748,2610011675,3234156416,3693126241,2001430874,303699484,2478443234,2687165888,585122620,454499602,151849742,2345119218,3064510765,514443284,4044981591,1963412655,2581445614,2137062819,19308535,1928707164,1715193156,4219352155,1126790795,600235211,3992742070,3841024952,836553431,1669664834,2535604243,3323011204,1243905413,3141400786,4180808110,698445255,2653899549,2989552604,2253581325,3252932727,3004591147,1891211689,2487810577,3915653703,4237083816,4030667424,2100090966,865136418,1229899655,953270745,3399679628,3557504664,4118925222,2061379749,3079546586,2915017791,983426092,2022837584,1607244650,2118541908,2366882550,3635996816,972512814,3283088770,1568718495,3499326569,3576539503,621982671,2895723464,410887952,2623762152,1002142683,645401037,1494807662,2595684844,1335535747,2507040230,4293295786,3167684641,367585007,3885750714,1865862730,2668221674,2960971305,2763173681,1059270954,2777952454,2724642869,1320957812,2194319100,2429595872,2815956275,77089521,3973773121,3444575871,2448830231,1305906550,4021308739,2857194700,2516901860,3518358430,1787304780,740276417,1699839814,1592394909,2352307457,2272556026,188821243,1729977011,3687994002,274084841,3594982253,3613494426,2701949495,4162096729,322734571,2837966542,1640576439,484830689,1202797690,3537852828,4067639125,349075736,3342319475,4157467219,4255800159,1030690015,1155237496,2951971274,1757691577,607398968,2738905026,499347990,3794078908,1011452712,227885567,2818666809,213114376,3034881240,1455525988,3414450555,850817237,1817998408,3092726480],A=[0,235474187,470948374,303765277,941896748,908933415,607530554,708780849,1883793496,2118214995,1817866830,1649639237,1215061108,1181045119,1417561698,1517767529,3767586992,4003061179,4236429990,4069246893,3635733660,3602770327,3299278474,3400528769,2430122216,2664543715,2362090238,2193862645,2835123396,2801107407,3035535058,3135740889,3678124923,3576870512,3341394285,3374361702,3810496343,3977675356,4279080257,4043610186,2876494627,2776292904,3076639029,3110650942,2472011535,2640243204,2403728665,2169303058,1001089995,899835584,666464733,699432150,59727847,226906860,530400753,294930682,1273168787,1172967064,1475418501,1509430414,1942435775,2110667444,1876241833,1641816226,2910219766,2743034109,2976151520,3211623147,2505202138,2606453969,2302690252,2269728455,3711829422,3543599269,3240894392,3475313331,3843699074,3943906441,4178062228,4144047775,1306967366,1139781709,1374988112,1610459739,1975683434,2076935265,1775276924,1742315127,1034867998,866637845,566021896,800440835,92987698,193195065,429456164,395441711,1984812685,2017778566,1784663195,1683407248,1315562145,1080094634,1383856311,1551037884,101039829,135050206,437757123,337553864,1042385657,807962610,573804783,742039012,2531067453,2564033334,2328828971,2227573024,2935566865,2700099354,3001755655,3168937228,3868552805,3902563182,4203181171,4102977912,3736164937,3501741890,3265478751,3433712980,1106041591,1340463100,1576976609,1408749034,2043211483,2009195472,1708848333,1809054150,832877231,1068351396,766945465,599762354,159417987,126454664,361929877,463180190,2709260871,2943682380,3178106961,3009879386,2572697195,2538681184,2236228733,2336434550,3509871135,3745345300,3441850377,3274667266,3910161971,3877198648,4110568485,4211818798,2597806476,2497604743,2261089178,2295101073,2733856160,2902087851,3202437046,2968011453,3936291284,3835036895,4136440770,4169408201,3535486456,3702665459,3467192302,3231722213,2051518780,1951317047,1716890410,1750902305,1113818384,1282050075,1584504582,1350078989,168810852,67556463,371049330,404016761,841739592,1008918595,775550814,540080725,3969562369,3801332234,4035489047,4269907996,3569255213,3669462566,3366754619,3332740144,2631065433,2463879762,2160117071,2395588676,2767645557,2868897406,3102011747,3069049960,202008497,33778362,270040487,504459436,875451293,975658646,675039627,641025152,2084704233,1917518562,1615861247,1851332852,1147550661,1248802510,1484005843,1451044056,933301370,967311729,733156972,632953703,260388950,25965917,328671808,496906059,1206477858,1239443753,1543208500,1441952575,2144161806,1908694277,1675577880,1842759443,3610369226,3644379585,3408119516,3307916247,4011190502,3776767469,4077384432,4245618683,2809771154,2842737049,3144396420,3043140495,2673705150,2438237621,2203032232,2370213795],E=[0,185469197,370938394,487725847,741876788,657861945,975451694,824852259,1483753576,1400783205,1315723890,1164071807,1950903388,2135319889,1649704518,1767536459,2967507152,3152976349,2801566410,2918353863,2631447780,2547432937,2328143614,2177544179,3901806776,3818836405,4270639778,4118987695,3299409036,3483825537,3535072918,3652904859,2077965243,1893020342,1841768865,1724457132,1474502543,1559041666,1107234197,1257309336,598438867,681933534,901210569,1052338372,261314535,77422314,428819965,310463728,3409685355,3224740454,3710368113,3593056380,3875770207,3960309330,4045380933,4195456072,2471224067,2554718734,2237133081,2388260884,3212035895,3028143674,2842678573,2724322336,4138563181,4255350624,3769721975,3955191162,3667219033,3516619604,3431546947,3347532110,2933734917,2782082824,3099667487,3016697106,2196052529,2313884476,2499348523,2683765030,1179510461,1296297904,1347548327,1533017514,1786102409,1635502980,2087309459,2003294622,507358933,355706840,136428751,53458370,839224033,957055980,605657339,790073846,2373340630,2256028891,2607439820,2422494913,2706270690,2856345839,3075636216,3160175349,3573941694,3725069491,3273267108,3356761769,4181598602,4063242375,4011996048,3828103837,1033297158,915985419,730517276,545572369,296679730,446754879,129166120,213705253,1709610350,1860738147,1945798516,2029293177,1239331162,1120974935,1606591296,1422699085,4148292826,4233094615,3781033664,3931371469,3682191598,3497509347,3446004468,3328955385,2939266226,2755636671,3106780840,2988687269,2198438022,2282195339,2501218972,2652609425,1201765386,1286567175,1371368976,1521706781,1805211710,1620529459,2105887268,1988838185,533804130,350174575,164439672,46346101,870912086,954669403,636813900,788204353,2358957921,2274680428,2592523643,2441661558,2695033685,2880240216,3065962831,3182487618,3572145929,3756299780,3270937875,3388507166,4174560061,4091327024,4006521127,3854606378,1014646705,930369212,711349675,560487590,272786309,457992840,106852767,223377554,1678381017,1862534868,1914052035,2031621326,1211247597,1128014560,1580087799,1428173050,32283319,182621114,401639597,486441376,768917123,651868046,1003007129,818324884,1503449823,1385356242,1333838021,1150208456,1973745387,2125135846,1673061617,1756818940,2970356327,3120694122,2802849917,2887651696,2637442643,2520393566,2334669897,2149987652,3917234703,3799141122,4284502037,4100872472,3309594171,3460984630,3545789473,3629546796,2050466060,1899603969,1814803222,1730525723,1443857720,1560382517,1075025698,1260232239,575138148,692707433,878443390,1062597235,243256656,91341917,409198410,325965383,3403100636,3252238545,3704300486,3620022987,3874428392,3990953189,4042459122,4227665663,2460449204,2578018489,2226875310,2411029155,3198115200,3046200461,2827177882,2743944855],x=[0,218828297,437656594,387781147,875313188,958871085,775562294,590424639,1750626376,1699970625,1917742170,2135253587,1551124588,1367295589,1180849278,1265195639,3501252752,3720081049,3399941250,3350065803,3835484340,3919042237,4270507174,4085369519,3102249176,3051593425,2734591178,2952102595,2361698556,2177869557,2530391278,2614737639,3145456443,3060847922,2708326185,2892417312,2404901663,2187128086,2504130317,2555048196,3542330227,3727205754,3375740769,3292445032,3876557655,3926170974,4246310725,4027744588,1808481195,1723872674,1910319033,2094410160,1608975247,1391201670,1173430173,1224348052,59984867,244860394,428169201,344873464,935293895,984907214,766078933,547512796,1844882806,1627235199,2011214180,2062270317,1507497298,1423022939,1137477952,1321699145,95345982,145085239,532201772,313773861,830661914,1015671571,731183368,648017665,3175501286,2957853679,2807058932,2858115069,2305455554,2220981195,2474404304,2658625497,3575528878,3625268135,3473416636,3254988725,3778151818,3963161475,4213447064,4130281361,3599595085,3683022916,3432737375,3247465558,3802222185,4020912224,4172763771,4122762354,3201631749,3017672716,2764249623,2848461854,2331590177,2280796200,2431590963,2648976442,104699613,188127444,472615631,287343814,840019705,1058709744,671593195,621591778,1852171925,1668212892,1953757831,2037970062,1514790577,1463996600,1080017571,1297403050,3673637356,3623636965,3235995134,3454686199,4007360968,3822090177,4107101658,4190530515,2997825956,3215212461,2830708150,2779915199,2256734592,2340947849,2627016082,2443058075,172466556,122466165,273792366,492483431,1047239e3,861968209,612205898,695634755,1646252340,1863638845,2013908262,1963115311,1446242576,1530455833,1277555970,1093597963,1636604631,1820824798,2073724613,1989249228,1436590835,1487645946,1337376481,1119727848,164948639,81781910,331544205,516552836,1039717051,821288114,669961897,719700128,2973530695,3157750862,2871682645,2787207260,2232435299,2283490410,2667994737,2450346104,3647212047,3564045318,3279033885,3464042516,3980931627,3762502690,4150144569,4199882800,3070356634,3121275539,2904027272,2686254721,2200818878,2384911031,2570832044,2486224549,3747192018,3528626907,3310321856,3359936201,3950355702,3867060991,4049844452,4234721005,1739656202,1790575107,2108100632,1890328081,1402811438,1586903591,1233856572,1149249077,266959938,48394827,369057872,418672217,1002783846,919489135,567498868,752375421,209336225,24197544,376187827,459744698,945164165,895287692,574624663,793451934,1679968233,1764313568,2117360635,1933530610,1343127501,1560637892,1243112415,1192455638,3704280881,3519142200,3336358691,3419915562,3907448597,3857572124,4075877127,4294704398,3029510009,3113855344,2927934315,2744104290,2159976285,2377486676,2594734927,2544078150],S=[0,151849742,303699484,454499602,607398968,758720310,908999204,1059270954,1214797936,1097159550,1517440620,1400849762,1817998408,1699839814,2118541908,2001430874,2429595872,2581445614,2194319100,2345119218,3034881240,3186202582,2801699524,2951971274,3635996816,3518358430,3399679628,3283088770,4237083816,4118925222,4002861748,3885750714,1002142683,850817237,698445255,548169417,529487843,377642221,227885567,77089521,1943217067,2061379749,1640576439,1757691577,1474760595,1592394909,1174215055,1290801793,2875968315,2724642869,3111247143,2960971305,2405426947,2253581325,2638606623,2487810577,3808662347,3926825029,4044981591,4162096729,3342319475,3459953789,3576539503,3693126241,1986918061,2137062819,1685577905,1836772287,1381620373,1532285339,1078185097,1229899655,1040559837,923313619,740276417,621982671,439452389,322734571,137073913,19308535,3871163981,4021308739,4104605777,4255800159,3263785589,3414450555,3499326569,3651041127,2933202493,2815956275,3167684641,3049390895,2330014213,2213296395,2566595609,2448830231,1305906550,1155237496,1607244650,1455525988,1776460110,1626319424,2079897426,1928707164,96392454,213114376,396673818,514443284,562755902,679998e3,865136418,983426092,3708173718,3557504664,3474729866,3323011204,4180808110,4030667424,3945269170,3794078908,2507040230,2623762152,2272556026,2390325492,2975484382,3092726480,2738905026,2857194700,3973773121,3856137295,4274053469,4157467219,3371096953,3252932727,3673476453,3556361835,2763173681,2915017791,3064510765,3215307299,2156299017,2307622919,2459735317,2610011675,2081048481,1963412655,1846563261,1729977011,1480485785,1362321559,1243905413,1126790795,878845905,1030690015,645401037,796197571,274084841,425408743,38544885,188821243,3613494426,3731654548,3313212038,3430322568,4082475170,4200115116,3780097726,3896688048,2668221674,2516901860,2366882550,2216610296,3141400786,2989552604,2837966542,2687165888,1202797690,1320957812,1437280870,1554391400,1669664834,1787304780,1906247262,2022837584,265905162,114585348,499347990,349075736,736970802,585122620,972512814,821712160,2595684844,2478443234,2293045232,2174754046,3196267988,3079546586,2895723464,2777952454,3537852828,3687994002,3234156416,3385345166,4142626212,4293295786,3841024952,3992742070,174567692,57326082,410887952,292596766,777231668,660510266,1011452712,893681702,1108339068,1258480242,1343618912,1494807662,1715193156,1865862730,1948373848,2100090966,2701949495,2818666809,3004591147,3122358053,2235061775,2352307457,2535604243,2653899549,3915653703,3764988233,4219352155,4067639125,3444575871,3294430577,3746175075,3594982253,836553431,953270745,600235211,718002117,367585007,484830689,133361907,251657213,2041877159,1891211689,1806599355,1654886325,1568718495,1418573201,1335535747,1184342925];function C(e){for(var t=[],r=0;r<e.length;r+=4)t.push(e[r]<<24|e[r+1]<<16|e[r+2]<<8|e[r+3]);return t}var k=function(e){if(!(this instanceof k))throw Error("AES must be instanitated with `new`");Object.defineProperty(this,"key",{value:n(e,!0)}),this._prepare()};k.prototype._prepare=function(){var e=u[this.key.length];if(null==e)throw new Error("invalid key size (must be 16, 24 or 32 bytes)");this._Ke=[],this._Kd=[];for(var t=0;t<=e;t++)this._Ke.push([0,0,0,0]),this._Kd.push([0,0,0,0]);var r,n=4*(e+1),i=this.key.length/4,o=C(this.key);for(t=0;t<i;t++)r=t>>2,this._Ke[r][t%4]=o[t],this._Kd[e-r][t%4]=o[t];for(var s,a=0,c=i;c<n;){if(s=o[i-1],o[0]^=h[s>>16&255]<<24^h[s>>8&255]<<16^h[255&s]<<8^h[s>>24&255]^l[a]<<24,a+=1,8!=i)for(t=1;t<i;t++)o[t]^=o[t-1];else{for(t=1;t<i/2;t++)o[t]^=o[t-1];s=o[i/2-1],o[i/2]^=h[255&s]^h[s>>8&255]<<8^h[s>>16&255]<<16^h[s>>24&255]<<24;for(t=i/2+1;t<i;t++)o[t]^=o[t-1]}for(t=0;t<i&&c<n;)f=c>>2,d=c%4,this._Ke[f][d]=o[t],this._Kd[e-f][d]=o[t++],c++}for(var f=1;f<e;f++)for(var d=0;d<4;d++)s=this._Kd[f][d],this._Kd[f][d]=A[s>>24&255]^E[s>>16&255]^x[s>>8&255]^S[255&s]},k.prototype.encrypt=function(e){if(16!=e.length)throw new Error("invalid plaintext size (must be 16 bytes)");for(var t=this._Ke.length-1,r=[0,0,0,0],n=C(e),o=0;o<4;o++)n[o]^=this._Ke[0][o];for(var s=1;s<t;s++){for(o=0;o<4;o++)r[o]=d[n[o]>>24&255]^p[n[(o+1)%4]>>16&255]^g[n[(o+2)%4]>>8&255]^m[255&n[(o+3)%4]]^this._Ke[s][o];n=r.slice()}var a,c=i(16);for(o=0;o<4;o++)a=this._Ke[t][o],c[4*o]=255&(h[n[o]>>24&255]^a>>24),c[4*o+1]=255&(h[n[(o+1)%4]>>16&255]^a>>16),c[4*o+2]=255&(h[n[(o+2)%4]>>8&255]^a>>8),c[4*o+3]=255&(h[255&n[(o+3)%4]]^a);return c},k.prototype.decrypt=function(e){if(16!=e.length)throw new Error("invalid ciphertext size (must be 16 bytes)");for(var t=this._Kd.length-1,r=[0,0,0,0],n=C(e),o=0;o<4;o++)n[o]^=this._Kd[0][o];for(var s=1;s<t;s++){for(o=0;o<4;o++)r[o]=y[n[o]>>24&255]^v[n[(o+3)%4]>>16&255]^w[n[(o+2)%4]>>8&255]^b[255&n[(o+1)%4]]^this._Kd[s][o];n=r.slice()}var a,c=i(16);for(o=0;o<4;o++)a=this._Kd[t][o],c[4*o]=255&(f[n[o]>>24&255]^a>>24),c[4*o+1]=255&(f[n[(o+3)%4]>>16&255]^a>>16),c[4*o+2]=255&(f[n[(o+2)%4]>>8&255]^a>>8),c[4*o+3]=255&(f[255&n[(o+1)%4]]^a);return c};var _=function(e){if(!(this instanceof _))throw Error("AES must be instanitated with `new`");this.description="Electronic Code Block",this.name="ecb",this._aes=new k(e)};_.prototype.encrypt=function(e){if((e=n(e)).length%16!=0)throw new Error("invalid plaintext size (must be multiple of 16 bytes)");for(var t=i(e.length),r=i(16),s=0;s<e.length;s+=16)o(e,r,0,s,s+16),o(r=this._aes.encrypt(r),t,s);return t},_.prototype.decrypt=function(e){if((e=n(e)).length%16!=0)throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");for(var t=i(e.length),r=i(16),s=0;s<e.length;s+=16)o(e,r,0,s,s+16),o(r=this._aes.decrypt(r),t,s);return t};var P=function(e,t){if(!(this instanceof P))throw Error("AES must be instanitated with `new`");if(this.description="Cipher Block Chaining",this.name="cbc",t){if(16!=t.length)throw new Error("invalid initialation vector size (must be 16 bytes)")}else t=i(16);this._lastCipherblock=n(t,!0),this._aes=new k(e)};P.prototype.encrypt=function(e){if((e=n(e)).length%16!=0)throw new Error("invalid plaintext size (must be multiple of 16 bytes)");for(var t=i(e.length),r=i(16),s=0;s<e.length;s+=16){o(e,r,0,s,s+16);for(var a=0;a<16;a++)r[a]^=this._lastCipherblock[a];this._lastCipherblock=this._aes.encrypt(r),o(this._lastCipherblock,t,s)}return t},P.prototype.decrypt=function(e){if((e=n(e)).length%16!=0)throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");for(var t=i(e.length),r=i(16),s=0;s<e.length;s+=16){o(e,r,0,s,s+16),r=this._aes.decrypt(r);for(var a=0;a<16;a++)t[s+a]=r[a]^this._lastCipherblock[a];o(e,this._lastCipherblock,0,s,s+16)}return t};var R=function(e,t,r){if(!(this instanceof R))throw Error("AES must be instanitated with `new`");if(this.description="Cipher Feedback",this.name="cfb",t){if(16!=t.length)throw new Error("invalid initialation vector size (must be 16 size)")}else t=i(16);r||(r=1),this.segmentSize=r,this._shiftRegister=n(t,!0),this._aes=new k(e)};R.prototype.encrypt=function(e){if(e.length%this.segmentSize!=0)throw new Error("invalid plaintext size (must be segmentSize bytes)");for(var t,r=n(e,!0),i=0;i<r.length;i+=this.segmentSize){t=this._aes.encrypt(this._shiftRegister);for(var s=0;s<this.segmentSize;s++)r[i+s]^=t[s];o(this._shiftRegister,this._shiftRegister,0,this.segmentSize),o(r,this._shiftRegister,16-this.segmentSize,i,i+this.segmentSize)}return r},R.prototype.decrypt=function(e){if(e.length%this.segmentSize!=0)throw new Error("invalid ciphertext size (must be segmentSize bytes)");for(var t,r=n(e,!0),i=0;i<r.length;i+=this.segmentSize){t=this._aes.encrypt(this._shiftRegister);for(var s=0;s<this.segmentSize;s++)r[i+s]^=t[s];o(this._shiftRegister,this._shiftRegister,0,this.segmentSize),o(e,this._shiftRegister,16-this.segmentSize,i,i+this.segmentSize)}return r};var O=function(e,t){if(!(this instanceof O))throw Error("AES must be instanitated with `new`");if(this.description="Output Feedback",this.name="ofb",t){if(16!=t.length)throw new Error("invalid initialation vector size (must be 16 bytes)")}else t=i(16);this._lastPrecipher=n(t,!0),this._lastPrecipherIndex=16,this._aes=new k(e)};O.prototype.encrypt=function(e){for(var t=n(e,!0),r=0;r<t.length;r++)16===this._lastPrecipherIndex&&(this._lastPrecipher=this._aes.encrypt(this._lastPrecipher),this._lastPrecipherIndex=0),t[r]^=this._lastPrecipher[this._lastPrecipherIndex++];return t},O.prototype.decrypt=O.prototype.encrypt;var I=function(e){if(!(this instanceof I))throw Error("Counter must be instanitated with `new`");0===e||e||(e=1),"number"==typeof e?(this._counter=i(16),this.setValue(e)):this.setBytes(e)};I.prototype.setValue=function(e){if("number"!=typeof e||parseInt(e)!=e)throw new Error("invalid counter value (must be an integer)");for(var t=15;t>=0;--t)this._counter[t]=e%256,e>>=8},I.prototype.setBytes=function(e){if(16!=(e=n(e,!0)).length)throw new Error("invalid counter bytes size (must be 16 bytes)");this._counter=e},I.prototype.increment=function(){for(var e=15;e>=0;e--){if(255!==this._counter[e]){this._counter[e]++;break}this._counter[e]=0}};var N=function(e,t){if(!(this instanceof N))throw Error("AES must be instanitated with `new`");this.description="Counter",this.name="ctr",t instanceof I||(t=new I(t)),this._counter=t,this._remainingCounter=null,this._remainingCounterIndex=16,this._aes=new k(e)};N.prototype.encrypt=function(e){for(var t=n(e,!0),r=0;r<t.length;r++)16===this._remainingCounterIndex&&(this._remainingCounter=this._aes.encrypt(this._counter._counter),this._remainingCounterIndex=0,this._counter.increment()),t[r]^=this._remainingCounter[this._remainingCounterIndex++];return t},N.prototype.decrypt=N.prototype.encrypt,so={AES:k,Counter:I,ModeOfOperation:{ecb:_,cbc:P,cfb:R,ofb:O,ctr:N},utils:{hex:c,utf8:a},padding:{pkcs7:{pad:function(e){var t=16-(e=n(e,!0)).length%16,r=i(e.length+t);o(e,r);for(var s=e.length;s<r.length;s++)r[s]=t;return r},strip:function(e){if((e=n(e,!0)).length<16)throw new Error("PKCS#7 invalid length");var t=e[e.length-1];if(t>16)throw new Error("PKCS#7 padding byte out of range");for(var r=e.length-t,s=0;s<t;s++)if(e[r+s]!==t)throw new Error("PKCS#7 invalid padding byte");var a=i(r);return o(e,a,0,0,r),a}}},_arrayTest:{coerceArray:n,createArray:i,copyArray:o}}}();l=o("jNZoB"),h=o("3Qchy");l=o("jNZoB");function ao(e){return"string"==typeof e&&"0x"!==e.substring(0,2)&&(e="0x"+e),(0,l.arrayify)(e)}function co(e,t){for(e=String(e);e.length<t;)e="0"+e;return e}function uo(e){return"string"==typeof e?gt(e,ct.NFKC):(0,l.arrayify)(e)}function lo(e,t){let r=e;const n=t.toLowerCase().split("/");for(let e=0;e<n.length;e++){let t=null;for(const i in r)if(i.toLowerCase()===n[e]){t=r[i];break}if(null===t)return null;r=t}return r}function ho(e){const t=(0,l.arrayify)(e);t[6]=15&t[6]|64,t[8]=63&t[8]|128;const r=(0,l.hexlify)(t);return[r.substring(2,10),r.substring(10,14),r.substring(14,18),r.substring(18,22),r.substring(22,34)].join("-")}const fo=new(0,h.Logger)("json-wallets/5.7.0");class po extends B.Description{isCrowdsaleAccount(e){return!(!e||!e._isCrowdsaleAccount)}}function go(e,t){const n=JSON.parse(e);t=uo(t);const i=Ne(lo(n,"ethaddr")),o=ao(lo(n,"encseed"));o&&o.length%16==0||fo.throwArgumentError("invalid encseed","json",e);const s=(0,l.arrayify)(Mi(t,t,2e3,32,"sha256")).slice(0,16),a=o.slice(0,16),c=o.slice(16),u=new(r(so).ModeOfOperation.cbc)(s,a),h=r(so).padding.pkcs7.strip((0,l.arrayify)(u.decrypt(c)));let f="";for(let e=0;e<h.length;e++)f+=String.fromCharCode(h[e]);const d=Se(gt(f));return new po({_isCrowdsaleAccount:!0,address:i,privateKey:d})}function mo(e){let t=null;try{t=JSON.parse(e)}catch(e){return!1}return t.encseed&&t.ethaddr}function yo(e){let t=null;try{t=JSON.parse(e)}catch(e){return!1}return!(!t.version||parseInt(t.version)!==t.version||3!==parseInt(t.version))}function vo(e){if(mo(e))try{return Ne(JSON.parse(e).ethaddr)}catch(e){return null}if(yo(e))try{return Ne(JSON.parse(e).address)}catch(e){return null}return null}var wo={};e(wo,"decryptSync",(function(){return Ro}),(function(e){return Ro=e})),e(wo,"decrypt",(function(){return Oo}),(function(e){return Oo=e})),e(wo,"encrypt",(function(){return Io}),(function(e){return Io=e}));var bo={};!function(e){const t=2147483647;function r(e){const t=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]);let r=1779033703,n=3144134277,i=1013904242,o=2773480762,s=1359893119,a=2600822924,c=528734635,u=1541459225;const l=new Uint32Array(64);function h(e){let h=0,f=e.length;for(;f>=64;){let d,p,g,m,y,v=r,w=n,b=i,A=o,E=s,x=a,S=c,C=u;for(p=0;p<16;p++)g=h+4*p,l[p]=(255&e[g])<<24|(255&e[g+1])<<16|(255&e[g+2])<<8|255&e[g+3];for(p=16;p<64;p++)d=l[p-2],m=(d>>>17|d<<15)^(d>>>19|d<<13)^d>>>10,d=l[p-15],y=(d>>>7|d<<25)^(d>>>18|d<<14)^d>>>3,l[p]=(m+l[p-7]|0)+(y+l[p-16]|0)|0;for(p=0;p<64;p++)m=(((E>>>6|E<<26)^(E>>>11|E<<21)^(E>>>25|E<<7))+(E&x^~E&S)|0)+(C+(t[p]+l[p]|0)|0)|0,y=((v>>>2|v<<30)^(v>>>13|v<<19)^(v>>>22|v<<10))+(v&w^v&b^w&b)|0,C=S,S=x,x=E,E=A+m|0,A=b,b=w,w=v,v=m+y|0;r=r+v|0,n=n+w|0,i=i+b|0,o=o+A|0,s=s+E|0,a=a+x|0,c=c+S|0,u=u+C|0,h+=64,f-=64}}h(e);let f,d=e.length%64,p=e.length/536870912|0,g=e.length<<3,m=d<56?56:120,y=e.slice(e.length-d,e.length);for(y.push(128),f=d+1;f<m;f++)y.push(0);return y.push(p>>>24&255),y.push(p>>>16&255),y.push(p>>>8&255),y.push(p>>>0&255),y.push(g>>>24&255),y.push(g>>>16&255),y.push(g>>>8&255),y.push(g>>>0&255),h(y),[r>>>24&255,r>>>16&255,r>>>8&255,r>>>0&255,n>>>24&255,n>>>16&255,n>>>8&255,n>>>0&255,i>>>24&255,i>>>16&255,i>>>8&255,i>>>0&255,o>>>24&255,o>>>16&255,o>>>8&255,o>>>0&255,s>>>24&255,s>>>16&255,s>>>8&255,s>>>0&255,a>>>24&255,a>>>16&255,a>>>8&255,a>>>0&255,c>>>24&255,c>>>16&255,c>>>8&255,c>>>0&255,u>>>24&255,u>>>16&255,u>>>8&255,u>>>0&255]}function n(e,t,n){e=e.length<=64?e:r(e);const i=64+t.length+4,o=new Array(i),s=new Array(64);let a,c=[];for(a=0;a<64;a++)o[a]=54;for(a=0;a<e.length;a++)o[a]^=e[a];for(a=0;a<t.length;a++)o[64+a]=t[a];for(a=i-4;a<i;a++)o[a]=0;for(a=0;a<64;a++)s[a]=92;for(a=0;a<e.length;a++)s[a]^=e[a];function u(){for(let e=i-1;e>=i-4;e--){if(o[e]++,o[e]<=255)return;o[e]=0}}for(;n>=32;)u(),c=c.concat(r(s.concat(r(o)))),n-=32;return n>0&&(u(),c=c.concat(r(s.concat(r(o))).slice(0,n))),c}function i(e,t,r,n,i){let o;for(c(e,16*(2*r-1),i,0,16),o=0;o<2*r;o++)a(e,16*o,i,16),s(i,n),c(i,0,e,t+16*o,16);for(o=0;o<r;o++)c(e,t+32*o,e,16*o,16);for(o=0;o<r;o++)c(e,t+16*(2*o+1),e,16*(o+r),16)}function o(e,t){return e<<t|e>>>32-t}function s(e,t){c(e,0,t,0,16);for(let e=8;e>0;e-=2)t[4]^=o(t[0]+t[12],7),t[8]^=o(t[4]+t[0],9),t[12]^=o(t[8]+t[4],13),t[0]^=o(t[12]+t[8],18),t[9]^=o(t[5]+t[1],7),t[13]^=o(t[9]+t[5],9),t[1]^=o(t[13]+t[9],13),t[5]^=o(t[1]+t[13],18),t[14]^=o(t[10]+t[6],7),t[2]^=o(t[14]+t[10],9),t[6]^=o(t[2]+t[14],13),t[10]^=o(t[6]+t[2],18),t[3]^=o(t[15]+t[11],7),t[7]^=o(t[3]+t[15],9),t[11]^=o(t[7]+t[3],13),t[15]^=o(t[11]+t[7],18),t[1]^=o(t[0]+t[3],7),t[2]^=o(t[1]+t[0],9),t[3]^=o(t[2]+t[1],13),t[0]^=o(t[3]+t[2],18),t[6]^=o(t[5]+t[4],7),t[7]^=o(t[6]+t[5],9),t[4]^=o(t[7]+t[6],13),t[5]^=o(t[4]+t[7],18),t[11]^=o(t[10]+t[9],7),t[8]^=o(t[11]+t[10],9),t[9]^=o(t[8]+t[11],13),t[10]^=o(t[9]+t[8],18),t[12]^=o(t[15]+t[14],7),t[13]^=o(t[12]+t[15],9),t[14]^=o(t[13]+t[12],13),t[15]^=o(t[14]+t[13],18);for(let r=0;r<16;++r)e[r]+=t[r]}function a(e,t,r,n){for(let i=0;i<n;i++)r[i]^=e[t+i]}function c(e,t,r,n,i){for(;i--;)r[n++]=e[t++]}function u(e){if(!e||"number"!=typeof e.length)return!1;for(let t=0;t<e.length;t++){const r=e[t];if("number"!=typeof r||r%1||r<0||r>=256)return!1}return!0}function l(e,t){if("number"!=typeof e||e%1)throw new Error("invalid "+t);return e}function h(e,r,o,s,h,f,d){if(o=l(o,"N"),s=l(s,"r"),h=l(h,"p"),f=l(f,"dkLen"),0===o||0!=(o&o-1))throw new Error("N must be power of 2");if(o>t/128/s)throw new Error("N too large");if(s>t/128/h)throw new Error("r too large");if(!u(e))throw new Error("password must be an array or buffer");if(e=Array.prototype.slice.call(e),!u(r))throw new Error("salt must be an array or buffer");r=Array.prototype.slice.call(r);let p=n(e,r,128*h*s);const g=new Uint32Array(32*h*s);for(let e=0;e<g.length;e++){const t=4*e;g[e]=(255&p[t+3])<<24|(255&p[t+2])<<16|(255&p[t+1])<<8|(255&p[t+0])<<0}const m=new Uint32Array(64*s),y=new Uint32Array(32*s*o),v=32*s,w=new Uint32Array(16),b=new Uint32Array(16),A=h*o*2;let E,x,S=0,C=null,k=!1,_=0,P=0;const R=d?parseInt(1e3/s):4294967295,O="undefined"!=typeof setImmediate?setImmediate:setTimeout,I=function(){if(k)return d(new Error("cancelled"),S/A);let t;switch(_){case 0:x=32*P*s,c(g,x,m,0,v),_=1,E=0;case 1:t=o-E,t>R&&(t=R);for(let e=0;e<t;e++)c(m,0,y,(E+e)*v,v),i(m,v,s,w,b);if(E+=t,S+=t,d){const e=parseInt(1e3*S/A);if(e!==C){if(k=d(null,S/A),k)break;C=e}}if(E<o)break;E=0,_=2;case 2:t=o-E,t>R&&(t=R);for(let e=0;e<t;e++){const e=m[16*(2*s-1)]&o-1;a(y,e*v,m,v),i(m,v,s,w,b)}if(E+=t,S+=t,d){const e=parseInt(1e3*S/A);if(e!==C){if(k=d(null,S/A),k)break;C=e}}if(E<o)break;if(c(m,0,g,x,v),P++,P<h){_=0;break}p=[];for(let e=0;e<g.length;e++)p.push(g[e]>>0&255),p.push(g[e]>>8&255),p.push(g[e]>>16&255),p.push(g[e]>>24&255);const r=n(e,p,f);return d&&d(null,1,r),r}d&&O(I)};if(!d)for(;;){const e=I();if(null!=e)return e}I()}const f={scrypt:function(e,t,r,n,i,o,s){return new Promise((function(a,c){let u=0;s&&s(0),h(e,t,r,n,i,o,(function(e,t,r){if(e)c(e);else if(r)s&&1!==u&&s(1),a(new Uint8Array(r));else if(s&&t!==u)return u=t,s(t)}))}))},syncScrypt:function(e,t,r,n,i,o){return new Uint8Array(h(e,t,r,n,i,o))}};void 0!==bo?bo=f:"function"==typeof define&&define.amd?define(f):e&&(e.scrypt&&(e._scrypt=e.scrypt),e.scrypt=f)}(bo);l=o("jNZoB"),h=o("3Qchy");var Ao=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};const Eo=new(0,h.Logger)("json-wallets/5.7.0");function xo(e){return null!=e&&e.mnemonic&&e.mnemonic.phrase}class So extends B.Description{isKeystoreAccount(e){return!(!e||!e._isKeystoreAccount)}}function Co(e,t){const n=ao(lo(e,"crypto/ciphertext"));if((0,l.hexlify)(Se((0,l.concat)([t.slice(16,32),n]))).substring(2)!==lo(e,"crypto/mac").toLowerCase())throw new Error("invalid password");const i=function(e,t,n){if("aes-128-ctr"===lo(e,"crypto/cipher")){const i=ao(lo(e,"crypto/cipherparams/iv")),o=new(r(so).Counter)(i),s=new(r(so).ModeOfOperation.ctr)(t,o);return(0,l.arrayify)(s.decrypt(n))}return null}(e,t.slice(0,16),n);i||Eo.throwError("unsupported cipher",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"decrypt"});const o=t.slice(32,64),s=Zn(i);if(e.address){let t=e.address.toLowerCase();if("0x"!==t.substring(0,2)&&(t="0x"+t),Ne(t)!==s)throw new Error("address mismatch")}const a={_isKeystoreAccount:!0,address:s,privateKey:(0,l.hexlify)(i)};if("0.1"===lo(e,"x-ethers/version")){const t=ao(lo(e,"x-ethers/mnemonicCiphertext")),n=ao(lo(e,"x-ethers/mnemonicCounter")),i=new(r(so).Counter)(n),s=new(r(so).ModeOfOperation.ctr)(o,i),c=lo(e,"x-ethers/path")||"m/44'/60'/0'/0/0",u=lo(e,"x-ethers/locale")||"en",f=(0,l.arrayify)(s.decrypt(t));try{const e=Xi(f,u),t=Qi.fromMnemonic(e,null,u).derivePath(c);if(t.privateKey!=a.privateKey)throw new Error("mnemonic mismatch");a.mnemonic=t.mnemonic}catch(e){if(e.code!==h.Logger.errors.INVALID_ARGUMENT||"wordlist"!==e.argument)throw e}}return new So(a)}function ko(e,t,r,n,i){return(0,l.arrayify)(Mi(e,t,r,n,i))}function _o(e,t,r,n,i){return Promise.resolve(ko(e,t,r,n,i))}function Po(e,t,r,n,i){const o=uo(t),s=lo(e,"crypto/kdf");if(s&&"string"==typeof s){const t=function(e,t){return Eo.throwArgumentError("invalid key-derivation function parameters",e,t)};if("scrypt"===s.toLowerCase()){const r=ao(lo(e,"crypto/kdfparams/salt")),a=parseInt(lo(e,"crypto/kdfparams/n")),c=parseInt(lo(e,"crypto/kdfparams/r")),u=parseInt(lo(e,"crypto/kdfparams/p"));a&&c&&u||t("kdf",s),0!=(a&a-1)&&t("N",a);const l=parseInt(lo(e,"crypto/kdfparams/dklen"));return 32!==l&&t("dklen",l),n(o,r,a,c,u,64,i)}if("pbkdf2"===s.toLowerCase()){const n=ao(lo(e,"crypto/kdfparams/salt"));let i=null;const s=lo(e,"crypto/kdfparams/prf");"hmac-sha256"===s?i="sha256":"hmac-sha512"===s?i="sha512":t("prf",s);const a=parseInt(lo(e,"crypto/kdfparams/c")),c=parseInt(lo(e,"crypto/kdfparams/dklen"));return 32!==c&&t("dklen",c),r(o,n,a,c,i)}}return Eo.throwArgumentError("unsupported key-derivation function","kdf",s)}function Ro(e,t){const n=JSON.parse(e);return Co(n,Po(n,t,ko,r(bo).syncScrypt))}function Oo(e,t,n){return Ao(this,void 0,void 0,(function*(){const i=JSON.parse(e);return Co(i,yield Po(i,t,_o,r(bo).scrypt,n))}))}function Io(e,t,n,i){try{if(Ne(e.address)!==Zn(e.privateKey))throw new Error("address/privateKey mismatch");if(xo(e)){const t=e.mnemonic;if(Qi.fromMnemonic(t.phrase,null,t.locale).derivePath(t.path||"m/44'/60'/0'/0/0").privateKey!=e.privateKey)throw new Error("mnemonic mismatch")}}catch(e){return Promise.reject(e)}"function"!=typeof n||i||(i=n,n={}),n||(n={});const o=(0,l.arrayify)(e.privateKey),s=uo(t);let a=null,c=null,u=null;if(xo(e)){const t=e.mnemonic;a=(0,l.arrayify)(Yi(t.phrase,t.locale||"en")),c=t.path||"m/44'/60'/0'/0/0",u=t.locale||"en"}let h=n.client;h||(h="ethers.js");let f=null;f=n.salt?(0,l.arrayify)(n.salt):io(32);let d=null;if(n.iv){if(d=(0,l.arrayify)(n.iv),16!==d.length)throw new Error("invalid iv")}else d=io(16);let p=null;if(n.uuid){if(p=(0,l.arrayify)(n.uuid),16!==p.length)throw new Error("invalid uuid")}else p=io(16);let g=131072,m=8,y=1;return n.scrypt&&(n.scrypt.N&&(g=n.scrypt.N),n.scrypt.r&&(m=n.scrypt.r),n.scrypt.p&&(y=n.scrypt.p)),r(bo).scrypt(s,f,g,m,y,64,i).then((t=>{const n=(t=(0,l.arrayify)(t)).slice(0,16),i=t.slice(16,32),s=t.slice(32,64),v=new(r(so).Counter)(d),w=new(r(so).ModeOfOperation.ctr)(n,v),b=(0,l.arrayify)(w.encrypt(o)),A=Se((0,l.concat)([i,b])),E={address:e.address.substring(2).toLowerCase(),id:ho(p),version:3,crypto:{cipher:"aes-128-ctr",cipherparams:{iv:(0,l.hexlify)(d).substring(2)},ciphertext:(0,l.hexlify)(b).substring(2),kdf:"scrypt",kdfparams:{salt:(0,l.hexlify)(f).substring(2),n:g,dklen:32,p:y,r:m},mac:A.substring(2)}};if(a){const e=io(16),t=new(r(so).Counter)(e),n=new(r(so).ModeOfOperation.ctr)(s,t),i=(0,l.arrayify)(n.encrypt(a)),o=new Date,f=o.getUTCFullYear()+"-"+co(o.getUTCMonth()+1,2)+"-"+co(o.getUTCDate(),2)+"T"+co(o.getUTCHours(),2)+"-"+co(o.getUTCMinutes(),2)+"-"+co(o.getUTCSeconds(),2)+".0Z";E["x-ethers"]={client:h,gethFilename:"UTC--"+f+"--"+E.address,mnemonicCounter:(0,l.hexlify)(e).substring(2),mnemonicCiphertext:(0,l.hexlify)(i).substring(2),path:c,locale:u,version:"0.1"}}return JSON.stringify(E)}))}function No(e,t,r){if(mo(e)){r&&r(0);const n=go(e,t);return r&&r(1),Promise.resolve(n)}return yo(e)?(0,wo.decrypt)(e,t,r):Promise.reject(new Error("invalid JSON wallet"))}function To(e,t){if(mo(e))return go(e,t);if(yo(e))return(0,wo.decryptSync)(e,t);throw new Error("invalid JSON wallet")}h=o("3Qchy");var Mo=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};const Bo=new(0,h.Logger)("wallet/5.7.0");class Fo extends Wr.Signer{get mnemonic(){return this._mnemonic()}get privateKey(){return this._signingKey().privateKey}get publicKey(){return this._signingKey().publicKey}getAddress(){return Promise.resolve(this.address)}connect(e){return new Fo(this,e)}signTransaction(e){return(0,B.resolveProperties)(e).then((t=>{null!=t.from&&(Ne(t.from)!==this.address&&Bo.throwArgumentError("transaction from address mismatch","transaction.from",e.from),delete t.from);const r=this._signingKey().signDigest(Se(ii(t)));return ii(t,r)}))}signMessage(e){return Mo(this,void 0,void 0,(function*(){return(0,l.joinSignature)(this._signingKey().signDigest(pr(e)))}))}_signTypedData(e,t,r){return Mo(this,void 0,void 0,(function*(){const n=yield gr.TypedDataEncoder.resolveNames(e,t,r,(e=>(null==this.provider&&Bo.throwError("cannot resolve ENS names without a provider",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"resolveName",value:e}),this.provider.resolveName(e))));return(0,l.joinSignature)(this._signingKey().signDigest(gr.TypedDataEncoder.hash(n.domain,t,n.value)))}))}encrypt(e,t,r){if("function"!=typeof t||r||(r=t,t={}),r&&"function"!=typeof r)throw new Error("invalid callback");return t||(t={}),(0,wo.encrypt)(this,e,t,r)}static createRandom(e){let t=io(16);e||(e={}),e.extraEntropy&&(t=(0,l.arrayify)((0,l.hexDataSlice)(Se((0,l.concat)([t,e.extraEntropy])),0,16)));const r=Xi(t,e.locale);return Fo.fromMnemonic(r,e.path,e.locale)}static fromEncryptedJson(e,t,r){return No(e,t,r).then((e=>new Fo(e)))}static fromEncryptedJsonSync(e,t){return new Fo(To(e,t))}static fromMnemonic(e,t,r){return t||(t="m/44'/60'/0'/0/0"),new Fo(Qi.fromMnemonic(e,null,r).derivePath(t))}constructor(e,t){if(super(),null!=(r=e)&&(0,l.isHexString)(r.privateKey,32)&&null!=r.address){const t=new Un(e.privateKey);if((0,B.defineReadOnly)(this,"_signingKey",(()=>t)),(0,B.defineReadOnly)(this,"address",Zn(this.publicKey)),this.address!==Ne(e.address)&&Bo.throwArgumentError("privateKey/address mismatch","privateKey","[REDACTED]"),function(e){const t=e.mnemonic;return t&&t.phrase}(e)){const t=e.mnemonic;(0,B.defineReadOnly)(this,"_mnemonic",(()=>({phrase:t.phrase,path:t.path||"m/44'/60'/0'/0/0",locale:t.locale||"en"})));const r=this.mnemonic;Zn(Qi.fromMnemonic(r.phrase,null,r.locale).derivePath(r.path).privateKey)!==this.address&&Bo.throwArgumentError("mnemonic/address mismatch","privateKey","[REDACTED]")}else(0,B.defineReadOnly)(this,"_mnemonic",(()=>null))}else{if(Un.isSigningKey(e))"secp256k1"!==e.curve&&Bo.throwArgumentError("unsupported curve; must be secp256k1","privateKey","[REDACTED]"),(0,B.defineReadOnly)(this,"_signingKey",(()=>e));else{"string"==typeof e&&e.match(/^[0-9a-f]*$/i)&&64===e.length&&(e="0x"+e);const t=new Un(e);(0,B.defineReadOnly)(this,"_signingKey",(()=>t))}(0,B.defineReadOnly)(this,"_mnemonic",(()=>null)),(0,B.defineReadOnly)(this,"address",Zn(this.publicKey))}var r;t&&!Ur.Provider.isProvider(t)&&Bo.throwArgumentError("invalid provider","provider",t),(0,B.defineReadOnly)(this,"provider",t||null)}}function Lo(e,t){return Yn(pr(e),t)}function jo(e,t,r,n){return Yn(gr.TypedDataEncoder.hash(e,t,r),n)}var Do={};e(Do,"getDefaultProvider",(function(){return fc})),e(Do,"Provider",(function(){return Ur.Provider})),e(Do,"BaseProvider",(function(){return Vo.BaseProvider})),e(Do,"Resolver",(function(){return Vo.Resolver})),e(Do,"UrlJsonRpcProvider",(function(){return ha.UrlJsonRpcProvider})),e(Do,"FallbackProvider",(function(){return Fa.FallbackProvider})),e(Do,"AlchemyProvider",(function(){return va})),e(Do,"AlchemyWebSocketProvider",(function(){return ya})),e(Do,"AnkrProvider",(function(){return Ea})),e(Do,"CloudflareProvider",(function(){return xa.CloudflareProvider})),e(Do,"EtherscanProvider",(function(){return _a.EtherscanProvider})),e(Do,"InfuraProvider",(function(){return tc})),e(Do,"InfuraWebSocketProvider",(function(){return ec})),e(Do,"JsonRpcProvider",(function(){return Hs.JsonRpcProvider})),e(Do,"JsonRpcBatchProvider",(function(){return rc})),e(Do,"NodesmithProvider",(function(){return ic})),e(Do,"PocketProvider",(function(){return sc})),e(Do,"StaticJsonRpcProvider",(function(){return ha.StaticJsonRpcProvider})),e(Do,"Web3Provider",(function(){return lc})),e(Do,"WebSocketProvider",(function(){return Ws.WebSocketProvider})),e(Do,"IpcProvider",(function(){return Xa})),e(Do,"JsonRpcSigner",(function(){return Hs.JsonRpcSigner})),e(Do,"getNetwork",(function(){return Jo})),e(Do,"isCommunityResource",(function(){return vs})),e(Do,"isCommunityResourcable",(function(){return ys})),e(Do,"showThrottleMessage",(function(){return bs})),e(Do,"Formatter",(function(){return ms}));const Uo=new(0,(h=o("3Qchy")).Logger)("networks/5.7.0");function zo(e){const t=function(t,r){null==r&&(r={});const n=[];if(t.InfuraProvider&&"-"!==r.infura)try{n.push(new t.InfuraProvider(e,r.infura))}catch(e){}if(t.EtherscanProvider&&"-"!==r.etherscan)try{n.push(new t.EtherscanProvider(e,r.etherscan))}catch(e){}if(t.AlchemyProvider&&"-"!==r.alchemy)try{n.push(new t.AlchemyProvider(e,r.alchemy))}catch(e){}if(t.PocketProvider&&"-"!==r.pocket){const i=["goerli","ropsten","rinkeby"];try{const o=new t.PocketProvider(e,r.pocket);o.network&&-1===i.indexOf(o.network.name)&&n.push(o)}catch(e){}}if(t.CloudflareProvider&&"-"!==r.cloudflare)try{n.push(new t.CloudflareProvider(e))}catch(e){}if(t.AnkrProvider&&"-"!==r.ankr)try{const i=["ropsten"],o=new t.AnkrProvider(e,r.ankr);o.network&&-1===i.indexOf(o.network.name)&&n.push(o)}catch(e){}if(0===n.length)return null;if(t.FallbackProvider){let i=1;return null!=r.quorum?i=r.quorum:"homestead"===e&&(i=2),new t.FallbackProvider(n,i)}return n[0]};return t.renetwork=function(e){return zo(e)},t}function qo(e,t){const r=function(r,n){return r.JsonRpcProvider?new r.JsonRpcProvider(e,t):null};return r.renetwork=function(t){return qo(e,t)},r}const Ko={chainId:1,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"homestead",_defaultProvider:zo("homestead")},Go={chainId:3,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"ropsten",_defaultProvider:zo("ropsten")},Wo={chainId:63,name:"classicMordor",_defaultProvider:qo("https://www.ethercluster.com/mordor","classicMordor")},Ho={unspecified:{chainId:0,name:"unspecified"},homestead:Ko,mainnet:Ko,morden:{chainId:2,name:"morden"},ropsten:Go,testnet:Go,rinkeby:{chainId:4,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"rinkeby",_defaultProvider:zo("rinkeby")},kovan:{chainId:42,name:"kovan",_defaultProvider:zo("kovan")},goerli:{chainId:5,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"goerli",_defaultProvider:zo("goerli")},kintsugi:{chainId:1337702,name:"kintsugi"},classic:{chainId:61,name:"classic",_defaultProvider:qo("https://www.ethercluster.com/etc","classic")},classicMorden:{chainId:62,name:"classicMorden"},classicMordor:Wo,classicTestnet:Wo,classicKotti:{chainId:6,name:"classicKotti",_defaultProvider:qo("https://www.ethercluster.com/kotti","classicKotti")},xdai:{chainId:100,name:"xdai"},matic:{chainId:137,name:"matic",_defaultProvider:zo("matic")},maticmum:{chainId:80001,name:"maticmum"},optimism:{chainId:10,name:"optimism",_defaultProvider:zo("optimism")},"optimism-kovan":{chainId:69,name:"optimism-kovan"},"optimism-goerli":{chainId:420,name:"optimism-goerli"},arbitrum:{chainId:42161,name:"arbitrum"},"arbitrum-rinkeby":{chainId:421611,name:"arbitrum-rinkeby"},"arbitrum-goerli":{chainId:421613,name:"arbitrum-goerli"},bnb:{chainId:56,name:"bnb"},bnbt:{chainId:97,name:"bnbt"}};function Jo(e){if(null==e)return null;if("number"==typeof e){for(const t in Ho){const r=Ho[t];if(r.chainId===e)return{name:r.name,chainId:r.chainId,ensAddress:r.ensAddress||null,_defaultProvider:r._defaultProvider||null}}return{chainId:e,name:"unknown"}}if("string"==typeof e){const t=Ho[e];return null==t?null:{name:t.name,chainId:t.chainId,ensAddress:t.ensAddress,_defaultProvider:t._defaultProvider||null}}const t=Ho[e.name];if(!t)return"number"!=typeof e.chainId&&Uo.throwArgumentError("invalid network chainId","network",e),e;0!==e.chainId&&e.chainId!==t.chainId&&Uo.throwArgumentError("network chainId mismatch","network",e);let r=e._defaultProvider||null;var n;return null==r&&t._defaultProvider&&(r=(n=t._defaultProvider)&&"function"==typeof n.renetwork?t._defaultProvider.renetwork(e):t._defaultProvider),{name:e.name,chainId:t.chainId,ensAddress:e.ensAddress||t.ensAddress||null,_defaultProvider:r}}var Vo={};e(Vo,"Resolver",(function(){return zs}),(function(e){return zs=e})),e(Vo,"BaseProvider",(function(){return Gs}),(function(e){return Gs=e})),o("7WFd0");var Qo=o("8Fe00"),Zo=(l=o("jNZoB"),{});e(Zo,"_fetchData",(function(){return is}),(function(e){return is=e})),e(Zo,"fetchJson",(function(){return os}),(function(e){return os=e})),e(Zo,"poll",(function(){return ss}),(function(e){return ss=e})),o("7WFd0");Qo=o("8Fe00"),l=o("jNZoB"),h=o("3Qchy");var Yo={};e(Yo,"getUrl",(function(){return $o}),(function(e){return $o=e}));l=o("jNZoB");var Xo=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};function $o(e,t){return Xo(this,void 0,void 0,(function*(){null==t&&(t={});const r={method:t.method||"GET",headers:t.headers||{},body:t.body||void 0};if(!0!==t.skipFetchSetup&&(r.mode="cors",r.cache="no-cache",r.credentials="same-origin",r.redirect="follow",r.referrer="client"),null!=t.fetchOptions){const e=t.fetchOptions;e.mode&&(r.mode=e.mode),e.cache&&(r.cache=e.cache),e.credentials&&(r.credentials=e.credentials),e.redirect&&(r.redirect=e.redirect),e.referrer&&(r.referrer=e.referrer)}const n=yield fetch(e,r),i=yield n.arrayBuffer(),o={};return n.headers.forEach?n.headers.forEach(((e,t)=>{o[t.toLowerCase()]=e})):n.headers.keys().forEach((e=>{o[e.toLowerCase()]=n.headers.get(e)})),{headers:o,statusCode:n.status,statusMessage:n.statusText,body:(0,l.arrayify)(new Uint8Array(i))}}))}var es=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};const ts=new(0,h.Logger)("web/5.7.0");function rs(e){return new Promise((t=>{setTimeout(t,e)}))}function ns(e,t){if(null==e)return null;if("string"==typeof e)return e;if((0,l.isBytesLike)(e)){if(t&&("text"===t.split("/")[0]||"application/json"===t.split(";")[0].trim()))try{return wt(e)}catch(e){}return(0,l.hexlify)(e)}return e}function is(e,t,r){const n="object"==typeof e&&null!=e.throttleLimit?e.throttleLimit:12;ts.assertArgument(n>0&&n%1==0,"invalid connection throttle limit","connection.throttleLimit",n);const i="object"==typeof e?e.throttleCallback:null,o="object"==typeof e&&"number"==typeof e.throttleSlotInterval?e.throttleSlotInterval:100;ts.assertArgument(o>0&&o%1==0,"invalid connection throttle slot interval","connection.throttleSlotInterval",o);const s="object"==typeof e&&!!e.errorPassThrough,a={};let c=null;const u={method:"GET"};let l=!1,f=12e4;if("string"==typeof e)c=e;else if("object"==typeof e){if(null!=e&&null!=e.url||ts.throwArgumentError("missing URL","connection.url",e),c=e.url,"number"==typeof e.timeout&&e.timeout>0&&(f=e.timeout),e.headers)for(const t in e.headers)a[t.toLowerCase()]={key:t,value:String(e.headers[t])},["if-none-match","if-modified-since"].indexOf(t.toLowerCase())>=0&&(l=!0);if(u.allowGzip=!!e.allowGzip,null!=e.user&&null!=e.password){"https:"!==c.substring(0,6)&&!0!==e.allowInsecureAuthentication&&ts.throwError("basic authentication requires a secure https url",h.Logger.errors.INVALID_ARGUMENT,{argument:"url",url:c,user:e.user,password:"[REDACTED]"});const t=e.user+":"+e.password;a.authorization={key:"Authorization",value:"Basic "+(0,Qo.encode)(gt(t))}}null!=e.skipFetchSetup&&(u.skipFetchSetup=!!e.skipFetchSetup),null!=e.fetchOptions&&(u.fetchOptions=(0,B.shallowCopy)(e.fetchOptions))}const d=new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$","i"),p=c?c.match(d):null;if(p)try{const e={statusCode:200,statusMessage:"OK",headers:{"content-type":p[1]},body:(0,Qo.decode)(p[2])};let t=e.body;return r&&(t=r(e.body,e)),Promise.resolve(t)}catch(e){ts.throwError("processing response error",h.Logger.errors.SERVER_ERROR,{body:ns(p[1],p[2]),error:e,requestBody:null,requestMethod:"GET",url:c})}t&&(u.method="POST",u.body=t,null==a["content-type"]&&(a["content-type"]={key:"Content-Type",value:"application/octet-stream"}),null==a["content-length"]&&(a["content-length"]={key:"Content-Length",value:String(t.length)}));const g={};Object.keys(a).forEach((e=>{const t=a[e];g[t.key]=t.value})),u.headers=g;const m=function(){let e=null;return{promise:new Promise((function(t,r){f&&(e=setTimeout((()=>{null!=e&&(e=null,r(ts.makeError("timeout",h.Logger.errors.TIMEOUT,{requestBody:ns(u.body,g["content-type"]),requestMethod:u.method,timeout:f,url:c})))}),f))})),cancel:function(){null!=e&&(clearTimeout(e),e=null)}}}(),y=function(){return es(this,void 0,void 0,(function*(){for(let e=0;e<n;e++){let t=null;try{if(t=yield(0,Yo.getUrl)(c,u),e<n)if(301===t.statusCode||302===t.statusCode){const e=t.headers.location||"";if("GET"===u.method&&e.match(/^https:/)){c=t.headers.location;continue}}else if(429===t.statusCode){let r=!0;if(i&&(r=yield i(e,c)),r){let r=0;const n=t.headers["retry-after"];r="string"==typeof n&&n.match(/^[1-9][0-9]*$/)?1e3*parseInt(n):o*parseInt(String(Math.random()*Math.pow(2,e))),yield rs(r);continue}}}catch(e){t=e.response,null==t&&(m.cancel(),ts.throwError("missing response",h.Logger.errors.SERVER_ERROR,{requestBody:ns(u.body,g["content-type"]),requestMethod:u.method,serverError:e,url:c}))}let a=t.body;if(l&&304===t.statusCode?a=null:!s&&(t.statusCode<200||t.statusCode>=300)&&(m.cancel(),ts.throwError("bad response",h.Logger.errors.SERVER_ERROR,{status:t.statusCode,headers:t.headers,body:ns(a,t.headers?t.headers["content-type"]:null),requestBody:ns(u.body,g["content-type"]),requestMethod:u.method,url:c})),r)try{const e=yield r(a,t);return m.cancel(),e}catch(r){if(r.throttleRetry&&e<n){let t=!0;if(i&&(t=yield i(e,c)),t){const t=o*parseInt(String(Math.random()*Math.pow(2,e)));yield rs(t);continue}}m.cancel(),ts.throwError("processing response error",h.Logger.errors.SERVER_ERROR,{body:ns(a,t.headers?t.headers["content-type"]:null),error:r,requestBody:ns(u.body,g["content-type"]),requestMethod:u.method,url:c})}return m.cancel(),a}return ts.throwError("failed response",h.Logger.errors.SERVER_ERROR,{requestBody:ns(u.body,g["content-type"]),requestMethod:u.method,url:c})}))}();return Promise.race([m.promise,y])}function os(e,t,r){let n=null;if(null!=t){n=gt(t);const r="string"==typeof e?{url:e}:(0,B.shallowCopy)(e);if(r.headers){0!==Object.keys(r.headers).filter((e=>"content-type"===e.toLowerCase())).length||(r.headers=(0,B.shallowCopy)(r.headers),r.headers["content-type"]="application/json")}else r.headers={"content-type":"application/json"};e=r}return is(e,n,((e,t)=>{let n=null;if(null!=e)try{n=JSON.parse(wt(e))}catch(t){ts.throwError("invalid JSON",h.Logger.errors.SERVER_ERROR,{body:e,error:t})}return r&&(n=r(n,t)),n}))}function ss(e,t){return t||(t={}),null==(t=(0,B.shallowCopy)(t)).floor&&(t.floor=0),null==t.ceiling&&(t.ceiling=1e4),null==t.interval&&(t.interval=250),new Promise((function(r,n){let i=null,o=!1;const s=()=>!o&&(o=!0,i&&clearTimeout(i),!0);t.timeout&&(i=setTimeout((()=>{s()&&n(new Error("timeout"))}),t.timeout));const a=t.retryLimit;let c=0;!function i(){return e().then((function(e){if(void 0!==e)s()&&r(e);else if(t.oncePoll)t.oncePoll.once("poll",i);else if(t.onceBlock)t.onceBlock.once("block",i);else if(!o){if(c++,c>a)return void(s()&&n(new Error("retry limit reached")));let e=t.interval*parseInt(String(Math.random()*Math.pow(2,c)));e<t.floor&&(e=t.floor),e>t.ceiling&&(e=t.ceiling),setTimeout(i,e)}return null}),(function(e){s()&&n(e)}))}()}))}for(var as,cs={},us=0;us<"qpzry9x8gf2tvdw0s3jn54khce6mua7l".length;us++){var ls="qpzry9x8gf2tvdw0s3jn54khce6mua7l".charAt(us);if(void 0!==cs[ls])throw new TypeError(ls+" is ambiguous");cs[ls]=us}function hs(e){var t=e>>25;return(33554431&e)<<5^996825010&-(t>>0&1)^642813549&-(t>>1&1)^513874426&-(t>>2&1)^1027748829&-(t>>3&1)^705979059&-(t>>4&1)}function fs(e){for(var t=1,r=0;r<e.length;++r){var n=e.charCodeAt(r);if(n<33||n>126)return"Invalid prefix ("+e+")";t=hs(t)^n>>5}for(t=hs(t),r=0;r<e.length;++r){var i=e.charCodeAt(r);t=hs(t)^31&i}return t}function ds(e,t){if(t=t||90,e.length<8)return e+" too short";if(e.length>t)return"Exceeds length limit";var r=e.toLowerCase(),n=e.toUpperCase();if(e!==r&&e!==n)return"Mixed-case string "+e;var i=(e=r).lastIndexOf("1");if(-1===i)return"No separator character for "+e;if(0===i)return"Missing prefix for "+e;var o=e.slice(0,i),s=e.slice(i+1);if(s.length<6)return"Data too short";var a=fs(o);if("string"==typeof a)return a;for(var c=[],u=0;u<s.length;++u){var l=s.charAt(u),h=cs[l];if(void 0===h)return"Unknown character "+l;a=hs(a)^h,u+6>=s.length||c.push(h)}return 1!==a?"Invalid checksum for "+e:{prefix:o,words:c}}function ps(e,t,r,n){for(var i=0,o=0,s=(1<<r)-1,a=[],c=0;c<e.length;++c)for(i=i<<t|e[c],o+=t;o>=r;)o-=r,a.push(i>>o&s);if(n)o>0&&a.push(i<<r-o&s);else{if(o>=t)return"Excess padding";if(i<<r-o&s)return"Non-zero padding"}return a}as={decodeUnsafe:function(){var e=ds.apply(null,arguments);if("object"==typeof e)return e},decode:function(e){var t=ds.apply(null,arguments);if("object"==typeof t)return t;throw new Error(t)},encode:function(e,t,r){if(r=r||90,e.length+7+t.length>r)throw new TypeError("Exceeds length limit");var n=fs(e=e.toLowerCase());if("string"==typeof n)throw new Error(n);for(var i=e+"1",o=0;o<t.length;++o){var s=t[o];if(s>>5!=0)throw new Error("Non 5-bit word");n=hs(n)^s,i+="qpzry9x8gf2tvdw0s3jn54khce6mua7l".charAt(s)}for(o=0;o<6;++o)n=hs(n);for(n^=1,o=0;o<6;++o){i+="qpzry9x8gf2tvdw0s3jn54khce6mua7l".charAt(n>>5*(5-o)&31)}return i},toWordsUnsafe:function(e){var t=ps(e,8,5,!0);if(Array.isArray(t))return t},toWords:function(e){var t=ps(e,8,5,!0);if(Array.isArray(t))return t;throw new Error(t)},fromWordsUnsafe:function(e){var t=ps(e,5,8,!1);if(Array.isArray(t))return t},fromWords:function(e){var t=ps(e,5,8,!1);if(Array.isArray(t))return t;throw new Error(t)}};h=o("3Qchy");l=o("jNZoB");const gs=new(0,(h=o("3Qchy")).Logger)("providers/5.7.0");class ms{getDefaultFormats(){const e={},t=this.address.bind(this),r=this.bigNumber.bind(this),n=this.blockTag.bind(this),i=this.data.bind(this),o=this.hash.bind(this),s=this.hex.bind(this),a=this.number.bind(this),c=this.type.bind(this);return e.transaction={hash:o,type:c,accessList:ms.allowNull(this.accessList.bind(this),null),blockHash:ms.allowNull(o,null),blockNumber:ms.allowNull(a,null),transactionIndex:ms.allowNull(a,null),confirmations:ms.allowNull(a,null),from:t,gasPrice:ms.allowNull(r),maxPriorityFeePerGas:ms.allowNull(r),maxFeePerGas:ms.allowNull(r),gasLimit:r,to:ms.allowNull(t,null),value:r,nonce:a,data:i,r:ms.allowNull(this.uint256),s:ms.allowNull(this.uint256),v:ms.allowNull(a),creates:ms.allowNull(t,null),raw:ms.allowNull(i)},e.transactionRequest={from:ms.allowNull(t),nonce:ms.allowNull(a),gasLimit:ms.allowNull(r),gasPrice:ms.allowNull(r),maxPriorityFeePerGas:ms.allowNull(r),maxFeePerGas:ms.allowNull(r),to:ms.allowNull(t),value:ms.allowNull(r),data:ms.allowNull((e=>this.data(e,!0))),type:ms.allowNull(a),accessList:ms.allowNull(this.accessList.bind(this),null)},e.receiptLog={transactionIndex:a,blockNumber:a,transactionHash:o,address:t,topics:ms.arrayOf(o),data:i,logIndex:a,blockHash:o},e.receipt={to:ms.allowNull(this.address,null),from:ms.allowNull(this.address,null),contractAddress:ms.allowNull(t,null),transactionIndex:a,root:ms.allowNull(s),gasUsed:r,logsBloom:ms.allowNull(i),blockHash:o,transactionHash:o,logs:ms.arrayOf(this.receiptLog.bind(this)),blockNumber:a,confirmations:ms.allowNull(a,null),cumulativeGasUsed:r,effectiveGasPrice:ms.allowNull(r),status:ms.allowNull(a),type:c},e.block={hash:ms.allowNull(o),parentHash:o,number:a,timestamp:a,nonce:ms.allowNull(s),difficulty:this.difficulty.bind(this),gasLimit:r,gasUsed:r,miner:ms.allowNull(t),extraData:i,transactions:ms.allowNull(ms.arrayOf(o)),baseFeePerGas:ms.allowNull(r)},e.blockWithTransactions=(0,B.shallowCopy)(e.block),e.blockWithTransactions.transactions=ms.allowNull(ms.arrayOf(this.transactionResponse.bind(this))),e.filter={fromBlock:ms.allowNull(n,void 0),toBlock:ms.allowNull(n,void 0),blockHash:ms.allowNull(o,void 0),address:ms.allowNull(t,void 0),topics:ms.allowNull(this.topics.bind(this),void 0)},e.filterLog={blockNumber:ms.allowNull(a),blockHash:ms.allowNull(o),transactionIndex:a,removed:ms.allowNull(this.boolean.bind(this)),address:t,data:ms.allowFalsish(i,"0x"),topics:ms.arrayOf(o),transactionHash:o,logIndex:a},e}accessList(e){return ei(e||[])}number(e){return"0x"===e?0:y.from(e).toNumber()}type(e){return"0x"===e||null==e?0:y.from(e).toNumber()}bigNumber(e){return y.from(e)}boolean(e){if("boolean"==typeof e)return e;if("string"==typeof e){if("true"===(e=e.toLowerCase()))return!0;if("false"===e)return!1}throw new Error("invalid boolean - "+e)}hex(e,t){return"string"==typeof e&&(t||"0x"===e.substring(0,2)||(e="0x"+e),(0,l.isHexString)(e))?e.toLowerCase():gs.throwArgumentError("invalid hash","value",e)}data(e,t){const r=this.hex(e,t);if(r.length%2!=0)throw new Error("invalid data; odd-length - "+e);return r}address(e){return Ne(e)}callAddress(e){if(!(0,l.isHexString)(e,32))return null;const t=Ne((0,l.hexDataSlice)(e,12));return t===Qe?null:t}contractAddress(e){return Be(e)}blockTag(e){if(null==e)return"latest";if("earliest"===e)return"0x0";switch(e){case"earliest":return"0x0";case"latest":case"pending":case"safe":case"finalized":return e}if("number"==typeof e||(0,l.isHexString)(e))return(0,l.hexValue)(e);throw new Error("invalid blockTag")}hash(e,t){const r=this.hex(e,t);return 32!==(0,l.hexDataLength)(r)?gs.throwArgumentError("invalid hash","value",e):r}difficulty(e){if(null==e)return null;const t=y.from(e);try{return t.toNumber()}catch(e){}return null}uint256(e){if(!(0,l.isHexString)(e))throw new Error("invalid uint256");return(0,l.hexZeroPad)(e,32)}_block(e,t){null!=e.author&&null==e.miner&&(e.miner=e.author);const r=null!=e._difficulty?e._difficulty:e.difficulty,n=ms.check(t,e);return n._difficulty=null==r?null:y.from(r),n}block(e){return this._block(e,this.formats.block)}blockWithTransactions(e){return this._block(e,this.formats.blockWithTransactions)}transactionRequest(e){return ms.check(this.formats.transactionRequest,e)}transactionResponse(e){null!=e.gas&&null==e.gasLimit&&(e.gasLimit=e.gas),e.to&&y.from(e.to).isZero()&&(e.to="0x0000000000000000000000000000000000000000"),null!=e.input&&null==e.data&&(e.data=e.input),null==e.to&&null==e.creates&&(e.creates=this.contractAddress(e)),1!==e.type&&2!==e.type||null!=e.accessList||(e.accessList=[]);const t=ms.check(this.formats.transaction,e);if(null!=e.chainId){let r=e.chainId;(0,l.isHexString)(r)&&(r=y.from(r).toNumber()),t.chainId=r}else{let r=e.networkId;null==r&&null==t.v&&(r=e.chainId),(0,l.isHexString)(r)&&(r=y.from(r).toNumber()),"number"!=typeof r&&null!=t.v&&(r=(t.v-35)/2,r<0&&(r=0),r=parseInt(r)),"number"!=typeof r&&(r=0),t.chainId=r}return t.blockHash&&"x"===t.blockHash.replace(/0/g,"")&&(t.blockHash=null),t}transaction(e){return si(e)}receiptLog(e){return ms.check(this.formats.receiptLog,e)}receipt(e){const t=ms.check(this.formats.receipt,e);if(null!=t.root)if(t.root.length<=4){const e=y.from(t.root).toNumber();0===e||1===e?(null!=t.status&&t.status!==e&&gs.throwArgumentError("alt-root-status/status mismatch","value",{root:t.root,status:t.status}),t.status=e,delete t.root):gs.throwArgumentError("invalid alt-root-status","value.root",t.root)}else 66!==t.root.length&&gs.throwArgumentError("invalid root hash","value.root",t.root);return null!=t.status&&(t.byzantium=!0),t}topics(e){return Array.isArray(e)?e.map((e=>this.topics(e))):null!=e?this.hash(e,!0):null}filter(e){return ms.check(this.formats.filter,e)}filterLog(e){return ms.check(this.formats.filterLog,e)}static check(e,t){const r={};for(const n in e)try{const i=e[n](t[n]);void 0!==i&&(r[n]=i)}catch(e){throw e.checkKey=n,e.checkValue=t[n],e}return r}static allowNull(e,t){return function(r){return null==r?t:e(r)}}static allowFalsish(e,t){return function(r){return r?e(r):t}}static arrayOf(e){return function(t){if(!Array.isArray(t))throw new Error("not an array");const r=[];return t.forEach((function(t){r.push(e(t))})),r}}constructor(){this.formats=this.getDefaultFormats()}}function ys(e){return e&&"function"==typeof e.isCommunityResource}function vs(e){return ys(e)&&e.isCommunityResource()}let ws=!1;function bs(){ws||(ws=!0,console.log("========= NOTICE ========="),console.log("Request-Rate Exceeded  (this message will not be repeated)"),console.log(""),console.log("The default API keys for each service are provided as a highly-throttled,"),console.log("community resource for low-traffic projects and early prototyping."),console.log(""),console.log("While your application will continue to function, we highly recommended"),console.log("signing up for your own API keys to improve performance, increase your"),console.log("request rate/limit and enable other perks, such as metrics and advanced APIs."),console.log(""),console.log("For more details: https://docs.ethers.io/api-keys/"),console.log("=========================="))}var As=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};const Es=new(0,h.Logger)("providers/5.7.0");function xs(e){return null==e?"null":(32!==(0,l.hexDataLength)(e)&&Es.throwArgumentError("invalid topic","topic",e),e.toLowerCase())}function Ss(e){for(e=e.slice();e.length>0&&null==e[e.length-1];)e.pop();return e.map((e=>{if(Array.isArray(e)){const t={};e.forEach((e=>{t[xs(e)]=!0}));const r=Object.keys(t);return r.sort(),r.join("|")}return xs(e)})).join("&")}function Cs(e){if("string"==typeof e){if(e=e.toLowerCase(),32===(0,l.hexDataLength)(e))return"tx:"+e;if(-1===e.indexOf(":"))return e}else{if(Array.isArray(e))return"filter:*:"+Ss(e);if(Ur.ForkEvent.isForkEvent(e))throw Es.warn("not implemented"),new Error("not implemented");if(e&&"object"==typeof e)return"filter:"+(e.address||"*")+":"+Ss(e.topics||[])}throw new Error("invalid event - "+e)}function ks(){return(new Date).getTime()}function _s(e){return new Promise((t=>{setTimeout(t,e)}))}const Ps=["block","network","pending","poll"];class Rs{get event(){switch(this.type){case"tx":return this.hash;case"filter":return this.filter}return this.tag}get type(){return this.tag.split(":")[0]}get hash(){const e=this.tag.split(":");return"tx"!==e[0]?null:e[1]}get filter(){const e=this.tag.split(":");if("filter"!==e[0])return null;const t=e[1],r=""===(n=e[2])?[]:n.split(/&/g).map((e=>{if(""===e)return[];const t=e.split("|").map((e=>"null"===e?null:e));return 1===t.length?t[0]:t}));var n;const i={};return r.length>0&&(i.topics=r),t&&"*"!==t&&(i.address=t),i}pollable(){return this.tag.indexOf(":")>=0||Ps.indexOf(this.tag)>=0}constructor(e,t,r){(0,B.defineReadOnly)(this,"tag",e),(0,B.defineReadOnly)(this,"listener",t),(0,B.defineReadOnly)(this,"once",r),this._lastBlockNumber=-2,this._inflight=!1}}const Os={0:{symbol:"btc",p2pkh:0,p2sh:5,prefix:"bc"},2:{symbol:"ltc",p2pkh:48,p2sh:50,prefix:"ltc"},3:{symbol:"doge",p2pkh:30,p2sh:22},60:{symbol:"eth",ilk:"eth"},61:{symbol:"etc",ilk:"eth"},700:{symbol:"xdai",ilk:"eth"}};function Is(e){return(0,l.hexZeroPad)(y.from(e).toHexString(),32)}function Ns(e){return ki.encode((0,l.concat)([e,(0,l.hexDataSlice)(Ii(Ii(e)),0,4)]))}const Ts=new RegExp("^(ipfs)://(.*)$","i"),Ms=[new RegExp("^(https)://(.*)$","i"),new RegExp("^(data):(.*)$","i"),Ts,new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$","i")];function Bs(e,t){try{return wt(Fs(e,t))}catch(e){}return null}function Fs(e,t){if("0x"===e)return null;const r=y.from((0,l.hexDataSlice)(e,t,t+32)).toNumber(),n=y.from((0,l.hexDataSlice)(e,r,r+32)).toNumber();return(0,l.hexDataSlice)(e,r+32,r+32+n)}function Ls(e){return e.match(/^ipfs:\/\/ipfs\//i)?e=e.substring(12):e.match(/^ipfs:\/\//i)?e=e.substring(7):Es.throwArgumentError("unsupported IPFS format","link",e),`https://gateway.ipfs.io/ipfs/${e}`}function js(e){const t=(0,l.arrayify)(e);if(t.length>32)throw new Error("internal; should not happen");const r=new Uint8Array(32);return r.set(t,32-t.length),r}function Ds(e){if(e.length%32==0)return e;const t=new Uint8Array(32*Math.ceil(e.length/32));return t.set(e),t}function Us(e){const t=[];let r=0;for(let n=0;n<e.length;n++)t.push(null),r+=32;for(let n=0;n<e.length;n++){const i=(0,l.arrayify)(e[n]);t[n]=js(r),t.push(js(i.length)),t.push(Ds(i)),r+=32+32*Math.ceil(i.length/32)}return(0,l.hexConcat)(t)}class zs{supportsWildcard(){return this._supportsEip2544||(this._supportsEip2544=this.provider.call({to:this.address,data:"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"}).then((e=>y.from(e).eq(1))).catch((e=>{if(e.code===h.Logger.errors.CALL_EXCEPTION)return!1;throw this._supportsEip2544=null,e}))),this._supportsEip2544}_fetch(e,t){return As(this,void 0,void 0,(function*(){const r={to:this.address,ccipReadEnabled:!0,data:(0,l.hexConcat)([e,fr(this.name),t||"0x"])};let n=!1;(yield this.supportsWildcard())&&(n=!0,r.data=(0,l.hexConcat)(["0x9061b923",Us([dr(this.name),r.data])]));try{let e=yield this.provider.call(r);return(0,l.arrayify)(e).length%32==4&&Es.throwError("resolver threw error",h.Logger.errors.CALL_EXCEPTION,{transaction:r,data:e}),n&&(e=Fs(e,0)),e}catch(e){if(e.code===h.Logger.errors.CALL_EXCEPTION)return null;throw e}}))}_fetchBytes(e,t){return As(this,void 0,void 0,(function*(){const r=yield this._fetch(e,t);return null!=r?Fs(r,0):null}))}_getAddress(e,t){const n=Os[String(e)];if(null==n&&Es.throwError(`unsupported coin type: ${e}`,h.Logger.errors.UNSUPPORTED_OPERATION,{operation:`getAddress(${e})`}),"eth"===n.ilk)return this.provider.formatter.address(t);const i=(0,l.arrayify)(t);if(null!=n.p2pkh){const e=t.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);if(e){const t=parseInt(e[1],16);if(e[2].length===2*t&&t>=1&&t<=75)return Ns((0,l.concat)([[n.p2pkh],"0x"+e[2]]))}}if(null!=n.p2sh){const e=t.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);if(e){const t=parseInt(e[1],16);if(e[2].length===2*t&&t>=1&&t<=75)return Ns((0,l.concat)([[n.p2sh],"0x"+e[2]]))}}if(null!=n.prefix){const e=i[1];let t=i[0];if(0===t?20!==e&&32!==e&&(t=-1):t=-1,t>=0&&i.length===2+e&&e>=1&&e<=75){const e=r(as).toWords(i.slice(2));return e.unshift(t),r(as).encode(n.prefix,e)}}return null}getAddress(e){return As(this,void 0,void 0,(function*(){if(null==e&&(e=60),60===e)try{const e=yield this._fetch("0x3b3b57de");return"0x"===e||e===it?null:this.provider.formatter.callAddress(e)}catch(e){if(e.code===h.Logger.errors.CALL_EXCEPTION)return null;throw e}const t=yield this._fetchBytes("0xf1cb7e06",Is(e));if(null==t||"0x"===t)return null;const r=this._getAddress(e,t);return null==r&&Es.throwError("invalid or unsupported coin data",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:`getAddress(${e})`,coinType:e,data:t}),r}))}getAvatar(){return As(this,void 0,void 0,(function*(){const e=[{type:"name",content:this.name}];try{const t=yield this.getText("avatar");if(null==t)return null;for(let r=0;r<Ms.length;r++){const n=t.match(Ms[r]);if(null==n)continue;const i=n[1].toLowerCase();switch(i){case"https":return e.push({type:"url",content:t}),{linkage:e,url:t};case"data":return e.push({type:"data",content:t}),{linkage:e,url:t};case"ipfs":return e.push({type:"ipfs",content:t}),{linkage:e,url:Ls(t)};case"erc721":case"erc1155":{const r="erc721"===i?"0xc87b56dd":"0x0e89341c";e.push({type:i,content:t});const o=this._resolvedAddress||(yield this.getAddress()),s=(n[2]||"").split("/");if(2!==s.length)return null;const a=yield this.provider.formatter.address(s[0]),c=(0,l.hexZeroPad)(y.from(s[1]).toHexString(),32);if("erc721"===i){const t=this.provider.formatter.callAddress(yield this.provider.call({to:a,data:(0,l.hexConcat)(["0x6352211e",c])}));if(o!==t)return null;e.push({type:"owner",content:t})}else if("erc1155"===i){const t=y.from(yield this.provider.call({to:a,data:(0,l.hexConcat)(["0x00fdd58e",(0,l.hexZeroPad)(o,32),c])}));if(t.isZero())return null;e.push({type:"balance",content:t.toString()})}const u={to:this.provider.formatter.address(s[0]),data:(0,l.hexConcat)([r,c])};let h=Bs(yield this.provider.call(u),0);if(null==h)return null;e.push({type:"metadata-url-base",content:h}),"erc1155"===i&&(h=h.replace("{id}",c.substring(2)),e.push({type:"metadata-url-expanded",content:h})),h.match(/^ipfs:/i)&&(h=Ls(h)),e.push({type:"metadata-url",content:h});const f=yield(0,Zo.fetchJson)(h);if(!f)return null;e.push({type:"metadata",content:JSON.stringify(f)});let d=f.image;if("string"!=typeof d)return null;if(d.match(/^(https:\/\/|data:)/i));else{if(null==d.match(Ts))return null;e.push({type:"url-ipfs",content:d}),d=Ls(d)}return e.push({type:"url",content:d}),{linkage:e,url:d}}}}}catch(e){}return null}))}getContentHash(){return As(this,void 0,void 0,(function*(){const e=yield this._fetchBytes("0xbc1c58d1");if(null==e||"0x"===e)return null;const t=e.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(t){const e=parseInt(t[3],16);if(t[4].length===2*e)return"ipfs://"+ki.encode("0x"+t[1])}const r=e.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(r){const e=parseInt(r[3],16);if(r[4].length===2*e)return"ipns://"+ki.encode("0x"+r[1])}const n=e.match(/^0xe40101fa011b20([0-9a-f]*)$/);if(n&&64===n[1].length)return"bzz://"+n[1];const i=e.match(/^0x90b2c605([0-9a-f]*)$/);if(i&&68===i[1].length){const e={"=":"","+":"-","/":"_"};return"sia://"+(0,Qo.encode)("0x"+i[1]).replace(/[=+\/]/g,(t=>e[t]))}return Es.throwError("invalid or unsupported content hash data",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"getContentHash()",data:e})}))}getText(e){return As(this,void 0,void 0,(function*(){let t=gt(e);t=(0,l.concat)([Is(64),Is(t.length),t]),t.length%32!=0&&(t=(0,l.concat)([t,(0,l.hexZeroPad)("0x",32-e.length%32)]));const r=yield this._fetchBytes("0x59d1d43c",(0,l.hexlify)(t));return null==r||"0x"===r?null:wt(r)}))}constructor(e,t,r,n){(0,B.defineReadOnly)(this,"provider",e),(0,B.defineReadOnly)(this,"name",r),(0,B.defineReadOnly)(this,"address",e.formatter.address(t)),(0,B.defineReadOnly)(this,"_resolvedAddress",n)}}let qs=null,Ks=1;class Gs extends Ur.Provider{_ready(){return As(this,void 0,void 0,(function*(){if(null==this._network){let e=null;if(this._networkPromise)try{e=yield this._networkPromise}catch(e){}null==e&&(e=yield this.detectNetwork()),e||Es.throwError("no network detected",h.Logger.errors.UNKNOWN_ERROR,{}),null==this._network&&(this.anyNetwork?this._network=e:(0,B.defineReadOnly)(this,"_network",e),this.emit("network",e,null))}return this._network}))}get ready(){return(0,Zo.poll)((()=>this._ready().then((e=>e),(e=>{if(e.code!==h.Logger.errors.NETWORK_ERROR||"noNetwork"!==e.event)throw e}))))}static getFormatter(){return null==qs&&(qs=new ms),qs}static getNetwork(e){return Jo(null==e?"homestead":e)}ccipReadFetch(e,t,r){return As(this,void 0,void 0,(function*(){if(this.disableCcipRead||0===r.length)return null;const n=e.to.toLowerCase(),i=t.toLowerCase(),o=[];for(let e=0;e<r.length;e++){const t=r[e],s=t.replace("{sender}",n).replace("{data}",i),a=t.indexOf("{data}")>=0?null:JSON.stringify({data:i,sender:n}),c=yield(0,Zo.fetchJson)({url:s,errorPassThrough:!0},a,((e,t)=>(e.status=t.statusCode,e)));if(c.data)return c.data;const u=c.message||"unknown error";if(c.status>=400&&c.status<500)return Es.throwError(`response not found during CCIP fetch: ${u}`,h.Logger.errors.SERVER_ERROR,{url:t,errorMessage:u});o.push(u)}return Es.throwError(`error encountered during CCIP fetch: ${o.map((e=>JSON.stringify(e))).join(", ")}`,h.Logger.errors.SERVER_ERROR,{urls:r,errorMessages:o})}))}_getInternalBlockNumber(e){return As(this,void 0,void 0,(function*(){if(yield this._ready(),e>0)for(;this._internalBlockNumber;){const t=this._internalBlockNumber;try{const r=yield t;if(ks()-r.respTime<=e)return r.blockNumber;break}catch(e){if(this._internalBlockNumber===t)break}}const t=ks(),r=(0,B.resolveProperties)({blockNumber:this.perform("getBlockNumber",{}),networkError:this.getNetwork().then((e=>null),(e=>e))}).then((({blockNumber:e,networkError:n})=>{if(n)throw this._internalBlockNumber===r&&(this._internalBlockNumber=null),n;const i=ks();return(e=y.from(e).toNumber())<this._maxInternalBlockNumber&&(e=this._maxInternalBlockNumber),this._maxInternalBlockNumber=e,this._setFastBlockNumber(e),{blockNumber:e,reqTime:t,respTime:i}}));return this._internalBlockNumber=r,r.catch((e=>{this._internalBlockNumber===r&&(this._internalBlockNumber=null)})),(yield r).blockNumber}))}poll(){return As(this,void 0,void 0,(function*(){const e=Ks++,t=[];let r=null;try{r=yield this._getInternalBlockNumber(100+this.pollingInterval/2)}catch(e){return void this.emit("error",e)}if(this._setFastBlockNumber(r),this.emit("poll",e,r),r!==this._lastBlockNumber){if(-2===this._emitted.block&&(this._emitted.block=r-1),Math.abs(this._emitted.block-r)>1e3)Es.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${r})`),this.emit("error",Es.makeError("network block skew detected",h.Logger.errors.NETWORK_ERROR,{blockNumber:r,event:"blockSkew",previousBlockNumber:this._emitted.block})),this.emit("block",r);else for(let e=this._emitted.block+1;e<=r;e++)this.emit("block",e);this._emitted.block!==r&&(this._emitted.block=r,Object.keys(this._emitted).forEach((e=>{if("block"===e)return;const t=this._emitted[e];"pending"!==t&&r-t>12&&delete this._emitted[e]}))),-2===this._lastBlockNumber&&(this._lastBlockNumber=r-1),this._events.forEach((e=>{switch(e.type){case"tx":{const r=e.hash;let n=this.getTransactionReceipt(r).then((e=>e&&null!=e.blockNumber?(this._emitted["t:"+r]=e.blockNumber,this.emit(r,e),null):null)).catch((e=>{this.emit("error",e)}));t.push(n);break}case"filter":if(!e._inflight){e._inflight=!0,-2===e._lastBlockNumber&&(e._lastBlockNumber=r-1);const n=e.filter;n.fromBlock=e._lastBlockNumber+1,n.toBlock=r;const i=n.toBlock-this._maxFilterBlockRange;i>n.fromBlock&&(n.fromBlock=i),n.fromBlock<0&&(n.fromBlock=0);const o=this.getLogs(n).then((t=>{e._inflight=!1,0!==t.length&&t.forEach((t=>{t.blockNumber>e._lastBlockNumber&&(e._lastBlockNumber=t.blockNumber),this._emitted["b:"+t.blockHash]=t.blockNumber,this._emitted["t:"+t.transactionHash]=t.blockNumber,this.emit(n,t)}))})).catch((t=>{this.emit("error",t),e._inflight=!1}));t.push(o)}}})),this._lastBlockNumber=r,Promise.all(t).then((()=>{this.emit("didPoll",e)})).catch((e=>{this.emit("error",e)}))}else this.emit("didPoll",e)}))}resetEventsBlock(e){this._lastBlockNumber=e-1,this.polling&&this.poll()}get network(){return this._network}detectNetwork(){return As(this,void 0,void 0,(function*(){return Es.throwError("provider does not support network detection",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"provider.detectNetwork"})}))}getNetwork(){return As(this,void 0,void 0,(function*(){const e=yield this._ready(),t=yield this.detectNetwork();if(e.chainId!==t.chainId){if(this.anyNetwork)return this._network=t,this._lastBlockNumber=-2,this._fastBlockNumber=null,this._fastBlockNumberPromise=null,this._fastQueryDate=0,this._emitted.block=-2,this._maxInternalBlockNumber=-1024,this._internalBlockNumber=null,this.emit("network",t,e),yield _s(0),this._network;const r=Es.makeError("underlying network changed",h.Logger.errors.NETWORK_ERROR,{event:"changed",network:e,detectedNetwork:t});throw this.emit("error",r),r}return e}))}get blockNumber(){return this._getInternalBlockNumber(100+this.pollingInterval/2).then((e=>{this._setFastBlockNumber(e)}),(e=>{})),null!=this._fastBlockNumber?this._fastBlockNumber:-1}get polling(){return null!=this._poller}set polling(e){e&&!this._poller?(this._poller=setInterval((()=>{this.poll()}),this.pollingInterval),this._bootstrapPoll||(this._bootstrapPoll=setTimeout((()=>{this.poll(),this._bootstrapPoll=setTimeout((()=>{this._poller||this.poll(),this._bootstrapPoll=null}),this.pollingInterval)}),0))):!e&&this._poller&&(clearInterval(this._poller),this._poller=null)}get pollingInterval(){return this._pollingInterval}set pollingInterval(e){if("number"!=typeof e||e<=0||parseInt(String(e))!=e)throw new Error("invalid polling interval");this._pollingInterval=e,this._poller&&(clearInterval(this._poller),this._poller=setInterval((()=>{this.poll()}),this._pollingInterval))}_getFastBlockNumber(){const e=ks();return e-this._fastQueryDate>2*this._pollingInterval&&(this._fastQueryDate=e,this._fastBlockNumberPromise=this.getBlockNumber().then((e=>((null==this._fastBlockNumber||e>this._fastBlockNumber)&&(this._fastBlockNumber=e),this._fastBlockNumber)))),this._fastBlockNumberPromise}_setFastBlockNumber(e){null!=this._fastBlockNumber&&e<this._fastBlockNumber||(this._fastQueryDate=ks(),(null==this._fastBlockNumber||e>this._fastBlockNumber)&&(this._fastBlockNumber=e,this._fastBlockNumberPromise=Promise.resolve(e)))}waitForTransaction(e,t,r){return As(this,void 0,void 0,(function*(){return this._waitForTransaction(e,null==t?1:t,r||0,null)}))}_waitForTransaction(e,t,r,n){return As(this,void 0,void 0,(function*(){const i=yield this.getTransactionReceipt(e);return(i?i.confirmations:0)>=t?i:new Promise(((i,o)=>{const s=[];let a=!1;const c=function(){return!!a||(a=!0,s.forEach((e=>{e()})),!1)},u=e=>{e.confirmations<t||c()||i(e)};if(this.on(e,u),s.push((()=>{this.removeListener(e,u)})),n){let r=n.startBlock,i=null;const u=s=>As(this,void 0,void 0,(function*(){a||(yield _s(1e3),this.getTransactionCount(n.from).then((l=>As(this,void 0,void 0,(function*(){if(!a){if(l<=n.nonce)r=s;else{{const t=yield this.getTransaction(e);if(t&&null!=t.blockNumber)return}for(null==i&&(i=r-3,i<n.startBlock&&(i=n.startBlock));i<=s;){if(a)return;const r=yield this.getBlockWithTransactions(i);for(let i=0;i<r.transactions.length;i++){const s=r.transactions[i];if(s.hash===e)return;if(s.from===n.from&&s.nonce===n.nonce){if(a)return;const r=yield this.waitForTransaction(s.hash,t);if(c())return;let i="replaced";return s.data===n.data&&s.to===n.to&&s.value.eq(n.value)?i="repriced":"0x"===s.data&&s.from===s.to&&s.value.isZero()&&(i="cancelled"),void o(Es.makeError("transaction was replaced",h.Logger.errors.TRANSACTION_REPLACED,{cancelled:"replaced"===i||"cancelled"===i,reason:i,replacement:this._wrapTransaction(s),hash:e,receipt:r}))}}i++}}a||this.once("block",u)}}))),(e=>{a||this.once("block",u)})))}));if(a)return;this.once("block",u),s.push((()=>{this.removeListener("block",u)}))}if("number"==typeof r&&r>0){const e=setTimeout((()=>{c()||o(Es.makeError("timeout exceeded",h.Logger.errors.TIMEOUT,{timeout:r}))}),r);e.unref&&e.unref(),s.push((()=>{clearTimeout(e)}))}}))}))}getBlockNumber(){return As(this,void 0,void 0,(function*(){return this._getInternalBlockNumber(0)}))}getGasPrice(){return As(this,void 0,void 0,(function*(){yield this.getNetwork();const e=yield this.perform("getGasPrice",{});try{return y.from(e)}catch(t){return Es.throwError("bad result from backend",h.Logger.errors.SERVER_ERROR,{method:"getGasPrice",result:e,error:t})}}))}getBalance(e,t){return As(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield(0,B.resolveProperties)({address:this._getAddress(e),blockTag:this._getBlockTag(t)}),n=yield this.perform("getBalance",r);try{return y.from(n)}catch(e){return Es.throwError("bad result from backend",h.Logger.errors.SERVER_ERROR,{method:"getBalance",params:r,result:n,error:e})}}))}getTransactionCount(e,t){return As(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield(0,B.resolveProperties)({address:this._getAddress(e),blockTag:this._getBlockTag(t)}),n=yield this.perform("getTransactionCount",r);try{return y.from(n).toNumber()}catch(e){return Es.throwError("bad result from backend",h.Logger.errors.SERVER_ERROR,{method:"getTransactionCount",params:r,result:n,error:e})}}))}getCode(e,t){return As(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield(0,B.resolveProperties)({address:this._getAddress(e),blockTag:this._getBlockTag(t)}),n=yield this.perform("getCode",r);try{return(0,l.hexlify)(n)}catch(e){return Es.throwError("bad result from backend",h.Logger.errors.SERVER_ERROR,{method:"getCode",params:r,result:n,error:e})}}))}getStorageAt(e,t,r){return As(this,void 0,void 0,(function*(){yield this.getNetwork();const n=yield(0,B.resolveProperties)({address:this._getAddress(e),blockTag:this._getBlockTag(r),position:Promise.resolve(t).then((e=>(0,l.hexValue)(e)))}),i=yield this.perform("getStorageAt",n);try{return(0,l.hexlify)(i)}catch(e){return Es.throwError("bad result from backend",h.Logger.errors.SERVER_ERROR,{method:"getStorageAt",params:n,result:i,error:e})}}))}_wrapTransaction(e,t,r){if(null!=t&&32!==(0,l.hexDataLength)(t))throw new Error("invalid response - sendTransaction");const n=e;return null!=t&&e.hash!==t&&Es.throwError("Transaction hash mismatch from Provider.sendTransaction.",h.Logger.errors.UNKNOWN_ERROR,{expectedHash:e.hash,returnedHash:t}),n.wait=(t,n)=>As(this,void 0,void 0,(function*(){let i;null==t&&(t=1),null==n&&(n=0),0!==t&&null!=r&&(i={data:e.data,from:e.from,nonce:e.nonce,to:e.to,value:e.value,startBlock:r});const o=yield this._waitForTransaction(e.hash,t,n,i);return null==o&&0===t?null:(this._emitted["t:"+e.hash]=o.blockNumber,0===o.status&&Es.throwError("transaction failed",h.Logger.errors.CALL_EXCEPTION,{transactionHash:e.hash,transaction:e,receipt:o}),o)})),n}sendTransaction(e){return As(this,void 0,void 0,(function*(){yield this.getNetwork();const t=yield Promise.resolve(e).then((e=>(0,l.hexlify)(e))),r=this.formatter.transaction(e);null==r.confirmations&&(r.confirmations=0);const n=yield this._getInternalBlockNumber(100+2*this.pollingInterval);try{const e=yield this.perform("sendTransaction",{signedTransaction:t});return this._wrapTransaction(r,e,n)}catch(e){throw e.transaction=r,e.transactionHash=r.hash,e}}))}_getTransactionRequest(e){return As(this,void 0,void 0,(function*(){const t=yield e,r={};return["from","to"].forEach((e=>{null!=t[e]&&(r[e]=Promise.resolve(t[e]).then((e=>e?this._getAddress(e):null)))})),["gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","value"].forEach((e=>{null!=t[e]&&(r[e]=Promise.resolve(t[e]).then((e=>e?y.from(e):null)))})),["type"].forEach((e=>{null!=t[e]&&(r[e]=Promise.resolve(t[e]).then((e=>null!=e?e:null)))})),t.accessList&&(r.accessList=this.formatter.accessList(t.accessList)),["data"].forEach((e=>{null!=t[e]&&(r[e]=Promise.resolve(t[e]).then((e=>e?(0,l.hexlify)(e):null)))})),this.formatter.transactionRequest(yield(0,B.resolveProperties)(r))}))}_getFilter(e){return As(this,void 0,void 0,(function*(){e=yield e;const t={};return null!=e.address&&(t.address=this._getAddress(e.address)),["blockHash","topics"].forEach((r=>{null!=e[r]&&(t[r]=e[r])})),["fromBlock","toBlock"].forEach((r=>{null!=e[r]&&(t[r]=this._getBlockTag(e[r]))})),this.formatter.filter(yield(0,B.resolveProperties)(t))}))}_call(e,t,r){return As(this,void 0,void 0,(function*(){r>=10&&Es.throwError("CCIP read exceeded maximum redirections",h.Logger.errors.SERVER_ERROR,{redirects:r,transaction:e});const n=e.to,i=yield this.perform("call",{transaction:e,blockTag:t});if(r>=0&&"latest"===t&&null!=n&&"0x556f1830"===i.substring(0,10)&&(0,l.hexDataLength)(i)%32==4)try{const o=(0,l.hexDataSlice)(i,4),s=(0,l.hexDataSlice)(o,0,32);y.from(s).eq(n)||Es.throwError("CCIP Read sender did not match",h.Logger.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:e,data:i});const a=[],c=y.from((0,l.hexDataSlice)(o,32,64)).toNumber(),u=y.from((0,l.hexDataSlice)(o,c,c+32)).toNumber(),f=(0,l.hexDataSlice)(o,c+32);for(let t=0;t<u;t++){const r=Bs(f,32*t);null==r&&Es.throwError("CCIP Read contained corrupt URL string",h.Logger.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:e,data:i}),a.push(r)}const d=Fs(o,64);y.from((0,l.hexDataSlice)(o,100,128)).isZero()||Es.throwError("CCIP Read callback selector included junk",h.Logger.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:e,data:i});const p=(0,l.hexDataSlice)(o,96,100),g=Fs(o,128),m=yield this.ccipReadFetch(e,d,a);null==m&&Es.throwError("CCIP Read disabled or provided no URLs",h.Logger.errors.CALL_EXCEPTION,{name:"OffchainLookup",signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",transaction:e,data:i});const v={to:n,data:(0,l.hexConcat)([p,Us([m,g])])};return this._call(v,t,r+1)}catch(e){if(e.code===h.Logger.errors.SERVER_ERROR)throw e}try{return(0,l.hexlify)(i)}catch(r){return Es.throwError("bad result from backend",h.Logger.errors.SERVER_ERROR,{method:"call",params:{transaction:e,blockTag:t},result:i,error:r})}}))}call(e,t){return As(this,void 0,void 0,(function*(){yield this.getNetwork();const r=yield(0,B.resolveProperties)({transaction:this._getTransactionRequest(e),blockTag:this._getBlockTag(t),ccipReadEnabled:Promise.resolve(e.ccipReadEnabled)});return this._call(r.transaction,r.blockTag,r.ccipReadEnabled?0:-1)}))}estimateGas(e){return As(this,void 0,void 0,(function*(){yield this.getNetwork();const t=yield(0,B.resolveProperties)({transaction:this._getTransactionRequest(e)}),r=yield this.perform("estimateGas",t);try{return y.from(r)}catch(e){return Es.throwError("bad result from backend",h.Logger.errors.SERVER_ERROR,{method:"estimateGas",params:t,result:r,error:e})}}))}_getAddress(e){return As(this,void 0,void 0,(function*(){"string"!=typeof(e=yield e)&&Es.throwArgumentError("invalid address or ENS name","name",e);const t=yield this.resolveName(e);return null==t&&Es.throwError("ENS name not configured",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:`resolveName(${JSON.stringify(e)})`}),t}))}_getBlock(e,t){return As(this,void 0,void 0,(function*(){yield this.getNetwork(),e=yield e;let r=-128;const n={includeTransactions:!!t};if((0,l.isHexString)(e,32))n.blockHash=e;else try{n.blockTag=yield this._getBlockTag(e),(0,l.isHexString)(n.blockTag)&&(r=parseInt(n.blockTag.substring(2),16))}catch(t){Es.throwArgumentError("invalid block hash or block tag","blockHashOrBlockTag",e)}return(0,Zo.poll)((()=>As(this,void 0,void 0,(function*(){const e=yield this.perform("getBlock",n);if(null==e)return null!=n.blockHash&&null==this._emitted["b:"+n.blockHash]||null!=n.blockTag&&r>this._emitted.block?null:void 0;if(t){let t=null;for(let r=0;r<e.transactions.length;r++){const n=e.transactions[r];if(null==n.blockNumber)n.confirmations=0;else if(null==n.confirmations){null==t&&(t=yield this._getInternalBlockNumber(100+2*this.pollingInterval));let e=t-n.blockNumber+1;e<=0&&(e=1),n.confirmations=e}}const r=this.formatter.blockWithTransactions(e);return r.transactions=r.transactions.map((e=>this._wrapTransaction(e))),r}return this.formatter.block(e)}))),{oncePoll:this})}))}getBlock(e){return this._getBlock(e,!1)}getBlockWithTransactions(e){return this._getBlock(e,!0)}getTransaction(e){return As(this,void 0,void 0,(function*(){yield this.getNetwork(),e=yield e;const t={transactionHash:this.formatter.hash(e,!0)};return(0,Zo.poll)((()=>As(this,void 0,void 0,(function*(){const r=yield this.perform("getTransaction",t);if(null==r)return null==this._emitted["t:"+e]?null:void 0;const n=this.formatter.transactionResponse(r);if(null==n.blockNumber)n.confirmations=0;else if(null==n.confirmations){let e=(yield this._getInternalBlockNumber(100+2*this.pollingInterval))-n.blockNumber+1;e<=0&&(e=1),n.confirmations=e}return this._wrapTransaction(n)}))),{oncePoll:this})}))}getTransactionReceipt(e){return As(this,void 0,void 0,(function*(){yield this.getNetwork(),e=yield e;const t={transactionHash:this.formatter.hash(e,!0)};return(0,Zo.poll)((()=>As(this,void 0,void 0,(function*(){const r=yield this.perform("getTransactionReceipt",t);if(null==r)return null==this._emitted["t:"+e]?null:void 0;if(null==r.blockHash)return;const n=this.formatter.receipt(r);if(null==n.blockNumber)n.confirmations=0;else if(null==n.confirmations){let e=(yield this._getInternalBlockNumber(100+2*this.pollingInterval))-n.blockNumber+1;e<=0&&(e=1),n.confirmations=e}return n}))),{oncePoll:this})}))}getLogs(e){return As(this,void 0,void 0,(function*(){yield this.getNetwork();const t=yield(0,B.resolveProperties)({filter:this._getFilter(e)}),r=yield this.perform("getLogs",t);return r.forEach((e=>{null==e.removed&&(e.removed=!1)})),ms.arrayOf(this.formatter.filterLog.bind(this.formatter))(r)}))}getEtherPrice(){return As(this,void 0,void 0,(function*(){return yield this.getNetwork(),this.perform("getEtherPrice",{})}))}_getBlockTag(e){return As(this,void 0,void 0,(function*(){if("number"==typeof(e=yield e)&&e<0){e%1&&Es.throwArgumentError("invalid BlockTag","blockTag",e);let t=yield this._getInternalBlockNumber(100+2*this.pollingInterval);return t+=e,t<0&&(t=0),this.formatter.blockTag(t)}return this.formatter.blockTag(e)}))}getResolver(e){return As(this,void 0,void 0,(function*(){let t=e;for(;;){if(""===t||"."===t)return null;if("eth"!==e&&"eth"===t)return null;const r=yield this._getResolver(t,"getResolver");if(null!=r){const n=new zs(this,r,e);return t===e||(yield n.supportsWildcard())?n:null}t=t.split(".").slice(1).join(".")}}))}_getResolver(e,t){return As(this,void 0,void 0,(function*(){null==t&&(t="ENS");const r=yield this.getNetwork();r.ensAddress||Es.throwError("network does not support ENS",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:t,network:r.name});try{const t=yield this.call({to:r.ensAddress,data:"0x0178b8bf"+fr(e).substring(2)});return this.formatter.callAddress(t)}catch(e){}return null}))}resolveName(e){return As(this,void 0,void 0,(function*(){e=yield e;try{return Promise.resolve(this.formatter.address(e))}catch(t){if((0,l.isHexString)(e))throw t}"string"!=typeof e&&Es.throwArgumentError("invalid ENS name","name",e);const t=yield this.getResolver(e);return t?yield t.getAddress():null}))}lookupAddress(e){return As(this,void 0,void 0,(function*(){e=yield e;const t=(e=this.formatter.address(e)).substring(2).toLowerCase()+".addr.reverse",r=yield this._getResolver(t,"lookupAddress");if(null==r)return null;const n=Bs(yield this.call({to:r,data:"0x691f3431"+fr(t).substring(2)}),0);return(yield this.resolveName(n))!=e?null:n}))}getAvatar(e){return As(this,void 0,void 0,(function*(){let t=null;if((0,l.isHexString)(e)){const r=this.formatter.address(e).substring(2).toLowerCase()+".addr.reverse",n=yield this._getResolver(r,"getAvatar");if(!n)return null;t=new zs(this,n,r);try{const e=yield t.getAvatar();if(e)return e.url}catch(e){if(e.code!==h.Logger.errors.CALL_EXCEPTION)throw e}try{const e=Bs(yield this.call({to:n,data:"0x691f3431"+fr(r).substring(2)}),0);t=yield this.getResolver(e)}catch(e){if(e.code!==h.Logger.errors.CALL_EXCEPTION)throw e;return null}}else if(t=yield this.getResolver(e),!t)return null;const r=yield t.getAvatar();return null==r?null:r.url}))}perform(e,t){return Es.throwError(e+" not implemented",h.Logger.errors.NOT_IMPLEMENTED,{operation:e})}_startEvent(e){this.polling=this._events.filter((e=>e.pollable())).length>0}_stopEvent(e){this.polling=this._events.filter((e=>e.pollable())).length>0}_addEventListener(e,t,r){const n=new Rs(Cs(e),t,r);return this._events.push(n),this._startEvent(n),this}on(e,t){return this._addEventListener(e,t,!1)}once(e,t){return this._addEventListener(e,t,!0)}emit(e,...t){let r=!1,n=[],i=Cs(e);return this._events=this._events.filter((e=>e.tag!==i||(setTimeout((()=>{e.listener.apply(this,t)}),0),r=!0,!e.once||(n.push(e),!1)))),n.forEach((e=>{this._stopEvent(e)})),r}listenerCount(e){if(!e)return this._events.length;let t=Cs(e);return this._events.filter((e=>e.tag===t)).length}listeners(e){if(null==e)return this._events.map((e=>e.listener));let t=Cs(e);return this._events.filter((e=>e.tag===t)).map((e=>e.listener))}off(e,t){if(null==t)return this.removeAllListeners(e);const r=[];let n=!1,i=Cs(e);return this._events=this._events.filter((e=>e.tag!==i||e.listener!=t||(!!n||(n=!0,r.push(e),!1)))),r.forEach((e=>{this._stopEvent(e)})),this}removeAllListeners(e){let t=[];if(null==e)t=this._events,this._events=[];else{const r=Cs(e);this._events=this._events.filter((e=>e.tag!==r||(t.push(e),!1)))}return t.forEach((e=>{this._stopEvent(e)})),this}constructor(e){if(super(),this._events=[],this._emitted={block:-2},this.disableCcipRead=!1,this.formatter=new.target.getFormatter(),(0,B.defineReadOnly)(this,"anyNetwork","any"===e),this.anyNetwork&&(e=this.detectNetwork()),e instanceof Promise)this._networkPromise=e,e.catch((e=>{})),this._ready().catch((e=>{}));else{const t=(0,B.getStatic)(new.target,"getNetwork")(e);t?((0,B.defineReadOnly)(this,"_network",t),this.emit("network",t,null)):Es.throwArgumentError("invalid network","network",e)}this._maxInternalBlockNumber=-1024,this._lastBlockNumber=-2,this._maxFilterBlockRange=10,this._pollingInterval=4e3,this._fastQueryDate=0}}var Ws={};e(Ws,"WebSocketProvider",(function(){return la}),(function(e){return la=e}));var Hs={};e(Hs,"JsonRpcSigner",(function(){return ra}),(function(e){return ra=e})),e(Hs,"JsonRpcProvider",(function(){return oa}),(function(e){return oa=e}));l=o("jNZoB"),h=o("3Qchy");var Js=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};const Vs=new(0,h.Logger)("providers/5.7.0"),Qs=["call","estimateGas"];function Zs(e,t){if(null==e)return null;if("string"==typeof e.message&&e.message.match("reverted")){const r=(0,l.isHexString)(e.data)?e.data:null;if(!t||r)return{message:e.message,data:r}}if("object"==typeof e){for(const r in e){const n=Zs(e[r],t);if(n)return n}return null}if("string"==typeof e)try{return Zs(JSON.parse(e),t)}catch(e){}return null}function Ys(e,t,r){const n=r.transaction||r.signedTransaction;if("call"===e){const e=Zs(t,!0);if(e)return e.data;Vs.throwError("missing revert data in call exception; Transaction reverted without a reason string",h.Logger.errors.CALL_EXCEPTION,{data:"0x",transaction:n,error:t})}if("estimateGas"===e){let r=Zs(t.body,!1);null==r&&(r=Zs(t,!1)),r&&Vs.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",h.Logger.errors.UNPREDICTABLE_GAS_LIMIT,{reason:r.message,method:e,transaction:n,error:t})}let i=t.message;throw t.code===h.Logger.errors.SERVER_ERROR&&t.error&&"string"==typeof t.error.message?i=t.error.message:"string"==typeof t.body?i=t.body:"string"==typeof t.responseText&&(i=t.responseText),i=(i||"").toLowerCase(),i.match(/insufficient funds|base fee exceeds gas limit/i)&&Vs.throwError("insufficient funds for intrinsic transaction cost",h.Logger.errors.INSUFFICIENT_FUNDS,{error:t,method:e,transaction:n}),i.match(/nonce (is )?too low/i)&&Vs.throwError("nonce has already been used",h.Logger.errors.NONCE_EXPIRED,{error:t,method:e,transaction:n}),i.match(/replacement transaction underpriced|transaction gas price.*too low/i)&&Vs.throwError("replacement fee too low",h.Logger.errors.REPLACEMENT_UNDERPRICED,{error:t,method:e,transaction:n}),i.match(/only replay-protected/i)&&Vs.throwError("legacy pre-eip-155 transactions not supported",h.Logger.errors.UNSUPPORTED_OPERATION,{error:t,method:e,transaction:n}),Qs.indexOf(e)>=0&&i.match(/gas required exceeds allowance|always failing transaction|execution reverted/)&&Vs.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",h.Logger.errors.UNPREDICTABLE_GAS_LIMIT,{error:t,method:e,transaction:n}),t}function Xs(e){return new Promise((function(t){setTimeout(t,e)}))}function $s(e){if(e.error){const t=new Error(e.error.message);throw t.code=e.error.code,t.data=e.error.data,t}return e.result}function ea(e){return e?e.toLowerCase():e}const ta={};class ra extends Wr.Signer{connect(e){return Vs.throwError("cannot alter JSON-RPC Signer connection",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"connect"})}connectUnchecked(){return new na(ta,this.provider,this._address||this._index)}getAddress(){return this._address?Promise.resolve(this._address):this.provider.send("eth_accounts",[]).then((e=>(e.length<=this._index&&Vs.throwError("unknown account #"+this._index,h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"getAddress"}),this.provider.formatter.address(e[this._index]))))}sendUncheckedTransaction(e){e=(0,B.shallowCopy)(e);const t=this.getAddress().then((e=>(e&&(e=e.toLowerCase()),e)));if(null==e.gasLimit){const r=(0,B.shallowCopy)(e);r.from=t,e.gasLimit=this.provider.estimateGas(r)}return null!=e.to&&(e.to=Promise.resolve(e.to).then((e=>Js(this,void 0,void 0,(function*(){if(null==e)return null;const t=yield this.provider.resolveName(e);return null==t&&Vs.throwArgumentError("provided ENS name resolves to null","tx.to",e),t}))))),(0,B.resolveProperties)({tx:(0,B.resolveProperties)(e),sender:t}).then((({tx:t,sender:r})=>{null!=t.from?t.from.toLowerCase()!==r&&Vs.throwArgumentError("from address mismatch","transaction",e):t.from=r;const n=this.provider.constructor.hexlifyTransaction(t,{from:!0});return this.provider.send("eth_sendTransaction",[n]).then((e=>e),(e=>("string"==typeof e.message&&e.message.match(/user denied/i)&&Vs.throwError("user rejected transaction",h.Logger.errors.ACTION_REJECTED,{action:"sendTransaction",transaction:t}),Ys("sendTransaction",e,n))))}))}signTransaction(e){return Vs.throwError("signing transactions is unsupported",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"signTransaction"})}sendTransaction(e){return Js(this,void 0,void 0,(function*(){const t=yield this.provider._getInternalBlockNumber(100+2*this.provider.pollingInterval),r=yield this.sendUncheckedTransaction(e);try{return yield(0,Zo.poll)((()=>Js(this,void 0,void 0,(function*(){const e=yield this.provider.getTransaction(r);if(null!==e)return this.provider._wrapTransaction(e,r,t)}))),{oncePoll:this.provider})}catch(e){throw e.transactionHash=r,e}}))}signMessage(e){return Js(this,void 0,void 0,(function*(){const t="string"==typeof e?gt(e):e,r=yield this.getAddress();try{return yield this.provider.send("personal_sign",[(0,l.hexlify)(t),r.toLowerCase()])}catch(e){throw"string"==typeof e.message&&e.message.match(/user denied/i)&&Vs.throwError("user rejected signing",h.Logger.errors.ACTION_REJECTED,{action:"signMessage",from:r,message:t}),e}}))}_legacySignMessage(e){return Js(this,void 0,void 0,(function*(){const t="string"==typeof e?gt(e):e,r=yield this.getAddress();try{return yield this.provider.send("eth_sign",[r.toLowerCase(),(0,l.hexlify)(t)])}catch(e){throw"string"==typeof e.message&&e.message.match(/user denied/i)&&Vs.throwError("user rejected signing",h.Logger.errors.ACTION_REJECTED,{action:"_legacySignMessage",from:r,message:t}),e}}))}_signTypedData(e,t,r){return Js(this,void 0,void 0,(function*(){const n=yield gr.TypedDataEncoder.resolveNames(e,t,r,(e=>this.provider.resolveName(e))),i=yield this.getAddress();try{return yield this.provider.send("eth_signTypedData_v4",[i.toLowerCase(),JSON.stringify(gr.TypedDataEncoder.getPayload(n.domain,t,n.value))])}catch(e){throw"string"==typeof e.message&&e.message.match(/user denied/i)&&Vs.throwError("user rejected signing",h.Logger.errors.ACTION_REJECTED,{action:"_signTypedData",from:i,message:{domain:n.domain,types:t,value:n.value}}),e}}))}unlock(e){return Js(this,void 0,void 0,(function*(){const t=this.provider,r=yield this.getAddress();return t.send("personal_unlockAccount",[r.toLowerCase(),e,null])}))}constructor(e,t,r){if(super(),e!==ta)throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");(0,B.defineReadOnly)(this,"provider",t),null==r&&(r=0),"string"==typeof r?((0,B.defineReadOnly)(this,"_address",this.provider.formatter.address(r)),(0,B.defineReadOnly)(this,"_index",null)):"number"==typeof r?((0,B.defineReadOnly)(this,"_index",r),(0,B.defineReadOnly)(this,"_address",null)):Vs.throwArgumentError("invalid address or index","addressOrIndex",r)}}class na extends ra{sendTransaction(e){return this.sendUncheckedTransaction(e).then((e=>({hash:e,nonce:null,gasLimit:null,gasPrice:null,data:null,value:null,chainId:null,confirmations:0,from:null,wait:t=>this.provider.waitForTransaction(e,t)})))}}const ia={chainId:!0,data:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,value:!0,type:!0,accessList:!0,maxFeePerGas:!0,maxPriorityFeePerGas:!0};class oa extends Vo.BaseProvider{get _cache(){return null==this._eventLoopCache&&(this._eventLoopCache={}),this._eventLoopCache}static defaultUrl(){return"http://localhost:8545"}detectNetwork(){return this._cache.detectNetwork||(this._cache.detectNetwork=this._uncachedDetectNetwork(),setTimeout((()=>{this._cache.detectNetwork=null}),0)),this._cache.detectNetwork}_uncachedDetectNetwork(){return Js(this,void 0,void 0,(function*(){yield Xs(0);let e=null;try{e=yield this.send("eth_chainId",[])}catch(t){try{e=yield this.send("net_version",[])}catch(e){}}if(null!=e){const t=(0,B.getStatic)(this.constructor,"getNetwork");try{return t(y.from(e).toNumber())}catch(t){return Vs.throwError("could not detect network",h.Logger.errors.NETWORK_ERROR,{chainId:e,event:"invalidNetwork",serverError:t})}}return Vs.throwError("could not detect network",h.Logger.errors.NETWORK_ERROR,{event:"noNetwork"})}))}getSigner(e){return new ra(ta,this,e)}getUncheckedSigner(e){return this.getSigner(e).connectUnchecked()}listAccounts(){return this.send("eth_accounts",[]).then((e=>e.map((e=>this.formatter.address(e)))))}send(e,t){const r={method:e,params:t,id:this._nextId++,jsonrpc:"2.0"};this.emit("debug",{action:"request",request:(0,B.deepCopy)(r),provider:this});const n=["eth_chainId","eth_blockNumber"].indexOf(e)>=0;if(n&&this._cache[e])return this._cache[e];const i=(0,Zo.fetchJson)(this.connection,JSON.stringify(r),$s).then((e=>(this.emit("debug",{action:"response",request:r,response:e,provider:this}),e)),(e=>{throw this.emit("debug",{action:"response",error:e,request:r,provider:this}),e}));return n&&(this._cache[e]=i,setTimeout((()=>{this._cache[e]=null}),0)),i}prepareRequest(e,t){switch(e){case"getBlockNumber":return["eth_blockNumber",[]];case"getGasPrice":return["eth_gasPrice",[]];case"getBalance":return["eth_getBalance",[ea(t.address),t.blockTag]];case"getTransactionCount":return["eth_getTransactionCount",[ea(t.address),t.blockTag]];case"getCode":return["eth_getCode",[ea(t.address),t.blockTag]];case"getStorageAt":return["eth_getStorageAt",[ea(t.address),(0,l.hexZeroPad)(t.position,32),t.blockTag]];case"sendTransaction":return["eth_sendRawTransaction",[t.signedTransaction]];case"getBlock":return t.blockTag?["eth_getBlockByNumber",[t.blockTag,!!t.includeTransactions]]:t.blockHash?["eth_getBlockByHash",[t.blockHash,!!t.includeTransactions]]:null;case"getTransaction":return["eth_getTransactionByHash",[t.transactionHash]];case"getTransactionReceipt":return["eth_getTransactionReceipt",[t.transactionHash]];case"call":return["eth_call",[(0,B.getStatic)(this.constructor,"hexlifyTransaction")(t.transaction,{from:!0}),t.blockTag]];case"estimateGas":return["eth_estimateGas",[(0,B.getStatic)(this.constructor,"hexlifyTransaction")(t.transaction,{from:!0})]];case"getLogs":return t.filter&&null!=t.filter.address&&(t.filter.address=ea(t.filter.address)),["eth_getLogs",[t.filter]]}return null}perform(e,t){return Js(this,void 0,void 0,(function*(){if("call"===e||"estimateGas"===e){const e=t.transaction;if(e&&null!=e.type&&y.from(e.type).isZero()&&null==e.maxFeePerGas&&null==e.maxPriorityFeePerGas){const r=yield this.getFeeData();null==r.maxFeePerGas&&null==r.maxPriorityFeePerGas&&((t=(0,B.shallowCopy)(t)).transaction=(0,B.shallowCopy)(e),delete t.transaction.type)}}const r=this.prepareRequest(e,t);null==r&&Vs.throwError(e+" not implemented",h.Logger.errors.NOT_IMPLEMENTED,{operation:e});try{return yield this.send(r[0],r[1])}catch(r){return Ys(e,r,t)}}))}_startEvent(e){"pending"===e.tag&&this._startPending(),super._startEvent(e)}_startPending(){if(null!=this._pendingFilter)return;const e=this,t=this.send("eth_newPendingTransactionFilter",[]);this._pendingFilter=t,t.then((function(r){return function n(){e.send("eth_getFilterChanges",[r]).then((function(r){if(e._pendingFilter!=t)return null;let n=Promise.resolve();return r.forEach((function(t){e._emitted["t:"+t.toLowerCase()]="pending",n=n.then((function(){return e.getTransaction(t).then((function(t){return e.emit("pending",t),null}))}))})),n.then((function(){return Xs(1e3)}))})).then((function(){if(e._pendingFilter==t)return setTimeout((function(){n()}),0),null;e.send("eth_uninstallFilter",[r])})).catch((e=>{}))}(),r})).catch((e=>{}))}_stopEvent(e){"pending"===e.tag&&0===this.listenerCount("pending")&&(this._pendingFilter=null),super._stopEvent(e)}static hexlifyTransaction(e,t){const r=(0,B.shallowCopy)(ia);if(t)for(const e in t)t[e]&&(r[e]=!0);(0,B.checkProperties)(e,r);const n={};return["chainId","gasLimit","gasPrice","type","maxFeePerGas","maxPriorityFeePerGas","nonce","value"].forEach((function(t){if(null==e[t])return;const r=(0,l.hexValue)(y.from(e[t]));"gasLimit"===t&&(t="gas"),n[t]=r})),["from","to","data"].forEach((function(t){null!=e[t]&&(n[t]=(0,l.hexlify)(e[t]))})),e.accessList&&(n.accessList=ei(e.accessList)),n}constructor(e,t){let r=t;null==r&&(r=new Promise(((e,t)=>{setTimeout((()=>{this.detectNetwork().then((t=>{e(t)}),(e=>{t(e)}))}),0)}))),super(r),e||(e=(0,B.getStatic)(this.constructor,"defaultUrl")()),(0,B.defineReadOnly)(this,"connection","string"==typeof e?Object.freeze({url:e}):Object.freeze((0,B.shallowCopy)(e))),this._nextId=42}}h=o("3Qchy");let sa=null;try{if(sa=WebSocket,null==sa)throw new Error("inject please")}catch(e){const t=new(0,h.Logger)("providers/5.7.0");sa=function(){t.throwError("WebSockets not supported in this environment",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new WebSocket()"})}}h=o("3Qchy");var aa=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};const ca=new(0,h.Logger)("providers/5.7.0");let ua=1;class la extends Hs.JsonRpcProvider{get websocket(){return this._websocket}detectNetwork(){return this._detectNetwork}get pollingInterval(){return 0}resetEventsBlock(e){ca.throwError("cannot reset events block on WebSocketProvider",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"resetEventBlock"})}set pollingInterval(e){ca.throwError("cannot set polling interval on WebSocketProvider",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"setPollingInterval"})}poll(){return aa(this,void 0,void 0,(function*(){return null}))}set polling(e){e&&ca.throwError("cannot set polling on WebSocketProvider",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"setPolling"})}send(e,t){const r=ua++;return new Promise(((n,i)=>{const o=JSON.stringify({method:e,params:t,id:r,jsonrpc:"2.0"});this.emit("debug",{action:"request",request:JSON.parse(o),provider:this}),this._requests[String(r)]={callback:function(e,t){return e?i(e):n(t)},payload:o},this._wsReady&&this.websocket.send(o)}))}static defaultUrl(){return"ws://localhost:8546"}_subscribe(e,t,r){return aa(this,void 0,void 0,(function*(){let n=this._subIds[e];null==n&&(n=Promise.all(t).then((e=>this.send("eth_subscribe",e))),this._subIds[e]=n);const i=yield n;this._subs[i]={tag:e,processFunc:r}}))}_startEvent(e){switch(e.type){case"block":this._subscribe("block",["newHeads"],(e=>{const t=y.from(e.number).toNumber();this._emitted.block=t,this.emit("block",t)}));break;case"pending":this._subscribe("pending",["newPendingTransactions"],(e=>{this.emit("pending",e)}));break;case"filter":this._subscribe(e.tag,["logs",this._getFilter(e.filter)],(t=>{null==t.removed&&(t.removed=!1),this.emit(e.filter,this.formatter.filterLog(t))}));break;case"tx":{const t=e=>{const t=e.hash;this.getTransactionReceipt(t).then((e=>{e&&this.emit(t,e)}))};t(e),this._subscribe("tx",["newHeads"],(e=>{this._events.filter((e=>"tx"===e.type)).forEach(t)}));break}case"debug":case"poll":case"willPoll":case"didPoll":case"error":break;default:console.log("unhandled:",e)}}_stopEvent(e){let t=e.tag;if("tx"===e.type){if(this._events.filter((e=>"tx"===e.type)).length)return;t="tx"}else if(this.listenerCount(e.event))return;const r=this._subIds[t];r&&(delete this._subIds[t],r.then((e=>{this._subs[e]&&(delete this._subs[e],this.send("eth_unsubscribe",[e]))})))}destroy(){return aa(this,void 0,void 0,(function*(){this.websocket.readyState===sa.CONNECTING&&(yield new Promise((e=>{this.websocket.onopen=function(){e(!0)},this.websocket.onerror=function(){e(!1)}}))),this.websocket.close(1e3)}))}constructor(e,t){"any"===t&&ca.throwError("WebSocketProvider does not support 'any' network yet",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"network:any"}),super("string"==typeof e?e:"_websocket",t),this._pollingInterval=-1,this._wsReady=!1,(0,B.defineReadOnly)(this,"_websocket","string"==typeof e?new sa(this.connection.url):e),(0,B.defineReadOnly)(this,"_requests",{}),(0,B.defineReadOnly)(this,"_subs",{}),(0,B.defineReadOnly)(this,"_subIds",{}),(0,B.defineReadOnly)(this,"_detectNetwork",super.detectNetwork()),this.websocket.onopen=()=>{this._wsReady=!0,Object.keys(this._requests).forEach((e=>{this.websocket.send(this._requests[e].payload)}))},this.websocket.onmessage=e=>{const t=e.data,r=JSON.parse(t);if(null!=r.id){const e=String(r.id),n=this._requests[e];if(delete this._requests[e],void 0!==r.result)n.callback(null,r.result),this.emit("debug",{action:"response",request:JSON.parse(n.payload),response:r.result,provider:this});else{let e=null;r.error?(e=new Error(r.error.message||"unknown error"),(0,B.defineReadOnly)(e,"code",r.error.code||null),(0,B.defineReadOnly)(e,"response",t)):e=new Error("unknown error"),n.callback(e,void 0),this.emit("debug",{action:"response",error:e,request:JSON.parse(n.payload),provider:this})}}else if("eth_subscription"===r.method){const e=this._subs[r.params.subscription];e&&e.processFunc(r.params.result)}else console.warn("this should not happen")};const r=setInterval((()=>{this.emit("poll")}),1e3);r.unref&&r.unref()}}h=o("3Qchy");var ha={};e(ha,"StaticJsonRpcProvider",(function(){return pa}),(function(e){return pa=e})),e(ha,"UrlJsonRpcProvider",(function(){return ga}),(function(e){return ga=e}));h=o("3Qchy");var fa=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};const da=new(0,h.Logger)("providers/5.7.0");class pa extends Hs.JsonRpcProvider{detectNetwork(){const e=Object.create(null,{detectNetwork:{get:()=>super.detectNetwork}});return fa(this,void 0,void 0,(function*(){let t=this.network;return null==t&&(t=yield e.detectNetwork.call(this),t||da.throwError("no network detected",h.Logger.errors.UNKNOWN_ERROR,{}),null==this._network&&((0,B.defineReadOnly)(this,"_network",t),this.emit("network",t,null))),t}))}}class ga extends pa{_startPending(){da.warn("WARNING: API provider does not support pending filters")}isCommunityResource(){return!1}getSigner(e){return da.throwError("API provider does not support signing",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"getSigner"})}listAccounts(){return Promise.resolve([])}static getApiKey(e){return e}static getUrl(e,t){return da.throwError("not implemented; sub-classes must override getUrl",h.Logger.errors.NOT_IMPLEMENTED,{operation:"getUrl"})}constructor(e,t){da.checkAbstract(new.target,ga),e=(0,B.getStatic)(new.target,"getNetwork")(e),t=(0,B.getStatic)(new.target,"getApiKey")(t);super((0,B.getStatic)(new.target,"getUrl")(e,t),e),"string"==typeof t?(0,B.defineReadOnly)(this,"apiKey",t):null!=t&&Object.keys(t).forEach((e=>{(0,B.defineReadOnly)(this,e,t[e])}))}}const ma=new(0,h.Logger)("providers/5.7.0");class ya extends Ws.WebSocketProvider{isCommunityResource(){return"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC"===this.apiKey}constructor(e,t){const r=new va(e,t);super(r.connection.url.replace(/^http/i,"ws").replace(".alchemyapi.",".ws.alchemyapi."),r.network),(0,B.defineReadOnly)(this,"apiKey",r.apiKey)}}class va extends ha.UrlJsonRpcProvider{static getWebSocketProvider(e,t){return new ya(e,t)}static getApiKey(e){return null==e?"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC":(e&&"string"!=typeof e&&ma.throwArgumentError("invalid apiKey","apiKey",e),e)}static getUrl(e,t){let r=null;switch(e.name){case"homestead":r="eth-mainnet.alchemyapi.io/v2/";break;case"ropsten":r="eth-ropsten.alchemyapi.io/v2/";break;case"rinkeby":r="eth-rinkeby.alchemyapi.io/v2/";break;case"goerli":r="eth-goerli.alchemyapi.io/v2/";break;case"kovan":r="eth-kovan.alchemyapi.io/v2/";break;case"matic":r="polygon-mainnet.g.alchemy.com/v2/";break;case"maticmum":r="polygon-mumbai.g.alchemy.com/v2/";break;case"arbitrum":r="arb-mainnet.g.alchemy.com/v2/";break;case"arbitrum-rinkeby":r="arb-rinkeby.g.alchemy.com/v2/";break;case"arbitrum-goerli":r="arb-goerli.g.alchemy.com/v2/";break;case"optimism":r="opt-mainnet.g.alchemy.com/v2/";break;case"optimism-kovan":r="opt-kovan.g.alchemy.com/v2/";break;case"optimism-goerli":r="opt-goerli.g.alchemy.com/v2/";break;default:ma.throwArgumentError("unsupported network","network",arguments[0])}return{allowGzip:!0,url:"https://"+r+t,throttleCallback:(e,r)=>("_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC"===t&&bs(),Promise.resolve(!0))}}isCommunityResource(){return"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC"===this.apiKey}}const wa=new(0,(h=o("3Qchy")).Logger)("providers/5.7.0"),ba="9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";function Aa(e){switch(e){case"homestead":return"rpc.ankr.com/eth/";case"ropsten":return"rpc.ankr.com/eth_ropsten/";case"rinkeby":return"rpc.ankr.com/eth_rinkeby/";case"goerli":return"rpc.ankr.com/eth_goerli/";case"matic":return"rpc.ankr.com/polygon/";case"arbitrum":return"rpc.ankr.com/arbitrum/"}return wa.throwArgumentError("unsupported network","name",e)}class Ea extends ha.UrlJsonRpcProvider{isCommunityResource(){return this.apiKey===ba}static getApiKey(e){return null==e?ba:e}static getUrl(e,t){null==t&&(t=ba);const r={allowGzip:!0,url:"https://"+Aa(e.name)+t,throttleCallback:(e,r)=>(t.apiKey===ba&&bs(),Promise.resolve(!0))};return null!=t.projectSecret&&(r.user="",r.password=t.projectSecret),r}}var xa={};e(xa,"CloudflareProvider",(function(){return ka}),(function(e){return ka=e}));h=o("3Qchy");var Sa=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};const Ca=new(0,h.Logger)("providers/5.7.0");class ka extends ha.UrlJsonRpcProvider{static getApiKey(e){return null!=e&&Ca.throwArgumentError("apiKey not supported for cloudflare","apiKey",e),null}static getUrl(e,t){let r=null;if("homestead"===e.name)r="https://cloudflare-eth.com/";else Ca.throwArgumentError("unsupported network","network",arguments[0]);return r}perform(e,t){const r=Object.create(null,{perform:{get:()=>super.perform}});return Sa(this,void 0,void 0,(function*(){if("getBlockNumber"===e){return(yield r.perform.call(this,"getBlock",{blockTag:"latest"})).number}return r.perform.call(this,e,t)}))}}var _a={};e(_a,"EtherscanProvider",(function(){return Ba}),(function(e){return Ba=e}));l=o("jNZoB"),h=o("3Qchy");var Pa=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};const Ra=new(0,h.Logger)("providers/5.7.0");function Oa(e){const t={};for(let r in e){if(null==e[r])continue;let n=e[r];"type"===r&&0===n||(n={type:!0,gasLimit:!0,gasPrice:!0,maxFeePerGs:!0,maxPriorityFeePerGas:!0,nonce:!0,value:!0}[r]?(0,l.hexValue)((0,l.hexlify)(n)):"accessList"===r?"["+ei(n).map((e=>`{address:"${e.address}",storageKeys:["${e.storageKeys.join('","')}"]}`)).join(",")+"]":(0,l.hexlify)(n),t[r]=n)}return t}function Ia(e){if(0==e.status&&("No records found"===e.message||"No transactions found"===e.message))return e.result;if(1!=e.status||"string"!=typeof e.message||!e.message.match(/^OK/)){const t=new Error("invalid response");throw t.result=JSON.stringify(e),(e.result||"").toLowerCase().indexOf("rate limit")>=0&&(t.throttleRetry=!0),t}return e.result}function Na(e){if(e&&0==e.status&&"NOTOK"==e.message&&(e.result||"").toLowerCase().indexOf("rate limit")>=0){const t=new Error("throttled response");throw t.result=JSON.stringify(e),t.throttleRetry=!0,t}if("2.0"!=e.jsonrpc){const t=new Error("invalid response");throw t.result=JSON.stringify(e),t}if(e.error){const t=new Error(e.error.message||"unknown error");throw e.error.code&&(t.code=e.error.code),e.error.data&&(t.data=e.error.data),t}return e.result}function Ta(e){if("pending"===e)throw new Error("pending not supported");return"latest"===e?e:parseInt(e.substring(2),16)}function Ma(e,t,r){if("call"===e&&t.code===h.Logger.errors.SERVER_ERROR){const e=t.error;if(e&&(e.message.match(/reverted/i)||e.message.match(/VM execution error/i))){let r=e.data;if(r&&(r="0x"+r.replace(/^.*0x/i,"")),(0,l.isHexString)(r))return r;Ra.throwError("missing revert data in call exception",h.Logger.errors.CALL_EXCEPTION,{error:t,data:"0x"})}}let n=t.message;throw t.code===h.Logger.errors.SERVER_ERROR&&(t.error&&"string"==typeof t.error.message?n=t.error.message:"string"==typeof t.body?n=t.body:"string"==typeof t.responseText&&(n=t.responseText)),n=(n||"").toLowerCase(),n.match(/insufficient funds/)&&Ra.throwError("insufficient funds for intrinsic transaction cost",h.Logger.errors.INSUFFICIENT_FUNDS,{error:t,method:e,transaction:r}),n.match(/same hash was already imported|transaction nonce is too low|nonce too low/)&&Ra.throwError("nonce has already been used",h.Logger.errors.NONCE_EXPIRED,{error:t,method:e,transaction:r}),n.match(/another transaction with same nonce/)&&Ra.throwError("replacement fee too low",h.Logger.errors.REPLACEMENT_UNDERPRICED,{error:t,method:e,transaction:r}),n.match(/execution failed due to an exception|execution reverted/)&&Ra.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",h.Logger.errors.UNPREDICTABLE_GAS_LIMIT,{error:t,method:e,transaction:r}),t}class Ba extends Vo.BaseProvider{getBaseUrl(){switch(this.network?this.network.name:"invalid"){case"homestead":return"https://api.etherscan.io";case"ropsten":return"https://api-ropsten.etherscan.io";case"rinkeby":return"https://api-rinkeby.etherscan.io";case"kovan":return"https://api-kovan.etherscan.io";case"goerli":return"https://api-goerli.etherscan.io";case"optimism":return"https://api-optimistic.etherscan.io";case"optimism-kovan":return"https://api-kovan-optimistic.etherscan.io"}return Ra.throwArgumentError("unsupported network","network",this.network.name)}getUrl(e,t){const r=Object.keys(t).reduce(((e,r)=>{const n=t[r];return null!=n&&(e+=`&${r}=${n}`),e}),""),n=this.apiKey?`&apikey=${this.apiKey}`:"";return`${this.baseUrl}/api?module=${e}${r}${n}`}getPostUrl(){return`${this.baseUrl}/api`}getPostData(e,t){return t.module=e,t.apikey=this.apiKey,t}fetch(e,t,r){return Pa(this,void 0,void 0,(function*(){const n=r?this.getPostUrl():this.getUrl(e,t),i=r?this.getPostData(e,t):null,o="proxy"===e?Na:Ia;this.emit("debug",{action:"request",request:n,provider:this});const s={url:n,throttleSlotInterval:1e3,throttleCallback:(e,t)=>(this.isCommunityResource()&&bs(),Promise.resolve(!0))};let a=null;i&&(s.headers={"content-type":"application/x-www-form-urlencoded; charset=UTF-8"},a=Object.keys(i).map((e=>`${e}=${i[e]}`)).join("&"));const c=yield(0,Zo.fetchJson)(s,a,o||Na);return this.emit("debug",{action:"response",request:n,response:(0,B.deepCopy)(c),provider:this}),c}))}detectNetwork(){return Pa(this,void 0,void 0,(function*(){return this.network}))}perform(e,t){const r=Object.create(null,{perform:{get:()=>super.perform}});return Pa(this,void 0,void 0,(function*(){switch(e){case"getBlockNumber":return this.fetch("proxy",{action:"eth_blockNumber"});case"getGasPrice":return this.fetch("proxy",{action:"eth_gasPrice"});case"getBalance":return this.fetch("account",{action:"balance",address:t.address,tag:t.blockTag});case"getTransactionCount":return this.fetch("proxy",{action:"eth_getTransactionCount",address:t.address,tag:t.blockTag});case"getCode":return this.fetch("proxy",{action:"eth_getCode",address:t.address,tag:t.blockTag});case"getStorageAt":return this.fetch("proxy",{action:"eth_getStorageAt",address:t.address,position:t.position,tag:t.blockTag});case"sendTransaction":return this.fetch("proxy",{action:"eth_sendRawTransaction",hex:t.signedTransaction},!0).catch((e=>Ma("sendTransaction",e,t.signedTransaction)));case"getBlock":if(t.blockTag)return this.fetch("proxy",{action:"eth_getBlockByNumber",tag:t.blockTag,boolean:t.includeTransactions?"true":"false"});throw new Error("getBlock by blockHash not implemented");case"getTransaction":return this.fetch("proxy",{action:"eth_getTransactionByHash",txhash:t.transactionHash});case"getTransactionReceipt":return this.fetch("proxy",{action:"eth_getTransactionReceipt",txhash:t.transactionHash});case"call":{if("latest"!==t.blockTag)throw new Error("EtherscanProvider does not support blockTag for call");const e=Oa(t.transaction);e.module="proxy",e.action="eth_call";try{return yield this.fetch("proxy",e,!0)}catch(e){return Ma("call",e,t.transaction)}}case"estimateGas":{const e=Oa(t.transaction);e.module="proxy",e.action="eth_estimateGas";try{return yield this.fetch("proxy",e,!0)}catch(e){return Ma("estimateGas",e,t.transaction)}}case"getLogs":{const e={action:"getLogs"};if(t.filter.fromBlock&&(e.fromBlock=Ta(t.filter.fromBlock)),t.filter.toBlock&&(e.toBlock=Ta(t.filter.toBlock)),t.filter.address&&(e.address=t.filter.address),t.filter.topics&&t.filter.topics.length>0&&(t.filter.topics.length>1&&Ra.throwError("unsupported topic count",h.Logger.errors.UNSUPPORTED_OPERATION,{topics:t.filter.topics}),1===t.filter.topics.length)){const r=t.filter.topics[0];"string"==typeof r&&66===r.length||Ra.throwError("unsupported topic format",h.Logger.errors.UNSUPPORTED_OPERATION,{topic0:r}),e.topic0=r}const r=yield this.fetch("logs",e);let n={};for(let e=0;e<r.length;e++){const t=r[e];if(null==t.blockHash){if(null==n[t.blockNumber]){const e=yield this.getBlock(t.blockNumber);e&&(n[t.blockNumber]=e.hash)}t.blockHash=n[t.blockNumber]}}return r}case"getEtherPrice":return"homestead"!==this.network.name?0:parseFloat((yield this.fetch("stats",{action:"ethprice"})).ethusd)}return r.perform.call(this,e,t)}))}getHistory(e,t,r){return Pa(this,void 0,void 0,(function*(){const n={action:"txlist",address:yield this.resolveName(e),startblock:null==t?0:t,endblock:null==r?99999999:r,sort:"asc"};return(yield this.fetch("account",n)).map((e=>{["contractAddress","to"].forEach((function(t){""==e[t]&&delete e[t]})),null==e.creates&&null!=e.contractAddress&&(e.creates=e.contractAddress);const t=this.formatter.transactionResponse(e);return e.timeStamp&&(t.timestamp=parseInt(e.timeStamp)),t}))}))}isCommunityResource(){return null==this.apiKey}constructor(e,t){super(e),(0,B.defineReadOnly)(this,"baseUrl",this.getBaseUrl()),(0,B.defineReadOnly)(this,"apiKey",t||null)}}var Fa={};e(Fa,"FallbackProvider",(function(){return Ya}),(function(e){return Ya=e}));l=o("jNZoB"),h=o("3Qchy");var La=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))};const ja=new(0,h.Logger)("providers/5.7.0");function Da(){return(new Date).getTime()}function Ua(e){let t=null;for(let r=0;r<e.length;r++){const n=e[r];if(null==n)return null;t?t.name===n.name&&t.chainId===n.chainId&&(t.ensAddress===n.ensAddress||null==t.ensAddress&&null==n.ensAddress)||ja.throwArgumentError("provider mismatch","networks",e):t=n}return t}function za(e,t){e=e.slice().sort();const r=Math.floor(e.length/2);if(e.length%2)return e[r];const n=e[r-1],i=e[r];return null!=t&&Math.abs(n-i)>t?null:(n+i)/2}function qa(e){if(null===e)return"null";if("number"==typeof e||"boolean"==typeof e)return JSON.stringify(e);if("string"==typeof e)return e;if(y.isBigNumber(e))return e.toString();if(Array.isArray(e))return JSON.stringify(e.map((e=>qa(e))));if("object"==typeof e){const t=Object.keys(e);return t.sort(),"{"+t.map((t=>{let r=e[t];return r="function"==typeof r?"[function]":qa(r),JSON.stringify(t)+":"+r})).join(",")+"}"}throw new Error("unknown value type: "+typeof e)}let Ka=1;function Ga(e){let t=null,r=null,n=new Promise((n=>{t=function(){r&&(clearTimeout(r),r=null),n()},r=setTimeout(t,e)}));return{cancel:t,getPromise:function(){return n},wait:e=>(n=n.then(e),n)}}const Wa=[h.Logger.errors.CALL_EXCEPTION,h.Logger.errors.INSUFFICIENT_FUNDS,h.Logger.errors.NONCE_EXPIRED,h.Logger.errors.REPLACEMENT_UNDERPRICED,h.Logger.errors.UNPREDICTABLE_GAS_LIMIT],Ha=["address","args","errorArgs","errorSignature","method","transaction"];function Ja(e,t){const r={weight:e.weight};return Object.defineProperty(r,"provider",{get:()=>e.provider}),e.start&&(r.start=e.start),t&&(r.duration=t-e.start),e.done&&(e.error?r.error=e.error:r.result=e.result||null),r}function Va(e,t,r){let n=qa;switch(t){case"getBlockNumber":return function(t){const r=t.map((e=>e.result));let n=za(t.map((e=>e.result)),2);if(null!=n)return n=Math.ceil(n),r.indexOf(n+1)>=0&&n++,n>=e._highestBlockNumber&&(e._highestBlockNumber=n),e._highestBlockNumber};case"getGasPrice":return function(e){const t=e.map((e=>e.result));return t.sort(),t[Math.floor(t.length/2)]};case"getEtherPrice":return function(e){return za(e.map((e=>e.result)))};case"getBalance":case"getTransactionCount":case"getCode":case"getStorageAt":case"call":case"estimateGas":case"getLogs":break;case"getTransaction":case"getTransactionReceipt":n=function(e){return null==e?null:((e=(0,B.shallowCopy)(e)).confirmations=-1,qa(e))};break;case"getBlock":n=r.includeTransactions?function(e){return null==e?null:((e=(0,B.shallowCopy)(e)).transactions=e.transactions.map((e=>((e=(0,B.shallowCopy)(e)).confirmations=-1,e))),qa(e))}:function(e){return null==e?null:qa(e)};break;default:throw new Error("unknown method: "+t)}return function(e,t){return function(r){const n={};r.forEach((t=>{const r=e(t.result);n[r]||(n[r]={count:0,result:t.result}),n[r].count++}));const i=Object.keys(n);for(let e=0;e<i.length;e++){const r=n[i[e]];if(r.count>=t)return r.result}}}(n,e.quorum)}function Qa(e,t){return La(this,void 0,void 0,(function*(){const r=e.provider;return null!=r.blockNumber&&r.blockNumber>=t||-1===t?r:(0,Zo.poll)((()=>new Promise(((n,i)=>{setTimeout((function(){return r.blockNumber>=t?n(r):e.cancelled?n(null):n(void 0)}),0)}))),{oncePoll:r})}))}function Za(e,t,r,n){return La(this,void 0,void 0,(function*(){let i=e.provider;switch(r){case"getBlockNumber":case"getGasPrice":return i[r]();case"getEtherPrice":if(i.getEtherPrice)return i.getEtherPrice();break;case"getBalance":case"getTransactionCount":case"getCode":return n.blockTag&&(0,l.isHexString)(n.blockTag)&&(i=yield Qa(e,t)),i[r](n.address,n.blockTag||"latest");case"getStorageAt":return n.blockTag&&(0,l.isHexString)(n.blockTag)&&(i=yield Qa(e,t)),i.getStorageAt(n.address,n.position,n.blockTag||"latest");case"getBlock":return n.blockTag&&(0,l.isHexString)(n.blockTag)&&(i=yield Qa(e,t)),i[n.includeTransactions?"getBlockWithTransactions":"getBlock"](n.blockTag||n.blockHash);case"call":case"estimateGas":return n.blockTag&&(0,l.isHexString)(n.blockTag)&&(i=yield Qa(e,t)),"call"===r&&n.blockTag?i[r](n.transaction,n.blockTag):i[r](n.transaction);case"getTransaction":case"getTransactionReceipt":return i[r](n.transactionHash);case"getLogs":{let r=n.filter;return(r.fromBlock&&(0,l.isHexString)(r.fromBlock)||r.toBlock&&(0,l.isHexString)(r.toBlock))&&(i=yield Qa(e,t)),i.getLogs(r)}}return ja.throwError("unknown method error",h.Logger.errors.UNKNOWN_ERROR,{method:r,params:n})}))}class Ya extends Vo.BaseProvider{detectNetwork(){return La(this,void 0,void 0,(function*(){return Ua(yield Promise.all(this.providerConfigs.map((e=>e.provider.getNetwork()))))}))}perform(e,t){return La(this,void 0,void 0,(function*(){if("sendTransaction"===e){const e=yield Promise.all(this.providerConfigs.map((e=>e.provider.sendTransaction(t.signedTransaction).then((e=>e.hash),(e=>e)))));for(let t=0;t<e.length;t++){const r=e[t];if("string"==typeof r)return r}throw e[0]}-1===this._highestBlockNumber&&"getBlockNumber"!==e&&(yield this.getBlockNumber());const r=Va(this,e,t),n=oo(this.providerConfigs.map(B.shallowCopy));n.sort(((e,t)=>e.priority-t.priority));const i=this._highestBlockNumber;let o=0,s=!0;for(;;){const a=Da();let c=n.filter((e=>e.runner&&a-e.start<e.stallTimeout)).reduce(((e,t)=>e+t.weight),0);for(;c<this.quorum&&o<n.length;){const r=n[o++],s=Ka++;r.start=Da(),r.staller=Ga(r.stallTimeout),r.staller.wait((()=>{r.staller=null})),r.runner=Za(r,i,e,t).then((n=>{r.done=!0,r.result=n,this.listenerCount("debug")&&this.emit("debug",{action:"request",rid:s,backend:Ja(r,Da()),request:{method:e,params:(0,B.deepCopy)(t)},provider:this})}),(n=>{r.done=!0,r.error=n,this.listenerCount("debug")&&this.emit("debug",{action:"request",rid:s,backend:Ja(r,Da()),request:{method:e,params:(0,B.deepCopy)(t)},provider:this})})),this.listenerCount("debug")&&this.emit("debug",{action:"request",rid:s,backend:Ja(r,null),request:{method:e,params:(0,B.deepCopy)(t)},provider:this}),c+=r.weight}const u=[];n.forEach((e=>{!e.done&&e.runner&&(u.push(e.runner),e.staller&&u.push(e.staller.getPromise()))})),u.length&&(yield Promise.race(u));const l=n.filter((e=>e.done&&null==e.error));if(l.length>=this.quorum){const e=r(l);if(void 0!==e)return n.forEach((e=>{e.staller&&e.staller.cancel(),e.cancelled=!0})),e;s||(yield Ga(100).getPromise()),s=!1}const h=n.reduce(((e,t)=>{if(!t.done||null==t.error)return e;const r=t.error.code;return Wa.indexOf(r)>=0&&(e[r]||(e[r]={error:t.error,weight:0}),e[r].weight+=t.weight),e}),{});if(Object.keys(h).forEach((e=>{const t=h[e];if(t.weight<this.quorum)return;n.forEach((e=>{e.staller&&e.staller.cancel(),e.cancelled=!0}));const r=t.error,i={};Ha.forEach((e=>{null!=r[e]&&(i[e]=r[e])})),ja.throwError(r.reason||r.message,e,i)})),0===n.filter((e=>!e.done)).length)break}return n.forEach((e=>{e.staller&&e.staller.cancel(),e.cancelled=!0})),ja.throwError("failed to meet quorum",h.Logger.errors.SERVER_ERROR,{method:e,params:t,results:n.map((e=>Ja(e))),provider:this})}))}constructor(e,t){0===e.length&&ja.throwArgumentError("missing providers","providers",e);const r=e.map(((e,t)=>{if(Ur.Provider.isProvider(e)){const t=vs(e)?2e3:750,r=1;return Object.freeze({provider:e,weight:1,stallTimeout:t,priority:r})}const r=(0,B.shallowCopy)(e);null==r.priority&&(r.priority=1),null==r.stallTimeout&&(r.stallTimeout=vs(e)?2e3:750),null==r.weight&&(r.weight=1);const n=r.weight;return(n%1||n>512||n<1)&&ja.throwArgumentError("invalid weight; must be integer in [1, 512]",`providers[${t}].weight`,n),Object.freeze(r)})),n=r.reduce(((e,t)=>e+t.weight),0);null==t?t=n/2:t>n&&ja.throwArgumentError("quorum will always fail; larger than total weight","quorum",t);let i=Ua(r.map((e=>e.provider.network)));null==i&&(i=new Promise(((e,t)=>{setTimeout((()=>{this.detectNetwork().then(e,t)}),0)}))),super(i),(0,B.defineReadOnly)(this,"providerConfigs",Object.freeze(r)),(0,B.defineReadOnly)(this,"quorum",t),this._highestBlockNumber=-1}}const Xa=null;const $a=new(0,(h=o("3Qchy")).Logger)("providers/5.7.0");class ec extends Ws.WebSocketProvider{isCommunityResource(){return"84842078b09946638c03157f83405213"===this.projectId}constructor(e,t){const r=new tc(e,t),n=r.connection;n.password&&$a.throwError("INFURA WebSocket project secrets unsupported",h.Logger.errors.UNSUPPORTED_OPERATION,{operation:"InfuraProvider.getWebSocketProvider()"});super(n.url.replace(/^http/i,"ws").replace("/v3/","/ws/v3/"),e),(0,B.defineReadOnly)(this,"apiKey",r.projectId),(0,B.defineReadOnly)(this,"projectId",r.projectId),(0,B.defineReadOnly)(this,"projectSecret",r.projectSecret)}}class tc extends ha.UrlJsonRpcProvider{static getWebSocketProvider(e,t){return new ec(e,t)}static getApiKey(e){const t={apiKey:"84842078b09946638c03157f83405213",projectId:"84842078b09946638c03157f83405213",projectSecret:null};return null==e||("string"==typeof e?t.projectId=e:null!=e.projectSecret?($a.assertArgument("string"==typeof e.projectId,"projectSecret requires a projectId","projectId",e.projectId),$a.assertArgument("string"==typeof e.projectSecret,"invalid projectSecret","projectSecret","[REDACTED]"),t.projectId=e.projectId,t.projectSecret=e.projectSecret):e.projectId&&(t.projectId=e.projectId),t.apiKey=t.projectId),t}static getUrl(e,t){let r=null;switch(e?e.name:"unknown"){case"homestead":r="mainnet.infura.io";break;case"ropsten":r="ropsten.infura.io";break;case"rinkeby":r="rinkeby.infura.io";break;case"kovan":r="kovan.infura.io";break;case"goerli":r="goerli.infura.io";break;case"matic":r="polygon-mainnet.infura.io";break;case"maticmum":r="polygon-mumbai.infura.io";break;case"optimism":r="optimism-mainnet.infura.io";break;case"optimism-kovan":r="optimism-kovan.infura.io";break;case"arbitrum":r="arbitrum-mainnet.infura.io";break;case"arbitrum-rinkeby":r="arbitrum-rinkeby.infura.io";break;default:$a.throwError("unsupported network",h.Logger.errors.INVALID_ARGUMENT,{argument:"network",value:e})}const n={allowGzip:!0,url:"https://"+r+"/v3/"+t.projectId,throttleCallback:(e,r)=>("84842078b09946638c03157f83405213"===t.projectId&&bs(),Promise.resolve(!0))};return null!=t.projectSecret&&(n.user="",n.password=t.projectSecret),n}isCommunityResource(){return"84842078b09946638c03157f83405213"===this.projectId}}class rc extends Hs.JsonRpcProvider{send(e,t){const r={method:e,params:t,id:this._nextId++,jsonrpc:"2.0"};null==this._pendingBatch&&(this._pendingBatch=[]);const n={request:r,resolve:null,reject:null},i=new Promise(((e,t)=>{n.resolve=e,n.reject=t}));return this._pendingBatch.push(n),this._pendingBatchAggregator||(this._pendingBatchAggregator=setTimeout((()=>{const e=this._pendingBatch;this._pendingBatch=null,this._pendingBatchAggregator=null;const t=e.map((e=>e.request));return this.emit("debug",{action:"requestBatch",request:(0,B.deepCopy)(t),provider:this}),(0,Zo.fetchJson)(this.connection,JSON.stringify(t)).then((r=>{this.emit("debug",{action:"response",request:t,response:r,provider:this}),e.forEach(((e,t)=>{const n=r[t];if(n.error){const t=new Error(n.error.message);t.code=n.error.code,t.data=n.error.data,e.reject(t)}else e.resolve(n.result)}))}),(r=>{this.emit("debug",{action:"response",error:r,request:t,provider:this}),e.forEach((e=>{e.reject(r)}))}))}),10)),i}}const nc=new(0,(h=o("3Qchy")).Logger)("providers/5.7.0");class ic extends ha.UrlJsonRpcProvider{static getApiKey(e){return e&&"string"!=typeof e&&nc.throwArgumentError("invalid apiKey","apiKey",e),e||"ETHERS_JS_SHARED"}static getUrl(e,t){nc.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");let r=null;switch(e.name){case"homestead":r="https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";break;case"ropsten":r="https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";break;case"rinkeby":r="https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";break;case"goerli":r="https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";break;case"kovan":r="https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";break;default:nc.throwArgumentError("unsupported network","network",arguments[0])}return r+"?apiKey="+t}}const oc=new(0,(h=o("3Qchy")).Logger)("providers/5.7.0");class sc extends ha.UrlJsonRpcProvider{static getApiKey(e){const t={applicationId:null,loadBalancer:!0,applicationSecretKey:null};return null==e?t.applicationId="62e1ad51b37b8e00394bda3b":"string"==typeof e?t.applicationId=e:null!=e.applicationSecretKey?(t.applicationId=e.applicationId,t.applicationSecretKey=e.applicationSecretKey):e.applicationId?t.applicationId=e.applicationId:oc.throwArgumentError("unsupported PocketProvider apiKey","apiKey",e),t}static getUrl(e,t){let r=null;switch(e?e.name:"unknown"){case"goerli":r="eth-goerli.gateway.pokt.network";break;case"homestead":r="eth-mainnet.gateway.pokt.network";break;case"kovan":r="poa-kovan.gateway.pokt.network";break;case"matic":r="poly-mainnet.gateway.pokt.network";break;case"maticmum":r="polygon-mumbai-rpc.gateway.pokt.network";break;case"rinkeby":r="eth-rinkeby.gateway.pokt.network";break;case"ropsten":r="eth-ropsten.gateway.pokt.network";break;default:oc.throwError("unsupported network",h.Logger.errors.INVALID_ARGUMENT,{argument:"network",value:e})}const n={headers:{},url:`https://${r}/v1/lb/${t.applicationId}`};return null!=t.applicationSecretKey&&(n.user="",n.password=t.applicationSecretKey),n}isCommunityResource(){return"62e1ad51b37b8e00394bda3b"===this.applicationId}}const ac=new(0,(h=o("3Qchy")).Logger)("providers/5.7.0");let cc=1;function uc(e,t){const r="Web3LegacyFetcher";return function(e,n){const i={method:e,params:n,id:cc++,jsonrpc:"2.0"};return new Promise(((e,n)=>{this.emit("debug",{action:"request",fetcher:r,request:(0,B.deepCopy)(i),provider:this}),t(i,((t,o)=>{if(t)return this.emit("debug",{action:"response",fetcher:r,error:t,request:i,provider:this}),n(t);if(this.emit("debug",{action:"response",fetcher:r,request:i,response:o,provider:this}),o.error){const e=new Error(o.error.message);return e.code=o.error.code,e.data=o.error.data,n(e)}e(o.result)}))}))}}class lc extends Hs.JsonRpcProvider{send(e,t){return this.jsonRpcFetchFunc(e,t)}constructor(e,t){null==e&&ac.throwArgumentError("missing provider","provider",e);let r=null,n=null,i=null;"function"==typeof e?(r="unknown:",n=e):(r=e.host||e.path||"",!r&&e.isMetaMask&&(r="metamask"),i=e,e.request?(""===r&&(r="eip-1193:"),n=function(e){return function(t,r){null==r&&(r=[]);const n={method:t,params:r};return this.emit("debug",{action:"request",fetcher:"Eip1193Fetcher",request:(0,B.deepCopy)(n),provider:this}),e.request(n).then((e=>(this.emit("debug",{action:"response",fetcher:"Eip1193Fetcher",request:n,response:e,provider:this}),e)),(e=>{throw this.emit("debug",{action:"response",fetcher:"Eip1193Fetcher",request:n,error:e,provider:this}),e}))}}(e)):e.sendAsync?n=uc(0,e.sendAsync.bind(e)):e.send?n=uc(0,e.send.bind(e)):ac.throwArgumentError("unsupported provider","provider",e),r||(r="unknown:")),super(r,t),(0,B.defineReadOnly)(this,"jsonRpcFetchFunc",n),(0,B.defineReadOnly)(this,"provider",i)}}const hc=new(0,(h=o("3Qchy")).Logger)("providers/5.7.0");function fc(e,t){if(null==e&&(e="homestead"),"string"==typeof e){const t=e.match(/^(ws|http)s?:/i);if(t)switch(t[1].toLowerCase()){case"http":case"https":return new(0,Hs.JsonRpcProvider)(e);case"ws":case"wss":return new(0,Ws.WebSocketProvider)(e);default:hc.throwArgumentError("unsupported URL scheme","network",e)}}const r=Jo(e);return r&&r._defaultProvider||hc.throwError("unsupported getDefaultProvider network",h.Logger.errors.NETWORK_ERROR,{operation:"getDefaultProvider",network:e}),r._defaultProvider({FallbackProvider:Fa.FallbackProvider,AlchemyProvider:va,AnkrProvider:Ea,CloudflareProvider:xa.CloudflareProvider,EtherscanProvider:_a.EtherscanProvider,InfuraProvider:tc,JsonRpcProvider:Hs.JsonRpcProvider,NodesmithProvider:ic,PocketProvider:sc,Web3Provider:lc,IpcProvider:Xa},t)}var dc={};e(dc,"AbiCoder",(function(){return Dt})),e(dc,"defaultAbiCoder",(function(){return Ut})),e(dc,"Fragment",(function(){return ie})),e(dc,"ConstructorFragment",(function(){return ue})),e(dc,"ErrorFragment",(function(){return fe})),e(dc,"EventFragment",(function(){return oe})),e(dc,"FunctionFragment",(function(){return le})),e(dc,"ParamType",(function(){return re})),e(dc,"FormatTypes",(function(){return ee})),e(dc,"checkResultErrors",(function(){return ve})),e(dc,"Logger",(function(){return o("3Qchy").Logger})),e(dc,"RLP",(function(){return o("3hJ1y")})),e(dc,"_fetchData",(function(){return Zo._fetchData})),e(dc,"fetchJson",(function(){return Zo.fetchJson})),e(dc,"poll",(function(){return Zo.poll})),e(dc,"checkProperties",(function(){return B.checkProperties})),e(dc,"deepCopy",(function(){return B.deepCopy})),e(dc,"defineReadOnly",(function(){return B.defineReadOnly})),e(dc,"getStatic",(function(){return B.getStatic})),e(dc,"resolveProperties",(function(){return B.resolveProperties})),e(dc,"shallowCopy",(function(){return B.shallowCopy})),e(dc,"arrayify",(function(){return o("jNZoB").arrayify})),e(dc,"concat",(function(){return o("jNZoB").concat})),e(dc,"stripZeros",(function(){return o("jNZoB").stripZeros})),e(dc,"zeroPad",(function(){return o("jNZoB").zeroPad})),e(dc,"isBytes",(function(){return o("jNZoB").isBytes})),e(dc,"isBytesLike",(function(){return o("jNZoB").isBytesLike})),e(dc,"defaultPath",(function(){return"m/44'/60'/0'/0/0"})),e(dc,"HDNode",(function(){return Qi})),e(dc,"SigningKey",(function(){return Un})),e(dc,"Interface",(function(){return Dr})),e(dc,"LogDescription",(function(){return Tr})),e(dc,"TransactionDescription",(function(){return Mr})),e(dc,"base58",(function(){return ki})),e(dc,"base64",(function(){return o("7WFd0")})),e(dc,"hexlify",(function(){return o("jNZoB").hexlify})),e(dc,"isHexString",(function(){return o("jNZoB").isHexString})),e(dc,"hexConcat",(function(){return o("jNZoB").hexConcat})),e(dc,"hexStripZeros",(function(){return o("jNZoB").hexStripZeros})),e(dc,"hexValue",(function(){return o("jNZoB").hexValue})),e(dc,"hexZeroPad",(function(){return o("jNZoB").hexZeroPad})),e(dc,"hexDataLength",(function(){return o("jNZoB").hexDataLength})),e(dc,"hexDataSlice",(function(){return o("jNZoB").hexDataSlice})),e(dc,"nameprep",(function(){return Tt})),e(dc,"_toEscapedUtf8String",(function(){return yt})),e(dc,"toUtf8Bytes",(function(){return gt})),e(dc,"toUtf8CodePoints",(function(){return bt})),e(dc,"toUtf8String",(function(){return wt})),e(dc,"Utf8ErrorFuncs",(function(){return dt})),e(dc,"formatBytes32String",(function(){return At})),e(dc,"parseBytes32String",(function(){return Et})),e(dc,"dnsEncode",(function(){return dr})),e(dc,"hashMessage",(function(){return pr})),e(dc,"namehash",(function(){return fr})),e(dc,"isValidName",(function(){return hr})),e(dc,"id",(function(){return zt})),e(dc,"_TypedDataEncoder",(function(){return gr.TypedDataEncoder})),e(dc,"getAddress",(function(){return Ne})),e(dc,"getIcapAddress",(function(){return Me})),e(dc,"getContractAddress",(function(){return Be})),e(dc,"getCreate2Address",(function(){return Fe})),e(dc,"isAddress",(function(){return Te})),e(dc,"formatEther",(function(){return _c})),e(dc,"parseEther",(function(){return Pc})),e(dc,"formatUnits",(function(){return Cc})),e(dc,"parseUnits",(function(){return kc})),e(dc,"commify",(function(){return Sc})),e(dc,"computeHmac",(function(){return Ti})),e(dc,"keccak256",(function(){return Se})),e(dc,"ripemd160",(function(){return Oi})),e(dc,"sha256",(function(){return Ii})),e(dc,"sha512",(function(){return Ni})),e(dc,"randomBytes",(function(){return io})),e(dc,"shuffled",(function(){return oo})),e(dc,"solidityPack",(function(){return wc})),e(dc,"solidityKeccak256",(function(){return bc})),e(dc,"soliditySha256",(function(){return Ac})),e(dc,"splitSignature",(function(){return o("jNZoB").splitSignature})),e(dc,"joinSignature",(function(){return o("jNZoB").joinSignature})),e(dc,"accessListify",(function(){return ei})),e(dc,"parseTransaction",(function(){return si})),e(dc,"serializeTransaction",(function(){return ii})),e(dc,"TransactionTypes",(function(){return Gn})),e(dc,"getJsonWalletAddress",(function(){return vo})),e(dc,"computeAddress",(function(){return Zn})),e(dc,"recoverAddress",(function(){return Yn})),e(dc,"computePublicKey",(function(){return qn})),e(dc,"recoverPublicKey",(function(){return zn})),e(dc,"verifyMessage",(function(){return Si.verifyMessage})),e(dc,"verifyTypedData",(function(){return Si.verifyTypedData})),e(dc,"getAccountPath",(function(){return eo})),e(dc,"mnemonicToEntropy",(function(){return Yi})),e(dc,"entropyToMnemonic",(function(){return Xi})),e(dc,"isValidMnemonic",(function(){return $i})),e(dc,"mnemonicToSeed",(function(){return Zi})),e(dc,"SupportedAlgorithm",(function(){return _i})),e(dc,"UnicodeNormalizationForm",(function(){return ct})),e(dc,"Utf8ErrorReason",(function(){return lt})),e(dc,"Indexed",(function(){return Fr}));o("7WFd0"),l=o("jNZoB"),h=o("3Qchy"),l=o("jNZoB"),h=o("3Qchy");const pc=new RegExp("^bytes([0-9]+)$"),gc=new RegExp("^(u?int)([0-9]*)$"),mc=new RegExp("^(.*)\\[([0-9]*)\\]$"),yc=new(0,h.Logger)("solidity/5.7.0");function vc(e,t,r){switch(e){case"address":return r?(0,l.zeroPad)(t,32):(0,l.arrayify)(t);case"string":return gt(t);case"bytes":return(0,l.arrayify)(t);case"bool":return t=t?"0x01":"0x00",r?(0,l.zeroPad)(t,32):(0,l.arrayify)(t)}let n=e.match(gc);if(n){let i=parseInt(n[2]||"256");return(n[2]&&String(i)!==n[2]||i%8!=0||0===i||i>256)&&yc.throwArgumentError("invalid number type","type",e),r&&(i=256),t=y.from(t).toTwos(i),(0,l.zeroPad)(t,i/8)}if(n=e.match(pc),n){const i=parseInt(n[1]);return(String(i)!==n[1]||0===i||i>32)&&yc.throwArgumentError("invalid bytes type","type",e),(0,l.arrayify)(t).byteLength!==i&&yc.throwArgumentError(`invalid value for ${e}`,"value",t),r?(0,l.arrayify)((t+"0000000000000000000000000000000000000000000000000000000000000000").substring(0,66)):t}if(n=e.match(mc),n&&Array.isArray(t)){const r=n[1];parseInt(n[2]||String(t.length))!=t.length&&yc.throwArgumentError(`invalid array length for ${e}`,"value",t);const i=[];return t.forEach((function(e){i.push(vc(r,e,!0))})),(0,l.concat)(i)}return yc.throwArgumentError("invalid type","type",e)}function wc(e,t){e.length!=t.length&&yc.throwArgumentError("wrong number of values; expected ${ types.length }","values",t);const r=[];return e.forEach((function(e,n){r.push(vc(e,t[n]))})),(0,l.hexlify)((0,l.concat)(r))}function bc(e,t){return Se(wc(e,t))}function Ac(e,t){return Ii(wc(e,t))}Ce=o("3hJ1y");const Ec=new(0,(h=o("3Qchy")).Logger)("units/5.7.0"),xc=["wei","kwei","mwei","gwei","szabo","finney","ether"];function Sc(e){const t=String(e).split(".");(t.length>2||!t[0].match(/^-?[0-9]*$/)||t[1]&&!t[1].match(/^[0-9]*$/)||"."===e||"-."===e)&&Ec.throwArgumentError("invalid value","value",e);let r=t[0],n="";for("-"===r.substring(0,1)&&(n="-",r=r.substring(1));"0"===r.substring(0,1);)r=r.substring(1);""===r&&(r="0");let i="";for(2===t.length&&(i="."+(t[1]||"0"));i.length>2&&"0"===i[i.length-1];)i=i.substring(0,i.length-1);const o=[];for(;r.length;){if(r.length<=3){o.unshift(r);break}{const e=r.length-3;o.unshift(r.substring(e)),r=r.substring(0,e)}}return n+o.join(",")+i}function Cc(e,t){if("string"==typeof t){const e=xc.indexOf(t);-1!==e&&(t=3*e)}return R(e,null!=t?t:18)}function kc(e,t){if("string"!=typeof e&&Ec.throwArgumentError("value must be a string","value",e),"string"==typeof t){const e=xc.indexOf(t);-1!==e&&(t=3*e)}return O(e,null!=t?t:18)}function _c(e){return Cc(e,18)}function Pc(e){return kc(e,18)}h=o("3Qchy");const Rc="ethers/5.7.0",Oc=new(0,h.Logger)(Rc);h=o("3Qchy"),h=o("3Qchy");try{const e=window;null==e._ethers&&(e._ethers=a)}catch(e){}s=o("8WZ8I"),s=o("8WZ8I");async function Ic(e){return(await r(s).storage.local.get(e))?.[e]}async function Nc(e,t){await r(s).storage.local.set({[e]:t})}async function Tc(e){await r(s).storage.local.remove(e)}async function Mc(){return await Ic("STORAGE_VERSION")??"no-version"}const Bc={"no-version":async()=>{await Nc("STORAGE_VERSION","no-version")}};async function Fc(){const e=Boolean(await Ic("currentUser")),t=await Mc();if(e)return.1!==t&&t in Bc?Bc[t]():"ok";Nc("STORAGE_VERSION",.1)}let Lc=(e=21)=>crypto.getRandomValues(new Uint8Array(e)).reduce(((e,t)=>e+=(t&=63)<36?t.toString(36):t<62?(t-26).toString(36).toUpperCase():t>62?"-":"_"),"");var jc,Dc={},Uc="object"==typeof Reflect?Reflect:null,zc=Uc&&"function"==typeof Uc.apply?Uc.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};jc=Uc&&"function"==typeof Uc.ownKeys?Uc.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var qc=Number.isNaN||function(e){return e!=e};function Kc(){Kc.init.call(this)}(Dc=Kc).once=function(e,t){return new Promise((function(r,n){function i(r){e.removeListener(t,o),n(r)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),r([].slice.call(arguments))}$c(e,t,o,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&$c(e,"error",t,r)}(e,i,{once:!0})}))},Kc.EventEmitter=Kc,Kc.prototype._events=void 0,Kc.prototype._eventsCount=0,Kc.prototype._maxListeners=void 0;var Gc=10;function Wc(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function Hc(e){return void 0===e._maxListeners?Kc.defaultMaxListeners:e._maxListeners}function Jc(e,t,r,n){var i,o,s,a;if(Wc(r),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),s=o[t]),void 0===s)s=o[t]=r,++e._eventsCount;else if("function"==typeof s?s=o[t]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),(i=Hc(e))>0&&s.length>i&&!s.warned){s.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=s.length,a=c,console&&console.warn&&console.warn(a)}return e}function Vc(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function Qc(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=Vc.bind(n);return i.listener=r,n.wrapFn=i,i}function Zc(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):Xc(i,i.length)}function Yc(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function Xc(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function $c(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){n.once&&e.removeEventListener(t,i),r(o)}))}}Object.defineProperty(Kc,"defaultMaxListeners",{enumerable:!0,get:function(){return Gc},set:function(e){if("number"!=typeof e||e<0||qc(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");Gc=e}}),Kc.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},Kc.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||qc(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},Kc.prototype.getMaxListeners=function(){return Hc(this)},Kc.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var s=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw s.context=o,s}var a=i[e];if(void 0===a)return!1;if("function"==typeof a)zc(a,this,t);else{var c=a.length,u=Xc(a,c);for(r=0;r<c;++r)zc(u[r],this,t)}return!0},Kc.prototype.addListener=function(e,t){return Jc(this,e,t,!1)},Kc.prototype.on=Kc.prototype.addListener,Kc.prototype.prependListener=function(e,t){return Jc(this,e,t,!0)},Kc.prototype.once=function(e,t){return Wc(t),this.on(e,Qc(this,e,t)),this},Kc.prototype.prependOnceListener=function(e,t){return Wc(t),this.prependListener(e,Qc(this,e,t)),this},Kc.prototype.removeListener=function(e,t){var r,n,i,o,s;if(Wc(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){s=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,s||t)}return this},Kc.prototype.off=Kc.prototype.removeListener,Kc.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},Kc.prototype.listeners=function(e){return Zc(this,e,!0)},Kc.prototype.rawListeners=function(e){return Zc(this,e,!1)},Kc.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):Yc.call(e,t)},Kc.prototype.listenerCount=Yc,Kc.prototype.eventNames=function(){return this._eventsCount>0?jc(this._events):[]};var eu,tu=(Py=o("b8Dez")).Buffer;function ru(e,r){const n=JSON.stringify(r),i=tu.from(n,"utf-8"),o=t.crypto.getRandomValues(new Uint8Array(16));return t.crypto.subtle.encrypt({name:"AES-GCM",iv:o},e,i).then((function(e){const t=new Uint8Array(e),r=tu.from(o).toString("base64");return{data:tu.from(t).toString("base64"),iv:r}}))}function nu(e,t){const r=tu.from(t.data,"base64"),n=tu.from(t.iv,"base64");return crypto.subtle.decrypt({name:"AES-GCM",iv:n},e,r).then((function(e){const t=new Uint8Array(e),r=tu.from(t).toString("utf-8");return JSON.parse(r)})).catch((function(e){throw new Error("Incorrect password")}))}function iu(e,r){const n=tu.from(e,"utf-8"),i=tu.from(r,"base64");return t.crypto.subtle.importKey("raw",n,{name:"PBKDF2"},!1,["deriveBits","deriveKey"]).then((function(e){return t.crypto.subtle.deriveKey({name:"PBKDF2",salt:i,iterations:1e4,hash:"SHA-256"},e,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"])}))}function ou(e){let t=e.toString(16);for(;t.length<2;)t=`0${t}`;return t}function su(e=32){const r=new Uint8Array(e);t.crypto.getRandomValues(r);return btoa(String.fromCharCode.apply(null,r))}async function au(e){const t=(new TextEncoder).encode(e),r=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(r)).map((e=>e.toString(16).padStart(2,"0"))).join("")}eu={encrypt:function(e,t){const r=su();return iu(e,r).then((function(e){return ru(e,t)})).then((function(e){return e.salt=r,JSON.stringify(e)}))},decrypt:function(e,t){const r=JSON.parse(t),{salt:n}=r;return iu(e,n).then((function(e){return nu(e,r)}))},keyFromPassword:iu,encryptWithKey:ru,decryptWithKey:nu,serializeBufferForStorage:function(e){let t="0x";const r=e.length||e.byteLength;for(let n=0;n<r;n++)t+=ou(e[n]);return t},serializeBufferFromStorage:function(e){const t="0x"===e.slice(0,2)?e.slice(2):e,r=new Uint8Array(t.length/2);for(let e=0;e<t.length;e+=2){const n=t.substr(e,2);r[e/2]=parseInt(n,16)}return r},generateSalt:su};var cu={};Object.defineProperty(cu,"__esModule",{value:!0}),cu.default=function(e,t,r){t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r;return e};let uu=()=>({events:{},emit(e,...t){let r=this.events[e]||[];for(let e=0,n=r.length;e<n;e++)r[e](...t)},on(e,t){return this.events[e]?.push(t)||(this.events[e]=[t]),()=>{this.events[e]=this.events[e]?.filter((e=>t!==e))}}}),lu=()=>({events:{},emit(e,...t){(this.events[e]||[]).forEach((e=>e(...t)))},on(e,t){return(this.events[e]=this.events[e]||[]).push(t),()=>this.events[e]=(this.events[e]||[]).filter((e=>e!==t))}});var hu=function(){function e(e){this.state=void 0,this.emitter=void 0,this.state=e,this.emitter=lu()}var t=e.prototype;return t.on=function(e,t){return this.emitter.on(e,t)},t.getState=function(){return this.state},t.setState=function(e){var t;if((t="function"==typeof e?e(this.state):e)!==this.state){var r=this.state;this.state=t,this.emitter.emit("change",this.state,r)}},t.setStateSilent=function(e){this.state=e},e}();function fu(e){return null!=e}var du={};Object.defineProperty(du,"__esModule",{value:!0});var pu=o("h8CUm");pu.__exportStar(o("fG8HP"),du),pu.__exportStar(o("io3EQ"),du),pu.__exportStar(o("j0xaI"),du),pu.__exportStar(o("iK5ls"),du),pu.__exportStar(o("jYFOA"),du),pu.__exportStar(o("atZCx"),du),pu.__exportStar(o("9Ev6W"),du);class gu extends Error{constructor(e){super(e),Object.defineProperty(this,"message",{value:e,enumerable:!0})}}class mu extends gu{constructor(e=du.STANDARD_ERROR_MAP.INVALID_PARAMS.message){super(e),r(cu)(this,"code",du.STANDARD_ERROR_MAP.INVALID_PARAMS.code)}}class yu extends gu{constructor(e="Origin Not Allowed: Try calling eth_requestAccounts first."){super(e),r(cu)(this,"code",-32011)}}class vu extends gu{constructor(e="Rejected by User"){super(e),r(cu)(this,"code",-32010)}}class wu extends gu{constructor(e="Tx Signature: User denied transaction signature."){super(e),r(cu)(this,"code",4001)}}class bu extends gu{constructor(e="Method not implemented"){super(e),r(cu)(this,"code",-32601)}}class Au extends gu{constructor(e="Record not found"){super(e),r(cu)(this,"code",-32602)}}class Eu extends gu{constructor(e="Session expired"){super(e),r(cu)(this,"code",2312103)}}s=o("8WZ8I");const xu=/windows/i.test(navigator.userAgent),Su=new(0,Dc.EventEmitter);r(s).windows.onFocusChanged.addListener((e=>{Su.emit("windowFocusChange",e)})),r(s).windows.onRemoved.addListener((e=>{Su.emit("windowRemoved",e)}));const Cu={width:400+(xu?14:0),height:600};var ku;ku=new URL(o("22Rdj").resolve("3m7r6"),import.meta.url).toString();const _u={openNotification:({route:e="",...t}={})=>{const n=new URL(ku);return e&&(n.hash=e),(async({url:e,...t})=>{const{top:n,left:i,width:o}=await r(s).windows.getCurrent({windowTypes:["normal"]}),a=(n||0)+80,c=(i||0)+(o||0)-Cu.width,u=await r(s).windows.getCurrent();return(await r(s).windows.create({focused:!0,url:e,type:"popup",top:a,left:c,state:"fullscreen"===u.state?"fullscreen":void 0,...Cu,...t})).id})({url:n.toString(),...t})},event:Su,remove:async e=>r(s).windows.remove(e)};const Pu=new class extends(r(Dc)){getWindowId(e){return this.idsMap.get(e)}getNewId(){return Lc()}async open({route:e,search:t,onDismiss:r,onResolve:n}){null!=this.windowId&&_u.remove(this.windowId);const i=[],o=()=>{i.forEach((e=>e()))};let s=e;const a=this.getNewId(),c=new URLSearchParams(t);c.append("windowId",String(a)),s+=`?${c.toString()}`;const u=await _u.openNotification({route:s});u&&(this.idsMap.set(a,u),i.push((()=>this.idsMap.delete(a)))),this.windowId=u,i.push((()=>{null!=this.windowId&&(_u.remove(this.windowId),this.windowId=null)}));const l=(e,t)=>{e===this.windowId&&(r(t),o())},h=e=>{this.windowId===e&&(this.windowId=null),r(new vu("Window Closed")),o()};_u.event.on("windowRemoved",h),i.push((()=>{_u.event.off("windowRemoved",h)}));const f=({id:e,result:t})=>{this.getWindowId(e)===u&&(n(t),o())},d=e=>{const t=this.getWindowId(e.id);null!=t&&l(t,e.error)};this.on("resolve",f),this.on("reject",d),i.push((()=>{this.off("resolve",f),this.off("reject",d)}))}closeCurrentWindow(){null!=this.windowId&&_u.remove(this.windowId)}constructor(){super(),r(cu)(this,"windowId",null),this.id=Lc(),this.idsMap=new Map}};Object.assign(window,{notificationWindow:Pu});const Ru=`chrome-extension://${chrome.runtime.id}`,Ou=Symbol();function Iu(e){return e.charAt(0).toUpperCase()+e.slice(1)}var Nu,Tu,Mu,Bu={},Fu={},Lu={},ju={},Du={},Uu={},zu={},qu={};Mu=(Il=o("dV0Jg")).Symbol;var Ku={},Gu=Object.prototype,Wu=Gu.hasOwnProperty,Hu=Gu.toString,Ju=Mu?Mu.toStringTag:void 0;Ku=function(e){var t=Wu.call(e,Ju),r=e[Ju];try{e[Ju]=void 0;var n=!0}catch(e){}var i=Hu.call(e);return n&&(t?e[Ju]=r:delete e[Ju]),i};var Vu={},Qu=Object.prototype.toString;Vu=function(e){return Qu.call(e)};var Zu=Mu?Mu.toStringTag:void 0;qu=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":Zu&&Zu in Object(e)?Ku(e):Vu(e)};var Yu={};Yu=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)};zu=function(e){if(!Yu(e))return!1;var t=qu(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t};var Xu,$u,el={},tl=(Il=o("dV0Jg"))["__core-js_shared__"],rl=($u=/[^.]+$/.exec((Xu=tl)&&Xu.keys&&Xu.keys.IE_PROTO||""))?"Symbol(src)_1."+$u:"";el=function(e){return!!rl&&rl in e};var nl={},il=Function.prototype.toString;nl=function(e){if(null!=e){try{return il.call(e)}catch(e){}try{return e+""}catch(e){}}return""};var ol=/^\[object .+?Constructor\]$/,sl=Function.prototype,al=Object.prototype,cl=sl.toString,ul=al.hasOwnProperty,ll=RegExp("^"+cl.call(ul).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");Uu=function(e){return!(!Yu(e)||el(e))&&(zu(e)?ll:ol).test(nl(e))};var hl={};hl=function(e,t){return null==e?void 0:e[t]};var fl=(Du=function(e,t){var r=hl(e,t);return Uu(r)?r:void 0})(Object,"create");ju=fl,Tu=function(){this.__data__=ju?ju(null):{},this.size=0};var dl;dl=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t};var pl,gl=Object.prototype.hasOwnProperty;pl=function(e){var t=this.__data__;if(ju){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return gl.call(t,e)?t[e]:void 0};var ml,yl=Object.prototype.hasOwnProperty;ml=function(e){var t=this.__data__;return ju?void 0!==t[e]:yl.call(t,e)};var vl;function wl(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}vl=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=ju&&void 0===t?"__lodash_hash_undefined__":t,this},wl.prototype.clear=Tu,wl.prototype.delete=dl,wl.prototype.get=pl,wl.prototype.has=ml,wl.prototype.set=vl,Lu=wl;var bl,Al={};bl=function(){this.__data__=[],this.size=0};var El,xl={},Sl={};Sl=function(e,t){return e===t||e!=e&&t!=t},xl=function(e,t){for(var r=e.length;r--;)if(Sl(e[r][0],t))return r;return-1};var Cl=Array.prototype.splice;El=function(e){var t=this.__data__,r=xl(t,e);return!(r<0)&&(r==t.length-1?t.pop():Cl.call(t,r,1),--this.size,!0)};var kl;kl=function(e){var t=this.__data__,r=xl(t,e);return r<0?void 0:t[r][1]};var _l;_l=function(e){return xl(this.__data__,e)>-1};var Pl;function Rl(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}Pl=function(e,t){var r=this.__data__,n=xl(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this},Rl.prototype.clear=bl,Rl.prototype.delete=El,Rl.prototype.get=kl,Rl.prototype.has=_l,Rl.prototype.set=Pl,Al=Rl;var Ol={},Il=o("dV0Jg"),Nl=Du(Il,"Map");Ol=Nl,Nu=function(){this.size=0,this.__data__={hash:new Lu,map:new(Ol||Al),string:new Lu}};var Tl,Ml={},Bl={};Bl=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e},Ml=function(e,t){var r=e.__data__;return Bl(t)?r["string"==typeof t?"string":"hash"]:r.map},Tl=function(e){var t=Ml(this,e).delete(e);return this.size-=t?1:0,t};var Fl;Fl=function(e){return Ml(this,e).get(e)};var Ll;Ll=function(e){return Ml(this,e).has(e)};var jl;function Dl(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}jl=function(e,t){var r=Ml(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this},Dl.prototype.clear=Nu,Dl.prototype.delete=Tl,Dl.prototype.get=Fl,Dl.prototype.has=Ll,Dl.prototype.set=jl,Fu=Dl;function Ul(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var n=arguments,i=t?t.apply(this,n):n[0],o=r.cache;if(o.has(i))return o.get(i);var s=e.apply(this,n);return r.cache=o.set(i,s)||o,s};return r.cache=new(Ul.Cache||Fu),r}Ul.Cache=Fu,Bu=Ul;class zl{toString(){return this.value}constructor(e){this.value=e}}const ql=r(Bu)((e=>new zl(e))),Kl={ARBITRUM_INFURA_API_KEY:"e2e40a30dc83445e8b4d5d7c88f85276",AURORA_API_KEY:"2ZaW4eTLoH9wrr3N5jMfSkyGXA9PLJDRb5jZdHV591mr",ETHEREUM_ALCHEMY_API_KEY:"RKg5wIwcuh32powb0blKdPh0UwSsgmFI",OPTIMISM_INFURA_API_KEY:"e2e40a30dc83445e8b4d5d7c88f85276",POLYGON_INFURA_API_KEY:"e2e40a30dc83445e8b4d5d7c88f85276",SOLANA_API_KEY:""};function Gl(e,t){let r=e;for(const e in t)r=r.replace(`{${e}}`,t[e]);return r}function Wl({asset:e,chain:t}){return e?.implementations?.[String(t)]}const Hl=({asset:e,chain:t})=>{const r=Wl({asset:e,chain:t});return r?r.address:void 0};function Jl(e,t,r){const n={};for(const i of e)n[t(i)]=r(i);return n}class Vl{static getName(e){return e.name||Iu(e.chain)}toId(e){return this.nameToId[e.toString()]}getNetworks(){return this.networks}getChainId(e){return this.toId(e)}getNativeAssetIdsForTrading(){return this.networks.filter((e=>e.supports_trading&&e.native_asset)).map((e=>e.native_asset?.id)).filter(fu)}getChainName(e){return this.collection[this.toId(e)]?.name||Iu(String(e))}getNetworkById(e){const t=this.collection[e];if(!t)throw new Error(`Unsupported network id: ${e}`);return t}getNetworkByName(e){return this.collection[this.toId(e)]}getChainById(e){const t=this.getNetworkById(e);return ql(t.chain)}getChainNameById(e){const t=this.getNetworkById(e);return this.getChainName(ql(t.chain))}getExplorerHomeUrlByName(e){return this.collection[this.toId(e)]?.explorer_home_url}getExplorerTxUrl(e,t){return e?.explorer_tx_url?.replace("{HASH}",t)}getExplorerTxUrlById(e,t){return this.getExplorerTxUrl(this.collection[e],t)}getExplorerTxUrlByName(e,t){return this.getExplorerTxUrl(this.collection[this.toId(e)],t)}getExplorerTokenUrl(e,t){return e?.explorer_token_url?.replace("{ADDRESS}",t)}getExplorerTokenUrlById(e,t){return this.getExplorerTokenUrl(this.collection[e],t)}getExplorerTokenUrlByName(e,t){return this.getExplorerTokenUrl(this.collection[this.toId(e)],t)}getExplorerNameById(e){return this.collection[e]?.explorer_name}getEthereumChainParameter(e){const t=this.collection[e];if(!t||!t.rpc_url_public||!t.native_asset)throw new Error(`Unsupported network id: ${e}`);return{chainId:e,rpcUrls:t.rpc_url_public,chainName:t.name,nativeCurrency:{code:t.native_asset.address,name:t.native_asset.name,symbol:t.native_asset.symbol,decimals:t.native_asset.decimals},iconUrls:[t.icon_url],blockExplorerUrls:t.explorer_home_url?[t.explorer_home_url]:[]}}supports(e,t){const r=this.getNetworkByName(t);if(!r)return!1;return r[Vl.purposeKeyMap[e]]}isNativeAsset(e,t){const r=this.getNetworkById(t);return!!r.native_asset&&Hl({asset:e,chain:ql(r.chain)})===r.native_asset.address}isNativeAddress(e,t){const r=this.getNetworkById(t);if(!r.native_asset)throw new Error(`Native asset is not defined for: ${t}`);return!!r.native_asset&&e===r.native_asset.address}getRpcUrlInternal(e){const t=this.getNetworkByName(e);if(!t)throw new Error(`Cannot find network: ${e}`);if(!t.rpc_url_internal)throw new Error(`Network url missing: ${e}`);return Gl(t.rpc_url_internal,this.keys)}constructor({networks:e,keys:t=Kl}){this.networks=e.sort(((e,t)=>function(e,t,r){if(r){if(e===r)return-1;if(t===r)return 1}return e.localeCompare(t)}(e.name,t.name,"Ethereum"))),this.keys=t,this.collection=Jl(this.networks,(e=>e.external_id),(e=>e)),this.nameToId=Jl(this.networks,(e=>e.chain),(e=>e.external_id))}}r(cu)(Vl,"purposeKeyMap",{sending:"supports_sending",trading:"supports_trading",bridge:"supports_bridge"});var Ql,Zl=o("jkiLj");xe=o("iQPfu");const Yl="object"==typeof performance&&performance&&"function"==typeof performance.now?performance:Date,Xl="function"==typeof AbortController?AbortController:class{abort(){this.signal.dispatchEvent("abort")}constructor(){this.signal=new th}},$l="function"==typeof AbortSignal,eh="function"==typeof Xl.AbortSignal,th=$l?AbortSignal:eh?Xl.AbortController:class{dispatchEvent(e){if("abort"===e){this.aborted=!0;const t={type:e,target:this};this.onabort(t),this._listeners.forEach((e=>e(t)),this)}}onabort(){}addEventListener(e,t){"abort"===e&&this._listeners.push(t)}removeEventListener(e,t){"abort"===e&&(this._listeners=this._listeners.filter((e=>e!==t)))}constructor(){this.aborted=!1,this._listeners=[]}},rh=new Set,nh=(e,t)=>{const r=`LRU_CACHE_OPTION_${e}`;sh(r)&&ah(r,`${e} option`,`options.${t}`,dh)},ih=(e,t)=>{const r=`LRU_CACHE_METHOD_${e}`;if(sh(r)){const{prototype:n}=dh,{get:i}=Object.getOwnPropertyDescriptor(n,e);ah(r,`${e} method`,`cache.${t}()`,i)}},oh=(...e)=>{"object"==typeof xe&&xe&&"function"==typeof xe.emitWarning?xe.emitWarning(...e):console.error(...e)},sh=e=>!rh.has(e),ah=(e,t,r,n)=>{rh.add(e);oh(`The ${t} is deprecated. Please use ${r} instead.`,"DeprecationWarning",e,n)},ch=e=>e&&e===Math.floor(e)&&e>0&&isFinite(e),uh=e=>ch(e)?e<=Math.pow(2,8)?Uint8Array:e<=Math.pow(2,16)?Uint16Array:e<=Math.pow(2,32)?Uint32Array:e<=Number.MAX_SAFE_INTEGER?lh:null:null;class lh extends Array{constructor(e){super(e),this.fill(0)}}class hh{push(e){this.heap[this.length++]=e}pop(){return this.heap[--this.length]}constructor(e){if(0===e)return[];const t=uh(e);this.heap=new t(e),this.length=0}}let fh=Symbol.iterator;class dh{getRemainingTTL(e){return this.has(e,{updateAgeOnHas:!1})?1/0:0}initializeTTLTracking(){this.ttls=new lh(this.max),this.starts=new lh(this.max),this.setItemTTL=(e,t,r=Yl.now())=>{if(this.starts[e]=0!==t?r:0,this.ttls[e]=t,0!==t&&this.ttlAutopurge){const r=setTimeout((()=>{this.isStale(e)&&this.delete(this.keyList[e])}),t+1);r.unref&&r.unref()}},this.updateItemAge=e=>{this.starts[e]=0!==this.ttls[e]?Yl.now():0};let e=0;const t=()=>{const t=Yl.now();if(this.ttlResolution>0){e=t;const r=setTimeout((()=>e=0),this.ttlResolution);r.unref&&r.unref()}return t};this.getRemainingTTL=r=>{const n=this.keyMap.get(r);return void 0===n?0:0===this.ttls[n]||0===this.starts[n]?1/0:this.starts[n]+this.ttls[n]-(e||t())},this.isStale=r=>0!==this.ttls[r]&&0!==this.starts[r]&&(e||t())-this.starts[r]>this.ttls[r]}updateItemAge(e){}setItemTTL(e,t,r){}isStale(e){return!1}initializeSizeTracking(){this.calculatedSize=0,this.sizes=new lh(this.max),this.removeItemSize=e=>{this.calculatedSize-=this.sizes[e],this.sizes[e]=0},this.requireSize=(e,t,r,n)=>{if(!ch(r)){if(!n)throw new TypeError("invalid size value (must be positive integer)");if("function"!=typeof n)throw new TypeError("sizeCalculation must be a function");if(r=n(t,e),!ch(r))throw new TypeError("sizeCalculation return invalid (expect positive integer)")}return r},this.addItemSize=(e,t)=>{this.sizes[e]=t;const r=this.maxSize-this.sizes[e];for(;this.calculatedSize>r;)this.evict(!0);this.calculatedSize+=this.sizes[e]}}removeItemSize(e){}addItemSize(e,t){}requireSize(e,t,r,n){if(r||n)throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache")}*indexes({allowStale:e=this.allowStale}={}){if(this.size)for(let t=this.tail;this.isValidIndex(t)&&(!e&&this.isStale(t)||(yield t),t!==this.head);)t=this.prev[t]}*rindexes({allowStale:e=this.allowStale}={}){if(this.size)for(let t=this.head;this.isValidIndex(t)&&(!e&&this.isStale(t)||(yield t),t!==this.tail);)t=this.next[t]}isValidIndex(e){return this.keyMap.get(this.keyList[e])===e}*entries(){for(const e of this.indexes())yield[this.keyList[e],this.valList[e]]}*rentries(){for(const e of this.rindexes())yield[this.keyList[e],this.valList[e]]}*keys(){for(const e of this.indexes())yield this.keyList[e]}*rkeys(){for(const e of this.rindexes())yield this.keyList[e]}*values(){for(const e of this.indexes())yield this.valList[e]}*rvalues(){for(const e of this.rindexes())yield this.valList[e]}[fh](){return this.entries()}find(e,t={}){for(const r of this.indexes())if(e(this.valList[r],this.keyList[r],this))return this.get(this.keyList[r],t)}forEach(e,t=this){for(const r of this.indexes())e.call(t,this.valList[r],this.keyList[r],this)}rforEach(e,t=this){for(const r of this.rindexes())e.call(t,this.valList[r],this.keyList[r],this)}get prune(){return ih("prune","purgeStale"),this.purgeStale}purgeStale(){let e=!1;for(const t of this.rindexes({allowStale:!0}))this.isStale(t)&&(this.delete(this.keyList[t]),e=!0);return e}dump(){const e=[];for(const t of this.indexes({allowStale:!0})){const r=this.keyList[t],n=this.valList[t],i={value:this.isBackgroundFetch(n)?n.__staleWhileFetching:n};if(this.ttls){i.ttl=this.ttls[t];const e=Yl.now()-this.starts[t];i.start=Math.floor(Date.now()-e)}this.sizes&&(i.size=this.sizes[t]),e.unshift([r,i])}return e}load(e){this.clear();for(const[t,r]of e){if(r.start){const e=Date.now()-r.start;r.start=Yl.now()-e}this.set(t,r.value,r)}}dispose(e,t,r){}set(e,t,{ttl:r=this.ttl,start:n,noDisposeOnSet:i=this.noDisposeOnSet,size:o=0,sizeCalculation:s=this.sizeCalculation,noUpdateTTL:a=this.noUpdateTTL}={}){if(o=this.requireSize(e,t,o,s),this.maxEntrySize&&o>this.maxEntrySize)return this;let c=0===this.size?void 0:this.keyMap.get(e);if(void 0===c)c=this.newIndex(),this.keyList[c]=e,this.valList[c]=t,this.keyMap.set(e,c),this.next[this.tail]=c,this.prev[c]=this.tail,this.tail=c,this.size++,this.addItemSize(c,o),a=!1;else{const r=this.valList[c];t!==r&&(this.isBackgroundFetch(r)?r.__abortController.abort():i||(this.dispose(r,e,"set"),this.disposeAfter&&this.disposed.push([r,e,"set"])),this.removeItemSize(c),this.valList[c]=t,this.addItemSize(c,o)),this.moveToTail(c)}if(0===r||0!==this.ttl||this.ttls||this.initializeTTLTracking(),a||this.setItemTTL(c,r,n),this.disposeAfter)for(;this.disposed.length;)this.disposeAfter(...this.disposed.shift());return this}newIndex(){return 0===this.size?this.tail:this.size===this.max&&0!==this.max?this.evict(!1):0!==this.free.length?this.free.pop():this.initialFill++}pop(){if(this.size){const e=this.valList[this.head];return this.evict(!0),e}}evict(e){const t=this.head,r=this.keyList[t],n=this.valList[t];return this.isBackgroundFetch(n)?n.__abortController.abort():(this.dispose(n,r,"evict"),this.disposeAfter&&this.disposed.push([n,r,"evict"])),this.removeItemSize(t),e&&(this.keyList[t]=null,this.valList[t]=null,this.free.push(t)),this.head=this.next[t],this.keyMap.delete(r),this.size--,t}has(e,{updateAgeOnHas:t=this.updateAgeOnHas}={}){const r=this.keyMap.get(e);return void 0!==r&&!this.isStale(r)&&(t&&this.updateItemAge(r),!0)}peek(e,{allowStale:t=this.allowStale}={}){const r=this.keyMap.get(e);if(void 0!==r&&(t||!this.isStale(r))){const e=this.valList[r];return this.isBackgroundFetch(e)?e.__staleWhileFetching:e}}backgroundFetch(e,t,r,n){const i=void 0===t?void 0:this.valList[t];if(this.isBackgroundFetch(i))return i;const o=new Xl,s={signal:o.signal,options:r,context:n},a=new Promise((t=>t(this.fetchMethod(e,i,s)))).then((t=>(o.signal.aborted||this.set(e,t,s.options),t)),(n=>{if(this.valList[t]===a){!r.noDeleteOnFetchRejection||void 0===a.__staleWhileFetching?this.delete(e):this.valList[t]=a.__staleWhileFetching}if(a.__returned===a)throw n}));return a.__abortController=o,a.__staleWhileFetching=i,a.__returned=null,void 0===t?(this.set(e,a,s.options),t=this.keyMap.get(e)):this.valList[t]=a,a}isBackgroundFetch(e){return e&&"object"==typeof e&&"function"==typeof e.then&&Object.prototype.hasOwnProperty.call(e,"__staleWhileFetching")&&Object.prototype.hasOwnProperty.call(e,"__returned")&&(e.__returned===e||null===e.__returned)}async fetch(e,{allowStale:t=this.allowStale,updateAgeOnGet:r=this.updateAgeOnGet,noDeleteOnStaleGet:n=this.noDeleteOnStaleGet,ttl:i=this.ttl,noDisposeOnSet:o=this.noDisposeOnSet,size:s=0,sizeCalculation:a=this.sizeCalculation,noUpdateTTL:c=this.noUpdateTTL,noDeleteOnFetchRejection:u=this.noDeleteOnFetchRejection,fetchContext:l=this.fetchContext,forceRefresh:h=!1}={}){if(!this.fetchMethod)return this.get(e,{allowStale:t,updateAgeOnGet:r,noDeleteOnStaleGet:n});const f={allowStale:t,updateAgeOnGet:r,noDeleteOnStaleGet:n,ttl:i,noDisposeOnSet:o,size:s,sizeCalculation:a,noUpdateTTL:c,noDeleteOnFetchRejection:u};let d=this.keyMap.get(e);if(void 0===d){const t=this.backgroundFetch(e,d,f,l);return t.__returned=t}{const n=this.valList[d];if(this.isBackgroundFetch(n))return t&&void 0!==n.__staleWhileFetching?n.__staleWhileFetching:n.__returned=n;if(!h&&!this.isStale(d))return this.moveToTail(d),r&&this.updateItemAge(d),n;const i=this.backgroundFetch(e,d,f,l);return t&&void 0!==i.__staleWhileFetching?i.__staleWhileFetching:i.__returned=i}}get(e,{allowStale:t=this.allowStale,updateAgeOnGet:r=this.updateAgeOnGet,noDeleteOnStaleGet:n=this.noDeleteOnStaleGet}={}){const i=this.keyMap.get(e);if(void 0!==i){const o=this.valList[i],s=this.isBackgroundFetch(o);if(this.isStale(i))return s?t?o.__staleWhileFetching:void 0:(n||this.delete(e),t?o:void 0);if(s)return;return this.moveToTail(i),r&&this.updateItemAge(i),o}}connect(e,t){this.prev[t]=e,this.next[e]=t}moveToTail(e){e!==this.tail&&(e===this.head?this.head=this.next[e]:this.connect(this.prev[e],this.next[e]),this.connect(this.tail,e),this.tail=e)}get del(){return ih("del","delete"),this.delete}delete(e){let t=!1;if(0!==this.size){const r=this.keyMap.get(e);if(void 0!==r)if(t=!0,1===this.size)this.clear();else{this.removeItemSize(r);const t=this.valList[r];this.isBackgroundFetch(t)?t.__abortController.abort():(this.dispose(t,e,"delete"),this.disposeAfter&&this.disposed.push([t,e,"delete"])),this.keyMap.delete(e),this.keyList[r]=null,this.valList[r]=null,r===this.tail?this.tail=this.prev[r]:r===this.head?this.head=this.next[r]:(this.next[this.prev[r]]=this.next[r],this.prev[this.next[r]]=this.prev[r]),this.size--,this.free.push(r)}}if(this.disposed)for(;this.disposed.length;)this.disposeAfter(...this.disposed.shift());return t}clear(){for(const e of this.rindexes({allowStale:!0})){const t=this.valList[e];if(this.isBackgroundFetch(t))t.__abortController.abort();else{const r=this.keyList[e];this.dispose(t,r,"delete"),this.disposeAfter&&this.disposed.push([t,r,"delete"])}}if(this.keyMap.clear(),this.valList.fill(null),this.keyList.fill(null),this.ttls&&(this.ttls.fill(0),this.starts.fill(0)),this.sizes&&this.sizes.fill(0),this.head=0,this.tail=0,this.initialFill=1,this.free.length=0,this.calculatedSize=0,this.size=0,this.disposed)for(;this.disposed.length;)this.disposeAfter(...this.disposed.shift())}get reset(){return ih("reset","clear"),this.clear}get length(){return((e,t)=>{const r=`LRU_CACHE_PROPERTY_${e}`;if(sh(r)){const{prototype:n}=dh,{get:i}=Object.getOwnPropertyDescriptor(n,e);ah(r,`${e} property`,`cache.${t}`,i)}})("length","size"),this.size}static get AbortController(){return Xl}static get AbortSignal(){return th}constructor(e={}){const{max:t=0,ttl:r,ttlResolution:n=1,ttlAutopurge:i,updateAgeOnGet:o,updateAgeOnHas:s,allowStale:a,dispose:c,disposeAfter:u,noDisposeOnSet:l,noUpdateTTL:h,maxSize:f=0,maxEntrySize:d=0,sizeCalculation:p,fetchMethod:g,fetchContext:m,noDeleteOnFetchRejection:y,noDeleteOnStaleGet:v}=e,{length:w,maxAge:b,stale:A}=e instanceof dh?{}:e;if(0!==t&&!ch(t))throw new TypeError("max option must be a nonnegative integer");const E=t?uh(t):Array;if(!E)throw new Error("invalid max value: "+t);if(this.max=t,this.maxSize=f,this.maxEntrySize=d||this.maxSize,this.sizeCalculation=p||w,this.sizeCalculation){if(!this.maxSize&&!this.maxEntrySize)throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");if("function"!=typeof this.sizeCalculation)throw new TypeError("sizeCalculation set to non-function")}if(this.fetchMethod=g||null,this.fetchMethod&&"function"!=typeof this.fetchMethod)throw new TypeError("fetchMethod must be a function if specified");if(this.fetchContext=m,!this.fetchMethod&&void 0!==m)throw new TypeError("cannot set fetchContext without fetchMethod");if(this.keyMap=new Map,this.keyList=new Array(t).fill(null),this.valList=new Array(t).fill(null),this.next=new E(t),this.prev=new E(t),this.head=0,this.tail=0,this.free=new hh(t),this.initialFill=1,this.size=0,"function"==typeof c&&(this.dispose=c),"function"==typeof u?(this.disposeAfter=u,this.disposed=[]):(this.disposeAfter=null,this.disposed=null),this.noDisposeOnSet=!!l,this.noUpdateTTL=!!h,this.noDeleteOnFetchRejection=!!y,0!==this.maxEntrySize){if(0!==this.maxSize&&!ch(this.maxSize))throw new TypeError("maxSize must be a positive integer if specified");if(!ch(this.maxEntrySize))throw new TypeError("maxEntrySize must be a positive integer if specified");this.initializeSizeTracking()}if(this.allowStale=!!a||!!A,this.noDeleteOnStaleGet=!!v,this.updateAgeOnGet=!!o,this.updateAgeOnHas=!!s,this.ttlResolution=ch(n)||0===n?n:1,this.ttlAutopurge=!!i,this.ttl=r||b||0,this.ttl){if(!ch(this.ttl))throw new TypeError("ttl must be a positive integer if specified");this.initializeTTLTracking()}if(0===this.max&&0===this.ttl&&0===this.maxSize)throw new TypeError("At least one of max, maxSize, or ttl is required");if(!this.ttlAutopurge&&!this.max&&!this.maxSize){const e="LRU_CACHE_UNBOUNDED";if(sh(e)){rh.add(e);oh("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.","UnboundedCacheWarning",e,dh)}}A&&nh("stale","allowStale"),b&&nh("maxAge","ttl"),w&&nh("length","sizeCalculation")}}Ql=dh;var ph;ph=o("3A4KR");var gh,mh,yh;function vh(){return(vh=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function wh(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,bh(e,t)}function bh(e,t){return(bh=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ah(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t.indexOf(r=o[n])>=0||(i[r]=e[r]);return i}function Eh(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function xh(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(r)return(r=r.call(e)).next.bind(r);if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return Eh(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Eh(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0;return function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function Sh(e,t){return Object.keys(e.payload).every((function(r){var n=e.payload[r],i=t.meta[r];return"object"==typeof n?JSON.stringify(n)===JSON.stringify(i):i===n}))}gh=function e(t,r){if(t===r)return!0;if(t&&r&&"object"==typeof t&&"object"==typeof r){if(t.constructor!==r.constructor)return!1;var n,i,o;if(Array.isArray(t)){if((n=t.length)!=r.length)return!1;for(i=n;0!=i--;)if(!e(t[i],r[i]))return!1;return!0}if(t.constructor===RegExp)return t.source===r.source&&t.flags===r.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===r.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===r.toString();if((n=(o=Object.keys(t)).length)!==Object.keys(r).length)return!1;for(i=n;0!=i--;)if(!Object.prototype.hasOwnProperty.call(r,o[i]))return!1;for(i=n;0!=i--;){var s=o[i];if(!e(t[s],r[s]))return!1}return!0}return t!=t&&r!=r},(yh=mh||(mh={}))[yh.noRequests=0]="noRequests",yh[yh.requested=1]="requested",yh[yh.updating=2]="updating",yh[yh.ok=3]="ok",yh[yh.error=4]="error";var Ch=function(e){return{status:null!=e?e:mh.noRequests,value:null,data:null,timestamp:0,meta:{},hasSubscribers:!1,isStale:!1}},kh=function(e){function t(t){var r;return(r=e.call(this,t)||this).apiSubscription=void 0,r.listenersCount=void 0,r.apiSubscription=null,r.listenersCount=0,r}wh(t,e),t.fromStatus=function(e){return new t(Ch(e))};var r=t.prototype;return r.setData=function(e,t,r){var n;void 0===r&&(r={});var i=((n={})[e]=t,n);this.setState((function(e){return vh({},e,{data:i,meta:r,value:t,timestamp:Date.now(),status:mh.ok,isStale:!1})}))},r.makeSubscription=function(e){var t,r=e.unsubscribe;this.state.status=(t=this.state.status)===mh.error||t===mh.ok?mh.updating:mh.requested,this.state.hasSubscribers=!0,this.apiSubscription={unsubscribe:r}},r.removeSubscription=function(){this.apiSubscription&&(this.apiSubscription.unsubscribe(),this.apiSubscription=null,this.state.hasSubscribers=!1),this.state.status===mh.requested&&(this.state.status=mh.noRequests)},r.addClientListener=function(t){var r=this,n=e.prototype.on.call(this,"change",t);return this.listenersCount+=1,function(){n(),r.listenersCount-=1,0===r.listenersCount&&r.removeSubscription()}},t}(hu),_h=function(e){return"id"in e?e.id:e};function Ph(e){if("received"===e.event)return e.newData;if("changed"===e.event)return function(e,t,r){void 0===r&&(r=_h);var n=e?vh({},e):{};return t.forEach((function(e){var t=r(e);n[t]=e})),n}(e.prevData,e.newData,e.getId);throw new Error("Unexpected event: "+event)}function Rh(e){return e.newData}function Oh(e,t){var r={};return e.forEach((function(e){r[t(e)]=e})),r}function Ih(e,t,r){void 0===r&&(r=_h);var n=!1;if(null===e)throw new Error('Cannot handle "change" event before "received"');var i=Oh(t,r),o=e.map((function(e){var t=r(e);return t in i?(n=!0,i[t]):e}));return n?o:e}function Nh(e,t,r){if(void 0===r&&(r=_h),null===e)throw new Error('Cannot handle "removed" event before "received"');var n=Oh(t,r),i=e.filter((function(e){return!(r(e)in n)}));return i.length===e.length?e:i}function Th(e){if("received"===e.event)return e.newData;if("changed"===e.event)return Ih(e.prevData,e.newData,e.getId);if("removed"===e.event)return Nh(e.prevData,e.newData,e.getId);if("appended"===e.event)return function(e,t){if(null===e)throw new Error('Cannot handle "appended" event before "received"');return[].concat(e,t)}(e.prevData,e.newData);throw new Error("Unexpected event: "+e.event)}function Mh(e,t){return"request_id"in t.meta&&e.payload.request_id===t.meta.request_id}function Bh(e){switch(e){case"cache-and-network":case"cache-first":case"cache-only":return!0;case"network-only":return!1;default:throw new Error("Unsupported cache policy: "+e)}}var Fh=function(){function e(){this.map=void 0,this.map=new Map}var t=e.prototype;return t.get=function(e,t){return this.map.get(e)||null},t.set=function(e,t){this.map.set(e,t)},t.remove=function(e){this.map.delete(e)},e}(),Lh=new Map,jh=new Map;function Dh(e,t,r){var n=r[1];if(n&&n.scope&&n.payload){var i=n.scope;Lh.get(e).add(r),i.forEach((function(i){e.on("received "+t+" "+i,(function o(s){Mh(n,s)&&(e.off("received "+t+" "+i,o),Lh.get(e).delete(r))}))}))}}function Uh(e,t){var r=t[0],n=t[1];n&&n.scope&&n.payload&&("subscribe"===r&&jh.get(e).set(n,t),"unsubscribe"===r&&jh.get(e).has(n)&&jh.get(e).delete(n))}var zh={};function qh(e){var t=e.namespace,r=e.scope,n=e.getId,i=e.mergeStrategy,o=e.verifyFn;return function(e,s){var a=s.client,c=Ah(s,["client"]),u=a||this;if(!u)throw new Error("Domain request must be called either as a method of Client or with a client parameter");return u.cachedSubscribe(vh({},c,{onData:function(e){e.data&&c.onData(e.data)},namespace:t,getId:n||c.getId,mergeStrategy:i||c.mergeStrategy,verifyFn:o||c.verifyFn,body:{scope:[r],payload:e}}))}}var Kh=function(e){return e.asset_code};function Gh(e,t){var r=t.meta,n=r.asset_codes,i=r.asset_code,o=e.payload,s=o.asset_codes;if(o.currency!==r.currency)return!1;if(i)return s.includes(i);if(s.length>n.length)return!1;var a=new Set(n);return s.every((function(e){return a.has(e)}))}var Wh=qh({namespace:"assets",scope:"prices",getId:Kh,verifyFn:Gh}),Hh=function(e){return e.asset.asset_code},Jh=Th,Vh=qh({namespace:"assets",scope:"info",getId:Hh,mergeStrategy:Jh}),Qh=Th,Zh=qh({namespace:"address",scope:"loans",mergeStrategy:Qh}),Yh=qh({namespace:"address",scope:"assets",getId:function(e){return e.asset.asset_code}}),Xh=qh({namespace:"address",scope:"positions"}),$h=qh({namespace:"address",scope:"charts"}),ef=qh({namespace:"assets",scope:"charts"}),tf=Rh,rf=qh({namespace:"assets",scope:"full-info",mergeStrategy:tf}),nf=qh({namespace:"address",scope:"portfolio"});function of(e){return new Promise(((t,r)=>{e.oncomplete=e.onsuccess=()=>t(e.result),e.onabort=e.onerror=()=>r(e.error)}))}let sf;function af(){return sf||(sf=function(e,t){const r=(!navigator.userAgentData&&/Safari\//.test(navigator.userAgent)&&!/Chrom(e|ium)\//.test(navigator.userAgent)&&indexedDB.databases?new Promise((function(e){var t=function(){return indexedDB.databases().finally(e)};n=setInterval(t,100),t()})).finally((function(){return clearInterval(n)})):Promise.resolve()).then((()=>{const e=indexedDB.open("keyval-store");return e.onupgradeneeded=()=>e.result.createObjectStore(t),of(e)}));var n;return(e,n)=>r.then((r=>n(r.transaction(t,e).objectStore(t))))}(0,"keyval")),sf}var cf=function(e){function t(t){var n,i=(void 0===t?{}:t).max,o=void 0===i?50:i;return(n=e.call(this,{usesStaleEntries:!1})||this).map=void 0,n.lruCache=void 0,n.staleEntries=void 0,n.map=new Map,n.lruCache=new(r(Ql))({max:o,dispose:function(e,t,r){"evict"===r&&function(e,t=af()){t("readwrite",(t=>(t.delete(e),of(t.transaction))))}(t)}}),n.staleEntries=new Set,n}wh(t,e);var n=t.prototype;return n.getChangeHandler=function(e,t){var r=this;return function(){r.staleEntries.delete(t),setTimeout((function(){r.state.usesStaleEntries&&0===r.staleEntries.size&&r.setState({usesStaleEntries:!1})})),r.safeWriteEntry(e,t)}},n.safeWriteEntry=function(e,t){if(t.getState().status===mh.ok){var r=t.getState();return this.lruCache.set(e,r),function(e,t,r=af()){return r("readwrite",(r=>(r.put(t,e),of(r.transaction))))}(e,r)}return Promise.resolve()},n.load=function(){try{var e=this;return Promise.resolve(function(e=af()){return e("readonly",(t=>{if(t.getAll&&t.getAllKeys)return Promise.all([of(t.getAllKeys()),of(t.getAll())]).then((([e,t])=>e.map(((e,r)=>[e,t[r]]))));const r=[];return e("readonly",(e=>{return(t=e,t.openCursor().onsuccess=function(){var e;this.result&&(r.push([(e=this.result).key,e.value]),this.result.continue())},of(t.transaction)).then((()=>r));var t}))}))}().then((function(t){t.filter((function(e){var t=e[1];return null!=t.data&&t.status===mh.ok})).forEach((function(t){var r=t[0],n=t[1];n.isStale=!0,n.hasSubscribers=!1;var i=new kh(n);i.on("change",e.getChangeHandler(r,i)),e.lruCache.set(r,i),e.map.set(r,i)}))})))}catch(e){return Promise.reject(e)}},n.get=function(e,t){var r=this,n=this.map.get(e)||null;return"cache-first"!==t&&"cache-only"!==t||null==n||!n.state.isStale?(null!=n&&n.state.isStale&&("network-only"!==t&&"cache-and-network"!==t||(this.staleEntries.add(n),setTimeout((function(){r.state.usesStaleEntries||r.setState({usesStaleEntries:!0})})))),n):null},n.set=function(e,t){this.map.set(e,t),t.on("change",this.getChangeHandler(e,t)),this.safeWriteEntry(e,t)},n.remove=function(e){this.map.delete(e)},t}(hu),uf=["received","appended","changed","removed"];function lf(e){var t=e.socketNamespace,r=e.method,n=void 0===r?"subscribe":r,i=e.body,o=e.onMessage,s=e.onAnyMessage,a=e.verifyFn,c=void 0===a?Sh:a,u=t.socket,l=t.namespace;if(!i.scope.length)throw new Error("Invalid scope argument: scope cannot be empty");var h=i.scope[0],f=[];return uf.forEach((function(e){var t,r=(t=e,function(e){c(i,e)&&o(t,e),s&&s(t,e)});u.on(e+" "+l+" "+h,r),f.push((function(){return u.off(e+" "+l+" "+h,r)}))})),u.emit(n,i),function(){f.forEach((function(e){return e()})),"subscribe"===n&&u.emit("unsubscribe",i)}}function hf(e){return JSON.stringify({namespace:e.socketNamespace.namespace,body:e.body})}var ff=0,df={},pf=function(e){return df[e]||(df[e]=++ff),df[e]};function gf(e,t){if("socketNamespace"in e)return e;if("namespace"in e)return vh({},e,{socketNamespace:t(e.namespace)});throw new Error("Either socketNamespace or namespace must be provided")}var mf={willSendRequest:function(e){return e}},yf=new(function(e){function t(){for(var t,r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];return(t=e.call.apply(e,[this].concat(n))||this).addressAssets=Yh,t.addressLoans=Zh,t.addressPositions=Xh,t.addressPortfolio=nf,t.addressCharts=$h,t.assetsCharts=ef,t.assetsPrices=Wh,t.assetsFullInfo=rf,t.assetsInfo=Vh,t}return wh(t,e),t}(function(){function e(e){this.url=void 0,this.apiToken=void 0,this.ioOptions=void 0,this.cache=void 0,this.hooks=void 0,this.customGetCacheKey=void 0,this.url=e?e.url:null,this.apiToken=e?e.apiToken:null,this.ioOptions=null==e?void 0:e.ioOptions,this.cache=(null==e?void 0:e.cache)||new Fh,this.customGetCacheKey=null==e?void 0:e.getCacheKey,this.hooks=this.configureHooks(e),this.namespaceFactory=this.namespaceFactory.bind(this)}var t=e.prototype;return t.configureHooks=function(e){return e?Object.assign({},mf,e.hooks):mf},t.namespaceFactory=function(e){if(!this.url||!this.apiToken)throw new Error("Client must be configured with a url and a token. Call client.configure({ url, apiToken }) before calling this method");return function(e,t,n,i,o){if(void 0===i&&(i={}),void 0===o&&(o=n),!zh[n]){var s=i.query,a=void 0===s?{}:s,c=Ah(i,["query"]),u=function(e,t){Lh.set(e,new Set),jh.set(e,new Map);var r=e.emit;Object.assign(e,{emit:function(n){var i=arguments;"get"===n?Dh(e,t,i):"subscribe"!==n&&"unsubscribe"!==n||Uh(e,i),r.apply(e,arguments)}});var n=!1;return e.on("disconnect",(function(){n=!1})),e.on("reconnect",(function(){n||(n=!0,function(){for(var t,n=xh(Lh.get(e));!(t=n()).done;)r.apply(e,t.value);for(var i,o=xh(jh.get(e).values());!(i=o()).done;)r.apply(e,i.value)}())})),e}(r(Zl)(new URL(n,e).toString(),vh({transports:["websocket"],timeout:6e4,query:vh({api_token:t},a)},c)),e);(function(e){if("undefined"==typeof document)return function(){};var t,r=!1;document.addEventListener("visibilitychange",(function(){"hidden"===document.visibilityState&&(t=setTimeout((function(){e.disconnect(),r=!0}),window.WAIT_BEFORE_DISCONNECT||2e4)),"visible"===document.visibilityState&&(clearTimeout(t),r&&(e.on("connect",(function(){r=!1})),e.connect(),e.emit("reconnect")))}))})(u),zh[n]={socket:u,namespace:o}}return zh[n]}(this.url,this.apiToken,e,this.ioOptions)},t.configure=function(e){var t=e.apiToken,r=e.ioOptions;return this.url=e.url,this.apiToken=t,this.ioOptions=r,this.hooks=this.configureHooks(e),this.cache=e.cache||this.cache,this.customGetCacheKey=e.getCacheKey,this},t.subscribe=function(e){var t=e.verifyFn,r=void 0===t?Mh:t,n=gf(Ah(e,["verifyFn"]),this.namespaceFactory);this.hooks.willSendRequest(n.body,{namespace:n.socketNamespace.namespace});var i=hf(n),o=pf(i);return lf(vh({},n,{verifyFn:r,body:vh({},n.body,{payload:vh({},n.body.payload,{request_id:o})})}))},t.getFromCache=function(e){if(!Bh(e.cachePolicy||"cache-and-network"))return null;var t=gf(e,this.namespaceFactory),r=hf(t),n=pf(r),i=this.getCacheKey(r,n),o=this.cache.get(i,t.cachePolicy||"cache-and-network");return o?o.getState():null},t.getCacheKey=function(e,t){return this.customGetCacheKey?this.customGetCacheKey({key:e,requestId:t}):this.cache instanceof cf?e:t},t.cachedSubscribe=function(e){var t=e.cachePolicy,r=void 0===t?"cache-and-network":t,n=e.onData,i=e.getId,o=e.mergeStrategy,s=void 0===o?Ph:o,a=e.verifyFn,c=void 0===a?Mh:a,u=gf(Ah(e,["cachePolicy","onData","getId","mergeStrategy","verifyFn"]),this.namespaceFactory),l=hf(u),h=pf(l),f=this.getCacheKey(l,h),d=u.socketNamespace.namespace,p=this.hooks.willSendRequest(vh({},u.body,{payload:vh({},u.body.payload,{request_id:h})}),{namespace:d}),g=this.cache.get(f,r),m=function(e,t){switch(e){case"cache-and-network":return!t||t.status===mh.noRequests||t.status!==mh.requested&&!t.hasSubscribers;case"cache-first":return!t||t.status===mh.noRequests;case"network-only":return!t||t.status!==mh.requested;case"cache-only":return!1;default:throw new Error("Unsupported cache policy: "+e)}}(r,g?g.getState():null),y=function(e,t,r,n){e.get(t,r)||e.set(t,kh.fromStatus(n));var i=e.get(t,r);if(i)return i;throw new Error("Unexpected internal error: newly created entry not found")}(this.cache,f,r,m?mh.requested:void 0),v=y.getState(),w=y.addClientListener(n);if(m){var b=lf(vh({},u,{body:p,verifyFn:c,onMessage:function(e,t){var r=t.payload,n=t.meta,o=u.body.scope.find((function(e){return e in r}));if(o){var a=y.getState(),c=s({event:e,prevData:a.data?a.data[o]:a.data,newData:r[o],getId:i});y.setData(o,c,n)}}}));y.makeSubscription({unsubscribe:b})}return Bh(r)&&n(v),{entryStore:y,unsubscribe:function(){return w()}}},e}()))(null);function vf(e){return e===mh.ok||e===mh.updating}var wf=Ch(),bf=Ch(mh.requested);function Af(e){var t=e.namespace,n=e.scope,i=e.getId,o=e.mergeStrategy,s=e.verifyFn;return function(e,a){void 0===a&&(a={});var c=(0,ph.useState)(e),u=c[0],l=c[1];return u!==e&&(r(gh)(u,e)||l(e)),function(e){var t=e.keepStaleData,r=void 0!==t&&t,n=e.enabled,i=void 0===n||n,o=e.client,s=Ah(e,["keepStaleData","enabled","client"]),a=o||yf,c=(0,ph.useState)(a.getFromCache(s)),u=c[0],l=c[1],h=(0,ph.useCallback)((function(e){l((function(t){if(!r)return e;if(!t)return e;var n=!!e&&vf(e.status),i=vf(t.status);return!n&&i?vh({},t,{status:e?e.status:t.status}):e}))}),[r]),f=s.socketNamespace,d=s.namespace,p=(0,ph.useMemo)((function(){return Object.assign({method:s.method,cachePolicy:s.cachePolicy,body:s.body,getId:s.getId,mergeStrategy:s.mergeStrategy,onAnyMessage:s.onAnyMessage,verifyFn:s.verifyFn,onData:h},f?{socketNamespace:f}:null,d?{namespace:d}:null)}),[h,s.body,s.cachePolicy,s.getId,s.mergeStrategy,s.onAnyMessage,s.verifyFn,s.method,d,f]),g=(0,ph.useMemo)((function(){return a.getFromCache(s)}),[a,s]);g!==u&&Bh(p.cachePolicy||"cache-and-network")&&(r||h(g)),(0,ph.useEffect)((function(){if(i)return h(a.getFromCache(p)),a.cachedSubscribe(p).unsubscribe}),[i,p,h,a]);var m=i&&"cache-only"!==p.cachePolicy;return!u||m&&(!u||u.status===mh.noRequests&&!u.data)?m?bf:wf:u}(vh({},a,{namespace:t,getId:i||a.getId,mergeStrategy:o||a.mergeStrategy,verifyFn:s||a.verifyFn,body:(0,ph.useMemo)((function(){return{scope:[n],payload:u}}),[u])}))}}Af({namespace:"address",scope:"loans",mergeStrategy:Qh}),Af({namespace:"assets",scope:"info",getId:Hh,mergeStrategy:Jh}),Af({namespace:"assets",scope:"prices",getId:Kh,verifyFn:Gh}),Af({namespace:"assets",scope:"full-info",mergeStrategy:tf}),Af({namespace:"address",scope:"charts"}),Af({namespace:"address",scope:"positions"}),Af({namespace:"assets",scope:"charts"}),Af({namespace:"address",scope:"portfolio"});const Ef=new class extends hu{load(){return this.loaderPromise||(this.loaderPromise=new Promise((e=>{yf.cachedSubscribe({namespace:"chains",body:{scope:["info"],payload:{}},onData:({value:t})=>{t&&e(t)}})})).then((e=>{const t=new Vl({networks:e});return this.setState({networks:t}),t}))),this.loaderPromise}constructor(...e){super(...e),r(cu)(this,"loaderPromise",null)}}({networks:null}),xf=["from","to","nonce","data","value","chainId","type","accessList","gasLimit","gasPrice","maxPriorityFeePerGas","maxFeePerGas"];function Sf(e){const t={};for(const r of xf){const n=r;void 0!==e[n]&&(t[n]=e[n])}return e.gas&&(t.gasLimit=e.gas),e.chainId&&"string"==typeof e.chainId&&(t.chainId=parseInt(e.chainId)),t}function Cf(e){return null!=e&&""!==e}function kf(e){return function(e){return Cf(e.maxFeePerGas)&&Cf(e.maxPriorityFeePerGas)}(e)||function(e){return Cf(e.gasPrice)}(e)}function _f(e,t){if(t.eip1559){const{eip1559:r}=t;return Object.assign(e,{maxFeePerGas:String(a.utils.hexValue(r.max_fee)),maxPriorityFeePerGas:String(a.utils.hexValue(r.priority_fee))})}if(null!=t.classic)return Object.assign(e,{gasPrice:String(t.classic)});throw new Error("gasPrice object must include either classic or eip1559 field")}const Pf=new class{get(){return this.latestValue?Promise.resolve(this.latestValue):this.initialPromise?this.initialPromise:this.initiateRequest()}initiateRequest(){return this.initialPromise=new Promise((e=>{const{unsubscribe:t}=yf.cachedSubscribe({namespace:"gas",body:{scope:["chain-prices"],payload:{}},onData:({value:t})=>{t&&(this.latestValue||e(t),this.latestValue=t)},mergeStrategy:Rh});this.unsubscribe=t})),this.initialPromise}constructor(){r(cu)(this,"latestValue",null),r(cu)(this,"initialPromise",null),r(cu)(this,"unsubscribe",null)}};async function Rf(e){const t=await async function(e){const{chainId:t}=e;if(!t)throw new Error("Transaction object must have a chainId property");const[r,n]=await Promise.all([Ef.load(),Pf.get()]),i=r.getChainById(a.utils.hexValue(t)),o=n[i.toString()];if(!o)throw new Error(`Gas Price info for ${i.toString()} not found`);return o}(e),{eip1559:r,classic:n}=t.info;_f(e,{eip1559:r?.fast,classic:n?.fast})}var Of,If={};If=function(e,t){for(var r=-1,n=null==e?0:e.length,i=Array(n);++r<n;)i[r]=t(e[r],r,e);return i};var Nf,Tf={},Mf={};Nf=function(){this.__data__=new Al,this.size=0};var Bf;Bf=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r};var Ff;Ff=function(e){return this.__data__.get(e)};var Lf;Lf=function(e){return this.__data__.has(e)};var jf;function Df(e){var t=this.__data__=new Al(e);this.size=t.size}jf=function(e,t){var r=this.__data__;if(r instanceof Al){var n=r.__data__;if(!Ol||n.length<199)return n.push([e,t]),this.size=++r.size,this;r=this.__data__=new Fu(n)}return r.set(e,t),this.size=r.size,this},Df.prototype.clear=Nf,Df.prototype.delete=Bf,Df.prototype.get=Ff,Df.prototype.has=Lf,Df.prototype.set=jf,Mf=Df;var Uf={};Uf=function(e,t){for(var r=-1,n=null==e?0:e.length;++r<n&&!1!==t(e[r],r,e););return e};var zf={},qf={},Kf={},Gf=function(){try{var e=Du(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();Kf=Gf,qf=function(e,t,r){"__proto__"==t&&Kf?Kf(e,t,{configurable:!0,enumerable:!0,value:r,writable:!0}):e[t]=r};var Wf=Object.prototype.hasOwnProperty;zf=function(e,t,r){var n=e[t];Wf.call(e,t)&&Sl(n,r)&&(void 0!==r||t in e)||qf(e,t,r)};var Hf={},Jf={};Jf=function(e,t,r,n){var i=!r;r||(r={});for(var o=-1,s=t.length;++o<s;){var a=t[o],c=n?n(r[a],e[a],a,r,e):void 0;void 0===c&&(c=e[a]),i?qf(r,a,c):zf(r,a,c)}return r};var Vf={},Qf={},Zf={};Zf=function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n};var Yf={},Xf={},$f={};$f=function(e){return null!=e&&"object"==typeof e};Xf=function(e){return $f(e)&&"[object Arguments]"==qu(e)};var ed=Object.prototype,td=ed.hasOwnProperty,rd=ed.propertyIsEnumerable,nd=Xf(function(){return arguments}())?Xf:function(e){return $f(e)&&td.call(e,"callee")&&!rd.call(e,"callee")};Yf=nd;var id={},od=Array.isArray;id=od;var sd=o("icXFK"),ad={},cd=/^(?:0|[1-9]\d*)$/;ad=function(e,t){var r=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==r||"symbol"!=r&&cd.test(e))&&e>-1&&e%1==0&&e<t};var ud,ld={},hd={};hd=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991};var fd={};fd["[object Float32Array]"]=fd["[object Float64Array]"]=fd["[object Int8Array]"]=fd["[object Int16Array]"]=fd["[object Int32Array]"]=fd["[object Uint8Array]"]=fd["[object Uint8ClampedArray]"]=fd["[object Uint16Array]"]=fd["[object Uint32Array]"]=!0,fd["[object Arguments]"]=fd["[object Array]"]=fd["[object ArrayBuffer]"]=fd["[object Boolean]"]=fd["[object DataView]"]=fd["[object Date]"]=fd["[object Error]"]=fd["[object Function]"]=fd["[object Map]"]=fd["[object Number]"]=fd["[object Object]"]=fd["[object RegExp]"]=fd["[object Set]"]=fd["[object String]"]=fd["[object WeakMap]"]=!1,ud=function(e){return $f(e)&&hd(e.length)&&!!fd[qu(e)]};var dd={};dd=function(e){return function(t){return e(t)}};var pd=(_p=o("g4FAe"))&&_p.isTypedArray,gd=pd?dd(pd):ud;ld=gd;var md=Object.prototype.hasOwnProperty;Qf=function(e,t){var r=id(e),n=!r&&Yf(e),i=!r&&!n&&sd(e),o=!r&&!n&&!i&&ld(e),s=r||n||i||o,a=s?Zf(e.length,String):[],c=a.length;for(var u in e)!t&&!md.call(e,u)||s&&("length"==u||i&&("offset"==u||"parent"==u)||o&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||ad(u,c))||a.push(u);return a};var yd={},vd={},wd=Object.prototype;vd=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||wd)};var bd={},Ad={};var Ed=(Ad=function(e,t){return function(r){return e(t(r))}})(Object.keys,Object);bd=Ed;var xd=Object.prototype.hasOwnProperty;yd=function(e){if(!vd(e))return bd(e);var t=[];for(var r in Object(e))xd.call(e,r)&&"constructor"!=r&&t.push(r);return t};var Sd={};Sd=function(e){return null!=e&&hd(e.length)&&!zu(e)},Vf=function(e){return Sd(e)?Qf(e):yd(e)},Hf=function(e,t){return e&&Jf(t,Vf(t),e)};var Cd={},kd={},_d={},Pd={};Pd=function(e){var t=[];if(null!=e)for(var r in Object(e))t.push(r);return t};var Rd=Object.prototype.hasOwnProperty;_d=function(e){if(!Yu(e))return Pd(e);var t=vd(e),r=[];for(var n in e)("constructor"!=n||!t&&Rd.call(e,n))&&r.push(n);return r},kd=function(e){return Sd(e)?Qf(e,!0):_d(e)},Cd=function(e,t){return e&&Jf(t,kd(t),e)};var Od=o("arjK4"),Id={};Id=function(e,t){var r=-1,n=e.length;for(t||(t=Array(n));++r<n;)t[r]=e[r];return t};var Nd={},Td={},Md={};Md=function(e,t){for(var r=-1,n=null==e?0:e.length,i=0,o=[];++r<n;){var s=e[r];t(s,r,e)&&(o[i++]=s)}return o};var Bd;Bd=function(){return[]};var Fd=Object.prototype.propertyIsEnumerable,Ld=Object.getOwnPropertySymbols;Td=Ld?function(e){return null==e?[]:(e=Object(e),Md(Ld(e),(function(t){return Fd.call(e,t)})))}:Bd,Nd=function(e,t){return Jf(e,Td(e),t)};var jd={},Dd={},Ud={};Ud=function(e,t){for(var r=-1,n=t.length,i=e.length;++r<n;)e[i+r]=t[r];return e};var zd={},qd=Ad(Object.getPrototypeOf,Object);zd=qd;var Kd=Object.getOwnPropertySymbols;Dd=Kd?function(e){for(var t=[];e;)Ud(t,Td(e)),e=zd(e);return t}:Bd,jd=function(e,t){return Jf(e,Dd(e),t)};var Gd,Wd={};Wd=function(e,t,r){var n=t(e);return id(e)?n:Ud(n,r(e))},Gd=function(e){return Wd(e,Vf,Td)};var Hd={};Hd=function(e){return Wd(e,kd,Dd)};var Jd={},Vd={};Il=o("dV0Jg");Vd=Du(Il,"DataView");var Qd={};Il=o("dV0Jg");Qd=Du(Il,"Promise");var Zd={};Il=o("dV0Jg");Zd=Du(Il,"Set");var Yd={};Il=o("dV0Jg");Yd=Du(Il,"WeakMap");var Xd=nl(Vd),$d=nl(Ol),ep=nl(Qd),tp=nl(Zd),rp=nl(Yd),np=qu;(Vd&&"[object DataView]"!=np(new Vd(new ArrayBuffer(1)))||Ol&&"[object Map]"!=np(new Ol)||Qd&&"[object Promise]"!=np(Qd.resolve())||Zd&&"[object Set]"!=np(new Zd)||Yd&&"[object WeakMap]"!=np(new Yd))&&(np=function(e){var t=qu(e),r="[object Object]"==t?e.constructor:void 0,n=r?nl(r):"";if(n)switch(n){case Xd:return"[object DataView]";case $d:return"[object Map]";case ep:return"[object Promise]";case tp:return"[object Set]";case rp:return"[object WeakMap]"}return t}),Jd=np;var ip={},op=Object.prototype.hasOwnProperty;ip=function(e){var t=e.length,r=new e.constructor(t);return t&&"string"==typeof e[0]&&op.call(e,"index")&&(r.index=e.index,r.input=e.input),r};var sp={},ap={},cp={},up=(Il=o("dV0Jg")).Uint8Array;cp=up,ap=function(e){var t=new e.constructor(e.byteLength);return new cp(t).set(new cp(e)),t};var lp={};lp=function(e,t){var r=t?ap(e.buffer):e.buffer;return new e.constructor(r,e.byteOffset,e.byteLength)};var hp={},fp=/\w*$/;hp=function(e){var t=new e.constructor(e.source,fp.exec(e));return t.lastIndex=e.lastIndex,t};var dp={},pp=Mu?Mu.prototype:void 0,gp=pp?pp.valueOf:void 0;dp=function(e){return gp?Object(gp.call(e)):{}};var mp={};mp=function(e,t){var r=t?ap(e.buffer):e.buffer;return new e.constructor(r,e.byteOffset,e.length)};sp=function(e,t,r){var n=e.constructor;switch(t){case"[object ArrayBuffer]":return ap(e);case"[object Boolean]":case"[object Date]":return new n(+e);case"[object DataView]":return lp(e,r);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return mp(e,r);case"[object Map]":case"[object Set]":return new n;case"[object Number]":case"[object String]":return new n(e);case"[object RegExp]":return hp(e);case"[object Symbol]":return dp(e)}};var yp={},vp={},wp=Object.create,bp=function(){function e(){}return function(t){if(!Yu(t))return{};if(wp)return wp(t);e.prototype=t;var r=new e;return e.prototype=void 0,r}}();vp=bp,yp=function(e){return"function"!=typeof e.constructor||vd(e)?{}:vp(zd(e))};sd=o("icXFK");var Ap,Ep={};Ap=function(e){return $f(e)&&"[object Map]"==Jd(e)};var xp=(_p=o("g4FAe"))&&_p.isMap,Sp=xp?dd(xp):Ap;Ep=Sp;var Cp,kp={};Cp=function(e){return $f(e)&&"[object Set]"==Jd(e)};var _p,Pp=(_p=o("g4FAe"))&&_p.isSet,Rp=Pp?dd(Pp):Cp;kp=Rp;var Op={};Op["[object Arguments]"]=Op["[object Array]"]=Op["[object ArrayBuffer]"]=Op["[object DataView]"]=Op["[object Boolean]"]=Op["[object Date]"]=Op["[object Float32Array]"]=Op["[object Float64Array]"]=Op["[object Int8Array]"]=Op["[object Int16Array]"]=Op["[object Int32Array]"]=Op["[object Map]"]=Op["[object Number]"]=Op["[object Object]"]=Op["[object RegExp]"]=Op["[object Set]"]=Op["[object String]"]=Op["[object Symbol]"]=Op["[object Uint8Array]"]=Op["[object Uint8ClampedArray]"]=Op["[object Uint16Array]"]=Op["[object Uint32Array]"]=!0,Op["[object Error]"]=Op["[object Function]"]=Op["[object WeakMap]"]=!1,Tf=function e(t,r,n,i,o,s){var a,c=1&r,u=2&r,l=4&r;if(n&&(a=o?n(t,i,o,s):n(t)),void 0!==a)return a;if(!Yu(t))return t;var h=id(t);if(h){if(a=ip(t),!c)return Id(t,a)}else{var f=Jd(t),d="[object Function]"==f||"[object GeneratorFunction]"==f;if(sd(t))return Od(t,c);if("[object Object]"==f||"[object Arguments]"==f||d&&!o){if(a=u||d?{}:yp(t),!c)return u?jd(t,Cd(a,t)):Nd(t,Hf(a,t))}else{if(!Op[f])return o?t:{};a=sp(t,f,c)}}s||(s=new Mf);var p=s.get(t);if(p)return p;s.set(t,a),kp(t)?t.forEach((function(i){a.add(e(i,r,n,i,t,s))})):Ep(t)&&t.forEach((function(i,o){a.set(o,e(i,r,n,o,t,s))}));var g=h?void 0:(l?u?Hd:Gd:u?kd:Vf)(t);return Uf(g||t,(function(i,o){g&&(i=t[o=i]),zf(a,o,e(i,r,n,o,t,s))})),a};var Ip={},Np={},Tp={},Mp={};Mp=function(e){return"symbol"==typeof e||$f(e)&&"[object Symbol]"==qu(e)};var Bp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Fp=/^\w*$/;Tp=function(e,t){if(id(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!Mp(e))||(Fp.test(e)||!Bp.test(e)||null!=t&&e in Object(t))};var Lp={};var jp=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Dp=/\\(\\)?/g,Up=function(e){var t=Bu(e,(function(e){return 500===r.size&&r.clear(),e})),r=t.cache;return t}((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(jp,(function(e,r,n,i){t.push(n?i.replace(Dp,"$1"):r||e)})),t}));Lp=Up;var zp={},qp={},Kp=Mu?Mu.prototype:void 0,Gp=Kp?Kp.toString:void 0;qp=function e(t){if("string"==typeof t)return t;if(id(t))return If(t,e)+"";if(Mp(t))return Gp?Gp.call(t):"";var r=t+"";return"0"==r&&1/t==-Infinity?"-0":r},zp=function(e){return null==e?"":qp(e)},Np=function(e,t){return id(e)?e:Tp(e,t)?[e]:Lp(zp(e))};var Wp={};Wp=function(e){var t=null==e?0:e.length;return t?e[t-1]:void 0};var Hp={},Jp={},Vp={};Vp=function(e){if("string"==typeof e||Mp(e))return e;var t=e+"";return"0"==t&&1/e==-Infinity?"-0":t},Jp=function(e,t){for(var r=0,n=(t=Np(t,e)).length;null!=e&&r<n;)e=e[Vp(t[r++])];return r&&r==n?e:void 0};var Qp={};Qp=function(e,t,r){var n=-1,i=e.length;t<0&&(t=-t>i?0:i+t),(r=r>i?i:r)<0&&(r+=i),i=t>r?0:r-t>>>0,t>>>=0;for(var o=Array(i);++n<i;)o[n]=e[n+t];return o},Hp=function(e,t){return t.length<2?e:Jp(e,Qp(t,0,-1))},Ip=function(e,t){return t=Np(t,e),null==(e=Hp(e,t))||delete e[Vp(Wp(t))]};var Zp,Yp={},Xp=Function.prototype,$p=Object.prototype,eg=Xp.toString,tg=$p.hasOwnProperty,rg=eg.call(Object);Yp=function(e){if(!$f(e)||"[object Object]"!=qu(e))return!1;var t=zd(e);if(null===t)return!0;var r=tg.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&eg.call(r)==rg},Zp=function(e){return Yp(e)?void 0:e};var ng,ig,og={},sg=Mu?Mu.isConcatSpreadable:void 0;ig=function(e){return id(e)||Yf(e)||!!(sg&&e&&e[sg])},og=function e(t,r,n,i,o){var s=-1,a=t.length;for(n||(n=ig),o||(o=[]);++s<a;){var c=t[s];r>0&&n(c)?r>1?e(c,r-1,n,i,o):Ud(o,c):i||(o[o.length]=c)}return o},ng=function(e){return(null==e?0:e.length)?og(e,1):[]};var ag={},cg={};cg=function(e,t,r){switch(r.length){case 0:return e.call(t);case 1:return e.call(t,r[0]);case 2:return e.call(t,r[0],r[1]);case 3:return e.call(t,r[0],r[1],r[2])}return e.apply(t,r)};var ug=Math.max;ag=function(e,t,r){return t=ug(void 0===t?e.length-1:t,0),function(){for(var n=arguments,i=-1,o=ug(n.length-t,0),s=Array(o);++i<o;)s[i]=n[t+i];i=-1;for(var a=Array(t+1);++i<t;)a[i]=n[i];return a[t]=r(s),cg(e,this,a)}};var lg,hg={},fg={};fg=function(e){return function(){return e}};lg=Kf?function(e,t){return Kf(e,"toString",{configurable:!0,enumerable:!1,value:fg(t),writable:!0})}:function(e){return e};var dg=Date.now;var pg=function(e){var t=0,r=0;return function(){var n=dg(),i=16-(n-r);if(r=n,i>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}(lg);hg=pg;var gg=function(e){return hg(ag(e,void 0,ng),e+"")}((function(e,t){var r={};if(null==e)return r;var n=!1;t=If(t,(function(t){return t=Np(t,e),n||(n=t.length>1),t})),Jf(e,Hd(e),r),n&&(r=Tf(r,7,Zp));for(var i=t.length;i--;)Ip(r,t[i]);return r}));function mg(e){if("string"!=typeof e){if(function(e){return Boolean(e.domain&&e.message&&e.types)}(e))return e;throw new Error("typedData input object is incomplete")}try{return JSON.parse(e)}catch(e){throw new Error("Failed to parse typedData input")}}function yg(e){const t=mg(e);return{...t,types:r(Of)(t.types,["EIP712Domain"])}}Of=gg;var vg={},wg=vg&&vg.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),bg=vg&&vg.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),Ag=vg&&vg.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&wg(t,e,r);return bg(t,e),t};Object.defineProperty(vg,"__esModule",{value:!0}),vg.formatBytes32String=vg.Utf8ErrorFuncs=vg.toUtf8String=vg.toUtf8CodePoints=vg.toUtf8Bytes=vg._toEscapedUtf8String=vg.nameprep=vg.hexDataSlice=vg.hexDataLength=vg.hexZeroPad=vg.hexValue=vg.hexStripZeros=vg.hexConcat=vg.isHexString=vg.hexlify=vg.base64=vg.base58=vg.TransactionDescription=vg.LogDescription=vg.Interface=vg.SigningKey=vg.HDNode=vg.defaultPath=vg.isBytesLike=vg.isBytes=vg.zeroPad=vg.stripZeros=vg.concat=vg.arrayify=vg.shallowCopy=vg.resolveProperties=vg.getStatic=vg.defineReadOnly=vg.deepCopy=vg.checkProperties=vg.poll=vg.fetchJson=vg._fetchData=vg.RLP=vg.Logger=vg.checkResultErrors=vg.FormatTypes=vg.ParamType=vg.FunctionFragment=vg.EventFragment=vg.ErrorFragment=vg.ConstructorFragment=vg.Fragment=vg.defaultAbiCoder=vg.AbiCoder=void 0,vg.Indexed=vg.Utf8ErrorReason=vg.UnicodeNormalizationForm=vg.SupportedAlgorithm=vg.mnemonicToSeed=vg.isValidMnemonic=vg.entropyToMnemonic=vg.mnemonicToEntropy=vg.getAccountPath=vg.verifyTypedData=vg.verifyMessage=vg.recoverPublicKey=vg.computePublicKey=vg.recoverAddress=vg.computeAddress=vg.getJsonWalletAddress=vg.TransactionTypes=vg.serializeTransaction=vg.parseTransaction=vg.accessListify=vg.joinSignature=vg.splitSignature=vg.soliditySha256=vg.solidityKeccak256=vg.solidityPack=vg.shuffled=vg.randomBytes=vg.sha512=vg.sha256=vg.ripemd160=vg.keccak256=vg.computeHmac=vg.commify=vg.parseUnits=vg.formatUnits=vg.parseEther=vg.formatEther=vg.isAddress=vg.getCreate2Address=vg.getContractAddress=vg.getIcapAddress=vg.getAddress=vg._TypedDataEncoder=vg.id=vg.isValidName=vg.namehash=vg.hashMessage=vg.dnsEncode=vg.parseBytes32String=void 0,Object.defineProperty(vg,"AbiCoder",{enumerable:!0,get:function(){return Dt}}),Object.defineProperty(vg,"checkResultErrors",{enumerable:!0,get:function(){return ve}}),Object.defineProperty(vg,"ConstructorFragment",{enumerable:!0,get:function(){return ue}}),Object.defineProperty(vg,"defaultAbiCoder",{enumerable:!0,get:function(){return Ut}}),Object.defineProperty(vg,"ErrorFragment",{enumerable:!0,get:function(){return fe}}),Object.defineProperty(vg,"EventFragment",{enumerable:!0,get:function(){return oe}}),Object.defineProperty(vg,"FormatTypes",{enumerable:!0,get:function(){return ee}}),Object.defineProperty(vg,"Fragment",{enumerable:!0,get:function(){return ie}}),Object.defineProperty(vg,"FunctionFragment",{enumerable:!0,get:function(){return le}}),Object.defineProperty(vg,"Indexed",{enumerable:!0,get:function(){return Fr}}),Object.defineProperty(vg,"Interface",{enumerable:!0,get:function(){return Dr}}),Object.defineProperty(vg,"LogDescription",{enumerable:!0,get:function(){return Tr}}),Object.defineProperty(vg,"ParamType",{enumerable:!0,get:function(){return re}}),Object.defineProperty(vg,"TransactionDescription",{enumerable:!0,get:function(){return Mr}}),Object.defineProperty(vg,"getAddress",{enumerable:!0,get:function(){return Ne}}),Object.defineProperty(vg,"getCreate2Address",{enumerable:!0,get:function(){return Fe}}),Object.defineProperty(vg,"getContractAddress",{enumerable:!0,get:function(){return Be}}),Object.defineProperty(vg,"getIcapAddress",{enumerable:!0,get:function(){return Me}}),Object.defineProperty(vg,"isAddress",{enumerable:!0,get:function(){return Te}});var Eg=Ag(o("7WFd0"));vg.base64=Eg,Object.defineProperty(vg,"base58",{enumerable:!0,get:function(){return ki}});l=o("jNZoB");Object.defineProperty(vg,"arrayify",{enumerable:!0,get:function(){return l.arrayify}}),Object.defineProperty(vg,"concat",{enumerable:!0,get:function(){return l.concat}}),Object.defineProperty(vg,"hexConcat",{enumerable:!0,get:function(){return l.hexConcat}}),Object.defineProperty(vg,"hexDataSlice",{enumerable:!0,get:function(){return l.hexDataSlice}}),Object.defineProperty(vg,"hexDataLength",{enumerable:!0,get:function(){return l.hexDataLength}}),Object.defineProperty(vg,"hexlify",{enumerable:!0,get:function(){return l.hexlify}}),Object.defineProperty(vg,"hexStripZeros",{enumerable:!0,get:function(){return l.hexStripZeros}}),Object.defineProperty(vg,"hexValue",{enumerable:!0,get:function(){return l.hexValue}}),Object.defineProperty(vg,"hexZeroPad",{enumerable:!0,get:function(){return l.hexZeroPad}}),Object.defineProperty(vg,"isBytes",{enumerable:!0,get:function(){return l.isBytes}}),Object.defineProperty(vg,"isBytesLike",{enumerable:!0,get:function(){return l.isBytesLike}}),Object.defineProperty(vg,"isHexString",{enumerable:!0,get:function(){return l.isHexString}}),Object.defineProperty(vg,"joinSignature",{enumerable:!0,get:function(){return l.joinSignature}}),Object.defineProperty(vg,"zeroPad",{enumerable:!0,get:function(){return l.zeroPad}}),Object.defineProperty(vg,"splitSignature",{enumerable:!0,get:function(){return l.splitSignature}}),Object.defineProperty(vg,"stripZeros",{enumerable:!0,get:function(){return l.stripZeros}}),Object.defineProperty(vg,"_TypedDataEncoder",{enumerable:!0,get:function(){return gr.TypedDataEncoder}}),Object.defineProperty(vg,"dnsEncode",{enumerable:!0,get:function(){return dr}}),Object.defineProperty(vg,"hashMessage",{enumerable:!0,get:function(){return pr}}),Object.defineProperty(vg,"id",{enumerable:!0,get:function(){return zt}}),Object.defineProperty(vg,"isValidName",{enumerable:!0,get:function(){return hr}}),Object.defineProperty(vg,"namehash",{enumerable:!0,get:function(){return fr}}),Object.defineProperty(vg,"defaultPath",{enumerable:!0,get:function(){return"m/44'/60'/0'/0/0"}}),Object.defineProperty(vg,"entropyToMnemonic",{enumerable:!0,get:function(){return Xi}}),Object.defineProperty(vg,"getAccountPath",{enumerable:!0,get:function(){return eo}}),Object.defineProperty(vg,"HDNode",{enumerable:!0,get:function(){return Qi}}),Object.defineProperty(vg,"isValidMnemonic",{enumerable:!0,get:function(){return $i}}),Object.defineProperty(vg,"mnemonicToEntropy",{enumerable:!0,get:function(){return Yi}}),Object.defineProperty(vg,"mnemonicToSeed",{enumerable:!0,get:function(){return Zi}}),Object.defineProperty(vg,"getJsonWalletAddress",{enumerable:!0,get:function(){return vo}}),Object.defineProperty(vg,"keccak256",{enumerable:!0,get:function(){return Se}});h=o("3Qchy");Object.defineProperty(vg,"Logger",{enumerable:!0,get:function(){return h.Logger}}),Object.defineProperty(vg,"computeHmac",{enumerable:!0,get:function(){return Ti}}),Object.defineProperty(vg,"ripemd160",{enumerable:!0,get:function(){return Oi}}),Object.defineProperty(vg,"sha256",{enumerable:!0,get:function(){return Ii}}),Object.defineProperty(vg,"sha512",{enumerable:!0,get:function(){return Ni}}),Object.defineProperty(vg,"solidityKeccak256",{enumerable:!0,get:function(){return bc}}),Object.defineProperty(vg,"solidityPack",{enumerable:!0,get:function(){return wc}}),Object.defineProperty(vg,"soliditySha256",{enumerable:!0,get:function(){return Ac}}),Object.defineProperty(vg,"randomBytes",{enumerable:!0,get:function(){return io}}),Object.defineProperty(vg,"shuffled",{enumerable:!0,get:function(){return oo}}),Object.defineProperty(vg,"checkProperties",{enumerable:!0,get:function(){return B.checkProperties}}),Object.defineProperty(vg,"deepCopy",{enumerable:!0,get:function(){return B.deepCopy}}),Object.defineProperty(vg,"defineReadOnly",{enumerable:!0,get:function(){return B.defineReadOnly}}),Object.defineProperty(vg,"getStatic",{enumerable:!0,get:function(){return B.getStatic}}),Object.defineProperty(vg,"resolveProperties",{enumerable:!0,get:function(){return B.resolveProperties}}),Object.defineProperty(vg,"shallowCopy",{enumerable:!0,get:function(){return B.shallowCopy}});var xg=Ag(o("3hJ1y"));function Sg(e){const{privateKey:t}=e;return new a.Wallet(t)}function Cg(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];throw Error("[Immer] minified error nr: "+e+(r.length?" "+r.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function kg(e){return!!e&&!!e[fm]}function _g(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var r=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return r===Object||"function"==typeof r&&Function.toString.call(r)===dm}(e)||Array.isArray(e)||!!e[hm]||!!e.constructor[hm]||Mg(e)||Bg(e))}function Pg(e,t,r){void 0===r&&(r=!1),0===Rg(e)?(r?Object.keys:pm)(e).forEach((function(n){r&&"symbol"==typeof n||t(n,e[n],e)})):e.forEach((function(r,n){return t(n,r,e)}))}function Rg(e){var t=e[fm];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:Mg(e)?2:Bg(e)?3:0}function Og(e,t){return 2===Rg(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function Ig(e,t){return 2===Rg(e)?e.get(t):e[t]}function Ng(e,t,r){var n=Rg(e);2===n?e.set(t,r):3===n?(e.delete(t),e.add(r)):e[t]=r}function Tg(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function Mg(e){return am&&e instanceof Map}function Bg(e){return cm&&e instanceof Set}function Fg(e){return e.o||e.t}function Lg(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=gm(e);delete t[fm];for(var r=pm(t),n=0;n<r.length;n++){var i=r[n],o=t[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(t[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:e[i]})}return Object.create(Object.getPrototypeOf(e),t)}function jg(e,t){return void 0===t&&(t=!1),Ug(e)||kg(e)||!_g(e)||(Rg(e)>1&&(e.set=e.add=e.clear=e.delete=Dg),Object.freeze(e),t&&Pg(e,(function(e,t){return jg(t,!0)}),!0)),e}function Dg(){Cg(2)}function Ug(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function zg(e){var t=mm[e];return t||Cg(18,e),t}function qg(){return om}function Kg(e,t){t&&(zg("Patches"),e.u=[],e.s=[],e.v=t)}function Gg(e){Wg(e),e.p.forEach(Jg),e.p=null}function Wg(e){e===om&&(om=e.l)}function Hg(e){return om={p:[],l:om,h:e,m:!0,_:0}}function Jg(e){var t=e[fm];0===t.i||1===t.i?t.j():t.O=!0}function Vg(e,t){t._=t.p.length;var r=t.p[0],n=void 0!==e&&e!==r;return t.h.g||zg("ES5").S(t,e,n),n?(r[fm].P&&(Gg(t),Cg(4)),_g(e)&&(e=Qg(t,e),t.l||Yg(t,e)),t.u&&zg("Patches").M(r[fm].t,e,t.u,t.s)):e=Qg(t,r,[]),Gg(t),t.u&&t.v(t.u,t.s),e!==lm?e:void 0}function Qg(e,t,r){if(Ug(t))return t;var n=t[fm];if(!n)return Pg(t,(function(i,o){return Zg(e,n,t,i,o,r)}),!0),t;if(n.A!==e)return t;if(!n.P)return Yg(e,n.t,!0),n.t;if(!n.I){n.I=!0,n.A._--;var i=4===n.i||5===n.i?n.o=Lg(n.k):n.o;Pg(3===n.i?new Set(i):i,(function(t,o){return Zg(e,n,i,t,o,r)})),Yg(e,i,!1),r&&e.u&&zg("Patches").R(n,r,e.u,e.s)}return n.o}function Zg(e,t,r,n,i,o){if(kg(i)){var s=Qg(e,i,o&&t&&3!==t.i&&!Og(t.D,n)?o.concat(n):void 0);if(Ng(r,n,s),!kg(s))return;e.m=!1}if(_g(i)&&!Ug(i)){if(!e.h.F&&e._<1)return;Qg(e,i),t&&t.A.l||Yg(e,i)}}function Yg(e,t,r){void 0===r&&(r=!1),e.h.F&&e.m&&jg(t,r)}function Xg(e,t){var r=e[fm];return(r?Fg(r):e)[t]}function $g(e,t){if(t in e)for(var r=Object.getPrototypeOf(e);r;){var n=Object.getOwnPropertyDescriptor(r,t);if(n)return n;r=Object.getPrototypeOf(r)}}function em(e){e.P||(e.P=!0,e.l&&em(e.l))}function tm(e){e.o||(e.o=Lg(e.t))}function rm(e,t,r){var n=Mg(t)?zg("MapSet").N(t,r):Bg(t)?zg("MapSet").T(t,r):e.g?function(e,t){var r=Array.isArray(e),n={i:r?1:0,A:t?t.A:qg(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},i=n,o=ym;r&&(i=[n],o=vm);var s=Proxy.revocable(i,o),a=s.revoke,c=s.proxy;return n.k=c,n.j=a,c}(t,r):zg("ES5").J(t,r);return(r?r.A:qg()).p.push(n),n}function nm(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return Lg(e)}vg.RLP=xg,Object.defineProperty(vg,"computePublicKey",{enumerable:!0,get:function(){return qn}}),Object.defineProperty(vg,"recoverPublicKey",{enumerable:!0,get:function(){return zn}}),Object.defineProperty(vg,"SigningKey",{enumerable:!0,get:function(){return Un}}),Object.defineProperty(vg,"formatBytes32String",{enumerable:!0,get:function(){return At}}),Object.defineProperty(vg,"nameprep",{enumerable:!0,get:function(){return Tt}}),Object.defineProperty(vg,"parseBytes32String",{enumerable:!0,get:function(){return Et}}),Object.defineProperty(vg,"_toEscapedUtf8String",{enumerable:!0,get:function(){return yt}}),Object.defineProperty(vg,"toUtf8Bytes",{enumerable:!0,get:function(){return gt}}),Object.defineProperty(vg,"toUtf8CodePoints",{enumerable:!0,get:function(){return bt}}),Object.defineProperty(vg,"toUtf8String",{enumerable:!0,get:function(){return wt}}),Object.defineProperty(vg,"Utf8ErrorFuncs",{enumerable:!0,get:function(){return dt}}),Object.defineProperty(vg,"accessListify",{enumerable:!0,get:function(){return ei}}),Object.defineProperty(vg,"computeAddress",{enumerable:!0,get:function(){return Zn}}),Object.defineProperty(vg,"parseTransaction",{enumerable:!0,get:function(){return si}}),Object.defineProperty(vg,"recoverAddress",{enumerable:!0,get:function(){return Yn}}),Object.defineProperty(vg,"serializeTransaction",{enumerable:!0,get:function(){return ii}}),Object.defineProperty(vg,"TransactionTypes",{enumerable:!0,get:function(){return Gn}}),Object.defineProperty(vg,"commify",{enumerable:!0,get:function(){return Sc}}),Object.defineProperty(vg,"formatEther",{enumerable:!0,get:function(){return _c}}),Object.defineProperty(vg,"parseEther",{enumerable:!0,get:function(){return Pc}}),Object.defineProperty(vg,"formatUnits",{enumerable:!0,get:function(){return Cc}}),Object.defineProperty(vg,"parseUnits",{enumerable:!0,get:function(){return kc}}),Object.defineProperty(vg,"verifyMessage",{enumerable:!0,get:function(){return Si.verifyMessage}}),Object.defineProperty(vg,"verifyTypedData",{enumerable:!0,get:function(){return Si.verifyTypedData}}),Object.defineProperty(vg,"_fetchData",{enumerable:!0,get:function(){return Zo._fetchData}}),Object.defineProperty(vg,"fetchJson",{enumerable:!0,get:function(){return Zo.fetchJson}}),Object.defineProperty(vg,"poll",{enumerable:!0,get:function(){return Zo.poll}}),Object.defineProperty(vg,"SupportedAlgorithm",{enumerable:!0,get:function(){return _i}}),Object.defineProperty(vg,"UnicodeNormalizationForm",{enumerable:!0,get:function(){return ct}}),Object.defineProperty(vg,"Utf8ErrorReason",{enumerable:!0,get:function(){return lt}});var im,om,sm="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),am="undefined"!=typeof Map,cm="undefined"!=typeof Set,um="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,lm=sm?Symbol.for("immer-nothing"):((im={})["immer-nothing"]=!0,im),hm=sm?Symbol.for("immer-draftable"):"__$immer_draftable",fm=sm?Symbol.for("immer-state"):"__$immer_state",dm=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),pm="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,gm=Object.getOwnPropertyDescriptors||function(e){var t={};return pm(e).forEach((function(r){t[r]=Object.getOwnPropertyDescriptor(e,r)})),t},mm={},ym={get:function(e,t){if(t===fm)return e;var r,n,i,o=Fg(e);if(!Og(o,t))return r=e,(i=$g(o,t))?"value"in i?i.value:null===(n=i.get)||void 0===n?void 0:n.call(r.k):void 0;var s=o[t];return e.I||!_g(s)?s:s===Xg(e.t,t)?(tm(e),e.o[t]=rm(e.A.h,s,e)):s},has:function(e,t){return t in Fg(e)},ownKeys:function(e){return Reflect.ownKeys(Fg(e))},set:function(e,t,r){var n=$g(Fg(e),t);if(null==n?void 0:n.set)return n.set.call(e.k,r),!0;if(!e.P){var i=Xg(Fg(e),t),o=null==i?void 0:i[fm];if(o&&o.t===r)return e.o[t]=r,e.D[t]=!1,!0;if(Tg(r,i)&&(void 0!==r||Og(e.t,t)))return!0;tm(e),em(e)}return e.o[t]===r&&"number"!=typeof r&&(void 0!==r||t in e.o)||(e.o[t]=r,e.D[t]=!0,!0)},deleteProperty:function(e,t){return void 0!==Xg(e.t,t)||t in e.t?(e.D[t]=!1,tm(e),em(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var r=Fg(e),n=Reflect.getOwnPropertyDescriptor(r,t);return n?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:n.enumerable,value:r[t]}:n},defineProperty:function(){Cg(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){Cg(12)}},vm={};Pg(ym,(function(e,t){vm[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),vm.deleteProperty=function(e,t){return vm.set.call(this,e,t,void 0)},vm.set=function(e,t,r){return ym.set.call(this,e[0],t,r,e[0])};var wm=new(function(){function e(e){var t=this;this.g=um,this.F=!0,this.produce=function(e,r,n){if("function"==typeof e&&"function"!=typeof r){var i=r;r=e;var o=t;return function(e){var t=this;void 0===e&&(e=i);for(var n=arguments.length,s=Array(n>1?n-1:0),a=1;a<n;a++)s[a-1]=arguments[a];return o.produce(e,(function(e){var n;return(n=r).call.apply(n,[t,e].concat(s))}))}}var s;if("function"!=typeof r&&Cg(6),void 0!==n&&"function"!=typeof n&&Cg(7),_g(e)){var a=Hg(t),c=rm(t,e,void 0),u=!0;try{s=r(c),u=!1}finally{u?Gg(a):Wg(a)}return"undefined"!=typeof Promise&&s instanceof Promise?s.then((function(e){return Kg(a,n),Vg(e,a)}),(function(e){throw Gg(a),e})):(Kg(a,n),Vg(s,a))}if(!e||"object"!=typeof e){if(void 0===(s=r(e))&&(s=e),s===lm&&(s=void 0),t.F&&jg(s,!0),n){var l=[],h=[];zg("Patches").M(e,s,l,h),n(l,h)}return s}Cg(21,e)},this.produceWithPatches=function(e,r){if("function"==typeof e)return function(r){for(var n=arguments.length,i=Array(n>1?n-1:0),o=1;o<n;o++)i[o-1]=arguments[o];return t.produceWithPatches(r,(function(t){return e.apply(void 0,[t].concat(i))}))};var n,i,o=t.produce(e,r,(function(e,t){n=e,i=t}));return"undefined"!=typeof Promise&&o instanceof Promise?o.then((function(e){return[e,n,i]})):[o,n,i]},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){var t;_g(e)||Cg(8),kg(e)&&(kg(t=e)||Cg(22,t),e=function e(t){if(!_g(t))return t;var r,n=t[fm],i=Rg(t);if(n){if(!n.P&&(n.i<4||!zg("ES5").K(n)))return n.t;n.I=!0,r=nm(t,i),n.I=!1}else r=nm(t,i);return Pg(r,(function(t,i){n&&Ig(n.t,t)===i||Ng(r,t,e(i))})),3===i?new Set(r):r}(t));var r=Hg(this),n=rm(this,e,void 0);return n[fm].C=!0,Wg(r),n},t.finishDraft=function(e,t){var r=(e&&e[fm]).A;return Kg(r,t),Vg(void 0,r)},t.setAutoFreeze=function(e){this.F=e},t.setUseProxies=function(e){e&&!um&&Cg(20),this.g=e},t.applyPatches=function(e,t){var r;for(r=t.length-1;r>=0;r--){var n=t[r];if(0===n.path.length&&"replace"===n.op){e=n.value;break}}r>-1&&(t=t.slice(r+1));var i=zg("Patches").$;return kg(e)?i(e,t):this.produce(e,(function(e){return i(e,t)}))},e}()),bm=wm.produce,Am=(wm.produceWithPatches.bind(wm),wm.setAutoFreeze.bind(wm),wm.setUseProxies.bind(wm),wm.applyPatches.bind(wm),wm.createDraft.bind(wm),wm.finishDraft.bind(wm),bm);function Em(e){return Am(e,(e=>{var t;e.privateKey="<privateKey>",e.mnemonic=(t=e.mnemonic)?{phrase:"<phrase>",path:t.path}:null}))}function xm(e){return Am(e,(e=>{e.walletContainer.wallets=e.walletContainer.wallets.map((e=>Em(e)))}))}function Sm(e){return e.map((e=>xm(e)))}let Cm;var km;async function _m({password:e,salt:t}){return(0,eu.keyFromPassword)(e,t)}async function Pm(e,t){const r=JSON.stringify(t);return function(e){const t=new Uint8Array(e);let r="";for(const e of t)r+=String.fromCharCode(e);return window.btoa(r)}(await window.crypto.subtle.encrypt({name:"AES-GCM",iv:new Uint8Array(12)},e,(new TextEncoder).encode(r)))}async function Rm(e,t){const r=function(e){const t=window.atob(e),r=new Uint8Array(t.length);for(let e=0;e<r.length;e++)r[e]=t.charCodeAt(e);return r.buffer}(t),n=await window.crypto.subtle.decrypt({name:"AES-GCM",iv:new Uint8Array(12)},e,r),i=(new TextDecoder).decode(new Uint8Array(n));return JSON.parse(i)}function Om(e){return{mnemonic:e.mnemonic,privateKey:e.privateKey,address:e.address,name:e instanceof a.Wallet?null:e.name}}function Im(e){return{mnemonic:e.mnemonic,privateKey:e.privateKey,address:e.address,name:null}}function Nm(e){const{address:t,privateKey:r,mnemonic:n,name:i}=e;if(t&&r)return{privateKey:r,address:t,mnemonic:n||null,name:i||null};if(r)return Im(new a.Wallet(r));if(n){return Im(a.Wallet.fromMnemonic(n.phrase,n.path))}return Im(a.Wallet.createRandom())}(km=Cm||(Cm={}))[km.privateKey=0]="privateKey",km[km.mnemonic=1]="mnemonic";let Tm=hm;class Mm{getFirstWallet(){return this.wallets[0]}getMnemonic(){return this.seedType===Cm.privateKey?null:this.getFirstWallet().mnemonic}addWallet(e){const t=this.getMnemonic();if(t&&(!e.mnemonic||e.mnemonic.phrase!==t.phrase))throw new Error("Added wallet must have the same mnemonic as other wallets in the WalletContainer");this.wallets.some((({address:t})=>t===e.address))||this.wallets.push(e)}removeWallet(e){const t=this.wallets.findIndex((t=>t.address.toLowerCase()===e.toLowerCase()));-1!==t&&this.wallets.splice(t,1)}getWalletByAddress(e){return this.wallets.find((t=>t.address.toLowerCase()===e.toLowerCase()))||null}toPlainObject(){return{...this,wallets:this.wallets.map((e=>Om(e)))}}constructor(){r(cu)(this,Tm,!0)}}class Bm extends Mm{static async create({wallets:e,encryptionKey:t}){const r=new Bm(e),{mnemonic:n}=r.getFirstWallet();if(n){const e=await Pm(t,n.phrase);r.wallets.forEach((t=>{t.mnemonic&&(t.mnemonic.phrase=e)}))}return r}constructor(e){super(),r(cu)(this,"seedType",Cm.mnemonic),e&&e.length?this.wallets=e.map((e=>{if(!e.mnemonic)throw new Error("Mnemonic container is expected to have a wallet with a mnemonic");return Nm(e)})):this.wallets=[Nm({})]}}class Fm extends Mm{addWallet(e){throw new Error("PrivateKeyWalletContainer cannot have multiple wallets")}constructor(e){if(super(),r(cu)(this,"seedType",Cm.privateKey),!e||e.length>1)throw new Error(`Wallets array is expected to have exactly one element, instead got: ${e?.length}`);this.wallets=e.map((e=>{if(!e.privateKey)throw new Error("PrivateKey container is expected to have a wallet with a privateKey");return Nm(new a.Wallet(e.privateKey))}))}}function Lm(e){return a.utils.getAddress(e)}function jm(e){return e.startsWith("0x")?e.toLowerCase():e}a.utils.defaultPath;function Dm(e){const t=e.match(/m\/44'\/60'\/0'\/0\/(\d+)/)?.[1];return t?Number(t):0}function Um(e){return"version"in e==!1}const zm={1:e=>{if(!Um(e))throw new Error("Wrong entry version");return{...e,version:1,preferences:{}}},2:e=>{if(1!==e?.version)throw new Error("Wrong entry version");var t,r;return{...e,version:2,preferences:{},permissions:(t=e.permissions,r=([e,t])=>[e,{addresses:"string"==typeof t?[t]:t}],Object.fromEntries(Object.entries(t).map(r)))}}},qm=e=>(Um(e)?0:e.version)+1;function Km(e){let t=e,r=qm(t);for(;r in zm;)t=zm[r](t),r=qm(t);return t}function Gm(e,t){if(t.seedType===Cm.privateKey)return"";const r=e=>`Wallet Group #${e}`;if(!e)return r(1);const n=e.walletManager.groups.filter((e=>e.walletContainer.seedType===Cm.mnemonic));function i(e){return-1!==n.findIndex((t=>t.name===e))}let o=r(e.walletManager.internalMnemonicGroupCounter+1);for(;i(o);)o=`${o} (2)`;return o}function Wm({name:e,walletContainer:t}){return{id:Lc(),walletContainer:t,lastBackedUp:null,name:e}}function Hm(e,{minLength:t=1}={}){return"string"!=typeof e?"Must be a string":e.length<t?"Must have at least one character":e.length>80?"Must be shorter than 80 characters":"debug-error-name"===e?"Debug: intentional debugging error":null}function Jm(e,t){for(let r=0;r<e.length;r++){const n=e[r];if(t(n))return[r,n]}return[-1,void 0]}class Vm{static verifyStateIntegrity(e){return Am(e,(e=>{!function(e){const{currentAddress:t}=e.walletManager;if(t){const r=jm(t);e.walletManager.groups.some((e=>e.walletContainer.wallets.some((e=>jm(e.address)===r))))||(e.walletManager.currentAddress=Vm.getFirstWallet(e)?.address||null)}}(e)}))}static getFirstWallet(e){return e.walletManager.groups[0]?.walletContainer.getFirstWallet()}static getWalletByAddress(e,t){for(const r of e.walletManager.groups){const e=r.walletContainer.getWalletByAddress(t);if(e)return e}return null}static createOrUpdateRecord(e,t){if(!e){const r=t.walletContainer.seedType===Cm.mnemonic;return{version:2,walletManager:{groups:[Wm({name:Gm(e,t.walletContainer),walletContainer:t.walletContainer})],currentAddress:t.walletContainer.getFirstWallet().address,internalMnemonicGroupCounter:r?1:0},transactions:[],permissions:{},preferences:{}}}return Am(e,(r=>{const{walletContainer:n}=t,{seedType:i}=n;if(i===Cm.privateKey){const{privateKey:t}=n.getFirstWallet();if(r.walletManager.groups.find((e=>e.walletContainer.getFirstWallet().privateKey===t)))return r;r.walletManager.internalMnemonicGroupCounter+=1,r.walletManager.groups.push(Wm({walletContainer:n,name:Gm(e,n)}))}else{if(i!==Cm.mnemonic)throw new Error("Unknown SeedType");{const t=n.getMnemonic();if(!t)throw new Error("Mnemonic not found");const i=r.walletManager.groups.find((e=>e.walletContainer.getMnemonic()?.phrase===t.phrase));i?(n.wallets.forEach((e=>{i.walletContainer.addWallet(e)})),i.walletContainer.wallets.sort(((e,t)=>Dm(e.mnemonic?.path||"")-Dm(t.mnemonic?.path||"")))):(r.walletManager.internalMnemonicGroupCounter+=1,r.walletManager.groups.push(Wm({walletContainer:n,name:Gm(e,n)})))}}}))}static async encryptRecord(e,t){return(0,eu.encrypt)(e,function(e){return Am(e,(e=>{e.walletManager.groups=e.walletManager.groups.map((e=>({...e,walletContainer:e.walletContainer.toPlainObject()})))}))}(t))}static async decryptRecord(e,t){return await(0,eu.decrypt)(e,t)}static async decryptAndRestoreRecord(e,t){const r=Km(await(0,eu.decrypt)(e,t));return r.walletManager.groups=r.walletManager.groups.map((e=>{const{seedType:t,wallets:r}=e.walletContainer;if(t===Cm.mnemonic)e.walletContainer=new Bm(r);else{if(t!==Cm.privateKey)throw new Error(`Unexpected SeedType: ${t}`);e.walletContainer=new Fm(r)}return e})),Vm.verifyStateIntegrity(r)}static async getRecoveryPhrase(e,{groupId:t,encryptionKey:r}){const n=e.walletManager.groups.find((e=>e.id===t));if(!n)throw new Error("Wallet Group not found");const i=n.walletContainer.getMnemonic();if(!i)throw new Error(`Missing mnemonic from wallet object for ${t}`);if(i.phrase.split(" ").length>3)return i;const o=await Rm(r,i.phrase);return{...i,phrase:o}}static setCurrentAddress(e,{address:t}){const r=Lm(t);return Am(e,(e=>{e.walletManager.currentAddress=r}))}static renameWalletGroup(e,{groupId:t,name:r}){return Am(e,(e=>{const n=e.walletManager.groups.find((e=>e.id===t));if(!n)throw new Error("Group not found");const i=Hm(r);if(i)throw new Error(i);n.name=r}))}static removeWalletGroup(e,{groupId:t}){return Am(e,(e=>{const[r,n]=Jm(e.walletManager.groups,(e=>e.id===t));if(!n)throw new Error("Group not found");const{currentAddress:i}=e.walletManager,o=n.walletContainer.wallets.some((e=>e.address===i));if(e.walletManager.groups.splice(r,1),o){const t=e.walletManager.groups[0]?.walletContainer.getFirstWallet().address;e.walletManager.currentAddress=t||null}}))}static removeAddress(e,{address:t}){return Am(e,(e=>{const r=jm(t),[n,i]=Jm(e.walletManager.groups,(e=>e.walletContainer.wallets.some((e=>jm(e.address)===r))));if(!i)throw new Error("Group not found");const o=1===i.walletContainer.wallets.length;if(i.walletContainer.seedType===Cm.mnemonic&&o)throw new Error("Removing last wallet from a wallet group is not allowed. You can remove the whole group");o?e.walletManager.groups.splice(n,1):i.walletContainer.removeWallet(t);const{currentAddress:s}=e.walletManager;s&&r===jm(s)&&(e.walletManager.currentAddress=o?e.walletManager.groups[0]?.walletContainer.getFirstWallet().address||null:i.walletContainer.getFirstWallet().address)}))}static renameAddress(e,{address:t,name:r}){const n=Hm(r,{minLength:0});if(n)throw new Error(n);const i=jm(t);return Am(e,(e=>{for(const t of e.walletManager.groups)for(const e of t.walletContainer.wallets)if(jm(e.address)===i)return void(e.name=r||null);throw new Error(`Wallet for ${t} not found`)}))}static addPermission(e,{address:t,origin:r}){return Am(e,(e=>{const n=e.permissions[r]?.addresses,i=new Set(n||[]);i.add(t);const o=Array.from(i);e.permissions[r]?e.permissions[r].addresses=o:e.permissions[r]={addresses:o}}))}static setChainForOrigin(e,{chain:t,origin:r}){return Am(e,(e=>{if(!e.permissions[r])throw new Error(`Permission for ${r} not found`);e.permissions[r].chain=t.toString()}))}static getChainForOrigin(e,{origin:t}){const r=e.permissions[t]?.chain;return ql(r||"ethereum")}static removeAllOriginPermissions(e){return Am(e,(e=>{e.permissions={}}))}static removePermission(e,{origin:t,address:r}){return Am(e,(e=>{if(t in e.permissions==!1)throw new Error(`Record for ${t} not found`);const n=e.permissions[t],{addresses:i}=n;r&&i.length>1?function(e,t){const r=e.indexOf(t);-1!==r&&e.splice(r,1)}(i,r):n.chain?e.permissions[t].addresses=[]:delete e.permissions[t]}))}static getPreferences(e){const{preferences:t}=e;return{showNetworkSwitchShortcut:!0,...t}}static setPreference(e,{preferences:t}){return Am(e,(e=>{Object.assign(e.preferences,t)}))}static setWalletNameFlag(e,{flag:t}){return Am(e,(e=>{const{walletNameFlags:r}=e.preferences,n=new Set(r).add(t);e.preferences.walletNameFlags=Array.from(n)}))}static removeWalletNameFlag(e,{flag:t}){return Am(e,(e=>{const{walletNameFlags:r}=e.preferences,n=new Set(r);n.delete(t),e.preferences.walletNameFlags=Array.from(n)}))}static updateLastBackedUp(e,{groupId:t,timestamp:r}){return Am(e,(e=>{const n=e.walletManager.groups.find((e=>e.id===t));if(!n)throw new Error(`Group with id ${t} not found`);n.lastBackedUp=r}))}}class Qm extends hu{async load(e){const t=await Ic(e);this.isReady=!0,t&&this.setState(t),this.pendingReadyStateListeners.forEach((e=>e()))}async ready(){return new Promise((e=>{if(this.isReady)e();else{const t=()=>{!function(e,t){const r=e.indexOf(t);-1!==r&&e.splice(r,1)}(this.pendingReadyStateListeners,t),e()};this.pendingReadyStateListeners.push(t)}}))}async getSavedState(){return this.ready().then((()=>this.getState()))}constructor(e,t){super({...t}),this.load(e),this.isReady=!1,this.pendingReadyStateListeners=[],this.on("change",(t=>Nc(e,t)))}}const Zm=new class extends Qm{async check(e,t){const r=this.getState()[e];if(!r)throw new Error(`Cannot read: record for ${e} not found`);return Vm.decryptRecord(t,r)}async read(e,t){const r=this.getState()[e];return r?await Vm.decryptAndRestoreRecord(t,r):null}async save(e,t,r){const n=await Vm.encryptRecord(t,r);this.setState((t=>Am(t,(t=>{t[e]=n}))))}deleteMany(e){this.setState((t=>Am(t,(t=>{for(const r of e)delete t[r]}))))}}("wallet",{});Object.assign(window,{walletStore:Zm});const Ym=uu();function Xm(e){return e.chainId?a.utils.hexValue(e.chainId):null}Object.assign(window,{emitter:Ym});const $m={origin:Ou};class ey{async syncWithWalletStore(){this.encryptionKey&&(await Zm.ready(),this.record=await Zm.read(this.id,this.encryptionKey),this.record&&this.emitter.emit("recordUpdated"))}async updateWalletStore(e){if(!this.encryptionKey)throw new Error("Cannot save pending wallet: encryptionKey is null");this.walletStore.save(this.id,this.encryptionKey,e)}async ready(){return this.walletStore.ready()}async getId(){return this.id}async userHeartbeat({context:e}){this.verifyInternalOrigin(e),Ym.emit("userActivity")}async verifyCredentials({params:{id:e,encryptionKey:t}}){await Zm.ready(),await Zm.check(e,t)}hasSeedPhraseEncryptionKey(){return Boolean(this.seedPhraseEncryptionKey)}removeSeedPhraseEncryptionKey(){this.seedPhraseEncryptionKey=null}setExpirationForSeedPhraseEncryptionKey(){setTimeout((()=>{this&&this.removeSeedPhraseEncryptionKey()}),6e4)}async updateCredentials({params:{id:e,encryptionKey:t,seedPhraseEncryptionKey:r}}){this.id=e,this.encryptionKey=t,this.seedPhraseEncryptionKey=r,this.setExpirationForSeedPhraseEncryptionKey(),await Zm.ready(),await this.syncWithWalletStore()}async testMethod({params:e}){return new Promise((t=>setTimeout((()=>t(`Hello, curious developer. Your value is ${e}`)),1500)))}async uiGenerateMnemonic(){if(!this.seedPhraseEncryptionKey)throw new Eu;return this.pendingWallet={groupId:null,walletContainer:await Bm.create({encryptionKey:this.seedPhraseEncryptionKey})},Em(this.pendingWallet.walletContainer.getFirstWallet())}async uiImportPrivateKey({params:e}){return this.pendingWallet={groupId:null,walletContainer:new Fm([{privateKey:e}])},Em(this.pendingWallet.walletContainer.getFirstWallet())}async uiImportSeedPhrase({params:e}){if(!this.seedPhraseEncryptionKey)throw new Eu;return this.pendingWallet={groupId:null,walletContainer:await Bm.create({wallets:e.map((e=>({mnemonic:e}))),encryptionKey:this.seedPhraseEncryptionKey})},Em(this.pendingWallet.walletContainer.getFirstWallet())}async getRecoveryPhrase({params:{groupId:e},context:t}){if(this.verifyInternalOrigin(t),this.ensureRecord(this.record),!this.seedPhraseEncryptionKey)throw new Eu;return await Vm.getRecoveryPhrase(this.record,{groupId:e,encryptionKey:this.seedPhraseEncryptionKey})}async uiGetCurrentWallet({context:e}){if(this.verifyInternalOrigin(e),!this.id)return null;const t=this.readCurrentAddress();if(this.record&&t){const e=Vm.getWalletByAddress(this.record,t)||Vm.getFirstWallet(this.record);return e?Em(e):null}return null}async uiGetWalletByAddress({context:e,params:{address:t}}){if(this.verifyInternalOrigin(e),!this.record)throw new Au;if(!t)throw new Error("Ilegal argument: address is required for this method");const r=Vm.getWalletByAddress(this.record,t);return r?Em(r):null}async savePendingWallet(){if(!this.pendingWallet)throw new Error("Cannot save pending wallet: pendingWallet is null");if(!this.encryptionKey)throw new Error("Cannot save pending wallet: encryptionKey is null");this.record=Vm.createOrUpdateRecord(this.record,this.pendingWallet),this.pendingWallet=null,this.seedPhraseEncryptionKey=null,this.updateWalletStore(this.record)}async acceptOrigin(e,t){this.ensureRecord(this.record),this.record=Vm.addPermission(this.record,{address:t,origin:e}),this.updateWalletStore(this.record),this.emitter.emit("permissionsUpdated")}async removeAllOriginPermissions({context:e}){this.verifyInternalOrigin(e),this.ensureRecord(this.record),this.record=Vm.removeAllOriginPermissions(this.record),this.updateWalletStore(this.record),this.emitter.emit("permissionsUpdated")}async removePermission({context:e,params:{origin:t,address:r}}){this.verifyInternalOrigin(e),this.ensureRecord(this.record),this.record=Vm.removePermission(this.record,{origin:t,address:r}),this.updateWalletStore(this.record)}allowedOrigin(e,t){if(!e||!e.origin)throw new Error("This method requires context");return e.origin===Ru||(this.record?.permissions[e.origin]?.addresses.includes(t)||!1)}async hasPermission({params:{address:e,origin:t},context:r}){return this.verifyInternalOrigin(r),this.record?.permissions[t]?.addresses.includes(e)||!1}async getOriginPermissions({context:e}){return this.verifyInternalOrigin(e),this.ensureRecord(this.record),this.record.permissions}async setCurrentAddress({params:{address:e},context:t}){this.verifyInternalOrigin(t),this.ensureRecord(this.record),this.record=Vm.setCurrentAddress(this.record,{address:e}),this.updateWalletStore(this.record);const{currentAddress:r}=this.record.walletManager;this.emitter.emit("currentAddressChange",[r].filter(fu))}readCurrentAddress(){return this.record?.walletManager.currentAddress||null}ensureCurrentAddress(){const e=this.readCurrentAddress();if(!e)throw new Error("Wallet is not initialized");return e}ensureRecord(e){if(!e)throw new Au}verifyInternalOrigin(e){if(e?.origin!==Ru&&e?.origin!==Ou)throw new yu}ensureStringOrigin(e){if(this.verifyInternalOrigin(e),"string"!=typeof e.origin)throw new Error("Origin must be a string")}async getCurrentAddress({context:e}){return this.verifyInternalOrigin(e),this.readCurrentAddress()}async uiGetWalletGroups({context:e}){this.verifyInternalOrigin(e);const t=this.record?.walletManager.groups;return t?Sm(t):null}async uiGetWalletGroup({params:{groupId:e},context:t}){this.verifyInternalOrigin(t);const r=this.record?.walletManager.groups.find((t=>t.id===e));return r?xm(r):null}async removeWalletGroup({params:{groupId:e},context:t}){if(this.verifyInternalOrigin(t),!this.record)throw new Au;this.record=Vm.removeWalletGroup(this.record,{groupId:e}),this.updateWalletStore(this.record)}async renameWalletGroup({params:{groupId:e,name:t},context:r}){if(this.verifyInternalOrigin(r),!this.record)throw new Au;this.record=Vm.renameWalletGroup(this.record,{groupId:e,name:t}),this.updateWalletStore(this.record)}async renameAddress({params:{address:e,name:t},context:r}){if(this.verifyInternalOrigin(r),!this.record)throw new Au;this.record=Vm.renameAddress(this.record,{address:e,name:t}),this.updateWalletStore(this.record)}async removeAddress({params:{address:e},context:t}){this.verifyInternalOrigin(t),this.ensureRecord(this.record),this.record=Vm.removeAddress(this.record,{address:e}),this.updateWalletStore(this.record)}async updateLastBackedUp({params:{groupId:e},context:t}){if(this.verifyInternalOrigin(t),this.ensureRecord(this.record),!e)throw new Error("Must provide groupId");this.record=Vm.updateLastBackedUp(this.record,{groupId:e,timestamp:Date.now()}),this.updateWalletStore(this.record)}async getNoBackupCount({context:e}){return this.verifyInternalOrigin(e),this.ensureRecord(this.record),this.record.walletManager.groups.filter((e=>e.walletContainer.seedType===Cm.mnemonic)).filter((e=>null==e.lastBackedUp)).length}async setPreference({context:e,params:{preferences:t}}){this.verifyInternalOrigin(e),this.ensureRecord(this.record),this.record=Vm.setPreference(this.record,{preferences:t}),this.updateWalletStore(this.record)}async getPreferences({context:e}){return this.verifyInternalOrigin(e),this.record?Vm.getPreferences(this.record):{}}async wallet_setWalletNameFlag({context:e,params:{flag:t,checked:r}}){this.verifyInternalOrigin(e),this.ensureRecord(this.record),this.record=r?Vm.setWalletNameFlag(this.record,{flag:t}):Vm.removeWalletNameFlag(this.record,{flag:t}),this.updateWalletStore(this.record)}async switchChain({params:e,context:t}){throw this.verifyInternalOrigin(t),new Error("switchChain is deprecated")}async switchChainForOrigin({params:{chain:e,origin:t},context:r}){this.verifyInternalOrigin(r),this.ensureRecord(this.record),this.setChainForOrigin(ql(e),t)}getChainId(){throw new Error("Wallet.getChainId is deprecated. Use Wallet.getChainIdForOrigin")}async requestChainId({context:e}){throw new Error("requestChainId is deprecated")}async getChainIdForOrigin({origin:e}){if(!this.record)return"0x1";const t=Vm.getChainForOrigin(this.record,{origin:e});return(await Ef.load()).getChainId(t)}async requestChainForOrigin({params:{origin:e},context:t}){this.verifyInternalOrigin(t),this.ensureRecord(this.record);return Vm.getChainForOrigin(this.record,{origin:e}).toString()}setChainId(e){throw new Error("setChainId is deprecated. Use setChainForOrigin instead")}setChainForOrigin(e,t){this.ensureRecord(this.record),this.record=Vm.setChainForOrigin(this.record,{chain:e,origin:t}),this.updateWalletStore(this.record),this.emitter.emit("chainChanged",e,t)}async getProvider(e){const t=await Ef.load(),r=t.getRpcUrlInternal(t.getChainById(e));return new a.providers.JsonRpcProvider(r)}async getSigner(e){const t=this.readCurrentAddress();if(!this.record)throw new Au;const r=t?Vm.getWalletByAddress(this.record,t):null;if(!r)throw new Error("Wallet is not initialized");const n=await this.getProvider(e);return Sg(r).connect(n)}async sendTransaction(e,{context:t,transactionOrigin:n}){if(this.verifyInternalOrigin(t),!e.from)throw new Error('"from" field is missing from the transaction object. Send from current address?');const i=this.ensureCurrentAddress();if(jm(e.from)!==jm(i))throw new Error('transaction "from" field is different from currently selected address');const o=await this.getChainIdForOrigin({origin:n}),s=Xm(e);if(s&&o!==s)throw new Error("chainId in transaction object is different from current chainId");null==s&&(console.warn("chainId field is missing from transaction object"),e.chainId=o);const a=Sf(e);kf(a)||await Rf(a);const c=await this.getSigner(o),u=await c.sendTransaction({...a,type:a.type||void 0}),l=(h=u,r(Of)(h,["r","s","v"]));var h;return Ym.emit("pendingTransactionCreated",l),l}async signAndSendTransaction({params:e,context:t}){this.verifyInternalOrigin(t),this.ensureStringOrigin(t);const[r,{origin:n}]=e;if(!r)throw new mu;return this.sendTransaction(r,{context:t,transactionOrigin:n})}async signTypedData_v4({params:{typedData:e},context:t}){if(this.verifyInternalOrigin(t),!e)throw new mu;const{chainId:r}=this.store.getState(),n=await this.getSigner(r),i=yg(e);return await n._signTypedData(i.domain,i.types,i.message)}async personalSign({params:[e],context:t}){if(this.verifyInternalOrigin(t),null==e)throw new mu;const{chainId:r}=this.store.getState(),n=await this.getSigner(r),i=(0,vg.toUtf8String)(e);return await n.signMessage(i)}async getPendingTransactions({context:e}){return this.verifyInternalOrigin(e),this.record?.transactions||[]}async logout(){chrome.storage.local.clear()}constructor(e,t){r(cu)(this,"pendingWallet",null),this.store=new hu({chainId:"0x1"}),this.emitter=uu(),this.id=e,this.walletStore=Zm,this.encryptionKey=t,this.seedPhraseEncryptionKey=null,this.record=null,this.walletStore.ready().then((()=>{this.syncWithWalletStore()})),Object.assign(window,{encrypt:eu.encrypt,decrypt:eu.decrypt}),this.publicEthereumController=new ty(this)}}class ty{async eth_accounts({context:e}){const t=this.wallet.readCurrentAddress();return t&&this.wallet.allowedOrigin(e,t)?[t]:[]}async eth_requestAccounts({context:e}){const t=this.wallet.readCurrentAddress();if(t&&this.wallet.allowedOrigin(e,t))return[t];if(!e?.origin)throw new Error("This method requires origin");const{origin:r}=e;return new Promise(((t,n)=>{Pu.open({route:"/requestAccounts",search:`?origin=${r}`,onResolve:async({address:n})=>{if(!n)throw new Error("Confirmation resolved with invalid arguments");const i=this.wallet.ensureCurrentAddress();jm(n)!==jm(i)&&await this.wallet.setCurrentAddress({params:{address:n},context:$m}),this.wallet.acceptOrigin(r,n);const o=await this.eth_accounts({context:e});t(o)},onDismiss:()=>{n(new vu("User Rejected the Request"))}})}))}async eth_chainId({context:e}){if(!e||!e.origin)throw new Error("Unknown sender origin");return this.wallet.getChainIdForOrigin({origin:e.origin})}async net_version({context:e}){const t=await this.eth_chainId({context:e});return String(parseInt(t))}async eth_sendTransaction({params:e,context:t}){const r=this.wallet.ensureCurrentAddress();if(!this.wallet.allowedOrigin(t,r))throw new yu;const n=e[0];if(!n)throw new mu;return Object.assign(window,{transactionToSend:n}),new Promise(((e,r)=>{Pu.open({route:"/sendTransaction",search:`?${new URLSearchParams({origin:t.origin,transaction:JSON.stringify(n)})}`,onResolve:t=>{e(t)},onDismiss:()=>{r(new wu)}})}))}async eth_signTypedData_v4({context:e,params:[t,r]}){const n=this.wallet.ensureCurrentAddress();if(!this.wallet.allowedOrigin(e,n))throw new yu;if(jm(t)!==jm(n))throw new Error("Address parameter is different from currently selected address");const i="string"==typeof r?r:JSON.stringify(r);return new Promise(((t,r)=>{Pu.open({route:"/signMessage",search:`?${new URLSearchParams({origin:e.origin,typedData:i,method:"eth_signTypedData_v4"})}`,onResolve:e=>{t(e)},onDismiss:()=>{r(new wu)}})}))}async eth_signTypedData({context:e}){throw new bu("eth_signTypedData: Not Implemented")}async eth_sign({context:e}){throw new bu("eth_sign: Not Implemented")}async personal_sign({params:e,context:t}){if(!e.length)throw new mu;const[r,n,i]=e,o=this.wallet.ensureCurrentAddress();if(n&&jm(n)!==jm(o))throw new Error("Address parameter is different from currently selected address");if(!this.wallet.allowedOrigin(t,o))throw new yu;return new Promise(((e,n)=>{Pu.open({route:"/signMessage",search:`?${new URLSearchParams({origin:t.origin,message:r,method:"personal_sign"})}`,onResolve:t=>{e(t)},onDismiss:()=>{n(new wu)}})}))}async wallet_switchEthereumChain({params:e,context:t}){const r=this.wallet.readCurrentAddress();if(!r)throw new Error("Wallet is not initialized");if(!this.wallet.allowedOrigin(t,r))throw new yu;const{origin:n}=t,{chainId:i}=e[0],o=a.utils.hexValue(i);if(o===await this.wallet.getChainIdForOrigin({origin:n}))return null;const s=(await Ef.load()).getChainById(o);return this.wallet.setChainForOrigin(s,n),null}async wallet_getWalletNameFlags({context:e}){return(await this.wallet.getPreferences({context:$m})).walletNameFlags||[]}generatePermissionResponse(e){if(e?.[0]&&"eth_accounts"in e[0])return[{parentCapability:"eth_accounts"}];throw new mu}getIsAllowedOrigin({context:e}){const t=this.wallet.readCurrentAddress();return!!t&&this.wallet.allowedOrigin(e,t)}async wallet_requestPermissions({context:e,params:t}){return await this.eth_requestAccounts({context:e}),this.generatePermissionResponse(t)}async wallet_getPermissions({context:e}){return this.getIsAllowedOrigin({context:e})?[{parentCapability:"eth_accounts"}]:[]}constructor(e){this.wallet=e}}function ry({password:e}){return e.length<6?{valid:!1,message:"Password must have at least 6 characters"}:{valid:!0,message:""}}async function ny({password:e,salt:t}){return await au(`${t}:${e}`)}class iy extends(r(Dc)){static async writeCurrentUser(e){await Nc("currentUser",e)}static async readCurrentUser(){return Ic("currentUser")}static async removeCurrentUser(){await Tc("currentUser")}static async ensureUserAndWallet(){const e=await iy.readCurrentUser(),t=await Zm.getSavedState();e&&!t?.[e.id]&&await iy.removeCurrentUser()}static async createUser(e){const t=ry({password:e});if(!t.valid)throw new Error(t.message);return{id:Lc(36),salt:(0,eu.generateSalt)()}}reset(){this.user=null,this.encryptionKey=null,this.wallet=new ey("temporary",null),this.emit("reset")}async verifyPassword(e,t){const r=await ny({password:t,salt:e.id});try{return await this.wallet.verifyCredentials({params:{id:e.id,encryptionKey:r}}),!0}catch(e){return!1}}async login(e,t){if(!await this.verifyPassword(e,t))throw new Error("Incorrect password");await this.setNewUser(e,t)}async setNewUser(e,t){this.user=e,this.encryptionKey=await ny({salt:e.id,password:t});const r=await _m({salt:e.salt,password:t});await this.wallet.updateCredentials({params:{id:e.id,encryptionKey:this.encryptionKey,seedPhraseEncryptionKey:r}}),this.emit("authenticated")}getEncryptionKey(){return this.encryptionKey}getUser(){return this.user}getCurrentWallet(){return this.wallet}hasActivePasswordSession(){return this.wallet.hasSeedPhraseEncryptionKey()}expirePasswordSession(){this.wallet.removeSeedPhraseEncryptionKey()}async saveUserAndWallet(){if(!this.user||!this.wallet||"temporary"===this.wallet.id)throw new Error("Cannot persist: invalid session state");await iy.writeCurrentUser(this.user),await this.wallet.savePendingWallet();const e=await Zm.getSavedState();if(this.user){const{id:t}=this.user;Zm.deleteMany(Object.keys(e).filter((e=>e!==t)))}}logout(){return this.reset()}constructor(){super(),this.user=null,this.encryptionKey=null,this.wallet=new ey("temporary",null)}}Object.assign(window,{getSHA256HexDigest:au,Account:iy});class oy{async isAuthenticated(){return null!=this.account.getUser()}async getExistingUser(){const e=await iy.readCurrentUser();return e?{id:e.id}:null}async login({params:{user:e,password:t}}){const r=await iy.readCurrentUser();if(!r||r.id!==e.id)throw new Error(`User ${e.id} not found`);if(await this.account.verifyPassword(r,t))return await this.account.login(r,t),e;throw new Error("Incorrect password")}async verify({params:{user:e,password:t}}){const r=await iy.readCurrentUser();if(!r||r.id!==e.id)throw new Error(`User ${e.id} not found`);if(await this.account.verifyPassword(r,t))return!0;throw new Error("Incorrect password")}async hasActivePasswordSession(){return this.account.hasActivePasswordSession()}async createUser({params:{password:e}}){const t=await iy.createUser(e);return await this.account.setNewUser(t,e),{id:t.id}}async saveUserAndWallet(){return this.account.saveUserAndWallet()}async logout(){return this.account.logout()}constructor(e){this.account=e}}function sy(e,t,r){const n=e.findIndex((e=>e[r]===t[r]));-1!==n?e.splice(n,1,t):e.push(t)}class ay extends hu{constructor(e){super(e),this.on("change",(e=>{Nc("transactions",e)}))}}class cy{async initialize(){const e=await Ic("transactions")??[];this.transactionsStore=new ay(e),this.addListeners()}addListeners(){Ym.on("pendingTransactionCreated",(e=>{const t={transaction:e,hash:e.hash,timestamp:Date.now()};this.waitForTransaction(t),this.transactionsStore.setState((e=>Am(e,(e=>{e.push(t)}))))}))}async waitForTransaction(e){const t=await Ef.load(),{hash:r,transaction:n}=e,{chainId:i}=n,o=a.utils.hexValue(i),s=t.getRpcUrlInternal(t.getChainById(o)),c=new a.providers.JsonRpcProvider(s),u=await async function(e,t){if("0x123123"===e){const e={blockHash:"0xe485aa7e58d3338909fdc77fc7445da5f552e260dc23bdfe285a2adbe54b4f64",blockNumber:31658369,byzantium:!0,confirmations:1,contractAddress:"",cumulativeGasUsed:{},effectiveGasPrice:{},from:"0x42b9dF65B219B3dD36FF330A4dD8f327A6Ada990",gasUsed:{},logs:[],logsBloom:"0x002000...",status:1,to:"0xd7F1Dd5D49206349CaE8b585fcB0Ce3D96f1696F",transactionHash:"0x123123",transactionIndex:6,type:2};return new Promise((t=>setTimeout((()=>t(e)),6e3)))}return t.waitForTransaction(e)}(r,c);Ym.emit("transactionMined",u),this.upsertTransaction({...e,receipt:u})}upsertTransaction(e){this.transactionsStore.setState((t=>Am(t,(t=>{sy(t,e,"hash")}))))}constructor(){this.transactionsStore=new ay([])}}Object.assign(window,{testAddTransaction:function(){Ym.emit("pendingTransactionCreated",{accessList:[],chainId:137,confirmations:0,data:"0x83d13e0100000000000...",from:"0x42b9dF65B219B3dD36FF330A4dD8f327A6Ada990",gasLimit:{},gasPrice:null,hash:"0x123123",maxFeePerGas:{},maxPriorityFeePerGas:{},nonce:239,to:"0xd7F1Dd5D49206349CaE8b585fcB0Ce3D96f1696F",type:2,value:{}})}});let uy=!1;class ly extends(r(Dc)){async send(e,t){if(!(0,du.isJsonRpcRequest)(e))return console.log("not a request:",e),Promise.reject("not a request");const r=await Ef.load(),n=this.walletGetter(),i=await n.publicEthereumController.eth_chainId({context:t}),o=r.getChainById(i),s=r.getRpcUrlInternal(o);return fetch(s,{method:"post",body:JSON.stringify(e)}).then((e=>e.json())).then((e=>(this.emit("payload",e),e)),(t=>{const r=(0,du.formatJsonRpcError)(e.id,t.message);return this.emit("payload",r),r}))}constructor(e){super(),this.walletGetter=e}}class hy{addListener(e,t){if("disconnect"===e)return this.listeners.onDisconnect.add(t),()=>{this.listeners.onDisconnect.delete(t)};throw new Error("Unsupported event")}register(e){var t,r;t=this.ports,r=e,t.includes(r)||t.push(r),e.onMessage.addListener(this.listener);const n=()=>{e.onMessage.removeListener(this.listener);for(const t of this.listeners.onDisconnect)t(e);this.unregister(e),e.onDisconnect.removeListener(n)};e.onDisconnect.addListener(n)}unregister(e){!function(e,t){const r=e.indexOf(t);-1!==r&&e.splice(r,1)}(this.ports,e)}getActivePorts(){return this.ports}addMessageHandler(e){this.handlers.push(e)}postMessage({portName:e,message:t}){const r=this.ports.find((t=>t.name===e));r&&r.postMessage(t)}constructor(){this.ports=[],this.handlers=[],this.listener=(e,t)=>{for(const r of this.handlers){if(r(t,e))break}},this.listeners={onDisconnect:new Set}}}s=o("8WZ8I");function fy(e,t){const r=(0,du.formatJsonRpcResult)(e,t);return void 0===r.result&&(r.result=null),r}function dy(e,t){return t&&"string"!=typeof t?{id:e,jsonrpc:"2.0",error:t}:(0,du.formatJsonRpcError)(e,t)}function py(e,t){const r=Object.getPrototypeOf(e);return Object.prototype.hasOwnProperty.call(e,t)||Object.prototype.hasOwnProperty.call(r,t)}function gy(e,t,r,n){if((0,du.isJsonRpcPayload)(t)&&(0,du.isJsonRpcRequest)(t)){const{method:i,params:o,id:s}=t;if(!py(r,i)||"function"!=typeof r[i])return void e.postMessage(dy(s,new mu(i?`Unsupported method: ${i}`:void 0)));r[i].call(r,{params:o,context:n}).then((e=>fy(s,e)),(e=>dy(s,"code"in e?e:e.message))).then((t=>{e.postMessage(t)}))}}function my(e){if(function(e){return!!e&&"origin"in e}(e.sender))return e.sender?.origin;if(e.sender?.url){return new URL(e.sender.url).origin}}function yy(e){return{origin:my(e),tabId:e.sender?.tab?.id}}function vy({controller:e,check:t}){return function(r,n){if(!t(r))return;const i=yy(r);return gy(r,n,e,i),!0}}s=o("8WZ8I");function wy(e){return function(t,n){if(t.name!==`${r(s).runtime.id}/ethereum`)return;const i=yy(t);return(0,du.isJsonRpcPayload)(n)&&(0,du.isJsonRpcRequest)(n)&&Boolean(n.method)?(e.send(n,i).then((e=>{t.postMessage(e)})),!0):void 0}}function by({account:e}){const t=[];function r(e){t.push(e.emitter.on("recordUpdated",(()=>{Ym.emit("accountsChanged")})),e.emitter.on("currentAddressChange",(()=>{Ym.emit("accountsChanged")})),e.emitter.on("permissionsUpdated",(()=>{Ym.emit("accountsChanged")})),e.emitter.on("chainChanged",(()=>{Ym.emit("chainChanged")})))}r(e.getCurrentWallet()),e.on("authenticated",(async()=>{Ym.emit("accountsChanged"),Ym.emit("chainChanged")})),e.on("reset",(()=>{t.forEach((e=>e())),t.length=0,r(e.getCurrentWallet()),Ym.emit("accountsChanged")}))}s=o("8WZ8I");class Ay{cleanup(){this.disposers.forEach((e=>e())),this.disposers=[]}getClientPorts(){return this.getActivePorts().filter((e=>e.name===`${r(s).runtime.id}/ethereum`))}startListening(){this.disposers.push(Ym.on("accountsChanged",(()=>{this.getClientPorts().forEach((async e=>{const t=this.account.getCurrentWallet(),r=await t.publicEthereumController.eth_accounts({context:yy(e)});e.postMessage({type:"ethereumEvent",event:"accountsChanged",value:r})}))}))),this.disposers.push(Ym.on("chainChanged",(async()=>{this.getClientPorts().forEach((async e=>{const t=this.account.getCurrentWallet(),r=await t.publicEthereumController.eth_chainId({context:yy(e)});e.postMessage({type:"ethereumEvent",event:"chainChanged",value:r})}))})))}stopListening(){this.cleanup?.()}constructor({account:e,getActivePorts:t}){this.account=e,this.getActivePorts=t,this.disposers=[]}}class Ey{async set({params:{key:e,value:t}}){this.map.set(e,t)}async get({params:{key:e}}){return this.map.get(e)}async getAll(){return Object.fromEntries(this.map)}constructor(){this.map=new Map}}s=o("8WZ8I");class xy{request(e,t,r){const n=(0,du.formatJsonRpcRequest)(e,t,r);return this.port.postMessage(n),this.getPromise(n.id)}getPromise(e){return new Promise(((t,r)=>{const n=i=>{(0,du.isJsonRpcPayload)(i)&&(0,du.isJsonRpcResponse)(i)&&i.id===e&&((0,du.isJsonRpcResult)(i)?t(i.result):r(i.error),this.port.onMessage.removeListener(n))};this.port.onMessage.addListener(n)}))}constructor({name:e}){this.port=chrome.runtime.connect({name:e})}}const Sy=new xy({name:`${r(s).runtime.id}/wallet`}),Cy=new xy({name:"accountPublicRPC"}),ky=new xy({name:"memoryCacheRPC"});new class extends xy{confirm(e,t){return this.port.postMessage({id:e,result:t})}reject(e){this.port.postMessage({id:e,error:new vu})}}({name:"window"});Object.assign(window,{walletPort:Sy,accountPublicRPCPort:Cy});new class{getChangeHandler(e,t){return()=>{this.safeWriteEntry(e,t)}}safeWriteEntry(e,t){return t.getState().status===mh.ok&&ky.request("set",{key:e,value:t.getState()}),Promise.resolve()}get(e){return this.map.get(e)||null}set(e,t){this.map.set(e,t),t.on("change",this.getChangeHandler(e,t)),this.safeWriteEntry(e,t)}remove(){throw new Error("Not implemented")}async load(){ky.request("getAll").then((e=>{for(const t in e){const r=e[t];r.isStale=!0,r.hasSubscribers=!1;const n=new kh(r);n.on("change",this.getChangeHandler(t,n)),this.map.set(t,n)}}))}constructor(){this.map=new Map}};function _y(e){let t;Ym.on("userActivity",(()=>{clearTimeout(t),t=setTimeout((()=>{e()}),864e5)}))}var Py=o("b8Dez");t.Buffer=t.Buffer||r(Py).Buffer,Object.assign(window,{ethers:a}),yf.configure({url:"wss://api-v4.zerion.io/",apiToken:"Zerion.0JOY6zZTTw6yl5Cvz9sdmXc7d5AhzVMG"}),Ef.load(),async function(){if(uy)throw new Error("Initialize function should be run only once");uy=!0,await Fc(),await iy.ensureUserAndWallet();const e=new iy,t=new oy(e),r=new cy;return await r.initialize(),Object.assign(window,{account:e,Account:iy,accountPublicRPC:t,transactionService:r}),{account:e,accountPublicRPC:t,transactionService:r}}().then((({account:e,accountPublicRPC:t})=>{const n=new ly((()=>e.getCurrentWallet())),i=new Ey,o=new hy;var a;o.addMessageHandler((a=()=>e.getCurrentWallet(),function(e,t){if(!(0,du.isJsonRpcPayload)(t)||!(0,du.isJsonRpcRequest)(t))return!1;const n=yy(e),{method:i}=t;function o(r){return!(!py(r,i)||"function"!=typeof r[i]||(gy(e,t,r,n),0))}return e.name===`${r(s).runtime.id}/ethereum`?o(a().publicEthereumController):e.name===`${r(s).runtime.id}/wallet`&&o(a())})),o.addMessageHandler(vy({check:e=>"accountPublicRPC"===e.name,controller:t})),o.addMessageHandler(vy({check:e=>"memoryCacheRPC"===e.name,controller:i})),o.addMessageHandler((function(e,t){if("window"===e.name){if(null!=(r=t)&&"id"in r&&"result"in r)Pu.emit("resolve",t);else if(function(e){return null!=e&&"id"in e&&"error"in e}(t))Pu.emit("reject",t);else{if(!function(e){return null!=e&&"id"in e&&"method"in e}(t))return!1;"closeCurrentWindow"===t.method&&Pu.closeCurrentWindow()}var r;return!0}})),o.addMessageHandler(wy(n)),by({account:e});new Ay({account:e,getActivePorts:()=>o.getActivePorts()}).startListening(),chrome.runtime.onConnect.addListener((e=>{(function(e){return"chrome-extension:"===(e.sender?.url?new URL(e.sender.url).protocol:null)||e.name===`${r(s).runtime.id}/ethereum`})(e)&&o.register(e)})),o.addListener("disconnect",(t=>{t.name===`${r(s).runtime.id}/wallet`&&e.expirePasswordSession()})),e.on("reset",(()=>{o.postMessage({portName:`${chrome.runtime.id}/wallet`,message:"session-logout"})})),_y((()=>{e.logout()}))}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
